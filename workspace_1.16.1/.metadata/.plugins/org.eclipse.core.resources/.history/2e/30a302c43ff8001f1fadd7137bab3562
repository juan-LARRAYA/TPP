/*
 * bms.c
 *
 *  Created on: Mar 2, 2025
 *      Author: apple
 */

#include "bms.h"
#include "i2c.h"
#include "usart.h"
#include <stdio.h>
#include <string.h>

#define


HAL_StatusTypeDef BQ76905_WriteSubcommand(BQ76905_Config *bms, uint16_t subcmd) {
    uint8_t tx[3] = {0x3E, (uint8_t)(subcmd & 0xFF), (uint8_t)(subcmd >> 8)};
    return HAL_I2C_Master_Transmit(bms->hi2c, BQ76905_I2C_ADDR, tx, 3, 100);
}

HAL_StatusTypeDef BQ76905_WriteRegister(BQ76905_Config *bms, uint16_t reg, uint8_t *data, uint8_t len) {
    uint8_t tx[32];
    tx[0] = 0x3E;
    tx[1] = (uint8_t)(reg & 0xFF);
    tx[2] = (uint8_t)(reg >> 8);
    memcpy(&tx[3], data, len);
    return HAL_I2C_Master_Transmit(bms->hi2c, BQ76905_I2C_ADDR, tx, len + 3, 100);
}

HAL_StatusTypeDef BQ76905_WriteChecksum(BQ76905_Config *bms, uint16_t reg, uint8_t *data, uint8_t len) {
    uint8_t sum = (uint8_t)(reg & 0xFF) + (uint8_t)(reg >> 8);
    for (uint8_t i = 0; i < len; i++) {
        sum += data[i];
    }
    uint8_t chksum = ~sum;
    uint8_t lengthVal = len + 4;

    uint8_t tx[3] = {0x60, chksum, lengthVal};
    return HAL_I2C_Master_Transmit(bms->hi2c, BQ76905_I2C_ADDR, tx, 3, 100);
}

HAL_StatusTypeDef BQ76905_ReadRegister(BQ76905_Config *bms, uint8_t reg, uint8_t *rxData, uint8_t len) {
    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(bms->hi2c, BQ76905_I2C_ADDR, &reg, 1, 100);
    if (ret != HAL_OK) return ret;
    return HAL_I2C_Master_Receive(bms->hi2c, BQ76905_I2C_ADDR, rxData, len, 100);
}

void BQ76905_Configure(BQ76905_Config *bms) {
    HAL_StatusTypeDef ret;
    uint8_t data[2];

    // 1. Entrar a CONFIG_UPDATE
    BQ76905_WriteSubcommand(bms, 0x0090);

    // 2. Configurar VCell Mode a 2 celdas en 0x901B
    data[0] = 0x02;
    BQ76905_WriteRegister(bms, 0x901B, data, 1);
    BQ76905_WriteChecksum(bms, 0x901B, data, 1);

    // 3. Configurar "Enabled Protections A" a 0xE1 en 0x9024
    data[0] = 0xE1;
    BQ76905_WriteRegister(bms, 0x9024, data, 1);
    BQ76905_WriteChecksum(bms, 0x9024, data, 1);

    // 4. Configurar "Cell Undervoltage Threshold" a 0x0BB8 en 0x902E
    data[0] = 0xB8;
    data[1] = 0x0B;
    BQ76905_WriteRegister(bms, 0x902E, data, 2);
    BQ76905_WriteChecksum(bms, 0x902E, data, 2);

    // 5. Salir de CONFIG_UPDATE
    BQ76905_WriteSubcommand(bms, 0x0092);

    // 6. (Opcional) Habilitar FET_EN con subcomando 0x0022
    // BQ76905_WriteSubcommand(bms, 0x0022);

    // 7. Forzar manualmente DSG_ON
    data[0] = 0x01;
    BQ76905_WriteRegister(bms, 0x68, data, 1);

    // 8. Leer bit DSG en Battery Status (0x12)
    uint8_t rx[2];
    BQ76905_ReadRegister(bms, 0x12, rx, 2);

    // 9. Habilitar Alarm Enable en 0x66 con el valor 0x0060
    data[0] = 0x60;
    data[1] = 0x00;
    BQ76905_WriteRegister(bms, 0x66, data, 2);
}
