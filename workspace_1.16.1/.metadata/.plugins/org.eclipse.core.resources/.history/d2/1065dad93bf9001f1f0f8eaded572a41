
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "i2c.h"
#include "tim.h"
#include "usart.h"
#include "usb_otg.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "mppt.h"
#include "bms.h"
#include "pdu.h"


/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define DELAY 4000

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */





/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */


  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC1_Init();
  MX_ADC2_Init();
  MX_ADC3_Init();
  MX_I2C3_Init();
  MX_TIM2_Init();
  MX_TIM4_Init();
  MX_TIM5_Init();
  MX_UART4_Init();
  MX_USB_OTG_FS_PCD_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */

//	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
//	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
//	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);

	//MPPT Variables

	MPPT_Channel mpptX = {
		.hadc = &hadc2,
		.v_channel = ADC_CHANNEL_11,
		.i_channel = ADC_CHANNEL_10,
		.htim = &htim4,
		.tim_channel = TIM_CHANNEL_4,
		.voltage = 0,    // Inicializar como indefinido
		.current = -1,    // Inicializar como indefinido
		.power = -1,      // Inicializar como indefinido
		.prevPower = 0,
		.dutyCycle = 255 * 0  // 0% de 255
	};

	MPPT_Channel mpptY = {
	    .hadc = &hadc1,
	    .v_channel = ADC_CHANNEL_13,
	    .i_channel = ADC_CHANNEL_12,
	    .htim = &htim2,
	    .tim_channel = TIM_CHANNEL_1,
		.voltage = -1,    // Inicializar como indefinido
		.current = -1,    // Inicializar como indefinido
		.power = -1,      // Inicializar como indefinido
		.prevPower = 0,
		.dutyCycle = 255 * 0  // 0% de 255
	};

	MPPT_Channel mpptZ = {
	    .hadc = &hadc3,
	    .v_channel = ADC_CHANNEL_2,
	    .i_channel = ADC_CHANNEL_1,
	    .htim = &htim5,
	    .tim_channel = TIM_CHANNEL_4,
		.voltage = -1,    // Inicializar como indefinido
		.current = -1,    // Inicializar como indefinido
		.power = -1,      // Inicializar como indefinido
		.prevPower = 0,
		.dutyCycle = 255 * 0  // 0% de 255
	};

	// PDU Variables

	PDU_Channel pdu_V5 = {
	    .hadc = &hadc1,
	    .v_channel = ADC_CHANNEL_14,  // Canal ADC para voltaje de V5
	    .i_channel = ADC_CHANNEL_15,  // Canal ADC para corriente de V5
	    .voltage = 0,
	    .current = 0,
	    .label = "V5",
	    .gpio_port = GPIOB,  // Puerto GPIO de salida
	    .gpio_pin = GPIO_PIN_2  // Pin de control para 5V BIS
	};

	PDU_Channel pdu_V5bis = {
	    .hadc = &hadc1,
	    .v_channel = ADC_CHANNEL_5,  // Canal ADC para voltaje de V5bis
	    .i_channel = ADC_CHANNEL_4,  // Canal ADC para corriente de V5bis
	    .voltage = 0,
	    .current = 0,
	    .label = "V5bis",
	    .gpio_port = GPIOB,
	    .gpio_pin = GPIO_PIN_12  // Pin de control para 5V BIS
	};

	PDU_Channel pdu_V3 = {
	    .hadc = &hadc2,
	    .v_channel = ADC_CHANNEL_6,  // Canal ADC para voltaje de V3
	    .i_channel = ADC_CHANNEL_7,  // Canal ADC para corriente de V3
	    .voltage = 0,
	    .current = 0,
	    .label = "V3",
	    .gpio_port = GPIOB,
	    .gpio_pin = GPIO_PIN_11  // Pin de control para 3.3V
	};

	PDU_Channel pdu_V3bis = {
	    .hadc = &hadc2,
	    .v_channel = ADC_CHANNEL_8,  // Canal ADC para voltaje de V3bis
	    .i_channel = ADC_CHANNEL_9,  // Canal ADC para corriente de V3bis
	    .voltage = 0,
	    .current = 0,
	    .label = "V3bis",
	    .gpio_port = GPIOB,
	    .gpio_pin = GPIO_PIN_10  // Pin de control para 3.3V BIS
	};

	PDU_Channel pdu_BatOut = {
	    .voltage = 0,
	    .current = 0,
	    .label = "VBatOut",
	    .gpio_port = GPIOA,
	    .gpio_pin = GPIO_PIN_9  // Pin de control para 3.3V BIS
	};

	// BMS Variables
	BQ76905_Device bms = { .hi2c = &hi2c1 };


	//Configuro las salidas
	//Pruebas de salidas
    enablePDU(&pdu_V3bis);				//a veces prende y a veces no
    enablePDU(&pdu_V3);
    enablePDU(&pdu_V5bis); 				//a veces prende y a veces no
    //enablePDU(&pdu_V5);		//5V  		//NO ANDA Y METE RUIDO
    enablePDU(&pdu_BatOut);


    BQ76905_Configure(&bms);




  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  	//MPPT
        updateMPPT(&mpptX);
        updateMPPT(&mpptY);
        updateMPPT(&mpptZ);
		// Imprimir datos al puerto serie
        printMPPTData(&mpptX, "VX_in"); // Imprimir valores de MPPT para el eje X
        printMPPTData(&mpptY, "VY_in"); // Imprimir valores de MPPT para el eje Y
        printMPPTData(&mpptZ, "VZ_in"); // Imprimir valores de MPPT para el eje Z

		//PDU
        updatePDU(&pdu_V5);
        updatePDU(&pdu_V5bis);
        updatePDU(&pdu_V3);
        updatePDU(&pdu_V3bis);
        //updatePDU(&pdu_BatOut); //fallo

		//COMUNICACION BQ76905
			//limites de voltage UV Y OV
			//limites de corrinte (over current in discharge and OCIC)
			//short circuit detection
			//proteccion por temperatura alta o baja en carga y descarga
        BQ76905_ReadData(&bms);
        sendBMSDataI2C(&bms);


		//CALENTAMIENTO Y CONTROL DE TEMPERATURA

		//MODO BAJO CONSUMO

		//ALMACENAMIENTO EN FLASH DE VARIBLES

      	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
    	//HAL_Delay(DELAY);
      	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
    	HAL_Delay(DELAY);


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 96;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
