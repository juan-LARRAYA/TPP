/*
 * mppt.c
 *
 *  Created on: Mar 2, 2025
 *      Author: apple
 */

#include "mppt.h"
#include "adc.h"
#include "tim.h"
#include "i2c.h"


#define MAX_DUTY 255




void mppt_algorithm(uint8_t *dutyCycle, const float *power, float *prevPower) {
    const uint8_t deltaDuty = MAX_DUTY / 100;  // Incremento/decremento del Duty Cycle

    if (*power > *prevPower) {
        if (*dutyCycle <= MAX_DUTY - deltaDuty) {
            *dutyCycle += deltaDuty;
        } else {
            *dutyCycle = MAX_DUTY; // Límite máximo
        }
    } else {
        if (*dutyCycle >= deltaDuty) {
            *dutyCycle -= deltaDuty;
        } else {
            *dutyCycle = 0; // Límite mínimo
        }
    }

    *prevPower = *power; // Actualizar `prevPower` con el nuevo valor
}



void updateMPPT(MPPT_Channel *mppt) {
    // Leer valores de voltaje y corriente del ADC
    mppt->voltage = readADC(mppt->hadc, mppt->v_channel);
    mppt->current = readADC(mppt->hadc, mppt->i_channel);

    // Calcular potencia
    mppt->power = mppt->voltage * mppt->current;

    // Aplicar algoritmo MPPT
    mppt_algorithm(&mppt->dutyCycle, &mppt->power, &mppt->prevPower);

    // Actualizar el PWM en el canal correspondiente
    __HAL_TIM_SET_COMPARE(mppt->htim, mppt->tim_channel, mppt->dutyCycle);
}


void printMPPTData(MPPT_Channel *mppt, const char *label) {
    char buffer[STR_LEN];
    snprintf(buffer, STR_LEN, "%s: %.2f V, %.2f A, %.2f W\n",
             label, mppt->voltage, mppt->current, mppt->power);
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
}



