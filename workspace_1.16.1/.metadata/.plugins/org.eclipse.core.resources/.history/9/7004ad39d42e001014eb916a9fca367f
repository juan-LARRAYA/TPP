
#include "bms.h"
#include "i2c.h"
#include "usart.h"

// Función para enviar un subcomando al BQ29330 (no requiere checksum)
HAL_StatusTypeDef BQ29330_WriteSubcommand(BQ29330_Device *bms, BQ29330_Registers subcmd) {
    uint8_t tx[3] = {BASE_SUBCOMMAND_ADDRESS, (uint8_t)(subcmd & 0xFF), (uint8_t)(subcmd >> 8)};
    return HAL_I2C_Master_Transmit(bms->hi2c, BQ29330_I2C_ADDR, tx, 3, HAL_MAX_DELAY);
}


// Función para escribir en un registro (requiere checksum si es de memoria)
HAL_StatusTypeDef BQ29330_WriteRegister(BQ29330_Device *bms, BQ29330_Registers reg, uint8_t *data, uint8_t len) {
    uint8_t tx[32];
    tx[0] = BASE_SUBCOMMAND_ADDRESS; // Dirección base
    tx[1] = (uint8_t)(reg & 0xFF);  // LSB del registro
    tx[2] = (uint8_t)(reg >> 8);    // MSB del registro

    // Copiar datos al buffer de transmisión
    memcpy(&tx[3], data, len);

    // Enviar datos al registro
    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(bms->hi2c, BQ29330_I2C_ADDR, tx, len + 3, HAL_MAX_DELAY);
    if (ret != HAL_OK) return ret;

    // Si el registro pertenece a la memoria, escribir checksum
    return BQ29330_WriteChecksum(bms, reg, data, len);
}



// Función para leer un registro
HAL_StatusTypeDef BQ29330_ReadRegister(BQ29330_Device *bms, BQ29330_Registers reg, uint8_t *rxData, uint8_t len) {
    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(bms->hi2c, BQ29330_I2C_ADDR, (uint8_t*)&reg, 1, HAL_MAX_DELAY);
    if (ret != HAL_OK) return ret;
    return HAL_I2C_Master_Receive(bms->hi2c, BQ29330_I2C_ADDR, rxData, len, HAL_MAX_DELAY);
}


// Función para configurar el BQ29330
void BQ29330_Configure(BQ29330_Device *bms) {
    uint8_t data[3];


}

// Función para leer datos desde el BQ29330
void BQ29330_ReadData(BQ29330_Device *bms) {
    uint8_t rx[6]; // Buffer temporal de lectura
    BQ29330_ReadRegister(bms, INTERNAL_OVERTEMP_THRESHOLD, &bms->internal_overtemp_threshold, 1);
}

void sendBMSDataI2C(BQ29330_Device *bms) {
    char buffer[BUFFER_SIZE];

    // 🟢 Encabezado
    snprintf(buffer, BUFFER_SIZE, "\n--- Datos del BMS ---\n");
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    HAL_Delay(10);

    // 🔹 Protección por Temperatura
    snprintf(buffer, BUFFER_SIZE, "Overtemp Charge: %.2f °C\n", bms->overtemp_charge_threshold * 0.1);
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
    HAL_Delay(10);

    // 🟢 Fin del mensaje
    snprintf(buffer, BUFFER_SIZE, "--------------------------\n");
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
}


void INA219_Init(void)
{
    // Aquí podrías configurar registros de calibración si fuera necesario
    // Por defecto, se asume calibración 32V, 2A
}

float INA219_ReadBusVoltage(void)
{
    uint8_t buffer[2];
    uint16_t raw;

    HAL_I2C_Mem_Read(&hi2c1, INA219_ADDRESS, INA219_REG_BUS_VOLTAGE, 1, buffer, 2, HAL_MAX_DELAY);
    raw = (buffer[0] << 8) | buffer[1];
    raw >>= 3;  // los 3 bits LSB no son válidos
    return raw * 0.004f;  // resolución 4 mV
}

float INA219_ReadShuntVoltage(void)
{
    uint8_t buffer[2];
    int16_t raw;

    HAL_I2C_Mem_Read(&hi2c1, INA219_ADDRESS, INA219_REG_SHUNT_VOLTAGE, 1, buffer, 2, HAL_MAX_DELAY);
    raw = (int16_t)((buffer[0] << 8) | buffer[1]);
    return raw * 0.01f;  // resolución 10 uV
}

float INA219_ReadCurrent(void)
{
    uint8_t buffer[2];
    int16_t raw;

    HAL_I2C_Mem_Read(&hi2c1, INA219_ADDRESS, INA219_REG_CURRENT, 1, buffer, 2, HAL_MAX_DELAY);
    raw = (int16_t)((buffer[0] << 8) | buffer[1]);
    return raw * 1.0f;  // depende de la calibración
}

float INA219_ReadPower(void)
{
    uint8_t buffer[2];
    uint16_t raw;

    HAL_I2C_Mem_Read(&hi2c1, INA219_ADDRESS, INA219_REG_POWER, 1, buffer, 2, HAL_MAX_DELAY);
    raw = (buffer[0] << 8) | buffer[1];
    return raw * 20.0f;  // resolución depende de calibración: 20 mW/LSB para default
}


