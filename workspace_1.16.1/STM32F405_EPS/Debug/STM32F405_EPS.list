
STM32F405_EPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001006c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  08010200  08010200  00011200  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080106b0  080106b0  000122d0  2**0
                  CONTENTS
  4 .ARM          00000008  080106b0  080106b0  000116b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080106b8  080106b8  000122d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080106b8  080106b8  000116b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080106bc  080106bc  000116bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d0  20000000  080106c0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000122d0  2**0
                  CONTENTS
 10 .bss          000020e0  200002d0  200002d0  000122d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200023b0  200023b0  000122d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000122d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b818  00000000  00000000  00012300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e95  00000000  00000000  0002db18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001880  00000000  00000000  000319b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001313  00000000  00000000  00033230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000250ca  00000000  00000000  00034543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020958  00000000  00000000  0005960d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d60bb  00000000  00000000  00079f65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00150020  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007a34  00000000  00000000  00150064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00157a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080101e4 	.word	0x080101e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	080101e4 	.word	0x080101e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <readADC>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t readADC(ADC_HandleTypeDef *hadc, uint32_t channel) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = { 0 };
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]

    // Configurar el canal que se desea leer
    sConfig.Channel = channel;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 0x00000001U; // Reemplazado con el valor correcto
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = 0x00000000U; // Reemplazado con el valor correcto
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]

    if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK) {
 8000efc:	f107 0308 	add.w	r3, r7, #8
 8000f00:	4619      	mov	r1, r3
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f001 fd8a 	bl	8002a1c <HAL_ADC_ConfigChannel>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <readADC+0x3a>
        Error_Handler(); // Maneja errores de configuración
 8000f0e:	f000 fe67 	bl	8001be0 <Error_Handler>
    }

    // Inicia la conversión del ADC
    HAL_ADC_Start(hadc);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f001 fc18 	bl	8002748 <HAL_ADC_Start>

    // Espera hasta que la conversión termine
    if (HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY) == HAL_OK) {
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f001 fce5 	bl	80028ec <HAL_ADC_PollForConversion>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d113      	bne.n	8000f50 <readADC+0x78>
        // Retorna el valor convertido
        return HAL_ADC_GetValue(hadc) * (3.3 / 4095.0);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f001 fd6a 	bl	8002a02 <HAL_ADC_GetValue>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fae7 	bl	8000504 <__aeabi_ui2d>
 8000f36:	a30a      	add	r3, pc, #40	@ (adr r3, 8000f60 <readADC+0x88>)
 8000f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3c:	f7ff fb5c 	bl	80005f8 <__aeabi_dmul>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4610      	mov	r0, r2
 8000f46:	4619      	mov	r1, r3
 8000f48:	f7ff fe2e 	bl	8000ba8 <__aeabi_d2uiz>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	e000      	b.n	8000f52 <readADC+0x7a>
    }

    return 0; // Retorna 0 en caso de error
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	f3af 8000 	nop.w
 8000f60:	e734d9b4 	.word	0xe734d9b4
 8000f64:	3f4a680c 	.word	0x3f4a680c

08000f68 <BQ76905_ReadRegister>:




// Función para leer un registro específico del BQ76905
HAL_StatusTypeDef BQ76905_ReadRegister(uint8_t reg, uint8_t* data, uint16_t len) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b086      	sub	sp, #24
 8000f6c:	af02      	add	r7, sp, #8
 8000f6e:	4603      	mov	r3, r0
 8000f70:	6039      	str	r1, [r7, #0]
 8000f72:	71fb      	strb	r3, [r7, #7]
 8000f74:	4613      	mov	r3, r2
 8000f76:	80bb      	strh	r3, [r7, #4]
    HAL_StatusTypeDef status;

    // Enviar el registro desde el cual leeremos
    status = HAL_I2C_Master_Transmit(&hi2c1, BQ76905_ADDR, &reg, 1, HAL_MAX_DELAY);
 8000f78:	1dfa      	adds	r2, r7, #7
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2301      	movs	r3, #1
 8000f82:	2110      	movs	r1, #16
 8000f84:	480b      	ldr	r0, [pc, #44]	@ (8000fb4 <BQ76905_ReadRegister+0x4c>)
 8000f86:	f002 febb 	bl	8003d00 <HAL_I2C_Master_Transmit>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) {
 8000f8e:	7bfb      	ldrb	r3, [r7, #15]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <BQ76905_ReadRegister+0x30>
        return status; // Retorna el error si no se pudo enviar el registro
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
 8000f96:	e009      	b.n	8000fac <BQ76905_ReadRegister+0x44>
    }

    // Leer los datos del registro
    return HAL_I2C_Master_Receive(&hi2c1, BQ76905_ADDR, data, len, HAL_MAX_DELAY);
 8000f98:	88bb      	ldrh	r3, [r7, #4]
 8000f9a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f9e:	9200      	str	r2, [sp, #0]
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	2110      	movs	r1, #16
 8000fa4:	4803      	ldr	r0, [pc, #12]	@ (8000fb4 <BQ76905_ReadRegister+0x4c>)
 8000fa6:	f002 ffa9 	bl	8003efc <HAL_I2C_Master_Receive>
 8000faa:	4603      	mov	r3, r0
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	200003c4 	.word	0x200003c4

08000fb8 <ReadBatteryData>:

// Función para leer los datos de la batería y almacenarlos en la estructura BatteryData
BatteryData ReadBatteryData(void) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
    BatteryData data; // Estructura para almacenar los datos
    uint8_t buffer[2]; // Buffer para leer datos de 16 bits

    // Leer el voltaje de la celda 1
    if (BQ76905_ReadRegister(0x14, buffer, 2) == HAL_OK) {
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	2014      	movs	r0, #20
 8000fca:	f7ff ffcd 	bl	8000f68 <BQ76905_ReadRegister>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d109      	bne.n	8000fe8 <ReadBatteryData+0x30>
        data.cell1_voltage = (buffer[0] << 8) | buffer[1];
 8000fd4:	7a3b      	ldrb	r3, [r7, #8]
 8000fd6:	021b      	lsls	r3, r3, #8
 8000fd8:	b21a      	sxth	r2, r3
 8000fda:	7a7b      	ldrb	r3, [r7, #9]
 8000fdc:	b21b      	sxth	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b21b      	sxth	r3, r3
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	81bb      	strh	r3, [r7, #12]
 8000fe6:	e001      	b.n	8000fec <ReadBatteryData+0x34>
    } else {
        data.cell1_voltage = 0; // Manejo básico de error
 8000fe8:	2300      	movs	r3, #0
 8000fea:	81bb      	strh	r3, [r7, #12]
    }

    // Leer el voltaje de la celda 2
    if (BQ76905_ReadRegister(0x16, buffer, 2) == HAL_OK) {
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	2202      	movs	r2, #2
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	2016      	movs	r0, #22
 8000ff6:	f7ff ffb7 	bl	8000f68 <BQ76905_ReadRegister>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d109      	bne.n	8001014 <ReadBatteryData+0x5c>
        data.cell2_voltage = (buffer[0] << 8) | buffer[1];
 8001000:	7a3b      	ldrb	r3, [r7, #8]
 8001002:	021b      	lsls	r3, r3, #8
 8001004:	b21a      	sxth	r2, r3
 8001006:	7a7b      	ldrb	r3, [r7, #9]
 8001008:	b21b      	sxth	r3, r3
 800100a:	4313      	orrs	r3, r2
 800100c:	b21b      	sxth	r3, r3
 800100e:	b29b      	uxth	r3, r3
 8001010:	81fb      	strh	r3, [r7, #14]
 8001012:	e001      	b.n	8001018 <ReadBatteryData+0x60>
    } else {
        data.cell2_voltage = 0; // Manejo básico de error
 8001014:	2300      	movs	r3, #0
 8001016:	81fb      	strh	r3, [r7, #14]
    }

    // Leer el registro de alertas A
    if (BQ76905_ReadRegister(0x02, &data.alert_status_A, 1) != HAL_OK) {
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	3304      	adds	r3, #4
 800101e:	2201      	movs	r2, #1
 8001020:	4619      	mov	r1, r3
 8001022:	2002      	movs	r0, #2
 8001024:	f7ff ffa0 	bl	8000f68 <BQ76905_ReadRegister>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <ReadBatteryData+0x7a>
        data.alert_status_A = 0; // Manejo básico de error
 800102e:	2300      	movs	r3, #0
 8001030:	743b      	strb	r3, [r7, #16]
    }

    // Leer el registro de fallas A
    if (BQ76905_ReadRegister(0x03, &data.fault_status_A, 1) != HAL_OK) {
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	3305      	adds	r3, #5
 8001038:	2201      	movs	r2, #1
 800103a:	4619      	mov	r1, r3
 800103c:	2003      	movs	r0, #3
 800103e:	f7ff ff93 	bl	8000f68 <BQ76905_ReadRegister>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <ReadBatteryData+0x94>
        data.fault_status_A = 0; // Manejo básico de error
 8001048:	2300      	movs	r3, #0
 800104a:	747b      	strb	r3, [r7, #17]
    }

    // Leer el registro de alertas B
    if (BQ76905_ReadRegister(0x04, &data.alert_status_B, 1) != HAL_OK) {
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	3306      	adds	r3, #6
 8001052:	2201      	movs	r2, #1
 8001054:	4619      	mov	r1, r3
 8001056:	2004      	movs	r0, #4
 8001058:	f7ff ff86 	bl	8000f68 <BQ76905_ReadRegister>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <ReadBatteryData+0xae>
        data.alert_status_B = 0; // Manejo básico de error
 8001062:	2300      	movs	r3, #0
 8001064:	74bb      	strb	r3, [r7, #18]
    }

    // Leer el registro de fallas B
    if (BQ76905_ReadRegister(0x05, &data.fault_status_B, 1) != HAL_OK) {
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	3307      	adds	r3, #7
 800106c:	2201      	movs	r2, #1
 800106e:	4619      	mov	r1, r3
 8001070:	2005      	movs	r0, #5
 8001072:	f7ff ff79 	bl	8000f68 <BQ76905_ReadRegister>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <ReadBatteryData+0xc8>
        data.fault_status_B = 0; // Manejo básico de error
 800107c:	2300      	movs	r3, #0
 800107e:	74fb      	strb	r3, [r7, #19]
    }

    // Leer el registro de estado de la batería
    if (BQ76905_ReadRegister(0x12, buffer, 2) == HAL_OK) {
 8001080:	f107 0308 	add.w	r3, r7, #8
 8001084:	2202      	movs	r2, #2
 8001086:	4619      	mov	r1, r3
 8001088:	2012      	movs	r0, #18
 800108a:	f7ff ff6d 	bl	8000f68 <BQ76905_ReadRegister>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d109      	bne.n	80010a8 <ReadBatteryData+0xf0>
        data.battery_status = (buffer[0] << 8) | buffer[1];
 8001094:	7a3b      	ldrb	r3, [r7, #8]
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	b21a      	sxth	r2, r3
 800109a:	7a7b      	ldrb	r3, [r7, #9]
 800109c:	b21b      	sxth	r3, r3
 800109e:	4313      	orrs	r3, r2
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	82bb      	strh	r3, [r7, #20]
 80010a6:	e001      	b.n	80010ac <ReadBatteryData+0xf4>
    } else {
        data.battery_status = 0; // Manejo básico de error
 80010a8:	2300      	movs	r3, #0
 80010aa:	82bb      	strh	r3, [r7, #20]
    }

    return data;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	461a      	mov	r2, r3
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	cb03      	ldmia	r3!, {r0, r1}
 80010b6:	6010      	str	r0, [r2, #0]
 80010b8:	6051      	str	r1, [r2, #4]
 80010ba:	881b      	ldrh	r3, [r3, #0]
 80010bc:	8113      	strh	r3, [r2, #8]
}
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	3718      	adds	r7, #24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a05      	ldr	r2, [pc, #20]	@ (80010ec <HAL_I2C_SlaveRxCpltCallback+0x24>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d104      	bne.n	80010e4 <HAL_I2C_SlaveRxCpltCallback+0x1c>
        // Procesar datos recibidos si el maestro envió algo
        HAL_I2C_Slave_Receive_IT(&hi2c1, i2c_rx_buffer, sizeof(i2c_rx_buffer)); // Reiniciar recepción
 80010da:	220a      	movs	r2, #10
 80010dc:	4904      	ldr	r1, [pc, #16]	@ (80010f0 <HAL_I2C_SlaveRxCpltCallback+0x28>)
 80010de:	4805      	ldr	r0, [pc, #20]	@ (80010f4 <HAL_I2C_SlaveRxCpltCallback+0x2c>)
 80010e0:	f003 f9ae 	bl	8004440 <HAL_I2C_Slave_Receive_IT>
    }
}
 80010e4:	bf00      	nop
 80010e6:	3708      	adds	r7, #8
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	40005400 	.word	0x40005400
 80010f0:	2000066c 	.word	0x2000066c
 80010f4:	200003c4 	.word	0x200003c4

080010f8 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	70fb      	strb	r3, [r7, #3]
 8001104:	4613      	mov	r3, r2
 8001106:	803b      	strh	r3, [r7, #0]
    if (hi2c->Instance == I2C1) {
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0e      	ldr	r2, [pc, #56]	@ (8001148 <HAL_I2C_AddrCallback+0x50>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d115      	bne.n	800113e <HAL_I2C_AddrCallback+0x46>
        if (TransferDirection == I2C_DIRECTION_TRANSMIT) {
 8001112:	78fb      	ldrb	r3, [r7, #3]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d105      	bne.n	8001124 <HAL_I2C_AddrCallback+0x2c>
            // El maestro está enviando datos
            HAL_I2C_Slave_Receive_IT(&hi2c1, i2c_rx_buffer, sizeof(i2c_rx_buffer));
 8001118:	220a      	movs	r2, #10
 800111a:	490c      	ldr	r1, [pc, #48]	@ (800114c <HAL_I2C_AddrCallback+0x54>)
 800111c:	480c      	ldr	r0, [pc, #48]	@ (8001150 <HAL_I2C_AddrCallback+0x58>)
 800111e:	f003 f98f 	bl	8004440 <HAL_I2C_Slave_Receive_IT>
        } else if (TransferDirection == I2C_DIRECTION_RECEIVE) {
            // El maestro solicita datos del esclavo
            HAL_I2C_Slave_Transmit_IT(&hi2c1, i2c_tx_buffer, strlen((char*)i2c_tx_buffer));
        }
    }
}
 8001122:	e00c      	b.n	800113e <HAL_I2C_AddrCallback+0x46>
        } else if (TransferDirection == I2C_DIRECTION_RECEIVE) {
 8001124:	78fb      	ldrb	r3, [r7, #3]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d109      	bne.n	800113e <HAL_I2C_AddrCallback+0x46>
            HAL_I2C_Slave_Transmit_IT(&hi2c1, i2c_tx_buffer, strlen((char*)i2c_tx_buffer));
 800112a:	480a      	ldr	r0, [pc, #40]	@ (8001154 <HAL_I2C_AddrCallback+0x5c>)
 800112c:	f7ff f8a0 	bl	8000270 <strlen>
 8001130:	4603      	mov	r3, r0
 8001132:	b29b      	uxth	r3, r3
 8001134:	461a      	mov	r2, r3
 8001136:	4907      	ldr	r1, [pc, #28]	@ (8001154 <HAL_I2C_AddrCallback+0x5c>)
 8001138:	4805      	ldr	r0, [pc, #20]	@ (8001150 <HAL_I2C_AddrCallback+0x58>)
 800113a:	f003 f911 	bl	8004360 <HAL_I2C_Slave_Transmit_IT>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40005400 	.word	0x40005400
 800114c:	2000066c 	.word	0x2000066c
 8001150:	200003c4 	.word	0x200003c4
 8001154:	20000000 	.word	0x20000000

08001158 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
        // Manejo de errores
    }
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800116c:	b5b0      	push	{r4, r5, r7, lr}
 800116e:	b09e      	sub	sp, #120	@ 0x78
 8001170:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001172:	f001 fa0f 	bl	8002594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001176:	f000 f993 	bl	80014a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800117a:	f000 fcad 	bl	8001ad8 <MX_GPIO_Init>
  MX_DMA_Init();
 800117e:	f000 fc83 	bl	8001a88 <MX_DMA_Init>
  MX_ADC1_Init();
 8001182:	f000 f9f7 	bl	8001574 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001186:	f000 fa47 	bl	8001618 <MX_ADC2_Init>
  MX_ADC3_Init();
 800118a:	f000 fa97 	bl	80016bc <MX_ADC3_Init>
  MX_I2C1_Init();
 800118e:	f000 fae7 	bl	8001760 <MX_I2C1_Init>
  MX_I2C3_Init();
 8001192:	f000 fb13 	bl	80017bc <MX_I2C3_Init>
  MX_TIM2_Init();
 8001196:	f000 fb3f 	bl	8001818 <MX_TIM2_Init>
  MX_TIM4_Init();
 800119a:	f000 fb97 	bl	80018cc <MX_TIM4_Init>
  MX_TIM5_Init();
 800119e:	f000 fbef 	bl	8001980 <MX_TIM5_Init>
  MX_UART4_Init();
 80011a2:	f000 fc47 	bl	8001a34 <MX_UART4_Init>
  MX_USB_DEVICE_Init();
 80011a6:	f00b fcd1 	bl	800cb4c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */



  //COMUNICACION ENTRE PLACAS
  HAL_I2C_EnableListen_IT(&hi2c1); // Habilitar escucha en modo esclavo
 80011aa:	48a6      	ldr	r0, [pc, #664]	@ (8001444 <main+0x2d8>)
 80011ac:	f003 f9b8 	bl	8004520 <HAL_I2C_EnableListen_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80011b0:	2100      	movs	r1, #0
 80011b2:	48a5      	ldr	r0, [pc, #660]	@ (8001448 <main+0x2dc>)
 80011b4:	f007 f95c 	bl	8008470 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80011b8:	210c      	movs	r1, #12
 80011ba:	48a4      	ldr	r0, [pc, #656]	@ (800144c <main+0x2e0>)
 80011bc:	f007 f958 	bl	8008470 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 80011c0:	210c      	movs	r1, #12
 80011c2:	48a3      	ldr	r0, [pc, #652]	@ (8001450 <main+0x2e4>)
 80011c4:	f007 f954 	bl	8008470 <HAL_TIM_PWM_Start>

  BatteryData battery_data; // Estructura para almacenar los datos de la batería

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); 	//5V
 80011c8:	2201      	movs	r2, #1
 80011ca:	2104      	movs	r1, #4
 80011cc:	48a1      	ldr	r0, [pc, #644]	@ (8001454 <main+0x2e8>)
 80011ce:	f002 fc23 	bl	8003a18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//3.3V BIS
 80011d2:	2201      	movs	r2, #1
 80011d4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011d8:	489e      	ldr	r0, [pc, #632]	@ (8001454 <main+0x2e8>)
 80011da:	f002 fc1d 	bl	8003a18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);	//3.3V
 80011de:	2201      	movs	r2, #1
 80011e0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80011e4:	489b      	ldr	r0, [pc, #620]	@ (8001454 <main+0x2e8>)
 80011e6:	f002 fc17 	bl	8003a18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);	//5V BIS
 80011ea:	2201      	movs	r2, #1
 80011ec:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011f0:	4898      	ldr	r0, [pc, #608]	@ (8001454 <main+0x2e8>)
 80011f2:	f002 fc11 	bl	8003a18 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
		sprintf(buffer, "VZ_in: %.2f V, IZ_in: %.2f A, PowerZ: %.2f W\n", VZ_in, IZ_in, powerZ);
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);

*/
	    printf("hola mundo");
 80011f6:	4898      	ldr	r0, [pc, #608]	@ (8001458 <main+0x2ec>)
 80011f8:	f00c fed6 	bl	800dfa8 <iprintf>
		//PDU
		V5 = readADC(&hadc2, ADC_CHANNEL_11);
 80011fc:	210b      	movs	r1, #11
 80011fe:	4897      	ldr	r0, [pc, #604]	@ (800145c <main+0x2f0>)
 8001200:	f7ff fe6a 	bl	8000ed8 <readADC>
 8001204:	ee07 0a90 	vmov	s15, r0
 8001208:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800120c:	4b94      	ldr	r3, [pc, #592]	@ (8001460 <main+0x2f4>)
 800120e:	edc3 7a00 	vstr	s15, [r3]
		I5 = readADC(&hadc2, ADC_CHANNEL_10);
 8001212:	210a      	movs	r1, #10
 8001214:	4891      	ldr	r0, [pc, #580]	@ (800145c <main+0x2f0>)
 8001216:	f7ff fe5f 	bl	8000ed8 <readADC>
 800121a:	ee07 0a90 	vmov	s15, r0
 800121e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001222:	4b90      	ldr	r3, [pc, #576]	@ (8001464 <main+0x2f8>)
 8001224:	edc3 7a00 	vstr	s15, [r3]

		V5bis = readADC(&hadc2, ADC_CHANNEL_11);
 8001228:	210b      	movs	r1, #11
 800122a:	488c      	ldr	r0, [pc, #560]	@ (800145c <main+0x2f0>)
 800122c:	f7ff fe54 	bl	8000ed8 <readADC>
 8001230:	ee07 0a90 	vmov	s15, r0
 8001234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001238:	4b8b      	ldr	r3, [pc, #556]	@ (8001468 <main+0x2fc>)
 800123a:	edc3 7a00 	vstr	s15, [r3]
		I5bis = readADC(&hadc2, ADC_CHANNEL_10);
 800123e:	210a      	movs	r1, #10
 8001240:	4886      	ldr	r0, [pc, #536]	@ (800145c <main+0x2f0>)
 8001242:	f7ff fe49 	bl	8000ed8 <readADC>
 8001246:	ee07 0a90 	vmov	s15, r0
 800124a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800124e:	4b87      	ldr	r3, [pc, #540]	@ (800146c <main+0x300>)
 8001250:	edc3 7a00 	vstr	s15, [r3]

		V3 = readADC(&hadc2, ADC_CHANNEL_11);
 8001254:	210b      	movs	r1, #11
 8001256:	4881      	ldr	r0, [pc, #516]	@ (800145c <main+0x2f0>)
 8001258:	f7ff fe3e 	bl	8000ed8 <readADC>
 800125c:	ee07 0a90 	vmov	s15, r0
 8001260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001264:	4b82      	ldr	r3, [pc, #520]	@ (8001470 <main+0x304>)
 8001266:	edc3 7a00 	vstr	s15, [r3]
		I3 = readADC(&hadc2, ADC_CHANNEL_10);
 800126a:	210a      	movs	r1, #10
 800126c:	487b      	ldr	r0, [pc, #492]	@ (800145c <main+0x2f0>)
 800126e:	f7ff fe33 	bl	8000ed8 <readADC>
 8001272:	ee07 0a90 	vmov	s15, r0
 8001276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800127a:	4b7e      	ldr	r3, [pc, #504]	@ (8001474 <main+0x308>)
 800127c:	edc3 7a00 	vstr	s15, [r3]

		V3bis = readADC(&hadc2, ADC_CHANNEL_11);
 8001280:	210b      	movs	r1, #11
 8001282:	4876      	ldr	r0, [pc, #472]	@ (800145c <main+0x2f0>)
 8001284:	f7ff fe28 	bl	8000ed8 <readADC>
 8001288:	ee07 0a90 	vmov	s15, r0
 800128c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001290:	4b79      	ldr	r3, [pc, #484]	@ (8001478 <main+0x30c>)
 8001292:	edc3 7a00 	vstr	s15, [r3]
		I3bis = readADC(&hadc2, ADC_CHANNEL_10);
 8001296:	210a      	movs	r1, #10
 8001298:	4870      	ldr	r0, [pc, #448]	@ (800145c <main+0x2f0>)
 800129a:	f7ff fe1d 	bl	8000ed8 <readADC>
 800129e:	ee07 0a90 	vmov	s15, r0
 80012a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012a6:	4b75      	ldr	r3, [pc, #468]	@ (800147c <main+0x310>)
 80012a8:	edc3 7a00 	vstr	s15, [r3]
		// Imprimir datos al puerto serie
		char buffer[100];
		sprintf(buffer, "V5: %.2f V, I5: %.2f A", V5, I5); // @suppress("Float formatting support")
 80012ac:	4b6c      	ldr	r3, [pc, #432]	@ (8001460 <main+0x2f4>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f949 	bl	8000548 <__aeabi_f2d>
 80012b6:	4604      	mov	r4, r0
 80012b8:	460d      	mov	r5, r1
 80012ba:	4b6a      	ldr	r3, [pc, #424]	@ (8001464 <main+0x2f8>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f942 	bl	8000548 <__aeabi_f2d>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4638      	mov	r0, r7
 80012ca:	e9cd 2300 	strd	r2, r3, [sp]
 80012ce:	4622      	mov	r2, r4
 80012d0:	462b      	mov	r3, r5
 80012d2:	496b      	ldr	r1, [pc, #428]	@ (8001480 <main+0x314>)
 80012d4:	f00c fd86 	bl	800dde4 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 80012d8:	463b      	mov	r3, r7
 80012da:	4618      	mov	r0, r3
 80012dc:	f7fe ffc8 	bl	8000270 <strlen>
 80012e0:	4603      	mov	r3, r0
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	4639      	mov	r1, r7
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012ea:	4866      	ldr	r0, [pc, #408]	@ (8001484 <main+0x318>)
 80012ec:	f007 fd98 	bl	8008e20 <HAL_UART_Transmit>

		sprintf(buffer, "V5bis: %.2f V, I5bis: %.2f A", V5bis, I5bis); // @suppress("Float formatting support")
 80012f0:	4b5d      	ldr	r3, [pc, #372]	@ (8001468 <main+0x2fc>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f927 	bl	8000548 <__aeabi_f2d>
 80012fa:	4604      	mov	r4, r0
 80012fc:	460d      	mov	r5, r1
 80012fe:	4b5b      	ldr	r3, [pc, #364]	@ (800146c <main+0x300>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f920 	bl	8000548 <__aeabi_f2d>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4638      	mov	r0, r7
 800130e:	e9cd 2300 	strd	r2, r3, [sp]
 8001312:	4622      	mov	r2, r4
 8001314:	462b      	mov	r3, r5
 8001316:	495c      	ldr	r1, [pc, #368]	@ (8001488 <main+0x31c>)
 8001318:	f00c fd64 	bl	800dde4 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 800131c:	463b      	mov	r3, r7
 800131e:	4618      	mov	r0, r3
 8001320:	f7fe ffa6 	bl	8000270 <strlen>
 8001324:	4603      	mov	r3, r0
 8001326:	b29a      	uxth	r2, r3
 8001328:	4639      	mov	r1, r7
 800132a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800132e:	4855      	ldr	r0, [pc, #340]	@ (8001484 <main+0x318>)
 8001330:	f007 fd76 	bl	8008e20 <HAL_UART_Transmit>

		sprintf(buffer, "V3: %.2f V, I3: %.2f A", V3, I3); // @suppress("Float formatting support")
 8001334:	4b4e      	ldr	r3, [pc, #312]	@ (8001470 <main+0x304>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff f905 	bl	8000548 <__aeabi_f2d>
 800133e:	4604      	mov	r4, r0
 8001340:	460d      	mov	r5, r1
 8001342:	4b4c      	ldr	r3, [pc, #304]	@ (8001474 <main+0x308>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f8fe 	bl	8000548 <__aeabi_f2d>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4638      	mov	r0, r7
 8001352:	e9cd 2300 	strd	r2, r3, [sp]
 8001356:	4622      	mov	r2, r4
 8001358:	462b      	mov	r3, r5
 800135a:	494c      	ldr	r1, [pc, #304]	@ (800148c <main+0x320>)
 800135c:	f00c fd42 	bl	800dde4 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 8001360:	463b      	mov	r3, r7
 8001362:	4618      	mov	r0, r3
 8001364:	f7fe ff84 	bl	8000270 <strlen>
 8001368:	4603      	mov	r3, r0
 800136a:	b29a      	uxth	r2, r3
 800136c:	4639      	mov	r1, r7
 800136e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001372:	4844      	ldr	r0, [pc, #272]	@ (8001484 <main+0x318>)
 8001374:	f007 fd54 	bl	8008e20 <HAL_UART_Transmit>

		sprintf(buffer, "V3bis: %.2f V, I3bis: %.2f A", V3bis, I3bis); // @suppress("Float formatting support")
 8001378:	4b3f      	ldr	r3, [pc, #252]	@ (8001478 <main+0x30c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f8e3 	bl	8000548 <__aeabi_f2d>
 8001382:	4604      	mov	r4, r0
 8001384:	460d      	mov	r5, r1
 8001386:	4b3d      	ldr	r3, [pc, #244]	@ (800147c <main+0x310>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff f8dc 	bl	8000548 <__aeabi_f2d>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4638      	mov	r0, r7
 8001396:	e9cd 2300 	strd	r2, r3, [sp]
 800139a:	4622      	mov	r2, r4
 800139c:	462b      	mov	r3, r5
 800139e:	493c      	ldr	r1, [pc, #240]	@ (8001490 <main+0x324>)
 80013a0:	f00c fd20 	bl	800dde4 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 80013a4:	463b      	mov	r3, r7
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7fe ff62 	bl	8000270 <strlen>
 80013ac:	4603      	mov	r3, r0
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	4639      	mov	r1, r7
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013b6:	4833      	ldr	r0, [pc, #204]	@ (8001484 <main+0x318>)
 80013b8:	f007 fd32 	bl	8008e20 <HAL_UART_Transmit>

		//COMUNICACION BQ76905

        battery_data = ReadBatteryData();
 80013bc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff fdf9 	bl	8000fb8 <ReadBatteryData>


		//CALENTAMIENTO Y CONTROL DE TEMPERATURA

        if ((battery_data.alert_status_B & UTD) || (battery_data.alert_status_B & UTC) || (battery_data.alert_status_B & OTINT)) {
 80013c6:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80013ca:	f003 0320 	and.w	r3, r3, #32
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10b      	bne.n	80013ea <main+0x27e>
 80013d2:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d105      	bne.n	80013ea <main+0x27e>
 80013de:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d00d      	beq.n	8001406 <main+0x29a>
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);  // Activar calefactor
 80013ea:	2201      	movs	r2, #1
 80013ec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013f0:	4818      	ldr	r0, [pc, #96]	@ (8001454 <main+0x2e8>)
 80013f2:	f002 fb11 	bl	8003a18 <HAL_GPIO_WritePin>
            HAL_UART_Transmit(&huart4, (uint8_t*)"Calefactor encendido. Alarma activa. \n",50, HAL_MAX_DELAY);
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013fa:	2232      	movs	r2, #50	@ 0x32
 80013fc:	4925      	ldr	r1, [pc, #148]	@ (8001494 <main+0x328>)
 80013fe:	4821      	ldr	r0, [pc, #132]	@ (8001484 <main+0x318>)
 8001400:	f007 fd0e 	bl	8008e20 <HAL_UART_Transmit>
 8001404:	e00c      	b.n	8001420 <main+0x2b4>

        } else {
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);  // Apagar calefactor
 8001406:	2200      	movs	r2, #0
 8001408:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800140c:	4811      	ldr	r0, [pc, #68]	@ (8001454 <main+0x2e8>)
 800140e:	f002 fb03 	bl	8003a18 <HAL_GPIO_WritePin>
            HAL_UART_Transmit(&huart4, (uint8_t*)"Calefactor apagado. Todas las alarmas inactivas.\n",50, HAL_MAX_DELAY);
 8001412:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001416:	2232      	movs	r2, #50	@ 0x32
 8001418:	491f      	ldr	r1, [pc, #124]	@ (8001498 <main+0x32c>)
 800141a:	481a      	ldr	r0, [pc, #104]	@ (8001484 <main+0x318>)
 800141c:	f007 fd00 	bl	8008e20 <HAL_UART_Transmit>

		//MODO BAJO CONSUMO

		//ALMACENAMIENTO EN FLASH DE VARIBLES

	  	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET){
 8001420:	2104      	movs	r1, #4
 8001422:	480c      	ldr	r0, [pc, #48]	@ (8001454 <main+0x2e8>)
 8001424:	f002 fae0 	bl	80039e8 <HAL_GPIO_ReadPin>
 8001428:	4603      	mov	r3, r0
 800142a:	2b01      	cmp	r3, #1
 800142c:	d105      	bne.n	800143a <main+0x2ce>
	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);	//Batery out BIS
 800142e:	2201      	movs	r2, #1
 8001430:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001434:	4819      	ldr	r0, [pc, #100]	@ (800149c <main+0x330>)
 8001436:	f002 faef 	bl	8003a18 <HAL_GPIO_WritePin>
	  	}

		HAL_Delay(500);
 800143a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800143e:	f001 f91b 	bl	8002678 <HAL_Delay>
  {
 8001442:	e6d8      	b.n	80011f6 <main+0x8a>
 8001444:	200003c4 	.word	0x200003c4
 8001448:	2000052c 	.word	0x2000052c
 800144c:	20000574 	.word	0x20000574
 8001450:	200005bc 	.word	0x200005bc
 8001454:	40020400 	.word	0x40020400
 8001458:	08010200 	.word	0x08010200
 800145c:	20000334 	.word	0x20000334
 8001460:	2000064c 	.word	0x2000064c
 8001464:	20000650 	.word	0x20000650
 8001468:	20000654 	.word	0x20000654
 800146c:	20000658 	.word	0x20000658
 8001470:	2000065c 	.word	0x2000065c
 8001474:	20000660 	.word	0x20000660
 8001478:	20000664 	.word	0x20000664
 800147c:	20000668 	.word	0x20000668
 8001480:	0801020c 	.word	0x0801020c
 8001484:	20000604 	.word	0x20000604
 8001488:	08010224 	.word	0x08010224
 800148c:	08010244 	.word	0x08010244
 8001490:	0801025c 	.word	0x0801025c
 8001494:	0801027c 	.word	0x0801027c
 8001498:	080102a4 	.word	0x080102a4
 800149c:	40020000 	.word	0x40020000

080014a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b094      	sub	sp, #80	@ 0x50
 80014a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014a6:	f107 0320 	add.w	r3, r7, #32
 80014aa:	2230      	movs	r2, #48	@ 0x30
 80014ac:	2100      	movs	r1, #0
 80014ae:	4618      	mov	r0, r3
 80014b0:	f00c fd8c 	bl	800dfcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014c4:	2300      	movs	r3, #0
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	4b28      	ldr	r3, [pc, #160]	@ (800156c <SystemClock_Config+0xcc>)
 80014ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014cc:	4a27      	ldr	r2, [pc, #156]	@ (800156c <SystemClock_Config+0xcc>)
 80014ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80014d4:	4b25      	ldr	r3, [pc, #148]	@ (800156c <SystemClock_Config+0xcc>)
 80014d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014dc:	60bb      	str	r3, [r7, #8]
 80014de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e0:	2300      	movs	r3, #0
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	4b22      	ldr	r3, [pc, #136]	@ (8001570 <SystemClock_Config+0xd0>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a21      	ldr	r2, [pc, #132]	@ (8001570 <SystemClock_Config+0xd0>)
 80014ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ee:	6013      	str	r3, [r2, #0]
 80014f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001570 <SystemClock_Config+0xd0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014f8:	607b      	str	r3, [r7, #4]
 80014fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014fc:	2301      	movs	r3, #1
 80014fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001500:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001504:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001506:	2302      	movs	r3, #2
 8001508:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800150a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800150e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001510:	2304      	movs	r3, #4
 8001512:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001514:	2360      	movs	r3, #96	@ 0x60
 8001516:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001518:	2306      	movs	r3, #6
 800151a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800151c:	2304      	movs	r3, #4
 800151e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001520:	f107 0320 	add.w	r3, r7, #32
 8001524:	4618      	mov	r0, r3
 8001526:	f006 fabb 	bl	8007aa0 <HAL_RCC_OscConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001530:	f000 fb56 	bl	8001be0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001534:	230f      	movs	r3, #15
 8001536:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001538:	2302      	movs	r3, #2
 800153a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800153c:	2380      	movs	r3, #128	@ 0x80
 800153e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001540:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001544:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001546:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800154a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f006 fd1c 	bl	8007f90 <HAL_RCC_ClockConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800155e:	f000 fb3f 	bl	8001be0 <Error_Handler>
  }
}
 8001562:	bf00      	nop
 8001564:	3750      	adds	r7, #80	@ 0x50
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40023800 	.word	0x40023800
 8001570:	40007000 	.word	0x40007000

08001574 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800157a:	463b      	mov	r3, r7
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001586:	4b21      	ldr	r3, [pc, #132]	@ (800160c <MX_ADC1_Init+0x98>)
 8001588:	4a21      	ldr	r2, [pc, #132]	@ (8001610 <MX_ADC1_Init+0x9c>)
 800158a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800158c:	4b1f      	ldr	r3, [pc, #124]	@ (800160c <MX_ADC1_Init+0x98>)
 800158e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001592:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001594:	4b1d      	ldr	r3, [pc, #116]	@ (800160c <MX_ADC1_Init+0x98>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800159a:	4b1c      	ldr	r3, [pc, #112]	@ (800160c <MX_ADC1_Init+0x98>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015a0:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <MX_ADC1_Init+0x98>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015a6:	4b19      	ldr	r3, [pc, #100]	@ (800160c <MX_ADC1_Init+0x98>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ae:	4b17      	ldr	r3, [pc, #92]	@ (800160c <MX_ADC1_Init+0x98>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015b4:	4b15      	ldr	r3, [pc, #84]	@ (800160c <MX_ADC1_Init+0x98>)
 80015b6:	4a17      	ldr	r2, [pc, #92]	@ (8001614 <MX_ADC1_Init+0xa0>)
 80015b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ba:	4b14      	ldr	r3, [pc, #80]	@ (800160c <MX_ADC1_Init+0x98>)
 80015bc:	2200      	movs	r2, #0
 80015be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <MX_ADC1_Init+0x98>)
 80015c2:	2201      	movs	r2, #1
 80015c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015c6:	4b11      	ldr	r3, [pc, #68]	@ (800160c <MX_ADC1_Init+0x98>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015ce:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <MX_ADC1_Init+0x98>)
 80015d0:	2201      	movs	r2, #1
 80015d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015d4:	480d      	ldr	r0, [pc, #52]	@ (800160c <MX_ADC1_Init+0x98>)
 80015d6:	f001 f873 	bl	80026c0 <HAL_ADC_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80015e0:	f000 fafe 	bl	8001be0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80015e4:	2304      	movs	r3, #4
 80015e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015e8:	2301      	movs	r3, #1
 80015ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015f0:	463b      	mov	r3, r7
 80015f2:	4619      	mov	r1, r3
 80015f4:	4805      	ldr	r0, [pc, #20]	@ (800160c <MX_ADC1_Init+0x98>)
 80015f6:	f001 fa11 	bl	8002a1c <HAL_ADC_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001600:	f000 faee 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	200002ec 	.word	0x200002ec
 8001610:	40012000 	.word	0x40012000
 8001614:	0f000001 	.word	0x0f000001

08001618 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800161e:	463b      	mov	r3, r7
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800162a:	4b21      	ldr	r3, [pc, #132]	@ (80016b0 <MX_ADC2_Init+0x98>)
 800162c:	4a21      	ldr	r2, [pc, #132]	@ (80016b4 <MX_ADC2_Init+0x9c>)
 800162e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001630:	4b1f      	ldr	r3, [pc, #124]	@ (80016b0 <MX_ADC2_Init+0x98>)
 8001632:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001636:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001638:	4b1d      	ldr	r3, [pc, #116]	@ (80016b0 <MX_ADC2_Init+0x98>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800163e:	4b1c      	ldr	r3, [pc, #112]	@ (80016b0 <MX_ADC2_Init+0x98>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001644:	4b1a      	ldr	r3, [pc, #104]	@ (80016b0 <MX_ADC2_Init+0x98>)
 8001646:	2200      	movs	r2, #0
 8001648:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800164a:	4b19      	ldr	r3, [pc, #100]	@ (80016b0 <MX_ADC2_Init+0x98>)
 800164c:	2200      	movs	r2, #0
 800164e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001652:	4b17      	ldr	r3, [pc, #92]	@ (80016b0 <MX_ADC2_Init+0x98>)
 8001654:	2200      	movs	r2, #0
 8001656:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001658:	4b15      	ldr	r3, [pc, #84]	@ (80016b0 <MX_ADC2_Init+0x98>)
 800165a:	4a17      	ldr	r2, [pc, #92]	@ (80016b8 <MX_ADC2_Init+0xa0>)
 800165c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800165e:	4b14      	ldr	r3, [pc, #80]	@ (80016b0 <MX_ADC2_Init+0x98>)
 8001660:	2200      	movs	r2, #0
 8001662:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001664:	4b12      	ldr	r3, [pc, #72]	@ (80016b0 <MX_ADC2_Init+0x98>)
 8001666:	2201      	movs	r2, #1
 8001668:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800166a:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <MX_ADC2_Init+0x98>)
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001672:	4b0f      	ldr	r3, [pc, #60]	@ (80016b0 <MX_ADC2_Init+0x98>)
 8001674:	2201      	movs	r2, #1
 8001676:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001678:	480d      	ldr	r0, [pc, #52]	@ (80016b0 <MX_ADC2_Init+0x98>)
 800167a:	f001 f821 	bl	80026c0 <HAL_ADC_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001684:	f000 faac 	bl	8001be0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001688:	2306      	movs	r3, #6
 800168a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800168c:	2301      	movs	r3, #1
 800168e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001694:	463b      	mov	r3, r7
 8001696:	4619      	mov	r1, r3
 8001698:	4805      	ldr	r0, [pc, #20]	@ (80016b0 <MX_ADC2_Init+0x98>)
 800169a:	f001 f9bf 	bl	8002a1c <HAL_ADC_ConfigChannel>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80016a4:	f000 fa9c 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000334 	.word	0x20000334
 80016b4:	40012100 	.word	0x40012100
 80016b8:	0f000001 	.word	0x0f000001

080016bc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016c2:	463b      	mov	r3, r7
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80016ce:	4b21      	ldr	r3, [pc, #132]	@ (8001754 <MX_ADC3_Init+0x98>)
 80016d0:	4a21      	ldr	r2, [pc, #132]	@ (8001758 <MX_ADC3_Init+0x9c>)
 80016d2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001754 <MX_ADC3_Init+0x98>)
 80016d6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016da:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80016dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001754 <MX_ADC3_Init+0x98>)
 80016de:	2200      	movs	r2, #0
 80016e0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80016e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001754 <MX_ADC3_Init+0x98>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80016e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001754 <MX_ADC3_Init+0x98>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80016ee:	4b19      	ldr	r3, [pc, #100]	@ (8001754 <MX_ADC3_Init+0x98>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016f6:	4b17      	ldr	r3, [pc, #92]	@ (8001754 <MX_ADC3_Init+0x98>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016fc:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <MX_ADC3_Init+0x98>)
 80016fe:	4a17      	ldr	r2, [pc, #92]	@ (800175c <MX_ADC3_Init+0xa0>)
 8001700:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001702:	4b14      	ldr	r3, [pc, #80]	@ (8001754 <MX_ADC3_Init+0x98>)
 8001704:	2200      	movs	r2, #0
 8001706:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001708:	4b12      	ldr	r3, [pc, #72]	@ (8001754 <MX_ADC3_Init+0x98>)
 800170a:	2201      	movs	r2, #1
 800170c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800170e:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <MX_ADC3_Init+0x98>)
 8001710:	2200      	movs	r2, #0
 8001712:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001716:	4b0f      	ldr	r3, [pc, #60]	@ (8001754 <MX_ADC3_Init+0x98>)
 8001718:	2201      	movs	r2, #1
 800171a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800171c:	480d      	ldr	r0, [pc, #52]	@ (8001754 <MX_ADC3_Init+0x98>)
 800171e:	f000 ffcf 	bl	80026c0 <HAL_ADC_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001728:	f000 fa5a 	bl	8001be0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800172c:	2301      	movs	r3, #1
 800172e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001730:	2301      	movs	r3, #1
 8001732:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001734:	2300      	movs	r3, #0
 8001736:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001738:	463b      	mov	r3, r7
 800173a:	4619      	mov	r1, r3
 800173c:	4805      	ldr	r0, [pc, #20]	@ (8001754 <MX_ADC3_Init+0x98>)
 800173e:	f001 f96d 	bl	8002a1c <HAL_ADC_ConfigChannel>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001748:	f000 fa4a 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	2000037c 	.word	0x2000037c
 8001758:	40012200 	.word	0x40012200
 800175c:	0f000001 	.word	0x0f000001

08001760 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001764:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <MX_I2C1_Init+0x50>)
 8001766:	4a13      	ldr	r2, [pc, #76]	@ (80017b4 <MX_I2C1_Init+0x54>)
 8001768:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800176a:	4b11      	ldr	r3, [pc, #68]	@ (80017b0 <MX_I2C1_Init+0x50>)
 800176c:	4a12      	ldr	r2, [pc, #72]	@ (80017b8 <MX_I2C1_Init+0x58>)
 800176e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001770:	4b0f      	ldr	r3, [pc, #60]	@ (80017b0 <MX_I2C1_Init+0x50>)
 8001772:	2200      	movs	r2, #0
 8001774:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001776:	4b0e      	ldr	r3, [pc, #56]	@ (80017b0 <MX_I2C1_Init+0x50>)
 8001778:	2200      	movs	r2, #0
 800177a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <MX_I2C1_Init+0x50>)
 800177e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001782:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001784:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <MX_I2C1_Init+0x50>)
 8001786:	2200      	movs	r2, #0
 8001788:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800178a:	4b09      	ldr	r3, [pc, #36]	@ (80017b0 <MX_I2C1_Init+0x50>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001790:	4b07      	ldr	r3, [pc, #28]	@ (80017b0 <MX_I2C1_Init+0x50>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001796:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <MX_I2C1_Init+0x50>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800179c:	4804      	ldr	r0, [pc, #16]	@ (80017b0 <MX_I2C1_Init+0x50>)
 800179e:	f002 f955 	bl	8003a4c <HAL_I2C_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017a8:	f000 fa1a 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017ac:	bf00      	nop
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	200003c4 	.word	0x200003c4
 80017b4:	40005400 	.word	0x40005400
 80017b8:	000186a0 	.word	0x000186a0

080017bc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80017c0:	4b12      	ldr	r3, [pc, #72]	@ (800180c <MX_I2C3_Init+0x50>)
 80017c2:	4a13      	ldr	r2, [pc, #76]	@ (8001810 <MX_I2C3_Init+0x54>)
 80017c4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80017c6:	4b11      	ldr	r3, [pc, #68]	@ (800180c <MX_I2C3_Init+0x50>)
 80017c8:	4a12      	ldr	r2, [pc, #72]	@ (8001814 <MX_I2C3_Init+0x58>)
 80017ca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <MX_I2C3_Init+0x50>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80017d2:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <MX_I2C3_Init+0x50>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017d8:	4b0c      	ldr	r3, [pc, #48]	@ (800180c <MX_I2C3_Init+0x50>)
 80017da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017de:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <MX_I2C3_Init+0x50>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80017e6:	4b09      	ldr	r3, [pc, #36]	@ (800180c <MX_I2C3_Init+0x50>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017ec:	4b07      	ldr	r3, [pc, #28]	@ (800180c <MX_I2C3_Init+0x50>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017f2:	4b06      	ldr	r3, [pc, #24]	@ (800180c <MX_I2C3_Init+0x50>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017f8:	4804      	ldr	r0, [pc, #16]	@ (800180c <MX_I2C3_Init+0x50>)
 80017fa:	f002 f927 	bl	8003a4c <HAL_I2C_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001804:	f000 f9ec 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000418 	.word	0x20000418
 8001810:	40005c00 	.word	0x40005c00
 8001814:	000186a0 	.word	0x000186a0

08001818 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b08a      	sub	sp, #40	@ 0x28
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181e:	f107 0320 	add.w	r3, r7, #32
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	605a      	str	r2, [r3, #4]
 8001830:	609a      	str	r2, [r3, #8]
 8001832:	60da      	str	r2, [r3, #12]
 8001834:	611a      	str	r2, [r3, #16]
 8001836:	615a      	str	r2, [r3, #20]
 8001838:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800183a:	4b23      	ldr	r3, [pc, #140]	@ (80018c8 <MX_TIM2_Init+0xb0>)
 800183c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001840:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8001842:	4b21      	ldr	r3, [pc, #132]	@ (80018c8 <MX_TIM2_Init+0xb0>)
 8001844:	f240 12a3 	movw	r2, #419	@ 0x1a3
 8001848:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184a:	4b1f      	ldr	r3, [pc, #124]	@ (80018c8 <MX_TIM2_Init+0xb0>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001850:	4b1d      	ldr	r3, [pc, #116]	@ (80018c8 <MX_TIM2_Init+0xb0>)
 8001852:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001856:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001858:	4b1b      	ldr	r3, [pc, #108]	@ (80018c8 <MX_TIM2_Init+0xb0>)
 800185a:	2200      	movs	r2, #0
 800185c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800185e:	4b1a      	ldr	r3, [pc, #104]	@ (80018c8 <MX_TIM2_Init+0xb0>)
 8001860:	2200      	movs	r2, #0
 8001862:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001864:	4818      	ldr	r0, [pc, #96]	@ (80018c8 <MX_TIM2_Init+0xb0>)
 8001866:	f006 fdb3 	bl	80083d0 <HAL_TIM_PWM_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001870:	f000 f9b6 	bl	8001be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001874:	2300      	movs	r3, #0
 8001876:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800187c:	f107 0320 	add.w	r3, r7, #32
 8001880:	4619      	mov	r1, r3
 8001882:	4811      	ldr	r0, [pc, #68]	@ (80018c8 <MX_TIM2_Init+0xb0>)
 8001884:	f007 fa00 	bl	8008c88 <HAL_TIMEx_MasterConfigSynchronization>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800188e:	f000 f9a7 	bl	8001be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001892:	2360      	movs	r3, #96	@ 0x60
 8001894:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800189a:	2300      	movs	r3, #0
 800189c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	2200      	movs	r2, #0
 80018a6:	4619      	mov	r1, r3
 80018a8:	4807      	ldr	r0, [pc, #28]	@ (80018c8 <MX_TIM2_Init+0xb0>)
 80018aa:	f006 fea9 	bl	8008600 <HAL_TIM_PWM_ConfigChannel>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80018b4:	f000 f994 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018b8:	4803      	ldr	r0, [pc, #12]	@ (80018c8 <MX_TIM2_Init+0xb0>)
 80018ba:	f000 fc25 	bl	8002108 <HAL_TIM_MspPostInit>

}
 80018be:	bf00      	nop
 80018c0:	3728      	adds	r7, #40	@ 0x28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	2000052c 	.word	0x2000052c

080018cc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b08a      	sub	sp, #40	@ 0x28
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d2:	f107 0320 	add.w	r3, r7, #32
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]
 80018ea:	615a      	str	r2, [r3, #20]
 80018ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80018ee:	4b22      	ldr	r3, [pc, #136]	@ (8001978 <MX_TIM4_Init+0xac>)
 80018f0:	4a22      	ldr	r2, [pc, #136]	@ (800197c <MX_TIM4_Init+0xb0>)
 80018f2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 420-1;
 80018f4:	4b20      	ldr	r3, [pc, #128]	@ (8001978 <MX_TIM4_Init+0xac>)
 80018f6:	f240 12a3 	movw	r2, #419	@ 0x1a3
 80018fa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001978 <MX_TIM4_Init+0xac>)
 80018fe:	2200      	movs	r2, #0
 8001900:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001902:	4b1d      	ldr	r3, [pc, #116]	@ (8001978 <MX_TIM4_Init+0xac>)
 8001904:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001908:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800190a:	4b1b      	ldr	r3, [pc, #108]	@ (8001978 <MX_TIM4_Init+0xac>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001910:	4b19      	ldr	r3, [pc, #100]	@ (8001978 <MX_TIM4_Init+0xac>)
 8001912:	2200      	movs	r2, #0
 8001914:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001916:	4818      	ldr	r0, [pc, #96]	@ (8001978 <MX_TIM4_Init+0xac>)
 8001918:	f006 fd5a 	bl	80083d0 <HAL_TIM_PWM_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001922:	f000 f95d 	bl	8001be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001926:	2300      	movs	r3, #0
 8001928:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800192e:	f107 0320 	add.w	r3, r7, #32
 8001932:	4619      	mov	r1, r3
 8001934:	4810      	ldr	r0, [pc, #64]	@ (8001978 <MX_TIM4_Init+0xac>)
 8001936:	f007 f9a7 	bl	8008c88 <HAL_TIMEx_MasterConfigSynchronization>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001940:	f000 f94e 	bl	8001be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001944:	2360      	movs	r3, #96	@ 0x60
 8001946:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001948:	2300      	movs	r3, #0
 800194a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001954:	1d3b      	adds	r3, r7, #4
 8001956:	220c      	movs	r2, #12
 8001958:	4619      	mov	r1, r3
 800195a:	4807      	ldr	r0, [pc, #28]	@ (8001978 <MX_TIM4_Init+0xac>)
 800195c:	f006 fe50 	bl	8008600 <HAL_TIM_PWM_ConfigChannel>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001966:	f000 f93b 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800196a:	4803      	ldr	r0, [pc, #12]	@ (8001978 <MX_TIM4_Init+0xac>)
 800196c:	f000 fbcc 	bl	8002108 <HAL_TIM_MspPostInit>

}
 8001970:	bf00      	nop
 8001972:	3728      	adds	r7, #40	@ 0x28
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	20000574 	.word	0x20000574
 800197c:	40000800 	.word	0x40000800

08001980 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	@ 0x28
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001986:	f107 0320 	add.w	r3, r7, #32
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
 800199c:	611a      	str	r2, [r3, #16]
 800199e:	615a      	str	r2, [r3, #20]
 80019a0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80019a2:	4b22      	ldr	r3, [pc, #136]	@ (8001a2c <MX_TIM5_Init+0xac>)
 80019a4:	4a22      	ldr	r2, [pc, #136]	@ (8001a30 <MX_TIM5_Init+0xb0>)
 80019a6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 420-1;
 80019a8:	4b20      	ldr	r3, [pc, #128]	@ (8001a2c <MX_TIM5_Init+0xac>)
 80019aa:	f240 12a3 	movw	r2, #419	@ 0x1a3
 80019ae:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a2c <MX_TIM5_Init+0xac>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80019b6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a2c <MX_TIM5_Init+0xac>)
 80019b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019bc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019be:	4b1b      	ldr	r3, [pc, #108]	@ (8001a2c <MX_TIM5_Init+0xac>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c4:	4b19      	ldr	r3, [pc, #100]	@ (8001a2c <MX_TIM5_Init+0xac>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80019ca:	4818      	ldr	r0, [pc, #96]	@ (8001a2c <MX_TIM5_Init+0xac>)
 80019cc:	f006 fd00 	bl	80083d0 <HAL_TIM_PWM_Init>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80019d6:	f000 f903 	bl	8001be0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80019e2:	f107 0320 	add.w	r3, r7, #32
 80019e6:	4619      	mov	r1, r3
 80019e8:	4810      	ldr	r0, [pc, #64]	@ (8001a2c <MX_TIM5_Init+0xac>)
 80019ea:	f007 f94d 	bl	8008c88 <HAL_TIMEx_MasterConfigSynchronization>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80019f4:	f000 f8f4 	bl	8001be0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019f8:	2360      	movs	r3, #96	@ 0x60
 80019fa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	220c      	movs	r2, #12
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4807      	ldr	r0, [pc, #28]	@ (8001a2c <MX_TIM5_Init+0xac>)
 8001a10:	f006 fdf6 	bl	8008600 <HAL_TIM_PWM_ConfigChannel>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001a1a:	f000 f8e1 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001a1e:	4803      	ldr	r0, [pc, #12]	@ (8001a2c <MX_TIM5_Init+0xac>)
 8001a20:	f000 fb72 	bl	8002108 <HAL_TIM_MspPostInit>

}
 8001a24:	bf00      	nop
 8001a26:	3728      	adds	r7, #40	@ 0x28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200005bc 	.word	0x200005bc
 8001a30:	40000c00 	.word	0x40000c00

08001a34 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001a38:	4b11      	ldr	r3, [pc, #68]	@ (8001a80 <MX_UART4_Init+0x4c>)
 8001a3a:	4a12      	ldr	r2, [pc, #72]	@ (8001a84 <MX_UART4_Init+0x50>)
 8001a3c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001a3e:	4b10      	ldr	r3, [pc, #64]	@ (8001a80 <MX_UART4_Init+0x4c>)
 8001a40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a44:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	@ (8001a80 <MX_UART4_Init+0x4c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <MX_UART4_Init+0x4c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001a52:	4b0b      	ldr	r3, [pc, #44]	@ (8001a80 <MX_UART4_Init+0x4c>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001a58:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <MX_UART4_Init+0x4c>)
 8001a5a:	220c      	movs	r2, #12
 8001a5c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5e:	4b08      	ldr	r3, [pc, #32]	@ (8001a80 <MX_UART4_Init+0x4c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a64:	4b06      	ldr	r3, [pc, #24]	@ (8001a80 <MX_UART4_Init+0x4c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a6a:	4805      	ldr	r0, [pc, #20]	@ (8001a80 <MX_UART4_Init+0x4c>)
 8001a6c:	f007 f988 	bl	8008d80 <HAL_UART_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001a76:	f000 f8b3 	bl	8001be0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a7a:	bf00      	nop
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000604 	.word	0x20000604
 8001a84:	40004c00 	.word	0x40004c00

08001a88 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	4b10      	ldr	r3, [pc, #64]	@ (8001ad4 <MX_DMA_Init+0x4c>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	4a0f      	ldr	r2, [pc, #60]	@ (8001ad4 <MX_DMA_Init+0x4c>)
 8001a98:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad4 <MX_DMA_Init+0x4c>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2100      	movs	r1, #0
 8001aae:	200d      	movs	r0, #13
 8001ab0:	f001 faad 	bl	800300e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001ab4:	200d      	movs	r0, #13
 8001ab6:	f001 fac6 	bl	8003046 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001aba:	2200      	movs	r2, #0
 8001abc:	2100      	movs	r1, #0
 8001abe:	200f      	movs	r0, #15
 8001ac0:	f001 faa5 	bl	800300e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001ac4:	200f      	movs	r0, #15
 8001ac6:	f001 fabe 	bl	8003046 <HAL_NVIC_EnableIRQ>

}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08a      	sub	sp, #40	@ 0x28
 8001adc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
 8001aec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	4b38      	ldr	r3, [pc, #224]	@ (8001bd4 <MX_GPIO_Init+0xfc>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	4a37      	ldr	r2, [pc, #220]	@ (8001bd4 <MX_GPIO_Init+0xfc>)
 8001af8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afe:	4b35      	ldr	r3, [pc, #212]	@ (8001bd4 <MX_GPIO_Init+0xfc>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b31      	ldr	r3, [pc, #196]	@ (8001bd4 <MX_GPIO_Init+0xfc>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	4a30      	ldr	r2, [pc, #192]	@ (8001bd4 <MX_GPIO_Init+0xfc>)
 8001b14:	f043 0304 	orr.w	r3, r3, #4
 8001b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd4 <MX_GPIO_Init+0xfc>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	f003 0304 	and.w	r3, r3, #4
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	60bb      	str	r3, [r7, #8]
 8001b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8001bd4 <MX_GPIO_Init+0xfc>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	4a29      	ldr	r2, [pc, #164]	@ (8001bd4 <MX_GPIO_Init+0xfc>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b36:	4b27      	ldr	r3, [pc, #156]	@ (8001bd4 <MX_GPIO_Init+0xfc>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	60bb      	str	r3, [r7, #8]
 8001b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	607b      	str	r3, [r7, #4]
 8001b46:	4b23      	ldr	r3, [pc, #140]	@ (8001bd4 <MX_GPIO_Init+0xfc>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4a:	4a22      	ldr	r2, [pc, #136]	@ (8001bd4 <MX_GPIO_Init+0xfc>)
 8001b4c:	f043 0302 	orr.w	r3, r3, #2
 8001b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b52:	4b20      	ldr	r3, [pc, #128]	@ (8001bd4 <MX_GPIO_Init+0xfc>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	f003 0302 	and.w	r3, r3, #2
 8001b5a:	607b      	str	r3, [r7, #4]
 8001b5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Enable5V_Pin|Enable3_3VBis_Pin|Enable3_3V_Pin|Enable5VBis_Pin
 8001b5e:	2200      	movs	r2, #0
 8001b60:	f645 4104 	movw	r1, #23556	@ 0x5c04
 8001b64:	481c      	ldr	r0, [pc, #112]	@ (8001bd8 <MX_GPIO_Init+0x100>)
 8001b66:	f001 ff57 	bl	8003a18 <HAL_GPIO_WritePin>
                          |EnableCalefactor_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EnableBatOut_GPIO_Port, EnableBatOut_Pin, GPIO_PIN_RESET);
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001b70:	481a      	ldr	r0, [pc, #104]	@ (8001bdc <MX_GPIO_Init+0x104>)
 8001b72:	f001 ff51 	bl	8003a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Enable5V_Pin Enable3_3VBis_Pin Enable3_3V_Pin Enable5VBis_Pin
                           EnableCalefactor_Pin */
  GPIO_InitStruct.Pin = Enable5V_Pin|Enable3_3VBis_Pin|Enable3_3V_Pin|Enable5VBis_Pin
 8001b76:	f645 4304 	movw	r3, #23556	@ 0x5c04
 8001b7a:	617b      	str	r3, [r7, #20]
                          |EnableCalefactor_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b84:	2300      	movs	r3, #0
 8001b86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4812      	ldr	r0, [pc, #72]	@ (8001bd8 <MX_GPIO_Init+0x100>)
 8001b90:	f001 fd8e 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EnableBatOut_Pin */
  GPIO_InitStruct.Pin = EnableBatOut_Pin;
 8001b94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EnableBatOut_GPIO_Port, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	480b      	ldr	r0, [pc, #44]	@ (8001bdc <MX_GPIO_Init+0x104>)
 8001bae:	f001 fd7f 	bl	80036b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BMS_Alert_Pin */
  GPIO_InitStruct.Pin = BMS_Alert_Pin;
 8001bb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BMS_Alert_GPIO_Port, &GPIO_InitStruct);
 8001bc0:	f107 0314 	add.w	r3, r7, #20
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4804      	ldr	r0, [pc, #16]	@ (8001bd8 <MX_GPIO_Init+0x100>)
 8001bc8:	f001 fd72 	bl	80036b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bcc:	bf00      	nop
 8001bce:	3728      	adds	r7, #40	@ 0x28
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	40020000 	.word	0x40020000

08001be0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be4:	b672      	cpsid	i
}
 8001be6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <Error_Handler+0x8>

08001bec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	4b10      	ldr	r3, [pc, #64]	@ (8001c38 <HAL_MspInit+0x4c>)
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfa:	4a0f      	ldr	r2, [pc, #60]	@ (8001c38 <HAL_MspInit+0x4c>)
 8001bfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c02:	4b0d      	ldr	r3, [pc, #52]	@ (8001c38 <HAL_MspInit+0x4c>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c0a:	607b      	str	r3, [r7, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	4b09      	ldr	r3, [pc, #36]	@ (8001c38 <HAL_MspInit+0x4c>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c16:	4a08      	ldr	r2, [pc, #32]	@ (8001c38 <HAL_MspInit+0x4c>)
 8001c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c1e:	4b06      	ldr	r3, [pc, #24]	@ (8001c38 <HAL_MspInit+0x4c>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c26:	603b      	str	r3, [r7, #0]
 8001c28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	40023800 	.word	0x40023800

08001c3c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b090      	sub	sp, #64	@ 0x40
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a6c      	ldr	r2, [pc, #432]	@ (8001e0c <HAL_ADC_MspInit+0x1d0>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d142      	bne.n	8001ce4 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c62:	4b6b      	ldr	r3, [pc, #428]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c66:	4a6a      	ldr	r2, [pc, #424]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001c68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c6e:	4b68      	ldr	r3, [pc, #416]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c7e:	4b64      	ldr	r3, [pc, #400]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	4a63      	ldr	r2, [pc, #396]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001c84:	f043 0304 	orr.w	r3, r3, #4
 8001c88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c8a:	4b61      	ldr	r3, [pc, #388]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8e:	f003 0304 	and.w	r3, r3, #4
 8001c92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
 8001c9a:	4b5d      	ldr	r3, [pc, #372]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	4a5c      	ldr	r2, [pc, #368]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca6:	4b5a      	ldr	r3, [pc, #360]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001caa:	f003 0301 	and.w	r3, r3, #1
 8001cae:	623b      	str	r3, [r7, #32]
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = CurrYMPPT_Pin|VoltYMPPT_Pin|Volt5V_Pin|Curr5V_Pin;
 8001cb2:	233c      	movs	r3, #60	@ 0x3c
 8001cb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cbe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4853      	ldr	r0, [pc, #332]	@ (8001e14 <HAL_ADC_MspInit+0x1d8>)
 8001cc6:	f001 fcf3 	bl	80036b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Curr5VBis_Pin|Volt5VBis_Pin;
 8001cca:	2330      	movs	r3, #48	@ 0x30
 8001ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cda:	4619      	mov	r1, r3
 8001cdc:	484e      	ldr	r0, [pc, #312]	@ (8001e18 <HAL_ADC_MspInit+0x1dc>)
 8001cde:	f001 fce7 	bl	80036b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001ce2:	e08e      	b.n	8001e02 <HAL_ADC_MspInit+0x1c6>
  else if(hadc->Instance==ADC2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a4c      	ldr	r2, [pc, #304]	@ (8001e1c <HAL_ADC_MspInit+0x1e0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d15c      	bne.n	8001da8 <HAL_ADC_MspInit+0x16c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	4b47      	ldr	r3, [pc, #284]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf6:	4a46      	ldr	r2, [pc, #280]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001cf8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cfe:	4b44      	ldr	r3, [pc, #272]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d06:	61fb      	str	r3, [r7, #28]
 8001d08:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
 8001d0e:	4b40      	ldr	r3, [pc, #256]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d12:	4a3f      	ldr	r2, [pc, #252]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001d14:	f043 0304 	orr.w	r3, r3, #4
 8001d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d1a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	61bb      	str	r3, [r7, #24]
 8001d24:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	4b39      	ldr	r3, [pc, #228]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	4a38      	ldr	r2, [pc, #224]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d36:	4b36      	ldr	r3, [pc, #216]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	f003 0301 	and.w	r3, r3, #1
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	4b32      	ldr	r3, [pc, #200]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	4a31      	ldr	r2, [pc, #196]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001d4c:	f043 0302 	orr.w	r3, r3, #2
 8001d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d52:	4b2f      	ldr	r3, [pc, #188]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	f003 0302 	and.w	r3, r3, #2
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = CurrXMPPT_Pin|VoltXMPPT_Pin;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d62:	2303      	movs	r3, #3
 8001d64:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d6a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4828      	ldr	r0, [pc, #160]	@ (8001e14 <HAL_ADC_MspInit+0x1d8>)
 8001d72:	f001 fc9d 	bl	80036b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Volt3_3V_Pin|Curr3_3V_Pin;
 8001d76:	23c0      	movs	r3, #192	@ 0xc0
 8001d78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d86:	4619      	mov	r1, r3
 8001d88:	4823      	ldr	r0, [pc, #140]	@ (8001e18 <HAL_ADC_MspInit+0x1dc>)
 8001d8a:	f001 fc91 	bl	80036b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Volt3_3VBis_Pin|Curr3_3Vbis_Pin;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d92:	2303      	movs	r3, #3
 8001d94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d9a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d9e:	4619      	mov	r1, r3
 8001da0:	481f      	ldr	r0, [pc, #124]	@ (8001e20 <HAL_ADC_MspInit+0x1e4>)
 8001da2:	f001 fc85 	bl	80036b0 <HAL_GPIO_Init>
}
 8001da6:	e02c      	b.n	8001e02 <HAL_ADC_MspInit+0x1c6>
  else if(hadc->Instance==ADC3)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1d      	ldr	r2, [pc, #116]	@ (8001e24 <HAL_ADC_MspInit+0x1e8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d127      	bne.n	8001e02 <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b16      	ldr	r3, [pc, #88]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dba:	4a15      	ldr	r2, [pc, #84]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001dbc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001dc0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dc2:	4b13      	ldr	r3, [pc, #76]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	4a0e      	ldr	r2, [pc, #56]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dde:	4b0c      	ldr	r3, [pc, #48]	@ (8001e10 <HAL_ADC_MspInit+0x1d4>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	60bb      	str	r3, [r7, #8]
 8001de8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CurrZMPPT_Pin|VoltZMPPT_Pin;
 8001dea:	2306      	movs	r3, #6
 8001dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dee:	2303      	movs	r3, #3
 8001df0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4806      	ldr	r0, [pc, #24]	@ (8001e18 <HAL_ADC_MspInit+0x1dc>)
 8001dfe:	f001 fc57 	bl	80036b0 <HAL_GPIO_Init>
}
 8001e02:	bf00      	nop
 8001e04:	3740      	adds	r7, #64	@ 0x40
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40012000 	.word	0x40012000
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020800 	.word	0x40020800
 8001e18:	40020000 	.word	0x40020000
 8001e1c:	40012100 	.word	0x40012100
 8001e20:	40020400 	.word	0x40020400
 8001e24:	40012200 	.word	0x40012200

08001e28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08c      	sub	sp, #48	@ 0x30
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a80      	ldr	r2, [pc, #512]	@ (8002048 <HAL_I2C_MspInit+0x220>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d13c      	bne.n	8001ec4 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
 8001e4e:	4b7f      	ldr	r3, [pc, #508]	@ (800204c <HAL_I2C_MspInit+0x224>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	4a7e      	ldr	r2, [pc, #504]	@ (800204c <HAL_I2C_MspInit+0x224>)
 8001e54:	f043 0302 	orr.w	r3, r3, #2
 8001e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5a:	4b7c      	ldr	r3, [pc, #496]	@ (800204c <HAL_I2C_MspInit+0x224>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	61bb      	str	r3, [r7, #24]
 8001e64:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_BMS_Pin|SDA_BMS_Pin;
 8001e66:	23c0      	movs	r3, #192	@ 0xc0
 8001e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e6a:	2312      	movs	r3, #18
 8001e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e76:	2304      	movs	r3, #4
 8001e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7a:	f107 031c 	add.w	r3, r7, #28
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4873      	ldr	r0, [pc, #460]	@ (8002050 <HAL_I2C_MspInit+0x228>)
 8001e82:	f001 fc15 	bl	80036b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	4b70      	ldr	r3, [pc, #448]	@ (800204c <HAL_I2C_MspInit+0x224>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	4a6f      	ldr	r2, [pc, #444]	@ (800204c <HAL_I2C_MspInit+0x224>)
 8001e90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e96:	4b6d      	ldr	r3, [pc, #436]	@ (800204c <HAL_I2C_MspInit+0x224>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	201f      	movs	r0, #31
 8001ea8:	f001 f8b1 	bl	800300e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001eac:	201f      	movs	r0, #31
 8001eae:	f001 f8ca 	bl	8003046 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2020      	movs	r0, #32
 8001eb8:	f001 f8a9 	bl	800300e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001ebc:	2020      	movs	r0, #32
 8001ebe:	f001 f8c2 	bl	8003046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001ec2:	e0bd      	b.n	8002040 <HAL_I2C_MspInit+0x218>
  else if(hi2c->Instance==I2C3)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a62      	ldr	r2, [pc, #392]	@ (8002054 <HAL_I2C_MspInit+0x22c>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	f040 80b8 	bne.w	8002040 <HAL_I2C_MspInit+0x218>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	4b5d      	ldr	r3, [pc, #372]	@ (800204c <HAL_I2C_MspInit+0x224>)
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed8:	4a5c      	ldr	r2, [pc, #368]	@ (800204c <HAL_I2C_MspInit+0x224>)
 8001eda:	f043 0304 	orr.w	r3, r3, #4
 8001ede:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee0:	4b5a      	ldr	r3, [pc, #360]	@ (800204c <HAL_I2C_MspInit+0x224>)
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	4b56      	ldr	r3, [pc, #344]	@ (800204c <HAL_I2C_MspInit+0x224>)
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef4:	4a55      	ldr	r2, [pc, #340]	@ (800204c <HAL_I2C_MspInit+0x224>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efc:	4b53      	ldr	r3, [pc, #332]	@ (800204c <HAL_I2C_MspInit+0x224>)
 8001efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SDA_Sat_Pin;
 8001f08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f0e:	2312      	movs	r3, #18
 8001f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f12:	2301      	movs	r3, #1
 8001f14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SDA_Sat_GPIO_Port, &GPIO_InitStruct);
 8001f1e:	f107 031c 	add.w	r3, r7, #28
 8001f22:	4619      	mov	r1, r3
 8001f24:	484c      	ldr	r0, [pc, #304]	@ (8002058 <HAL_I2C_MspInit+0x230>)
 8001f26:	f001 fbc3 	bl	80036b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCL_Sat_Pin;
 8001f2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f30:	2312      	movs	r3, #18
 8001f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SCL_Sat_GPIO_Port, &GPIO_InitStruct);
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	4619      	mov	r1, r3
 8001f46:	4845      	ldr	r0, [pc, #276]	@ (800205c <HAL_I2C_MspInit+0x234>)
 8001f48:	f001 fbb2 	bl	80036b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60bb      	str	r3, [r7, #8]
 8001f50:	4b3e      	ldr	r3, [pc, #248]	@ (800204c <HAL_I2C_MspInit+0x224>)
 8001f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f54:	4a3d      	ldr	r2, [pc, #244]	@ (800204c <HAL_I2C_MspInit+0x224>)
 8001f56:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800204c <HAL_I2C_MspInit+0x224>)
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	68bb      	ldr	r3, [r7, #8]
    hdma_i2c3_tx.Instance = DMA1_Stream4;
 8001f68:	4b3d      	ldr	r3, [pc, #244]	@ (8002060 <HAL_I2C_MspInit+0x238>)
 8001f6a:	4a3e      	ldr	r2, [pc, #248]	@ (8002064 <HAL_I2C_MspInit+0x23c>)
 8001f6c:	601a      	str	r2, [r3, #0]
    hdma_i2c3_tx.Init.Channel = DMA_CHANNEL_3;
 8001f6e:	4b3c      	ldr	r3, [pc, #240]	@ (8002060 <HAL_I2C_MspInit+0x238>)
 8001f70:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001f74:	605a      	str	r2, [r3, #4]
    hdma_i2c3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f76:	4b3a      	ldr	r3, [pc, #232]	@ (8002060 <HAL_I2C_MspInit+0x238>)
 8001f78:	2240      	movs	r2, #64	@ 0x40
 8001f7a:	609a      	str	r2, [r3, #8]
    hdma_i2c3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f7c:	4b38      	ldr	r3, [pc, #224]	@ (8002060 <HAL_I2C_MspInit+0x238>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	60da      	str	r2, [r3, #12]
    hdma_i2c3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f82:	4b37      	ldr	r3, [pc, #220]	@ (8002060 <HAL_I2C_MspInit+0x238>)
 8001f84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f88:	611a      	str	r2, [r3, #16]
    hdma_i2c3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f8a:	4b35      	ldr	r3, [pc, #212]	@ (8002060 <HAL_I2C_MspInit+0x238>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	615a      	str	r2, [r3, #20]
    hdma_i2c3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f90:	4b33      	ldr	r3, [pc, #204]	@ (8002060 <HAL_I2C_MspInit+0x238>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	619a      	str	r2, [r3, #24]
    hdma_i2c3_tx.Init.Mode = DMA_NORMAL;
 8001f96:	4b32      	ldr	r3, [pc, #200]	@ (8002060 <HAL_I2C_MspInit+0x238>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	61da      	str	r2, [r3, #28]
    hdma_i2c3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f9c:	4b30      	ldr	r3, [pc, #192]	@ (8002060 <HAL_I2C_MspInit+0x238>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	621a      	str	r2, [r3, #32]
    hdma_i2c3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fa2:	4b2f      	ldr	r3, [pc, #188]	@ (8002060 <HAL_I2C_MspInit+0x238>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c3_tx) != HAL_OK)
 8001fa8:	482d      	ldr	r0, [pc, #180]	@ (8002060 <HAL_I2C_MspInit+0x238>)
 8001faa:	f001 f867 	bl	800307c <HAL_DMA_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <HAL_I2C_MspInit+0x190>
      Error_Handler();
 8001fb4:	f7ff fe14 	bl	8001be0 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c3_tx);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a29      	ldr	r2, [pc, #164]	@ (8002060 <HAL_I2C_MspInit+0x238>)
 8001fbc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001fbe:	4a28      	ldr	r2, [pc, #160]	@ (8002060 <HAL_I2C_MspInit+0x238>)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_i2c3_rx.Instance = DMA1_Stream2;
 8001fc4:	4b28      	ldr	r3, [pc, #160]	@ (8002068 <HAL_I2C_MspInit+0x240>)
 8001fc6:	4a29      	ldr	r2, [pc, #164]	@ (800206c <HAL_I2C_MspInit+0x244>)
 8001fc8:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_3;
 8001fca:	4b27      	ldr	r3, [pc, #156]	@ (8002068 <HAL_I2C_MspInit+0x240>)
 8001fcc:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001fd0:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fd2:	4b25      	ldr	r3, [pc, #148]	@ (8002068 <HAL_I2C_MspInit+0x240>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fd8:	4b23      	ldr	r3, [pc, #140]	@ (8002068 <HAL_I2C_MspInit+0x240>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fde:	4b22      	ldr	r3, [pc, #136]	@ (8002068 <HAL_I2C_MspInit+0x240>)
 8001fe0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fe4:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fe6:	4b20      	ldr	r3, [pc, #128]	@ (8002068 <HAL_I2C_MspInit+0x240>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fec:	4b1e      	ldr	r3, [pc, #120]	@ (8002068 <HAL_I2C_MspInit+0x240>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8002068 <HAL_I2C_MspInit+0x240>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	@ (8002068 <HAL_I2C_MspInit+0x240>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8002068 <HAL_I2C_MspInit+0x240>)
 8002000:	2200      	movs	r2, #0
 8002002:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 8002004:	4818      	ldr	r0, [pc, #96]	@ (8002068 <HAL_I2C_MspInit+0x240>)
 8002006:	f001 f839 	bl	800307c <HAL_DMA_Init>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <HAL_I2C_MspInit+0x1ec>
      Error_Handler();
 8002010:	f7ff fde6 	bl	8001be0 <Error_Handler>
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c3_rx);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a14      	ldr	r2, [pc, #80]	@ (8002068 <HAL_I2C_MspInit+0x240>)
 8002018:	639a      	str	r2, [r3, #56]	@ 0x38
 800201a:	4a13      	ldr	r2, [pc, #76]	@ (8002068 <HAL_I2C_MspInit+0x240>)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 0, 0);
 8002020:	2200      	movs	r2, #0
 8002022:	2100      	movs	r1, #0
 8002024:	2048      	movs	r0, #72	@ 0x48
 8002026:	f000 fff2 	bl	800300e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800202a:	2048      	movs	r0, #72	@ 0x48
 800202c:	f001 f80b 	bl	8003046 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 8002030:	2200      	movs	r2, #0
 8002032:	2100      	movs	r1, #0
 8002034:	2049      	movs	r0, #73	@ 0x49
 8002036:	f000 ffea 	bl	800300e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800203a:	2049      	movs	r0, #73	@ 0x49
 800203c:	f001 f803 	bl	8003046 <HAL_NVIC_EnableIRQ>
}
 8002040:	bf00      	nop
 8002042:	3730      	adds	r7, #48	@ 0x30
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40005400 	.word	0x40005400
 800204c:	40023800 	.word	0x40023800
 8002050:	40020400 	.word	0x40020400
 8002054:	40005c00 	.word	0x40005c00
 8002058:	40020800 	.word	0x40020800
 800205c:	40020000 	.word	0x40020000
 8002060:	2000046c 	.word	0x2000046c
 8002064:	40026070 	.word	0x40026070
 8002068:	200004cc 	.word	0x200004cc
 800206c:	40026040 	.word	0x40026040

08002070 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002070:	b480      	push	{r7}
 8002072:	b087      	sub	sp, #28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002080:	d10e      	bne.n	80020a0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	4b1d      	ldr	r3, [pc, #116]	@ (80020fc <HAL_TIM_PWM_MspInit+0x8c>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	4a1c      	ldr	r2, [pc, #112]	@ (80020fc <HAL_TIM_PWM_MspInit+0x8c>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6413      	str	r3, [r2, #64]	@ 0x40
 8002092:	4b1a      	ldr	r3, [pc, #104]	@ (80020fc <HAL_TIM_PWM_MspInit+0x8c>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	617b      	str	r3, [r7, #20]
 800209c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800209e:	e026      	b.n	80020ee <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a16      	ldr	r2, [pc, #88]	@ (8002100 <HAL_TIM_PWM_MspInit+0x90>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d10e      	bne.n	80020c8 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	4b13      	ldr	r3, [pc, #76]	@ (80020fc <HAL_TIM_PWM_MspInit+0x8c>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b2:	4a12      	ldr	r2, [pc, #72]	@ (80020fc <HAL_TIM_PWM_MspInit+0x8c>)
 80020b4:	f043 0304 	orr.w	r3, r3, #4
 80020b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ba:	4b10      	ldr	r3, [pc, #64]	@ (80020fc <HAL_TIM_PWM_MspInit+0x8c>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	f003 0304 	and.w	r3, r3, #4
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]
}
 80020c6:	e012      	b.n	80020ee <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002104 <HAL_TIM_PWM_MspInit+0x94>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d10d      	bne.n	80020ee <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <HAL_TIM_PWM_MspInit+0x8c>)
 80020d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020da:	4a08      	ldr	r2, [pc, #32]	@ (80020fc <HAL_TIM_PWM_MspInit+0x8c>)
 80020dc:	f043 0308 	orr.w	r3, r3, #8
 80020e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020e2:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <HAL_TIM_PWM_MspInit+0x8c>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]
}
 80020ee:	bf00      	nop
 80020f0:	371c      	adds	r7, #28
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	40023800 	.word	0x40023800
 8002100:	40000800 	.word	0x40000800
 8002104:	40000c00 	.word	0x40000c00

08002108 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	@ 0x28
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002110:	f107 0314 	add.w	r3, r7, #20
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
 800211c:	60da      	str	r2, [r3, #12]
 800211e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002128:	d11e      	bne.n	8002168 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	4b34      	ldr	r3, [pc, #208]	@ (8002200 <HAL_TIM_MspPostInit+0xf8>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	4a33      	ldr	r2, [pc, #204]	@ (8002200 <HAL_TIM_MspPostInit+0xf8>)
 8002134:	f043 0301 	orr.w	r3, r3, #1
 8002138:	6313      	str	r3, [r2, #48]	@ 0x30
 800213a:	4b31      	ldr	r3, [pc, #196]	@ (8002200 <HAL_TIM_MspPostInit+0xf8>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = MPPTYControl_Pin;
 8002146:	2301      	movs	r3, #1
 8002148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800214a:	2302      	movs	r3, #2
 800214c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002156:	2301      	movs	r3, #1
 8002158:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPPTYControl_GPIO_Port, &GPIO_InitStruct);
 800215a:	f107 0314 	add.w	r3, r7, #20
 800215e:	4619      	mov	r1, r3
 8002160:	4828      	ldr	r0, [pc, #160]	@ (8002204 <HAL_TIM_MspPostInit+0xfc>)
 8002162:	f001 faa5 	bl	80036b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002166:	e047      	b.n	80021f8 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a26      	ldr	r2, [pc, #152]	@ (8002208 <HAL_TIM_MspPostInit+0x100>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d11f      	bne.n	80021b2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	4b22      	ldr	r3, [pc, #136]	@ (8002200 <HAL_TIM_MspPostInit+0xf8>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	4a21      	ldr	r2, [pc, #132]	@ (8002200 <HAL_TIM_MspPostInit+0xf8>)
 800217c:	f043 0302 	orr.w	r3, r3, #2
 8002180:	6313      	str	r3, [r2, #48]	@ 0x30
 8002182:	4b1f      	ldr	r3, [pc, #124]	@ (8002200 <HAL_TIM_MspPostInit+0xf8>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	60fb      	str	r3, [r7, #12]
 800218c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MPPTXControl_Pin;
 800218e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002194:	2302      	movs	r3, #2
 8002196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002198:	2300      	movs	r3, #0
 800219a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219c:	2300      	movs	r3, #0
 800219e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80021a0:	2302      	movs	r3, #2
 80021a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPPTXControl_GPIO_Port, &GPIO_InitStruct);
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	4619      	mov	r1, r3
 80021aa:	4818      	ldr	r0, [pc, #96]	@ (800220c <HAL_TIM_MspPostInit+0x104>)
 80021ac:	f001 fa80 	bl	80036b0 <HAL_GPIO_Init>
}
 80021b0:	e022      	b.n	80021f8 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a16      	ldr	r2, [pc, #88]	@ (8002210 <HAL_TIM_MspPostInit+0x108>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d11d      	bne.n	80021f8 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021bc:	2300      	movs	r3, #0
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002200 <HAL_TIM_MspPostInit+0xf8>)
 80021c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c4:	4a0e      	ldr	r2, [pc, #56]	@ (8002200 <HAL_TIM_MspPostInit+0xf8>)
 80021c6:	f043 0301 	orr.w	r3, r3, #1
 80021ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80021cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002200 <HAL_TIM_MspPostInit+0xf8>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	60bb      	str	r3, [r7, #8]
 80021d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MPPTZControl_Pin;
 80021d8:	2308      	movs	r3, #8
 80021da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	2302      	movs	r3, #2
 80021de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e4:	2300      	movs	r3, #0
 80021e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80021e8:	2302      	movs	r3, #2
 80021ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPPTZControl_GPIO_Port, &GPIO_InitStruct);
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	4619      	mov	r1, r3
 80021f2:	4804      	ldr	r0, [pc, #16]	@ (8002204 <HAL_TIM_MspPostInit+0xfc>)
 80021f4:	f001 fa5c 	bl	80036b0 <HAL_GPIO_Init>
}
 80021f8:	bf00      	nop
 80021fa:	3728      	adds	r7, #40	@ 0x28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40023800 	.word	0x40023800
 8002204:	40020000 	.word	0x40020000
 8002208:	40000800 	.word	0x40000800
 800220c:	40020400 	.word	0x40020400
 8002210:	40000c00 	.word	0x40000c00

08002214 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08a      	sub	sp, #40	@ 0x28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a19      	ldr	r2, [pc, #100]	@ (8002298 <HAL_UART_MspInit+0x84>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d12c      	bne.n	8002290 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	4b18      	ldr	r3, [pc, #96]	@ (800229c <HAL_UART_MspInit+0x88>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	4a17      	ldr	r2, [pc, #92]	@ (800229c <HAL_UART_MspInit+0x88>)
 8002240:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002244:	6413      	str	r3, [r2, #64]	@ 0x40
 8002246:	4b15      	ldr	r3, [pc, #84]	@ (800229c <HAL_UART_MspInit+0x88>)
 8002248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800224a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	4b11      	ldr	r3, [pc, #68]	@ (800229c <HAL_UART_MspInit+0x88>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	4a10      	ldr	r2, [pc, #64]	@ (800229c <HAL_UART_MspInit+0x88>)
 800225c:	f043 0304 	orr.w	r3, r3, #4
 8002260:	6313      	str	r3, [r2, #48]	@ 0x30
 8002262:	4b0e      	ldr	r3, [pc, #56]	@ (800229c <HAL_UART_MspInit+0x88>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	f003 0304 	and.w	r3, r3, #4
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 800226e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002274:	2302      	movs	r3, #2
 8002276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800227c:	2303      	movs	r3, #3
 800227e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002280:	2308      	movs	r3, #8
 8002282:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	4619      	mov	r1, r3
 800228a:	4805      	ldr	r0, [pc, #20]	@ (80022a0 <HAL_UART_MspInit+0x8c>)
 800228c:	f001 fa10 	bl	80036b0 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8002290:	bf00      	nop
 8002292:	3728      	adds	r7, #40	@ 0x28
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40004c00 	.word	0x40004c00
 800229c:	40023800 	.word	0x40023800
 80022a0:	40020800 	.word	0x40020800

080022a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <NMI_Handler+0x4>

080022ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <HardFault_Handler+0x4>

080022b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <MemManage_Handler+0x4>

080022bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <BusFault_Handler+0x4>

080022c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <UsageFault_Handler+0x4>

080022cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022d0:	bf00      	nop
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr

080022da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022fa:	f000 f99d 	bl	8002638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
	...

08002304 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8002308:	4802      	ldr	r0, [pc, #8]	@ (8002314 <DMA1_Stream2_IRQHandler+0x10>)
 800230a:	f000 ff87 	bl	800321c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	200004cc 	.word	0x200004cc

08002318 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_tx);
 800231c:	4802      	ldr	r0, [pc, #8]	@ (8002328 <DMA1_Stream4_IRQHandler+0x10>)
 800231e:	f000 ff7d 	bl	800321c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	2000046c 	.word	0x2000046c

0800232c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002330:	4802      	ldr	r0, [pc, #8]	@ (800233c <I2C1_EV_IRQHandler+0x10>)
 8002332:	f002 f92b 	bl	800458c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	200003c4 	.word	0x200003c4

08002340 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002344:	4802      	ldr	r0, [pc, #8]	@ (8002350 <I2C1_ER_IRQHandler+0x10>)
 8002346:	f002 fa74 	bl	8004832 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	200003c4 	.word	0x200003c4

08002354 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002358:	4802      	ldr	r0, [pc, #8]	@ (8002364 <OTG_FS_IRQHandler+0x10>)
 800235a:	f004 fa92 	bl	8006882 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20001b60 	.word	0x20001b60

08002368 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 800236c:	4802      	ldr	r0, [pc, #8]	@ (8002378 <I2C3_EV_IRQHandler+0x10>)
 800236e:	f002 f90d 	bl	800458c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000418 	.word	0x20000418

0800237c <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8002380:	4802      	ldr	r0, [pc, #8]	@ (800238c <I2C3_ER_IRQHandler+0x10>)
 8002382:	f002 fa56 	bl	8004832 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000418 	.word	0x20000418

08002390 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return 1;
 8002394:	2301      	movs	r3, #1
}
 8002396:	4618      	mov	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <_kill>:

int _kill(int pid, int sig)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023aa:	f00b fe1b 	bl	800dfe4 <__errno>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2216      	movs	r2, #22
 80023b2:	601a      	str	r2, [r3, #0]
  return -1;
 80023b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <_exit>:

void _exit (int status)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff ffe7 	bl	80023a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023d2:	bf00      	nop
 80023d4:	e7fd      	b.n	80023d2 <_exit+0x12>

080023d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b086      	sub	sp, #24
 80023da:	af00      	add	r7, sp, #0
 80023dc:	60f8      	str	r0, [r7, #12]
 80023de:	60b9      	str	r1, [r7, #8]
 80023e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e2:	2300      	movs	r3, #0
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	e00a      	b.n	80023fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023e8:	f3af 8000 	nop.w
 80023ec:	4601      	mov	r1, r0
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	60ba      	str	r2, [r7, #8]
 80023f4:	b2ca      	uxtb	r2, r1
 80023f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	3301      	adds	r3, #1
 80023fc:	617b      	str	r3, [r7, #20]
 80023fe:	697a      	ldr	r2, [r7, #20]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	429a      	cmp	r2, r3
 8002404:	dbf0      	blt.n	80023e8 <_read+0x12>
  }

  return len;
 8002406:	687b      	ldr	r3, [r7, #4]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b086      	sub	sp, #24
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	e009      	b.n	8002436 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	60ba      	str	r2, [r7, #8]
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	3301      	adds	r3, #1
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	429a      	cmp	r2, r3
 800243c:	dbf1      	blt.n	8002422 <_write+0x12>
  }
  return len;
 800243e:	687b      	ldr	r3, [r7, #4]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3718      	adds	r7, #24
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <_close>:

int _close(int file)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002450:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002470:	605a      	str	r2, [r3, #4]
  return 0;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <_isatty>:

int _isatty(int file)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002488:	2301      	movs	r3, #1
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002496:	b480      	push	{r7}
 8002498:	b085      	sub	sp, #20
 800249a:	af00      	add	r7, sp, #0
 800249c:	60f8      	str	r0, [r7, #12]
 800249e:	60b9      	str	r1, [r7, #8]
 80024a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b8:	4a14      	ldr	r2, [pc, #80]	@ (800250c <_sbrk+0x5c>)
 80024ba:	4b15      	ldr	r3, [pc, #84]	@ (8002510 <_sbrk+0x60>)
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024c4:	4b13      	ldr	r3, [pc, #76]	@ (8002514 <_sbrk+0x64>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d102      	bne.n	80024d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024cc:	4b11      	ldr	r3, [pc, #68]	@ (8002514 <_sbrk+0x64>)
 80024ce:	4a12      	ldr	r2, [pc, #72]	@ (8002518 <_sbrk+0x68>)
 80024d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024d2:	4b10      	ldr	r3, [pc, #64]	@ (8002514 <_sbrk+0x64>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d207      	bcs.n	80024f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024e0:	f00b fd80 	bl	800dfe4 <__errno>
 80024e4:	4603      	mov	r3, r0
 80024e6:	220c      	movs	r2, #12
 80024e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024ee:	e009      	b.n	8002504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024f0:	4b08      	ldr	r3, [pc, #32]	@ (8002514 <_sbrk+0x64>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024f6:	4b07      	ldr	r3, [pc, #28]	@ (8002514 <_sbrk+0x64>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	4a05      	ldr	r2, [pc, #20]	@ (8002514 <_sbrk+0x64>)
 8002500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002502:	68fb      	ldr	r3, [r7, #12]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20020000 	.word	0x20020000
 8002510:	00000400 	.word	0x00000400
 8002514:	20000678 	.word	0x20000678
 8002518:	200023b0 	.word	0x200023b0

0800251c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002520:	4b06      	ldr	r3, [pc, #24]	@ (800253c <SystemInit+0x20>)
 8002522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002526:	4a05      	ldr	r2, [pc, #20]	@ (800253c <SystemInit+0x20>)
 8002528:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800252c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002540:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002578 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002544:	f7ff ffea 	bl	800251c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002548:	480c      	ldr	r0, [pc, #48]	@ (800257c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800254a:	490d      	ldr	r1, [pc, #52]	@ (8002580 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800254c:	4a0d      	ldr	r2, [pc, #52]	@ (8002584 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800254e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002550:	e002      	b.n	8002558 <LoopCopyDataInit>

08002552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002556:	3304      	adds	r3, #4

08002558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800255a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800255c:	d3f9      	bcc.n	8002552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800255e:	4a0a      	ldr	r2, [pc, #40]	@ (8002588 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002560:	4c0a      	ldr	r4, [pc, #40]	@ (800258c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002564:	e001      	b.n	800256a <LoopFillZerobss>

08002566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002568:	3204      	adds	r2, #4

0800256a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800256a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800256c:	d3fb      	bcc.n	8002566 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800256e:	f00b fd3f 	bl	800dff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002572:	f7fe fdfb 	bl	800116c <main>
  bx  lr    
 8002576:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002578:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800257c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002580:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8002584:	080106c0 	.word	0x080106c0
  ldr r2, =_sbss
 8002588:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 800258c:	200023b0 	.word	0x200023b0

08002590 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002590:	e7fe      	b.n	8002590 <ADC_IRQHandler>
	...

08002594 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002598:	4b0e      	ldr	r3, [pc, #56]	@ (80025d4 <HAL_Init+0x40>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a0d      	ldr	r2, [pc, #52]	@ (80025d4 <HAL_Init+0x40>)
 800259e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025a4:	4b0b      	ldr	r3, [pc, #44]	@ (80025d4 <HAL_Init+0x40>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a0a      	ldr	r2, [pc, #40]	@ (80025d4 <HAL_Init+0x40>)
 80025aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025b0:	4b08      	ldr	r3, [pc, #32]	@ (80025d4 <HAL_Init+0x40>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a07      	ldr	r2, [pc, #28]	@ (80025d4 <HAL_Init+0x40>)
 80025b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025bc:	2003      	movs	r0, #3
 80025be:	f000 fd1b 	bl	8002ff8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025c2:	200f      	movs	r0, #15
 80025c4:	f000 f808 	bl	80025d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025c8:	f7ff fb10 	bl	8001bec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40023c00 	.word	0x40023c00

080025d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025e0:	4b12      	ldr	r3, [pc, #72]	@ (800262c <HAL_InitTick+0x54>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	4b12      	ldr	r3, [pc, #72]	@ (8002630 <HAL_InitTick+0x58>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	4619      	mov	r1, r3
 80025ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80025f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fd33 	bl	8003062 <HAL_SYSTICK_Config>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e00e      	b.n	8002624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2b0f      	cmp	r3, #15
 800260a:	d80a      	bhi.n	8002622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800260c:	2200      	movs	r2, #0
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002614:	f000 fcfb 	bl	800300e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002618:	4a06      	ldr	r2, [pc, #24]	@ (8002634 <HAL_InitTick+0x5c>)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800261e:	2300      	movs	r3, #0
 8002620:	e000      	b.n	8002624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
}
 8002624:	4618      	mov	r0, r3
 8002626:	3708      	adds	r7, #8
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	2000000c 	.word	0x2000000c
 8002630:	20000014 	.word	0x20000014
 8002634:	20000010 	.word	0x20000010

08002638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800263c:	4b06      	ldr	r3, [pc, #24]	@ (8002658 <HAL_IncTick+0x20>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	461a      	mov	r2, r3
 8002642:	4b06      	ldr	r3, [pc, #24]	@ (800265c <HAL_IncTick+0x24>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4413      	add	r3, r2
 8002648:	4a04      	ldr	r2, [pc, #16]	@ (800265c <HAL_IncTick+0x24>)
 800264a:	6013      	str	r3, [r2, #0]
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	20000014 	.word	0x20000014
 800265c:	2000067c 	.word	0x2000067c

08002660 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  return uwTick;
 8002664:	4b03      	ldr	r3, [pc, #12]	@ (8002674 <HAL_GetTick+0x14>)
 8002666:	681b      	ldr	r3, [r3, #0]
}
 8002668:	4618      	mov	r0, r3
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	2000067c 	.word	0x2000067c

08002678 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002680:	f7ff ffee 	bl	8002660 <HAL_GetTick>
 8002684:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002690:	d005      	beq.n	800269e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002692:	4b0a      	ldr	r3, [pc, #40]	@ (80026bc <HAL_Delay+0x44>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4413      	add	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800269e:	bf00      	nop
 80026a0:	f7ff ffde 	bl	8002660 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d8f7      	bhi.n	80026a0 <HAL_Delay+0x28>
  {
  }
}
 80026b0:	bf00      	nop
 80026b2:	bf00      	nop
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20000014 	.word	0x20000014

080026c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e033      	b.n	800273e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d109      	bne.n	80026f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7ff faac 	bl	8001c3c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d118      	bne.n	8002730 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002702:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002706:	f023 0302 	bic.w	r3, r3, #2
 800270a:	f043 0202 	orr.w	r2, r3, #2
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 faa4 	bl	8002c60 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002722:	f023 0303 	bic.w	r3, r3, #3
 8002726:	f043 0201 	orr.w	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	641a      	str	r2, [r3, #64]	@ 0x40
 800272e:	e001      	b.n	8002734 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800273c:	7bfb      	ldrb	r3, [r7, #15]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_ADC_Start+0x1a>
 800275e:	2302      	movs	r3, #2
 8002760:	e0b2      	b.n	80028c8 <HAL_ADC_Start+0x180>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b01      	cmp	r3, #1
 8002776:	d018      	beq.n	80027aa <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0201 	orr.w	r2, r2, #1
 8002786:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002788:	4b52      	ldr	r3, [pc, #328]	@ (80028d4 <HAL_ADC_Start+0x18c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a52      	ldr	r2, [pc, #328]	@ (80028d8 <HAL_ADC_Start+0x190>)
 800278e:	fba2 2303 	umull	r2, r3, r2, r3
 8002792:	0c9a      	lsrs	r2, r3, #18
 8002794:	4613      	mov	r3, r2
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4413      	add	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800279c:	e002      	b.n	80027a4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	3b01      	subs	r3, #1
 80027a2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f9      	bne.n	800279e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f003 0301 	and.w	r3, r3, #1
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d17a      	bne.n	80028ae <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027bc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80027c0:	f023 0301 	bic.w	r3, r3, #1
 80027c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d007      	beq.n	80027ea <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027de:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027e2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027f6:	d106      	bne.n	8002806 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027fc:	f023 0206 	bic.w	r2, r3, #6
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	645a      	str	r2, [r3, #68]	@ 0x44
 8002804:	e002      	b.n	800280c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002814:	4b31      	ldr	r3, [pc, #196]	@ (80028dc <HAL_ADC_Start+0x194>)
 8002816:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002820:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 031f 	and.w	r3, r3, #31
 800282a:	2b00      	cmp	r3, #0
 800282c:	d12a      	bne.n	8002884 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a2b      	ldr	r2, [pc, #172]	@ (80028e0 <HAL_ADC_Start+0x198>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d015      	beq.n	8002864 <HAL_ADC_Start+0x11c>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a29      	ldr	r2, [pc, #164]	@ (80028e4 <HAL_ADC_Start+0x19c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d105      	bne.n	800284e <HAL_ADC_Start+0x106>
 8002842:	4b26      	ldr	r3, [pc, #152]	@ (80028dc <HAL_ADC_Start+0x194>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	f003 031f 	and.w	r3, r3, #31
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00a      	beq.n	8002864 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a25      	ldr	r2, [pc, #148]	@ (80028e8 <HAL_ADC_Start+0x1a0>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d136      	bne.n	80028c6 <HAL_ADC_Start+0x17e>
 8002858:	4b20      	ldr	r3, [pc, #128]	@ (80028dc <HAL_ADC_Start+0x194>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	2b00      	cmp	r3, #0
 8002862:	d130      	bne.n	80028c6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d129      	bne.n	80028c6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002880:	609a      	str	r2, [r3, #8]
 8002882:	e020      	b.n	80028c6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a15      	ldr	r2, [pc, #84]	@ (80028e0 <HAL_ADC_Start+0x198>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d11b      	bne.n	80028c6 <HAL_ADC_Start+0x17e>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d114      	bne.n	80028c6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	e00b      	b.n	80028c6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	f043 0210 	orr.w	r2, r3, #16
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028be:	f043 0201 	orr.w	r2, r3, #1
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr
 80028d4:	2000000c 	.word	0x2000000c
 80028d8:	431bde83 	.word	0x431bde83
 80028dc:	40012300 	.word	0x40012300
 80028e0:	40012000 	.word	0x40012000
 80028e4:	40012100 	.word	0x40012100
 80028e8:	40012200 	.word	0x40012200

080028ec <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002904:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002908:	d113      	bne.n	8002932 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002914:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002918:	d10b      	bne.n	8002932 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291e:	f043 0220 	orr.w	r2, r3, #32
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e063      	b.n	80029fa <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002932:	f7ff fe95 	bl	8002660 <HAL_GetTick>
 8002936:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002938:	e021      	b.n	800297e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002940:	d01d      	beq.n	800297e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d007      	beq.n	8002958 <HAL_ADC_PollForConversion+0x6c>
 8002948:	f7ff fe8a 	bl	8002660 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	429a      	cmp	r2, r3
 8002956:	d212      	bcs.n	800297e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b02      	cmp	r3, #2
 8002964:	d00b      	beq.n	800297e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296a:	f043 0204 	orr.w	r2, r3, #4
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e03d      	b.n	80029fa <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0302 	and.w	r3, r3, #2
 8002988:	2b02      	cmp	r3, #2
 800298a:	d1d6      	bne.n	800293a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0212 	mvn.w	r2, #18
 8002994:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d123      	bne.n	80029f8 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d11f      	bne.n	80029f8 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029be:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d006      	beq.n	80029d4 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d111      	bne.n	80029f8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d105      	bne.n	80029f8 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f0:	f043 0201 	orr.w	r2, r3, #1
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x1c>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e105      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x228>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b09      	cmp	r3, #9
 8002a46:	d925      	bls.n	8002a94 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68d9      	ldr	r1, [r3, #12]
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	461a      	mov	r2, r3
 8002a56:	4613      	mov	r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4413      	add	r3, r2
 8002a5c:	3b1e      	subs	r3, #30
 8002a5e:	2207      	movs	r2, #7
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	43da      	mvns	r2, r3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	400a      	ands	r2, r1
 8002a6c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68d9      	ldr	r1, [r3, #12]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	4618      	mov	r0, r3
 8002a80:	4603      	mov	r3, r0
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	4403      	add	r3, r0
 8002a86:	3b1e      	subs	r3, #30
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	e022      	b.n	8002ada <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6919      	ldr	r1, [r3, #16]
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	4413      	add	r3, r2
 8002aa8:	2207      	movs	r2, #7
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43da      	mvns	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	400a      	ands	r2, r1
 8002ab6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	6919      	ldr	r1, [r3, #16]
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	4618      	mov	r0, r3
 8002aca:	4603      	mov	r3, r0
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	4403      	add	r3, r0
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	430a      	orrs	r2, r1
 8002ad8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b06      	cmp	r3, #6
 8002ae0:	d824      	bhi.n	8002b2c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4413      	add	r3, r2
 8002af2:	3b05      	subs	r3, #5
 8002af4:	221f      	movs	r2, #31
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43da      	mvns	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	400a      	ands	r2, r1
 8002b02:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	4618      	mov	r0, r3
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3b05      	subs	r3, #5
 8002b1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b2a:	e04c      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b0c      	cmp	r3, #12
 8002b32:	d824      	bhi.n	8002b7e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685a      	ldr	r2, [r3, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	3b23      	subs	r3, #35	@ 0x23
 8002b46:	221f      	movs	r2, #31
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43da      	mvns	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	400a      	ands	r2, r1
 8002b54:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	4618      	mov	r0, r3
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3b23      	subs	r3, #35	@ 0x23
 8002b70:	fa00 f203 	lsl.w	r2, r0, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b7c:	e023      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	3b41      	subs	r3, #65	@ 0x41
 8002b90:	221f      	movs	r2, #31
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	43da      	mvns	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	400a      	ands	r2, r1
 8002b9e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	4618      	mov	r0, r3
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3b41      	subs	r3, #65	@ 0x41
 8002bba:	fa00 f203 	lsl.w	r2, r0, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002bc6:	4b22      	ldr	r3, [pc, #136]	@ (8002c50 <HAL_ADC_ConfigChannel+0x234>)
 8002bc8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a21      	ldr	r2, [pc, #132]	@ (8002c54 <HAL_ADC_ConfigChannel+0x238>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d109      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x1cc>
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2b12      	cmp	r3, #18
 8002bda:	d105      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a19      	ldr	r2, [pc, #100]	@ (8002c54 <HAL_ADC_ConfigChannel+0x238>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d123      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x21e>
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2b10      	cmp	r3, #16
 8002bf8:	d003      	beq.n	8002c02 <HAL_ADC_ConfigChannel+0x1e6>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b11      	cmp	r3, #17
 8002c00:	d11b      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b10      	cmp	r3, #16
 8002c14:	d111      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c16:	4b10      	ldr	r3, [pc, #64]	@ (8002c58 <HAL_ADC_ConfigChannel+0x23c>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a10      	ldr	r2, [pc, #64]	@ (8002c5c <HAL_ADC_ConfigChannel+0x240>)
 8002c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c20:	0c9a      	lsrs	r2, r3, #18
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	005b      	lsls	r3, r3, #1
 8002c2a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c2c:	e002      	b.n	8002c34 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	3b01      	subs	r3, #1
 8002c32:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f9      	bne.n	8002c2e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	40012300 	.word	0x40012300
 8002c54:	40012000 	.word	0x40012000
 8002c58:	2000000c 	.word	0x2000000c
 8002c5c:	431bde83 	.word	0x431bde83

08002c60 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c68:	4b79      	ldr	r3, [pc, #484]	@ (8002e50 <ADC_Init+0x1f0>)
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	431a      	orrs	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6859      	ldr	r1, [r3, #4]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	021a      	lsls	r2, r3, #8
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002cb8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6859      	ldr	r1, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6899      	ldr	r1, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf2:	4a58      	ldr	r2, [pc, #352]	@ (8002e54 <ADC_Init+0x1f4>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d022      	beq.n	8002d3e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d06:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6899      	ldr	r1, [r3, #8]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	430a      	orrs	r2, r1
 8002d18:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6899      	ldr	r1, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	609a      	str	r2, [r3, #8]
 8002d3c:	e00f      	b.n	8002d5e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d5c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0202 	bic.w	r2, r2, #2
 8002d6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6899      	ldr	r1, [r3, #8]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	7e1b      	ldrb	r3, [r3, #24]
 8002d78:	005a      	lsls	r2, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d01b      	beq.n	8002dc4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685a      	ldr	r2, [r3, #4]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d9a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685a      	ldr	r2, [r3, #4]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002daa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6859      	ldr	r1, [r3, #4]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002db6:	3b01      	subs	r3, #1
 8002db8:	035a      	lsls	r2, r3, #13
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	e007      	b.n	8002dd4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002dd2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002de2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	051a      	lsls	r2, r3, #20
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	430a      	orrs	r2, r1
 8002df8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	689a      	ldr	r2, [r3, #8]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e08:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6899      	ldr	r1, [r3, #8]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e16:	025a      	lsls	r2, r3, #9
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6899      	ldr	r1, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	029a      	lsls	r2, r3, #10
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	609a      	str	r2, [r3, #8]
}
 8002e44:	bf00      	nop
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	40012300 	.word	0x40012300
 8002e54:	0f000001 	.word	0x0f000001

08002e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e68:	4b0c      	ldr	r3, [pc, #48]	@ (8002e9c <__NVIC_SetPriorityGrouping+0x44>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e74:	4013      	ands	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e8a:	4a04      	ldr	r2, [pc, #16]	@ (8002e9c <__NVIC_SetPriorityGrouping+0x44>)
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	60d3      	str	r3, [r2, #12]
}
 8002e90:	bf00      	nop
 8002e92:	3714      	adds	r7, #20
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	e000ed00 	.word	0xe000ed00

08002ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ea4:	4b04      	ldr	r3, [pc, #16]	@ (8002eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	0a1b      	lsrs	r3, r3, #8
 8002eaa:	f003 0307 	and.w	r3, r3, #7
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	db0b      	blt.n	8002ee6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	f003 021f 	and.w	r2, r3, #31
 8002ed4:	4907      	ldr	r1, [pc, #28]	@ (8002ef4 <__NVIC_EnableIRQ+0x38>)
 8002ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	2001      	movs	r0, #1
 8002ede:	fa00 f202 	lsl.w	r2, r0, r2
 8002ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	e000e100 	.word	0xe000e100

08002ef8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	6039      	str	r1, [r7, #0]
 8002f02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	db0a      	blt.n	8002f22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	490c      	ldr	r1, [pc, #48]	@ (8002f44 <__NVIC_SetPriority+0x4c>)
 8002f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f16:	0112      	lsls	r2, r2, #4
 8002f18:	b2d2      	uxtb	r2, r2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f20:	e00a      	b.n	8002f38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	4908      	ldr	r1, [pc, #32]	@ (8002f48 <__NVIC_SetPriority+0x50>)
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	f003 030f 	and.w	r3, r3, #15
 8002f2e:	3b04      	subs	r3, #4
 8002f30:	0112      	lsls	r2, r2, #4
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	440b      	add	r3, r1
 8002f36:	761a      	strb	r2, [r3, #24]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	e000e100 	.word	0xe000e100
 8002f48:	e000ed00 	.word	0xe000ed00

08002f4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b089      	sub	sp, #36	@ 0x24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f1c3 0307 	rsb	r3, r3, #7
 8002f66:	2b04      	cmp	r3, #4
 8002f68:	bf28      	it	cs
 8002f6a:	2304      	movcs	r3, #4
 8002f6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3304      	adds	r3, #4
 8002f72:	2b06      	cmp	r3, #6
 8002f74:	d902      	bls.n	8002f7c <NVIC_EncodePriority+0x30>
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3b03      	subs	r3, #3
 8002f7a:	e000      	b.n	8002f7e <NVIC_EncodePriority+0x32>
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43da      	mvns	r2, r3
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	401a      	ands	r2, r3
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f9e:	43d9      	mvns	r1, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fa4:	4313      	orrs	r3, r2
         );
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3724      	adds	r7, #36	@ 0x24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
	...

08002fb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fc4:	d301      	bcc.n	8002fca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e00f      	b.n	8002fea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fca:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff4 <SysTick_Config+0x40>)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fd2:	210f      	movs	r1, #15
 8002fd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002fd8:	f7ff ff8e 	bl	8002ef8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fdc:	4b05      	ldr	r3, [pc, #20]	@ (8002ff4 <SysTick_Config+0x40>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fe2:	4b04      	ldr	r3, [pc, #16]	@ (8002ff4 <SysTick_Config+0x40>)
 8002fe4:	2207      	movs	r2, #7
 8002fe6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3708      	adds	r7, #8
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	e000e010 	.word	0xe000e010

08002ff8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7ff ff29 	bl	8002e58 <__NVIC_SetPriorityGrouping>
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800300e:	b580      	push	{r7, lr}
 8003010:	b086      	sub	sp, #24
 8003012:	af00      	add	r7, sp, #0
 8003014:	4603      	mov	r3, r0
 8003016:	60b9      	str	r1, [r7, #8]
 8003018:	607a      	str	r2, [r7, #4]
 800301a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800301c:	2300      	movs	r3, #0
 800301e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003020:	f7ff ff3e 	bl	8002ea0 <__NVIC_GetPriorityGrouping>
 8003024:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	68b9      	ldr	r1, [r7, #8]
 800302a:	6978      	ldr	r0, [r7, #20]
 800302c:	f7ff ff8e 	bl	8002f4c <NVIC_EncodePriority>
 8003030:	4602      	mov	r2, r0
 8003032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003036:	4611      	mov	r1, r2
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff ff5d 	bl	8002ef8 <__NVIC_SetPriority>
}
 800303e:	bf00      	nop
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	4603      	mov	r3, r0
 800304e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003054:	4618      	mov	r0, r3
 8003056:	f7ff ff31 	bl	8002ebc <__NVIC_EnableIRQ>
}
 800305a:	bf00      	nop
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b082      	sub	sp, #8
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff ffa2 	bl	8002fb4 <SysTick_Config>
 8003070:	4603      	mov	r3, r0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b086      	sub	sp, #24
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003088:	f7ff faea 	bl	8002660 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e099      	b.n	80031cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0201 	bic.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030b8:	e00f      	b.n	80030da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030ba:	f7ff fad1 	bl	8002660 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b05      	cmp	r3, #5
 80030c6:	d908      	bls.n	80030da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2220      	movs	r2, #32
 80030cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2203      	movs	r2, #3
 80030d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e078      	b.n	80031cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0301 	and.w	r3, r3, #1
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1e8      	bne.n	80030ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	4b38      	ldr	r3, [pc, #224]	@ (80031d4 <HAL_DMA_Init+0x158>)
 80030f4:	4013      	ands	r3, r2
 80030f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003106:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	691b      	ldr	r3, [r3, #16]
 800310c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003112:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800311e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003126:	697a      	ldr	r2, [r7, #20]
 8003128:	4313      	orrs	r3, r2
 800312a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003130:	2b04      	cmp	r3, #4
 8003132:	d107      	bne.n	8003144 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313c:	4313      	orrs	r3, r2
 800313e:	697a      	ldr	r2, [r7, #20]
 8003140:	4313      	orrs	r3, r2
 8003142:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	695b      	ldr	r3, [r3, #20]
 8003152:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	f023 0307 	bic.w	r3, r3, #7
 800315a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003160:	697a      	ldr	r2, [r7, #20]
 8003162:	4313      	orrs	r3, r2
 8003164:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316a:	2b04      	cmp	r3, #4
 800316c:	d117      	bne.n	800319e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	4313      	orrs	r3, r2
 8003176:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00e      	beq.n	800319e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 fa19 	bl	80035b8 <DMA_CheckFifoParam>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2240      	movs	r2, #64	@ 0x40
 8003190:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800319a:	2301      	movs	r3, #1
 800319c:	e016      	b.n	80031cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f000 f9d0 	bl	800354c <DMA_CalcBaseAndBitshift>
 80031ac:	4603      	mov	r3, r0
 80031ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b4:	223f      	movs	r2, #63	@ 0x3f
 80031b6:	409a      	lsls	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	f010803f 	.word	0xf010803f

080031d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d004      	beq.n	80031f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2280      	movs	r2, #128	@ 0x80
 80031f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e00c      	b.n	8003210 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2205      	movs	r2, #5
 80031fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0201 	bic.w	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003228:	4b8e      	ldr	r3, [pc, #568]	@ (8003464 <HAL_DMA_IRQHandler+0x248>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a8e      	ldr	r2, [pc, #568]	@ (8003468 <HAL_DMA_IRQHandler+0x24c>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	0a9b      	lsrs	r3, r3, #10
 8003234:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003246:	2208      	movs	r2, #8
 8003248:	409a      	lsls	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4013      	ands	r3, r2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d01a      	beq.n	8003288 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b00      	cmp	r3, #0
 800325e:	d013      	beq.n	8003288 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 0204 	bic.w	r2, r2, #4
 800326e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003274:	2208      	movs	r2, #8
 8003276:	409a      	lsls	r2, r3
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003280:	f043 0201 	orr.w	r2, r3, #1
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800328c:	2201      	movs	r2, #1
 800328e:	409a      	lsls	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4013      	ands	r3, r2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d012      	beq.n	80032be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00b      	beq.n	80032be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032aa:	2201      	movs	r2, #1
 80032ac:	409a      	lsls	r2, r3
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b6:	f043 0202 	orr.w	r2, r3, #2
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032c2:	2204      	movs	r2, #4
 80032c4:	409a      	lsls	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d012      	beq.n	80032f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0302 	and.w	r3, r3, #2
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00b      	beq.n	80032f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032e0:	2204      	movs	r2, #4
 80032e2:	409a      	lsls	r2, r3
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032ec:	f043 0204 	orr.w	r2, r3, #4
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032f8:	2210      	movs	r2, #16
 80032fa:	409a      	lsls	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4013      	ands	r3, r2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d043      	beq.n	800338c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b00      	cmp	r3, #0
 8003310:	d03c      	beq.n	800338c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003316:	2210      	movs	r2, #16
 8003318:	409a      	lsls	r2, r3
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d018      	beq.n	800335e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d108      	bne.n	800334c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333e:	2b00      	cmp	r3, #0
 8003340:	d024      	beq.n	800338c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	4798      	blx	r3
 800334a:	e01f      	b.n	800338c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003350:	2b00      	cmp	r3, #0
 8003352:	d01b      	beq.n	800338c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	4798      	blx	r3
 800335c:	e016      	b.n	800338c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003368:	2b00      	cmp	r3, #0
 800336a:	d107      	bne.n	800337c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0208 	bic.w	r2, r2, #8
 800337a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003390:	2220      	movs	r2, #32
 8003392:	409a      	lsls	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	4013      	ands	r3, r2
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 808f 	beq.w	80034bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0310 	and.w	r3, r3, #16
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 8087 	beq.w	80034bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033b2:	2220      	movs	r2, #32
 80033b4:	409a      	lsls	r2, r3
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b05      	cmp	r3, #5
 80033c4:	d136      	bne.n	8003434 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0216 	bic.w	r2, r2, #22
 80033d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d103      	bne.n	80033f6 <HAL_DMA_IRQHandler+0x1da>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d007      	beq.n	8003406 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0208 	bic.w	r2, r2, #8
 8003404:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340a:	223f      	movs	r2, #63	@ 0x3f
 800340c:	409a      	lsls	r2, r3
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003426:	2b00      	cmp	r3, #0
 8003428:	d07e      	beq.n	8003528 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	4798      	blx	r3
        }
        return;
 8003432:	e079      	b.n	8003528 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d01d      	beq.n	800347e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d10d      	bne.n	800346c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003454:	2b00      	cmp	r3, #0
 8003456:	d031      	beq.n	80034bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	4798      	blx	r3
 8003460:	e02c      	b.n	80034bc <HAL_DMA_IRQHandler+0x2a0>
 8003462:	bf00      	nop
 8003464:	2000000c 	.word	0x2000000c
 8003468:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003470:	2b00      	cmp	r3, #0
 8003472:	d023      	beq.n	80034bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003478:	6878      	ldr	r0, [r7, #4]
 800347a:	4798      	blx	r3
 800347c:	e01e      	b.n	80034bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003488:	2b00      	cmp	r3, #0
 800348a:	d10f      	bne.n	80034ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0210 	bic.w	r2, r2, #16
 800349a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d003      	beq.n	80034bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d032      	beq.n	800352a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c8:	f003 0301 	and.w	r3, r3, #1
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d022      	beq.n	8003516 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2205      	movs	r2, #5
 80034d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f022 0201 	bic.w	r2, r2, #1
 80034e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	3301      	adds	r3, #1
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d307      	bcc.n	8003504 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f2      	bne.n	80034e8 <HAL_DMA_IRQHandler+0x2cc>
 8003502:	e000      	b.n	8003506 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003504:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800351a:	2b00      	cmp	r3, #0
 800351c:	d005      	beq.n	800352a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	4798      	blx	r3
 8003526:	e000      	b.n	800352a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003528:	bf00      	nop
    }
  }
}
 800352a:	3718      	adds	r7, #24
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}

08003530 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800353e:	b2db      	uxtb	r3, r3
}
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	b2db      	uxtb	r3, r3
 800355a:	3b10      	subs	r3, #16
 800355c:	4a14      	ldr	r2, [pc, #80]	@ (80035b0 <DMA_CalcBaseAndBitshift+0x64>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	091b      	lsrs	r3, r3, #4
 8003564:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003566:	4a13      	ldr	r2, [pc, #76]	@ (80035b4 <DMA_CalcBaseAndBitshift+0x68>)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4413      	add	r3, r2
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	461a      	mov	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2b03      	cmp	r3, #3
 8003578:	d909      	bls.n	800358e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003582:	f023 0303 	bic.w	r3, r3, #3
 8003586:	1d1a      	adds	r2, r3, #4
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	659a      	str	r2, [r3, #88]	@ 0x58
 800358c:	e007      	b.n	800359e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003596:	f023 0303 	bic.w	r3, r3, #3
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	aaaaaaab 	.word	0xaaaaaaab
 80035b4:	08010338 	.word	0x08010338

080035b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	699b      	ldr	r3, [r3, #24]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d11f      	bne.n	8003612 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d856      	bhi.n	8003686 <DMA_CheckFifoParam+0xce>
 80035d8:	a201      	add	r2, pc, #4	@ (adr r2, 80035e0 <DMA_CheckFifoParam+0x28>)
 80035da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035de:	bf00      	nop
 80035e0:	080035f1 	.word	0x080035f1
 80035e4:	08003603 	.word	0x08003603
 80035e8:	080035f1 	.word	0x080035f1
 80035ec:	08003687 	.word	0x08003687
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d046      	beq.n	800368a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003600:	e043      	b.n	800368a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003606:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800360a:	d140      	bne.n	800368e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003610:	e03d      	b.n	800368e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800361a:	d121      	bne.n	8003660 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b03      	cmp	r3, #3
 8003620:	d837      	bhi.n	8003692 <DMA_CheckFifoParam+0xda>
 8003622:	a201      	add	r2, pc, #4	@ (adr r2, 8003628 <DMA_CheckFifoParam+0x70>)
 8003624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003628:	08003639 	.word	0x08003639
 800362c:	0800363f 	.word	0x0800363f
 8003630:	08003639 	.word	0x08003639
 8003634:	08003651 	.word	0x08003651
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	73fb      	strb	r3, [r7, #15]
      break;
 800363c:	e030      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003642:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d025      	beq.n	8003696 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800364e:	e022      	b.n	8003696 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003654:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003658:	d11f      	bne.n	800369a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800365e:	e01c      	b.n	800369a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b02      	cmp	r3, #2
 8003664:	d903      	bls.n	800366e <DMA_CheckFifoParam+0xb6>
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2b03      	cmp	r3, #3
 800366a:	d003      	beq.n	8003674 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800366c:	e018      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	73fb      	strb	r3, [r7, #15]
      break;
 8003672:	e015      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003678:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00e      	beq.n	800369e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	73fb      	strb	r3, [r7, #15]
      break;
 8003684:	e00b      	b.n	800369e <DMA_CheckFifoParam+0xe6>
      break;
 8003686:	bf00      	nop
 8003688:	e00a      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
      break;
 800368a:	bf00      	nop
 800368c:	e008      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
      break;
 800368e:	bf00      	nop
 8003690:	e006      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003692:	bf00      	nop
 8003694:	e004      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
      break;
 8003696:	bf00      	nop
 8003698:	e002      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800369a:	bf00      	nop
 800369c:	e000      	b.n	80036a0 <DMA_CheckFifoParam+0xe8>
      break;
 800369e:	bf00      	nop
    }
  } 
  
  return status; 
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3714      	adds	r7, #20
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop

080036b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b089      	sub	sp, #36	@ 0x24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ba:	2300      	movs	r3, #0
 80036bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036be:	2300      	movs	r3, #0
 80036c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
 80036ca:	e16b      	b.n	80039a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036cc:	2201      	movs	r2, #1
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4013      	ands	r3, r2
 80036de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	f040 815a 	bne.w	800399e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 0303 	and.w	r3, r3, #3
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d005      	beq.n	8003702 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d130      	bne.n	8003764 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	2203      	movs	r2, #3
 800370e:	fa02 f303 	lsl.w	r3, r2, r3
 8003712:	43db      	mvns	r3, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4013      	ands	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69ba      	ldr	r2, [r7, #24]
 8003730:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003738:	2201      	movs	r2, #1
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 0201 	and.w	r2, r3, #1
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	69ba      	ldr	r2, [r7, #24]
 800375a:	4313      	orrs	r3, r2
 800375c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	2b03      	cmp	r3, #3
 800376e:	d017      	beq.n	80037a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	2203      	movs	r2, #3
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d123      	bne.n	80037f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	08da      	lsrs	r2, r3, #3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	3208      	adds	r2, #8
 80037b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	f003 0307 	and.w	r3, r3, #7
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	220f      	movs	r2, #15
 80037c4:	fa02 f303 	lsl.w	r3, r2, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	4013      	ands	r3, r2
 80037ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	691a      	ldr	r2, [r3, #16]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	08da      	lsrs	r2, r3, #3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3208      	adds	r2, #8
 80037ee:	69b9      	ldr	r1, [r7, #24]
 80037f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	2203      	movs	r2, #3
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 0203 	and.w	r2, r3, #3
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	4313      	orrs	r3, r2
 8003820:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 80b4 	beq.w	800399e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	4b60      	ldr	r3, [pc, #384]	@ (80039bc <HAL_GPIO_Init+0x30c>)
 800383c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800383e:	4a5f      	ldr	r2, [pc, #380]	@ (80039bc <HAL_GPIO_Init+0x30c>)
 8003840:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003844:	6453      	str	r3, [r2, #68]	@ 0x44
 8003846:	4b5d      	ldr	r3, [pc, #372]	@ (80039bc <HAL_GPIO_Init+0x30c>)
 8003848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800384a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003852:	4a5b      	ldr	r2, [pc, #364]	@ (80039c0 <HAL_GPIO_Init+0x310>)
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	089b      	lsrs	r3, r3, #2
 8003858:	3302      	adds	r3, #2
 800385a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800385e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	220f      	movs	r2, #15
 800386a:	fa02 f303 	lsl.w	r3, r2, r3
 800386e:	43db      	mvns	r3, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4013      	ands	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a52      	ldr	r2, [pc, #328]	@ (80039c4 <HAL_GPIO_Init+0x314>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d02b      	beq.n	80038d6 <HAL_GPIO_Init+0x226>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a51      	ldr	r2, [pc, #324]	@ (80039c8 <HAL_GPIO_Init+0x318>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d025      	beq.n	80038d2 <HAL_GPIO_Init+0x222>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a50      	ldr	r2, [pc, #320]	@ (80039cc <HAL_GPIO_Init+0x31c>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d01f      	beq.n	80038ce <HAL_GPIO_Init+0x21e>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a4f      	ldr	r2, [pc, #316]	@ (80039d0 <HAL_GPIO_Init+0x320>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d019      	beq.n	80038ca <HAL_GPIO_Init+0x21a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a4e      	ldr	r2, [pc, #312]	@ (80039d4 <HAL_GPIO_Init+0x324>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d013      	beq.n	80038c6 <HAL_GPIO_Init+0x216>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a4d      	ldr	r2, [pc, #308]	@ (80039d8 <HAL_GPIO_Init+0x328>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d00d      	beq.n	80038c2 <HAL_GPIO_Init+0x212>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a4c      	ldr	r2, [pc, #304]	@ (80039dc <HAL_GPIO_Init+0x32c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d007      	beq.n	80038be <HAL_GPIO_Init+0x20e>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a4b      	ldr	r2, [pc, #300]	@ (80039e0 <HAL_GPIO_Init+0x330>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d101      	bne.n	80038ba <HAL_GPIO_Init+0x20a>
 80038b6:	2307      	movs	r3, #7
 80038b8:	e00e      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038ba:	2308      	movs	r3, #8
 80038bc:	e00c      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038be:	2306      	movs	r3, #6
 80038c0:	e00a      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038c2:	2305      	movs	r3, #5
 80038c4:	e008      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038c6:	2304      	movs	r3, #4
 80038c8:	e006      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038ca:	2303      	movs	r3, #3
 80038cc:	e004      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e002      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <HAL_GPIO_Init+0x228>
 80038d6:	2300      	movs	r3, #0
 80038d8:	69fa      	ldr	r2, [r7, #28]
 80038da:	f002 0203 	and.w	r2, r2, #3
 80038de:	0092      	lsls	r2, r2, #2
 80038e0:	4093      	lsls	r3, r2
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80038e8:	4935      	ldr	r1, [pc, #212]	@ (80039c0 <HAL_GPIO_Init+0x310>)
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	089b      	lsrs	r3, r3, #2
 80038ee:	3302      	adds	r3, #2
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038f6:	4b3b      	ldr	r3, [pc, #236]	@ (80039e4 <HAL_GPIO_Init+0x334>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4313      	orrs	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800391a:	4a32      	ldr	r2, [pc, #200]	@ (80039e4 <HAL_GPIO_Init+0x334>)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003920:	4b30      	ldr	r3, [pc, #192]	@ (80039e4 <HAL_GPIO_Init+0x334>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4313      	orrs	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003944:	4a27      	ldr	r2, [pc, #156]	@ (80039e4 <HAL_GPIO_Init+0x334>)
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800394a:	4b26      	ldr	r3, [pc, #152]	@ (80039e4 <HAL_GPIO_Init+0x334>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	43db      	mvns	r3, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4013      	ands	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800396e:	4a1d      	ldr	r2, [pc, #116]	@ (80039e4 <HAL_GPIO_Init+0x334>)
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003974:	4b1b      	ldr	r3, [pc, #108]	@ (80039e4 <HAL_GPIO_Init+0x334>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	43db      	mvns	r3, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003998:	4a12      	ldr	r2, [pc, #72]	@ (80039e4 <HAL_GPIO_Init+0x334>)
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	3301      	adds	r3, #1
 80039a2:	61fb      	str	r3, [r7, #28]
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	2b0f      	cmp	r3, #15
 80039a8:	f67f ae90 	bls.w	80036cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039ac:	bf00      	nop
 80039ae:	bf00      	nop
 80039b0:	3724      	adds	r7, #36	@ 0x24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	40023800 	.word	0x40023800
 80039c0:	40013800 	.word	0x40013800
 80039c4:	40020000 	.word	0x40020000
 80039c8:	40020400 	.word	0x40020400
 80039cc:	40020800 	.word	0x40020800
 80039d0:	40020c00 	.word	0x40020c00
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40021400 	.word	0x40021400
 80039dc:	40021800 	.word	0x40021800
 80039e0:	40021c00 	.word	0x40021c00
 80039e4:	40013c00 	.word	0x40013c00

080039e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
 80039f0:	460b      	mov	r3, r1
 80039f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691a      	ldr	r2, [r3, #16]
 80039f8:	887b      	ldrh	r3, [r7, #2]
 80039fa:	4013      	ands	r3, r2
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d002      	beq.n	8003a06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
 8003a04:	e001      	b.n	8003a0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a06:	2300      	movs	r3, #0
 8003a08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	807b      	strh	r3, [r7, #2]
 8003a24:	4613      	mov	r3, r2
 8003a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a28:	787b      	ldrb	r3, [r7, #1]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a2e:	887a      	ldrh	r2, [r7, #2]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a34:	e003      	b.n	8003a3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a36:	887b      	ldrh	r3, [r7, #2]
 8003a38:	041a      	lsls	r2, r3, #16
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	619a      	str	r2, [r3, #24]
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
	...

08003a4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e12b      	b.n	8003cb6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f7fe f9d8 	bl	8001e28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2224      	movs	r2, #36	@ 0x24
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0201 	bic.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a9e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003aae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ab0:	f004 fc66 	bl	8008380 <HAL_RCC_GetPCLK1Freq>
 8003ab4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	4a81      	ldr	r2, [pc, #516]	@ (8003cc0 <HAL_I2C_Init+0x274>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d807      	bhi.n	8003ad0 <HAL_I2C_Init+0x84>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4a80      	ldr	r2, [pc, #512]	@ (8003cc4 <HAL_I2C_Init+0x278>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	bf94      	ite	ls
 8003ac8:	2301      	movls	r3, #1
 8003aca:	2300      	movhi	r3, #0
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	e006      	b.n	8003ade <HAL_I2C_Init+0x92>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4a7d      	ldr	r2, [pc, #500]	@ (8003cc8 <HAL_I2C_Init+0x27c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	bf94      	ite	ls
 8003ad8:	2301      	movls	r3, #1
 8003ada:	2300      	movhi	r3, #0
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e0e7      	b.n	8003cb6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4a78      	ldr	r2, [pc, #480]	@ (8003ccc <HAL_I2C_Init+0x280>)
 8003aea:	fba2 2303 	umull	r2, r3, r2, r3
 8003aee:	0c9b      	lsrs	r3, r3, #18
 8003af0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	4a6a      	ldr	r2, [pc, #424]	@ (8003cc0 <HAL_I2C_Init+0x274>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d802      	bhi.n	8003b20 <HAL_I2C_Init+0xd4>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	e009      	b.n	8003b34 <HAL_I2C_Init+0xe8>
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003b26:	fb02 f303 	mul.w	r3, r2, r3
 8003b2a:	4a69      	ldr	r2, [pc, #420]	@ (8003cd0 <HAL_I2C_Init+0x284>)
 8003b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b30:	099b      	lsrs	r3, r3, #6
 8003b32:	3301      	adds	r3, #1
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6812      	ldr	r2, [r2, #0]
 8003b38:	430b      	orrs	r3, r1
 8003b3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b46:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	495c      	ldr	r1, [pc, #368]	@ (8003cc0 <HAL_I2C_Init+0x274>)
 8003b50:	428b      	cmp	r3, r1
 8003b52:	d819      	bhi.n	8003b88 <HAL_I2C_Init+0x13c>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1e59      	subs	r1, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b62:	1c59      	adds	r1, r3, #1
 8003b64:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b68:	400b      	ands	r3, r1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_I2C_Init+0x138>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1e59      	subs	r1, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b7c:	3301      	adds	r3, #1
 8003b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b82:	e051      	b.n	8003c28 <HAL_I2C_Init+0x1dc>
 8003b84:	2304      	movs	r3, #4
 8003b86:	e04f      	b.n	8003c28 <HAL_I2C_Init+0x1dc>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d111      	bne.n	8003bb4 <HAL_I2C_Init+0x168>
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	1e58      	subs	r0, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6859      	ldr	r1, [r3, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	440b      	add	r3, r1
 8003b9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	bf0c      	ite	eq
 8003bac:	2301      	moveq	r3, #1
 8003bae:	2300      	movne	r3, #0
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	e012      	b.n	8003bda <HAL_I2C_Init+0x18e>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	1e58      	subs	r0, r3, #1
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6859      	ldr	r1, [r3, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	0099      	lsls	r1, r3, #2
 8003bc4:	440b      	add	r3, r1
 8003bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bca:	3301      	adds	r3, #1
 8003bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	bf0c      	ite	eq
 8003bd4:	2301      	moveq	r3, #1
 8003bd6:	2300      	movne	r3, #0
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <HAL_I2C_Init+0x196>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e022      	b.n	8003c28 <HAL_I2C_Init+0x1dc>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10e      	bne.n	8003c08 <HAL_I2C_Init+0x1bc>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	1e58      	subs	r0, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6859      	ldr	r1, [r3, #4]
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	440b      	add	r3, r1
 8003bf8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c02:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003c06:	e00f      	b.n	8003c28 <HAL_I2C_Init+0x1dc>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	1e58      	subs	r0, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6859      	ldr	r1, [r3, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	0099      	lsls	r1, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c1e:	3301      	adds	r3, #1
 8003c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c24:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	6809      	ldr	r1, [r1, #0]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69da      	ldr	r2, [r3, #28]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c56:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6911      	ldr	r1, [r2, #16]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	68d2      	ldr	r2, [r2, #12]
 8003c62:	4311      	orrs	r1, r2
 8003c64:	687a      	ldr	r2, [r7, #4]
 8003c66:	6812      	ldr	r2, [r2, #0]
 8003c68:	430b      	orrs	r3, r1
 8003c6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695a      	ldr	r2, [r3, #20]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f042 0201 	orr.w	r2, r2, #1
 8003c96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	000186a0 	.word	0x000186a0
 8003cc4:	001e847f 	.word	0x001e847f
 8003cc8:	003d08ff 	.word	0x003d08ff
 8003ccc:	431bde83 	.word	0x431bde83
 8003cd0:	10624dd3 	.word	0x10624dd3

08003cd4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ce6:	2b80      	cmp	r3, #128	@ 0x80
 8003ce8:	d103      	bne.n	8003cf2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	611a      	str	r2, [r3, #16]
  }
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
	...

08003d00 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	607a      	str	r2, [r7, #4]
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	817b      	strh	r3, [r7, #10]
 8003d10:	4613      	mov	r3, r2
 8003d12:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d14:	f7fe fca4 	bl	8002660 <HAL_GetTick>
 8003d18:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b20      	cmp	r3, #32
 8003d24:	f040 80e0 	bne.w	8003ee8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	2319      	movs	r3, #25
 8003d2e:	2201      	movs	r2, #1
 8003d30:	4970      	ldr	r1, [pc, #448]	@ (8003ef4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f002 f9de 	bl	80060f4 <I2C_WaitOnFlagUntilTimeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d3e:	2302      	movs	r3, #2
 8003d40:	e0d3      	b.n	8003eea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_I2C_Master_Transmit+0x50>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e0cc      	b.n	8003eea <HAL_I2C_Master_Transmit+0x1ea>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d007      	beq.n	8003d76 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f042 0201 	orr.w	r2, r2, #1
 8003d74:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d84:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2221      	movs	r2, #33	@ 0x21
 8003d8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2210      	movs	r2, #16
 8003d92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	893a      	ldrh	r2, [r7, #8]
 8003da6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4a50      	ldr	r2, [pc, #320]	@ (8003ef8 <HAL_I2C_Master_Transmit+0x1f8>)
 8003db6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003db8:	8979      	ldrh	r1, [r7, #10]
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	6a3a      	ldr	r2, [r7, #32]
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f001 ffa0 	bl	8005d04 <I2C_MasterRequestWrite>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e08d      	b.n	8003eea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dce:	2300      	movs	r3, #0
 8003dd0:	613b      	str	r3, [r7, #16]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	613b      	str	r3, [r7, #16]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	613b      	str	r3, [r7, #16]
 8003de2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003de4:	e066      	b.n	8003eb4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	6a39      	ldr	r1, [r7, #32]
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f002 fa9c 	bl	8006328 <I2C_WaitOnTXEFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00d      	beq.n	8003e12 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d107      	bne.n	8003e0e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e06b      	b.n	8003eea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e16:	781a      	ldrb	r2, [r3, #0]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	f003 0304 	and.w	r3, r3, #4
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d11b      	bne.n	8003e88 <HAL_I2C_Master_Transmit+0x188>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d017      	beq.n	8003e88 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5c:	781a      	ldrb	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	6a39      	ldr	r1, [r7, #32]
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f002 fa93 	bl	80063b8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00d      	beq.n	8003eb4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d107      	bne.n	8003eb0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e01a      	b.n	8003eea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d194      	bne.n	8003de6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003eca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	e000      	b.n	8003eea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ee8:	2302      	movs	r3, #2
  }
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3718      	adds	r7, #24
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	00100002 	.word	0x00100002
 8003ef8:	ffff0000 	.word	0xffff0000

08003efc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08c      	sub	sp, #48	@ 0x30
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	607a      	str	r2, [r7, #4]
 8003f06:	461a      	mov	r2, r3
 8003f08:	460b      	mov	r3, r1
 8003f0a:	817b      	strh	r3, [r7, #10]
 8003f0c:	4613      	mov	r3, r2
 8003f0e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f10:	f7fe fba6 	bl	8002660 <HAL_GetTick>
 8003f14:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f1c:	b2db      	uxtb	r3, r3
 8003f1e:	2b20      	cmp	r3, #32
 8003f20:	f040 8217 	bne.w	8004352 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	2319      	movs	r3, #25
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	497c      	ldr	r1, [pc, #496]	@ (8004120 <HAL_I2C_Master_Receive+0x224>)
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f002 f8e0 	bl	80060f4 <I2C_WaitOnFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	e20a      	b.n	8004354 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_I2C_Master_Receive+0x50>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e203      	b.n	8004354 <HAL_I2C_Master_Receive+0x458>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d007      	beq.n	8003f72 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f042 0201 	orr.w	r2, r2, #1
 8003f70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f80:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2222      	movs	r2, #34	@ 0x22
 8003f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2210      	movs	r2, #16
 8003f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	893a      	ldrh	r2, [r7, #8]
 8003fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa8:	b29a      	uxth	r2, r3
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4a5c      	ldr	r2, [pc, #368]	@ (8004124 <HAL_I2C_Master_Receive+0x228>)
 8003fb2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003fb4:	8979      	ldrh	r1, [r7, #10]
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	f001 ff24 	bl	8005e08 <I2C_MasterRequestRead>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d001      	beq.n	8003fca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e1c4      	b.n	8004354 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d113      	bne.n	8003ffa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	623b      	str	r3, [r7, #32]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	623b      	str	r3, [r7, #32]
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	623b      	str	r3, [r7, #32]
 8003fe6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ff6:	601a      	str	r2, [r3, #0]
 8003ff8:	e198      	b.n	800432c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d11b      	bne.n	800403a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004010:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	61fb      	str	r3, [r7, #28]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	699b      	ldr	r3, [r3, #24]
 8004024:	61fb      	str	r3, [r7, #28]
 8004026:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	e178      	b.n	800432c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800403e:	2b02      	cmp	r3, #2
 8004040:	d11b      	bne.n	800407a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004050:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004060:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004062:	2300      	movs	r3, #0
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	695b      	ldr	r3, [r3, #20]
 800406c:	61bb      	str	r3, [r7, #24]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	699b      	ldr	r3, [r3, #24]
 8004074:	61bb      	str	r3, [r7, #24]
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	e158      	b.n	800432c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004088:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800408a:	2300      	movs	r3, #0
 800408c:	617b      	str	r3, [r7, #20]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80040a0:	e144      	b.n	800432c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	f200 80f1 	bhi.w	800428e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d123      	bne.n	80040fc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f002 f9f7 	bl	80064ac <I2C_WaitOnRXNEFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e145      	b.n	8004354 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691a      	ldr	r2, [r3, #16]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d2:	b2d2      	uxtb	r2, r2
 80040d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040da:	1c5a      	adds	r2, r3, #1
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	3b01      	subs	r3, #1
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040fa:	e117      	b.n	800432c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004100:	2b02      	cmp	r3, #2
 8004102:	d14e      	bne.n	80041a2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410a:	2200      	movs	r2, #0
 800410c:	4906      	ldr	r1, [pc, #24]	@ (8004128 <HAL_I2C_Master_Receive+0x22c>)
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f001 fff0 	bl	80060f4 <I2C_WaitOnFlagUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d008      	beq.n	800412c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e11a      	b.n	8004354 <HAL_I2C_Master_Receive+0x458>
 800411e:	bf00      	nop
 8004120:	00100002 	.word	0x00100002
 8004124:	ffff0000 	.word	0xffff0000
 8004128:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800413a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	691a      	ldr	r2, [r3, #16]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004146:	b2d2      	uxtb	r2, r2
 8004148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004164:	b29b      	uxth	r3, r3
 8004166:	3b01      	subs	r3, #1
 8004168:	b29a      	uxth	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800418a:	3b01      	subs	r3, #1
 800418c:	b29a      	uxth	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004196:	b29b      	uxth	r3, r3
 8004198:	3b01      	subs	r3, #1
 800419a:	b29a      	uxth	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041a0:	e0c4      	b.n	800432c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a8:	2200      	movs	r2, #0
 80041aa:	496c      	ldr	r1, [pc, #432]	@ (800435c <HAL_I2C_Master_Receive+0x460>)
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f001 ffa1 	bl	80060f4 <I2C_WaitOnFlagUntilTimeout>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d001      	beq.n	80041bc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e0cb      	b.n	8004354 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691a      	ldr	r2, [r3, #16]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	3b01      	subs	r3, #1
 80041f8:	b29a      	uxth	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004204:	2200      	movs	r2, #0
 8004206:	4955      	ldr	r1, [pc, #340]	@ (800435c <HAL_I2C_Master_Receive+0x460>)
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f001 ff73 	bl	80060f4 <I2C_WaitOnFlagUntilTimeout>
 800420e:	4603      	mov	r3, r0
 8004210:	2b00      	cmp	r3, #0
 8004212:	d001      	beq.n	8004218 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004214:	2301      	movs	r3, #1
 8004216:	e09d      	b.n	8004354 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004226:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004244:	3b01      	subs	r3, #1
 8004246:	b29a      	uxth	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004250:	b29b      	uxth	r3, r3
 8004252:	3b01      	subs	r3, #1
 8004254:	b29a      	uxth	r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	691a      	ldr	r2, [r3, #16]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800426c:	1c5a      	adds	r2, r3, #1
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004276:	3b01      	subs	r3, #1
 8004278:	b29a      	uxth	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004282:	b29b      	uxth	r3, r3
 8004284:	3b01      	subs	r3, #1
 8004286:	b29a      	uxth	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800428c:	e04e      	b.n	800432c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800428e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004290:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004292:	68f8      	ldr	r0, [r7, #12]
 8004294:	f002 f90a 	bl	80064ac <I2C_WaitOnRXNEFlagUntilTimeout>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e058      	b.n	8004354 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	2b04      	cmp	r3, #4
 80042e0:	d124      	bne.n	800432c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042e6:	2b03      	cmp	r3, #3
 80042e8:	d107      	bne.n	80042fa <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042f8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	691a      	ldr	r2, [r3, #16]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004316:	3b01      	subs	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004330:	2b00      	cmp	r3, #0
 8004332:	f47f aeb6 	bne.w	80040a2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2220      	movs	r2, #32
 800433a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800434e:	2300      	movs	r3, #0
 8004350:	e000      	b.n	8004354 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004352:	2302      	movs	r3, #2
  }
}
 8004354:	4618      	mov	r0, r3
 8004356:	3728      	adds	r7, #40	@ 0x28
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	00010004 	.word	0x00010004

08004360 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	4613      	mov	r3, r2
 800436c:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b20      	cmp	r3, #32
 8004378:	d158      	bne.n	800442c <HAL_I2C_Slave_Transmit_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d002      	beq.n	8004386 <HAL_I2C_Slave_Transmit_IT+0x26>
 8004380:	88fb      	ldrh	r3, [r7, #6]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d101      	bne.n	800438a <HAL_I2C_Slave_Transmit_IT+0x2a>
    {
      return  HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e051      	b.n	800442e <HAL_I2C_Slave_Transmit_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_I2C_Slave_Transmit_IT+0x38>
 8004394:	2302      	movs	r3, #2
 8004396:	e04a      	b.n	800442e <HAL_I2C_Slave_Transmit_IT+0xce>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d007      	beq.n	80043be <HAL_I2C_Slave_Transmit_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0201 	orr.w	r2, r2, #1
 80043bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043cc:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2221      	movs	r2, #33	@ 0x21
 80043d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	88fa      	ldrh	r2, [r7, #6]
 80043ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4a0f      	ldr	r2, [pc, #60]	@ (800443c <HAL_I2C_Slave_Transmit_IT+0xdc>)
 80043fe:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800440e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8004426:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004428:	2300      	movs	r3, #0
 800442a:	e000      	b.n	800442e <HAL_I2C_Slave_Transmit_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800442c:	2302      	movs	r3, #2
  }
}
 800442e:	4618      	mov	r0, r3
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	ffff0000 	.word	0xffff0000

08004440 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	4613      	mov	r3, r2
 800444c:	80fb      	strh	r3, [r7, #6]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b20      	cmp	r3, #32
 8004458:	d158      	bne.n	800450c <HAL_I2C_Slave_Receive_IT+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <HAL_I2C_Slave_Receive_IT+0x26>
 8004460:	88fb      	ldrh	r3, [r7, #6]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_I2C_Slave_Receive_IT+0x2a>
    {
      return  HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e051      	b.n	800450e <HAL_I2C_Slave_Receive_IT+0xce>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_I2C_Slave_Receive_IT+0x38>
 8004474:	2302      	movs	r3, #2
 8004476:	e04a      	b.n	800450e <HAL_I2C_Slave_Receive_IT+0xce>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	2b01      	cmp	r3, #1
 800448c:	d007      	beq.n	800449e <HAL_I2C_Slave_Receive_IT+0x5e>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f042 0201 	orr.w	r2, r2, #1
 800449c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044ac:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2222      	movs	r2, #34	@ 0x22
 80044b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	88fa      	ldrh	r2, [r7, #6]
 80044ce:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4a0f      	ldr	r2, [pc, #60]	@ (800451c <HAL_I2C_Slave_Receive_IT+0xdc>)
 80044de:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80044ee:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8004506:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004508:	2300      	movs	r3, #0
 800450a:	e000      	b.n	800450e <HAL_I2C_Slave_Receive_IT+0xce>
  }
  else
  {
    return HAL_BUSY;
 800450c:	2302      	movs	r3, #2
  }
}
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	ffff0000 	.word	0xffff0000

08004520 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8004520:	b480      	push	{r7}
 8004522:	b083      	sub	sp, #12
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b20      	cmp	r3, #32
 8004532:	d124      	bne.n	800457e <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2228      	movs	r2, #40	@ 0x28
 8004538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b01      	cmp	r3, #1
 8004548:	d007      	beq.n	800455a <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f042 0201 	orr.w	r2, r2, #1
 8004558:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004568:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8004578:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	e000      	b.n	8004580 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800457e:	2302      	movs	r3, #2
  }
}
 8004580:	4618      	mov	r0, r3
 8004582:	370c      	adds	r7, #12
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b088      	sub	sp, #32
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004594:	2300      	movs	r3, #0
 8004596:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80045ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045b4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	2b10      	cmp	r3, #16
 80045ba:	d003      	beq.n	80045c4 <HAL_I2C_EV_IRQHandler+0x38>
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	2b40      	cmp	r3, #64	@ 0x40
 80045c0:	f040 80b1 	bne.w	8004726 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10d      	bne.n	80045fa <HAL_I2C_EV_IRQHandler+0x6e>
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80045e4:	d003      	beq.n	80045ee <HAL_I2C_EV_IRQHandler+0x62>
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80045ec:	d101      	bne.n	80045f2 <HAL_I2C_EV_IRQHandler+0x66>
 80045ee:	2301      	movs	r3, #1
 80045f0:	e000      	b.n	80045f4 <HAL_I2C_EV_IRQHandler+0x68>
 80045f2:	2300      	movs	r3, #0
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	f000 8114 	beq.w	8004822 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00b      	beq.n	800461c <HAL_I2C_EV_IRQHandler+0x90>
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800460a:	2b00      	cmp	r3, #0
 800460c:	d006      	beq.n	800461c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f001 ffd8 	bl	80065c4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 fd58 	bl	80050ca <I2C_Master_SB>
 800461a:	e083      	b.n	8004724 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f003 0308 	and.w	r3, r3, #8
 8004622:	2b00      	cmp	r3, #0
 8004624:	d008      	beq.n	8004638 <HAL_I2C_EV_IRQHandler+0xac>
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800462c:	2b00      	cmp	r3, #0
 800462e:	d003      	beq.n	8004638 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 fdd0 	bl	80051d6 <I2C_Master_ADD10>
 8004636:	e075      	b.n	8004724 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	2b00      	cmp	r3, #0
 8004640:	d008      	beq.n	8004654 <HAL_I2C_EV_IRQHandler+0xc8>
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 fdec 	bl	800522a <I2C_Master_ADDR>
 8004652:	e067      	b.n	8004724 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	f003 0304 	and.w	r3, r3, #4
 800465a:	2b00      	cmp	r3, #0
 800465c:	d036      	beq.n	80046cc <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004668:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800466c:	f000 80db 	beq.w	8004826 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00d      	beq.n	8004696 <HAL_I2C_EV_IRQHandler+0x10a>
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004680:	2b00      	cmp	r3, #0
 8004682:	d008      	beq.n	8004696 <HAL_I2C_EV_IRQHandler+0x10a>
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	d103      	bne.n	8004696 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f9b4 	bl	80049fc <I2C_MasterTransmit_TXE>
 8004694:	e046      	b.n	8004724 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 80c2 	beq.w	8004826 <HAL_I2C_EV_IRQHandler+0x29a>
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 80bc 	beq.w	8004826 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80046ae:	7bbb      	ldrb	r3, [r7, #14]
 80046b0:	2b21      	cmp	r3, #33	@ 0x21
 80046b2:	d103      	bne.n	80046bc <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 fa3d 	bl	8004b34 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046ba:	e0b4      	b.n	8004826 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	2b40      	cmp	r3, #64	@ 0x40
 80046c0:	f040 80b1 	bne.w	8004826 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 faab 	bl	8004c20 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80046ca:	e0ac      	b.n	8004826 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80046da:	f000 80a4 	beq.w	8004826 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00d      	beq.n	8004704 <HAL_I2C_EV_IRQHandler+0x178>
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d008      	beq.n	8004704 <HAL_I2C_EV_IRQHandler+0x178>
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d103      	bne.n	8004704 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 fb27 	bl	8004d50 <I2C_MasterReceive_RXNE>
 8004702:	e00f      	b.n	8004724 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	f003 0304 	and.w	r3, r3, #4
 800470a:	2b00      	cmp	r3, #0
 800470c:	f000 808b 	beq.w	8004826 <HAL_I2C_EV_IRQHandler+0x29a>
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 8085 	beq.w	8004826 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f000 fbdf 	bl	8004ee0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004722:	e080      	b.n	8004826 <HAL_I2C_EV_IRQHandler+0x29a>
 8004724:	e07f      	b.n	8004826 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	2b00      	cmp	r3, #0
 800472c:	d004      	beq.n	8004738 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	61fb      	str	r3, [r7, #28]
 8004736:	e007      	b.n	8004748 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d011      	beq.n	8004776 <HAL_I2C_EV_IRQHandler+0x1ea>
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00c      	beq.n	8004776 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800476c:	69b9      	ldr	r1, [r7, #24]
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 ffaa 	bl	80056c8 <I2C_Slave_ADDR>
 8004774:	e05a      	b.n	800482c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <HAL_I2C_EV_IRQHandler+0x206>
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 ffe4 	bl	8005758 <I2C_Slave_STOPF>
 8004790:	e04c      	b.n	800482c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004792:	7bbb      	ldrb	r3, [r7, #14]
 8004794:	2b21      	cmp	r3, #33	@ 0x21
 8004796:	d002      	beq.n	800479e <HAL_I2C_EV_IRQHandler+0x212>
 8004798:	7bbb      	ldrb	r3, [r7, #14]
 800479a:	2b29      	cmp	r3, #41	@ 0x29
 800479c:	d120      	bne.n	80047e0 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00d      	beq.n	80047c4 <HAL_I2C_EV_IRQHandler+0x238>
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d008      	beq.n	80047c4 <HAL_I2C_EV_IRQHandler+0x238>
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d103      	bne.n	80047c4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 fec5 	bl	800554c <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047c2:	e032      	b.n	800482a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d02d      	beq.n	800482a <HAL_I2C_EV_IRQHandler+0x29e>
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d028      	beq.n	800482a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 fef4 	bl	80055c6 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047de:	e024      	b.n	800482a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00d      	beq.n	8004806 <HAL_I2C_EV_IRQHandler+0x27a>
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d008      	beq.n	8004806 <HAL_I2C_EV_IRQHandler+0x27a>
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	f003 0304 	and.w	r3, r3, #4
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d103      	bne.n	8004806 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 ff02 	bl	8005608 <I2C_SlaveReceive_RXNE>
 8004804:	e012      	b.n	800482c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00d      	beq.n	800482c <HAL_I2C_EV_IRQHandler+0x2a0>
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004816:	2b00      	cmp	r3, #0
 8004818:	d008      	beq.n	800482c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 ff32 	bl	8005684 <I2C_SlaveReceive_BTF>
 8004820:	e004      	b.n	800482c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8004822:	bf00      	nop
 8004824:	e002      	b.n	800482c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004826:	bf00      	nop
 8004828:	e000      	b.n	800482c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800482a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800482c:	3720      	adds	r7, #32
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b08a      	sub	sp, #40	@ 0x28
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800484a:	2300      	movs	r3, #0
 800484c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004854:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00d      	beq.n	800487c <HAL_I2C_ER_IRQHandler+0x4a>
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004866:	2b00      	cmp	r3, #0
 8004868:	d008      	beq.n	800487c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	f043 0301 	orr.w	r3, r3, #1
 8004870:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800487a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800487c:	6a3b      	ldr	r3, [r7, #32]
 800487e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00d      	beq.n	80048a2 <HAL_I2C_ER_IRQHandler+0x70>
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800488c:	2b00      	cmp	r3, #0
 800488e:	d008      	beq.n	80048a2 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004892:	f043 0302 	orr.w	r3, r3, #2
 8004896:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80048a0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d03e      	beq.n	800492a <HAL_I2C_ER_IRQHandler+0xf8>
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d039      	beq.n	800492a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80048b6:	7efb      	ldrb	r3, [r7, #27]
 80048b8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048be:	b29b      	uxth	r3, r3
 80048c0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048c8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048ce:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80048d0:	7ebb      	ldrb	r3, [r7, #26]
 80048d2:	2b20      	cmp	r3, #32
 80048d4:	d112      	bne.n	80048fc <HAL_I2C_ER_IRQHandler+0xca>
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10f      	bne.n	80048fc <HAL_I2C_ER_IRQHandler+0xca>
 80048dc:	7cfb      	ldrb	r3, [r7, #19]
 80048de:	2b21      	cmp	r3, #33	@ 0x21
 80048e0:	d008      	beq.n	80048f4 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80048e2:	7cfb      	ldrb	r3, [r7, #19]
 80048e4:	2b29      	cmp	r3, #41	@ 0x29
 80048e6:	d005      	beq.n	80048f4 <HAL_I2C_ER_IRQHandler+0xc2>
 80048e8:	7cfb      	ldrb	r3, [r7, #19]
 80048ea:	2b28      	cmp	r3, #40	@ 0x28
 80048ec:	d106      	bne.n	80048fc <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2b21      	cmp	r3, #33	@ 0x21
 80048f2:	d103      	bne.n	80048fc <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f001 f85f 	bl	80059b8 <I2C_Slave_AF>
 80048fa:	e016      	b.n	800492a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004904:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004908:	f043 0304 	orr.w	r3, r3, #4
 800490c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800490e:	7efb      	ldrb	r3, [r7, #27]
 8004910:	2b10      	cmp	r3, #16
 8004912:	d002      	beq.n	800491a <HAL_I2C_ER_IRQHandler+0xe8>
 8004914:	7efb      	ldrb	r3, [r7, #27]
 8004916:	2b40      	cmp	r3, #64	@ 0x40
 8004918:	d107      	bne.n	800492a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004928:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800492a:	6a3b      	ldr	r3, [r7, #32]
 800492c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00d      	beq.n	8004950 <HAL_I2C_ER_IRQHandler+0x11e>
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800493a:	2b00      	cmp	r3, #0
 800493c:	d008      	beq.n	8004950 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800493e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004940:	f043 0308 	orr.w	r3, r3, #8
 8004944:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 800494e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004952:	2b00      	cmp	r3, #0
 8004954:	d008      	beq.n	8004968 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f001 f89c 	bl	8005aa0 <I2C_ITError>
  }
}
 8004968:	bf00      	nop
 800496a:	3728      	adds	r7, #40	@ 0x28
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr

08004984 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004984:	b480      	push	{r7}
 8004986:	b083      	sub	sp, #12
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80049a0:	bf00      	nop
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80049b4:	bf00      	nop
 80049b6:	370c      	adds	r7, #12
 80049b8:	46bd      	mov	sp, r7
 80049ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049be:	4770      	bx	lr

080049c0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80049c8:	bf00      	nop
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a0a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a12:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a18:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d150      	bne.n	8004ac4 <I2C_MasterTransmit_TXE+0xc8>
 8004a22:	7bfb      	ldrb	r3, [r7, #15]
 8004a24:	2b21      	cmp	r3, #33	@ 0x21
 8004a26:	d14d      	bne.n	8004ac4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b08      	cmp	r3, #8
 8004a2c:	d01d      	beq.n	8004a6a <I2C_MasterTransmit_TXE+0x6e>
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b20      	cmp	r3, #32
 8004a32:	d01a      	beq.n	8004a6a <I2C_MasterTransmit_TXE+0x6e>
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004a3a:	d016      	beq.n	8004a6a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a4a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2211      	movs	r2, #17
 8004a50:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7ff ff84 	bl	8004970 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004a68:	e060      	b.n	8004b2c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	685a      	ldr	r2, [r3, #4]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004a78:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a88:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b40      	cmp	r3, #64	@ 0x40
 8004aa2:	d107      	bne.n	8004ab4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f7ff ff87 	bl	80049c0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ab2:	e03b      	b.n	8004b2c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7ff ff57 	bl	8004970 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ac2:	e033      	b.n	8004b2c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
 8004ac6:	2b21      	cmp	r3, #33	@ 0x21
 8004ac8:	d005      	beq.n	8004ad6 <I2C_MasterTransmit_TXE+0xda>
 8004aca:	7bbb      	ldrb	r3, [r7, #14]
 8004acc:	2b40      	cmp	r3, #64	@ 0x40
 8004ace:	d12d      	bne.n	8004b2c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004ad0:	7bfb      	ldrb	r3, [r7, #15]
 8004ad2:	2b22      	cmp	r3, #34	@ 0x22
 8004ad4:	d12a      	bne.n	8004b2c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d108      	bne.n	8004af2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aee:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004af0:	e01c      	b.n	8004b2c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b40      	cmp	r3, #64	@ 0x40
 8004afc:	d103      	bne.n	8004b06 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f88e 	bl	8004c20 <I2C_MemoryTransmit_TXE_BTF>
}
 8004b04:	e012      	b.n	8004b2c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0a:	781a      	ldrb	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004b2a:	e7ff      	b.n	8004b2c <I2C_MasterTransmit_TXE+0x130>
 8004b2c:	bf00      	nop
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b40:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b21      	cmp	r3, #33	@ 0x21
 8004b4c:	d164      	bne.n	8004c18 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d012      	beq.n	8004b7e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b5c:	781a      	ldrb	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b68:	1c5a      	adds	r2, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004b7c:	e04c      	b.n	8004c18 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2b08      	cmp	r3, #8
 8004b82:	d01d      	beq.n	8004bc0 <I2C_MasterTransmit_BTF+0x8c>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2b20      	cmp	r3, #32
 8004b88:	d01a      	beq.n	8004bc0 <I2C_MasterTransmit_BTF+0x8c>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b90:	d016      	beq.n	8004bc0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004ba0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2211      	movs	r2, #17
 8004ba6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff fed9 	bl	8004970 <HAL_I2C_MasterTxCpltCallback>
}
 8004bbe:	e02b      	b.n	8004c18 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	685a      	ldr	r2, [r3, #4]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004bce:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	681a      	ldr	r2, [r3, #0]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bde:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b40      	cmp	r3, #64	@ 0x40
 8004bf8:	d107      	bne.n	8004c0a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff fedc 	bl	80049c0 <HAL_I2C_MemTxCpltCallback>
}
 8004c08:	e006      	b.n	8004c18 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7ff feac 	bl	8004970 <HAL_I2C_MasterTxCpltCallback>
}
 8004c18:	bf00      	nop
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c2e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d11d      	bne.n	8004c74 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d10b      	bne.n	8004c58 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c50:	1c9a      	adds	r2, r3, #2
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004c56:	e077      	b.n	8004d48 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	121b      	asrs	r3, r3, #8
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c6c:	1c5a      	adds	r2, r3, #1
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004c72:	e069      	b.n	8004d48 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d10b      	bne.n	8004c94 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c8c:	1c5a      	adds	r2, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004c92:	e059      	b.n	8004d48 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d152      	bne.n	8004d42 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	2b22      	cmp	r3, #34	@ 0x22
 8004ca0:	d10d      	bne.n	8004cbe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cb0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004cbc:	e044      	b.n	8004d48 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d015      	beq.n	8004cf4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
 8004cca:	2b21      	cmp	r3, #33	@ 0x21
 8004ccc:	d112      	bne.n	8004cf4 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd2:	781a      	ldrb	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cde:	1c5a      	adds	r2, r3, #1
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	3b01      	subs	r3, #1
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004cf2:	e029      	b.n	8004d48 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf8:	b29b      	uxth	r3, r3
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d124      	bne.n	8004d48 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
 8004d00:	2b21      	cmp	r3, #33	@ 0x21
 8004d02:	d121      	bne.n	8004d48 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004d12:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d22:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7ff fe40 	bl	80049c0 <HAL_I2C_MemTxCpltCallback>
}
 8004d40:	e002      	b.n	8004d48 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7fe ffc6 	bl	8003cd4 <I2C_Flush_DR>
}
 8004d48:	bf00      	nop
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b22      	cmp	r3, #34	@ 0x22
 8004d62:	f040 80b9 	bne.w	8004ed8 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6a:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d70:	b29b      	uxth	r3, r3
 8004d72:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d921      	bls.n	8004dbe <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	691a      	ldr	r2, [r3, #16]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da4:	b29b      	uxth	r3, r3
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	f040 8096 	bne.w	8004ed8 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dba:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004dbc:	e08c      	b.n	8004ed8 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d07f      	beq.n	8004ec6 <I2C_MasterReceive_RXNE+0x176>
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d002      	beq.n	8004dd2 <I2C_MasterReceive_RXNE+0x82>
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d179      	bne.n	8004ec6 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f001 fb38 	bl	8006448 <I2C_WaitOnSTOPRequestThroughIT>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d14c      	bne.n	8004e78 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004dec:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004dfc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691a      	ldr	r2, [r3, #16]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e10:	1c5a      	adds	r2, r3, #1
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b40      	cmp	r3, #64	@ 0x40
 8004e36:	d10a      	bne.n	8004e4e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7ff fdc4 	bl	80049d4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e4c:	e044      	b.n	8004ed8 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2b08      	cmp	r3, #8
 8004e5a:	d002      	beq.n	8004e62 <I2C_MasterReceive_RXNE+0x112>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2b20      	cmp	r3, #32
 8004e60:	d103      	bne.n	8004e6a <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	631a      	str	r2, [r3, #48]	@ 0x30
 8004e68:	e002      	b.n	8004e70 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2212      	movs	r2, #18
 8004e6e:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f7ff fd87 	bl	8004984 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004e76:	e02f      	b.n	8004ed8 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	685a      	ldr	r2, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e86:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e92:	b2d2      	uxtb	r2, r2
 8004e94:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9a:	1c5a      	adds	r2, r3, #1
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea4:	b29b      	uxth	r3, r3
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	b29a      	uxth	r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f7fc f94a 	bl	8001158 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004ec4:	e008      	b.n	8004ed8 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ed4:	605a      	str	r2, [r3, #4]
}
 8004ed6:	e7ff      	b.n	8004ed8 <I2C_MasterReceive_RXNE+0x188>
 8004ed8:	bf00      	nop
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eec:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d11b      	bne.n	8004f30 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685a      	ldr	r2, [r3, #4]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f06:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	691a      	ldr	r2, [r3, #16]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1a:	1c5a      	adds	r2, r3, #1
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004f2e:	e0c8      	b.n	80050c2 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	d129      	bne.n	8004f8e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	685a      	ldr	r2, [r3, #4]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f48:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	d00a      	beq.n	8004f66 <I2C_MasterReceive_BTF+0x86>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d007      	beq.n	8004f66 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f64:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	691a      	ldr	r2, [r3, #16]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f70:	b2d2      	uxtb	r2, r2
 8004f72:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	3b01      	subs	r3, #1
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004f8c:	e099      	b.n	80050c2 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	f040 8081 	bne.w	800509c <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2b01      	cmp	r3, #1
 8004f9e:	d002      	beq.n	8004fa6 <I2C_MasterReceive_BTF+0xc6>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2b10      	cmp	r3, #16
 8004fa4:	d108      	bne.n	8004fb8 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	e019      	b.n	8004fec <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d002      	beq.n	8004fc4 <I2C_MasterReceive_BTF+0xe4>
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d108      	bne.n	8004fd6 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	e00a      	b.n	8004fec <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2b10      	cmp	r3, #16
 8004fda:	d007      	beq.n	8004fec <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691a      	ldr	r2, [r3, #16]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005008:	b29b      	uxth	r3, r3
 800500a:	3b01      	subs	r3, #1
 800500c:	b29a      	uxth	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	691a      	ldr	r2, [r3, #16]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800502e:	b29b      	uxth	r3, r3
 8005030:	3b01      	subs	r3, #1
 8005032:	b29a      	uxth	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005046:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2220      	movs	r2, #32
 800504c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b40      	cmp	r3, #64	@ 0x40
 800505a:	d10a      	bne.n	8005072 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7ff fcb2 	bl	80049d4 <HAL_I2C_MemRxCpltCallback>
}
 8005070:	e027      	b.n	80050c2 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b08      	cmp	r3, #8
 800507e:	d002      	beq.n	8005086 <I2C_MasterReceive_BTF+0x1a6>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2b20      	cmp	r3, #32
 8005084:	d103      	bne.n	800508e <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	631a      	str	r2, [r3, #48]	@ 0x30
 800508c:	e002      	b.n	8005094 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2212      	movs	r2, #18
 8005092:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f7ff fc75 	bl	8004984 <HAL_I2C_MasterRxCpltCallback>
}
 800509a:	e012      	b.n	80050c2 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	691a      	ldr	r2, [r3, #16]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29a      	uxth	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80050c2:	bf00      	nop
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80050ca:	b480      	push	{r7}
 80050cc:	b083      	sub	sp, #12
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	2b40      	cmp	r3, #64	@ 0x40
 80050dc:	d117      	bne.n	800510e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d109      	bne.n	80050fa <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	461a      	mov	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80050f6:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80050f8:	e067      	b.n	80051ca <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	f043 0301 	orr.w	r3, r3, #1
 8005104:	b2da      	uxtb	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	611a      	str	r2, [r3, #16]
}
 800510c:	e05d      	b.n	80051ca <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	691b      	ldr	r3, [r3, #16]
 8005112:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005116:	d133      	bne.n	8005180 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b21      	cmp	r3, #33	@ 0x21
 8005122:	d109      	bne.n	8005138 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005128:	b2db      	uxtb	r3, r3
 800512a:	461a      	mov	r2, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005134:	611a      	str	r2, [r3, #16]
 8005136:	e008      	b.n	800514a <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800513c:	b2db      	uxtb	r3, r3
 800513e:	f043 0301 	orr.w	r3, r3, #1
 8005142:	b2da      	uxtb	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800514e:	2b00      	cmp	r3, #0
 8005150:	d004      	beq.n	800515c <I2C_Master_SB+0x92>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005158:	2b00      	cmp	r3, #0
 800515a:	d108      	bne.n	800516e <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005160:	2b00      	cmp	r3, #0
 8005162:	d032      	beq.n	80051ca <I2C_Master_SB+0x100>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005168:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800516a:	2b00      	cmp	r3, #0
 800516c:	d02d      	beq.n	80051ca <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685a      	ldr	r2, [r3, #4]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800517c:	605a      	str	r2, [r3, #4]
}
 800517e:	e024      	b.n	80051ca <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005184:	2b00      	cmp	r3, #0
 8005186:	d10e      	bne.n	80051a6 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800518c:	b29b      	uxth	r3, r3
 800518e:	11db      	asrs	r3, r3, #7
 8005190:	b2db      	uxtb	r3, r3
 8005192:	f003 0306 	and.w	r3, r3, #6
 8005196:	b2db      	uxtb	r3, r3
 8005198:	f063 030f 	orn	r3, r3, #15
 800519c:	b2da      	uxtb	r2, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	611a      	str	r2, [r3, #16]
}
 80051a4:	e011      	b.n	80051ca <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051aa:	2b01      	cmp	r3, #1
 80051ac:	d10d      	bne.n	80051ca <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	11db      	asrs	r3, r3, #7
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	f003 0306 	and.w	r3, r3, #6
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	f063 030e 	orn	r3, r3, #14
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	611a      	str	r2, [r3, #16]
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b083      	sub	sp, #12
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d004      	beq.n	80051fc <I2C_Master_ADD10+0x26>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d108      	bne.n	800520e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005200:	2b00      	cmp	r3, #0
 8005202:	d00c      	beq.n	800521e <I2C_Master_ADD10+0x48>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800520a:	2b00      	cmp	r3, #0
 800520c:	d007      	beq.n	800521e <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685a      	ldr	r2, [r3, #4]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800521c:	605a      	str	r2, [r3, #4]
  }
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800522a:	b480      	push	{r7}
 800522c:	b091      	sub	sp, #68	@ 0x44
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005238:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005240:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005246:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b22      	cmp	r3, #34	@ 0x22
 8005252:	f040 8169 	bne.w	8005528 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800525a:	2b00      	cmp	r3, #0
 800525c:	d10f      	bne.n	800527e <I2C_Master_ADDR+0x54>
 800525e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8005262:	2b40      	cmp	r3, #64	@ 0x40
 8005264:	d10b      	bne.n	800527e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005266:	2300      	movs	r3, #0
 8005268:	633b      	str	r3, [r7, #48]	@ 0x30
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	633b      	str	r3, [r7, #48]	@ 0x30
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	633b      	str	r3, [r7, #48]	@ 0x30
 800527a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527c:	e160      	b.n	8005540 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005282:	2b00      	cmp	r3, #0
 8005284:	d11d      	bne.n	80052c2 <I2C_Master_ADDR+0x98>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800528e:	d118      	bne.n	80052c2 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005290:	2300      	movs	r3, #0
 8005292:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052b4:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052ba:	1c5a      	adds	r2, r3, #1
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	651a      	str	r2, [r3, #80]	@ 0x50
 80052c0:	e13e      	b.n	8005540 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d113      	bne.n	80052f4 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052cc:	2300      	movs	r3, #0
 80052ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	695b      	ldr	r3, [r3, #20]
 80052d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	e115      	b.n	8005520 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	f040 808a 	bne.w	8005414 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005302:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005306:	d137      	bne.n	8005378 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005316:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005322:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005326:	d113      	bne.n	8005350 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005336:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005338:	2300      	movs	r3, #0
 800533a:	627b      	str	r3, [r7, #36]	@ 0x24
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	627b      	str	r3, [r7, #36]	@ 0x24
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	627b      	str	r3, [r7, #36]	@ 0x24
 800534c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534e:	e0e7      	b.n	8005520 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005350:	2300      	movs	r3, #0
 8005352:	623b      	str	r3, [r7, #32]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	623b      	str	r3, [r7, #32]
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	623b      	str	r3, [r7, #32]
 8005364:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005374:	601a      	str	r2, [r3, #0]
 8005376:	e0d3      	b.n	8005520 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005378:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800537a:	2b08      	cmp	r3, #8
 800537c:	d02e      	beq.n	80053dc <I2C_Master_ADDR+0x1b2>
 800537e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005380:	2b20      	cmp	r3, #32
 8005382:	d02b      	beq.n	80053dc <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005386:	2b12      	cmp	r3, #18
 8005388:	d102      	bne.n	8005390 <I2C_Master_ADDR+0x166>
 800538a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538c:	2b01      	cmp	r3, #1
 800538e:	d125      	bne.n	80053dc <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005392:	2b04      	cmp	r3, #4
 8005394:	d00e      	beq.n	80053b4 <I2C_Master_ADDR+0x18a>
 8005396:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005398:	2b02      	cmp	r3, #2
 800539a:	d00b      	beq.n	80053b4 <I2C_Master_ADDR+0x18a>
 800539c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800539e:	2b10      	cmp	r3, #16
 80053a0:	d008      	beq.n	80053b4 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	e007      	b.n	80053c4 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80053c2:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053c4:	2300      	movs	r3, #0
 80053c6:	61fb      	str	r3, [r7, #28]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	61fb      	str	r3, [r7, #28]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	61fb      	str	r3, [r7, #28]
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	e0a1      	b.n	8005520 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053ea:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053ec:	2300      	movs	r3, #0
 80053ee:	61bb      	str	r3, [r7, #24]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	61bb      	str	r3, [r7, #24]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	61bb      	str	r3, [r7, #24]
 8005400:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	e085      	b.n	8005520 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005418:	b29b      	uxth	r3, r3
 800541a:	2b02      	cmp	r3, #2
 800541c:	d14d      	bne.n	80054ba <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800541e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005420:	2b04      	cmp	r3, #4
 8005422:	d016      	beq.n	8005452 <I2C_Master_ADDR+0x228>
 8005424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005426:	2b02      	cmp	r3, #2
 8005428:	d013      	beq.n	8005452 <I2C_Master_ADDR+0x228>
 800542a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800542c:	2b10      	cmp	r3, #16
 800542e:	d010      	beq.n	8005452 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800543e:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	e007      	b.n	8005462 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005460:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800546c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005470:	d117      	bne.n	80054a2 <I2C_Master_ADDR+0x278>
 8005472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005474:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005478:	d00b      	beq.n	8005492 <I2C_Master_ADDR+0x268>
 800547a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800547c:	2b01      	cmp	r3, #1
 800547e:	d008      	beq.n	8005492 <I2C_Master_ADDR+0x268>
 8005480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005482:	2b08      	cmp	r3, #8
 8005484:	d005      	beq.n	8005492 <I2C_Master_ADDR+0x268>
 8005486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005488:	2b10      	cmp	r3, #16
 800548a:	d002      	beq.n	8005492 <I2C_Master_ADDR+0x268>
 800548c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548e:	2b20      	cmp	r3, #32
 8005490:	d107      	bne.n	80054a2 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685a      	ldr	r2, [r3, #4]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80054a0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054a2:	2300      	movs	r3, #0
 80054a4:	617b      	str	r3, [r7, #20]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	617b      	str	r3, [r7, #20]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	617b      	str	r3, [r7, #20]
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	e032      	b.n	8005520 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80054c8:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054d8:	d117      	bne.n	800550a <I2C_Master_ADDR+0x2e0>
 80054da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80054e0:	d00b      	beq.n	80054fa <I2C_Master_ADDR+0x2d0>
 80054e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d008      	beq.n	80054fa <I2C_Master_ADDR+0x2d0>
 80054e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ea:	2b08      	cmp	r3, #8
 80054ec:	d005      	beq.n	80054fa <I2C_Master_ADDR+0x2d0>
 80054ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054f0:	2b10      	cmp	r3, #16
 80054f2:	d002      	beq.n	80054fa <I2C_Master_ADDR+0x2d0>
 80054f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054f6:	2b20      	cmp	r3, #32
 80054f8:	d107      	bne.n	800550a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005508:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800550a:	2300      	movs	r3, #0
 800550c:	613b      	str	r3, [r7, #16]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	613b      	str	r3, [r7, #16]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	613b      	str	r3, [r7, #16]
 800551e:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2200      	movs	r2, #0
 8005524:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005526:	e00b      	b.n	8005540 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005528:	2300      	movs	r3, #0
 800552a:	60fb      	str	r3, [r7, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	60fb      	str	r3, [r7, #12]
 800553c:	68fb      	ldr	r3, [r7, #12]
}
 800553e:	e7ff      	b.n	8005540 <I2C_Master_ADDR+0x316>
 8005540:	bf00      	nop
 8005542:	3744      	adds	r7, #68	@ 0x44
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800555a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d02b      	beq.n	80055be <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556a:	781a      	ldrb	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005576:	1c5a      	adds	r2, r3, #1
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005580:	b29b      	uxth	r3, r3
 8005582:	3b01      	subs	r3, #1
 8005584:	b29a      	uxth	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800558e:	b29b      	uxth	r3, r3
 8005590:	2b00      	cmp	r3, #0
 8005592:	d114      	bne.n	80055be <I2C_SlaveTransmit_TXE+0x72>
 8005594:	7bfb      	ldrb	r3, [r7, #15]
 8005596:	2b29      	cmp	r3, #41	@ 0x29
 8005598:	d111      	bne.n	80055be <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055a8:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2221      	movs	r2, #33	@ 0x21
 80055ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2228      	movs	r2, #40	@ 0x28
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7ff f9ed 	bl	8004998 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80055be:	bf00      	nop
 80055c0:	3710      	adds	r7, #16
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80055c6:	b480      	push	{r7}
 80055c8:	b083      	sub	sp, #12
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d011      	beq.n	80055fc <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055dc:	781a      	ldrb	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e8:	1c5a      	adds	r2, r3, #1
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	3b01      	subs	r3, #1
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005616:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800561c:	b29b      	uxth	r3, r3
 800561e:	2b00      	cmp	r3, #0
 8005620:	d02c      	beq.n	800567c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	691a      	ldr	r2, [r3, #16]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562c:	b2d2      	uxtb	r2, r2
 800562e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800563e:	b29b      	uxth	r3, r3
 8005640:	3b01      	subs	r3, #1
 8005642:	b29a      	uxth	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800564c:	b29b      	uxth	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d114      	bne.n	800567c <I2C_SlaveReceive_RXNE+0x74>
 8005652:	7bfb      	ldrb	r3, [r7, #15]
 8005654:	2b2a      	cmp	r3, #42	@ 0x2a
 8005656:	d111      	bne.n	800567c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685a      	ldr	r2, [r3, #4]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005666:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2222      	movs	r2, #34	@ 0x22
 800566c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2228      	movs	r2, #40	@ 0x28
 8005672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7fb fd26 	bl	80010c8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d012      	beq.n	80056bc <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a0:	b2d2      	uxtb	r2, r2
 80056a2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a8:	1c5a      	adds	r2, r3, #1
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	3b01      	subs	r3, #1
 80056b6:	b29a      	uxth	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80056d2:	2300      	movs	r3, #0
 80056d4:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80056e2:	2b28      	cmp	r3, #40	@ 0x28
 80056e4:	d125      	bne.n	8005732 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056f4:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005700:	2301      	movs	r3, #1
 8005702:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800570a:	2b00      	cmp	r3, #0
 800570c:	d103      	bne.n	8005716 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	81bb      	strh	r3, [r7, #12]
 8005714:	e002      	b.n	800571c <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2200      	movs	r2, #0
 8005720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005724:	89ba      	ldrh	r2, [r7, #12]
 8005726:	7bfb      	ldrb	r3, [r7, #15]
 8005728:	4619      	mov	r1, r3
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f7fb fce4 	bl	80010f8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005730:	e00e      	b.n	8005750 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005732:	2300      	movs	r3, #0
 8005734:	60bb      	str	r3, [r7, #8]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	60bb      	str	r3, [r7, #8]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	60bb      	str	r3, [r7, #8]
 8005746:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005750:	bf00      	nop
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b084      	sub	sp, #16
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005766:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005776:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005778:	2300      	movs	r3, #0
 800577a:	60bb      	str	r3, [r7, #8]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	60bb      	str	r3, [r7, #8]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f042 0201 	orr.w	r2, r2, #1
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057a4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057b4:	d172      	bne.n	800589c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
 80057b8:	2b22      	cmp	r3, #34	@ 0x22
 80057ba:	d002      	beq.n	80057c2 <I2C_Slave_STOPF+0x6a>
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
 80057be:	2b2a      	cmp	r3, #42	@ 0x2a
 80057c0:	d135      	bne.n	800582e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d005      	beq.n	80057e6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057de:	f043 0204 	orr.w	r2, r3, #4
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80057f4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fd fe98 	bl	8003530 <HAL_DMA_GetState>
 8005800:	4603      	mov	r3, r0
 8005802:	2b01      	cmp	r3, #1
 8005804:	d049      	beq.n	800589a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800580a:	4a69      	ldr	r2, [pc, #420]	@ (80059b0 <I2C_Slave_STOPF+0x258>)
 800580c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005812:	4618      	mov	r0, r3
 8005814:	f7fd fce0 	bl	80031d8 <HAL_DMA_Abort_IT>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d03d      	beq.n	800589a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005822:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005828:	4610      	mov	r0, r2
 800582a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800582c:	e035      	b.n	800589a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	b29a      	uxth	r2, r3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005840:	b29b      	uxth	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d005      	beq.n	8005852 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800584a:	f043 0204 	orr.w	r2, r3, #4
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005860:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005866:	4618      	mov	r0, r3
 8005868:	f7fd fe62 	bl	8003530 <HAL_DMA_GetState>
 800586c:	4603      	mov	r3, r0
 800586e:	2b01      	cmp	r3, #1
 8005870:	d014      	beq.n	800589c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005876:	4a4e      	ldr	r2, [pc, #312]	@ (80059b0 <I2C_Slave_STOPF+0x258>)
 8005878:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800587e:	4618      	mov	r0, r3
 8005880:	f7fd fcaa 	bl	80031d8 <HAL_DMA_Abort_IT>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d008      	beq.n	800589c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800588e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005894:	4610      	mov	r0, r2
 8005896:	4798      	blx	r3
 8005898:	e000      	b.n	800589c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800589a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d03e      	beq.n	8005924 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	695b      	ldr	r3, [r3, #20]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d112      	bne.n	80058da <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	691a      	ldr	r2, [r3, #16]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058c6:	1c5a      	adds	r2, r3, #1
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	3b01      	subs	r3, #1
 80058d4:	b29a      	uxth	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	695b      	ldr	r3, [r3, #20]
 80058e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e4:	2b40      	cmp	r3, #64	@ 0x40
 80058e6:	d112      	bne.n	800590e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691a      	ldr	r2, [r3, #16]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f2:	b2d2      	uxtb	r2, r2
 80058f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005912:	b29b      	uxth	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	d005      	beq.n	8005924 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800591c:	f043 0204 	orr.w	r2, r3, #4
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f8b7 	bl	8005aa0 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005932:	e039      	b.n	80059a8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005934:	7bfb      	ldrb	r3, [r7, #15]
 8005936:	2b2a      	cmp	r3, #42	@ 0x2a
 8005938:	d109      	bne.n	800594e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2228      	movs	r2, #40	@ 0x28
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f7fb fbbd 	bl	80010c8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b28      	cmp	r3, #40	@ 0x28
 8005958:	d111      	bne.n	800597e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a15      	ldr	r2, [pc, #84]	@ (80059b4 <I2C_Slave_STOPF+0x25c>)
 800595e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2220      	movs	r2, #32
 800596a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff f818 	bl	80049ac <HAL_I2C_ListenCpltCallback>
}
 800597c:	e014      	b.n	80059a8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005982:	2b22      	cmp	r3, #34	@ 0x22
 8005984:	d002      	beq.n	800598c <I2C_Slave_STOPF+0x234>
 8005986:	7bfb      	ldrb	r3, [r7, #15]
 8005988:	2b22      	cmp	r3, #34	@ 0x22
 800598a:	d10d      	bne.n	80059a8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2220      	movs	r2, #32
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f7fb fb90 	bl	80010c8 <HAL_I2C_SlaveRxCpltCallback>
}
 80059a8:	bf00      	nop
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	08005fa5 	.word	0x08005fa5
 80059b4:	ffff0000 	.word	0xffff0000

080059b8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059c6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059cc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	2b08      	cmp	r3, #8
 80059d2:	d002      	beq.n	80059da <I2C_Slave_AF+0x22>
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2b20      	cmp	r3, #32
 80059d8:	d129      	bne.n	8005a2e <I2C_Slave_AF+0x76>
 80059da:	7bfb      	ldrb	r3, [r7, #15]
 80059dc:	2b28      	cmp	r3, #40	@ 0x28
 80059de:	d126      	bne.n	8005a2e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a2e      	ldr	r2, [pc, #184]	@ (8005a9c <I2C_Slave_AF+0xe4>)
 80059e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80059f4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80059fe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a0e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2220      	movs	r2, #32
 8005a1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fe ffc0 	bl	80049ac <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005a2c:	e031      	b.n	8005a92 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005a2e:	7bfb      	ldrb	r3, [r7, #15]
 8005a30:	2b21      	cmp	r3, #33	@ 0x21
 8005a32:	d129      	bne.n	8005a88 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	4a19      	ldr	r2, [pc, #100]	@ (8005a9c <I2C_Slave_AF+0xe4>)
 8005a38:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2221      	movs	r2, #33	@ 0x21
 8005a3e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685a      	ldr	r2, [r3, #4]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005a5e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a68:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a78:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f7fe f92a 	bl	8003cd4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7fe ff89 	bl	8004998 <HAL_I2C_SlaveTxCpltCallback>
}
 8005a86:	e004      	b.n	8005a92 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a90:	615a      	str	r2, [r3, #20]
}
 8005a92:	bf00      	nop
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	ffff0000 	.word	0xffff0000

08005aa0 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ab6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ab8:	7bbb      	ldrb	r3, [r7, #14]
 8005aba:	2b10      	cmp	r3, #16
 8005abc:	d002      	beq.n	8005ac4 <I2C_ITError+0x24>
 8005abe:	7bbb      	ldrb	r3, [r7, #14]
 8005ac0:	2b40      	cmp	r3, #64	@ 0x40
 8005ac2:	d10a      	bne.n	8005ada <I2C_ITError+0x3a>
 8005ac4:	7bfb      	ldrb	r3, [r7, #15]
 8005ac6:	2b22      	cmp	r3, #34	@ 0x22
 8005ac8:	d107      	bne.n	8005ada <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ad8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ada:	7bfb      	ldrb	r3, [r7, #15]
 8005adc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005ae0:	2b28      	cmp	r3, #40	@ 0x28
 8005ae2:	d107      	bne.n	8005af4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2228      	movs	r2, #40	@ 0x28
 8005aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005af2:	e015      	b.n	8005b20 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005afe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b02:	d00a      	beq.n	8005b1a <I2C_ITError+0x7a>
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	2b60      	cmp	r3, #96	@ 0x60
 8005b08:	d007      	beq.n	8005b1a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b2a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b2e:	d162      	bne.n	8005bf6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b3e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d020      	beq.n	8005b90 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b52:	4a6a      	ldr	r2, [pc, #424]	@ (8005cfc <I2C_ITError+0x25c>)
 8005b54:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fd fb3c 	bl	80031d8 <HAL_DMA_Abort_IT>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 8089 	beq.w	8005c7a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 0201 	bic.w	r2, r2, #1
 8005b76:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005b8a:	4610      	mov	r0, r2
 8005b8c:	4798      	blx	r3
 8005b8e:	e074      	b.n	8005c7a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b94:	4a59      	ldr	r2, [pc, #356]	@ (8005cfc <I2C_ITError+0x25c>)
 8005b96:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fd fb1b 	bl	80031d8 <HAL_DMA_Abort_IT>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d068      	beq.n	8005c7a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bb2:	2b40      	cmp	r3, #64	@ 0x40
 8005bb4:	d10b      	bne.n	8005bce <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	691a      	ldr	r2, [r3, #16]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc0:	b2d2      	uxtb	r2, r2
 8005bc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f022 0201 	bic.w	r2, r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2220      	movs	r2, #32
 8005be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4798      	blx	r3
 8005bf4:	e041      	b.n	8005c7a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	2b60      	cmp	r3, #96	@ 0x60
 8005c00:	d125      	bne.n	8005c4e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2220      	movs	r2, #32
 8005c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c1a:	2b40      	cmp	r3, #64	@ 0x40
 8005c1c:	d10b      	bne.n	8005c36 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	691a      	ldr	r2, [r3, #16]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c28:	b2d2      	uxtb	r2, r2
 8005c2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c30:	1c5a      	adds	r2, r3, #1
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0201 	bic.w	r2, r2, #1
 8005c44:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f7fe fece 	bl	80049e8 <HAL_I2C_AbortCpltCallback>
 8005c4c:	e015      	b.n	8005c7a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	695b      	ldr	r3, [r3, #20]
 8005c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c58:	2b40      	cmp	r3, #64	@ 0x40
 8005c5a:	d10b      	bne.n	8005c74 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	691a      	ldr	r2, [r3, #16]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c66:	b2d2      	uxtb	r2, r2
 8005c68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6e:	1c5a      	adds	r2, r3, #1
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f7fb fa6f 	bl	8001158 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10e      	bne.n	8005ca8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d109      	bne.n	8005ca8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d104      	bne.n	8005ca8 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d007      	beq.n	8005cb8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005cb6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cbe:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc4:	f003 0304 	and.w	r3, r3, #4
 8005cc8:	2b04      	cmp	r3, #4
 8005cca:	d113      	bne.n	8005cf4 <I2C_ITError+0x254>
 8005ccc:	7bfb      	ldrb	r3, [r7, #15]
 8005cce:	2b28      	cmp	r3, #40	@ 0x28
 8005cd0:	d110      	bne.n	8005cf4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a0a      	ldr	r2, [pc, #40]	@ (8005d00 <I2C_ITError+0x260>)
 8005cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2220      	movs	r2, #32
 8005ce2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7fe fe5c 	bl	80049ac <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005cf4:	bf00      	nop
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	08005fa5 	.word	0x08005fa5
 8005d00:	ffff0000 	.word	0xffff0000

08005d04 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b088      	sub	sp, #32
 8005d08:	af02      	add	r7, sp, #8
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	607a      	str	r2, [r7, #4]
 8005d0e:	603b      	str	r3, [r7, #0]
 8005d10:	460b      	mov	r3, r1
 8005d12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d18:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	d006      	beq.n	8005d2e <I2C_MasterRequestWrite+0x2a>
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d003      	beq.n	8005d2e <I2C_MasterRequestWrite+0x2a>
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005d2c:	d108      	bne.n	8005d40 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	e00b      	b.n	8005d58 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d44:	2b12      	cmp	r3, #18
 8005d46:	d107      	bne.n	8005d58 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d64:	68f8      	ldr	r0, [r7, #12]
 8005d66:	f000 f9c5 	bl	80060f4 <I2C_WaitOnFlagUntilTimeout>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00d      	beq.n	8005d8c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d7e:	d103      	bne.n	8005d88 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d86:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d88:	2303      	movs	r3, #3
 8005d8a:	e035      	b.n	8005df8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005d94:	d108      	bne.n	8005da8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d96:	897b      	ldrh	r3, [r7, #10]
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005da4:	611a      	str	r2, [r3, #16]
 8005da6:	e01b      	b.n	8005de0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005da8:	897b      	ldrh	r3, [r7, #10]
 8005daa:	11db      	asrs	r3, r3, #7
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	f003 0306 	and.w	r3, r3, #6
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	f063 030f 	orn	r3, r3, #15
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	490e      	ldr	r1, [pc, #56]	@ (8005e00 <I2C_MasterRequestWrite+0xfc>)
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 fa0e 	bl	80061e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e010      	b.n	8005df8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005dd6:	897b      	ldrh	r3, [r7, #10]
 8005dd8:	b2da      	uxtb	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	4907      	ldr	r1, [pc, #28]	@ (8005e04 <I2C_MasterRequestWrite+0x100>)
 8005de6:	68f8      	ldr	r0, [r7, #12]
 8005de8:	f000 f9fe 	bl	80061e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d001      	beq.n	8005df6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e000      	b.n	8005df8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005df6:	2300      	movs	r3, #0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	00010008 	.word	0x00010008
 8005e04:	00010002 	.word	0x00010002

08005e08 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b088      	sub	sp, #32
 8005e0c:	af02      	add	r7, sp, #8
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	607a      	str	r2, [r7, #4]
 8005e12:	603b      	str	r3, [r7, #0]
 8005e14:	460b      	mov	r3, r1
 8005e16:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005e2c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d006      	beq.n	8005e42 <I2C_MasterRequestRead+0x3a>
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d003      	beq.n	8005e42 <I2C_MasterRequestRead+0x3a>
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e40:	d108      	bne.n	8005e54 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e50:	601a      	str	r2, [r3, #0]
 8005e52:	e00b      	b.n	8005e6c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e58:	2b11      	cmp	r3, #17
 8005e5a:	d107      	bne.n	8005e6c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f000 f93b 	bl	80060f4 <I2C_WaitOnFlagUntilTimeout>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00d      	beq.n	8005ea0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e92:	d103      	bne.n	8005e9c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e9c:	2303      	movs	r3, #3
 8005e9e:	e079      	b.n	8005f94 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ea8:	d108      	bne.n	8005ebc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005eaa:	897b      	ldrh	r3, [r7, #10]
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	f043 0301 	orr.w	r3, r3, #1
 8005eb2:	b2da      	uxtb	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	611a      	str	r2, [r3, #16]
 8005eba:	e05f      	b.n	8005f7c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ebc:	897b      	ldrh	r3, [r7, #10]
 8005ebe:	11db      	asrs	r3, r3, #7
 8005ec0:	b2db      	uxtb	r3, r3
 8005ec2:	f003 0306 	and.w	r3, r3, #6
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	f063 030f 	orn	r3, r3, #15
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	4930      	ldr	r1, [pc, #192]	@ (8005f9c <I2C_MasterRequestRead+0x194>)
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f000 f984 	bl	80061e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e054      	b.n	8005f94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005eea:	897b      	ldrh	r3, [r7, #10]
 8005eec:	b2da      	uxtb	r2, r3
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	4929      	ldr	r1, [pc, #164]	@ (8005fa0 <I2C_MasterRequestRead+0x198>)
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f000 f974 	bl	80061e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e044      	b.n	8005f94 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	613b      	str	r3, [r7, #16]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	613b      	str	r3, [r7, #16]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	613b      	str	r3, [r7, #16]
 8005f1e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f2e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	9300      	str	r3, [sp, #0]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f000 f8d9 	bl	80060f4 <I2C_WaitOnFlagUntilTimeout>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d00d      	beq.n	8005f64 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f56:	d103      	bne.n	8005f60 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f5e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e017      	b.n	8005f94 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005f64:	897b      	ldrh	r3, [r7, #10]
 8005f66:	11db      	asrs	r3, r3, #7
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	f003 0306 	and.w	r3, r3, #6
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	f063 030e 	orn	r3, r3, #14
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	4907      	ldr	r1, [pc, #28]	@ (8005fa0 <I2C_MasterRequestRead+0x198>)
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 f930 	bl	80061e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e000      	b.n	8005f94 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3718      	adds	r7, #24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	00010008 	.word	0x00010008
 8005fa0:	00010002 	.word	0x00010002

08005fa4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005fac:	2300      	movs	r3, #0
 8005fae:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fbc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005fbe:	4b4b      	ldr	r3, [pc, #300]	@ (80060ec <I2C_DMAAbort+0x148>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	08db      	lsrs	r3, r3, #3
 8005fc4:	4a4a      	ldr	r2, [pc, #296]	@ (80060f0 <I2C_DMAAbort+0x14c>)
 8005fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fca:	0a1a      	lsrs	r2, r3, #8
 8005fcc:	4613      	mov	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4413      	add	r3, r2
 8005fd2:	00da      	lsls	r2, r3, #3
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d106      	bne.n	8005fec <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fe2:	f043 0220 	orr.w	r2, r3, #32
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8005fea:	e00a      	b.n	8006002 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	3b01      	subs	r3, #1
 8005ff0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ffc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006000:	d0ea      	beq.n	8005fd8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006006:	2b00      	cmp	r3, #0
 8006008:	d003      	beq.n	8006012 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800600e:	2200      	movs	r2, #0
 8006010:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800601e:	2200      	movs	r2, #0
 8006020:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	681a      	ldr	r2, [r3, #0]
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006030:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2200      	movs	r2, #0
 8006036:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006044:	2200      	movs	r2, #0
 8006046:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006054:	2200      	movs	r2, #0
 8006056:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f022 0201 	bic.w	r2, r2, #1
 8006066:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b60      	cmp	r3, #96	@ 0x60
 8006072:	d10e      	bne.n	8006092 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	2220      	movs	r2, #32
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2200      	movs	r2, #0
 8006088:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800608a:	6978      	ldr	r0, [r7, #20]
 800608c:	f7fe fcac 	bl	80049e8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006090:	e027      	b.n	80060e2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006092:	7cfb      	ldrb	r3, [r7, #19]
 8006094:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006098:	2b28      	cmp	r3, #40	@ 0x28
 800609a:	d117      	bne.n	80060cc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f042 0201 	orr.w	r2, r2, #1
 80060aa:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80060ba:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	2200      	movs	r2, #0
 80060c0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	2228      	movs	r2, #40	@ 0x28
 80060c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80060ca:	e007      	b.n	80060dc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80060dc:	6978      	ldr	r0, [r7, #20]
 80060de:	f7fb f83b 	bl	8001158 <HAL_I2C_ErrorCallback>
}
 80060e2:	bf00      	nop
 80060e4:	3718      	adds	r7, #24
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	2000000c 	.word	0x2000000c
 80060f0:	14f8b589 	.word	0x14f8b589

080060f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	603b      	str	r3, [r7, #0]
 8006100:	4613      	mov	r3, r2
 8006102:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006104:	e048      	b.n	8006198 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800610c:	d044      	beq.n	8006198 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800610e:	f7fc faa7 	bl	8002660 <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	429a      	cmp	r2, r3
 800611c:	d302      	bcc.n	8006124 <I2C_WaitOnFlagUntilTimeout+0x30>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d139      	bne.n	8006198 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	0c1b      	lsrs	r3, r3, #16
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b01      	cmp	r3, #1
 800612c:	d10d      	bne.n	800614a <I2C_WaitOnFlagUntilTimeout+0x56>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	43da      	mvns	r2, r3
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	4013      	ands	r3, r2
 800613a:	b29b      	uxth	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	bf0c      	ite	eq
 8006140:	2301      	moveq	r3, #1
 8006142:	2300      	movne	r3, #0
 8006144:	b2db      	uxtb	r3, r3
 8006146:	461a      	mov	r2, r3
 8006148:	e00c      	b.n	8006164 <I2C_WaitOnFlagUntilTimeout+0x70>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	699b      	ldr	r3, [r3, #24]
 8006150:	43da      	mvns	r2, r3
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	4013      	ands	r3, r2
 8006156:	b29b      	uxth	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	bf0c      	ite	eq
 800615c:	2301      	moveq	r3, #1
 800615e:	2300      	movne	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	461a      	mov	r2, r3
 8006164:	79fb      	ldrb	r3, [r7, #7]
 8006166:	429a      	cmp	r2, r3
 8006168:	d116      	bne.n	8006198 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2200      	movs	r2, #0
 800616e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2220      	movs	r2, #32
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006184:	f043 0220 	orr.w	r2, r3, #32
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e023      	b.n	80061e0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	0c1b      	lsrs	r3, r3, #16
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d10d      	bne.n	80061be <I2C_WaitOnFlagUntilTimeout+0xca>
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	43da      	mvns	r2, r3
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	4013      	ands	r3, r2
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	bf0c      	ite	eq
 80061b4:	2301      	moveq	r3, #1
 80061b6:	2300      	movne	r3, #0
 80061b8:	b2db      	uxtb	r3, r3
 80061ba:	461a      	mov	r2, r3
 80061bc:	e00c      	b.n	80061d8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	43da      	mvns	r2, r3
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	4013      	ands	r3, r2
 80061ca:	b29b      	uxth	r3, r3
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	bf0c      	ite	eq
 80061d0:	2301      	moveq	r3, #1
 80061d2:	2300      	movne	r3, #0
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	461a      	mov	r2, r3
 80061d8:	79fb      	ldrb	r3, [r7, #7]
 80061da:	429a      	cmp	r2, r3
 80061dc:	d093      	beq.n	8006106 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	607a      	str	r2, [r7, #4]
 80061f4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80061f6:	e071      	b.n	80062dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006206:	d123      	bne.n	8006250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006216:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006220:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2200      	movs	r2, #0
 8006226:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2220      	movs	r2, #32
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2200      	movs	r2, #0
 8006234:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623c:	f043 0204 	orr.w	r2, r3, #4
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2200      	movs	r2, #0
 8006248:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	e067      	b.n	8006320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006256:	d041      	beq.n	80062dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006258:	f7fc fa02 	bl	8002660 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	687a      	ldr	r2, [r7, #4]
 8006264:	429a      	cmp	r2, r3
 8006266:	d302      	bcc.n	800626e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d136      	bne.n	80062dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	0c1b      	lsrs	r3, r3, #16
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b01      	cmp	r3, #1
 8006276:	d10c      	bne.n	8006292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	43da      	mvns	r2, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	4013      	ands	r3, r2
 8006284:	b29b      	uxth	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	bf14      	ite	ne
 800628a:	2301      	movne	r3, #1
 800628c:	2300      	moveq	r3, #0
 800628e:	b2db      	uxtb	r3, r3
 8006290:	e00b      	b.n	80062aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	43da      	mvns	r2, r3
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	4013      	ands	r3, r2
 800629e:	b29b      	uxth	r3, r3
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	bf14      	ite	ne
 80062a4:	2301      	movne	r3, #1
 80062a6:	2300      	moveq	r3, #0
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d016      	beq.n	80062dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	2200      	movs	r2, #0
 80062b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c8:	f043 0220 	orr.w	r2, r3, #32
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e021      	b.n	8006320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	0c1b      	lsrs	r3, r3, #16
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d10c      	bne.n	8006300 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	695b      	ldr	r3, [r3, #20]
 80062ec:	43da      	mvns	r2, r3
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	4013      	ands	r3, r2
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	bf14      	ite	ne
 80062f8:	2301      	movne	r3, #1
 80062fa:	2300      	moveq	r3, #0
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	e00b      	b.n	8006318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	699b      	ldr	r3, [r3, #24]
 8006306:	43da      	mvns	r2, r3
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	4013      	ands	r3, r2
 800630c:	b29b      	uxth	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	bf14      	ite	ne
 8006312:	2301      	movne	r3, #1
 8006314:	2300      	moveq	r3, #0
 8006316:	b2db      	uxtb	r3, r3
 8006318:	2b00      	cmp	r3, #0
 800631a:	f47f af6d 	bne.w	80061f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006334:	e034      	b.n	80063a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 f915 	bl	8006566 <I2C_IsAcknowledgeFailed>
 800633c:	4603      	mov	r3, r0
 800633e:	2b00      	cmp	r3, #0
 8006340:	d001      	beq.n	8006346 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e034      	b.n	80063b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800634c:	d028      	beq.n	80063a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800634e:	f7fc f987 	bl	8002660 <HAL_GetTick>
 8006352:	4602      	mov	r2, r0
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	1ad3      	subs	r3, r2, r3
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	429a      	cmp	r2, r3
 800635c:	d302      	bcc.n	8006364 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d11d      	bne.n	80063a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800636e:	2b80      	cmp	r3, #128	@ 0x80
 8006370:	d016      	beq.n	80063a0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2220      	movs	r2, #32
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800638c:	f043 0220 	orr.w	r2, r3, #32
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e007      	b.n	80063b0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063aa:	2b80      	cmp	r3, #128	@ 0x80
 80063ac:	d1c3      	bne.n	8006336 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063c4:	e034      	b.n	8006430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 f8cd 	bl	8006566 <I2C_IsAcknowledgeFailed>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063d2:	2301      	movs	r3, #1
 80063d4:	e034      	b.n	8006440 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063dc:	d028      	beq.n	8006430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063de:	f7fc f93f 	bl	8002660 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d302      	bcc.n	80063f4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d11d      	bne.n	8006430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	f003 0304 	and.w	r3, r3, #4
 80063fe:	2b04      	cmp	r3, #4
 8006400:	d016      	beq.n	8006430 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2220      	movs	r2, #32
 800640c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641c:	f043 0220 	orr.w	r2, r3, #32
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800642c:	2301      	movs	r3, #1
 800642e:	e007      	b.n	8006440 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	f003 0304 	and.w	r3, r3, #4
 800643a:	2b04      	cmp	r3, #4
 800643c:	d1c3      	bne.n	80063c6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006450:	2300      	movs	r3, #0
 8006452:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006454:	4b13      	ldr	r3, [pc, #76]	@ (80064a4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	08db      	lsrs	r3, r3, #3
 800645a:	4a13      	ldr	r2, [pc, #76]	@ (80064a8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800645c:	fba2 2303 	umull	r2, r3, r2, r3
 8006460:	0a1a      	lsrs	r2, r3, #8
 8006462:	4613      	mov	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	3b01      	subs	r3, #1
 800646e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d107      	bne.n	8006486 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800647a:	f043 0220 	orr.w	r2, r3, #32
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e008      	b.n	8006498 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006494:	d0e9      	beq.n	800646a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006496:	2300      	movs	r3, #0
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr
 80064a4:	2000000c 	.word	0x2000000c
 80064a8:	14f8b589 	.word	0x14f8b589

080064ac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064b8:	e049      	b.n	800654e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	695b      	ldr	r3, [r3, #20]
 80064c0:	f003 0310 	and.w	r3, r3, #16
 80064c4:	2b10      	cmp	r3, #16
 80064c6:	d119      	bne.n	80064fc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f06f 0210 	mvn.w	r2, #16
 80064d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2220      	movs	r2, #32
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e030      	b.n	800655e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064fc:	f7fc f8b0 	bl	8002660 <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	68ba      	ldr	r2, [r7, #8]
 8006508:	429a      	cmp	r2, r3
 800650a:	d302      	bcc.n	8006512 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d11d      	bne.n	800654e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	695b      	ldr	r3, [r3, #20]
 8006518:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800651c:	2b40      	cmp	r3, #64	@ 0x40
 800651e:	d016      	beq.n	800654e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2220      	movs	r2, #32
 800652a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800653a:	f043 0220 	orr.w	r2, r3, #32
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e007      	b.n	800655e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006558:	2b40      	cmp	r3, #64	@ 0x40
 800655a:	d1ae      	bne.n	80064ba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006566:	b480      	push	{r7}
 8006568:	b083      	sub	sp, #12
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	695b      	ldr	r3, [r3, #20]
 8006574:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006578:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800657c:	d11b      	bne.n	80065b6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006586:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2200      	movs	r2, #0
 800658c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2220      	movs	r2, #32
 8006592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2200      	movs	r2, #0
 800659a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a2:	f043 0204 	orr.w	r2, r3, #4
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	e000      	b.n	80065b8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80065b6:	2300      	movs	r3, #0
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b083      	sub	sp, #12
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80065d4:	d103      	bne.n	80065de <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80065dc:	e007      	b.n	80065ee <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80065e6:	d102      	bne.n	80065ee <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2208      	movs	r2, #8
 80065ec:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80065ee:	bf00      	nop
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b086      	sub	sp, #24
 80065fe:	af02      	add	r7, sp, #8
 8006600:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e101      	b.n	8006810 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d106      	bne.n	800662c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f006 fc70 	bl	800cf0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2203      	movs	r2, #3
 8006630:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800663a:	d102      	bne.n	8006642 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4618      	mov	r0, r3
 8006648:	f003 f8bd 	bl	80097c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6818      	ldr	r0, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	7c1a      	ldrb	r2, [r3, #16]
 8006654:	f88d 2000 	strb.w	r2, [sp]
 8006658:	3304      	adds	r3, #4
 800665a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800665c:	f002 ff9c 	bl	8009598 <USB_CoreInit>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d005      	beq.n	8006672 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2202      	movs	r2, #2
 800666a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800666e:	2301      	movs	r3, #1
 8006670:	e0ce      	b.n	8006810 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2100      	movs	r1, #0
 8006678:	4618      	mov	r0, r3
 800667a:	f003 f8b5 	bl	80097e8 <USB_SetCurrentMode>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d005      	beq.n	8006690 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2202      	movs	r2, #2
 8006688:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800668c:	2301      	movs	r3, #1
 800668e:	e0bf      	b.n	8006810 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006690:	2300      	movs	r3, #0
 8006692:	73fb      	strb	r3, [r7, #15]
 8006694:	e04a      	b.n	800672c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006696:	7bfa      	ldrb	r2, [r7, #15]
 8006698:	6879      	ldr	r1, [r7, #4]
 800669a:	4613      	mov	r3, r2
 800669c:	00db      	lsls	r3, r3, #3
 800669e:	4413      	add	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	440b      	add	r3, r1
 80066a4:	3315      	adds	r3, #21
 80066a6:	2201      	movs	r2, #1
 80066a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80066aa:	7bfa      	ldrb	r2, [r7, #15]
 80066ac:	6879      	ldr	r1, [r7, #4]
 80066ae:	4613      	mov	r3, r2
 80066b0:	00db      	lsls	r3, r3, #3
 80066b2:	4413      	add	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	440b      	add	r3, r1
 80066b8:	3314      	adds	r3, #20
 80066ba:	7bfa      	ldrb	r2, [r7, #15]
 80066bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80066be:	7bfa      	ldrb	r2, [r7, #15]
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
 80066c2:	b298      	uxth	r0, r3
 80066c4:	6879      	ldr	r1, [r7, #4]
 80066c6:	4613      	mov	r3, r2
 80066c8:	00db      	lsls	r3, r3, #3
 80066ca:	4413      	add	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	440b      	add	r3, r1
 80066d0:	332e      	adds	r3, #46	@ 0x2e
 80066d2:	4602      	mov	r2, r0
 80066d4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80066d6:	7bfa      	ldrb	r2, [r7, #15]
 80066d8:	6879      	ldr	r1, [r7, #4]
 80066da:	4613      	mov	r3, r2
 80066dc:	00db      	lsls	r3, r3, #3
 80066de:	4413      	add	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	440b      	add	r3, r1
 80066e4:	3318      	adds	r3, #24
 80066e6:	2200      	movs	r2, #0
 80066e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80066ea:	7bfa      	ldrb	r2, [r7, #15]
 80066ec:	6879      	ldr	r1, [r7, #4]
 80066ee:	4613      	mov	r3, r2
 80066f0:	00db      	lsls	r3, r3, #3
 80066f2:	4413      	add	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	440b      	add	r3, r1
 80066f8:	331c      	adds	r3, #28
 80066fa:	2200      	movs	r2, #0
 80066fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80066fe:	7bfa      	ldrb	r2, [r7, #15]
 8006700:	6879      	ldr	r1, [r7, #4]
 8006702:	4613      	mov	r3, r2
 8006704:	00db      	lsls	r3, r3, #3
 8006706:	4413      	add	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	440b      	add	r3, r1
 800670c:	3320      	adds	r3, #32
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006712:	7bfa      	ldrb	r2, [r7, #15]
 8006714:	6879      	ldr	r1, [r7, #4]
 8006716:	4613      	mov	r3, r2
 8006718:	00db      	lsls	r3, r3, #3
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	440b      	add	r3, r1
 8006720:	3324      	adds	r3, #36	@ 0x24
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006726:	7bfb      	ldrb	r3, [r7, #15]
 8006728:	3301      	adds	r3, #1
 800672a:	73fb      	strb	r3, [r7, #15]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	791b      	ldrb	r3, [r3, #4]
 8006730:	7bfa      	ldrb	r2, [r7, #15]
 8006732:	429a      	cmp	r2, r3
 8006734:	d3af      	bcc.n	8006696 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006736:	2300      	movs	r3, #0
 8006738:	73fb      	strb	r3, [r7, #15]
 800673a:	e044      	b.n	80067c6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800673c:	7bfa      	ldrb	r2, [r7, #15]
 800673e:	6879      	ldr	r1, [r7, #4]
 8006740:	4613      	mov	r3, r2
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	4413      	add	r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	440b      	add	r3, r1
 800674a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800674e:	2200      	movs	r2, #0
 8006750:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006752:	7bfa      	ldrb	r2, [r7, #15]
 8006754:	6879      	ldr	r1, [r7, #4]
 8006756:	4613      	mov	r3, r2
 8006758:	00db      	lsls	r3, r3, #3
 800675a:	4413      	add	r3, r2
 800675c:	009b      	lsls	r3, r3, #2
 800675e:	440b      	add	r3, r1
 8006760:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006764:	7bfa      	ldrb	r2, [r7, #15]
 8006766:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006768:	7bfa      	ldrb	r2, [r7, #15]
 800676a:	6879      	ldr	r1, [r7, #4]
 800676c:	4613      	mov	r3, r2
 800676e:	00db      	lsls	r3, r3, #3
 8006770:	4413      	add	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	440b      	add	r3, r1
 8006776:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800677a:	2200      	movs	r2, #0
 800677c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800677e:	7bfa      	ldrb	r2, [r7, #15]
 8006780:	6879      	ldr	r1, [r7, #4]
 8006782:	4613      	mov	r3, r2
 8006784:	00db      	lsls	r3, r3, #3
 8006786:	4413      	add	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	440b      	add	r3, r1
 800678c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006794:	7bfa      	ldrb	r2, [r7, #15]
 8006796:	6879      	ldr	r1, [r7, #4]
 8006798:	4613      	mov	r3, r2
 800679a:	00db      	lsls	r3, r3, #3
 800679c:	4413      	add	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	440b      	add	r3, r1
 80067a2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80067aa:	7bfa      	ldrb	r2, [r7, #15]
 80067ac:	6879      	ldr	r1, [r7, #4]
 80067ae:	4613      	mov	r3, r2
 80067b0:	00db      	lsls	r3, r3, #3
 80067b2:	4413      	add	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	440b      	add	r3, r1
 80067b8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80067bc:	2200      	movs	r2, #0
 80067be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
 80067c2:	3301      	adds	r3, #1
 80067c4:	73fb      	strb	r3, [r7, #15]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	791b      	ldrb	r3, [r3, #4]
 80067ca:	7bfa      	ldrb	r2, [r7, #15]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d3b5      	bcc.n	800673c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6818      	ldr	r0, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	7c1a      	ldrb	r2, [r3, #16]
 80067d8:	f88d 2000 	strb.w	r2, [sp]
 80067dc:	3304      	adds	r3, #4
 80067de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80067e0:	f003 f84e 	bl	8009880 <USB_DevInit>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d005      	beq.n	80067f6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2202      	movs	r2, #2
 80067ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e00c      	b.n	8006810 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4618      	mov	r0, r3
 800680a:	f004 f898 	bl	800a93e <USB_DevDisconnect>

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800682c:	2b01      	cmp	r3, #1
 800682e:	d101      	bne.n	8006834 <HAL_PCD_Start+0x1c>
 8006830:	2302      	movs	r3, #2
 8006832:	e022      	b.n	800687a <HAL_PCD_Start+0x62>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	68db      	ldr	r3, [r3, #12]
 8006840:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006844:	2b00      	cmp	r3, #0
 8006846:	d009      	beq.n	800685c <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800684c:	2b01      	cmp	r3, #1
 800684e:	d105      	bne.n	800685c <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006854:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4618      	mov	r0, r3
 8006862:	f002 ff9f 	bl	80097a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4618      	mov	r0, r3
 800686c:	f004 f846 	bl	800a8fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006882:	b590      	push	{r4, r7, lr}
 8006884:	b08d      	sub	sp, #52	@ 0x34
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4618      	mov	r0, r3
 800689a:	f004 f904 	bl	800aaa6 <USB_GetMode>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	f040 848c 	bne.w	80071be <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4618      	mov	r0, r3
 80068ac:	f004 f868 	bl	800a980 <USB_ReadInterrupts>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 8482 	beq.w	80071bc <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	0a1b      	lsrs	r3, r3, #8
 80068c2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f004 f855 	bl	800a980 <USB_ReadInterrupts>
 80068d6:	4603      	mov	r3, r0
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d107      	bne.n	80068f0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	695a      	ldr	r2, [r3, #20]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f002 0202 	and.w	r2, r2, #2
 80068ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f004 f843 	bl	800a980 <USB_ReadInterrupts>
 80068fa:	4603      	mov	r3, r0
 80068fc:	f003 0310 	and.w	r3, r3, #16
 8006900:	2b10      	cmp	r3, #16
 8006902:	d161      	bne.n	80069c8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699a      	ldr	r2, [r3, #24]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f022 0210 	bic.w	r2, r2, #16
 8006912:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	6a1b      	ldr	r3, [r3, #32]
 8006918:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	f003 020f 	and.w	r2, r3, #15
 8006920:	4613      	mov	r3, r2
 8006922:	00db      	lsls	r3, r3, #3
 8006924:	4413      	add	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	4413      	add	r3, r2
 8006930:	3304      	adds	r3, #4
 8006932:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	0c5b      	lsrs	r3, r3, #17
 8006938:	f003 030f 	and.w	r3, r3, #15
 800693c:	2b02      	cmp	r3, #2
 800693e:	d124      	bne.n	800698a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006940:	69ba      	ldr	r2, [r7, #24]
 8006942:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006946:	4013      	ands	r3, r2
 8006948:	2b00      	cmp	r3, #0
 800694a:	d035      	beq.n	80069b8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	091b      	lsrs	r3, r3, #4
 8006954:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006956:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800695a:	b29b      	uxth	r3, r3
 800695c:	461a      	mov	r2, r3
 800695e:	6a38      	ldr	r0, [r7, #32]
 8006960:	f003 fe7a 	bl	800a658 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	68da      	ldr	r2, [r3, #12]
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	091b      	lsrs	r3, r3, #4
 800696c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006970:	441a      	add	r2, r3
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	695a      	ldr	r2, [r3, #20]
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	091b      	lsrs	r3, r3, #4
 800697e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006982:	441a      	add	r2, r3
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	615a      	str	r2, [r3, #20]
 8006988:	e016      	b.n	80069b8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	0c5b      	lsrs	r3, r3, #17
 800698e:	f003 030f 	and.w	r3, r3, #15
 8006992:	2b06      	cmp	r3, #6
 8006994:	d110      	bne.n	80069b8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800699c:	2208      	movs	r2, #8
 800699e:	4619      	mov	r1, r3
 80069a0:	6a38      	ldr	r0, [r7, #32]
 80069a2:	f003 fe59 	bl	800a658 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	695a      	ldr	r2, [r3, #20]
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	091b      	lsrs	r3, r3, #4
 80069ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80069b2:	441a      	add	r2, r3
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699a      	ldr	r2, [r3, #24]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f042 0210 	orr.w	r2, r2, #16
 80069c6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4618      	mov	r0, r3
 80069ce:	f003 ffd7 	bl	800a980 <USB_ReadInterrupts>
 80069d2:	4603      	mov	r3, r0
 80069d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80069d8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80069dc:	f040 80a7 	bne.w	8006b2e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80069e0:	2300      	movs	r3, #0
 80069e2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4618      	mov	r0, r3
 80069ea:	f003 ffdc 	bl	800a9a6 <USB_ReadDevAllOutEpInterrupt>
 80069ee:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80069f0:	e099      	b.n	8006b26 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80069f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f4:	f003 0301 	and.w	r3, r3, #1
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 808e 	beq.w	8006b1a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	4611      	mov	r1, r2
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f004 f800 	bl	800aa0e <USB_ReadDevOutEPInterrupt>
 8006a0e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00c      	beq.n	8006a34 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a26:	461a      	mov	r2, r3
 8006a28:	2301      	movs	r3, #1
 8006a2a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006a2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fea4 	bl	800777c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	f003 0308 	and.w	r3, r3, #8
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d00c      	beq.n	8006a58 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a40:	015a      	lsls	r2, r3, #5
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	2308      	movs	r3, #8
 8006a4e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006a50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 ff7a 	bl	800794c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f003 0310 	and.w	r3, r3, #16
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d008      	beq.n	8006a74 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a6e:	461a      	mov	r2, r3
 8006a70:	2310      	movs	r3, #16
 8006a72:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d030      	beq.n	8006ae0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a86:	2b80      	cmp	r3, #128	@ 0x80
 8006a88:	d109      	bne.n	8006a9e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	69fa      	ldr	r2, [r7, #28]
 8006a94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a98:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006a9c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	00db      	lsls	r3, r3, #3
 8006aa4:	4413      	add	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	4413      	add	r3, r2
 8006ab0:	3304      	adds	r3, #4
 8006ab2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	78db      	ldrb	r3, [r3, #3]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d108      	bne.n	8006ace <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f006 fb25 	bl	800d118 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ada:	461a      	mov	r2, r3
 8006adc:	2302      	movs	r3, #2
 8006ade:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	f003 0320 	and.w	r3, r3, #32
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d008      	beq.n	8006afc <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006af6:	461a      	mov	r2, r3
 8006af8:	2320      	movs	r3, #32
 8006afa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d009      	beq.n	8006b1a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b08:	015a      	lsls	r2, r3, #5
 8006b0a:	69fb      	ldr	r3, [r7, #28]
 8006b0c:	4413      	add	r3, r2
 8006b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b12:	461a      	mov	r2, r3
 8006b14:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006b18:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b22:	085b      	lsrs	r3, r3, #1
 8006b24:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f47f af62 	bne.w	80069f2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4618      	mov	r0, r3
 8006b34:	f003 ff24 	bl	800a980 <USB_ReadInterrupts>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b42:	f040 80db 	bne.w	8006cfc <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f003 ff45 	bl	800a9da <USB_ReadDevAllInEpInterrupt>
 8006b50:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006b56:	e0cd      	b.n	8006cf4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	f000 80c2 	beq.w	8006ce8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b6a:	b2d2      	uxtb	r2, r2
 8006b6c:	4611      	mov	r1, r2
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f003 ff6b 	bl	800aa4a <USB_ReadDevInEPInterrupt>
 8006b74:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	f003 0301 	and.w	r3, r3, #1
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d057      	beq.n	8006c30 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b82:	f003 030f 	and.w	r3, r3, #15
 8006b86:	2201      	movs	r2, #1
 8006b88:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	43db      	mvns	r3, r3
 8006b9a:	69f9      	ldr	r1, [r7, #28]
 8006b9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ba0:	4013      	ands	r3, r2
 8006ba2:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba6:	015a      	lsls	r2, r3, #5
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	4413      	add	r3, r2
 8006bac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	799b      	ldrb	r3, [r3, #6]
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d132      	bne.n	8006c24 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006bbe:	6879      	ldr	r1, [r7, #4]
 8006bc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	00db      	lsls	r3, r3, #3
 8006bc6:	4413      	add	r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	440b      	add	r3, r1
 8006bcc:	3320      	adds	r3, #32
 8006bce:	6819      	ldr	r1, [r3, #0]
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bd4:	4613      	mov	r3, r2
 8006bd6:	00db      	lsls	r3, r3, #3
 8006bd8:	4413      	add	r3, r2
 8006bda:	009b      	lsls	r3, r3, #2
 8006bdc:	4403      	add	r3, r0
 8006bde:	331c      	adds	r3, #28
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4419      	add	r1, r3
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006be8:	4613      	mov	r3, r2
 8006bea:	00db      	lsls	r3, r3, #3
 8006bec:	4413      	add	r3, r2
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	4403      	add	r3, r0
 8006bf2:	3320      	adds	r3, #32
 8006bf4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d113      	bne.n	8006c24 <HAL_PCD_IRQHandler+0x3a2>
 8006bfc:	6879      	ldr	r1, [r7, #4]
 8006bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c00:	4613      	mov	r3, r2
 8006c02:	00db      	lsls	r3, r3, #3
 8006c04:	4413      	add	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	440b      	add	r3, r1
 8006c0a:	3324      	adds	r3, #36	@ 0x24
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d108      	bne.n	8006c24 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6818      	ldr	r0, [r3, #0]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	2101      	movs	r1, #1
 8006c20:	f003 ff72 	bl	800ab08 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f006 f9ef 	bl	800d00e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	f003 0308 	and.w	r3, r3, #8
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d008      	beq.n	8006c4c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c46:	461a      	mov	r2, r3
 8006c48:	2308      	movs	r3, #8
 8006c4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	f003 0310 	and.w	r3, r3, #16
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d008      	beq.n	8006c68 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c62:	461a      	mov	r2, r3
 8006c64:	2310      	movs	r3, #16
 8006c66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d008      	beq.n	8006c84 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c74:	015a      	lsls	r2, r3, #5
 8006c76:	69fb      	ldr	r3, [r7, #28]
 8006c78:	4413      	add	r3, r2
 8006c7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c7e:	461a      	mov	r2, r3
 8006c80:	2340      	movs	r3, #64	@ 0x40
 8006c82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d023      	beq.n	8006cd6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006c8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006c90:	6a38      	ldr	r0, [r7, #32]
 8006c92:	f002 ff59 	bl	8009b48 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c98:	4613      	mov	r3, r2
 8006c9a:	00db      	lsls	r3, r3, #3
 8006c9c:	4413      	add	r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	3310      	adds	r3, #16
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	4413      	add	r3, r2
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	78db      	ldrb	r3, [r3, #3]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d108      	bne.n	8006cc4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f006 fa3c 	bl	800d13c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cc6:	015a      	lsls	r2, r3, #5
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	4413      	add	r3, r2
 8006ccc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006ce0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fcbd 	bl	8007662 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cea:	3301      	adds	r3, #1
 8006cec:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf0:	085b      	lsrs	r3, r3, #1
 8006cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	f47f af2e 	bne.w	8006b58 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4618      	mov	r0, r3
 8006d02:	f003 fe3d 	bl	800a980 <USB_ReadInterrupts>
 8006d06:	4603      	mov	r3, r0
 8006d08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d10:	d122      	bne.n	8006d58 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	69fa      	ldr	r2, [r7, #28]
 8006d1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d20:	f023 0301 	bic.w	r3, r3, #1
 8006d24:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	d108      	bne.n	8006d42 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006d38:	2100      	movs	r1, #0
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 fea4 	bl	8007a88 <HAL_PCDEx_LPM_Callback>
 8006d40:	e002      	b.n	8006d48 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f006 f9da 	bl	800d0fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	695a      	ldr	r2, [r3, #20]
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006d56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f003 fe0f 	bl	800a980 <USB_ReadInterrupts>
 8006d62:	4603      	mov	r3, r0
 8006d64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d6c:	d112      	bne.n	8006d94 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006d6e:	69fb      	ldr	r3, [r7, #28]
 8006d70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	f003 0301 	and.w	r3, r3, #1
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d102      	bne.n	8006d84 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f006 f996 	bl	800d0b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	695a      	ldr	r2, [r3, #20]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006d92:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f003 fdf1 	bl	800a980 <USB_ReadInterrupts>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006da4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006da8:	f040 80b7 	bne.w	8006f1a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	69fa      	ldr	r2, [r7, #28]
 8006db6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006dba:	f023 0301 	bic.w	r3, r3, #1
 8006dbe:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2110      	movs	r1, #16
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f002 febe 	bl	8009b48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006dcc:	2300      	movs	r3, #0
 8006dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dd0:	e046      	b.n	8006e60 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dde:	461a      	mov	r2, r3
 8006de0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006de4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006df6:	0151      	lsls	r1, r2, #5
 8006df8:	69fa      	ldr	r2, [r7, #28]
 8006dfa:	440a      	add	r2, r1
 8006dfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e00:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006e04:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e08:	015a      	lsls	r2, r3, #5
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e12:	461a      	mov	r2, r3
 8006e14:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006e18:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e1c:	015a      	lsls	r2, r3, #5
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	4413      	add	r3, r2
 8006e22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e2a:	0151      	lsls	r1, r2, #5
 8006e2c:	69fa      	ldr	r2, [r7, #28]
 8006e2e:	440a      	add	r2, r1
 8006e30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e34:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006e38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e3c:	015a      	lsls	r2, r3, #5
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e4a:	0151      	lsls	r1, r2, #5
 8006e4c:	69fa      	ldr	r2, [r7, #28]
 8006e4e:	440a      	add	r2, r1
 8006e50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e54:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006e58:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	791b      	ldrb	r3, [r3, #4]
 8006e64:	461a      	mov	r2, r3
 8006e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d3b2      	bcc.n	8006dd2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e72:	69db      	ldr	r3, [r3, #28]
 8006e74:	69fa      	ldr	r2, [r7, #28]
 8006e76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e7a:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006e7e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	7bdb      	ldrb	r3, [r3, #15]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d016      	beq.n	8006eb6 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006e92:	69fa      	ldr	r2, [r7, #28]
 8006e94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e98:	f043 030b 	orr.w	r3, r3, #11
 8006e9c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ea6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ea8:	69fa      	ldr	r2, [r7, #28]
 8006eaa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006eae:	f043 030b 	orr.w	r3, r3, #11
 8006eb2:	6453      	str	r3, [r2, #68]	@ 0x44
 8006eb4:	e015      	b.n	8006ee2 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	69fa      	ldr	r2, [r7, #28]
 8006ec0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ec4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006ec8:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8006ecc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	69fa      	ldr	r2, [r7, #28]
 8006ed8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006edc:	f043 030b 	orr.w	r3, r3, #11
 8006ee0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	69fa      	ldr	r2, [r7, #28]
 8006eec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ef0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006ef4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6818      	ldr	r0, [r3, #0]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006f04:	461a      	mov	r2, r3
 8006f06:	f003 fdff 	bl	800ab08 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	695a      	ldr	r2, [r3, #20]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006f18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f003 fd2e 	bl	800a980 <USB_ReadInterrupts>
 8006f24:	4603      	mov	r3, r0
 8006f26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f2e:	d123      	bne.n	8006f78 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f003 fdc4 	bl	800aac2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f002 fe7b 	bl	8009c3a <USB_GetDevSpeed>
 8006f44:	4603      	mov	r3, r0
 8006f46:	461a      	mov	r2, r3
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681c      	ldr	r4, [r3, #0]
 8006f50:	f001 fa0a 	bl	8008368 <HAL_RCC_GetHCLKFreq>
 8006f54:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006f5a:	461a      	mov	r2, r3
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	f002 fb7f 	bl	8009660 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f006 f87b 	bl	800d05e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	695a      	ldr	r2, [r3, #20]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006f76:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f003 fcff 	bl	800a980 <USB_ReadInterrupts>
 8006f82:	4603      	mov	r3, r0
 8006f84:	f003 0308 	and.w	r3, r3, #8
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	d10a      	bne.n	8006fa2 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f006 f858 	bl	800d042 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	695a      	ldr	r2, [r3, #20]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f002 0208 	and.w	r2, r2, #8
 8006fa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f003 fcea 	bl	800a980 <USB_ReadInterrupts>
 8006fac:	4603      	mov	r3, r0
 8006fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fb2:	2b80      	cmp	r3, #128	@ 0x80
 8006fb4:	d123      	bne.n	8006ffe <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006fbe:	6a3b      	ldr	r3, [r7, #32]
 8006fc0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fc6:	e014      	b.n	8006ff2 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006fc8:	6879      	ldr	r1, [r7, #4]
 8006fca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fcc:	4613      	mov	r3, r2
 8006fce:	00db      	lsls	r3, r3, #3
 8006fd0:	4413      	add	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	440b      	add	r3, r1
 8006fd6:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d105      	bne.n	8006fec <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fb0a 	bl	8007600 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fee:	3301      	adds	r3, #1
 8006ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	791b      	ldrb	r3, [r3, #4]
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d3e4      	bcc.n	8006fc8 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4618      	mov	r0, r3
 8007004:	f003 fcbc 	bl	800a980 <USB_ReadInterrupts>
 8007008:	4603      	mov	r3, r0
 800700a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800700e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007012:	d13c      	bne.n	800708e <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007014:	2301      	movs	r3, #1
 8007016:	627b      	str	r3, [r7, #36]	@ 0x24
 8007018:	e02b      	b.n	8007072 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800701a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701c:	015a      	lsls	r2, r3, #5
 800701e:	69fb      	ldr	r3, [r7, #28]
 8007020:	4413      	add	r3, r2
 8007022:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800702a:	6879      	ldr	r1, [r7, #4]
 800702c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800702e:	4613      	mov	r3, r2
 8007030:	00db      	lsls	r3, r3, #3
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	440b      	add	r3, r1
 8007038:	3318      	adds	r3, #24
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	2b01      	cmp	r3, #1
 800703e:	d115      	bne.n	800706c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007040:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007042:	2b00      	cmp	r3, #0
 8007044:	da12      	bge.n	800706c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800704a:	4613      	mov	r3, r2
 800704c:	00db      	lsls	r3, r3, #3
 800704e:	4413      	add	r3, r2
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	440b      	add	r3, r1
 8007054:	3317      	adds	r3, #23
 8007056:	2201      	movs	r2, #1
 8007058:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800705a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800705c:	b2db      	uxtb	r3, r3
 800705e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007062:	b2db      	uxtb	r3, r3
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 faca 	bl	8007600 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800706c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706e:	3301      	adds	r3, #1
 8007070:	627b      	str	r3, [r7, #36]	@ 0x24
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	791b      	ldrb	r3, [r3, #4]
 8007076:	461a      	mov	r2, r3
 8007078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707a:	4293      	cmp	r3, r2
 800707c:	d3cd      	bcc.n	800701a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	695a      	ldr	r2, [r3, #20]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800708c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4618      	mov	r0, r3
 8007094:	f003 fc74 	bl	800a980 <USB_ReadInterrupts>
 8007098:	4603      	mov	r3, r0
 800709a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800709e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070a2:	d156      	bne.n	8007152 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80070a4:	2301      	movs	r3, #1
 80070a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80070a8:	e045      	b.n	8007136 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80070aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ac:	015a      	lsls	r2, r3, #5
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	4413      	add	r3, r2
 80070b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80070ba:	6879      	ldr	r1, [r7, #4]
 80070bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070be:	4613      	mov	r3, r2
 80070c0:	00db      	lsls	r3, r3, #3
 80070c2:	4413      	add	r3, r2
 80070c4:	009b      	lsls	r3, r3, #2
 80070c6:	440b      	add	r3, r1
 80070c8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d12e      	bne.n	8007130 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80070d2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	da2b      	bge.n	8007130 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80070e4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d121      	bne.n	8007130 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80070ec:	6879      	ldr	r1, [r7, #4]
 80070ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070f0:	4613      	mov	r3, r2
 80070f2:	00db      	lsls	r3, r3, #3
 80070f4:	4413      	add	r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	440b      	add	r3, r1
 80070fa:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80070fe:	2201      	movs	r2, #1
 8007100:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007102:	6a3b      	ldr	r3, [r7, #32]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800710a:	6a3b      	ldr	r3, [r7, #32]
 800710c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800710e:	6a3b      	ldr	r3, [r7, #32]
 8007110:	695b      	ldr	r3, [r3, #20]
 8007112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007116:	2b00      	cmp	r3, #0
 8007118:	d10a      	bne.n	8007130 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	69fa      	ldr	r2, [r7, #28]
 8007124:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007128:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800712c:	6053      	str	r3, [r2, #4]
            break;
 800712e:	e008      	b.n	8007142 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007132:	3301      	adds	r3, #1
 8007134:	627b      	str	r3, [r7, #36]	@ 0x24
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	791b      	ldrb	r3, [r3, #4]
 800713a:	461a      	mov	r2, r3
 800713c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713e:	4293      	cmp	r3, r2
 8007140:	d3b3      	bcc.n	80070aa <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	695a      	ldr	r2, [r3, #20]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007150:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4618      	mov	r0, r3
 8007158:	f003 fc12 	bl	800a980 <USB_ReadInterrupts>
 800715c:	4603      	mov	r3, r0
 800715e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007166:	d10a      	bne.n	800717e <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f005 fff9 	bl	800d160 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	695a      	ldr	r2, [r3, #20]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800717c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4618      	mov	r0, r3
 8007184:	f003 fbfc 	bl	800a980 <USB_ReadInterrupts>
 8007188:	4603      	mov	r3, r0
 800718a:	f003 0304 	and.w	r3, r3, #4
 800718e:	2b04      	cmp	r3, #4
 8007190:	d115      	bne.n	80071be <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	f003 0304 	and.w	r3, r3, #4
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f005 ffe9 	bl	800d17c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6859      	ldr	r1, [r3, #4]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	69ba      	ldr	r2, [r7, #24]
 80071b6:	430a      	orrs	r2, r1
 80071b8:	605a      	str	r2, [r3, #4]
 80071ba:	e000      	b.n	80071be <HAL_PCD_IRQHandler+0x93c>
      return;
 80071bc:	bf00      	nop
    }
  }
}
 80071be:	3734      	adds	r7, #52	@ 0x34
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd90      	pop	{r4, r7, pc}

080071c4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	460b      	mov	r3, r1
 80071ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d101      	bne.n	80071de <HAL_PCD_SetAddress+0x1a>
 80071da:	2302      	movs	r3, #2
 80071dc:	e012      	b.n	8007204 <HAL_PCD_SetAddress+0x40>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	78fa      	ldrb	r2, [r7, #3]
 80071ea:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	78fa      	ldrb	r2, [r7, #3]
 80071f2:	4611      	mov	r1, r2
 80071f4:	4618      	mov	r0, r3
 80071f6:	f003 fb5b 	bl	800a8b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2200      	movs	r2, #0
 80071fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007202:	2300      	movs	r3, #0
}
 8007204:	4618      	mov	r0, r3
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	4608      	mov	r0, r1
 8007216:	4611      	mov	r1, r2
 8007218:	461a      	mov	r2, r3
 800721a:	4603      	mov	r3, r0
 800721c:	70fb      	strb	r3, [r7, #3]
 800721e:	460b      	mov	r3, r1
 8007220:	803b      	strh	r3, [r7, #0]
 8007222:	4613      	mov	r3, r2
 8007224:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007226:	2300      	movs	r3, #0
 8007228:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800722a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800722e:	2b00      	cmp	r3, #0
 8007230:	da0f      	bge.n	8007252 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007232:	78fb      	ldrb	r3, [r7, #3]
 8007234:	f003 020f 	and.w	r2, r3, #15
 8007238:	4613      	mov	r3, r2
 800723a:	00db      	lsls	r3, r3, #3
 800723c:	4413      	add	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	3310      	adds	r3, #16
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	4413      	add	r3, r2
 8007246:	3304      	adds	r3, #4
 8007248:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2201      	movs	r2, #1
 800724e:	705a      	strb	r2, [r3, #1]
 8007250:	e00f      	b.n	8007272 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007252:	78fb      	ldrb	r3, [r7, #3]
 8007254:	f003 020f 	and.w	r2, r3, #15
 8007258:	4613      	mov	r3, r2
 800725a:	00db      	lsls	r3, r3, #3
 800725c:	4413      	add	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	4413      	add	r3, r2
 8007268:	3304      	adds	r3, #4
 800726a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007272:	78fb      	ldrb	r3, [r7, #3]
 8007274:	f003 030f 	and.w	r3, r3, #15
 8007278:	b2da      	uxtb	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800727e:	883b      	ldrh	r3, [r7, #0]
 8007280:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	78ba      	ldrb	r2, [r7, #2]
 800728c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	785b      	ldrb	r3, [r3, #1]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d004      	beq.n	80072a0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	461a      	mov	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80072a0:	78bb      	ldrb	r3, [r7, #2]
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d102      	bne.n	80072ac <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2200      	movs	r2, #0
 80072aa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d101      	bne.n	80072ba <HAL_PCD_EP_Open+0xae>
 80072b6:	2302      	movs	r3, #2
 80072b8:	e00e      	b.n	80072d8 <HAL_PCD_EP_Open+0xcc>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2201      	movs	r2, #1
 80072be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	68f9      	ldr	r1, [r7, #12]
 80072c8:	4618      	mov	r0, r3
 80072ca:	f002 fcdb 	bl	8009c84 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80072d6:	7afb      	ldrb	r3, [r7, #11]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	460b      	mov	r3, r1
 80072ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80072ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	da0f      	bge.n	8007314 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072f4:	78fb      	ldrb	r3, [r7, #3]
 80072f6:	f003 020f 	and.w	r2, r3, #15
 80072fa:	4613      	mov	r3, r2
 80072fc:	00db      	lsls	r3, r3, #3
 80072fe:	4413      	add	r3, r2
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	3310      	adds	r3, #16
 8007304:	687a      	ldr	r2, [r7, #4]
 8007306:	4413      	add	r3, r2
 8007308:	3304      	adds	r3, #4
 800730a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2201      	movs	r2, #1
 8007310:	705a      	strb	r2, [r3, #1]
 8007312:	e00f      	b.n	8007334 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007314:	78fb      	ldrb	r3, [r7, #3]
 8007316:	f003 020f 	and.w	r2, r3, #15
 800731a:	4613      	mov	r3, r2
 800731c:	00db      	lsls	r3, r3, #3
 800731e:	4413      	add	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	4413      	add	r3, r2
 800732a:	3304      	adds	r3, #4
 800732c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007334:	78fb      	ldrb	r3, [r7, #3]
 8007336:	f003 030f 	and.w	r3, r3, #15
 800733a:	b2da      	uxtb	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007346:	2b01      	cmp	r3, #1
 8007348:	d101      	bne.n	800734e <HAL_PCD_EP_Close+0x6e>
 800734a:	2302      	movs	r3, #2
 800734c:	e00e      	b.n	800736c <HAL_PCD_EP_Close+0x8c>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68f9      	ldr	r1, [r7, #12]
 800735c:	4618      	mov	r0, r3
 800735e:	f002 fd19 	bl	8009d94 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3710      	adds	r7, #16
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}

08007374 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	607a      	str	r2, [r7, #4]
 800737e:	603b      	str	r3, [r7, #0]
 8007380:	460b      	mov	r3, r1
 8007382:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007384:	7afb      	ldrb	r3, [r7, #11]
 8007386:	f003 020f 	and.w	r2, r3, #15
 800738a:	4613      	mov	r3, r2
 800738c:	00db      	lsls	r3, r3, #3
 800738e:	4413      	add	r3, r2
 8007390:	009b      	lsls	r3, r3, #2
 8007392:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	4413      	add	r3, r2
 800739a:	3304      	adds	r3, #4
 800739c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80073a4:	697b      	ldr	r3, [r7, #20]
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	2200      	movs	r2, #0
 80073ae:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	2200      	movs	r2, #0
 80073b4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80073b6:	7afb      	ldrb	r3, [r7, #11]
 80073b8:	f003 030f 	and.w	r3, r3, #15
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	799b      	ldrb	r3, [r3, #6]
 80073c6:	2b01      	cmp	r3, #1
 80073c8:	d102      	bne.n	80073d0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	697b      	ldr	r3, [r7, #20]
 80073ce:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6818      	ldr	r0, [r3, #0]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	799b      	ldrb	r3, [r3, #6]
 80073d8:	461a      	mov	r2, r3
 80073da:	6979      	ldr	r1, [r7, #20]
 80073dc:	f002 fdb6 	bl	8009f4c <USB_EPStartXfer>

  return HAL_OK;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	3718      	adds	r7, #24
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}

080073ea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80073ea:	b480      	push	{r7}
 80073ec:	b083      	sub	sp, #12
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
 80073f2:	460b      	mov	r3, r1
 80073f4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80073f6:	78fb      	ldrb	r3, [r7, #3]
 80073f8:	f003 020f 	and.w	r2, r3, #15
 80073fc:	6879      	ldr	r1, [r7, #4]
 80073fe:	4613      	mov	r3, r2
 8007400:	00db      	lsls	r3, r3, #3
 8007402:	4413      	add	r3, r2
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	440b      	add	r3, r1
 8007408:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800740c:	681b      	ldr	r3, [r3, #0]
}
 800740e:	4618      	mov	r0, r3
 8007410:	370c      	adds	r7, #12
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b086      	sub	sp, #24
 800741e:	af00      	add	r7, sp, #0
 8007420:	60f8      	str	r0, [r7, #12]
 8007422:	607a      	str	r2, [r7, #4]
 8007424:	603b      	str	r3, [r7, #0]
 8007426:	460b      	mov	r3, r1
 8007428:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800742a:	7afb      	ldrb	r3, [r7, #11]
 800742c:	f003 020f 	and.w	r2, r3, #15
 8007430:	4613      	mov	r3, r2
 8007432:	00db      	lsls	r3, r3, #3
 8007434:	4413      	add	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	3310      	adds	r3, #16
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	4413      	add	r3, r2
 800743e:	3304      	adds	r3, #4
 8007440:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	2200      	movs	r2, #0
 8007452:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	2201      	movs	r2, #1
 8007458:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800745a:	7afb      	ldrb	r3, [r7, #11]
 800745c:	f003 030f 	and.w	r3, r3, #15
 8007460:	b2da      	uxtb	r2, r3
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	799b      	ldrb	r3, [r3, #6]
 800746a:	2b01      	cmp	r3, #1
 800746c:	d102      	bne.n	8007474 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6818      	ldr	r0, [r3, #0]
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	799b      	ldrb	r3, [r3, #6]
 800747c:	461a      	mov	r2, r3
 800747e:	6979      	ldr	r1, [r7, #20]
 8007480:	f002 fd64 	bl	8009f4c <USB_EPStartXfer>

  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3718      	adds	r7, #24
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b084      	sub	sp, #16
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
 8007496:	460b      	mov	r3, r1
 8007498:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800749a:	78fb      	ldrb	r3, [r7, #3]
 800749c:	f003 030f 	and.w	r3, r3, #15
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	7912      	ldrb	r2, [r2, #4]
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d901      	bls.n	80074ac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e04f      	b.n	800754c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80074ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	da0f      	bge.n	80074d4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074b4:	78fb      	ldrb	r3, [r7, #3]
 80074b6:	f003 020f 	and.w	r2, r3, #15
 80074ba:	4613      	mov	r3, r2
 80074bc:	00db      	lsls	r3, r3, #3
 80074be:	4413      	add	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	3310      	adds	r3, #16
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	4413      	add	r3, r2
 80074c8:	3304      	adds	r3, #4
 80074ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2201      	movs	r2, #1
 80074d0:	705a      	strb	r2, [r3, #1]
 80074d2:	e00d      	b.n	80074f0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80074d4:	78fa      	ldrb	r2, [r7, #3]
 80074d6:	4613      	mov	r3, r2
 80074d8:	00db      	lsls	r3, r3, #3
 80074da:	4413      	add	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80074e2:	687a      	ldr	r2, [r7, #4]
 80074e4:	4413      	add	r3, r2
 80074e6:	3304      	adds	r3, #4
 80074e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	2201      	movs	r2, #1
 80074f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80074f6:	78fb      	ldrb	r3, [r7, #3]
 80074f8:	f003 030f 	and.w	r3, r3, #15
 80074fc:	b2da      	uxtb	r2, r3
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007508:	2b01      	cmp	r3, #1
 800750a:	d101      	bne.n	8007510 <HAL_PCD_EP_SetStall+0x82>
 800750c:	2302      	movs	r3, #2
 800750e:	e01d      	b.n	800754c <HAL_PCD_EP_SetStall+0xbe>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	68f9      	ldr	r1, [r7, #12]
 800751e:	4618      	mov	r0, r3
 8007520:	f003 f8f2 	bl	800a708 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007524:	78fb      	ldrb	r3, [r7, #3]
 8007526:	f003 030f 	and.w	r3, r3, #15
 800752a:	2b00      	cmp	r3, #0
 800752c:	d109      	bne.n	8007542 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6818      	ldr	r0, [r3, #0]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	7999      	ldrb	r1, [r3, #6]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800753c:	461a      	mov	r2, r3
 800753e:	f003 fae3 	bl	800ab08 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800754a:	2300      	movs	r3, #0
}
 800754c:	4618      	mov	r0, r3
 800754e:	3710      	adds	r7, #16
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	460b      	mov	r3, r1
 800755e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007560:	78fb      	ldrb	r3, [r7, #3]
 8007562:	f003 030f 	and.w	r3, r3, #15
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	7912      	ldrb	r2, [r2, #4]
 800756a:	4293      	cmp	r3, r2
 800756c:	d901      	bls.n	8007572 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e042      	b.n	80075f8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007572:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007576:	2b00      	cmp	r3, #0
 8007578:	da0f      	bge.n	800759a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800757a:	78fb      	ldrb	r3, [r7, #3]
 800757c:	f003 020f 	and.w	r2, r3, #15
 8007580:	4613      	mov	r3, r2
 8007582:	00db      	lsls	r3, r3, #3
 8007584:	4413      	add	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	3310      	adds	r3, #16
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	4413      	add	r3, r2
 800758e:	3304      	adds	r3, #4
 8007590:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2201      	movs	r2, #1
 8007596:	705a      	strb	r2, [r3, #1]
 8007598:	e00f      	b.n	80075ba <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800759a:	78fb      	ldrb	r3, [r7, #3]
 800759c:	f003 020f 	and.w	r2, r3, #15
 80075a0:	4613      	mov	r3, r2
 80075a2:	00db      	lsls	r3, r3, #3
 80075a4:	4413      	add	r3, r2
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	4413      	add	r3, r2
 80075b0:	3304      	adds	r3, #4
 80075b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2200      	movs	r2, #0
 80075b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80075c0:	78fb      	ldrb	r3, [r7, #3]
 80075c2:	f003 030f 	and.w	r3, r3, #15
 80075c6:	b2da      	uxtb	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d101      	bne.n	80075da <HAL_PCD_EP_ClrStall+0x86>
 80075d6:	2302      	movs	r3, #2
 80075d8:	e00e      	b.n	80075f8 <HAL_PCD_EP_ClrStall+0xa4>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68f9      	ldr	r1, [r7, #12]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f003 f8fb 	bl	800a7e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	460b      	mov	r3, r1
 800760a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800760c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007610:	2b00      	cmp	r3, #0
 8007612:	da0c      	bge.n	800762e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007614:	78fb      	ldrb	r3, [r7, #3]
 8007616:	f003 020f 	and.w	r2, r3, #15
 800761a:	4613      	mov	r3, r2
 800761c:	00db      	lsls	r3, r3, #3
 800761e:	4413      	add	r3, r2
 8007620:	009b      	lsls	r3, r3, #2
 8007622:	3310      	adds	r3, #16
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	4413      	add	r3, r2
 8007628:	3304      	adds	r3, #4
 800762a:	60fb      	str	r3, [r7, #12]
 800762c:	e00c      	b.n	8007648 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800762e:	78fb      	ldrb	r3, [r7, #3]
 8007630:	f003 020f 	and.w	r2, r3, #15
 8007634:	4613      	mov	r3, r2
 8007636:	00db      	lsls	r3, r3, #3
 8007638:	4413      	add	r3, r2
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	4413      	add	r3, r2
 8007644:	3304      	adds	r3, #4
 8007646:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68f9      	ldr	r1, [r7, #12]
 800764e:	4618      	mov	r0, r3
 8007650:	f002 ff1a 	bl	800a488 <USB_EPStopXfer>
 8007654:	4603      	mov	r3, r0
 8007656:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007658:	7afb      	ldrb	r3, [r7, #11]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b08a      	sub	sp, #40	@ 0x28
 8007666:	af02      	add	r7, sp, #8
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007676:	683a      	ldr	r2, [r7, #0]
 8007678:	4613      	mov	r3, r2
 800767a:	00db      	lsls	r3, r3, #3
 800767c:	4413      	add	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	3310      	adds	r3, #16
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	4413      	add	r3, r2
 8007686:	3304      	adds	r3, #4
 8007688:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	695a      	ldr	r2, [r3, #20]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	691b      	ldr	r3, [r3, #16]
 8007692:	429a      	cmp	r2, r3
 8007694:	d901      	bls.n	800769a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007696:	2301      	movs	r3, #1
 8007698:	e06b      	b.n	8007772 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	691a      	ldr	r2, [r3, #16]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	695b      	ldr	r3, [r3, #20]
 80076a2:	1ad3      	subs	r3, r2, r3
 80076a4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	69fa      	ldr	r2, [r7, #28]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d902      	bls.n	80076b6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	3303      	adds	r3, #3
 80076ba:	089b      	lsrs	r3, r3, #2
 80076bc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80076be:	e02a      	b.n	8007716 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	691a      	ldr	r2, [r3, #16]
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	695b      	ldr	r3, [r3, #20]
 80076c8:	1ad3      	subs	r3, r2, r3
 80076ca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d902      	bls.n	80076dc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	3303      	adds	r3, #3
 80076e0:	089b      	lsrs	r3, r3, #2
 80076e2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	68d9      	ldr	r1, [r3, #12]
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	4603      	mov	r3, r0
 80076f8:	6978      	ldr	r0, [r7, #20]
 80076fa:	f002 ff6f 	bl	800a5dc <USB_WritePacket>

    ep->xfer_buff  += len;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	68da      	ldr	r2, [r3, #12]
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	441a      	add	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	695a      	ldr	r2, [r3, #20]
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	441a      	add	r2, r3
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	015a      	lsls	r2, r3, #5
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	4413      	add	r3, r2
 800771e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007726:	69ba      	ldr	r2, [r7, #24]
 8007728:	429a      	cmp	r2, r3
 800772a:	d809      	bhi.n	8007740 <PCD_WriteEmptyTxFifo+0xde>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	695a      	ldr	r2, [r3, #20]
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007734:	429a      	cmp	r2, r3
 8007736:	d203      	bcs.n	8007740 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1bf      	bne.n	80076c0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	691a      	ldr	r2, [r3, #16]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	695b      	ldr	r3, [r3, #20]
 8007748:	429a      	cmp	r2, r3
 800774a:	d811      	bhi.n	8007770 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	f003 030f 	and.w	r3, r3, #15
 8007752:	2201      	movs	r2, #1
 8007754:	fa02 f303 	lsl.w	r3, r2, r3
 8007758:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007760:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	43db      	mvns	r3, r3
 8007766:	6939      	ldr	r1, [r7, #16]
 8007768:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800776c:	4013      	ands	r3, r2
 800776e:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3720      	adds	r7, #32
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
	...

0800777c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b088      	sub	sp, #32
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	333c      	adds	r3, #60	@ 0x3c
 8007794:	3304      	adds	r3, #4
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	799b      	ldrb	r3, [r3, #6]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d17b      	bne.n	80078aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	f003 0308 	and.w	r3, r3, #8
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d015      	beq.n	80077e8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	4a61      	ldr	r2, [pc, #388]	@ (8007944 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	f240 80b9 	bls.w	8007938 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	f000 80b3 	beq.w	8007938 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077de:	461a      	mov	r2, r3
 80077e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077e4:	6093      	str	r3, [r2, #8]
 80077e6:	e0a7      	b.n	8007938 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	f003 0320 	and.w	r3, r3, #32
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d009      	beq.n	8007806 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	015a      	lsls	r2, r3, #5
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	4413      	add	r3, r2
 80077fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077fe:	461a      	mov	r2, r3
 8007800:	2320      	movs	r3, #32
 8007802:	6093      	str	r3, [r2, #8]
 8007804:	e098      	b.n	8007938 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800780c:	2b00      	cmp	r3, #0
 800780e:	f040 8093 	bne.w	8007938 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	4a4b      	ldr	r2, [pc, #300]	@ (8007944 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d90f      	bls.n	800783a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007820:	2b00      	cmp	r3, #0
 8007822:	d00a      	beq.n	800783a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	015a      	lsls	r2, r3, #5
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	4413      	add	r3, r2
 800782c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007830:	461a      	mov	r2, r3
 8007832:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007836:	6093      	str	r3, [r2, #8]
 8007838:	e07e      	b.n	8007938 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800783a:	683a      	ldr	r2, [r7, #0]
 800783c:	4613      	mov	r3, r2
 800783e:	00db      	lsls	r3, r3, #3
 8007840:	4413      	add	r3, r2
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	4413      	add	r3, r2
 800784c:	3304      	adds	r3, #4
 800784e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6a1a      	ldr	r2, [r3, #32]
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	0159      	lsls	r1, r3, #5
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	440b      	add	r3, r1
 800785c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007866:	1ad2      	subs	r2, r2, r3
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d114      	bne.n	800789c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d109      	bne.n	800788e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6818      	ldr	r0, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007884:	461a      	mov	r2, r3
 8007886:	2101      	movs	r1, #1
 8007888:	f003 f93e 	bl	800ab08 <USB_EP0_OutStart>
 800788c:	e006      	b.n	800789c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	68da      	ldr	r2, [r3, #12]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	441a      	add	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	4619      	mov	r1, r3
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f005 fb98 	bl	800cfd8 <HAL_PCD_DataOutStageCallback>
 80078a8:	e046      	b.n	8007938 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	4a26      	ldr	r2, [pc, #152]	@ (8007948 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d124      	bne.n	80078fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00a      	beq.n	80078d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078c8:	461a      	mov	r2, r3
 80078ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078ce:	6093      	str	r3, [r2, #8]
 80078d0:	e032      	b.n	8007938 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	f003 0320 	and.w	r3, r3, #32
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d008      	beq.n	80078ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078e8:	461a      	mov	r2, r3
 80078ea:	2320      	movs	r3, #32
 80078ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	4619      	mov	r1, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f005 fb6f 	bl	800cfd8 <HAL_PCD_DataOutStageCallback>
 80078fa:	e01d      	b.n	8007938 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d114      	bne.n	800792c <PCD_EP_OutXfrComplete_int+0x1b0>
 8007902:	6879      	ldr	r1, [r7, #4]
 8007904:	683a      	ldr	r2, [r7, #0]
 8007906:	4613      	mov	r3, r2
 8007908:	00db      	lsls	r3, r3, #3
 800790a:	4413      	add	r3, r2
 800790c:	009b      	lsls	r3, r3, #2
 800790e:	440b      	add	r3, r1
 8007910:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d108      	bne.n	800792c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6818      	ldr	r0, [r3, #0]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007924:	461a      	mov	r2, r3
 8007926:	2100      	movs	r1, #0
 8007928:	f003 f8ee 	bl	800ab08 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	b2db      	uxtb	r3, r3
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f005 fb50 	bl	800cfd8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3720      	adds	r7, #32
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	4f54300a 	.word	0x4f54300a
 8007948:	4f54310a 	.word	0x4f54310a

0800794c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b086      	sub	sp, #24
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	333c      	adds	r3, #60	@ 0x3c
 8007964:	3304      	adds	r3, #4
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	015a      	lsls	r2, r3, #5
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	4413      	add	r3, r2
 8007972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	4a15      	ldr	r2, [pc, #84]	@ (80079d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d90e      	bls.n	80079a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007988:	2b00      	cmp	r3, #0
 800798a:	d009      	beq.n	80079a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	4413      	add	r3, r2
 8007994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007998:	461a      	mov	r2, r3
 800799a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800799e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f005 fb07 	bl	800cfb4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	4a0a      	ldr	r2, [pc, #40]	@ (80079d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d90c      	bls.n	80079c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	799b      	ldrb	r3, [r3, #6]
 80079b2:	2b01      	cmp	r3, #1
 80079b4:	d108      	bne.n	80079c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6818      	ldr	r0, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80079c0:	461a      	mov	r2, r3
 80079c2:	2101      	movs	r1, #1
 80079c4:	f003 f8a0 	bl	800ab08 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80079c8:	2300      	movs	r3, #0
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3718      	adds	r7, #24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}
 80079d2:	bf00      	nop
 80079d4:	4f54300a 	.word	0x4f54300a

080079d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80079d8:	b480      	push	{r7}
 80079da:	b085      	sub	sp, #20
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	460b      	mov	r3, r1
 80079e2:	70fb      	strb	r3, [r7, #3]
 80079e4:	4613      	mov	r3, r2
 80079e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80079f0:	78fb      	ldrb	r3, [r7, #3]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d107      	bne.n	8007a06 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80079f6:	883b      	ldrh	r3, [r7, #0]
 80079f8:	0419      	lsls	r1, r3, #16
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68ba      	ldr	r2, [r7, #8]
 8007a00:	430a      	orrs	r2, r1
 8007a02:	629a      	str	r2, [r3, #40]	@ 0x28
 8007a04:	e028      	b.n	8007a58 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a0c:	0c1b      	lsrs	r3, r3, #16
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	4413      	add	r3, r2
 8007a12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007a14:	2300      	movs	r3, #0
 8007a16:	73fb      	strb	r3, [r7, #15]
 8007a18:	e00d      	b.n	8007a36 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
 8007a20:	3340      	adds	r3, #64	@ 0x40
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	0c1b      	lsrs	r3, r3, #16
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007a30:	7bfb      	ldrb	r3, [r7, #15]
 8007a32:	3301      	adds	r3, #1
 8007a34:	73fb      	strb	r3, [r7, #15]
 8007a36:	7bfa      	ldrb	r2, [r7, #15]
 8007a38:	78fb      	ldrb	r3, [r7, #3]
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d3ec      	bcc.n	8007a1a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007a40:	883b      	ldrh	r3, [r7, #0]
 8007a42:	0418      	lsls	r0, r3, #16
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6819      	ldr	r1, [r3, #0]
 8007a48:	78fb      	ldrb	r3, [r7, #3]
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	68ba      	ldr	r2, [r7, #8]
 8007a4e:	4302      	orrs	r2, r0
 8007a50:	3340      	adds	r3, #64	@ 0x40
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	440b      	add	r3, r1
 8007a56:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007a58:	2300      	movs	r3, #0
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3714      	adds	r7, #20
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007a66:	b480      	push	{r7}
 8007a68:	b083      	sub	sp, #12
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	460b      	mov	r3, r1
 8007a70:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	887a      	ldrh	r2, [r7, #2]
 8007a78:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	460b      	mov	r3, r1
 8007a92:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007a94:	bf00      	nop
 8007a96:	370c      	adds	r7, #12
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr

08007aa0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d101      	bne.n	8007ab2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	e267      	b.n	8007f82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d075      	beq.n	8007baa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007abe:	4b88      	ldr	r3, [pc, #544]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f003 030c 	and.w	r3, r3, #12
 8007ac6:	2b04      	cmp	r3, #4
 8007ac8:	d00c      	beq.n	8007ae4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007aca:	4b85      	ldr	r3, [pc, #532]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007ad2:	2b08      	cmp	r3, #8
 8007ad4:	d112      	bne.n	8007afc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ad6:	4b82      	ldr	r3, [pc, #520]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ade:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ae2:	d10b      	bne.n	8007afc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ae4:	4b7e      	ldr	r3, [pc, #504]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d05b      	beq.n	8007ba8 <HAL_RCC_OscConfig+0x108>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d157      	bne.n	8007ba8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007af8:	2301      	movs	r3, #1
 8007afa:	e242      	b.n	8007f82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b04:	d106      	bne.n	8007b14 <HAL_RCC_OscConfig+0x74>
 8007b06:	4b76      	ldr	r3, [pc, #472]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a75      	ldr	r2, [pc, #468]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b10:	6013      	str	r3, [r2, #0]
 8007b12:	e01d      	b.n	8007b50 <HAL_RCC_OscConfig+0xb0>
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685b      	ldr	r3, [r3, #4]
 8007b18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b1c:	d10c      	bne.n	8007b38 <HAL_RCC_OscConfig+0x98>
 8007b1e:	4b70      	ldr	r3, [pc, #448]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a6f      	ldr	r2, [pc, #444]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007b24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b28:	6013      	str	r3, [r2, #0]
 8007b2a:	4b6d      	ldr	r3, [pc, #436]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a6c      	ldr	r2, [pc, #432]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007b30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b34:	6013      	str	r3, [r2, #0]
 8007b36:	e00b      	b.n	8007b50 <HAL_RCC_OscConfig+0xb0>
 8007b38:	4b69      	ldr	r3, [pc, #420]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a68      	ldr	r2, [pc, #416]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007b3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b42:	6013      	str	r3, [r2, #0]
 8007b44:	4b66      	ldr	r3, [pc, #408]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a65      	ldr	r2, [pc, #404]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007b4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d013      	beq.n	8007b80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b58:	f7fa fd82 	bl	8002660 <HAL_GetTick>
 8007b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b5e:	e008      	b.n	8007b72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b60:	f7fa fd7e 	bl	8002660 <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	2b64      	cmp	r3, #100	@ 0x64
 8007b6c:	d901      	bls.n	8007b72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	e207      	b.n	8007f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b72:	4b5b      	ldr	r3, [pc, #364]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d0f0      	beq.n	8007b60 <HAL_RCC_OscConfig+0xc0>
 8007b7e:	e014      	b.n	8007baa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b80:	f7fa fd6e 	bl	8002660 <HAL_GetTick>
 8007b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b86:	e008      	b.n	8007b9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b88:	f7fa fd6a 	bl	8002660 <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	693b      	ldr	r3, [r7, #16]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	2b64      	cmp	r3, #100	@ 0x64
 8007b94:	d901      	bls.n	8007b9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b96:	2303      	movs	r3, #3
 8007b98:	e1f3      	b.n	8007f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b9a:	4b51      	ldr	r3, [pc, #324]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1f0      	bne.n	8007b88 <HAL_RCC_OscConfig+0xe8>
 8007ba6:	e000      	b.n	8007baa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0302 	and.w	r3, r3, #2
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d063      	beq.n	8007c7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007bb6:	4b4a      	ldr	r3, [pc, #296]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f003 030c 	and.w	r3, r3, #12
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00b      	beq.n	8007bda <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007bc2:	4b47      	ldr	r3, [pc, #284]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007bca:	2b08      	cmp	r3, #8
 8007bcc:	d11c      	bne.n	8007c08 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007bce:	4b44      	ldr	r3, [pc, #272]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d116      	bne.n	8007c08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bda:	4b41      	ldr	r3, [pc, #260]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	f003 0302 	and.w	r3, r3, #2
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d005      	beq.n	8007bf2 <HAL_RCC_OscConfig+0x152>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	68db      	ldr	r3, [r3, #12]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d001      	beq.n	8007bf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e1c7      	b.n	8007f82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bf2:	4b3b      	ldr	r3, [pc, #236]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	00db      	lsls	r3, r3, #3
 8007c00:	4937      	ldr	r1, [pc, #220]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007c02:	4313      	orrs	r3, r2
 8007c04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c06:	e03a      	b.n	8007c7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d020      	beq.n	8007c52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c10:	4b34      	ldr	r3, [pc, #208]	@ (8007ce4 <HAL_RCC_OscConfig+0x244>)
 8007c12:	2201      	movs	r2, #1
 8007c14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c16:	f7fa fd23 	bl	8002660 <HAL_GetTick>
 8007c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c1c:	e008      	b.n	8007c30 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c1e:	f7fa fd1f 	bl	8002660 <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d901      	bls.n	8007c30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e1a8      	b.n	8007f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c30:	4b2b      	ldr	r3, [pc, #172]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f003 0302 	and.w	r3, r3, #2
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d0f0      	beq.n	8007c1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c3c:	4b28      	ldr	r3, [pc, #160]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	00db      	lsls	r3, r3, #3
 8007c4a:	4925      	ldr	r1, [pc, #148]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	600b      	str	r3, [r1, #0]
 8007c50:	e015      	b.n	8007c7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c52:	4b24      	ldr	r3, [pc, #144]	@ (8007ce4 <HAL_RCC_OscConfig+0x244>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c58:	f7fa fd02 	bl	8002660 <HAL_GetTick>
 8007c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c5e:	e008      	b.n	8007c72 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c60:	f7fa fcfe 	bl	8002660 <HAL_GetTick>
 8007c64:	4602      	mov	r2, r0
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	1ad3      	subs	r3, r2, r3
 8007c6a:	2b02      	cmp	r3, #2
 8007c6c:	d901      	bls.n	8007c72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	e187      	b.n	8007f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c72:	4b1b      	ldr	r3, [pc, #108]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0302 	and.w	r3, r3, #2
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d1f0      	bne.n	8007c60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f003 0308 	and.w	r3, r3, #8
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d036      	beq.n	8007cf8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d016      	beq.n	8007cc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c92:	4b15      	ldr	r3, [pc, #84]	@ (8007ce8 <HAL_RCC_OscConfig+0x248>)
 8007c94:	2201      	movs	r2, #1
 8007c96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c98:	f7fa fce2 	bl	8002660 <HAL_GetTick>
 8007c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c9e:	e008      	b.n	8007cb2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ca0:	f7fa fcde 	bl	8002660 <HAL_GetTick>
 8007ca4:	4602      	mov	r2, r0
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d901      	bls.n	8007cb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007cae:	2303      	movs	r3, #3
 8007cb0:	e167      	b.n	8007f82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8007ce0 <HAL_RCC_OscConfig+0x240>)
 8007cb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cb6:	f003 0302 	and.w	r3, r3, #2
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d0f0      	beq.n	8007ca0 <HAL_RCC_OscConfig+0x200>
 8007cbe:	e01b      	b.n	8007cf8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007cc0:	4b09      	ldr	r3, [pc, #36]	@ (8007ce8 <HAL_RCC_OscConfig+0x248>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007cc6:	f7fa fccb 	bl	8002660 <HAL_GetTick>
 8007cca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ccc:	e00e      	b.n	8007cec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cce:	f7fa fcc7 	bl	8002660 <HAL_GetTick>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d907      	bls.n	8007cec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e150      	b.n	8007f82 <HAL_RCC_OscConfig+0x4e2>
 8007ce0:	40023800 	.word	0x40023800
 8007ce4:	42470000 	.word	0x42470000
 8007ce8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007cec:	4b88      	ldr	r3, [pc, #544]	@ (8007f10 <HAL_RCC_OscConfig+0x470>)
 8007cee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cf0:	f003 0302 	and.w	r3, r3, #2
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d1ea      	bne.n	8007cce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f003 0304 	and.w	r3, r3, #4
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 8097 	beq.w	8007e34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d06:	2300      	movs	r3, #0
 8007d08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d0a:	4b81      	ldr	r3, [pc, #516]	@ (8007f10 <HAL_RCC_OscConfig+0x470>)
 8007d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d10f      	bne.n	8007d36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d16:	2300      	movs	r3, #0
 8007d18:	60bb      	str	r3, [r7, #8]
 8007d1a:	4b7d      	ldr	r3, [pc, #500]	@ (8007f10 <HAL_RCC_OscConfig+0x470>)
 8007d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d1e:	4a7c      	ldr	r2, [pc, #496]	@ (8007f10 <HAL_RCC_OscConfig+0x470>)
 8007d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8007d26:	4b7a      	ldr	r3, [pc, #488]	@ (8007f10 <HAL_RCC_OscConfig+0x470>)
 8007d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d2e:	60bb      	str	r3, [r7, #8]
 8007d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d32:	2301      	movs	r3, #1
 8007d34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d36:	4b77      	ldr	r3, [pc, #476]	@ (8007f14 <HAL_RCC_OscConfig+0x474>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d118      	bne.n	8007d74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007d42:	4b74      	ldr	r3, [pc, #464]	@ (8007f14 <HAL_RCC_OscConfig+0x474>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a73      	ldr	r2, [pc, #460]	@ (8007f14 <HAL_RCC_OscConfig+0x474>)
 8007d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d4e:	f7fa fc87 	bl	8002660 <HAL_GetTick>
 8007d52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d54:	e008      	b.n	8007d68 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d56:	f7fa fc83 	bl	8002660 <HAL_GetTick>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d901      	bls.n	8007d68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007d64:	2303      	movs	r3, #3
 8007d66:	e10c      	b.n	8007f82 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007d68:	4b6a      	ldr	r3, [pc, #424]	@ (8007f14 <HAL_RCC_OscConfig+0x474>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d0f0      	beq.n	8007d56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d106      	bne.n	8007d8a <HAL_RCC_OscConfig+0x2ea>
 8007d7c:	4b64      	ldr	r3, [pc, #400]	@ (8007f10 <HAL_RCC_OscConfig+0x470>)
 8007d7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d80:	4a63      	ldr	r2, [pc, #396]	@ (8007f10 <HAL_RCC_OscConfig+0x470>)
 8007d82:	f043 0301 	orr.w	r3, r3, #1
 8007d86:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d88:	e01c      	b.n	8007dc4 <HAL_RCC_OscConfig+0x324>
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	2b05      	cmp	r3, #5
 8007d90:	d10c      	bne.n	8007dac <HAL_RCC_OscConfig+0x30c>
 8007d92:	4b5f      	ldr	r3, [pc, #380]	@ (8007f10 <HAL_RCC_OscConfig+0x470>)
 8007d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d96:	4a5e      	ldr	r2, [pc, #376]	@ (8007f10 <HAL_RCC_OscConfig+0x470>)
 8007d98:	f043 0304 	orr.w	r3, r3, #4
 8007d9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007d9e:	4b5c      	ldr	r3, [pc, #368]	@ (8007f10 <HAL_RCC_OscConfig+0x470>)
 8007da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007da2:	4a5b      	ldr	r2, [pc, #364]	@ (8007f10 <HAL_RCC_OscConfig+0x470>)
 8007da4:	f043 0301 	orr.w	r3, r3, #1
 8007da8:	6713      	str	r3, [r2, #112]	@ 0x70
 8007daa:	e00b      	b.n	8007dc4 <HAL_RCC_OscConfig+0x324>
 8007dac:	4b58      	ldr	r3, [pc, #352]	@ (8007f10 <HAL_RCC_OscConfig+0x470>)
 8007dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007db0:	4a57      	ldr	r2, [pc, #348]	@ (8007f10 <HAL_RCC_OscConfig+0x470>)
 8007db2:	f023 0301 	bic.w	r3, r3, #1
 8007db6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007db8:	4b55      	ldr	r3, [pc, #340]	@ (8007f10 <HAL_RCC_OscConfig+0x470>)
 8007dba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dbc:	4a54      	ldr	r2, [pc, #336]	@ (8007f10 <HAL_RCC_OscConfig+0x470>)
 8007dbe:	f023 0304 	bic.w	r3, r3, #4
 8007dc2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d015      	beq.n	8007df8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dcc:	f7fa fc48 	bl	8002660 <HAL_GetTick>
 8007dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dd2:	e00a      	b.n	8007dea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dd4:	f7fa fc44 	bl	8002660 <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d901      	bls.n	8007dea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e0cb      	b.n	8007f82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dea:	4b49      	ldr	r3, [pc, #292]	@ (8007f10 <HAL_RCC_OscConfig+0x470>)
 8007dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dee:	f003 0302 	and.w	r3, r3, #2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d0ee      	beq.n	8007dd4 <HAL_RCC_OscConfig+0x334>
 8007df6:	e014      	b.n	8007e22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007df8:	f7fa fc32 	bl	8002660 <HAL_GetTick>
 8007dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007dfe:	e00a      	b.n	8007e16 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e00:	f7fa fc2e 	bl	8002660 <HAL_GetTick>
 8007e04:	4602      	mov	r2, r0
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	1ad3      	subs	r3, r2, r3
 8007e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d901      	bls.n	8007e16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007e12:	2303      	movs	r3, #3
 8007e14:	e0b5      	b.n	8007f82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e16:	4b3e      	ldr	r3, [pc, #248]	@ (8007f10 <HAL_RCC_OscConfig+0x470>)
 8007e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1ee      	bne.n	8007e00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007e22:	7dfb      	ldrb	r3, [r7, #23]
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d105      	bne.n	8007e34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e28:	4b39      	ldr	r3, [pc, #228]	@ (8007f10 <HAL_RCC_OscConfig+0x470>)
 8007e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e2c:	4a38      	ldr	r2, [pc, #224]	@ (8007f10 <HAL_RCC_OscConfig+0x470>)
 8007e2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007e32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	699b      	ldr	r3, [r3, #24]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	f000 80a1 	beq.w	8007f80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e3e:	4b34      	ldr	r3, [pc, #208]	@ (8007f10 <HAL_RCC_OscConfig+0x470>)
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f003 030c 	and.w	r3, r3, #12
 8007e46:	2b08      	cmp	r3, #8
 8007e48:	d05c      	beq.n	8007f04 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	699b      	ldr	r3, [r3, #24]
 8007e4e:	2b02      	cmp	r3, #2
 8007e50:	d141      	bne.n	8007ed6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e52:	4b31      	ldr	r3, [pc, #196]	@ (8007f18 <HAL_RCC_OscConfig+0x478>)
 8007e54:	2200      	movs	r2, #0
 8007e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e58:	f7fa fc02 	bl	8002660 <HAL_GetTick>
 8007e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e5e:	e008      	b.n	8007e72 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e60:	f7fa fbfe 	bl	8002660 <HAL_GetTick>
 8007e64:	4602      	mov	r2, r0
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	1ad3      	subs	r3, r2, r3
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d901      	bls.n	8007e72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007e6e:	2303      	movs	r3, #3
 8007e70:	e087      	b.n	8007f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e72:	4b27      	ldr	r3, [pc, #156]	@ (8007f10 <HAL_RCC_OscConfig+0x470>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d1f0      	bne.n	8007e60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	69da      	ldr	r2, [r3, #28]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a1b      	ldr	r3, [r3, #32]
 8007e86:	431a      	orrs	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e8c:	019b      	lsls	r3, r3, #6
 8007e8e:	431a      	orrs	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e94:	085b      	lsrs	r3, r3, #1
 8007e96:	3b01      	subs	r3, #1
 8007e98:	041b      	lsls	r3, r3, #16
 8007e9a:	431a      	orrs	r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea0:	061b      	lsls	r3, r3, #24
 8007ea2:	491b      	ldr	r1, [pc, #108]	@ (8007f10 <HAL_RCC_OscConfig+0x470>)
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8007f18 <HAL_RCC_OscConfig+0x478>)
 8007eaa:	2201      	movs	r2, #1
 8007eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007eae:	f7fa fbd7 	bl	8002660 <HAL_GetTick>
 8007eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eb4:	e008      	b.n	8007ec8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007eb6:	f7fa fbd3 	bl	8002660 <HAL_GetTick>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	1ad3      	subs	r3, r2, r3
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	d901      	bls.n	8007ec8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007ec4:	2303      	movs	r3, #3
 8007ec6:	e05c      	b.n	8007f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ec8:	4b11      	ldr	r3, [pc, #68]	@ (8007f10 <HAL_RCC_OscConfig+0x470>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d0f0      	beq.n	8007eb6 <HAL_RCC_OscConfig+0x416>
 8007ed4:	e054      	b.n	8007f80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ed6:	4b10      	ldr	r3, [pc, #64]	@ (8007f18 <HAL_RCC_OscConfig+0x478>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007edc:	f7fa fbc0 	bl	8002660 <HAL_GetTick>
 8007ee0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ee2:	e008      	b.n	8007ef6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ee4:	f7fa fbbc 	bl	8002660 <HAL_GetTick>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d901      	bls.n	8007ef6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e045      	b.n	8007f82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ef6:	4b06      	ldr	r3, [pc, #24]	@ (8007f10 <HAL_RCC_OscConfig+0x470>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d1f0      	bne.n	8007ee4 <HAL_RCC_OscConfig+0x444>
 8007f02:	e03d      	b.n	8007f80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	699b      	ldr	r3, [r3, #24]
 8007f08:	2b01      	cmp	r3, #1
 8007f0a:	d107      	bne.n	8007f1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e038      	b.n	8007f82 <HAL_RCC_OscConfig+0x4e2>
 8007f10:	40023800 	.word	0x40023800
 8007f14:	40007000 	.word	0x40007000
 8007f18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007f1c:	4b1b      	ldr	r3, [pc, #108]	@ (8007f8c <HAL_RCC_OscConfig+0x4ec>)
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	699b      	ldr	r3, [r3, #24]
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d028      	beq.n	8007f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d121      	bne.n	8007f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f42:	429a      	cmp	r2, r3
 8007f44:	d11a      	bne.n	8007f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007f52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d111      	bne.n	8007f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f62:	085b      	lsrs	r3, r3, #1
 8007f64:	3b01      	subs	r3, #1
 8007f66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007f68:	429a      	cmp	r2, r3
 8007f6a:	d107      	bne.n	8007f7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d001      	beq.n	8007f80 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e000      	b.n	8007f82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3718      	adds	r7, #24
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	40023800 	.word	0x40023800

08007f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d101      	bne.n	8007fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e0cc      	b.n	800813e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007fa4:	4b68      	ldr	r3, [pc, #416]	@ (8008148 <HAL_RCC_ClockConfig+0x1b8>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 0307 	and.w	r3, r3, #7
 8007fac:	683a      	ldr	r2, [r7, #0]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d90c      	bls.n	8007fcc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fb2:	4b65      	ldr	r3, [pc, #404]	@ (8008148 <HAL_RCC_ClockConfig+0x1b8>)
 8007fb4:	683a      	ldr	r2, [r7, #0]
 8007fb6:	b2d2      	uxtb	r2, r2
 8007fb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fba:	4b63      	ldr	r3, [pc, #396]	@ (8008148 <HAL_RCC_ClockConfig+0x1b8>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 0307 	and.w	r3, r3, #7
 8007fc2:	683a      	ldr	r2, [r7, #0]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d001      	beq.n	8007fcc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e0b8      	b.n	800813e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0302 	and.w	r3, r3, #2
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d020      	beq.n	800801a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0304 	and.w	r3, r3, #4
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d005      	beq.n	8007ff0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007fe4:	4b59      	ldr	r3, [pc, #356]	@ (800814c <HAL_RCC_ClockConfig+0x1bc>)
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	4a58      	ldr	r2, [pc, #352]	@ (800814c <HAL_RCC_ClockConfig+0x1bc>)
 8007fea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007fee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 0308 	and.w	r3, r3, #8
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d005      	beq.n	8008008 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ffc:	4b53      	ldr	r3, [pc, #332]	@ (800814c <HAL_RCC_ClockConfig+0x1bc>)
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	4a52      	ldr	r2, [pc, #328]	@ (800814c <HAL_RCC_ClockConfig+0x1bc>)
 8008002:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008006:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008008:	4b50      	ldr	r3, [pc, #320]	@ (800814c <HAL_RCC_ClockConfig+0x1bc>)
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	494d      	ldr	r1, [pc, #308]	@ (800814c <HAL_RCC_ClockConfig+0x1bc>)
 8008016:	4313      	orrs	r3, r2
 8008018:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f003 0301 	and.w	r3, r3, #1
 8008022:	2b00      	cmp	r3, #0
 8008024:	d044      	beq.n	80080b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d107      	bne.n	800803e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800802e:	4b47      	ldr	r3, [pc, #284]	@ (800814c <HAL_RCC_ClockConfig+0x1bc>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d119      	bne.n	800806e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e07f      	b.n	800813e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	2b02      	cmp	r3, #2
 8008044:	d003      	beq.n	800804e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800804a:	2b03      	cmp	r3, #3
 800804c:	d107      	bne.n	800805e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800804e:	4b3f      	ldr	r3, [pc, #252]	@ (800814c <HAL_RCC_ClockConfig+0x1bc>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008056:	2b00      	cmp	r3, #0
 8008058:	d109      	bne.n	800806e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800805a:	2301      	movs	r3, #1
 800805c:	e06f      	b.n	800813e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800805e:	4b3b      	ldr	r3, [pc, #236]	@ (800814c <HAL_RCC_ClockConfig+0x1bc>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 0302 	and.w	r3, r3, #2
 8008066:	2b00      	cmp	r3, #0
 8008068:	d101      	bne.n	800806e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e067      	b.n	800813e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800806e:	4b37      	ldr	r3, [pc, #220]	@ (800814c <HAL_RCC_ClockConfig+0x1bc>)
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f023 0203 	bic.w	r2, r3, #3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	4934      	ldr	r1, [pc, #208]	@ (800814c <HAL_RCC_ClockConfig+0x1bc>)
 800807c:	4313      	orrs	r3, r2
 800807e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008080:	f7fa faee 	bl	8002660 <HAL_GetTick>
 8008084:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008086:	e00a      	b.n	800809e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008088:	f7fa faea 	bl	8002660 <HAL_GetTick>
 800808c:	4602      	mov	r2, r0
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008096:	4293      	cmp	r3, r2
 8008098:	d901      	bls.n	800809e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800809a:	2303      	movs	r3, #3
 800809c:	e04f      	b.n	800813e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800809e:	4b2b      	ldr	r3, [pc, #172]	@ (800814c <HAL_RCC_ClockConfig+0x1bc>)
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f003 020c 	and.w	r2, r3, #12
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d1eb      	bne.n	8008088 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80080b0:	4b25      	ldr	r3, [pc, #148]	@ (8008148 <HAL_RCC_ClockConfig+0x1b8>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 0307 	and.w	r3, r3, #7
 80080b8:	683a      	ldr	r2, [r7, #0]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d20c      	bcs.n	80080d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080be:	4b22      	ldr	r3, [pc, #136]	@ (8008148 <HAL_RCC_ClockConfig+0x1b8>)
 80080c0:	683a      	ldr	r2, [r7, #0]
 80080c2:	b2d2      	uxtb	r2, r2
 80080c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080c6:	4b20      	ldr	r3, [pc, #128]	@ (8008148 <HAL_RCC_ClockConfig+0x1b8>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0307 	and.w	r3, r3, #7
 80080ce:	683a      	ldr	r2, [r7, #0]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d001      	beq.n	80080d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	e032      	b.n	800813e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f003 0304 	and.w	r3, r3, #4
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d008      	beq.n	80080f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080e4:	4b19      	ldr	r3, [pc, #100]	@ (800814c <HAL_RCC_ClockConfig+0x1bc>)
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	4916      	ldr	r1, [pc, #88]	@ (800814c <HAL_RCC_ClockConfig+0x1bc>)
 80080f2:	4313      	orrs	r3, r2
 80080f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f003 0308 	and.w	r3, r3, #8
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d009      	beq.n	8008116 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008102:	4b12      	ldr	r3, [pc, #72]	@ (800814c <HAL_RCC_ClockConfig+0x1bc>)
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	00db      	lsls	r3, r3, #3
 8008110:	490e      	ldr	r1, [pc, #56]	@ (800814c <HAL_RCC_ClockConfig+0x1bc>)
 8008112:	4313      	orrs	r3, r2
 8008114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008116:	f000 f821 	bl	800815c <HAL_RCC_GetSysClockFreq>
 800811a:	4602      	mov	r2, r0
 800811c:	4b0b      	ldr	r3, [pc, #44]	@ (800814c <HAL_RCC_ClockConfig+0x1bc>)
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	091b      	lsrs	r3, r3, #4
 8008122:	f003 030f 	and.w	r3, r3, #15
 8008126:	490a      	ldr	r1, [pc, #40]	@ (8008150 <HAL_RCC_ClockConfig+0x1c0>)
 8008128:	5ccb      	ldrb	r3, [r1, r3]
 800812a:	fa22 f303 	lsr.w	r3, r2, r3
 800812e:	4a09      	ldr	r2, [pc, #36]	@ (8008154 <HAL_RCC_ClockConfig+0x1c4>)
 8008130:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008132:	4b09      	ldr	r3, [pc, #36]	@ (8008158 <HAL_RCC_ClockConfig+0x1c8>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4618      	mov	r0, r3
 8008138:	f7fa fa4e 	bl	80025d8 <HAL_InitTick>

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	3710      	adds	r7, #16
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	40023c00 	.word	0x40023c00
 800814c:	40023800 	.word	0x40023800
 8008150:	08010320 	.word	0x08010320
 8008154:	2000000c 	.word	0x2000000c
 8008158:	20000010 	.word	0x20000010

0800815c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800815c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008160:	b094      	sub	sp, #80	@ 0x50
 8008162:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008164:	2300      	movs	r3, #0
 8008166:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8008168:	2300      	movs	r3, #0
 800816a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8008170:	2300      	movs	r3, #0
 8008172:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008174:	4b79      	ldr	r3, [pc, #484]	@ (800835c <HAL_RCC_GetSysClockFreq+0x200>)
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	f003 030c 	and.w	r3, r3, #12
 800817c:	2b08      	cmp	r3, #8
 800817e:	d00d      	beq.n	800819c <HAL_RCC_GetSysClockFreq+0x40>
 8008180:	2b08      	cmp	r3, #8
 8008182:	f200 80e1 	bhi.w	8008348 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008186:	2b00      	cmp	r3, #0
 8008188:	d002      	beq.n	8008190 <HAL_RCC_GetSysClockFreq+0x34>
 800818a:	2b04      	cmp	r3, #4
 800818c:	d003      	beq.n	8008196 <HAL_RCC_GetSysClockFreq+0x3a>
 800818e:	e0db      	b.n	8008348 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008190:	4b73      	ldr	r3, [pc, #460]	@ (8008360 <HAL_RCC_GetSysClockFreq+0x204>)
 8008192:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008194:	e0db      	b.n	800834e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008196:	4b73      	ldr	r3, [pc, #460]	@ (8008364 <HAL_RCC_GetSysClockFreq+0x208>)
 8008198:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800819a:	e0d8      	b.n	800834e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800819c:	4b6f      	ldr	r3, [pc, #444]	@ (800835c <HAL_RCC_GetSysClockFreq+0x200>)
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80081a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80081a6:	4b6d      	ldr	r3, [pc, #436]	@ (800835c <HAL_RCC_GetSysClockFreq+0x200>)
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d063      	beq.n	800827a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081b2:	4b6a      	ldr	r3, [pc, #424]	@ (800835c <HAL_RCC_GetSysClockFreq+0x200>)
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	099b      	lsrs	r3, r3, #6
 80081b8:	2200      	movs	r2, #0
 80081ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80081bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80081be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80081c6:	2300      	movs	r3, #0
 80081c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80081ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80081ce:	4622      	mov	r2, r4
 80081d0:	462b      	mov	r3, r5
 80081d2:	f04f 0000 	mov.w	r0, #0
 80081d6:	f04f 0100 	mov.w	r1, #0
 80081da:	0159      	lsls	r1, r3, #5
 80081dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081e0:	0150      	lsls	r0, r2, #5
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	4621      	mov	r1, r4
 80081e8:	1a51      	subs	r1, r2, r1
 80081ea:	6139      	str	r1, [r7, #16]
 80081ec:	4629      	mov	r1, r5
 80081ee:	eb63 0301 	sbc.w	r3, r3, r1
 80081f2:	617b      	str	r3, [r7, #20]
 80081f4:	f04f 0200 	mov.w	r2, #0
 80081f8:	f04f 0300 	mov.w	r3, #0
 80081fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008200:	4659      	mov	r1, fp
 8008202:	018b      	lsls	r3, r1, #6
 8008204:	4651      	mov	r1, sl
 8008206:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800820a:	4651      	mov	r1, sl
 800820c:	018a      	lsls	r2, r1, #6
 800820e:	4651      	mov	r1, sl
 8008210:	ebb2 0801 	subs.w	r8, r2, r1
 8008214:	4659      	mov	r1, fp
 8008216:	eb63 0901 	sbc.w	r9, r3, r1
 800821a:	f04f 0200 	mov.w	r2, #0
 800821e:	f04f 0300 	mov.w	r3, #0
 8008222:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008226:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800822a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800822e:	4690      	mov	r8, r2
 8008230:	4699      	mov	r9, r3
 8008232:	4623      	mov	r3, r4
 8008234:	eb18 0303 	adds.w	r3, r8, r3
 8008238:	60bb      	str	r3, [r7, #8]
 800823a:	462b      	mov	r3, r5
 800823c:	eb49 0303 	adc.w	r3, r9, r3
 8008240:	60fb      	str	r3, [r7, #12]
 8008242:	f04f 0200 	mov.w	r2, #0
 8008246:	f04f 0300 	mov.w	r3, #0
 800824a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800824e:	4629      	mov	r1, r5
 8008250:	024b      	lsls	r3, r1, #9
 8008252:	4621      	mov	r1, r4
 8008254:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008258:	4621      	mov	r1, r4
 800825a:	024a      	lsls	r2, r1, #9
 800825c:	4610      	mov	r0, r2
 800825e:	4619      	mov	r1, r3
 8008260:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008262:	2200      	movs	r2, #0
 8008264:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008266:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008268:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800826c:	f7f8 fcbc 	bl	8000be8 <__aeabi_uldivmod>
 8008270:	4602      	mov	r2, r0
 8008272:	460b      	mov	r3, r1
 8008274:	4613      	mov	r3, r2
 8008276:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008278:	e058      	b.n	800832c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800827a:	4b38      	ldr	r3, [pc, #224]	@ (800835c <HAL_RCC_GetSysClockFreq+0x200>)
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	099b      	lsrs	r3, r3, #6
 8008280:	2200      	movs	r2, #0
 8008282:	4618      	mov	r0, r3
 8008284:	4611      	mov	r1, r2
 8008286:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800828a:	623b      	str	r3, [r7, #32]
 800828c:	2300      	movs	r3, #0
 800828e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008290:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008294:	4642      	mov	r2, r8
 8008296:	464b      	mov	r3, r9
 8008298:	f04f 0000 	mov.w	r0, #0
 800829c:	f04f 0100 	mov.w	r1, #0
 80082a0:	0159      	lsls	r1, r3, #5
 80082a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80082a6:	0150      	lsls	r0, r2, #5
 80082a8:	4602      	mov	r2, r0
 80082aa:	460b      	mov	r3, r1
 80082ac:	4641      	mov	r1, r8
 80082ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80082b2:	4649      	mov	r1, r9
 80082b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80082b8:	f04f 0200 	mov.w	r2, #0
 80082bc:	f04f 0300 	mov.w	r3, #0
 80082c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80082c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80082c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80082cc:	ebb2 040a 	subs.w	r4, r2, sl
 80082d0:	eb63 050b 	sbc.w	r5, r3, fp
 80082d4:	f04f 0200 	mov.w	r2, #0
 80082d8:	f04f 0300 	mov.w	r3, #0
 80082dc:	00eb      	lsls	r3, r5, #3
 80082de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80082e2:	00e2      	lsls	r2, r4, #3
 80082e4:	4614      	mov	r4, r2
 80082e6:	461d      	mov	r5, r3
 80082e8:	4643      	mov	r3, r8
 80082ea:	18e3      	adds	r3, r4, r3
 80082ec:	603b      	str	r3, [r7, #0]
 80082ee:	464b      	mov	r3, r9
 80082f0:	eb45 0303 	adc.w	r3, r5, r3
 80082f4:	607b      	str	r3, [r7, #4]
 80082f6:	f04f 0200 	mov.w	r2, #0
 80082fa:	f04f 0300 	mov.w	r3, #0
 80082fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008302:	4629      	mov	r1, r5
 8008304:	028b      	lsls	r3, r1, #10
 8008306:	4621      	mov	r1, r4
 8008308:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800830c:	4621      	mov	r1, r4
 800830e:	028a      	lsls	r2, r1, #10
 8008310:	4610      	mov	r0, r2
 8008312:	4619      	mov	r1, r3
 8008314:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008316:	2200      	movs	r2, #0
 8008318:	61bb      	str	r3, [r7, #24]
 800831a:	61fa      	str	r2, [r7, #28]
 800831c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008320:	f7f8 fc62 	bl	8000be8 <__aeabi_uldivmod>
 8008324:	4602      	mov	r2, r0
 8008326:	460b      	mov	r3, r1
 8008328:	4613      	mov	r3, r2
 800832a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800832c:	4b0b      	ldr	r3, [pc, #44]	@ (800835c <HAL_RCC_GetSysClockFreq+0x200>)
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	0c1b      	lsrs	r3, r3, #16
 8008332:	f003 0303 	and.w	r3, r3, #3
 8008336:	3301      	adds	r3, #1
 8008338:	005b      	lsls	r3, r3, #1
 800833a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800833c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800833e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008340:	fbb2 f3f3 	udiv	r3, r2, r3
 8008344:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008346:	e002      	b.n	800834e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008348:	4b05      	ldr	r3, [pc, #20]	@ (8008360 <HAL_RCC_GetSysClockFreq+0x204>)
 800834a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800834c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800834e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8008350:	4618      	mov	r0, r3
 8008352:	3750      	adds	r7, #80	@ 0x50
 8008354:	46bd      	mov	sp, r7
 8008356:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800835a:	bf00      	nop
 800835c:	40023800 	.word	0x40023800
 8008360:	00f42400 	.word	0x00f42400
 8008364:	007a1200 	.word	0x007a1200

08008368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008368:	b480      	push	{r7}
 800836a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800836c:	4b03      	ldr	r3, [pc, #12]	@ (800837c <HAL_RCC_GetHCLKFreq+0x14>)
 800836e:	681b      	ldr	r3, [r3, #0]
}
 8008370:	4618      	mov	r0, r3
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	2000000c 	.word	0x2000000c

08008380 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008384:	f7ff fff0 	bl	8008368 <HAL_RCC_GetHCLKFreq>
 8008388:	4602      	mov	r2, r0
 800838a:	4b05      	ldr	r3, [pc, #20]	@ (80083a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	0a9b      	lsrs	r3, r3, #10
 8008390:	f003 0307 	and.w	r3, r3, #7
 8008394:	4903      	ldr	r1, [pc, #12]	@ (80083a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008396:	5ccb      	ldrb	r3, [r1, r3]
 8008398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800839c:	4618      	mov	r0, r3
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	40023800 	.word	0x40023800
 80083a4:	08010330 	.word	0x08010330

080083a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80083ac:	f7ff ffdc 	bl	8008368 <HAL_RCC_GetHCLKFreq>
 80083b0:	4602      	mov	r2, r0
 80083b2:	4b05      	ldr	r3, [pc, #20]	@ (80083c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	0b5b      	lsrs	r3, r3, #13
 80083b8:	f003 0307 	and.w	r3, r3, #7
 80083bc:	4903      	ldr	r1, [pc, #12]	@ (80083cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80083be:	5ccb      	ldrb	r3, [r1, r3]
 80083c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	40023800 	.word	0x40023800
 80083cc:	08010330 	.word	0x08010330

080083d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d101      	bne.n	80083e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e041      	b.n	8008466 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083e8:	b2db      	uxtb	r3, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d106      	bne.n	80083fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f7f9 fe3a 	bl	8002070 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2202      	movs	r2, #2
 8008400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	3304      	adds	r3, #4
 800840c:	4619      	mov	r1, r3
 800840e:	4610      	mov	r0, r2
 8008410:	f000 f9b8 	bl	8008784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2201      	movs	r2, #1
 8008428:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2201      	movs	r2, #1
 8008430:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2201      	movs	r2, #1
 8008450:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2201      	movs	r2, #1
 8008460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
	...

08008470 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b084      	sub	sp, #16
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d109      	bne.n	8008494 <HAL_TIM_PWM_Start+0x24>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b01      	cmp	r3, #1
 800848a:	bf14      	ite	ne
 800848c:	2301      	movne	r3, #1
 800848e:	2300      	moveq	r3, #0
 8008490:	b2db      	uxtb	r3, r3
 8008492:	e022      	b.n	80084da <HAL_TIM_PWM_Start+0x6a>
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	2b04      	cmp	r3, #4
 8008498:	d109      	bne.n	80084ae <HAL_TIM_PWM_Start+0x3e>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	bf14      	ite	ne
 80084a6:	2301      	movne	r3, #1
 80084a8:	2300      	moveq	r3, #0
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	e015      	b.n	80084da <HAL_TIM_PWM_Start+0x6a>
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	2b08      	cmp	r3, #8
 80084b2:	d109      	bne.n	80084c8 <HAL_TIM_PWM_Start+0x58>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	2b01      	cmp	r3, #1
 80084be:	bf14      	ite	ne
 80084c0:	2301      	movne	r3, #1
 80084c2:	2300      	moveq	r3, #0
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	e008      	b.n	80084da <HAL_TIM_PWM_Start+0x6a>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	bf14      	ite	ne
 80084d4:	2301      	movne	r3, #1
 80084d6:	2300      	moveq	r3, #0
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e07c      	b.n	80085dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d104      	bne.n	80084f2 <HAL_TIM_PWM_Start+0x82>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2202      	movs	r2, #2
 80084ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80084f0:	e013      	b.n	800851a <HAL_TIM_PWM_Start+0xaa>
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	2b04      	cmp	r3, #4
 80084f6:	d104      	bne.n	8008502 <HAL_TIM_PWM_Start+0x92>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2202      	movs	r2, #2
 80084fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008500:	e00b      	b.n	800851a <HAL_TIM_PWM_Start+0xaa>
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	2b08      	cmp	r3, #8
 8008506:	d104      	bne.n	8008512 <HAL_TIM_PWM_Start+0xa2>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2202      	movs	r2, #2
 800850c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008510:	e003      	b.n	800851a <HAL_TIM_PWM_Start+0xaa>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2202      	movs	r2, #2
 8008516:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2201      	movs	r2, #1
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	4618      	mov	r0, r3
 8008524:	f000 fb8a 	bl	8008c3c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a2d      	ldr	r2, [pc, #180]	@ (80085e4 <HAL_TIM_PWM_Start+0x174>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d004      	beq.n	800853c <HAL_TIM_PWM_Start+0xcc>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a2c      	ldr	r2, [pc, #176]	@ (80085e8 <HAL_TIM_PWM_Start+0x178>)
 8008538:	4293      	cmp	r3, r2
 800853a:	d101      	bne.n	8008540 <HAL_TIM_PWM_Start+0xd0>
 800853c:	2301      	movs	r3, #1
 800853e:	e000      	b.n	8008542 <HAL_TIM_PWM_Start+0xd2>
 8008540:	2300      	movs	r3, #0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d007      	beq.n	8008556 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008554:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a22      	ldr	r2, [pc, #136]	@ (80085e4 <HAL_TIM_PWM_Start+0x174>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d022      	beq.n	80085a6 <HAL_TIM_PWM_Start+0x136>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008568:	d01d      	beq.n	80085a6 <HAL_TIM_PWM_Start+0x136>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a1f      	ldr	r2, [pc, #124]	@ (80085ec <HAL_TIM_PWM_Start+0x17c>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d018      	beq.n	80085a6 <HAL_TIM_PWM_Start+0x136>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a1d      	ldr	r2, [pc, #116]	@ (80085f0 <HAL_TIM_PWM_Start+0x180>)
 800857a:	4293      	cmp	r3, r2
 800857c:	d013      	beq.n	80085a6 <HAL_TIM_PWM_Start+0x136>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a1c      	ldr	r2, [pc, #112]	@ (80085f4 <HAL_TIM_PWM_Start+0x184>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d00e      	beq.n	80085a6 <HAL_TIM_PWM_Start+0x136>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a16      	ldr	r2, [pc, #88]	@ (80085e8 <HAL_TIM_PWM_Start+0x178>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d009      	beq.n	80085a6 <HAL_TIM_PWM_Start+0x136>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a18      	ldr	r2, [pc, #96]	@ (80085f8 <HAL_TIM_PWM_Start+0x188>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d004      	beq.n	80085a6 <HAL_TIM_PWM_Start+0x136>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a16      	ldr	r2, [pc, #88]	@ (80085fc <HAL_TIM_PWM_Start+0x18c>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d111      	bne.n	80085ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	f003 0307 	and.w	r3, r3, #7
 80085b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2b06      	cmp	r3, #6
 80085b6:	d010      	beq.n	80085da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f042 0201 	orr.w	r2, r2, #1
 80085c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085c8:	e007      	b.n	80085da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f042 0201 	orr.w	r2, r2, #1
 80085d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80085da:	2300      	movs	r3, #0
}
 80085dc:	4618      	mov	r0, r3
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	40010000 	.word	0x40010000
 80085e8:	40010400 	.word	0x40010400
 80085ec:	40000400 	.word	0x40000400
 80085f0:	40000800 	.word	0x40000800
 80085f4:	40000c00 	.word	0x40000c00
 80085f8:	40014000 	.word	0x40014000
 80085fc:	40001800 	.word	0x40001800

08008600 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b086      	sub	sp, #24
 8008604:	af00      	add	r7, sp, #0
 8008606:	60f8      	str	r0, [r7, #12]
 8008608:	60b9      	str	r1, [r7, #8]
 800860a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008616:	2b01      	cmp	r3, #1
 8008618:	d101      	bne.n	800861e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800861a:	2302      	movs	r3, #2
 800861c:	e0ae      	b.n	800877c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b0c      	cmp	r3, #12
 800862a:	f200 809f 	bhi.w	800876c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800862e:	a201      	add	r2, pc, #4	@ (adr r2, 8008634 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008634:	08008669 	.word	0x08008669
 8008638:	0800876d 	.word	0x0800876d
 800863c:	0800876d 	.word	0x0800876d
 8008640:	0800876d 	.word	0x0800876d
 8008644:	080086a9 	.word	0x080086a9
 8008648:	0800876d 	.word	0x0800876d
 800864c:	0800876d 	.word	0x0800876d
 8008650:	0800876d 	.word	0x0800876d
 8008654:	080086eb 	.word	0x080086eb
 8008658:	0800876d 	.word	0x0800876d
 800865c:	0800876d 	.word	0x0800876d
 8008660:	0800876d 	.word	0x0800876d
 8008664:	0800872b 	.word	0x0800872b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68b9      	ldr	r1, [r7, #8]
 800866e:	4618      	mov	r0, r3
 8008670:	f000 f934 	bl	80088dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	699a      	ldr	r2, [r3, #24]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f042 0208 	orr.w	r2, r2, #8
 8008682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	699a      	ldr	r2, [r3, #24]
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f022 0204 	bic.w	r2, r2, #4
 8008692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6999      	ldr	r1, [r3, #24]
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	691a      	ldr	r2, [r3, #16]
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	430a      	orrs	r2, r1
 80086a4:	619a      	str	r2, [r3, #24]
      break;
 80086a6:	e064      	b.n	8008772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68b9      	ldr	r1, [r7, #8]
 80086ae:	4618      	mov	r0, r3
 80086b0:	f000 f984 	bl	80089bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	699a      	ldr	r2, [r3, #24]
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80086c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	699a      	ldr	r2, [r3, #24]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80086d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6999      	ldr	r1, [r3, #24]
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	021a      	lsls	r2, r3, #8
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	430a      	orrs	r2, r1
 80086e6:	619a      	str	r2, [r3, #24]
      break;
 80086e8:	e043      	b.n	8008772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68b9      	ldr	r1, [r7, #8]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 f9d9 	bl	8008aa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	69da      	ldr	r2, [r3, #28]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f042 0208 	orr.w	r2, r2, #8
 8008704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	69da      	ldr	r2, [r3, #28]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f022 0204 	bic.w	r2, r2, #4
 8008714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	69d9      	ldr	r1, [r3, #28]
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	691a      	ldr	r2, [r3, #16]
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	430a      	orrs	r2, r1
 8008726:	61da      	str	r2, [r3, #28]
      break;
 8008728:	e023      	b.n	8008772 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68b9      	ldr	r1, [r7, #8]
 8008730:	4618      	mov	r0, r3
 8008732:	f000 fa2d 	bl	8008b90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	69da      	ldr	r2, [r3, #28]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	69da      	ldr	r2, [r3, #28]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	69d9      	ldr	r1, [r3, #28]
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	691b      	ldr	r3, [r3, #16]
 8008760:	021a      	lsls	r2, r3, #8
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	430a      	orrs	r2, r1
 8008768:	61da      	str	r2, [r3, #28]
      break;
 800876a:	e002      	b.n	8008772 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800876c:	2301      	movs	r3, #1
 800876e:	75fb      	strb	r3, [r7, #23]
      break;
 8008770:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2200      	movs	r2, #0
 8008776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800877a:	7dfb      	ldrb	r3, [r7, #23]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3718      	adds	r7, #24
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
 800878c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	4a46      	ldr	r2, [pc, #280]	@ (80088b0 <TIM_Base_SetConfig+0x12c>)
 8008798:	4293      	cmp	r3, r2
 800879a:	d013      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087a2:	d00f      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a43      	ldr	r2, [pc, #268]	@ (80088b4 <TIM_Base_SetConfig+0x130>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d00b      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a42      	ldr	r2, [pc, #264]	@ (80088b8 <TIM_Base_SetConfig+0x134>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d007      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	4a41      	ldr	r2, [pc, #260]	@ (80088bc <TIM_Base_SetConfig+0x138>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d003      	beq.n	80087c4 <TIM_Base_SetConfig+0x40>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	4a40      	ldr	r2, [pc, #256]	@ (80088c0 <TIM_Base_SetConfig+0x13c>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d108      	bne.n	80087d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	68fa      	ldr	r2, [r7, #12]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a35      	ldr	r2, [pc, #212]	@ (80088b0 <TIM_Base_SetConfig+0x12c>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d02b      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087e4:	d027      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	4a32      	ldr	r2, [pc, #200]	@ (80088b4 <TIM_Base_SetConfig+0x130>)
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d023      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	4a31      	ldr	r2, [pc, #196]	@ (80088b8 <TIM_Base_SetConfig+0x134>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d01f      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	4a30      	ldr	r2, [pc, #192]	@ (80088bc <TIM_Base_SetConfig+0x138>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d01b      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	4a2f      	ldr	r2, [pc, #188]	@ (80088c0 <TIM_Base_SetConfig+0x13c>)
 8008802:	4293      	cmp	r3, r2
 8008804:	d017      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a2e      	ldr	r2, [pc, #184]	@ (80088c4 <TIM_Base_SetConfig+0x140>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d013      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	4a2d      	ldr	r2, [pc, #180]	@ (80088c8 <TIM_Base_SetConfig+0x144>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d00f      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a2c      	ldr	r2, [pc, #176]	@ (80088cc <TIM_Base_SetConfig+0x148>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d00b      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a2b      	ldr	r2, [pc, #172]	@ (80088d0 <TIM_Base_SetConfig+0x14c>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d007      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a2a      	ldr	r2, [pc, #168]	@ (80088d4 <TIM_Base_SetConfig+0x150>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d003      	beq.n	8008836 <TIM_Base_SetConfig+0xb2>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a29      	ldr	r2, [pc, #164]	@ (80088d8 <TIM_Base_SetConfig+0x154>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d108      	bne.n	8008848 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800883c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	4313      	orrs	r3, r2
 8008846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	695b      	ldr	r3, [r3, #20]
 8008852:	4313      	orrs	r3, r2
 8008854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	689a      	ldr	r2, [r3, #8]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	681a      	ldr	r2, [r3, #0]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a10      	ldr	r2, [pc, #64]	@ (80088b0 <TIM_Base_SetConfig+0x12c>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d003      	beq.n	800887c <TIM_Base_SetConfig+0xf8>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a12      	ldr	r2, [pc, #72]	@ (80088c0 <TIM_Base_SetConfig+0x13c>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d103      	bne.n	8008884 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	691a      	ldr	r2, [r3, #16]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	f003 0301 	and.w	r3, r3, #1
 8008892:	2b01      	cmp	r3, #1
 8008894:	d105      	bne.n	80088a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	691b      	ldr	r3, [r3, #16]
 800889a:	f023 0201 	bic.w	r2, r3, #1
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	611a      	str	r2, [r3, #16]
  }
}
 80088a2:	bf00      	nop
 80088a4:	3714      	adds	r7, #20
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	40010000 	.word	0x40010000
 80088b4:	40000400 	.word	0x40000400
 80088b8:	40000800 	.word	0x40000800
 80088bc:	40000c00 	.word	0x40000c00
 80088c0:	40010400 	.word	0x40010400
 80088c4:	40014000 	.word	0x40014000
 80088c8:	40014400 	.word	0x40014400
 80088cc:	40014800 	.word	0x40014800
 80088d0:	40001800 	.word	0x40001800
 80088d4:	40001c00 	.word	0x40001c00
 80088d8:	40002000 	.word	0x40002000

080088dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088dc:	b480      	push	{r7}
 80088de:	b087      	sub	sp, #28
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6a1b      	ldr	r3, [r3, #32]
 80088ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a1b      	ldr	r3, [r3, #32]
 80088f0:	f023 0201 	bic.w	r2, r3, #1
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	699b      	ldr	r3, [r3, #24]
 8008902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800890a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f023 0303 	bic.w	r3, r3, #3
 8008912:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	4313      	orrs	r3, r2
 800891c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	f023 0302 	bic.w	r3, r3, #2
 8008924:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	697a      	ldr	r2, [r7, #20]
 800892c:	4313      	orrs	r3, r2
 800892e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	4a20      	ldr	r2, [pc, #128]	@ (80089b4 <TIM_OC1_SetConfig+0xd8>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d003      	beq.n	8008940 <TIM_OC1_SetConfig+0x64>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	4a1f      	ldr	r2, [pc, #124]	@ (80089b8 <TIM_OC1_SetConfig+0xdc>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d10c      	bne.n	800895a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	f023 0308 	bic.w	r3, r3, #8
 8008946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	68db      	ldr	r3, [r3, #12]
 800894c:	697a      	ldr	r2, [r7, #20]
 800894e:	4313      	orrs	r3, r2
 8008950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	f023 0304 	bic.w	r3, r3, #4
 8008958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a15      	ldr	r2, [pc, #84]	@ (80089b4 <TIM_OC1_SetConfig+0xd8>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d003      	beq.n	800896a <TIM_OC1_SetConfig+0x8e>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a14      	ldr	r2, [pc, #80]	@ (80089b8 <TIM_OC1_SetConfig+0xdc>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d111      	bne.n	800898e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800896a:	693b      	ldr	r3, [r7, #16]
 800896c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008970:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008978:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	693a      	ldr	r2, [r7, #16]
 8008980:	4313      	orrs	r3, r2
 8008982:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	693a      	ldr	r2, [r7, #16]
 800898a:	4313      	orrs	r3, r2
 800898c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	693a      	ldr	r2, [r7, #16]
 8008992:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	68fa      	ldr	r2, [r7, #12]
 8008998:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	685a      	ldr	r2, [r3, #4]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	621a      	str	r2, [r3, #32]
}
 80089a8:	bf00      	nop
 80089aa:	371c      	adds	r7, #28
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr
 80089b4:	40010000 	.word	0x40010000
 80089b8:	40010400 	.word	0x40010400

080089bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089bc:	b480      	push	{r7}
 80089be:	b087      	sub	sp, #28
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a1b      	ldr	r3, [r3, #32]
 80089ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6a1b      	ldr	r3, [r3, #32]
 80089d0:	f023 0210 	bic.w	r2, r3, #16
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80089f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	021b      	lsls	r3, r3, #8
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	f023 0320 	bic.w	r3, r3, #32
 8008a06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	011b      	lsls	r3, r3, #4
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a22      	ldr	r2, [pc, #136]	@ (8008aa0 <TIM_OC2_SetConfig+0xe4>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d003      	beq.n	8008a24 <TIM_OC2_SetConfig+0x68>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a21      	ldr	r2, [pc, #132]	@ (8008aa4 <TIM_OC2_SetConfig+0xe8>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d10d      	bne.n	8008a40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	011b      	lsls	r3, r3, #4
 8008a32:	697a      	ldr	r2, [r7, #20]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a17      	ldr	r2, [pc, #92]	@ (8008aa0 <TIM_OC2_SetConfig+0xe4>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d003      	beq.n	8008a50 <TIM_OC2_SetConfig+0x94>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a16      	ldr	r2, [pc, #88]	@ (8008aa4 <TIM_OC2_SetConfig+0xe8>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d113      	bne.n	8008a78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	695b      	ldr	r3, [r3, #20]
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	693a      	ldr	r2, [r7, #16]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	699b      	ldr	r3, [r3, #24]
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	693a      	ldr	r2, [r7, #16]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	68fa      	ldr	r2, [r7, #12]
 8008a82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	685a      	ldr	r2, [r3, #4]
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	621a      	str	r2, [r3, #32]
}
 8008a92:	bf00      	nop
 8008a94:	371c      	adds	r7, #28
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	40010000 	.word	0x40010000
 8008aa4:	40010400 	.word	0x40010400

08008aa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b087      	sub	sp, #28
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6a1b      	ldr	r3, [r3, #32]
 8008ab6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a1b      	ldr	r3, [r3, #32]
 8008abc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	685b      	ldr	r3, [r3, #4]
 8008ac8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	69db      	ldr	r3, [r3, #28]
 8008ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008ad6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f023 0303 	bic.w	r3, r3, #3
 8008ade:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008af0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	021b      	lsls	r3, r3, #8
 8008af8:	697a      	ldr	r2, [r7, #20]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a21      	ldr	r2, [pc, #132]	@ (8008b88 <TIM_OC3_SetConfig+0xe0>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d003      	beq.n	8008b0e <TIM_OC3_SetConfig+0x66>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a20      	ldr	r2, [pc, #128]	@ (8008b8c <TIM_OC3_SetConfig+0xe4>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d10d      	bne.n	8008b2a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	021b      	lsls	r3, r3, #8
 8008b1c:	697a      	ldr	r2, [r7, #20]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a16      	ldr	r2, [pc, #88]	@ (8008b88 <TIM_OC3_SetConfig+0xe0>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d003      	beq.n	8008b3a <TIM_OC3_SetConfig+0x92>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a15      	ldr	r2, [pc, #84]	@ (8008b8c <TIM_OC3_SetConfig+0xe4>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d113      	bne.n	8008b62 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	695b      	ldr	r3, [r3, #20]
 8008b4e:	011b      	lsls	r3, r3, #4
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	011b      	lsls	r3, r3, #4
 8008b5c:	693a      	ldr	r2, [r7, #16]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	693a      	ldr	r2, [r7, #16]
 8008b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	685a      	ldr	r2, [r3, #4]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	697a      	ldr	r2, [r7, #20]
 8008b7a:	621a      	str	r2, [r3, #32]
}
 8008b7c:	bf00      	nop
 8008b7e:	371c      	adds	r7, #28
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr
 8008b88:	40010000 	.word	0x40010000
 8008b8c:	40010400 	.word	0x40010400

08008b90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b087      	sub	sp, #28
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	6a1b      	ldr	r3, [r3, #32]
 8008b9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6a1b      	ldr	r3, [r3, #32]
 8008ba4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	69db      	ldr	r3, [r3, #28]
 8008bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	021b      	lsls	r3, r3, #8
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008bda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	031b      	lsls	r3, r3, #12
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	4313      	orrs	r3, r2
 8008be6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a12      	ldr	r2, [pc, #72]	@ (8008c34 <TIM_OC4_SetConfig+0xa4>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d003      	beq.n	8008bf8 <TIM_OC4_SetConfig+0x68>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a11      	ldr	r2, [pc, #68]	@ (8008c38 <TIM_OC4_SetConfig+0xa8>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d109      	bne.n	8008c0c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008bfe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	695b      	ldr	r3, [r3, #20]
 8008c04:	019b      	lsls	r3, r3, #6
 8008c06:	697a      	ldr	r2, [r7, #20]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	697a      	ldr	r2, [r7, #20]
 8008c10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	68fa      	ldr	r2, [r7, #12]
 8008c16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	685a      	ldr	r2, [r3, #4]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	693a      	ldr	r2, [r7, #16]
 8008c24:	621a      	str	r2, [r3, #32]
}
 8008c26:	bf00      	nop
 8008c28:	371c      	adds	r7, #28
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c30:	4770      	bx	lr
 8008c32:	bf00      	nop
 8008c34:	40010000 	.word	0x40010000
 8008c38:	40010400 	.word	0x40010400

08008c3c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b087      	sub	sp, #28
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	60f8      	str	r0, [r7, #12]
 8008c44:	60b9      	str	r1, [r7, #8]
 8008c46:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	f003 031f 	and.w	r3, r3, #31
 8008c4e:	2201      	movs	r2, #1
 8008c50:	fa02 f303 	lsl.w	r3, r2, r3
 8008c54:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	6a1a      	ldr	r2, [r3, #32]
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	43db      	mvns	r3, r3
 8008c5e:	401a      	ands	r2, r3
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6a1a      	ldr	r2, [r3, #32]
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	f003 031f 	and.w	r3, r3, #31
 8008c6e:	6879      	ldr	r1, [r7, #4]
 8008c70:	fa01 f303 	lsl.w	r3, r1, r3
 8008c74:	431a      	orrs	r2, r3
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	621a      	str	r2, [r3, #32]
}
 8008c7a:	bf00      	nop
 8008c7c:	371c      	adds	r7, #28
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr
	...

08008c88 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b085      	sub	sp, #20
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d101      	bne.n	8008ca0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	e05a      	b.n	8008d56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2202      	movs	r2, #2
 8008cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008cc6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	68fa      	ldr	r2, [r7, #12]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68fa      	ldr	r2, [r7, #12]
 8008cd8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4a21      	ldr	r2, [pc, #132]	@ (8008d64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d022      	beq.n	8008d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008cec:	d01d      	beq.n	8008d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4a1d      	ldr	r2, [pc, #116]	@ (8008d68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008cf4:	4293      	cmp	r3, r2
 8008cf6:	d018      	beq.n	8008d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8008d6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008cfe:	4293      	cmp	r3, r2
 8008d00:	d013      	beq.n	8008d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a1a      	ldr	r2, [pc, #104]	@ (8008d70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d00e      	beq.n	8008d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4a18      	ldr	r2, [pc, #96]	@ (8008d74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008d12:	4293      	cmp	r3, r2
 8008d14:	d009      	beq.n	8008d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4a17      	ldr	r2, [pc, #92]	@ (8008d78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d004      	beq.n	8008d2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a15      	ldr	r2, [pc, #84]	@ (8008d7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008d26:	4293      	cmp	r3, r2
 8008d28:	d10c      	bne.n	8008d44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	68ba      	ldr	r2, [r7, #8]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	68ba      	ldr	r2, [r7, #8]
 8008d42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3714      	adds	r7, #20
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	40010000 	.word	0x40010000
 8008d68:	40000400 	.word	0x40000400
 8008d6c:	40000800 	.word	0x40000800
 8008d70:	40000c00 	.word	0x40000c00
 8008d74:	40010400 	.word	0x40010400
 8008d78:	40014000 	.word	0x40014000
 8008d7c:	40001800 	.word	0x40001800

08008d80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b082      	sub	sp, #8
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d101      	bne.n	8008d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e042      	b.n	8008e18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d98:	b2db      	uxtb	r3, r3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d106      	bne.n	8008dac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f7f9 fa34 	bl	8002214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2224      	movs	r2, #36	@ 0x24
 8008db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68da      	ldr	r2, [r3, #12]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008dc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 f973 	bl	80090b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	691a      	ldr	r2, [r3, #16]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008dd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	695a      	ldr	r2, [r3, #20]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008de8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	68da      	ldr	r2, [r3, #12]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008df8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2220      	movs	r2, #32
 8008e04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2220      	movs	r2, #32
 8008e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2200      	movs	r2, #0
 8008e14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3708      	adds	r7, #8
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}

08008e20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b08a      	sub	sp, #40	@ 0x28
 8008e24:	af02      	add	r7, sp, #8
 8008e26:	60f8      	str	r0, [r7, #12]
 8008e28:	60b9      	str	r1, [r7, #8]
 8008e2a:	603b      	str	r3, [r7, #0]
 8008e2c:	4613      	mov	r3, r2
 8008e2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008e30:	2300      	movs	r3, #0
 8008e32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	2b20      	cmp	r3, #32
 8008e3e:	d175      	bne.n	8008f2c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d002      	beq.n	8008e4c <HAL_UART_Transmit+0x2c>
 8008e46:	88fb      	ldrh	r3, [r7, #6]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d101      	bne.n	8008e50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e06e      	b.n	8008f2e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2200      	movs	r2, #0
 8008e54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2221      	movs	r2, #33	@ 0x21
 8008e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e5e:	f7f9 fbff 	bl	8002660 <HAL_GetTick>
 8008e62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	88fa      	ldrh	r2, [r7, #6]
 8008e68:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	88fa      	ldrh	r2, [r7, #6]
 8008e6e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e78:	d108      	bne.n	8008e8c <HAL_UART_Transmit+0x6c>
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d104      	bne.n	8008e8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008e82:	2300      	movs	r3, #0
 8008e84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	61bb      	str	r3, [r7, #24]
 8008e8a:	e003      	b.n	8008e94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008e8c:	68bb      	ldr	r3, [r7, #8]
 8008e8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008e90:	2300      	movs	r3, #0
 8008e92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008e94:	e02e      	b.n	8008ef4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	9300      	str	r3, [sp, #0]
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	2180      	movs	r1, #128	@ 0x80
 8008ea0:	68f8      	ldr	r0, [r7, #12]
 8008ea2:	f000 f848 	bl	8008f36 <UART_WaitOnFlagUntilTimeout>
 8008ea6:	4603      	mov	r3, r0
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d005      	beq.n	8008eb8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2220      	movs	r2, #32
 8008eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008eb4:	2303      	movs	r3, #3
 8008eb6:	e03a      	b.n	8008f2e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d10b      	bne.n	8008ed6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	881b      	ldrh	r3, [r3, #0]
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ecc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	3302      	adds	r3, #2
 8008ed2:	61bb      	str	r3, [r7, #24]
 8008ed4:	e007      	b.n	8008ee6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	781a      	ldrb	r2, [r3, #0]
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	3b01      	subs	r3, #1
 8008eee:	b29a      	uxth	r2, r3
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1cb      	bne.n	8008e96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	9300      	str	r3, [sp, #0]
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	2200      	movs	r2, #0
 8008f06:	2140      	movs	r1, #64	@ 0x40
 8008f08:	68f8      	ldr	r0, [r7, #12]
 8008f0a:	f000 f814 	bl	8008f36 <UART_WaitOnFlagUntilTimeout>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d005      	beq.n	8008f20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2220      	movs	r2, #32
 8008f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	e006      	b.n	8008f2e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2220      	movs	r2, #32
 8008f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	e000      	b.n	8008f2e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008f2c:	2302      	movs	r3, #2
  }
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3720      	adds	r7, #32
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}

08008f36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008f36:	b580      	push	{r7, lr}
 8008f38:	b086      	sub	sp, #24
 8008f3a:	af00      	add	r7, sp, #0
 8008f3c:	60f8      	str	r0, [r7, #12]
 8008f3e:	60b9      	str	r1, [r7, #8]
 8008f40:	603b      	str	r3, [r7, #0]
 8008f42:	4613      	mov	r3, r2
 8008f44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f46:	e03b      	b.n	8008fc0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f48:	6a3b      	ldr	r3, [r7, #32]
 8008f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f4e:	d037      	beq.n	8008fc0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f50:	f7f9 fb86 	bl	8002660 <HAL_GetTick>
 8008f54:	4602      	mov	r2, r0
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	1ad3      	subs	r3, r2, r3
 8008f5a:	6a3a      	ldr	r2, [r7, #32]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d302      	bcc.n	8008f66 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f60:	6a3b      	ldr	r3, [r7, #32]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d101      	bne.n	8008f6a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008f66:	2303      	movs	r3, #3
 8008f68:	e03a      	b.n	8008fe0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68db      	ldr	r3, [r3, #12]
 8008f70:	f003 0304 	and.w	r3, r3, #4
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d023      	beq.n	8008fc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	2b80      	cmp	r3, #128	@ 0x80
 8008f7c:	d020      	beq.n	8008fc0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2b40      	cmp	r3, #64	@ 0x40
 8008f82:	d01d      	beq.n	8008fc0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 0308 	and.w	r3, r3, #8
 8008f8e:	2b08      	cmp	r3, #8
 8008f90:	d116      	bne.n	8008fc0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008f92:	2300      	movs	r3, #0
 8008f94:	617b      	str	r3, [r7, #20]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	617b      	str	r3, [r7, #20]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	685b      	ldr	r3, [r3, #4]
 8008fa4:	617b      	str	r3, [r7, #20]
 8008fa6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008fa8:	68f8      	ldr	r0, [r7, #12]
 8008faa:	f000 f81d 	bl	8008fe8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2208      	movs	r2, #8
 8008fb2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e00f      	b.n	8008fe0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	4013      	ands	r3, r2
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	bf0c      	ite	eq
 8008fd0:	2301      	moveq	r3, #1
 8008fd2:	2300      	movne	r3, #0
 8008fd4:	b2db      	uxtb	r3, r3
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	79fb      	ldrb	r3, [r7, #7]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d0b4      	beq.n	8008f48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3718      	adds	r7, #24
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b095      	sub	sp, #84	@ 0x54
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	330c      	adds	r3, #12
 8008ff6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ffa:	e853 3f00 	ldrex	r3, [r3]
 8008ffe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009002:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009006:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	330c      	adds	r3, #12
 800900e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009010:	643a      	str	r2, [r7, #64]	@ 0x40
 8009012:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009014:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009016:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009018:	e841 2300 	strex	r3, r2, [r1]
 800901c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800901e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009020:	2b00      	cmp	r3, #0
 8009022:	d1e5      	bne.n	8008ff0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	3314      	adds	r3, #20
 800902a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800902c:	6a3b      	ldr	r3, [r7, #32]
 800902e:	e853 3f00 	ldrex	r3, [r3]
 8009032:	61fb      	str	r3, [r7, #28]
   return(result);
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	f023 0301 	bic.w	r3, r3, #1
 800903a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	3314      	adds	r3, #20
 8009042:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009044:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009046:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009048:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800904a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800904c:	e841 2300 	strex	r3, r2, [r1]
 8009050:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009054:	2b00      	cmp	r3, #0
 8009056:	d1e5      	bne.n	8009024 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800905c:	2b01      	cmp	r3, #1
 800905e:	d119      	bne.n	8009094 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	330c      	adds	r3, #12
 8009066:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	e853 3f00 	ldrex	r3, [r3]
 800906e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	f023 0310 	bic.w	r3, r3, #16
 8009076:	647b      	str	r3, [r7, #68]	@ 0x44
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	330c      	adds	r3, #12
 800907e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009080:	61ba      	str	r2, [r7, #24]
 8009082:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009084:	6979      	ldr	r1, [r7, #20]
 8009086:	69ba      	ldr	r2, [r7, #24]
 8009088:	e841 2300 	strex	r3, r2, [r1]
 800908c:	613b      	str	r3, [r7, #16]
   return(result);
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d1e5      	bne.n	8009060 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2220      	movs	r2, #32
 8009098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80090a2:	bf00      	nop
 80090a4:	3754      	adds	r7, #84	@ 0x54
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
	...

080090b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80090b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80090b4:	b0c0      	sub	sp, #256	@ 0x100
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	691b      	ldr	r3, [r3, #16]
 80090c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80090c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090cc:	68d9      	ldr	r1, [r3, #12]
 80090ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	ea40 0301 	orr.w	r3, r0, r1
 80090d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80090da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090de:	689a      	ldr	r2, [r3, #8]
 80090e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	431a      	orrs	r2, r3
 80090e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090ec:	695b      	ldr	r3, [r3, #20]
 80090ee:	431a      	orrs	r2, r3
 80090f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090f4:	69db      	ldr	r3, [r3, #28]
 80090f6:	4313      	orrs	r3, r2
 80090f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80090fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	68db      	ldr	r3, [r3, #12]
 8009104:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009108:	f021 010c 	bic.w	r1, r1, #12
 800910c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009110:	681a      	ldr	r2, [r3, #0]
 8009112:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009116:	430b      	orrs	r3, r1
 8009118:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800911a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	695b      	ldr	r3, [r3, #20]
 8009122:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800912a:	6999      	ldr	r1, [r3, #24]
 800912c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009130:	681a      	ldr	r2, [r3, #0]
 8009132:	ea40 0301 	orr.w	r3, r0, r1
 8009136:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800913c:	681a      	ldr	r2, [r3, #0]
 800913e:	4b8f      	ldr	r3, [pc, #572]	@ (800937c <UART_SetConfig+0x2cc>)
 8009140:	429a      	cmp	r2, r3
 8009142:	d005      	beq.n	8009150 <UART_SetConfig+0xa0>
 8009144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	4b8d      	ldr	r3, [pc, #564]	@ (8009380 <UART_SetConfig+0x2d0>)
 800914c:	429a      	cmp	r2, r3
 800914e:	d104      	bne.n	800915a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009150:	f7ff f92a 	bl	80083a8 <HAL_RCC_GetPCLK2Freq>
 8009154:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009158:	e003      	b.n	8009162 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800915a:	f7ff f911 	bl	8008380 <HAL_RCC_GetPCLK1Freq>
 800915e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009166:	69db      	ldr	r3, [r3, #28]
 8009168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800916c:	f040 810c 	bne.w	8009388 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009170:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009174:	2200      	movs	r2, #0
 8009176:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800917a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800917e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009182:	4622      	mov	r2, r4
 8009184:	462b      	mov	r3, r5
 8009186:	1891      	adds	r1, r2, r2
 8009188:	65b9      	str	r1, [r7, #88]	@ 0x58
 800918a:	415b      	adcs	r3, r3
 800918c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800918e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009192:	4621      	mov	r1, r4
 8009194:	eb12 0801 	adds.w	r8, r2, r1
 8009198:	4629      	mov	r1, r5
 800919a:	eb43 0901 	adc.w	r9, r3, r1
 800919e:	f04f 0200 	mov.w	r2, #0
 80091a2:	f04f 0300 	mov.w	r3, #0
 80091a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80091aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80091ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80091b2:	4690      	mov	r8, r2
 80091b4:	4699      	mov	r9, r3
 80091b6:	4623      	mov	r3, r4
 80091b8:	eb18 0303 	adds.w	r3, r8, r3
 80091bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80091c0:	462b      	mov	r3, r5
 80091c2:	eb49 0303 	adc.w	r3, r9, r3
 80091c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80091ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091ce:	685b      	ldr	r3, [r3, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80091d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80091da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80091de:	460b      	mov	r3, r1
 80091e0:	18db      	adds	r3, r3, r3
 80091e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80091e4:	4613      	mov	r3, r2
 80091e6:	eb42 0303 	adc.w	r3, r2, r3
 80091ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80091ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80091f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80091f4:	f7f7 fcf8 	bl	8000be8 <__aeabi_uldivmod>
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	4b61      	ldr	r3, [pc, #388]	@ (8009384 <UART_SetConfig+0x2d4>)
 80091fe:	fba3 2302 	umull	r2, r3, r3, r2
 8009202:	095b      	lsrs	r3, r3, #5
 8009204:	011c      	lsls	r4, r3, #4
 8009206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800920a:	2200      	movs	r2, #0
 800920c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009210:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009214:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009218:	4642      	mov	r2, r8
 800921a:	464b      	mov	r3, r9
 800921c:	1891      	adds	r1, r2, r2
 800921e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009220:	415b      	adcs	r3, r3
 8009222:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009224:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009228:	4641      	mov	r1, r8
 800922a:	eb12 0a01 	adds.w	sl, r2, r1
 800922e:	4649      	mov	r1, r9
 8009230:	eb43 0b01 	adc.w	fp, r3, r1
 8009234:	f04f 0200 	mov.w	r2, #0
 8009238:	f04f 0300 	mov.w	r3, #0
 800923c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009240:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009244:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009248:	4692      	mov	sl, r2
 800924a:	469b      	mov	fp, r3
 800924c:	4643      	mov	r3, r8
 800924e:	eb1a 0303 	adds.w	r3, sl, r3
 8009252:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009256:	464b      	mov	r3, r9
 8009258:	eb4b 0303 	adc.w	r3, fp, r3
 800925c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800926c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009270:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009274:	460b      	mov	r3, r1
 8009276:	18db      	adds	r3, r3, r3
 8009278:	643b      	str	r3, [r7, #64]	@ 0x40
 800927a:	4613      	mov	r3, r2
 800927c:	eb42 0303 	adc.w	r3, r2, r3
 8009280:	647b      	str	r3, [r7, #68]	@ 0x44
 8009282:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009286:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800928a:	f7f7 fcad 	bl	8000be8 <__aeabi_uldivmod>
 800928e:	4602      	mov	r2, r0
 8009290:	460b      	mov	r3, r1
 8009292:	4611      	mov	r1, r2
 8009294:	4b3b      	ldr	r3, [pc, #236]	@ (8009384 <UART_SetConfig+0x2d4>)
 8009296:	fba3 2301 	umull	r2, r3, r3, r1
 800929a:	095b      	lsrs	r3, r3, #5
 800929c:	2264      	movs	r2, #100	@ 0x64
 800929e:	fb02 f303 	mul.w	r3, r2, r3
 80092a2:	1acb      	subs	r3, r1, r3
 80092a4:	00db      	lsls	r3, r3, #3
 80092a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80092aa:	4b36      	ldr	r3, [pc, #216]	@ (8009384 <UART_SetConfig+0x2d4>)
 80092ac:	fba3 2302 	umull	r2, r3, r3, r2
 80092b0:	095b      	lsrs	r3, r3, #5
 80092b2:	005b      	lsls	r3, r3, #1
 80092b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80092b8:	441c      	add	r4, r3
 80092ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80092be:	2200      	movs	r2, #0
 80092c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80092c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80092c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80092cc:	4642      	mov	r2, r8
 80092ce:	464b      	mov	r3, r9
 80092d0:	1891      	adds	r1, r2, r2
 80092d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80092d4:	415b      	adcs	r3, r3
 80092d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80092dc:	4641      	mov	r1, r8
 80092de:	1851      	adds	r1, r2, r1
 80092e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80092e2:	4649      	mov	r1, r9
 80092e4:	414b      	adcs	r3, r1
 80092e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80092e8:	f04f 0200 	mov.w	r2, #0
 80092ec:	f04f 0300 	mov.w	r3, #0
 80092f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80092f4:	4659      	mov	r1, fp
 80092f6:	00cb      	lsls	r3, r1, #3
 80092f8:	4651      	mov	r1, sl
 80092fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092fe:	4651      	mov	r1, sl
 8009300:	00ca      	lsls	r2, r1, #3
 8009302:	4610      	mov	r0, r2
 8009304:	4619      	mov	r1, r3
 8009306:	4603      	mov	r3, r0
 8009308:	4642      	mov	r2, r8
 800930a:	189b      	adds	r3, r3, r2
 800930c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009310:	464b      	mov	r3, r9
 8009312:	460a      	mov	r2, r1
 8009314:	eb42 0303 	adc.w	r3, r2, r3
 8009318:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800931c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009328:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800932c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009330:	460b      	mov	r3, r1
 8009332:	18db      	adds	r3, r3, r3
 8009334:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009336:	4613      	mov	r3, r2
 8009338:	eb42 0303 	adc.w	r3, r2, r3
 800933c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800933e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009342:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009346:	f7f7 fc4f 	bl	8000be8 <__aeabi_uldivmod>
 800934a:	4602      	mov	r2, r0
 800934c:	460b      	mov	r3, r1
 800934e:	4b0d      	ldr	r3, [pc, #52]	@ (8009384 <UART_SetConfig+0x2d4>)
 8009350:	fba3 1302 	umull	r1, r3, r3, r2
 8009354:	095b      	lsrs	r3, r3, #5
 8009356:	2164      	movs	r1, #100	@ 0x64
 8009358:	fb01 f303 	mul.w	r3, r1, r3
 800935c:	1ad3      	subs	r3, r2, r3
 800935e:	00db      	lsls	r3, r3, #3
 8009360:	3332      	adds	r3, #50	@ 0x32
 8009362:	4a08      	ldr	r2, [pc, #32]	@ (8009384 <UART_SetConfig+0x2d4>)
 8009364:	fba2 2303 	umull	r2, r3, r2, r3
 8009368:	095b      	lsrs	r3, r3, #5
 800936a:	f003 0207 	and.w	r2, r3, #7
 800936e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4422      	add	r2, r4
 8009376:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009378:	e106      	b.n	8009588 <UART_SetConfig+0x4d8>
 800937a:	bf00      	nop
 800937c:	40011000 	.word	0x40011000
 8009380:	40011400 	.word	0x40011400
 8009384:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800938c:	2200      	movs	r2, #0
 800938e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009392:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009396:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800939a:	4642      	mov	r2, r8
 800939c:	464b      	mov	r3, r9
 800939e:	1891      	adds	r1, r2, r2
 80093a0:	6239      	str	r1, [r7, #32]
 80093a2:	415b      	adcs	r3, r3
 80093a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80093a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80093aa:	4641      	mov	r1, r8
 80093ac:	1854      	adds	r4, r2, r1
 80093ae:	4649      	mov	r1, r9
 80093b0:	eb43 0501 	adc.w	r5, r3, r1
 80093b4:	f04f 0200 	mov.w	r2, #0
 80093b8:	f04f 0300 	mov.w	r3, #0
 80093bc:	00eb      	lsls	r3, r5, #3
 80093be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093c2:	00e2      	lsls	r2, r4, #3
 80093c4:	4614      	mov	r4, r2
 80093c6:	461d      	mov	r5, r3
 80093c8:	4643      	mov	r3, r8
 80093ca:	18e3      	adds	r3, r4, r3
 80093cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80093d0:	464b      	mov	r3, r9
 80093d2:	eb45 0303 	adc.w	r3, r5, r3
 80093d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80093da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	2200      	movs	r2, #0
 80093e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80093e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80093ea:	f04f 0200 	mov.w	r2, #0
 80093ee:	f04f 0300 	mov.w	r3, #0
 80093f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80093f6:	4629      	mov	r1, r5
 80093f8:	008b      	lsls	r3, r1, #2
 80093fa:	4621      	mov	r1, r4
 80093fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009400:	4621      	mov	r1, r4
 8009402:	008a      	lsls	r2, r1, #2
 8009404:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009408:	f7f7 fbee 	bl	8000be8 <__aeabi_uldivmod>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	4b60      	ldr	r3, [pc, #384]	@ (8009594 <UART_SetConfig+0x4e4>)
 8009412:	fba3 2302 	umull	r2, r3, r3, r2
 8009416:	095b      	lsrs	r3, r3, #5
 8009418:	011c      	lsls	r4, r3, #4
 800941a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800941e:	2200      	movs	r2, #0
 8009420:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009424:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009428:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800942c:	4642      	mov	r2, r8
 800942e:	464b      	mov	r3, r9
 8009430:	1891      	adds	r1, r2, r2
 8009432:	61b9      	str	r1, [r7, #24]
 8009434:	415b      	adcs	r3, r3
 8009436:	61fb      	str	r3, [r7, #28]
 8009438:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800943c:	4641      	mov	r1, r8
 800943e:	1851      	adds	r1, r2, r1
 8009440:	6139      	str	r1, [r7, #16]
 8009442:	4649      	mov	r1, r9
 8009444:	414b      	adcs	r3, r1
 8009446:	617b      	str	r3, [r7, #20]
 8009448:	f04f 0200 	mov.w	r2, #0
 800944c:	f04f 0300 	mov.w	r3, #0
 8009450:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009454:	4659      	mov	r1, fp
 8009456:	00cb      	lsls	r3, r1, #3
 8009458:	4651      	mov	r1, sl
 800945a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800945e:	4651      	mov	r1, sl
 8009460:	00ca      	lsls	r2, r1, #3
 8009462:	4610      	mov	r0, r2
 8009464:	4619      	mov	r1, r3
 8009466:	4603      	mov	r3, r0
 8009468:	4642      	mov	r2, r8
 800946a:	189b      	adds	r3, r3, r2
 800946c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009470:	464b      	mov	r3, r9
 8009472:	460a      	mov	r2, r1
 8009474:	eb42 0303 	adc.w	r3, r2, r3
 8009478:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800947c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	2200      	movs	r2, #0
 8009484:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009486:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009488:	f04f 0200 	mov.w	r2, #0
 800948c:	f04f 0300 	mov.w	r3, #0
 8009490:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009494:	4649      	mov	r1, r9
 8009496:	008b      	lsls	r3, r1, #2
 8009498:	4641      	mov	r1, r8
 800949a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800949e:	4641      	mov	r1, r8
 80094a0:	008a      	lsls	r2, r1, #2
 80094a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80094a6:	f7f7 fb9f 	bl	8000be8 <__aeabi_uldivmod>
 80094aa:	4602      	mov	r2, r0
 80094ac:	460b      	mov	r3, r1
 80094ae:	4611      	mov	r1, r2
 80094b0:	4b38      	ldr	r3, [pc, #224]	@ (8009594 <UART_SetConfig+0x4e4>)
 80094b2:	fba3 2301 	umull	r2, r3, r3, r1
 80094b6:	095b      	lsrs	r3, r3, #5
 80094b8:	2264      	movs	r2, #100	@ 0x64
 80094ba:	fb02 f303 	mul.w	r3, r2, r3
 80094be:	1acb      	subs	r3, r1, r3
 80094c0:	011b      	lsls	r3, r3, #4
 80094c2:	3332      	adds	r3, #50	@ 0x32
 80094c4:	4a33      	ldr	r2, [pc, #204]	@ (8009594 <UART_SetConfig+0x4e4>)
 80094c6:	fba2 2303 	umull	r2, r3, r2, r3
 80094ca:	095b      	lsrs	r3, r3, #5
 80094cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80094d0:	441c      	add	r4, r3
 80094d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80094d6:	2200      	movs	r2, #0
 80094d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80094da:	677a      	str	r2, [r7, #116]	@ 0x74
 80094dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80094e0:	4642      	mov	r2, r8
 80094e2:	464b      	mov	r3, r9
 80094e4:	1891      	adds	r1, r2, r2
 80094e6:	60b9      	str	r1, [r7, #8]
 80094e8:	415b      	adcs	r3, r3
 80094ea:	60fb      	str	r3, [r7, #12]
 80094ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80094f0:	4641      	mov	r1, r8
 80094f2:	1851      	adds	r1, r2, r1
 80094f4:	6039      	str	r1, [r7, #0]
 80094f6:	4649      	mov	r1, r9
 80094f8:	414b      	adcs	r3, r1
 80094fa:	607b      	str	r3, [r7, #4]
 80094fc:	f04f 0200 	mov.w	r2, #0
 8009500:	f04f 0300 	mov.w	r3, #0
 8009504:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009508:	4659      	mov	r1, fp
 800950a:	00cb      	lsls	r3, r1, #3
 800950c:	4651      	mov	r1, sl
 800950e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009512:	4651      	mov	r1, sl
 8009514:	00ca      	lsls	r2, r1, #3
 8009516:	4610      	mov	r0, r2
 8009518:	4619      	mov	r1, r3
 800951a:	4603      	mov	r3, r0
 800951c:	4642      	mov	r2, r8
 800951e:	189b      	adds	r3, r3, r2
 8009520:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009522:	464b      	mov	r3, r9
 8009524:	460a      	mov	r2, r1
 8009526:	eb42 0303 	adc.w	r3, r2, r3
 800952a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800952c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	663b      	str	r3, [r7, #96]	@ 0x60
 8009536:	667a      	str	r2, [r7, #100]	@ 0x64
 8009538:	f04f 0200 	mov.w	r2, #0
 800953c:	f04f 0300 	mov.w	r3, #0
 8009540:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009544:	4649      	mov	r1, r9
 8009546:	008b      	lsls	r3, r1, #2
 8009548:	4641      	mov	r1, r8
 800954a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800954e:	4641      	mov	r1, r8
 8009550:	008a      	lsls	r2, r1, #2
 8009552:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009556:	f7f7 fb47 	bl	8000be8 <__aeabi_uldivmod>
 800955a:	4602      	mov	r2, r0
 800955c:	460b      	mov	r3, r1
 800955e:	4b0d      	ldr	r3, [pc, #52]	@ (8009594 <UART_SetConfig+0x4e4>)
 8009560:	fba3 1302 	umull	r1, r3, r3, r2
 8009564:	095b      	lsrs	r3, r3, #5
 8009566:	2164      	movs	r1, #100	@ 0x64
 8009568:	fb01 f303 	mul.w	r3, r1, r3
 800956c:	1ad3      	subs	r3, r2, r3
 800956e:	011b      	lsls	r3, r3, #4
 8009570:	3332      	adds	r3, #50	@ 0x32
 8009572:	4a08      	ldr	r2, [pc, #32]	@ (8009594 <UART_SetConfig+0x4e4>)
 8009574:	fba2 2303 	umull	r2, r3, r2, r3
 8009578:	095b      	lsrs	r3, r3, #5
 800957a:	f003 020f 	and.w	r2, r3, #15
 800957e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4422      	add	r2, r4
 8009586:	609a      	str	r2, [r3, #8]
}
 8009588:	bf00      	nop
 800958a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800958e:	46bd      	mov	sp, r7
 8009590:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009594:	51eb851f 	.word	0x51eb851f

08009598 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009598:	b084      	sub	sp, #16
 800959a:	b580      	push	{r7, lr}
 800959c:	b084      	sub	sp, #16
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
 80095a2:	f107 001c 	add.w	r0, r7, #28
 80095a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80095aa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d123      	bne.n	80095fa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80095c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80095ca:	687a      	ldr	r2, [r7, #4]
 80095cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80095da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80095de:	2b01      	cmp	r3, #1
 80095e0:	d105      	bne.n	80095ee <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	68db      	ldr	r3, [r3, #12]
 80095e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f001 fae8 	bl	800abc4 <USB_CoreReset>
 80095f4:	4603      	mov	r3, r0
 80095f6:	73fb      	strb	r3, [r7, #15]
 80095f8:	e01b      	b.n	8009632 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f001 fadc 	bl	800abc4 <USB_CoreReset>
 800960c:	4603      	mov	r3, r0
 800960e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009610:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009614:	2b00      	cmp	r3, #0
 8009616:	d106      	bne.n	8009626 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800961c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	639a      	str	r2, [r3, #56]	@ 0x38
 8009624:	e005      	b.n	8009632 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800962a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009632:	7fbb      	ldrb	r3, [r7, #30]
 8009634:	2b01      	cmp	r3, #1
 8009636:	d10b      	bne.n	8009650 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	f043 0206 	orr.w	r2, r3, #6
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	f043 0220 	orr.w	r2, r3, #32
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009650:	7bfb      	ldrb	r3, [r7, #15]
}
 8009652:	4618      	mov	r0, r3
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800965c:	b004      	add	sp, #16
 800965e:	4770      	bx	lr

08009660 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009660:	b480      	push	{r7}
 8009662:	b087      	sub	sp, #28
 8009664:	af00      	add	r7, sp, #0
 8009666:	60f8      	str	r0, [r7, #12]
 8009668:	60b9      	str	r1, [r7, #8]
 800966a:	4613      	mov	r3, r2
 800966c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800966e:	79fb      	ldrb	r3, [r7, #7]
 8009670:	2b02      	cmp	r3, #2
 8009672:	d165      	bne.n	8009740 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	4a41      	ldr	r2, [pc, #260]	@ (800977c <USB_SetTurnaroundTime+0x11c>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d906      	bls.n	800968a <USB_SetTurnaroundTime+0x2a>
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	4a40      	ldr	r2, [pc, #256]	@ (8009780 <USB_SetTurnaroundTime+0x120>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d202      	bcs.n	800968a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009684:	230f      	movs	r3, #15
 8009686:	617b      	str	r3, [r7, #20]
 8009688:	e062      	b.n	8009750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	4a3c      	ldr	r2, [pc, #240]	@ (8009780 <USB_SetTurnaroundTime+0x120>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d306      	bcc.n	80096a0 <USB_SetTurnaroundTime+0x40>
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	4a3b      	ldr	r2, [pc, #236]	@ (8009784 <USB_SetTurnaroundTime+0x124>)
 8009696:	4293      	cmp	r3, r2
 8009698:	d202      	bcs.n	80096a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800969a:	230e      	movs	r3, #14
 800969c:	617b      	str	r3, [r7, #20]
 800969e:	e057      	b.n	8009750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	4a38      	ldr	r2, [pc, #224]	@ (8009784 <USB_SetTurnaroundTime+0x124>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d306      	bcc.n	80096b6 <USB_SetTurnaroundTime+0x56>
 80096a8:	68bb      	ldr	r3, [r7, #8]
 80096aa:	4a37      	ldr	r2, [pc, #220]	@ (8009788 <USB_SetTurnaroundTime+0x128>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d202      	bcs.n	80096b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80096b0:	230d      	movs	r3, #13
 80096b2:	617b      	str	r3, [r7, #20]
 80096b4:	e04c      	b.n	8009750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	4a33      	ldr	r2, [pc, #204]	@ (8009788 <USB_SetTurnaroundTime+0x128>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d306      	bcc.n	80096cc <USB_SetTurnaroundTime+0x6c>
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	4a32      	ldr	r2, [pc, #200]	@ (800978c <USB_SetTurnaroundTime+0x12c>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d802      	bhi.n	80096cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80096c6:	230c      	movs	r3, #12
 80096c8:	617b      	str	r3, [r7, #20]
 80096ca:	e041      	b.n	8009750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	4a2f      	ldr	r2, [pc, #188]	@ (800978c <USB_SetTurnaroundTime+0x12c>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d906      	bls.n	80096e2 <USB_SetTurnaroundTime+0x82>
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	4a2e      	ldr	r2, [pc, #184]	@ (8009790 <USB_SetTurnaroundTime+0x130>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d802      	bhi.n	80096e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80096dc:	230b      	movs	r3, #11
 80096de:	617b      	str	r3, [r7, #20]
 80096e0:	e036      	b.n	8009750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80096e2:	68bb      	ldr	r3, [r7, #8]
 80096e4:	4a2a      	ldr	r2, [pc, #168]	@ (8009790 <USB_SetTurnaroundTime+0x130>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d906      	bls.n	80096f8 <USB_SetTurnaroundTime+0x98>
 80096ea:	68bb      	ldr	r3, [r7, #8]
 80096ec:	4a29      	ldr	r2, [pc, #164]	@ (8009794 <USB_SetTurnaroundTime+0x134>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d802      	bhi.n	80096f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80096f2:	230a      	movs	r3, #10
 80096f4:	617b      	str	r3, [r7, #20]
 80096f6:	e02b      	b.n	8009750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80096f8:	68bb      	ldr	r3, [r7, #8]
 80096fa:	4a26      	ldr	r2, [pc, #152]	@ (8009794 <USB_SetTurnaroundTime+0x134>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d906      	bls.n	800970e <USB_SetTurnaroundTime+0xae>
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	4a25      	ldr	r2, [pc, #148]	@ (8009798 <USB_SetTurnaroundTime+0x138>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d202      	bcs.n	800970e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009708:	2309      	movs	r3, #9
 800970a:	617b      	str	r3, [r7, #20]
 800970c:	e020      	b.n	8009750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	4a21      	ldr	r2, [pc, #132]	@ (8009798 <USB_SetTurnaroundTime+0x138>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d306      	bcc.n	8009724 <USB_SetTurnaroundTime+0xc4>
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	4a20      	ldr	r2, [pc, #128]	@ (800979c <USB_SetTurnaroundTime+0x13c>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d802      	bhi.n	8009724 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800971e:	2308      	movs	r3, #8
 8009720:	617b      	str	r3, [r7, #20]
 8009722:	e015      	b.n	8009750 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	4a1d      	ldr	r2, [pc, #116]	@ (800979c <USB_SetTurnaroundTime+0x13c>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d906      	bls.n	800973a <USB_SetTurnaroundTime+0xda>
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	4a1c      	ldr	r2, [pc, #112]	@ (80097a0 <USB_SetTurnaroundTime+0x140>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d202      	bcs.n	800973a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009734:	2307      	movs	r3, #7
 8009736:	617b      	str	r3, [r7, #20]
 8009738:	e00a      	b.n	8009750 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800973a:	2306      	movs	r3, #6
 800973c:	617b      	str	r3, [r7, #20]
 800973e:	e007      	b.n	8009750 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009740:	79fb      	ldrb	r3, [r7, #7]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d102      	bne.n	800974c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009746:	2309      	movs	r3, #9
 8009748:	617b      	str	r3, [r7, #20]
 800974a:	e001      	b.n	8009750 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800974c:	2309      	movs	r3, #9
 800974e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	68db      	ldr	r3, [r3, #12]
 8009754:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	68da      	ldr	r2, [r3, #12]
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	029b      	lsls	r3, r3, #10
 8009764:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009768:	431a      	orrs	r2, r3
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800976e:	2300      	movs	r3, #0
}
 8009770:	4618      	mov	r0, r3
 8009772:	371c      	adds	r7, #28
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	00d8acbf 	.word	0x00d8acbf
 8009780:	00e4e1c0 	.word	0x00e4e1c0
 8009784:	00f42400 	.word	0x00f42400
 8009788:	01067380 	.word	0x01067380
 800978c:	011a499f 	.word	0x011a499f
 8009790:	01312cff 	.word	0x01312cff
 8009794:	014ca43f 	.word	0x014ca43f
 8009798:	016e3600 	.word	0x016e3600
 800979c:	01a6ab1f 	.word	0x01a6ab1f
 80097a0:	01e84800 	.word	0x01e84800

080097a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	689b      	ldr	r3, [r3, #8]
 80097b0:	f043 0201 	orr.w	r2, r3, #1
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80097b8:	2300      	movs	r3, #0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	370c      	adds	r7, #12
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr

080097c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80097c6:	b480      	push	{r7}
 80097c8:	b083      	sub	sp, #12
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	f023 0201 	bic.w	r2, r3, #1
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	460b      	mov	r3, r1
 80097f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80097f4:	2300      	movs	r3, #0
 80097f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009804:	78fb      	ldrb	r3, [r7, #3]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d115      	bne.n	8009836 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	68db      	ldr	r3, [r3, #12]
 800980e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009816:	200a      	movs	r0, #10
 8009818:	f7f8 ff2e 	bl	8002678 <HAL_Delay>
      ms += 10U;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	330a      	adds	r3, #10
 8009820:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f001 f93f 	bl	800aaa6 <USB_GetMode>
 8009828:	4603      	mov	r3, r0
 800982a:	2b01      	cmp	r3, #1
 800982c:	d01e      	beq.n	800986c <USB_SetCurrentMode+0x84>
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2bc7      	cmp	r3, #199	@ 0xc7
 8009832:	d9f0      	bls.n	8009816 <USB_SetCurrentMode+0x2e>
 8009834:	e01a      	b.n	800986c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009836:	78fb      	ldrb	r3, [r7, #3]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d115      	bne.n	8009868 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009848:	200a      	movs	r0, #10
 800984a:	f7f8 ff15 	bl	8002678 <HAL_Delay>
      ms += 10U;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	330a      	adds	r3, #10
 8009852:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	f001 f926 	bl	800aaa6 <USB_GetMode>
 800985a:	4603      	mov	r3, r0
 800985c:	2b00      	cmp	r3, #0
 800985e:	d005      	beq.n	800986c <USB_SetCurrentMode+0x84>
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	2bc7      	cmp	r3, #199	@ 0xc7
 8009864:	d9f0      	bls.n	8009848 <USB_SetCurrentMode+0x60>
 8009866:	e001      	b.n	800986c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	e005      	b.n	8009878 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2bc8      	cmp	r3, #200	@ 0xc8
 8009870:	d101      	bne.n	8009876 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	e000      	b.n	8009878 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3710      	adds	r7, #16
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009880:	b084      	sub	sp, #16
 8009882:	b580      	push	{r7, lr}
 8009884:	b086      	sub	sp, #24
 8009886:	af00      	add	r7, sp, #0
 8009888:	6078      	str	r0, [r7, #4]
 800988a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800988e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009892:	2300      	movs	r3, #0
 8009894:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800989a:	2300      	movs	r3, #0
 800989c:	613b      	str	r3, [r7, #16]
 800989e:	e009      	b.n	80098b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	3340      	adds	r3, #64	@ 0x40
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4413      	add	r3, r2
 80098aa:	2200      	movs	r2, #0
 80098ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80098ae:	693b      	ldr	r3, [r7, #16]
 80098b0:	3301      	adds	r3, #1
 80098b2:	613b      	str	r3, [r7, #16]
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	2b0e      	cmp	r3, #14
 80098b8:	d9f2      	bls.n	80098a0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80098ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d11c      	bne.n	80098fc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	68fa      	ldr	r2, [r7, #12]
 80098cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098d0:	f043 0302 	orr.w	r3, r3, #2
 80098d4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098da:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098e6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098f2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	639a      	str	r2, [r3, #56]	@ 0x38
 80098fa:	e00b      	b.n	8009914 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009900:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800990c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800991a:	461a      	mov	r2, r3
 800991c:	2300      	movs	r3, #0
 800991e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009920:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009924:	2b01      	cmp	r3, #1
 8009926:	d10d      	bne.n	8009944 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009928:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800992c:	2b00      	cmp	r3, #0
 800992e:	d104      	bne.n	800993a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009930:	2100      	movs	r1, #0
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 f968 	bl	8009c08 <USB_SetDevSpeed>
 8009938:	e008      	b.n	800994c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800993a:	2101      	movs	r1, #1
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f000 f963 	bl	8009c08 <USB_SetDevSpeed>
 8009942:	e003      	b.n	800994c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009944:	2103      	movs	r1, #3
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 f95e 	bl	8009c08 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800994c:	2110      	movs	r1, #16
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 f8fa 	bl	8009b48 <USB_FlushTxFifo>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d001      	beq.n	800995e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f924 	bl	8009bac <USB_FlushRxFifo>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009974:	461a      	mov	r2, r3
 8009976:	2300      	movs	r3, #0
 8009978:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009980:	461a      	mov	r2, r3
 8009982:	2300      	movs	r3, #0
 8009984:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800998c:	461a      	mov	r2, r3
 800998e:	2300      	movs	r3, #0
 8009990:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009992:	2300      	movs	r3, #0
 8009994:	613b      	str	r3, [r7, #16]
 8009996:	e043      	b.n	8009a20 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	015a      	lsls	r2, r3, #5
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	4413      	add	r3, r2
 80099a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099ae:	d118      	bne.n	80099e2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80099b0:	693b      	ldr	r3, [r7, #16]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d10a      	bne.n	80099cc <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80099b6:	693b      	ldr	r3, [r7, #16]
 80099b8:	015a      	lsls	r2, r3, #5
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	4413      	add	r3, r2
 80099be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099c2:	461a      	mov	r2, r3
 80099c4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80099c8:	6013      	str	r3, [r2, #0]
 80099ca:	e013      	b.n	80099f4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	015a      	lsls	r2, r3, #5
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	4413      	add	r3, r2
 80099d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099d8:	461a      	mov	r2, r3
 80099da:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80099de:	6013      	str	r3, [r2, #0]
 80099e0:	e008      	b.n	80099f4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80099e2:	693b      	ldr	r3, [r7, #16]
 80099e4:	015a      	lsls	r2, r3, #5
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	4413      	add	r3, r2
 80099ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099ee:	461a      	mov	r2, r3
 80099f0:	2300      	movs	r3, #0
 80099f2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	015a      	lsls	r2, r3, #5
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	4413      	add	r3, r2
 80099fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a00:	461a      	mov	r2, r3
 8009a02:	2300      	movs	r3, #0
 8009a04:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	015a      	lsls	r2, r3, #5
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a12:	461a      	mov	r2, r3
 8009a14:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009a18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	3301      	adds	r3, #1
 8009a1e:	613b      	str	r3, [r7, #16]
 8009a20:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009a24:	461a      	mov	r2, r3
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d3b5      	bcc.n	8009998 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	613b      	str	r3, [r7, #16]
 8009a30:	e043      	b.n	8009aba <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	015a      	lsls	r2, r3, #5
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	4413      	add	r3, r2
 8009a3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a48:	d118      	bne.n	8009a7c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d10a      	bne.n	8009a66 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009a50:	693b      	ldr	r3, [r7, #16]
 8009a52:	015a      	lsls	r2, r3, #5
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	4413      	add	r3, r2
 8009a58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009a62:	6013      	str	r3, [r2, #0]
 8009a64:	e013      	b.n	8009a8e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	015a      	lsls	r2, r3, #5
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a72:	461a      	mov	r2, r3
 8009a74:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009a78:	6013      	str	r3, [r2, #0]
 8009a7a:	e008      	b.n	8009a8e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	015a      	lsls	r2, r3, #5
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	4413      	add	r3, r2
 8009a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a88:	461a      	mov	r2, r3
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	015a      	lsls	r2, r3, #5
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	4413      	add	r3, r2
 8009a96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a9a:	461a      	mov	r2, r3
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	015a      	lsls	r2, r3, #5
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	4413      	add	r3, r2
 8009aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009aac:	461a      	mov	r2, r3
 8009aae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009ab2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	613b      	str	r3, [r7, #16]
 8009aba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009abe:	461a      	mov	r2, r3
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d3b5      	bcc.n	8009a32 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009ad4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009ad8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009ae6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009ae8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d105      	bne.n	8009afc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	699b      	ldr	r3, [r3, #24]
 8009af4:	f043 0210 	orr.w	r2, r3, #16
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	699a      	ldr	r2, [r3, #24]
 8009b00:	4b10      	ldr	r3, [pc, #64]	@ (8009b44 <USB_DevInit+0x2c4>)
 8009b02:	4313      	orrs	r3, r2
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009b08:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d005      	beq.n	8009b1c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	699b      	ldr	r3, [r3, #24]
 8009b14:	f043 0208 	orr.w	r2, r3, #8
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009b1c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d107      	bne.n	8009b34 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	699b      	ldr	r3, [r3, #24]
 8009b28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009b2c:	f043 0304 	orr.w	r3, r3, #4
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3718      	adds	r7, #24
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b40:	b004      	add	sp, #16
 8009b42:	4770      	bx	lr
 8009b44:	803c3800 	.word	0x803c3800

08009b48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b085      	sub	sp, #20
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009b52:	2300      	movs	r3, #0
 8009b54:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	3301      	adds	r3, #1
 8009b5a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b62:	d901      	bls.n	8009b68 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009b64:	2303      	movs	r3, #3
 8009b66:	e01b      	b.n	8009ba0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	691b      	ldr	r3, [r3, #16]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	daf2      	bge.n	8009b56 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009b70:	2300      	movs	r3, #0
 8009b72:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	019b      	lsls	r3, r3, #6
 8009b78:	f043 0220 	orr.w	r2, r3, #32
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	3301      	adds	r3, #1
 8009b84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009b8c:	d901      	bls.n	8009b92 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e006      	b.n	8009ba0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	f003 0320 	and.w	r3, r3, #32
 8009b9a:	2b20      	cmp	r3, #32
 8009b9c:	d0f0      	beq.n	8009b80 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3714      	adds	r7, #20
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009baa:	4770      	bx	lr

08009bac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	3301      	adds	r3, #1
 8009bbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009bc4:	d901      	bls.n	8009bca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009bc6:	2303      	movs	r3, #3
 8009bc8:	e018      	b.n	8009bfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	daf2      	bge.n	8009bb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2210      	movs	r2, #16
 8009bda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	3301      	adds	r3, #1
 8009be0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009be8:	d901      	bls.n	8009bee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009bea:	2303      	movs	r3, #3
 8009bec:	e006      	b.n	8009bfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	f003 0310 	and.w	r3, r3, #16
 8009bf6:	2b10      	cmp	r3, #16
 8009bf8:	d0f0      	beq.n	8009bdc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3714      	adds	r7, #20
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b085      	sub	sp, #20
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	460b      	mov	r3, r1
 8009c12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	78fb      	ldrb	r3, [r7, #3]
 8009c22:	68f9      	ldr	r1, [r7, #12]
 8009c24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009c2c:	2300      	movs	r3, #0
}
 8009c2e:	4618      	mov	r0, r3
 8009c30:	3714      	adds	r7, #20
 8009c32:	46bd      	mov	sp, r7
 8009c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c38:	4770      	bx	lr

08009c3a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009c3a:	b480      	push	{r7}
 8009c3c:	b087      	sub	sp, #28
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c4c:	689b      	ldr	r3, [r3, #8]
 8009c4e:	f003 0306 	and.w	r3, r3, #6
 8009c52:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d102      	bne.n	8009c60 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	75fb      	strb	r3, [r7, #23]
 8009c5e:	e00a      	b.n	8009c76 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d002      	beq.n	8009c6c <USB_GetDevSpeed+0x32>
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	2b06      	cmp	r3, #6
 8009c6a:	d102      	bne.n	8009c72 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009c6c:	2302      	movs	r3, #2
 8009c6e:	75fb      	strb	r3, [r7, #23]
 8009c70:	e001      	b.n	8009c76 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009c72:	230f      	movs	r3, #15
 8009c74:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009c76:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	371c      	adds	r7, #28
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr

08009c84 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]
 8009c8c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c92:	683b      	ldr	r3, [r7, #0]
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	785b      	ldrb	r3, [r3, #1]
 8009c9c:	2b01      	cmp	r3, #1
 8009c9e:	d13a      	bne.n	8009d16 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ca6:	69da      	ldr	r2, [r3, #28]
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	f003 030f 	and.w	r3, r3, #15
 8009cb0:	2101      	movs	r1, #1
 8009cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	68f9      	ldr	r1, [r7, #12]
 8009cba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	015a      	lsls	r2, r3, #5
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	4413      	add	r3, r2
 8009cca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d155      	bne.n	8009d84 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	015a      	lsls	r2, r3, #5
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	4413      	add	r3, r2
 8009ce0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ce4:	681a      	ldr	r2, [r3, #0]
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	791b      	ldrb	r3, [r3, #4]
 8009cf2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009cf4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	059b      	lsls	r3, r3, #22
 8009cfa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	68ba      	ldr	r2, [r7, #8]
 8009d00:	0151      	lsls	r1, r2, #5
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	440a      	add	r2, r1
 8009d06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d12:	6013      	str	r3, [r2, #0]
 8009d14:	e036      	b.n	8009d84 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d1c:	69da      	ldr	r2, [r3, #28]
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	f003 030f 	and.w	r3, r3, #15
 8009d26:	2101      	movs	r1, #1
 8009d28:	fa01 f303 	lsl.w	r3, r1, r3
 8009d2c:	041b      	lsls	r3, r3, #16
 8009d2e:	68f9      	ldr	r1, [r7, #12]
 8009d30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d34:	4313      	orrs	r3, r2
 8009d36:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	015a      	lsls	r2, r3, #5
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	4413      	add	r3, r2
 8009d40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d11a      	bne.n	8009d84 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009d4e:	68bb      	ldr	r3, [r7, #8]
 8009d50:	015a      	lsls	r2, r3, #5
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	4413      	add	r3, r2
 8009d56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d5a:	681a      	ldr	r2, [r3, #0]
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	689b      	ldr	r3, [r3, #8]
 8009d60:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	791b      	ldrb	r3, [r3, #4]
 8009d68:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009d6a:	430b      	orrs	r3, r1
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	68ba      	ldr	r2, [r7, #8]
 8009d70:	0151      	lsls	r1, r2, #5
 8009d72:	68fa      	ldr	r2, [r7, #12]
 8009d74:	440a      	add	r2, r1
 8009d76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009d82:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3714      	adds	r7, #20
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
	...

08009d94 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	785b      	ldrb	r3, [r3, #1]
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d161      	bne.n	8009e74 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	015a      	lsls	r2, r3, #5
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	4413      	add	r3, r2
 8009db8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009dc2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009dc6:	d11f      	bne.n	8009e08 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	015a      	lsls	r2, r3, #5
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	4413      	add	r3, r2
 8009dd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	68ba      	ldr	r2, [r7, #8]
 8009dd8:	0151      	lsls	r1, r2, #5
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	440a      	add	r2, r1
 8009dde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009de2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009de6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	015a      	lsls	r2, r3, #5
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	4413      	add	r3, r2
 8009df0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	68ba      	ldr	r2, [r7, #8]
 8009df8:	0151      	lsls	r1, r2, #5
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	440a      	add	r2, r1
 8009dfe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009e06:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e0e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	f003 030f 	and.w	r3, r3, #15
 8009e18:	2101      	movs	r1, #1
 8009e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	43db      	mvns	r3, r3
 8009e22:	68f9      	ldr	r1, [r7, #12]
 8009e24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e28:	4013      	ands	r3, r2
 8009e2a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e32:	69da      	ldr	r2, [r3, #28]
 8009e34:	683b      	ldr	r3, [r7, #0]
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	f003 030f 	and.w	r3, r3, #15
 8009e3c:	2101      	movs	r1, #1
 8009e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	43db      	mvns	r3, r3
 8009e46:	68f9      	ldr	r1, [r7, #12]
 8009e48:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	015a      	lsls	r2, r3, #5
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	4413      	add	r3, r2
 8009e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e5c:	681a      	ldr	r2, [r3, #0]
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	0159      	lsls	r1, r3, #5
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	440b      	add	r3, r1
 8009e66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	4b35      	ldr	r3, [pc, #212]	@ (8009f44 <USB_DeactivateEndpoint+0x1b0>)
 8009e6e:	4013      	ands	r3, r2
 8009e70:	600b      	str	r3, [r1, #0]
 8009e72:	e060      	b.n	8009f36 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	015a      	lsls	r2, r3, #5
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	4413      	add	r3, r2
 8009e7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e8a:	d11f      	bne.n	8009ecc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	015a      	lsls	r2, r3, #5
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	4413      	add	r3, r2
 8009e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68ba      	ldr	r2, [r7, #8]
 8009e9c:	0151      	lsls	r1, r2, #5
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	440a      	add	r2, r1
 8009ea2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ea6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009eaa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	015a      	lsls	r2, r3, #5
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	4413      	add	r3, r2
 8009eb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	68ba      	ldr	r2, [r7, #8]
 8009ebc:	0151      	lsls	r1, r2, #5
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	440a      	add	r2, r1
 8009ec2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ec6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009eca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ed2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	f003 030f 	and.w	r3, r3, #15
 8009edc:	2101      	movs	r1, #1
 8009ede:	fa01 f303 	lsl.w	r3, r1, r3
 8009ee2:	041b      	lsls	r3, r3, #16
 8009ee4:	43db      	mvns	r3, r3
 8009ee6:	68f9      	ldr	r1, [r7, #12]
 8009ee8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009eec:	4013      	ands	r3, r2
 8009eee:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ef6:	69da      	ldr	r2, [r3, #28]
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	781b      	ldrb	r3, [r3, #0]
 8009efc:	f003 030f 	and.w	r3, r3, #15
 8009f00:	2101      	movs	r1, #1
 8009f02:	fa01 f303 	lsl.w	r3, r1, r3
 8009f06:	041b      	lsls	r3, r3, #16
 8009f08:	43db      	mvns	r3, r3
 8009f0a:	68f9      	ldr	r1, [r7, #12]
 8009f0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f10:	4013      	ands	r3, r2
 8009f12:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	015a      	lsls	r2, r3, #5
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	4413      	add	r3, r2
 8009f1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f20:	681a      	ldr	r2, [r3, #0]
 8009f22:	68bb      	ldr	r3, [r7, #8]
 8009f24:	0159      	lsls	r1, r3, #5
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	440b      	add	r3, r1
 8009f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f2e:	4619      	mov	r1, r3
 8009f30:	4b05      	ldr	r3, [pc, #20]	@ (8009f48 <USB_DeactivateEndpoint+0x1b4>)
 8009f32:	4013      	ands	r3, r2
 8009f34:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009f36:	2300      	movs	r3, #0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3714      	adds	r7, #20
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr
 8009f44:	ec337800 	.word	0xec337800
 8009f48:	eff37800 	.word	0xeff37800

08009f4c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b08a      	sub	sp, #40	@ 0x28
 8009f50:	af02      	add	r7, sp, #8
 8009f52:	60f8      	str	r0, [r7, #12]
 8009f54:	60b9      	str	r1, [r7, #8]
 8009f56:	4613      	mov	r3, r2
 8009f58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	785b      	ldrb	r3, [r3, #1]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	f040 817f 	bne.w	800a26c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	691b      	ldr	r3, [r3, #16]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d132      	bne.n	8009fdc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009f76:	69bb      	ldr	r3, [r7, #24]
 8009f78:	015a      	lsls	r2, r3, #5
 8009f7a:	69fb      	ldr	r3, [r7, #28]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	69ba      	ldr	r2, [r7, #24]
 8009f86:	0151      	lsls	r1, r2, #5
 8009f88:	69fa      	ldr	r2, [r7, #28]
 8009f8a:	440a      	add	r2, r1
 8009f8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f90:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009f94:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009f98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009f9a:	69bb      	ldr	r3, [r7, #24]
 8009f9c:	015a      	lsls	r2, r3, #5
 8009f9e:	69fb      	ldr	r3, [r7, #28]
 8009fa0:	4413      	add	r3, r2
 8009fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fa6:	691b      	ldr	r3, [r3, #16]
 8009fa8:	69ba      	ldr	r2, [r7, #24]
 8009faa:	0151      	lsls	r1, r2, #5
 8009fac:	69fa      	ldr	r2, [r7, #28]
 8009fae:	440a      	add	r2, r1
 8009fb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009fb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	015a      	lsls	r2, r3, #5
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fc6:	691b      	ldr	r3, [r3, #16]
 8009fc8:	69ba      	ldr	r2, [r7, #24]
 8009fca:	0151      	lsls	r1, r2, #5
 8009fcc:	69fa      	ldr	r2, [r7, #28]
 8009fce:	440a      	add	r2, r1
 8009fd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fd4:	0cdb      	lsrs	r3, r3, #19
 8009fd6:	04db      	lsls	r3, r3, #19
 8009fd8:	6113      	str	r3, [r2, #16]
 8009fda:	e097      	b.n	800a10c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	015a      	lsls	r2, r3, #5
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	4413      	add	r3, r2
 8009fe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	69ba      	ldr	r2, [r7, #24]
 8009fec:	0151      	lsls	r1, r2, #5
 8009fee:	69fa      	ldr	r2, [r7, #28]
 8009ff0:	440a      	add	r2, r1
 8009ff2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ff6:	0cdb      	lsrs	r3, r3, #19
 8009ff8:	04db      	lsls	r3, r3, #19
 8009ffa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009ffc:	69bb      	ldr	r3, [r7, #24]
 8009ffe:	015a      	lsls	r2, r3, #5
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	4413      	add	r3, r2
 800a004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	69ba      	ldr	r2, [r7, #24]
 800a00c:	0151      	lsls	r1, r2, #5
 800a00e:	69fa      	ldr	r2, [r7, #28]
 800a010:	440a      	add	r2, r1
 800a012:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a016:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a01a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a01e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800a020:	69bb      	ldr	r3, [r7, #24]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d11a      	bne.n	800a05c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	691a      	ldr	r2, [r3, #16]
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	689b      	ldr	r3, [r3, #8]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d903      	bls.n	800a03a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	689a      	ldr	r2, [r3, #8]
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	015a      	lsls	r2, r3, #5
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	4413      	add	r3, r2
 800a042:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a046:	691b      	ldr	r3, [r3, #16]
 800a048:	69ba      	ldr	r2, [r7, #24]
 800a04a:	0151      	lsls	r1, r2, #5
 800a04c:	69fa      	ldr	r2, [r7, #28]
 800a04e:	440a      	add	r2, r1
 800a050:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a054:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a058:	6113      	str	r3, [r2, #16]
 800a05a:	e044      	b.n	800a0e6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	691a      	ldr	r2, [r3, #16]
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	4413      	add	r3, r2
 800a066:	1e5a      	subs	r2, r3, #1
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	689b      	ldr	r3, [r3, #8]
 800a06c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a070:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	015a      	lsls	r2, r3, #5
 800a076:	69fb      	ldr	r3, [r7, #28]
 800a078:	4413      	add	r3, r2
 800a07a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a07e:	691a      	ldr	r2, [r3, #16]
 800a080:	8afb      	ldrh	r3, [r7, #22]
 800a082:	04d9      	lsls	r1, r3, #19
 800a084:	4ba4      	ldr	r3, [pc, #656]	@ (800a318 <USB_EPStartXfer+0x3cc>)
 800a086:	400b      	ands	r3, r1
 800a088:	69b9      	ldr	r1, [r7, #24]
 800a08a:	0148      	lsls	r0, r1, #5
 800a08c:	69f9      	ldr	r1, [r7, #28]
 800a08e:	4401      	add	r1, r0
 800a090:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a094:	4313      	orrs	r3, r2
 800a096:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	791b      	ldrb	r3, [r3, #4]
 800a09c:	2b01      	cmp	r3, #1
 800a09e:	d122      	bne.n	800a0e6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	015a      	lsls	r2, r3, #5
 800a0a4:	69fb      	ldr	r3, [r7, #28]
 800a0a6:	4413      	add	r3, r2
 800a0a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	69ba      	ldr	r2, [r7, #24]
 800a0b0:	0151      	lsls	r1, r2, #5
 800a0b2:	69fa      	ldr	r2, [r7, #28]
 800a0b4:	440a      	add	r2, r1
 800a0b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a0ba:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800a0be:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 800a0c0:	69bb      	ldr	r3, [r7, #24]
 800a0c2:	015a      	lsls	r2, r3, #5
 800a0c4:	69fb      	ldr	r3, [r7, #28]
 800a0c6:	4413      	add	r3, r2
 800a0c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0cc:	691a      	ldr	r2, [r3, #16]
 800a0ce:	8afb      	ldrh	r3, [r7, #22]
 800a0d0:	075b      	lsls	r3, r3, #29
 800a0d2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800a0d6:	69b9      	ldr	r1, [r7, #24]
 800a0d8:	0148      	lsls	r0, r1, #5
 800a0da:	69f9      	ldr	r1, [r7, #28]
 800a0dc:	4401      	add	r1, r0
 800a0de:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a0e6:	69bb      	ldr	r3, [r7, #24]
 800a0e8:	015a      	lsls	r2, r3, #5
 800a0ea:	69fb      	ldr	r3, [r7, #28]
 800a0ec:	4413      	add	r3, r2
 800a0ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a0f2:	691a      	ldr	r2, [r3, #16]
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0fc:	69b9      	ldr	r1, [r7, #24]
 800a0fe:	0148      	lsls	r0, r1, #5
 800a100:	69f9      	ldr	r1, [r7, #28]
 800a102:	4401      	add	r1, r0
 800a104:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800a108:	4313      	orrs	r3, r2
 800a10a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a10c:	79fb      	ldrb	r3, [r7, #7]
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d14b      	bne.n	800a1aa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	69db      	ldr	r3, [r3, #28]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d009      	beq.n	800a12e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a11a:	69bb      	ldr	r3, [r7, #24]
 800a11c:	015a      	lsls	r2, r3, #5
 800a11e:	69fb      	ldr	r3, [r7, #28]
 800a120:	4413      	add	r3, r2
 800a122:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a126:	461a      	mov	r2, r3
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	69db      	ldr	r3, [r3, #28]
 800a12c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a12e:	68bb      	ldr	r3, [r7, #8]
 800a130:	791b      	ldrb	r3, [r3, #4]
 800a132:	2b01      	cmp	r3, #1
 800a134:	d128      	bne.n	800a188 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a136:	69fb      	ldr	r3, [r7, #28]
 800a138:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a13c:	689b      	ldr	r3, [r3, #8]
 800a13e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a142:	2b00      	cmp	r3, #0
 800a144:	d110      	bne.n	800a168 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	015a      	lsls	r2, r3, #5
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	4413      	add	r3, r2
 800a14e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	69ba      	ldr	r2, [r7, #24]
 800a156:	0151      	lsls	r1, r2, #5
 800a158:	69fa      	ldr	r2, [r7, #28]
 800a15a:	440a      	add	r2, r1
 800a15c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a160:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a164:	6013      	str	r3, [r2, #0]
 800a166:	e00f      	b.n	800a188 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a168:	69bb      	ldr	r3, [r7, #24]
 800a16a:	015a      	lsls	r2, r3, #5
 800a16c:	69fb      	ldr	r3, [r7, #28]
 800a16e:	4413      	add	r3, r2
 800a170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	69ba      	ldr	r2, [r7, #24]
 800a178:	0151      	lsls	r1, r2, #5
 800a17a:	69fa      	ldr	r2, [r7, #28]
 800a17c:	440a      	add	r2, r1
 800a17e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a182:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a186:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	015a      	lsls	r2, r3, #5
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	4413      	add	r3, r2
 800a190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	69ba      	ldr	r2, [r7, #24]
 800a198:	0151      	lsls	r1, r2, #5
 800a19a:	69fa      	ldr	r2, [r7, #28]
 800a19c:	440a      	add	r2, r1
 800a19e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1a2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a1a6:	6013      	str	r3, [r2, #0]
 800a1a8:	e166      	b.n	800a478 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	015a      	lsls	r2, r3, #5
 800a1ae:	69fb      	ldr	r3, [r7, #28]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	69ba      	ldr	r2, [r7, #24]
 800a1ba:	0151      	lsls	r1, r2, #5
 800a1bc:	69fa      	ldr	r2, [r7, #28]
 800a1be:	440a      	add	r2, r1
 800a1c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a1c4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a1c8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	791b      	ldrb	r3, [r3, #4]
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d015      	beq.n	800a1fe <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	f000 814e 	beq.w	800a478 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	781b      	ldrb	r3, [r3, #0]
 800a1e8:	f003 030f 	and.w	r3, r3, #15
 800a1ec:	2101      	movs	r1, #1
 800a1ee:	fa01 f303 	lsl.w	r3, r1, r3
 800a1f2:	69f9      	ldr	r1, [r7, #28]
 800a1f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	634b      	str	r3, [r1, #52]	@ 0x34
 800a1fc:	e13c      	b.n	800a478 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a204:	689b      	ldr	r3, [r3, #8]
 800a206:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d110      	bne.n	800a230 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	015a      	lsls	r2, r3, #5
 800a212:	69fb      	ldr	r3, [r7, #28]
 800a214:	4413      	add	r3, r2
 800a216:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	69ba      	ldr	r2, [r7, #24]
 800a21e:	0151      	lsls	r1, r2, #5
 800a220:	69fa      	ldr	r2, [r7, #28]
 800a222:	440a      	add	r2, r1
 800a224:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a228:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a22c:	6013      	str	r3, [r2, #0]
 800a22e:	e00f      	b.n	800a250 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a230:	69bb      	ldr	r3, [r7, #24]
 800a232:	015a      	lsls	r2, r3, #5
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	4413      	add	r3, r2
 800a238:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	69ba      	ldr	r2, [r7, #24]
 800a240:	0151      	lsls	r1, r2, #5
 800a242:	69fa      	ldr	r2, [r7, #28]
 800a244:	440a      	add	r2, r1
 800a246:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a24a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a24e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	68d9      	ldr	r1, [r3, #12]
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	781a      	ldrb	r2, [r3, #0]
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	691b      	ldr	r3, [r3, #16]
 800a25c:	b298      	uxth	r0, r3
 800a25e:	79fb      	ldrb	r3, [r7, #7]
 800a260:	9300      	str	r3, [sp, #0]
 800a262:	4603      	mov	r3, r0
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f000 f9b9 	bl	800a5dc <USB_WritePacket>
 800a26a:	e105      	b.n	800a478 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	015a      	lsls	r2, r3, #5
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	4413      	add	r3, r2
 800a274:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	69ba      	ldr	r2, [r7, #24]
 800a27c:	0151      	lsls	r1, r2, #5
 800a27e:	69fa      	ldr	r2, [r7, #28]
 800a280:	440a      	add	r2, r1
 800a282:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a286:	0cdb      	lsrs	r3, r3, #19
 800a288:	04db      	lsls	r3, r3, #19
 800a28a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	015a      	lsls	r2, r3, #5
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	4413      	add	r3, r2
 800a294:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	69ba      	ldr	r2, [r7, #24]
 800a29c:	0151      	lsls	r1, r2, #5
 800a29e:	69fa      	ldr	r2, [r7, #28]
 800a2a0:	440a      	add	r2, r1
 800a2a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2a6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a2aa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a2ae:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a2b0:	69bb      	ldr	r3, [r7, #24]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d132      	bne.n	800a31c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d003      	beq.n	800a2c6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	689a      	ldr	r2, [r3, #8]
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	689a      	ldr	r2, [r3, #8]
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	015a      	lsls	r2, r3, #5
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2da:	691a      	ldr	r2, [r3, #16]
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	6a1b      	ldr	r3, [r3, #32]
 800a2e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2e4:	69b9      	ldr	r1, [r7, #24]
 800a2e6:	0148      	lsls	r0, r1, #5
 800a2e8:	69f9      	ldr	r1, [r7, #28]
 800a2ea:	4401      	add	r1, r0
 800a2ec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a2f4:	69bb      	ldr	r3, [r7, #24]
 800a2f6:	015a      	lsls	r2, r3, #5
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a300:	691b      	ldr	r3, [r3, #16]
 800a302:	69ba      	ldr	r2, [r7, #24]
 800a304:	0151      	lsls	r1, r2, #5
 800a306:	69fa      	ldr	r2, [r7, #28]
 800a308:	440a      	add	r2, r1
 800a30a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a30e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a312:	6113      	str	r3, [r2, #16]
 800a314:	e062      	b.n	800a3dc <USB_EPStartXfer+0x490>
 800a316:	bf00      	nop
 800a318:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d123      	bne.n	800a36c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	015a      	lsls	r2, r3, #5
 800a328:	69fb      	ldr	r3, [r7, #28]
 800a32a:	4413      	add	r3, r2
 800a32c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a330:	691a      	ldr	r2, [r3, #16]
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a33a:	69b9      	ldr	r1, [r7, #24]
 800a33c:	0148      	lsls	r0, r1, #5
 800a33e:	69f9      	ldr	r1, [r7, #28]
 800a340:	4401      	add	r1, r0
 800a342:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a346:	4313      	orrs	r3, r2
 800a348:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a34a:	69bb      	ldr	r3, [r7, #24]
 800a34c:	015a      	lsls	r2, r3, #5
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	4413      	add	r3, r2
 800a352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a356:	691b      	ldr	r3, [r3, #16]
 800a358:	69ba      	ldr	r2, [r7, #24]
 800a35a:	0151      	lsls	r1, r2, #5
 800a35c:	69fa      	ldr	r2, [r7, #28]
 800a35e:	440a      	add	r2, r1
 800a360:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a364:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a368:	6113      	str	r3, [r2, #16]
 800a36a:	e037      	b.n	800a3dc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a36c:	68bb      	ldr	r3, [r7, #8]
 800a36e:	691a      	ldr	r2, [r3, #16]
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	4413      	add	r3, r2
 800a376:	1e5a      	subs	r2, r3, #1
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a380:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	8afa      	ldrh	r2, [r7, #22]
 800a388:	fb03 f202 	mul.w	r2, r3, r2
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	015a      	lsls	r2, r3, #5
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	4413      	add	r3, r2
 800a398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a39c:	691a      	ldr	r2, [r3, #16]
 800a39e:	8afb      	ldrh	r3, [r7, #22]
 800a3a0:	04d9      	lsls	r1, r3, #19
 800a3a2:	4b38      	ldr	r3, [pc, #224]	@ (800a484 <USB_EPStartXfer+0x538>)
 800a3a4:	400b      	ands	r3, r1
 800a3a6:	69b9      	ldr	r1, [r7, #24]
 800a3a8:	0148      	lsls	r0, r1, #5
 800a3aa:	69f9      	ldr	r1, [r7, #28]
 800a3ac:	4401      	add	r1, r0
 800a3ae:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a3b6:	69bb      	ldr	r3, [r7, #24]
 800a3b8:	015a      	lsls	r2, r3, #5
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	4413      	add	r3, r2
 800a3be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3c2:	691a      	ldr	r2, [r3, #16]
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	6a1b      	ldr	r3, [r3, #32]
 800a3c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3cc:	69b9      	ldr	r1, [r7, #24]
 800a3ce:	0148      	lsls	r0, r1, #5
 800a3d0:	69f9      	ldr	r1, [r7, #28]
 800a3d2:	4401      	add	r1, r0
 800a3d4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a3dc:	79fb      	ldrb	r3, [r7, #7]
 800a3de:	2b01      	cmp	r3, #1
 800a3e0:	d10d      	bne.n	800a3fe <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	68db      	ldr	r3, [r3, #12]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d009      	beq.n	800a3fe <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	68d9      	ldr	r1, [r3, #12]
 800a3ee:	69bb      	ldr	r3, [r7, #24]
 800a3f0:	015a      	lsls	r2, r3, #5
 800a3f2:	69fb      	ldr	r3, [r7, #28]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3fa:	460a      	mov	r2, r1
 800a3fc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a3fe:	68bb      	ldr	r3, [r7, #8]
 800a400:	791b      	ldrb	r3, [r3, #4]
 800a402:	2b01      	cmp	r3, #1
 800a404:	d128      	bne.n	800a458 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a412:	2b00      	cmp	r3, #0
 800a414:	d110      	bne.n	800a438 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a416:	69bb      	ldr	r3, [r7, #24]
 800a418:	015a      	lsls	r2, r3, #5
 800a41a:	69fb      	ldr	r3, [r7, #28]
 800a41c:	4413      	add	r3, r2
 800a41e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	69ba      	ldr	r2, [r7, #24]
 800a426:	0151      	lsls	r1, r2, #5
 800a428:	69fa      	ldr	r2, [r7, #28]
 800a42a:	440a      	add	r2, r1
 800a42c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a430:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a434:	6013      	str	r3, [r2, #0]
 800a436:	e00f      	b.n	800a458 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	015a      	lsls	r2, r3, #5
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	4413      	add	r3, r2
 800a440:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	69ba      	ldr	r2, [r7, #24]
 800a448:	0151      	lsls	r1, r2, #5
 800a44a:	69fa      	ldr	r2, [r7, #28]
 800a44c:	440a      	add	r2, r1
 800a44e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a452:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a456:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a458:	69bb      	ldr	r3, [r7, #24]
 800a45a:	015a      	lsls	r2, r3, #5
 800a45c:	69fb      	ldr	r3, [r7, #28]
 800a45e:	4413      	add	r3, r2
 800a460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	69ba      	ldr	r2, [r7, #24]
 800a468:	0151      	lsls	r1, r2, #5
 800a46a:	69fa      	ldr	r2, [r7, #28]
 800a46c:	440a      	add	r2, r1
 800a46e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a472:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a476:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3720      	adds	r7, #32
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	1ff80000 	.word	0x1ff80000

0800a488 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a488:	b480      	push	{r7}
 800a48a:	b087      	sub	sp, #28
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a492:	2300      	movs	r3, #0
 800a494:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a496:	2300      	movs	r3, #0
 800a498:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	785b      	ldrb	r3, [r3, #1]
 800a4a2:	2b01      	cmp	r3, #1
 800a4a4:	d14a      	bne.n	800a53c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	781b      	ldrb	r3, [r3, #0]
 800a4aa:	015a      	lsls	r2, r3, #5
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	4413      	add	r3, r2
 800a4b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a4ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a4be:	f040 8086 	bne.w	800a5ce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	781b      	ldrb	r3, [r3, #0]
 800a4c6:	015a      	lsls	r2, r3, #5
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	4413      	add	r3, r2
 800a4cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	683a      	ldr	r2, [r7, #0]
 800a4d4:	7812      	ldrb	r2, [r2, #0]
 800a4d6:	0151      	lsls	r1, r2, #5
 800a4d8:	693a      	ldr	r2, [r7, #16]
 800a4da:	440a      	add	r2, r1
 800a4dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a4e0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a4e4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	015a      	lsls	r2, r3, #5
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	4413      	add	r3, r2
 800a4f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	683a      	ldr	r2, [r7, #0]
 800a4f8:	7812      	ldrb	r2, [r2, #0]
 800a4fa:	0151      	lsls	r1, r2, #5
 800a4fc:	693a      	ldr	r2, [r7, #16]
 800a4fe:	440a      	add	r2, r1
 800a500:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a504:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a508:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	3301      	adds	r3, #1
 800a50e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a516:	4293      	cmp	r3, r2
 800a518:	d902      	bls.n	800a520 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	75fb      	strb	r3, [r7, #23]
          break;
 800a51e:	e056      	b.n	800a5ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	781b      	ldrb	r3, [r3, #0]
 800a524:	015a      	lsls	r2, r3, #5
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	4413      	add	r3, r2
 800a52a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a534:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a538:	d0e7      	beq.n	800a50a <USB_EPStopXfer+0x82>
 800a53a:	e048      	b.n	800a5ce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	015a      	lsls	r2, r3, #5
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	4413      	add	r3, r2
 800a546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a550:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a554:	d13b      	bne.n	800a5ce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	015a      	lsls	r2, r3, #5
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	4413      	add	r3, r2
 800a560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	683a      	ldr	r2, [r7, #0]
 800a568:	7812      	ldrb	r2, [r2, #0]
 800a56a:	0151      	lsls	r1, r2, #5
 800a56c:	693a      	ldr	r2, [r7, #16]
 800a56e:	440a      	add	r2, r1
 800a570:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a574:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a578:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	015a      	lsls	r2, r3, #5
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	4413      	add	r3, r2
 800a584:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	683a      	ldr	r2, [r7, #0]
 800a58c:	7812      	ldrb	r2, [r2, #0]
 800a58e:	0151      	lsls	r1, r2, #5
 800a590:	693a      	ldr	r2, [r7, #16]
 800a592:	440a      	add	r2, r1
 800a594:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a598:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a59c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	3301      	adds	r3, #1
 800a5a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d902      	bls.n	800a5b4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	75fb      	strb	r3, [r7, #23]
          break;
 800a5b2:	e00c      	b.n	800a5ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	015a      	lsls	r2, r3, #5
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	4413      	add	r3, r2
 800a5be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a5c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a5cc:	d0e7      	beq.n	800a59e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a5ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	371c      	adds	r7, #28
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b089      	sub	sp, #36	@ 0x24
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	60f8      	str	r0, [r7, #12]
 800a5e4:	60b9      	str	r1, [r7, #8]
 800a5e6:	4611      	mov	r1, r2
 800a5e8:	461a      	mov	r2, r3
 800a5ea:	460b      	mov	r3, r1
 800a5ec:	71fb      	strb	r3, [r7, #7]
 800a5ee:	4613      	mov	r3, r2
 800a5f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a5fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d123      	bne.n	800a64a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a602:	88bb      	ldrh	r3, [r7, #4]
 800a604:	3303      	adds	r3, #3
 800a606:	089b      	lsrs	r3, r3, #2
 800a608:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a60a:	2300      	movs	r3, #0
 800a60c:	61bb      	str	r3, [r7, #24]
 800a60e:	e018      	b.n	800a642 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a610:	79fb      	ldrb	r3, [r7, #7]
 800a612:	031a      	lsls	r2, r3, #12
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	4413      	add	r3, r2
 800a618:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a61c:	461a      	mov	r2, r3
 800a61e:	69fb      	ldr	r3, [r7, #28]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a624:	69fb      	ldr	r3, [r7, #28]
 800a626:	3301      	adds	r3, #1
 800a628:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a62a:	69fb      	ldr	r3, [r7, #28]
 800a62c:	3301      	adds	r3, #1
 800a62e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a630:	69fb      	ldr	r3, [r7, #28]
 800a632:	3301      	adds	r3, #1
 800a634:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a636:	69fb      	ldr	r3, [r7, #28]
 800a638:	3301      	adds	r3, #1
 800a63a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	3301      	adds	r3, #1
 800a640:	61bb      	str	r3, [r7, #24]
 800a642:	69ba      	ldr	r2, [r7, #24]
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	429a      	cmp	r2, r3
 800a648:	d3e2      	bcc.n	800a610 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3724      	adds	r7, #36	@ 0x24
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a658:	b480      	push	{r7}
 800a65a:	b08b      	sub	sp, #44	@ 0x2c
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	4613      	mov	r3, r2
 800a664:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a66e:	88fb      	ldrh	r3, [r7, #6]
 800a670:	089b      	lsrs	r3, r3, #2
 800a672:	b29b      	uxth	r3, r3
 800a674:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a676:	88fb      	ldrh	r3, [r7, #6]
 800a678:	f003 0303 	and.w	r3, r3, #3
 800a67c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a67e:	2300      	movs	r3, #0
 800a680:	623b      	str	r3, [r7, #32]
 800a682:	e014      	b.n	800a6ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a684:	69bb      	ldr	r3, [r7, #24]
 800a686:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a692:	3301      	adds	r3, #1
 800a694:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a698:	3301      	adds	r3, #1
 800a69a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a69c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a69e:	3301      	adds	r3, #1
 800a6a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a6a8:	6a3b      	ldr	r3, [r7, #32]
 800a6aa:	3301      	adds	r3, #1
 800a6ac:	623b      	str	r3, [r7, #32]
 800a6ae:	6a3a      	ldr	r2, [r7, #32]
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d3e6      	bcc.n	800a684 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a6b6:	8bfb      	ldrh	r3, [r7, #30]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d01e      	beq.n	800a6fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	f107 0310 	add.w	r3, r7, #16
 800a6cc:	6812      	ldr	r2, [r2, #0]
 800a6ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a6d0:	693a      	ldr	r2, [r7, #16]
 800a6d2:	6a3b      	ldr	r3, [r7, #32]
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	00db      	lsls	r3, r3, #3
 800a6d8:	fa22 f303 	lsr.w	r3, r2, r3
 800a6dc:	b2da      	uxtb	r2, r3
 800a6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e0:	701a      	strb	r2, [r3, #0]
      i++;
 800a6e2:	6a3b      	ldr	r3, [r7, #32]
 800a6e4:	3301      	adds	r3, #1
 800a6e6:	623b      	str	r3, [r7, #32]
      pDest++;
 800a6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ea:	3301      	adds	r3, #1
 800a6ec:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a6ee:	8bfb      	ldrh	r3, [r7, #30]
 800a6f0:	3b01      	subs	r3, #1
 800a6f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a6f4:	8bfb      	ldrh	r3, [r7, #30]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d1ea      	bne.n	800a6d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	372c      	adds	r7, #44	@ 0x2c
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a708:	b480      	push	{r7}
 800a70a:	b085      	sub	sp, #20
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
 800a710:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	781b      	ldrb	r3, [r3, #0]
 800a71a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	785b      	ldrb	r3, [r3, #1]
 800a720:	2b01      	cmp	r3, #1
 800a722:	d12c      	bne.n	800a77e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a724:	68bb      	ldr	r3, [r7, #8]
 800a726:	015a      	lsls	r2, r3, #5
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	4413      	add	r3, r2
 800a72c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	2b00      	cmp	r3, #0
 800a734:	db12      	blt.n	800a75c <USB_EPSetStall+0x54>
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d00f      	beq.n	800a75c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	015a      	lsls	r2, r3, #5
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	4413      	add	r3, r2
 800a744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68ba      	ldr	r2, [r7, #8]
 800a74c:	0151      	lsls	r1, r2, #5
 800a74e:	68fa      	ldr	r2, [r7, #12]
 800a750:	440a      	add	r2, r1
 800a752:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a756:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a75a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a75c:	68bb      	ldr	r3, [r7, #8]
 800a75e:	015a      	lsls	r2, r3, #5
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	4413      	add	r3, r2
 800a764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	68ba      	ldr	r2, [r7, #8]
 800a76c:	0151      	lsls	r1, r2, #5
 800a76e:	68fa      	ldr	r2, [r7, #12]
 800a770:	440a      	add	r2, r1
 800a772:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a776:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a77a:	6013      	str	r3, [r2, #0]
 800a77c:	e02b      	b.n	800a7d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	015a      	lsls	r2, r3, #5
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	4413      	add	r3, r2
 800a786:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	db12      	blt.n	800a7b6 <USB_EPSetStall+0xae>
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00f      	beq.n	800a7b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	015a      	lsls	r2, r3, #5
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	4413      	add	r3, r2
 800a79e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	68ba      	ldr	r2, [r7, #8]
 800a7a6:	0151      	lsls	r1, r2, #5
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	440a      	add	r2, r1
 800a7ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a7b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	015a      	lsls	r2, r3, #5
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	4413      	add	r3, r2
 800a7be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	68ba      	ldr	r2, [r7, #8]
 800a7c6:	0151      	lsls	r1, r2, #5
 800a7c8:	68fa      	ldr	r2, [r7, #12]
 800a7ca:	440a      	add	r2, r1
 800a7cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a7d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a7d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a7d6:	2300      	movs	r3, #0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3714      	adds	r7, #20
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e2:	4770      	bx	lr

0800a7e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	785b      	ldrb	r3, [r3, #1]
 800a7fc:	2b01      	cmp	r3, #1
 800a7fe:	d128      	bne.n	800a852 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	015a      	lsls	r2, r3, #5
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	4413      	add	r3, r2
 800a808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	68ba      	ldr	r2, [r7, #8]
 800a810:	0151      	lsls	r1, r2, #5
 800a812:	68fa      	ldr	r2, [r7, #12]
 800a814:	440a      	add	r2, r1
 800a816:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a81a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a81e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	791b      	ldrb	r3, [r3, #4]
 800a824:	2b03      	cmp	r3, #3
 800a826:	d003      	beq.n	800a830 <USB_EPClearStall+0x4c>
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	791b      	ldrb	r3, [r3, #4]
 800a82c:	2b02      	cmp	r3, #2
 800a82e:	d138      	bne.n	800a8a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	015a      	lsls	r2, r3, #5
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	4413      	add	r3, r2
 800a838:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	68ba      	ldr	r2, [r7, #8]
 800a840:	0151      	lsls	r1, r2, #5
 800a842:	68fa      	ldr	r2, [r7, #12]
 800a844:	440a      	add	r2, r1
 800a846:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a84a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a84e:	6013      	str	r3, [r2, #0]
 800a850:	e027      	b.n	800a8a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a852:	68bb      	ldr	r3, [r7, #8]
 800a854:	015a      	lsls	r2, r3, #5
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	4413      	add	r3, r2
 800a85a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	0151      	lsls	r1, r2, #5
 800a864:	68fa      	ldr	r2, [r7, #12]
 800a866:	440a      	add	r2, r1
 800a868:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a86c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a870:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	791b      	ldrb	r3, [r3, #4]
 800a876:	2b03      	cmp	r3, #3
 800a878:	d003      	beq.n	800a882 <USB_EPClearStall+0x9e>
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	791b      	ldrb	r3, [r3, #4]
 800a87e:	2b02      	cmp	r3, #2
 800a880:	d10f      	bne.n	800a8a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	015a      	lsls	r2, r3, #5
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	4413      	add	r3, r2
 800a88a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	68ba      	ldr	r2, [r7, #8]
 800a892:	0151      	lsls	r1, r2, #5
 800a894:	68fa      	ldr	r2, [r7, #12]
 800a896:	440a      	add	r2, r1
 800a898:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a89c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a8a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3714      	adds	r7, #20
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b085      	sub	sp, #20
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	460b      	mov	r3, r1
 800a8ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	68fa      	ldr	r2, [r7, #12]
 800a8ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a8ce:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a8d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	78fb      	ldrb	r3, [r7, #3]
 800a8de:	011b      	lsls	r3, r3, #4
 800a8e0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a8e4:	68f9      	ldr	r1, [r7, #12]
 800a8e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3714      	adds	r7, #20
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b085      	sub	sp, #20
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	68fa      	ldr	r2, [r7, #12]
 800a912:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a916:	f023 0303 	bic.w	r3, r3, #3
 800a91a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a92a:	f023 0302 	bic.w	r3, r3, #2
 800a92e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	3714      	adds	r7, #20
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr

0800a93e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a93e:	b480      	push	{r7}
 800a940:	b085      	sub	sp, #20
 800a942:	af00      	add	r7, sp, #0
 800a944:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	68fa      	ldr	r2, [r7, #12]
 800a954:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a958:	f023 0303 	bic.w	r3, r3, #3
 800a95c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	68fa      	ldr	r2, [r7, #12]
 800a968:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a96c:	f043 0302 	orr.w	r3, r3, #2
 800a970:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a972:	2300      	movs	r3, #0
}
 800a974:	4618      	mov	r0, r3
 800a976:	3714      	adds	r7, #20
 800a978:	46bd      	mov	sp, r7
 800a97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97e:	4770      	bx	lr

0800a980 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a980:	b480      	push	{r7}
 800a982:	b085      	sub	sp, #20
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	695b      	ldr	r3, [r3, #20]
 800a98c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	699b      	ldr	r3, [r3, #24]
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	4013      	ands	r3, r2
 800a996:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a998:	68fb      	ldr	r3, [r7, #12]
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3714      	adds	r7, #20
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr

0800a9a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a9a6:	b480      	push	{r7}
 800a9a8:	b085      	sub	sp, #20
 800a9aa:	af00      	add	r7, sp, #0
 800a9ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9b8:	699b      	ldr	r3, [r3, #24]
 800a9ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9c2:	69db      	ldr	r3, [r3, #28]
 800a9c4:	68ba      	ldr	r2, [r7, #8]
 800a9c6:	4013      	ands	r3, r2
 800a9c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	0c1b      	lsrs	r3, r3, #16
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3714      	adds	r7, #20
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d8:	4770      	bx	lr

0800a9da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a9da:	b480      	push	{r7}
 800a9dc:	b085      	sub	sp, #20
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9ec:	699b      	ldr	r3, [r3, #24]
 800a9ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9f6:	69db      	ldr	r3, [r3, #28]
 800a9f8:	68ba      	ldr	r2, [r7, #8]
 800a9fa:	4013      	ands	r3, r2
 800a9fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	b29b      	uxth	r3, r3
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3714      	adds	r7, #20
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr

0800aa0e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aa0e:	b480      	push	{r7}
 800aa10:	b085      	sub	sp, #20
 800aa12:	af00      	add	r7, sp, #0
 800aa14:	6078      	str	r0, [r7, #4]
 800aa16:	460b      	mov	r3, r1
 800aa18:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800aa1e:	78fb      	ldrb	r3, [r7, #3]
 800aa20:	015a      	lsls	r2, r3, #5
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	4413      	add	r3, r2
 800aa26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa34:	695b      	ldr	r3, [r3, #20]
 800aa36:	68ba      	ldr	r2, [r7, #8]
 800aa38:	4013      	ands	r3, r2
 800aa3a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa3c:	68bb      	ldr	r3, [r7, #8]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3714      	adds	r7, #20
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr

0800aa4a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aa4a:	b480      	push	{r7}
 800aa4c:	b087      	sub	sp, #28
 800aa4e:	af00      	add	r7, sp, #0
 800aa50:	6078      	str	r0, [r7, #4]
 800aa52:	460b      	mov	r3, r1
 800aa54:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa60:	691b      	ldr	r3, [r3, #16]
 800aa62:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800aa64:	697b      	ldr	r3, [r7, #20]
 800aa66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aa6c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800aa6e:	78fb      	ldrb	r3, [r7, #3]
 800aa70:	f003 030f 	and.w	r3, r3, #15
 800aa74:	68fa      	ldr	r2, [r7, #12]
 800aa76:	fa22 f303 	lsr.w	r3, r2, r3
 800aa7a:	01db      	lsls	r3, r3, #7
 800aa7c:	b2db      	uxtb	r3, r3
 800aa7e:	693a      	ldr	r2, [r7, #16]
 800aa80:	4313      	orrs	r3, r2
 800aa82:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800aa84:	78fb      	ldrb	r3, [r7, #3]
 800aa86:	015a      	lsls	r2, r3, #5
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	693a      	ldr	r2, [r7, #16]
 800aa94:	4013      	ands	r3, r2
 800aa96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aa98:	68bb      	ldr	r3, [r7, #8]
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	371c      	adds	r7, #28
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr

0800aaa6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800aaa6:	b480      	push	{r7}
 800aaa8:	b083      	sub	sp, #12
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	695b      	ldr	r3, [r3, #20]
 800aab2:	f003 0301 	and.w	r3, r3, #1
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	370c      	adds	r7, #12
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800aac2:	b480      	push	{r7}
 800aac4:	b085      	sub	sp, #20
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aadc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800aae0:	f023 0307 	bic.w	r3, r3, #7
 800aae4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	68fa      	ldr	r2, [r7, #12]
 800aaf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800aaf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aaf8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aafa:	2300      	movs	r3, #0
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3714      	adds	r7, #20
 800ab00:	46bd      	mov	sp, r7
 800ab02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab06:	4770      	bx	lr

0800ab08 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b087      	sub	sp, #28
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	60f8      	str	r0, [r7, #12]
 800ab10:	460b      	mov	r3, r1
 800ab12:	607a      	str	r2, [r7, #4]
 800ab14:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	333c      	adds	r3, #60	@ 0x3c
 800ab1e:	3304      	adds	r3, #4
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	4a26      	ldr	r2, [pc, #152]	@ (800abc0 <USB_EP0_OutStart+0xb8>)
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	d90a      	bls.n	800ab42 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab3c:	d101      	bne.n	800ab42 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ab3e:	2300      	movs	r3, #0
 800ab40:	e037      	b.n	800abb2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab48:	461a      	mov	r2, r3
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab54:	691b      	ldr	r3, [r3, #16]
 800ab56:	697a      	ldr	r2, [r7, #20]
 800ab58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab5c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ab60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	697a      	ldr	r2, [r7, #20]
 800ab6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab70:	f043 0318 	orr.w	r3, r3, #24
 800ab74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab7c:	691b      	ldr	r3, [r3, #16]
 800ab7e:	697a      	ldr	r2, [r7, #20]
 800ab80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab84:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ab88:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ab8a:	7afb      	ldrb	r3, [r7, #11]
 800ab8c:	2b01      	cmp	r3, #1
 800ab8e:	d10f      	bne.n	800abb0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab96:	461a      	mov	r2, r3
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	697a      	ldr	r2, [r7, #20]
 800aba6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800abaa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800abae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800abb0:	2300      	movs	r3, #0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	371c      	adds	r7, #28
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	4f54300a 	.word	0x4f54300a

0800abc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b085      	sub	sp, #20
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800abcc:	2300      	movs	r3, #0
 800abce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	3301      	adds	r3, #1
 800abd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800abdc:	d901      	bls.n	800abe2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800abde:	2303      	movs	r3, #3
 800abe0:	e01b      	b.n	800ac1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	691b      	ldr	r3, [r3, #16]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	daf2      	bge.n	800abd0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800abea:	2300      	movs	r3, #0
 800abec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	691b      	ldr	r3, [r3, #16]
 800abf2:	f043 0201 	orr.w	r2, r3, #1
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	3301      	adds	r3, #1
 800abfe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ac06:	d901      	bls.n	800ac0c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ac08:	2303      	movs	r3, #3
 800ac0a:	e006      	b.n	800ac1a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	691b      	ldr	r3, [r3, #16]
 800ac10:	f003 0301 	and.w	r3, r3, #1
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	d0f0      	beq.n	800abfa <USB_CoreReset+0x36>

  return HAL_OK;
 800ac18:	2300      	movs	r3, #0
}
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	3714      	adds	r7, #20
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr
	...

0800ac28 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b084      	sub	sp, #16
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	460b      	mov	r3, r1
 800ac32:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ac34:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ac38:	f002 fc38 	bl	800d4ac <USBD_static_malloc>
 800ac3c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d109      	bne.n	800ac58 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	32b0      	adds	r2, #176	@ 0xb0
 800ac4e:	2100      	movs	r1, #0
 800ac50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ac54:	2302      	movs	r3, #2
 800ac56:	e0d4      	b.n	800ae02 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ac58:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ac5c:	2100      	movs	r1, #0
 800ac5e:	68f8      	ldr	r0, [r7, #12]
 800ac60:	f003 f9b4 	bl	800dfcc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	32b0      	adds	r2, #176	@ 0xb0
 800ac6e:	68f9      	ldr	r1, [r7, #12]
 800ac70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	32b0      	adds	r2, #176	@ 0xb0
 800ac7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	7c1b      	ldrb	r3, [r3, #16]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d138      	bne.n	800ad02 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac90:	4b5e      	ldr	r3, [pc, #376]	@ (800ae0c <USBD_CDC_Init+0x1e4>)
 800ac92:	7819      	ldrb	r1, [r3, #0]
 800ac94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ac98:	2202      	movs	r2, #2
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f002 fae3 	bl	800d266 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aca0:	4b5a      	ldr	r3, [pc, #360]	@ (800ae0c <USBD_CDC_Init+0x1e4>)
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	f003 020f 	and.w	r2, r3, #15
 800aca8:	6879      	ldr	r1, [r7, #4]
 800acaa:	4613      	mov	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	4413      	add	r3, r2
 800acb0:	009b      	lsls	r3, r3, #2
 800acb2:	440b      	add	r3, r1
 800acb4:	3324      	adds	r3, #36	@ 0x24
 800acb6:	2201      	movs	r2, #1
 800acb8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800acba:	4b55      	ldr	r3, [pc, #340]	@ (800ae10 <USBD_CDC_Init+0x1e8>)
 800acbc:	7819      	ldrb	r1, [r3, #0]
 800acbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800acc2:	2202      	movs	r2, #2
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f002 face 	bl	800d266 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800acca:	4b51      	ldr	r3, [pc, #324]	@ (800ae10 <USBD_CDC_Init+0x1e8>)
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	f003 020f 	and.w	r2, r3, #15
 800acd2:	6879      	ldr	r1, [r7, #4]
 800acd4:	4613      	mov	r3, r2
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	4413      	add	r3, r2
 800acda:	009b      	lsls	r3, r3, #2
 800acdc:	440b      	add	r3, r1
 800acde:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ace2:	2201      	movs	r2, #1
 800ace4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ace6:	4b4b      	ldr	r3, [pc, #300]	@ (800ae14 <USBD_CDC_Init+0x1ec>)
 800ace8:	781b      	ldrb	r3, [r3, #0]
 800acea:	f003 020f 	and.w	r2, r3, #15
 800acee:	6879      	ldr	r1, [r7, #4]
 800acf0:	4613      	mov	r3, r2
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	4413      	add	r3, r2
 800acf6:	009b      	lsls	r3, r3, #2
 800acf8:	440b      	add	r3, r1
 800acfa:	3326      	adds	r3, #38	@ 0x26
 800acfc:	2210      	movs	r2, #16
 800acfe:	801a      	strh	r2, [r3, #0]
 800ad00:	e035      	b.n	800ad6e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ad02:	4b42      	ldr	r3, [pc, #264]	@ (800ae0c <USBD_CDC_Init+0x1e4>)
 800ad04:	7819      	ldrb	r1, [r3, #0]
 800ad06:	2340      	movs	r3, #64	@ 0x40
 800ad08:	2202      	movs	r2, #2
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f002 faab 	bl	800d266 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ad10:	4b3e      	ldr	r3, [pc, #248]	@ (800ae0c <USBD_CDC_Init+0x1e4>)
 800ad12:	781b      	ldrb	r3, [r3, #0]
 800ad14:	f003 020f 	and.w	r2, r3, #15
 800ad18:	6879      	ldr	r1, [r7, #4]
 800ad1a:	4613      	mov	r3, r2
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	4413      	add	r3, r2
 800ad20:	009b      	lsls	r3, r3, #2
 800ad22:	440b      	add	r3, r1
 800ad24:	3324      	adds	r3, #36	@ 0x24
 800ad26:	2201      	movs	r2, #1
 800ad28:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ad2a:	4b39      	ldr	r3, [pc, #228]	@ (800ae10 <USBD_CDC_Init+0x1e8>)
 800ad2c:	7819      	ldrb	r1, [r3, #0]
 800ad2e:	2340      	movs	r3, #64	@ 0x40
 800ad30:	2202      	movs	r2, #2
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f002 fa97 	bl	800d266 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ad38:	4b35      	ldr	r3, [pc, #212]	@ (800ae10 <USBD_CDC_Init+0x1e8>)
 800ad3a:	781b      	ldrb	r3, [r3, #0]
 800ad3c:	f003 020f 	and.w	r2, r3, #15
 800ad40:	6879      	ldr	r1, [r7, #4]
 800ad42:	4613      	mov	r3, r2
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	4413      	add	r3, r2
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	440b      	add	r3, r1
 800ad4c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ad50:	2201      	movs	r2, #1
 800ad52:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ad54:	4b2f      	ldr	r3, [pc, #188]	@ (800ae14 <USBD_CDC_Init+0x1ec>)
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	f003 020f 	and.w	r2, r3, #15
 800ad5c:	6879      	ldr	r1, [r7, #4]
 800ad5e:	4613      	mov	r3, r2
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	4413      	add	r3, r2
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	440b      	add	r3, r1
 800ad68:	3326      	adds	r3, #38	@ 0x26
 800ad6a:	2210      	movs	r2, #16
 800ad6c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ad6e:	4b29      	ldr	r3, [pc, #164]	@ (800ae14 <USBD_CDC_Init+0x1ec>)
 800ad70:	7819      	ldrb	r1, [r3, #0]
 800ad72:	2308      	movs	r3, #8
 800ad74:	2203      	movs	r2, #3
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f002 fa75 	bl	800d266 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ad7c:	4b25      	ldr	r3, [pc, #148]	@ (800ae14 <USBD_CDC_Init+0x1ec>)
 800ad7e:	781b      	ldrb	r3, [r3, #0]
 800ad80:	f003 020f 	and.w	r2, r3, #15
 800ad84:	6879      	ldr	r1, [r7, #4]
 800ad86:	4613      	mov	r3, r2
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	4413      	add	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	440b      	add	r3, r1
 800ad90:	3324      	adds	r3, #36	@ 0x24
 800ad92:	2201      	movs	r2, #1
 800ad94:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	33b0      	adds	r3, #176	@ 0xb0
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	4413      	add	r3, r2
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	2200      	movs	r2, #0
 800adb6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d101      	bne.n	800add0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800adcc:	2302      	movs	r3, #2
 800adce:	e018      	b.n	800ae02 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	7c1b      	ldrb	r3, [r3, #16]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d10a      	bne.n	800adee <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800add8:	4b0d      	ldr	r3, [pc, #52]	@ (800ae10 <USBD_CDC_Init+0x1e8>)
 800adda:	7819      	ldrb	r1, [r3, #0]
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ade2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f002 fb2c 	bl	800d444 <USBD_LL_PrepareReceive>
 800adec:	e008      	b.n	800ae00 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800adee:	4b08      	ldr	r3, [pc, #32]	@ (800ae10 <USBD_CDC_Init+0x1e8>)
 800adf0:	7819      	ldrb	r1, [r3, #0]
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800adf8:	2340      	movs	r3, #64	@ 0x40
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f002 fb22 	bl	800d444 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ae00:	2300      	movs	r3, #0
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	2000009f 	.word	0x2000009f
 800ae10:	200000a0 	.word	0x200000a0
 800ae14:	200000a1 	.word	0x200000a1

0800ae18 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
 800ae20:	460b      	mov	r3, r1
 800ae22:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ae24:	4b3a      	ldr	r3, [pc, #232]	@ (800af10 <USBD_CDC_DeInit+0xf8>)
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	4619      	mov	r1, r3
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f002 fa41 	bl	800d2b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ae30:	4b37      	ldr	r3, [pc, #220]	@ (800af10 <USBD_CDC_DeInit+0xf8>)
 800ae32:	781b      	ldrb	r3, [r3, #0]
 800ae34:	f003 020f 	and.w	r2, r3, #15
 800ae38:	6879      	ldr	r1, [r7, #4]
 800ae3a:	4613      	mov	r3, r2
 800ae3c:	009b      	lsls	r3, r3, #2
 800ae3e:	4413      	add	r3, r2
 800ae40:	009b      	lsls	r3, r3, #2
 800ae42:	440b      	add	r3, r1
 800ae44:	3324      	adds	r3, #36	@ 0x24
 800ae46:	2200      	movs	r2, #0
 800ae48:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ae4a:	4b32      	ldr	r3, [pc, #200]	@ (800af14 <USBD_CDC_DeInit+0xfc>)
 800ae4c:	781b      	ldrb	r3, [r3, #0]
 800ae4e:	4619      	mov	r1, r3
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f002 fa2e 	bl	800d2b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ae56:	4b2f      	ldr	r3, [pc, #188]	@ (800af14 <USBD_CDC_DeInit+0xfc>)
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	f003 020f 	and.w	r2, r3, #15
 800ae5e:	6879      	ldr	r1, [r7, #4]
 800ae60:	4613      	mov	r3, r2
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	4413      	add	r3, r2
 800ae66:	009b      	lsls	r3, r3, #2
 800ae68:	440b      	add	r3, r1
 800ae6a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ae6e:	2200      	movs	r2, #0
 800ae70:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ae72:	4b29      	ldr	r3, [pc, #164]	@ (800af18 <USBD_CDC_DeInit+0x100>)
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	4619      	mov	r1, r3
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f002 fa1a 	bl	800d2b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ae7e:	4b26      	ldr	r3, [pc, #152]	@ (800af18 <USBD_CDC_DeInit+0x100>)
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	f003 020f 	and.w	r2, r3, #15
 800ae86:	6879      	ldr	r1, [r7, #4]
 800ae88:	4613      	mov	r3, r2
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	4413      	add	r3, r2
 800ae8e:	009b      	lsls	r3, r3, #2
 800ae90:	440b      	add	r3, r1
 800ae92:	3324      	adds	r3, #36	@ 0x24
 800ae94:	2200      	movs	r2, #0
 800ae96:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ae98:	4b1f      	ldr	r3, [pc, #124]	@ (800af18 <USBD_CDC_DeInit+0x100>)
 800ae9a:	781b      	ldrb	r3, [r3, #0]
 800ae9c:	f003 020f 	and.w	r2, r3, #15
 800aea0:	6879      	ldr	r1, [r7, #4]
 800aea2:	4613      	mov	r3, r2
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	4413      	add	r3, r2
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	440b      	add	r3, r1
 800aeac:	3326      	adds	r3, #38	@ 0x26
 800aeae:	2200      	movs	r2, #0
 800aeb0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	32b0      	adds	r2, #176	@ 0xb0
 800aebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d01f      	beq.n	800af04 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	33b0      	adds	r3, #176	@ 0xb0
 800aece:	009b      	lsls	r3, r3, #2
 800aed0:	4413      	add	r3, r2
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	685b      	ldr	r3, [r3, #4]
 800aed6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	32b0      	adds	r2, #176	@ 0xb0
 800aee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aee6:	4618      	mov	r0, r3
 800aee8:	f002 faee 	bl	800d4c8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	32b0      	adds	r2, #176	@ 0xb0
 800aef6:	2100      	movs	r1, #0
 800aef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800af04:	2300      	movs	r3, #0
}
 800af06:	4618      	mov	r0, r3
 800af08:	3708      	adds	r7, #8
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bd80      	pop	{r7, pc}
 800af0e:	bf00      	nop
 800af10:	2000009f 	.word	0x2000009f
 800af14:	200000a0 	.word	0x200000a0
 800af18:	200000a1 	.word	0x200000a1

0800af1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b086      	sub	sp, #24
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	32b0      	adds	r2, #176	@ 0xb0
 800af30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af34:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800af36:	2300      	movs	r3, #0
 800af38:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800af3a:	2300      	movs	r3, #0
 800af3c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800af3e:	2300      	movs	r3, #0
 800af40:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d101      	bne.n	800af4c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800af48:	2303      	movs	r3, #3
 800af4a:	e0bf      	b.n	800b0cc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af4c:	683b      	ldr	r3, [r7, #0]
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800af54:	2b00      	cmp	r3, #0
 800af56:	d050      	beq.n	800affa <USBD_CDC_Setup+0xde>
 800af58:	2b20      	cmp	r3, #32
 800af5a:	f040 80af 	bne.w	800b0bc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	88db      	ldrh	r3, [r3, #6]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d03a      	beq.n	800afdc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	781b      	ldrb	r3, [r3, #0]
 800af6a:	b25b      	sxtb	r3, r3
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	da1b      	bge.n	800afa8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af76:	687a      	ldr	r2, [r7, #4]
 800af78:	33b0      	adds	r3, #176	@ 0xb0
 800af7a:	009b      	lsls	r3, r3, #2
 800af7c:	4413      	add	r3, r2
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	683a      	ldr	r2, [r7, #0]
 800af84:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800af86:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800af88:	683a      	ldr	r2, [r7, #0]
 800af8a:	88d2      	ldrh	r2, [r2, #6]
 800af8c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	88db      	ldrh	r3, [r3, #6]
 800af92:	2b07      	cmp	r3, #7
 800af94:	bf28      	it	cs
 800af96:	2307      	movcs	r3, #7
 800af98:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800af9a:	693b      	ldr	r3, [r7, #16]
 800af9c:	89fa      	ldrh	r2, [r7, #14]
 800af9e:	4619      	mov	r1, r3
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f001 fd53 	bl	800ca4c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800afa6:	e090      	b.n	800b0ca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	785a      	ldrb	r2, [r3, #1]
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	88db      	ldrh	r3, [r3, #6]
 800afb6:	2b3f      	cmp	r3, #63	@ 0x3f
 800afb8:	d803      	bhi.n	800afc2 <USBD_CDC_Setup+0xa6>
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	88db      	ldrh	r3, [r3, #6]
 800afbe:	b2da      	uxtb	r2, r3
 800afc0:	e000      	b.n	800afc4 <USBD_CDC_Setup+0xa8>
 800afc2:	2240      	movs	r2, #64	@ 0x40
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800afca:	6939      	ldr	r1, [r7, #16]
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800afd2:	461a      	mov	r2, r3
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f001 fd65 	bl	800caa4 <USBD_CtlPrepareRx>
      break;
 800afda:	e076      	b.n	800b0ca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	33b0      	adds	r3, #176	@ 0xb0
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	4413      	add	r3, r2
 800afea:	685b      	ldr	r3, [r3, #4]
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	683a      	ldr	r2, [r7, #0]
 800aff0:	7850      	ldrb	r0, [r2, #1]
 800aff2:	2200      	movs	r2, #0
 800aff4:	6839      	ldr	r1, [r7, #0]
 800aff6:	4798      	blx	r3
      break;
 800aff8:	e067      	b.n	800b0ca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	785b      	ldrb	r3, [r3, #1]
 800affe:	2b0b      	cmp	r3, #11
 800b000:	d851      	bhi.n	800b0a6 <USBD_CDC_Setup+0x18a>
 800b002:	a201      	add	r2, pc, #4	@ (adr r2, 800b008 <USBD_CDC_Setup+0xec>)
 800b004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b008:	0800b039 	.word	0x0800b039
 800b00c:	0800b0b5 	.word	0x0800b0b5
 800b010:	0800b0a7 	.word	0x0800b0a7
 800b014:	0800b0a7 	.word	0x0800b0a7
 800b018:	0800b0a7 	.word	0x0800b0a7
 800b01c:	0800b0a7 	.word	0x0800b0a7
 800b020:	0800b0a7 	.word	0x0800b0a7
 800b024:	0800b0a7 	.word	0x0800b0a7
 800b028:	0800b0a7 	.word	0x0800b0a7
 800b02c:	0800b0a7 	.word	0x0800b0a7
 800b030:	0800b063 	.word	0x0800b063
 800b034:	0800b08d 	.word	0x0800b08d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b03e:	b2db      	uxtb	r3, r3
 800b040:	2b03      	cmp	r3, #3
 800b042:	d107      	bne.n	800b054 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b044:	f107 030a 	add.w	r3, r7, #10
 800b048:	2202      	movs	r2, #2
 800b04a:	4619      	mov	r1, r3
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f001 fcfd 	bl	800ca4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b052:	e032      	b.n	800b0ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b054:	6839      	ldr	r1, [r7, #0]
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f001 fc7b 	bl	800c952 <USBD_CtlError>
            ret = USBD_FAIL;
 800b05c:	2303      	movs	r3, #3
 800b05e:	75fb      	strb	r3, [r7, #23]
          break;
 800b060:	e02b      	b.n	800b0ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	2b03      	cmp	r3, #3
 800b06c:	d107      	bne.n	800b07e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b06e:	f107 030d 	add.w	r3, r7, #13
 800b072:	2201      	movs	r2, #1
 800b074:	4619      	mov	r1, r3
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f001 fce8 	bl	800ca4c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b07c:	e01d      	b.n	800b0ba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b07e:	6839      	ldr	r1, [r7, #0]
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f001 fc66 	bl	800c952 <USBD_CtlError>
            ret = USBD_FAIL;
 800b086:	2303      	movs	r3, #3
 800b088:	75fb      	strb	r3, [r7, #23]
          break;
 800b08a:	e016      	b.n	800b0ba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b092:	b2db      	uxtb	r3, r3
 800b094:	2b03      	cmp	r3, #3
 800b096:	d00f      	beq.n	800b0b8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b098:	6839      	ldr	r1, [r7, #0]
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f001 fc59 	bl	800c952 <USBD_CtlError>
            ret = USBD_FAIL;
 800b0a0:	2303      	movs	r3, #3
 800b0a2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b0a4:	e008      	b.n	800b0b8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b0a6:	6839      	ldr	r1, [r7, #0]
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f001 fc52 	bl	800c952 <USBD_CtlError>
          ret = USBD_FAIL;
 800b0ae:	2303      	movs	r3, #3
 800b0b0:	75fb      	strb	r3, [r7, #23]
          break;
 800b0b2:	e002      	b.n	800b0ba <USBD_CDC_Setup+0x19e>
          break;
 800b0b4:	bf00      	nop
 800b0b6:	e008      	b.n	800b0ca <USBD_CDC_Setup+0x1ae>
          break;
 800b0b8:	bf00      	nop
      }
      break;
 800b0ba:	e006      	b.n	800b0ca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b0bc:	6839      	ldr	r1, [r7, #0]
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f001 fc47 	bl	800c952 <USBD_CtlError>
      ret = USBD_FAIL;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	75fb      	strb	r3, [r7, #23]
      break;
 800b0c8:	bf00      	nop
  }

  return (uint8_t)ret;
 800b0ca:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	3718      	adds	r7, #24
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}

0800b0d4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b084      	sub	sp, #16
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	460b      	mov	r3, r1
 800b0de:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b0e6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	32b0      	adds	r2, #176	@ 0xb0
 800b0f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d101      	bne.n	800b0fe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b0fa:	2303      	movs	r3, #3
 800b0fc:	e065      	b.n	800b1ca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	32b0      	adds	r2, #176	@ 0xb0
 800b108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b10c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b10e:	78fb      	ldrb	r3, [r7, #3]
 800b110:	f003 020f 	and.w	r2, r3, #15
 800b114:	6879      	ldr	r1, [r7, #4]
 800b116:	4613      	mov	r3, r2
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4413      	add	r3, r2
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	440b      	add	r3, r1
 800b120:	3318      	adds	r3, #24
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d02f      	beq.n	800b188 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b128:	78fb      	ldrb	r3, [r7, #3]
 800b12a:	f003 020f 	and.w	r2, r3, #15
 800b12e:	6879      	ldr	r1, [r7, #4]
 800b130:	4613      	mov	r3, r2
 800b132:	009b      	lsls	r3, r3, #2
 800b134:	4413      	add	r3, r2
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	440b      	add	r3, r1
 800b13a:	3318      	adds	r3, #24
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	78fb      	ldrb	r3, [r7, #3]
 800b140:	f003 010f 	and.w	r1, r3, #15
 800b144:	68f8      	ldr	r0, [r7, #12]
 800b146:	460b      	mov	r3, r1
 800b148:	00db      	lsls	r3, r3, #3
 800b14a:	440b      	add	r3, r1
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	4403      	add	r3, r0
 800b150:	331c      	adds	r3, #28
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	fbb2 f1f3 	udiv	r1, r2, r3
 800b158:	fb01 f303 	mul.w	r3, r1, r3
 800b15c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d112      	bne.n	800b188 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b162:	78fb      	ldrb	r3, [r7, #3]
 800b164:	f003 020f 	and.w	r2, r3, #15
 800b168:	6879      	ldr	r1, [r7, #4]
 800b16a:	4613      	mov	r3, r2
 800b16c:	009b      	lsls	r3, r3, #2
 800b16e:	4413      	add	r3, r2
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	440b      	add	r3, r1
 800b174:	3318      	adds	r3, #24
 800b176:	2200      	movs	r2, #0
 800b178:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b17a:	78f9      	ldrb	r1, [r7, #3]
 800b17c:	2300      	movs	r3, #0
 800b17e:	2200      	movs	r2, #0
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f002 f93e 	bl	800d402 <USBD_LL_Transmit>
 800b186:	e01f      	b.n	800b1c8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b196:	687a      	ldr	r2, [r7, #4]
 800b198:	33b0      	adds	r3, #176	@ 0xb0
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	4413      	add	r3, r2
 800b19e:	685b      	ldr	r3, [r3, #4]
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d010      	beq.n	800b1c8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	33b0      	adds	r3, #176	@ 0xb0
 800b1b0:	009b      	lsls	r3, r3, #2
 800b1b2:	4413      	add	r3, r2
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	691b      	ldr	r3, [r3, #16]
 800b1b8:	68ba      	ldr	r2, [r7, #8]
 800b1ba:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b1be:	68ba      	ldr	r2, [r7, #8]
 800b1c0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b1c4:	78fa      	ldrb	r2, [r7, #3]
 800b1c6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b1c8:	2300      	movs	r3, #0
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3710      	adds	r7, #16
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	bd80      	pop	{r7, pc}

0800b1d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b1d2:	b580      	push	{r7, lr}
 800b1d4:	b084      	sub	sp, #16
 800b1d6:	af00      	add	r7, sp, #0
 800b1d8:	6078      	str	r0, [r7, #4]
 800b1da:	460b      	mov	r3, r1
 800b1dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	32b0      	adds	r2, #176	@ 0xb0
 800b1e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1ec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	32b0      	adds	r2, #176	@ 0xb0
 800b1f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d101      	bne.n	800b204 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b200:	2303      	movs	r3, #3
 800b202:	e01a      	b.n	800b23a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b204:	78fb      	ldrb	r3, [r7, #3]
 800b206:	4619      	mov	r1, r3
 800b208:	6878      	ldr	r0, [r7, #4]
 800b20a:	f002 f93c 	bl	800d486 <USBD_LL_GetRxDataSize>
 800b20e:	4602      	mov	r2, r0
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	33b0      	adds	r3, #176	@ 0xb0
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	4413      	add	r3, r2
 800b224:	685b      	ldr	r3, [r3, #4]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	68fa      	ldr	r2, [r7, #12]
 800b22a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b234:	4611      	mov	r1, r2
 800b236:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b238:	2300      	movs	r3, #0
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3710      	adds	r7, #16
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}

0800b242 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b084      	sub	sp, #16
 800b246:	af00      	add	r7, sp, #0
 800b248:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	32b0      	adds	r2, #176	@ 0xb0
 800b254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b258:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d101      	bne.n	800b264 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b260:	2303      	movs	r3, #3
 800b262:	e024      	b.n	800b2ae <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b26a:	687a      	ldr	r2, [r7, #4]
 800b26c:	33b0      	adds	r3, #176	@ 0xb0
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	4413      	add	r3, r2
 800b272:	685b      	ldr	r3, [r3, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d019      	beq.n	800b2ac <USBD_CDC_EP0_RxReady+0x6a>
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b27e:	2bff      	cmp	r3, #255	@ 0xff
 800b280:	d014      	beq.n	800b2ac <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b288:	687a      	ldr	r2, [r7, #4]
 800b28a:	33b0      	adds	r3, #176	@ 0xb0
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	4413      	add	r3, r2
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b29a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b2a2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	22ff      	movs	r2, #255	@ 0xff
 800b2a8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b2ac:	2300      	movs	r3, #0
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3710      	adds	r7, #16
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
	...

0800b2b8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b086      	sub	sp, #24
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b2c0:	2182      	movs	r1, #130	@ 0x82
 800b2c2:	4818      	ldr	r0, [pc, #96]	@ (800b324 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b2c4:	f000 fd0f 	bl	800bce6 <USBD_GetEpDesc>
 800b2c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b2ca:	2101      	movs	r1, #1
 800b2cc:	4815      	ldr	r0, [pc, #84]	@ (800b324 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b2ce:	f000 fd0a 	bl	800bce6 <USBD_GetEpDesc>
 800b2d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b2d4:	2181      	movs	r1, #129	@ 0x81
 800b2d6:	4813      	ldr	r0, [pc, #76]	@ (800b324 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b2d8:	f000 fd05 	bl	800bce6 <USBD_GetEpDesc>
 800b2dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d002      	beq.n	800b2ea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	2210      	movs	r2, #16
 800b2e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d006      	beq.n	800b2fe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b2f8:	711a      	strb	r2, [r3, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d006      	beq.n	800b312 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2200      	movs	r2, #0
 800b308:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b30c:	711a      	strb	r2, [r3, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2243      	movs	r2, #67	@ 0x43
 800b316:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b318:	4b02      	ldr	r3, [pc, #8]	@ (800b324 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3718      	adds	r7, #24
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	2000005c 	.word	0x2000005c

0800b328 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b086      	sub	sp, #24
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b330:	2182      	movs	r1, #130	@ 0x82
 800b332:	4818      	ldr	r0, [pc, #96]	@ (800b394 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b334:	f000 fcd7 	bl	800bce6 <USBD_GetEpDesc>
 800b338:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b33a:	2101      	movs	r1, #1
 800b33c:	4815      	ldr	r0, [pc, #84]	@ (800b394 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b33e:	f000 fcd2 	bl	800bce6 <USBD_GetEpDesc>
 800b342:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b344:	2181      	movs	r1, #129	@ 0x81
 800b346:	4813      	ldr	r0, [pc, #76]	@ (800b394 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b348:	f000 fccd 	bl	800bce6 <USBD_GetEpDesc>
 800b34c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d002      	beq.n	800b35a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	2210      	movs	r2, #16
 800b358:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d006      	beq.n	800b36e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	2200      	movs	r2, #0
 800b364:	711a      	strb	r2, [r3, #4]
 800b366:	2200      	movs	r2, #0
 800b368:	f042 0202 	orr.w	r2, r2, #2
 800b36c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	2b00      	cmp	r3, #0
 800b372:	d006      	beq.n	800b382 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2200      	movs	r2, #0
 800b378:	711a      	strb	r2, [r3, #4]
 800b37a:	2200      	movs	r2, #0
 800b37c:	f042 0202 	orr.w	r2, r2, #2
 800b380:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2243      	movs	r2, #67	@ 0x43
 800b386:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b388:	4b02      	ldr	r3, [pc, #8]	@ (800b394 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	3718      	adds	r7, #24
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
 800b392:	bf00      	nop
 800b394:	2000005c 	.word	0x2000005c

0800b398 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b086      	sub	sp, #24
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b3a0:	2182      	movs	r1, #130	@ 0x82
 800b3a2:	4818      	ldr	r0, [pc, #96]	@ (800b404 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b3a4:	f000 fc9f 	bl	800bce6 <USBD_GetEpDesc>
 800b3a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b3aa:	2101      	movs	r1, #1
 800b3ac:	4815      	ldr	r0, [pc, #84]	@ (800b404 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b3ae:	f000 fc9a 	bl	800bce6 <USBD_GetEpDesc>
 800b3b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b3b4:	2181      	movs	r1, #129	@ 0x81
 800b3b6:	4813      	ldr	r0, [pc, #76]	@ (800b404 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b3b8:	f000 fc95 	bl	800bce6 <USBD_GetEpDesc>
 800b3bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d002      	beq.n	800b3ca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	2210      	movs	r2, #16
 800b3c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d006      	beq.n	800b3de <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b3d8:	711a      	strb	r2, [r3, #4]
 800b3da:	2200      	movs	r2, #0
 800b3dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d006      	beq.n	800b3f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b3ec:	711a      	strb	r2, [r3, #4]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2243      	movs	r2, #67	@ 0x43
 800b3f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b3f8:	4b02      	ldr	r3, [pc, #8]	@ (800b404 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3718      	adds	r7, #24
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	2000005c 	.word	0x2000005c

0800b408 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b408:	b480      	push	{r7}
 800b40a:	b083      	sub	sp, #12
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	220a      	movs	r2, #10
 800b414:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b416:	4b03      	ldr	r3, [pc, #12]	@ (800b424 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b418:	4618      	mov	r0, r3
 800b41a:	370c      	adds	r7, #12
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr
 800b424:	20000018 	.word	0x20000018

0800b428 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b428:	b480      	push	{r7}
 800b42a:	b083      	sub	sp, #12
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d101      	bne.n	800b43c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b438:	2303      	movs	r3, #3
 800b43a:	e009      	b.n	800b450 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	33b0      	adds	r3, #176	@ 0xb0
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	4413      	add	r3, r2
 800b44a:	683a      	ldr	r2, [r7, #0]
 800b44c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b44e:	2300      	movs	r3, #0
}
 800b450:	4618      	mov	r0, r3
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b087      	sub	sp, #28
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	60b9      	str	r1, [r7, #8]
 800b466:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	32b0      	adds	r2, #176	@ 0xb0
 800b472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b476:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d101      	bne.n	800b482 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b47e:	2303      	movs	r3, #3
 800b480:	e008      	b.n	800b494 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	68ba      	ldr	r2, [r7, #8]
 800b486:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b492:	2300      	movs	r3, #0
}
 800b494:	4618      	mov	r0, r3
 800b496:	371c      	adds	r7, #28
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr

0800b4a0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b085      	sub	sp, #20
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	32b0      	adds	r2, #176	@ 0xb0
 800b4b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d101      	bne.n	800b4c4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b4c0:	2303      	movs	r3, #3
 800b4c2:	e004      	b.n	800b4ce <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	683a      	ldr	r2, [r7, #0]
 800b4c8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b4cc:	2300      	movs	r3, #0
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3714      	adds	r7, #20
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr
	...

0800b4dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	32b0      	adds	r2, #176	@ 0xb0
 800b4ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4f2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	32b0      	adds	r2, #176	@ 0xb0
 800b4fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b502:	2b00      	cmp	r3, #0
 800b504:	d101      	bne.n	800b50a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b506:	2303      	movs	r3, #3
 800b508:	e018      	b.n	800b53c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	7c1b      	ldrb	r3, [r3, #16]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d10a      	bne.n	800b528 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b512:	4b0c      	ldr	r3, [pc, #48]	@ (800b544 <USBD_CDC_ReceivePacket+0x68>)
 800b514:	7819      	ldrb	r1, [r3, #0]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b51c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f001 ff8f 	bl	800d444 <USBD_LL_PrepareReceive>
 800b526:	e008      	b.n	800b53a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b528:	4b06      	ldr	r3, [pc, #24]	@ (800b544 <USBD_CDC_ReceivePacket+0x68>)
 800b52a:	7819      	ldrb	r1, [r3, #0]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b532:	2340      	movs	r3, #64	@ 0x40
 800b534:	6878      	ldr	r0, [r7, #4]
 800b536:	f001 ff85 	bl	800d444 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b53a:	2300      	movs	r3, #0
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	3710      	adds	r7, #16
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}
 800b544:	200000a0 	.word	0x200000a0

0800b548 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b086      	sub	sp, #24
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	4613      	mov	r3, r2
 800b554:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d101      	bne.n	800b560 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b55c:	2303      	movs	r3, #3
 800b55e:	e01f      	b.n	800b5a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2200      	movs	r2, #0
 800b564:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2200      	movs	r2, #0
 800b56c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2200      	movs	r2, #0
 800b574:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d003      	beq.n	800b586 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	68ba      	ldr	r2, [r7, #8]
 800b582:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	2201      	movs	r2, #1
 800b58a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	79fa      	ldrb	r2, [r7, #7]
 800b592:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b594:	68f8      	ldr	r0, [r7, #12]
 800b596:	f001 fdff 	bl	800d198 <USBD_LL_Init>
 800b59a:	4603      	mov	r3, r0
 800b59c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b59e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3718      	adds	r7, #24
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bd80      	pop	{r7, pc}

0800b5a8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b084      	sub	sp, #16
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d101      	bne.n	800b5c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b5bc:	2303      	movs	r3, #3
 800b5be:	e025      	b.n	800b60c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	683a      	ldr	r2, [r7, #0]
 800b5c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	32ae      	adds	r2, #174	@ 0xae
 800b5d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d00f      	beq.n	800b5fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	32ae      	adds	r2, #174	@ 0xae
 800b5e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ec:	f107 020e 	add.w	r2, r7, #14
 800b5f0:	4610      	mov	r0, r2
 800b5f2:	4798      	blx	r3
 800b5f4:	4602      	mov	r2, r0
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b602:	1c5a      	adds	r2, r3, #1
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b60a:	2300      	movs	r3, #0
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	3710      	adds	r7, #16
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b082      	sub	sp, #8
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b61c:	6878      	ldr	r0, [r7, #4]
 800b61e:	f001 fe07 	bl	800d230 <USBD_LL_Start>
 800b622:	4603      	mov	r3, r0
}
 800b624:	4618      	mov	r0, r3
 800b626:	3708      	adds	r7, #8
 800b628:	46bd      	mov	sp, r7
 800b62a:	bd80      	pop	{r7, pc}

0800b62c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b62c:	b480      	push	{r7}
 800b62e:	b083      	sub	sp, #12
 800b630:	af00      	add	r7, sp, #0
 800b632:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b634:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b636:	4618      	mov	r0, r3
 800b638:	370c      	adds	r7, #12
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr

0800b642 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b642:	b580      	push	{r7, lr}
 800b644:	b084      	sub	sp, #16
 800b646:	af00      	add	r7, sp, #0
 800b648:	6078      	str	r0, [r7, #4]
 800b64a:	460b      	mov	r3, r1
 800b64c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b64e:	2300      	movs	r3, #0
 800b650:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d009      	beq.n	800b670 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	78fa      	ldrb	r2, [r7, #3]
 800b666:	4611      	mov	r1, r2
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	4798      	blx	r3
 800b66c:	4603      	mov	r3, r0
 800b66e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b670:	7bfb      	ldrb	r3, [r7, #15]
}
 800b672:	4618      	mov	r0, r3
 800b674:	3710      	adds	r7, #16
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}

0800b67a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b67a:	b580      	push	{r7, lr}
 800b67c:	b084      	sub	sp, #16
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
 800b682:	460b      	mov	r3, r1
 800b684:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b686:	2300      	movs	r3, #0
 800b688:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	78fa      	ldrb	r2, [r7, #3]
 800b694:	4611      	mov	r1, r2
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	4798      	blx	r3
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d001      	beq.n	800b6a4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b6a0:	2303      	movs	r3, #3
 800b6a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b6a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3710      	adds	r7, #16
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}

0800b6ae <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	b084      	sub	sp, #16
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
 800b6b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b6be:	6839      	ldr	r1, [r7, #0]
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f001 f90c 	bl	800c8de <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2201      	movs	r2, #1
 800b6ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b6d4:	461a      	mov	r2, r3
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b6e2:	f003 031f 	and.w	r3, r3, #31
 800b6e6:	2b02      	cmp	r3, #2
 800b6e8:	d01a      	beq.n	800b720 <USBD_LL_SetupStage+0x72>
 800b6ea:	2b02      	cmp	r3, #2
 800b6ec:	d822      	bhi.n	800b734 <USBD_LL_SetupStage+0x86>
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d002      	beq.n	800b6f8 <USBD_LL_SetupStage+0x4a>
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d00a      	beq.n	800b70c <USBD_LL_SetupStage+0x5e>
 800b6f6:	e01d      	b.n	800b734 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b6fe:	4619      	mov	r1, r3
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	f000 fb63 	bl	800bdcc <USBD_StdDevReq>
 800b706:	4603      	mov	r3, r0
 800b708:	73fb      	strb	r3, [r7, #15]
      break;
 800b70a:	e020      	b.n	800b74e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b712:	4619      	mov	r1, r3
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f000 fbcb 	bl	800beb0 <USBD_StdItfReq>
 800b71a:	4603      	mov	r3, r0
 800b71c:	73fb      	strb	r3, [r7, #15]
      break;
 800b71e:	e016      	b.n	800b74e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b726:	4619      	mov	r1, r3
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 fc2d 	bl	800bf88 <USBD_StdEPReq>
 800b72e:	4603      	mov	r3, r0
 800b730:	73fb      	strb	r3, [r7, #15]
      break;
 800b732:	e00c      	b.n	800b74e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b73a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b73e:	b2db      	uxtb	r3, r3
 800b740:	4619      	mov	r1, r3
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	f001 fdd4 	bl	800d2f0 <USBD_LL_StallEP>
 800b748:	4603      	mov	r3, r0
 800b74a:	73fb      	strb	r3, [r7, #15]
      break;
 800b74c:	bf00      	nop
  }

  return ret;
 800b74e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b750:	4618      	mov	r0, r3
 800b752:	3710      	adds	r7, #16
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b086      	sub	sp, #24
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	60f8      	str	r0, [r7, #12]
 800b760:	460b      	mov	r3, r1
 800b762:	607a      	str	r2, [r7, #4]
 800b764:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b766:	2300      	movs	r3, #0
 800b768:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b76a:	7afb      	ldrb	r3, [r7, #11]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d16e      	bne.n	800b84e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b776:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b77e:	2b03      	cmp	r3, #3
 800b780:	f040 8098 	bne.w	800b8b4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	689a      	ldr	r2, [r3, #8]
 800b788:	693b      	ldr	r3, [r7, #16]
 800b78a:	68db      	ldr	r3, [r3, #12]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d913      	bls.n	800b7b8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	689a      	ldr	r2, [r3, #8]
 800b794:	693b      	ldr	r3, [r7, #16]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	1ad2      	subs	r2, r2, r3
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	68da      	ldr	r2, [r3, #12]
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	689b      	ldr	r3, [r3, #8]
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	bf28      	it	cs
 800b7aa:	4613      	movcs	r3, r2
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	6879      	ldr	r1, [r7, #4]
 800b7b0:	68f8      	ldr	r0, [r7, #12]
 800b7b2:	f001 f994 	bl	800cade <USBD_CtlContinueRx>
 800b7b6:	e07d      	b.n	800b8b4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b7be:	f003 031f 	and.w	r3, r3, #31
 800b7c2:	2b02      	cmp	r3, #2
 800b7c4:	d014      	beq.n	800b7f0 <USBD_LL_DataOutStage+0x98>
 800b7c6:	2b02      	cmp	r3, #2
 800b7c8:	d81d      	bhi.n	800b806 <USBD_LL_DataOutStage+0xae>
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d002      	beq.n	800b7d4 <USBD_LL_DataOutStage+0x7c>
 800b7ce:	2b01      	cmp	r3, #1
 800b7d0:	d003      	beq.n	800b7da <USBD_LL_DataOutStage+0x82>
 800b7d2:	e018      	b.n	800b806 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	75bb      	strb	r3, [r7, #22]
            break;
 800b7d8:	e018      	b.n	800b80c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b7e0:	b2db      	uxtb	r3, r3
 800b7e2:	4619      	mov	r1, r3
 800b7e4:	68f8      	ldr	r0, [r7, #12]
 800b7e6:	f000 fa64 	bl	800bcb2 <USBD_CoreFindIF>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	75bb      	strb	r3, [r7, #22]
            break;
 800b7ee:	e00d      	b.n	800b80c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	68f8      	ldr	r0, [r7, #12]
 800b7fc:	f000 fa66 	bl	800bccc <USBD_CoreFindEP>
 800b800:	4603      	mov	r3, r0
 800b802:	75bb      	strb	r3, [r7, #22]
            break;
 800b804:	e002      	b.n	800b80c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b806:	2300      	movs	r3, #0
 800b808:	75bb      	strb	r3, [r7, #22]
            break;
 800b80a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b80c:	7dbb      	ldrb	r3, [r7, #22]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d119      	bne.n	800b846 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b818:	b2db      	uxtb	r3, r3
 800b81a:	2b03      	cmp	r3, #3
 800b81c:	d113      	bne.n	800b846 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b81e:	7dba      	ldrb	r2, [r7, #22]
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	32ae      	adds	r2, #174	@ 0xae
 800b824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b828:	691b      	ldr	r3, [r3, #16]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d00b      	beq.n	800b846 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b82e:	7dba      	ldrb	r2, [r7, #22]
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b836:	7dba      	ldrb	r2, [r7, #22]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	32ae      	adds	r2, #174	@ 0xae
 800b83c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b840:	691b      	ldr	r3, [r3, #16]
 800b842:	68f8      	ldr	r0, [r7, #12]
 800b844:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b846:	68f8      	ldr	r0, [r7, #12]
 800b848:	f001 f95a 	bl	800cb00 <USBD_CtlSendStatus>
 800b84c:	e032      	b.n	800b8b4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b84e:	7afb      	ldrb	r3, [r7, #11]
 800b850:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b854:	b2db      	uxtb	r3, r3
 800b856:	4619      	mov	r1, r3
 800b858:	68f8      	ldr	r0, [r7, #12]
 800b85a:	f000 fa37 	bl	800bccc <USBD_CoreFindEP>
 800b85e:	4603      	mov	r3, r0
 800b860:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b862:	7dbb      	ldrb	r3, [r7, #22]
 800b864:	2bff      	cmp	r3, #255	@ 0xff
 800b866:	d025      	beq.n	800b8b4 <USBD_LL_DataOutStage+0x15c>
 800b868:	7dbb      	ldrb	r3, [r7, #22]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d122      	bne.n	800b8b4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b874:	b2db      	uxtb	r3, r3
 800b876:	2b03      	cmp	r3, #3
 800b878:	d117      	bne.n	800b8aa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b87a:	7dba      	ldrb	r2, [r7, #22]
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	32ae      	adds	r2, #174	@ 0xae
 800b880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b884:	699b      	ldr	r3, [r3, #24]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d00f      	beq.n	800b8aa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b88a:	7dba      	ldrb	r2, [r7, #22]
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b892:	7dba      	ldrb	r2, [r7, #22]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	32ae      	adds	r2, #174	@ 0xae
 800b898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b89c:	699b      	ldr	r3, [r3, #24]
 800b89e:	7afa      	ldrb	r2, [r7, #11]
 800b8a0:	4611      	mov	r1, r2
 800b8a2:	68f8      	ldr	r0, [r7, #12]
 800b8a4:	4798      	blx	r3
 800b8a6:	4603      	mov	r3, r0
 800b8a8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b8aa:	7dfb      	ldrb	r3, [r7, #23]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d001      	beq.n	800b8b4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b8b0:	7dfb      	ldrb	r3, [r7, #23]
 800b8b2:	e000      	b.n	800b8b6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b8b4:	2300      	movs	r3, #0
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3718      	adds	r7, #24
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}

0800b8be <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b086      	sub	sp, #24
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	60f8      	str	r0, [r7, #12]
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	607a      	str	r2, [r7, #4]
 800b8ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b8cc:	7afb      	ldrb	r3, [r7, #11]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d16f      	bne.n	800b9b2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	3314      	adds	r3, #20
 800b8d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	d15a      	bne.n	800b998 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	689a      	ldr	r2, [r3, #8]
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	68db      	ldr	r3, [r3, #12]
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	d914      	bls.n	800b918 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b8ee:	693b      	ldr	r3, [r7, #16]
 800b8f0:	689a      	ldr	r2, [r3, #8]
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	68db      	ldr	r3, [r3, #12]
 800b8f6:	1ad2      	subs	r2, r2, r3
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	689b      	ldr	r3, [r3, #8]
 800b900:	461a      	mov	r2, r3
 800b902:	6879      	ldr	r1, [r7, #4]
 800b904:	68f8      	ldr	r0, [r7, #12]
 800b906:	f001 f8bc 	bl	800ca82 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b90a:	2300      	movs	r3, #0
 800b90c:	2200      	movs	r2, #0
 800b90e:	2100      	movs	r1, #0
 800b910:	68f8      	ldr	r0, [r7, #12]
 800b912:	f001 fd97 	bl	800d444 <USBD_LL_PrepareReceive>
 800b916:	e03f      	b.n	800b998 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	68da      	ldr	r2, [r3, #12]
 800b91c:	693b      	ldr	r3, [r7, #16]
 800b91e:	689b      	ldr	r3, [r3, #8]
 800b920:	429a      	cmp	r2, r3
 800b922:	d11c      	bne.n	800b95e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	685a      	ldr	r2, [r3, #4]
 800b928:	693b      	ldr	r3, [r7, #16]
 800b92a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b92c:	429a      	cmp	r2, r3
 800b92e:	d316      	bcc.n	800b95e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b930:	693b      	ldr	r3, [r7, #16]
 800b932:	685a      	ldr	r2, [r3, #4]
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b93a:	429a      	cmp	r2, r3
 800b93c:	d20f      	bcs.n	800b95e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b93e:	2200      	movs	r2, #0
 800b940:	2100      	movs	r1, #0
 800b942:	68f8      	ldr	r0, [r7, #12]
 800b944:	f001 f89d 	bl	800ca82 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2200      	movs	r2, #0
 800b94c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b950:	2300      	movs	r3, #0
 800b952:	2200      	movs	r2, #0
 800b954:	2100      	movs	r1, #0
 800b956:	68f8      	ldr	r0, [r7, #12]
 800b958:	f001 fd74 	bl	800d444 <USBD_LL_PrepareReceive>
 800b95c:	e01c      	b.n	800b998 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b964:	b2db      	uxtb	r3, r3
 800b966:	2b03      	cmp	r3, #3
 800b968:	d10f      	bne.n	800b98a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b970:	68db      	ldr	r3, [r3, #12]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d009      	beq.n	800b98a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	2200      	movs	r2, #0
 800b97a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b984:	68db      	ldr	r3, [r3, #12]
 800b986:	68f8      	ldr	r0, [r7, #12]
 800b988:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b98a:	2180      	movs	r1, #128	@ 0x80
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f001 fcaf 	bl	800d2f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b992:	68f8      	ldr	r0, [r7, #12]
 800b994:	f001 f8c7 	bl	800cb26 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	d03a      	beq.n	800ba18 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f7ff fe42 	bl	800b62c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b9b0:	e032      	b.n	800ba18 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b9b2:	7afb      	ldrb	r3, [r7, #11]
 800b9b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b9b8:	b2db      	uxtb	r3, r3
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	68f8      	ldr	r0, [r7, #12]
 800b9be:	f000 f985 	bl	800bccc <USBD_CoreFindEP>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b9c6:	7dfb      	ldrb	r3, [r7, #23]
 800b9c8:	2bff      	cmp	r3, #255	@ 0xff
 800b9ca:	d025      	beq.n	800ba18 <USBD_LL_DataInStage+0x15a>
 800b9cc:	7dfb      	ldrb	r3, [r7, #23]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d122      	bne.n	800ba18 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	2b03      	cmp	r3, #3
 800b9dc:	d11c      	bne.n	800ba18 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b9de:	7dfa      	ldrb	r2, [r7, #23]
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	32ae      	adds	r2, #174	@ 0xae
 800b9e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9e8:	695b      	ldr	r3, [r3, #20]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d014      	beq.n	800ba18 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b9ee:	7dfa      	ldrb	r2, [r7, #23]
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b9f6:	7dfa      	ldrb	r2, [r7, #23]
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	32ae      	adds	r2, #174	@ 0xae
 800b9fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba00:	695b      	ldr	r3, [r3, #20]
 800ba02:	7afa      	ldrb	r2, [r7, #11]
 800ba04:	4611      	mov	r1, r2
 800ba06:	68f8      	ldr	r0, [r7, #12]
 800ba08:	4798      	blx	r3
 800ba0a:	4603      	mov	r3, r0
 800ba0c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ba0e:	7dbb      	ldrb	r3, [r7, #22]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d001      	beq.n	800ba18 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ba14:	7dbb      	ldrb	r3, [r7, #22]
 800ba16:	e000      	b.n	800ba1a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ba18:	2300      	movs	r3, #0
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3718      	adds	r7, #24
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}

0800ba22 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ba22:	b580      	push	{r7, lr}
 800ba24:	b084      	sub	sp, #16
 800ba26:	af00      	add	r7, sp, #0
 800ba28:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2201      	movs	r2, #1
 800ba32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2200      	movs	r2, #0
 800ba42:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2200      	movs	r2, #0
 800ba50:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d014      	beq.n	800ba88 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d00e      	beq.n	800ba88 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	687a      	ldr	r2, [r7, #4]
 800ba74:	6852      	ldr	r2, [r2, #4]
 800ba76:	b2d2      	uxtb	r2, r2
 800ba78:	4611      	mov	r1, r2
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	4798      	blx	r3
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d001      	beq.n	800ba88 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ba84:	2303      	movs	r3, #3
 800ba86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba88:	2340      	movs	r3, #64	@ 0x40
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	2100      	movs	r1, #0
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f001 fbe9 	bl	800d266 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2201      	movs	r2, #1
 800ba98:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	2240      	movs	r2, #64	@ 0x40
 800baa0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800baa4:	2340      	movs	r3, #64	@ 0x40
 800baa6:	2200      	movs	r2, #0
 800baa8:	2180      	movs	r1, #128	@ 0x80
 800baaa:	6878      	ldr	r0, [r7, #4]
 800baac:	f001 fbdb 	bl	800d266 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2201      	movs	r2, #1
 800bab4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2240      	movs	r2, #64	@ 0x40
 800baba:	621a      	str	r2, [r3, #32]

  return ret;
 800babc:	7bfb      	ldrb	r3, [r7, #15]
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3710      	adds	r7, #16
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}

0800bac6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bac6:	b480      	push	{r7}
 800bac8:	b083      	sub	sp, #12
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
 800bace:	460b      	mov	r3, r1
 800bad0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	78fa      	ldrb	r2, [r7, #3]
 800bad6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bad8:	2300      	movs	r3, #0
}
 800bada:	4618      	mov	r0, r3
 800badc:	370c      	adds	r7, #12
 800bade:	46bd      	mov	sp, r7
 800bae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae4:	4770      	bx	lr

0800bae6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bae6:	b480      	push	{r7}
 800bae8:	b083      	sub	sp, #12
 800baea:	af00      	add	r7, sp, #0
 800baec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baf4:	b2db      	uxtb	r3, r3
 800baf6:	2b04      	cmp	r3, #4
 800baf8:	d006      	beq.n	800bb08 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb00:	b2da      	uxtb	r2, r3
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2204      	movs	r2, #4
 800bb0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bb10:	2300      	movs	r3, #0
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	370c      	adds	r7, #12
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr

0800bb1e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bb1e:	b480      	push	{r7}
 800bb20:	b083      	sub	sp, #12
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	2b04      	cmp	r3, #4
 800bb30:	d106      	bne.n	800bb40 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bb38:	b2da      	uxtb	r2, r3
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	370c      	adds	r7, #12
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr

0800bb4e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bb4e:	b580      	push	{r7, lr}
 800bb50:	b082      	sub	sp, #8
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	2b03      	cmp	r3, #3
 800bb60:	d110      	bne.n	800bb84 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d00b      	beq.n	800bb84 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb72:	69db      	ldr	r3, [r3, #28]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d005      	beq.n	800bb84 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb7e:	69db      	ldr	r3, [r3, #28]
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bb84:	2300      	movs	r3, #0
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3708      	adds	r7, #8
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}

0800bb8e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bb8e:	b580      	push	{r7, lr}
 800bb90:	b082      	sub	sp, #8
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	6078      	str	r0, [r7, #4]
 800bb96:	460b      	mov	r3, r1
 800bb98:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	32ae      	adds	r2, #174	@ 0xae
 800bba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d101      	bne.n	800bbb0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bbac:	2303      	movs	r3, #3
 800bbae:	e01c      	b.n	800bbea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbb6:	b2db      	uxtb	r3, r3
 800bbb8:	2b03      	cmp	r3, #3
 800bbba:	d115      	bne.n	800bbe8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	32ae      	adds	r2, #174	@ 0xae
 800bbc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbca:	6a1b      	ldr	r3, [r3, #32]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d00b      	beq.n	800bbe8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	32ae      	adds	r2, #174	@ 0xae
 800bbda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbde:	6a1b      	ldr	r3, [r3, #32]
 800bbe0:	78fa      	ldrb	r2, [r7, #3]
 800bbe2:	4611      	mov	r1, r2
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bbe8:	2300      	movs	r3, #0
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3708      	adds	r7, #8
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	bd80      	pop	{r7, pc}

0800bbf2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bbf2:	b580      	push	{r7, lr}
 800bbf4:	b082      	sub	sp, #8
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
 800bbfa:	460b      	mov	r3, r1
 800bbfc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	32ae      	adds	r2, #174	@ 0xae
 800bc08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d101      	bne.n	800bc14 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bc10:	2303      	movs	r3, #3
 800bc12:	e01c      	b.n	800bc4e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bc1a:	b2db      	uxtb	r3, r3
 800bc1c:	2b03      	cmp	r3, #3
 800bc1e:	d115      	bne.n	800bc4c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	32ae      	adds	r2, #174	@ 0xae
 800bc2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d00b      	beq.n	800bc4c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	32ae      	adds	r2, #174	@ 0xae
 800bc3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc44:	78fa      	ldrb	r2, [r7, #3]
 800bc46:	4611      	mov	r1, r2
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bc4c:	2300      	movs	r3, #0
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3708      	adds	r7, #8
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}

0800bc56 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bc56:	b480      	push	{r7}
 800bc58:	b083      	sub	sp, #12
 800bc5a:	af00      	add	r7, sp, #0
 800bc5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc5e:	2300      	movs	r3, #0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bc74:	2300      	movs	r3, #0
 800bc76:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2201      	movs	r2, #1
 800bc7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d00e      	beq.n	800bca8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	687a      	ldr	r2, [r7, #4]
 800bc94:	6852      	ldr	r2, [r2, #4]
 800bc96:	b2d2      	uxtb	r2, r2
 800bc98:	4611      	mov	r1, r2
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	4798      	blx	r3
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d001      	beq.n	800bca8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bca4:	2303      	movs	r3, #3
 800bca6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bca8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3710      	adds	r7, #16
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}

0800bcb2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bcb2:	b480      	push	{r7}
 800bcb4:	b083      	sub	sp, #12
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
 800bcba:	460b      	mov	r3, r1
 800bcbc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bcbe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr

0800bccc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bccc:	b480      	push	{r7}
 800bcce:	b083      	sub	sp, #12
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bcd8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	370c      	adds	r7, #12
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr

0800bce6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bce6:	b580      	push	{r7, lr}
 800bce8:	b086      	sub	sp, #24
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
 800bcee:	460b      	mov	r3, r1
 800bcf0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	885b      	ldrh	r3, [r3, #2]
 800bd02:	b29b      	uxth	r3, r3
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	7812      	ldrb	r2, [r2, #0]
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d91f      	bls.n	800bd4c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bd12:	e013      	b.n	800bd3c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bd14:	f107 030a 	add.w	r3, r7, #10
 800bd18:	4619      	mov	r1, r3
 800bd1a:	6978      	ldr	r0, [r7, #20]
 800bd1c:	f000 f81b 	bl	800bd56 <USBD_GetNextDesc>
 800bd20:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	785b      	ldrb	r3, [r3, #1]
 800bd26:	2b05      	cmp	r3, #5
 800bd28:	d108      	bne.n	800bd3c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bd2e:	693b      	ldr	r3, [r7, #16]
 800bd30:	789b      	ldrb	r3, [r3, #2]
 800bd32:	78fa      	ldrb	r2, [r7, #3]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d008      	beq.n	800bd4a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	885b      	ldrh	r3, [r3, #2]
 800bd40:	b29a      	uxth	r2, r3
 800bd42:	897b      	ldrh	r3, [r7, #10]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d8e5      	bhi.n	800bd14 <USBD_GetEpDesc+0x2e>
 800bd48:	e000      	b.n	800bd4c <USBD_GetEpDesc+0x66>
          break;
 800bd4a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bd4c:	693b      	ldr	r3, [r7, #16]
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3718      	adds	r7, #24
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bd80      	pop	{r7, pc}

0800bd56 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bd56:	b480      	push	{r7}
 800bd58:	b085      	sub	sp, #20
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
 800bd5e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	881b      	ldrh	r3, [r3, #0]
 800bd68:	68fa      	ldr	r2, [r7, #12]
 800bd6a:	7812      	ldrb	r2, [r2, #0]
 800bd6c:	4413      	add	r3, r2
 800bd6e:	b29a      	uxth	r2, r3
 800bd70:	683b      	ldr	r3, [r7, #0]
 800bd72:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	461a      	mov	r2, r3
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bd80:	68fb      	ldr	r3, [r7, #12]
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3714      	adds	r7, #20
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr

0800bd8e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bd8e:	b480      	push	{r7}
 800bd90:	b087      	sub	sp, #28
 800bd92:	af00      	add	r7, sp, #0
 800bd94:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	3301      	adds	r3, #1
 800bda4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	781b      	ldrb	r3, [r3, #0]
 800bdaa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bdac:	8a3b      	ldrh	r3, [r7, #16]
 800bdae:	021b      	lsls	r3, r3, #8
 800bdb0:	b21a      	sxth	r2, r3
 800bdb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bdb6:	4313      	orrs	r3, r2
 800bdb8:	b21b      	sxth	r3, r3
 800bdba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bdbc:	89fb      	ldrh	r3, [r7, #14]
}
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	371c      	adds	r7, #28
 800bdc2:	46bd      	mov	sp, r7
 800bdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc8:	4770      	bx	lr
	...

0800bdcc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b084      	sub	sp, #16
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bde2:	2b40      	cmp	r3, #64	@ 0x40
 800bde4:	d005      	beq.n	800bdf2 <USBD_StdDevReq+0x26>
 800bde6:	2b40      	cmp	r3, #64	@ 0x40
 800bde8:	d857      	bhi.n	800be9a <USBD_StdDevReq+0xce>
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00f      	beq.n	800be0e <USBD_StdDevReq+0x42>
 800bdee:	2b20      	cmp	r3, #32
 800bdf0:	d153      	bne.n	800be9a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	32ae      	adds	r2, #174	@ 0xae
 800bdfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be00:	689b      	ldr	r3, [r3, #8]
 800be02:	6839      	ldr	r1, [r7, #0]
 800be04:	6878      	ldr	r0, [r7, #4]
 800be06:	4798      	blx	r3
 800be08:	4603      	mov	r3, r0
 800be0a:	73fb      	strb	r3, [r7, #15]
      break;
 800be0c:	e04a      	b.n	800bea4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	785b      	ldrb	r3, [r3, #1]
 800be12:	2b09      	cmp	r3, #9
 800be14:	d83b      	bhi.n	800be8e <USBD_StdDevReq+0xc2>
 800be16:	a201      	add	r2, pc, #4	@ (adr r2, 800be1c <USBD_StdDevReq+0x50>)
 800be18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be1c:	0800be71 	.word	0x0800be71
 800be20:	0800be85 	.word	0x0800be85
 800be24:	0800be8f 	.word	0x0800be8f
 800be28:	0800be7b 	.word	0x0800be7b
 800be2c:	0800be8f 	.word	0x0800be8f
 800be30:	0800be4f 	.word	0x0800be4f
 800be34:	0800be45 	.word	0x0800be45
 800be38:	0800be8f 	.word	0x0800be8f
 800be3c:	0800be67 	.word	0x0800be67
 800be40:	0800be59 	.word	0x0800be59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800be44:	6839      	ldr	r1, [r7, #0]
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f000 fa3c 	bl	800c2c4 <USBD_GetDescriptor>
          break;
 800be4c:	e024      	b.n	800be98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800be4e:	6839      	ldr	r1, [r7, #0]
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f000 fba1 	bl	800c598 <USBD_SetAddress>
          break;
 800be56:	e01f      	b.n	800be98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800be58:	6839      	ldr	r1, [r7, #0]
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 fbe0 	bl	800c620 <USBD_SetConfig>
 800be60:	4603      	mov	r3, r0
 800be62:	73fb      	strb	r3, [r7, #15]
          break;
 800be64:	e018      	b.n	800be98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be66:	6839      	ldr	r1, [r7, #0]
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 fc83 	bl	800c774 <USBD_GetConfig>
          break;
 800be6e:	e013      	b.n	800be98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be70:	6839      	ldr	r1, [r7, #0]
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 fcb4 	bl	800c7e0 <USBD_GetStatus>
          break;
 800be78:	e00e      	b.n	800be98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be7a:	6839      	ldr	r1, [r7, #0]
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f000 fce3 	bl	800c848 <USBD_SetFeature>
          break;
 800be82:	e009      	b.n	800be98 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be84:	6839      	ldr	r1, [r7, #0]
 800be86:	6878      	ldr	r0, [r7, #4]
 800be88:	f000 fd07 	bl	800c89a <USBD_ClrFeature>
          break;
 800be8c:	e004      	b.n	800be98 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800be8e:	6839      	ldr	r1, [r7, #0]
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f000 fd5e 	bl	800c952 <USBD_CtlError>
          break;
 800be96:	bf00      	nop
      }
      break;
 800be98:	e004      	b.n	800bea4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800be9a:	6839      	ldr	r1, [r7, #0]
 800be9c:	6878      	ldr	r0, [r7, #4]
 800be9e:	f000 fd58 	bl	800c952 <USBD_CtlError>
      break;
 800bea2:	bf00      	nop
  }

  return ret;
 800bea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bea6:	4618      	mov	r0, r3
 800bea8:	3710      	adds	r7, #16
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}
 800beae:	bf00      	nop

0800beb0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
 800beb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800beba:	2300      	movs	r3, #0
 800bebc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	781b      	ldrb	r3, [r3, #0]
 800bec2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bec6:	2b40      	cmp	r3, #64	@ 0x40
 800bec8:	d005      	beq.n	800bed6 <USBD_StdItfReq+0x26>
 800beca:	2b40      	cmp	r3, #64	@ 0x40
 800becc:	d852      	bhi.n	800bf74 <USBD_StdItfReq+0xc4>
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d001      	beq.n	800bed6 <USBD_StdItfReq+0x26>
 800bed2:	2b20      	cmp	r3, #32
 800bed4:	d14e      	bne.n	800bf74 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bedc:	b2db      	uxtb	r3, r3
 800bede:	3b01      	subs	r3, #1
 800bee0:	2b02      	cmp	r3, #2
 800bee2:	d840      	bhi.n	800bf66 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	889b      	ldrh	r3, [r3, #4]
 800bee8:	b2db      	uxtb	r3, r3
 800beea:	2b01      	cmp	r3, #1
 800beec:	d836      	bhi.n	800bf5c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	889b      	ldrh	r3, [r3, #4]
 800bef2:	b2db      	uxtb	r3, r3
 800bef4:	4619      	mov	r1, r3
 800bef6:	6878      	ldr	r0, [r7, #4]
 800bef8:	f7ff fedb 	bl	800bcb2 <USBD_CoreFindIF>
 800befc:	4603      	mov	r3, r0
 800befe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf00:	7bbb      	ldrb	r3, [r7, #14]
 800bf02:	2bff      	cmp	r3, #255	@ 0xff
 800bf04:	d01d      	beq.n	800bf42 <USBD_StdItfReq+0x92>
 800bf06:	7bbb      	ldrb	r3, [r7, #14]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d11a      	bne.n	800bf42 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bf0c:	7bba      	ldrb	r2, [r7, #14]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	32ae      	adds	r2, #174	@ 0xae
 800bf12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d00f      	beq.n	800bf3c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bf1c:	7bba      	ldrb	r2, [r7, #14]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bf24:	7bba      	ldrb	r2, [r7, #14]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	32ae      	adds	r2, #174	@ 0xae
 800bf2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf2e:	689b      	ldr	r3, [r3, #8]
 800bf30:	6839      	ldr	r1, [r7, #0]
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	4798      	blx	r3
 800bf36:	4603      	mov	r3, r0
 800bf38:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf3a:	e004      	b.n	800bf46 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bf3c:	2303      	movs	r3, #3
 800bf3e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bf40:	e001      	b.n	800bf46 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bf42:	2303      	movs	r3, #3
 800bf44:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	88db      	ldrh	r3, [r3, #6]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d110      	bne.n	800bf70 <USBD_StdItfReq+0xc0>
 800bf4e:	7bfb      	ldrb	r3, [r7, #15]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d10d      	bne.n	800bf70 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bf54:	6878      	ldr	r0, [r7, #4]
 800bf56:	f000 fdd3 	bl	800cb00 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bf5a:	e009      	b.n	800bf70 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bf5c:	6839      	ldr	r1, [r7, #0]
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 fcf7 	bl	800c952 <USBD_CtlError>
          break;
 800bf64:	e004      	b.n	800bf70 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bf66:	6839      	ldr	r1, [r7, #0]
 800bf68:	6878      	ldr	r0, [r7, #4]
 800bf6a:	f000 fcf2 	bl	800c952 <USBD_CtlError>
          break;
 800bf6e:	e000      	b.n	800bf72 <USBD_StdItfReq+0xc2>
          break;
 800bf70:	bf00      	nop
      }
      break;
 800bf72:	e004      	b.n	800bf7e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bf74:	6839      	ldr	r1, [r7, #0]
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 fceb 	bl	800c952 <USBD_CtlError>
      break;
 800bf7c:	bf00      	nop
  }

  return ret;
 800bf7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3710      	adds	r7, #16
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b084      	sub	sp, #16
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf92:	2300      	movs	r3, #0
 800bf94:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	889b      	ldrh	r3, [r3, #4]
 800bf9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bfa4:	2b40      	cmp	r3, #64	@ 0x40
 800bfa6:	d007      	beq.n	800bfb8 <USBD_StdEPReq+0x30>
 800bfa8:	2b40      	cmp	r3, #64	@ 0x40
 800bfaa:	f200 817f 	bhi.w	800c2ac <USBD_StdEPReq+0x324>
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d02a      	beq.n	800c008 <USBD_StdEPReq+0x80>
 800bfb2:	2b20      	cmp	r3, #32
 800bfb4:	f040 817a 	bne.w	800c2ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bfb8:	7bbb      	ldrb	r3, [r7, #14]
 800bfba:	4619      	mov	r1, r3
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f7ff fe85 	bl	800bccc <USBD_CoreFindEP>
 800bfc2:	4603      	mov	r3, r0
 800bfc4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bfc6:	7b7b      	ldrb	r3, [r7, #13]
 800bfc8:	2bff      	cmp	r3, #255	@ 0xff
 800bfca:	f000 8174 	beq.w	800c2b6 <USBD_StdEPReq+0x32e>
 800bfce:	7b7b      	ldrb	r3, [r7, #13]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	f040 8170 	bne.w	800c2b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bfd6:	7b7a      	ldrb	r2, [r7, #13]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bfde:	7b7a      	ldrb	r2, [r7, #13]
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	32ae      	adds	r2, #174	@ 0xae
 800bfe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfe8:	689b      	ldr	r3, [r3, #8]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	f000 8163 	beq.w	800c2b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bff0:	7b7a      	ldrb	r2, [r7, #13]
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	32ae      	adds	r2, #174	@ 0xae
 800bff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	6839      	ldr	r1, [r7, #0]
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	4798      	blx	r3
 800c002:	4603      	mov	r3, r0
 800c004:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c006:	e156      	b.n	800c2b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	785b      	ldrb	r3, [r3, #1]
 800c00c:	2b03      	cmp	r3, #3
 800c00e:	d008      	beq.n	800c022 <USBD_StdEPReq+0x9a>
 800c010:	2b03      	cmp	r3, #3
 800c012:	f300 8145 	bgt.w	800c2a0 <USBD_StdEPReq+0x318>
 800c016:	2b00      	cmp	r3, #0
 800c018:	f000 809b 	beq.w	800c152 <USBD_StdEPReq+0x1ca>
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	d03c      	beq.n	800c09a <USBD_StdEPReq+0x112>
 800c020:	e13e      	b.n	800c2a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c028:	b2db      	uxtb	r3, r3
 800c02a:	2b02      	cmp	r3, #2
 800c02c:	d002      	beq.n	800c034 <USBD_StdEPReq+0xac>
 800c02e:	2b03      	cmp	r3, #3
 800c030:	d016      	beq.n	800c060 <USBD_StdEPReq+0xd8>
 800c032:	e02c      	b.n	800c08e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c034:	7bbb      	ldrb	r3, [r7, #14]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00d      	beq.n	800c056 <USBD_StdEPReq+0xce>
 800c03a:	7bbb      	ldrb	r3, [r7, #14]
 800c03c:	2b80      	cmp	r3, #128	@ 0x80
 800c03e:	d00a      	beq.n	800c056 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c040:	7bbb      	ldrb	r3, [r7, #14]
 800c042:	4619      	mov	r1, r3
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f001 f953 	bl	800d2f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c04a:	2180      	movs	r1, #128	@ 0x80
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f001 f94f 	bl	800d2f0 <USBD_LL_StallEP>
 800c052:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c054:	e020      	b.n	800c098 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c056:	6839      	ldr	r1, [r7, #0]
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 fc7a 	bl	800c952 <USBD_CtlError>
              break;
 800c05e:	e01b      	b.n	800c098 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	885b      	ldrh	r3, [r3, #2]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d10e      	bne.n	800c086 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c068:	7bbb      	ldrb	r3, [r7, #14]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d00b      	beq.n	800c086 <USBD_StdEPReq+0xfe>
 800c06e:	7bbb      	ldrb	r3, [r7, #14]
 800c070:	2b80      	cmp	r3, #128	@ 0x80
 800c072:	d008      	beq.n	800c086 <USBD_StdEPReq+0xfe>
 800c074:	683b      	ldr	r3, [r7, #0]
 800c076:	88db      	ldrh	r3, [r3, #6]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d104      	bne.n	800c086 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c07c:	7bbb      	ldrb	r3, [r7, #14]
 800c07e:	4619      	mov	r1, r3
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f001 f935 	bl	800d2f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 fd3a 	bl	800cb00 <USBD_CtlSendStatus>

              break;
 800c08c:	e004      	b.n	800c098 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c08e:	6839      	ldr	r1, [r7, #0]
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f000 fc5e 	bl	800c952 <USBD_CtlError>
              break;
 800c096:	bf00      	nop
          }
          break;
 800c098:	e107      	b.n	800c2aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	2b02      	cmp	r3, #2
 800c0a4:	d002      	beq.n	800c0ac <USBD_StdEPReq+0x124>
 800c0a6:	2b03      	cmp	r3, #3
 800c0a8:	d016      	beq.n	800c0d8 <USBD_StdEPReq+0x150>
 800c0aa:	e04b      	b.n	800c144 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c0ac:	7bbb      	ldrb	r3, [r7, #14]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d00d      	beq.n	800c0ce <USBD_StdEPReq+0x146>
 800c0b2:	7bbb      	ldrb	r3, [r7, #14]
 800c0b4:	2b80      	cmp	r3, #128	@ 0x80
 800c0b6:	d00a      	beq.n	800c0ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c0b8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	6878      	ldr	r0, [r7, #4]
 800c0be:	f001 f917 	bl	800d2f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c0c2:	2180      	movs	r1, #128	@ 0x80
 800c0c4:	6878      	ldr	r0, [r7, #4]
 800c0c6:	f001 f913 	bl	800d2f0 <USBD_LL_StallEP>
 800c0ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c0cc:	e040      	b.n	800c150 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c0ce:	6839      	ldr	r1, [r7, #0]
 800c0d0:	6878      	ldr	r0, [r7, #4]
 800c0d2:	f000 fc3e 	bl	800c952 <USBD_CtlError>
              break;
 800c0d6:	e03b      	b.n	800c150 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	885b      	ldrh	r3, [r3, #2]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d136      	bne.n	800c14e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c0e0:	7bbb      	ldrb	r3, [r7, #14]
 800c0e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d004      	beq.n	800c0f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c0ea:	7bbb      	ldrb	r3, [r7, #14]
 800c0ec:	4619      	mov	r1, r3
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f001 f91d 	bl	800d32e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 fd03 	bl	800cb00 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c0fa:	7bbb      	ldrb	r3, [r7, #14]
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f7ff fde4 	bl	800bccc <USBD_CoreFindEP>
 800c104:	4603      	mov	r3, r0
 800c106:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c108:	7b7b      	ldrb	r3, [r7, #13]
 800c10a:	2bff      	cmp	r3, #255	@ 0xff
 800c10c:	d01f      	beq.n	800c14e <USBD_StdEPReq+0x1c6>
 800c10e:	7b7b      	ldrb	r3, [r7, #13]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d11c      	bne.n	800c14e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c114:	7b7a      	ldrb	r2, [r7, #13]
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c11c:	7b7a      	ldrb	r2, [r7, #13]
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	32ae      	adds	r2, #174	@ 0xae
 800c122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c126:	689b      	ldr	r3, [r3, #8]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d010      	beq.n	800c14e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c12c:	7b7a      	ldrb	r2, [r7, #13]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	32ae      	adds	r2, #174	@ 0xae
 800c132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	6839      	ldr	r1, [r7, #0]
 800c13a:	6878      	ldr	r0, [r7, #4]
 800c13c:	4798      	blx	r3
 800c13e:	4603      	mov	r3, r0
 800c140:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c142:	e004      	b.n	800c14e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c144:	6839      	ldr	r1, [r7, #0]
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 fc03 	bl	800c952 <USBD_CtlError>
              break;
 800c14c:	e000      	b.n	800c150 <USBD_StdEPReq+0x1c8>
              break;
 800c14e:	bf00      	nop
          }
          break;
 800c150:	e0ab      	b.n	800c2aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c158:	b2db      	uxtb	r3, r3
 800c15a:	2b02      	cmp	r3, #2
 800c15c:	d002      	beq.n	800c164 <USBD_StdEPReq+0x1dc>
 800c15e:	2b03      	cmp	r3, #3
 800c160:	d032      	beq.n	800c1c8 <USBD_StdEPReq+0x240>
 800c162:	e097      	b.n	800c294 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c164:	7bbb      	ldrb	r3, [r7, #14]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d007      	beq.n	800c17a <USBD_StdEPReq+0x1f2>
 800c16a:	7bbb      	ldrb	r3, [r7, #14]
 800c16c:	2b80      	cmp	r3, #128	@ 0x80
 800c16e:	d004      	beq.n	800c17a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c170:	6839      	ldr	r1, [r7, #0]
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 fbed 	bl	800c952 <USBD_CtlError>
                break;
 800c178:	e091      	b.n	800c29e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c17a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	da0b      	bge.n	800c19a <USBD_StdEPReq+0x212>
 800c182:	7bbb      	ldrb	r3, [r7, #14]
 800c184:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c188:	4613      	mov	r3, r2
 800c18a:	009b      	lsls	r3, r3, #2
 800c18c:	4413      	add	r3, r2
 800c18e:	009b      	lsls	r3, r3, #2
 800c190:	3310      	adds	r3, #16
 800c192:	687a      	ldr	r2, [r7, #4]
 800c194:	4413      	add	r3, r2
 800c196:	3304      	adds	r3, #4
 800c198:	e00b      	b.n	800c1b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c19a:	7bbb      	ldrb	r3, [r7, #14]
 800c19c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1a0:	4613      	mov	r3, r2
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	4413      	add	r3, r2
 800c1a6:	009b      	lsls	r3, r3, #2
 800c1a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c1ac:	687a      	ldr	r2, [r7, #4]
 800c1ae:	4413      	add	r3, r2
 800c1b0:	3304      	adds	r3, #4
 800c1b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	2202      	movs	r2, #2
 800c1be:	4619      	mov	r1, r3
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 fc43 	bl	800ca4c <USBD_CtlSendData>
              break;
 800c1c6:	e06a      	b.n	800c29e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c1c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	da11      	bge.n	800c1f4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c1d0:	7bbb      	ldrb	r3, [r7, #14]
 800c1d2:	f003 020f 	and.w	r2, r3, #15
 800c1d6:	6879      	ldr	r1, [r7, #4]
 800c1d8:	4613      	mov	r3, r2
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	4413      	add	r3, r2
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	440b      	add	r3, r1
 800c1e2:	3324      	adds	r3, #36	@ 0x24
 800c1e4:	881b      	ldrh	r3, [r3, #0]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d117      	bne.n	800c21a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c1ea:	6839      	ldr	r1, [r7, #0]
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f000 fbb0 	bl	800c952 <USBD_CtlError>
                  break;
 800c1f2:	e054      	b.n	800c29e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c1f4:	7bbb      	ldrb	r3, [r7, #14]
 800c1f6:	f003 020f 	and.w	r2, r3, #15
 800c1fa:	6879      	ldr	r1, [r7, #4]
 800c1fc:	4613      	mov	r3, r2
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	4413      	add	r3, r2
 800c202:	009b      	lsls	r3, r3, #2
 800c204:	440b      	add	r3, r1
 800c206:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c20a:	881b      	ldrh	r3, [r3, #0]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d104      	bne.n	800c21a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c210:	6839      	ldr	r1, [r7, #0]
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f000 fb9d 	bl	800c952 <USBD_CtlError>
                  break;
 800c218:	e041      	b.n	800c29e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c21a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	da0b      	bge.n	800c23a <USBD_StdEPReq+0x2b2>
 800c222:	7bbb      	ldrb	r3, [r7, #14]
 800c224:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c228:	4613      	mov	r3, r2
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	4413      	add	r3, r2
 800c22e:	009b      	lsls	r3, r3, #2
 800c230:	3310      	adds	r3, #16
 800c232:	687a      	ldr	r2, [r7, #4]
 800c234:	4413      	add	r3, r2
 800c236:	3304      	adds	r3, #4
 800c238:	e00b      	b.n	800c252 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c23a:	7bbb      	ldrb	r3, [r7, #14]
 800c23c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c240:	4613      	mov	r3, r2
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	4413      	add	r3, r2
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	4413      	add	r3, r2
 800c250:	3304      	adds	r3, #4
 800c252:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c254:	7bbb      	ldrb	r3, [r7, #14]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d002      	beq.n	800c260 <USBD_StdEPReq+0x2d8>
 800c25a:	7bbb      	ldrb	r3, [r7, #14]
 800c25c:	2b80      	cmp	r3, #128	@ 0x80
 800c25e:	d103      	bne.n	800c268 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	2200      	movs	r2, #0
 800c264:	601a      	str	r2, [r3, #0]
 800c266:	e00e      	b.n	800c286 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c268:	7bbb      	ldrb	r3, [r7, #14]
 800c26a:	4619      	mov	r1, r3
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f001 f87d 	bl	800d36c <USBD_LL_IsStallEP>
 800c272:	4603      	mov	r3, r0
 800c274:	2b00      	cmp	r3, #0
 800c276:	d003      	beq.n	800c280 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	2201      	movs	r2, #1
 800c27c:	601a      	str	r2, [r3, #0]
 800c27e:	e002      	b.n	800c286 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	2200      	movs	r2, #0
 800c284:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c286:	68bb      	ldr	r3, [r7, #8]
 800c288:	2202      	movs	r2, #2
 800c28a:	4619      	mov	r1, r3
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 fbdd 	bl	800ca4c <USBD_CtlSendData>
              break;
 800c292:	e004      	b.n	800c29e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c294:	6839      	ldr	r1, [r7, #0]
 800c296:	6878      	ldr	r0, [r7, #4]
 800c298:	f000 fb5b 	bl	800c952 <USBD_CtlError>
              break;
 800c29c:	bf00      	nop
          }
          break;
 800c29e:	e004      	b.n	800c2aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c2a0:	6839      	ldr	r1, [r7, #0]
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f000 fb55 	bl	800c952 <USBD_CtlError>
          break;
 800c2a8:	bf00      	nop
      }
      break;
 800c2aa:	e005      	b.n	800c2b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c2ac:	6839      	ldr	r1, [r7, #0]
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f000 fb4f 	bl	800c952 <USBD_CtlError>
      break;
 800c2b4:	e000      	b.n	800c2b8 <USBD_StdEPReq+0x330>
      break;
 800c2b6:	bf00      	nop
  }

  return ret;
 800c2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3710      	adds	r7, #16
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
	...

0800c2c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	885b      	ldrh	r3, [r3, #2]
 800c2de:	0a1b      	lsrs	r3, r3, #8
 800c2e0:	b29b      	uxth	r3, r3
 800c2e2:	3b01      	subs	r3, #1
 800c2e4:	2b06      	cmp	r3, #6
 800c2e6:	f200 8128 	bhi.w	800c53a <USBD_GetDescriptor+0x276>
 800c2ea:	a201      	add	r2, pc, #4	@ (adr r2, 800c2f0 <USBD_GetDescriptor+0x2c>)
 800c2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2f0:	0800c30d 	.word	0x0800c30d
 800c2f4:	0800c325 	.word	0x0800c325
 800c2f8:	0800c365 	.word	0x0800c365
 800c2fc:	0800c53b 	.word	0x0800c53b
 800c300:	0800c53b 	.word	0x0800c53b
 800c304:	0800c4db 	.word	0x0800c4db
 800c308:	0800c507 	.word	0x0800c507
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	7c12      	ldrb	r2, [r2, #16]
 800c318:	f107 0108 	add.w	r1, r7, #8
 800c31c:	4610      	mov	r0, r2
 800c31e:	4798      	blx	r3
 800c320:	60f8      	str	r0, [r7, #12]
      break;
 800c322:	e112      	b.n	800c54a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	7c1b      	ldrb	r3, [r3, #16]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d10d      	bne.n	800c348 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c334:	f107 0208 	add.w	r2, r7, #8
 800c338:	4610      	mov	r0, r2
 800c33a:	4798      	blx	r3
 800c33c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	3301      	adds	r3, #1
 800c342:	2202      	movs	r2, #2
 800c344:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c346:	e100      	b.n	800c54a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c34e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c350:	f107 0208 	add.w	r2, r7, #8
 800c354:	4610      	mov	r0, r2
 800c356:	4798      	blx	r3
 800c358:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	3301      	adds	r3, #1
 800c35e:	2202      	movs	r2, #2
 800c360:	701a      	strb	r2, [r3, #0]
      break;
 800c362:	e0f2      	b.n	800c54a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	885b      	ldrh	r3, [r3, #2]
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	2b05      	cmp	r3, #5
 800c36c:	f200 80ac 	bhi.w	800c4c8 <USBD_GetDescriptor+0x204>
 800c370:	a201      	add	r2, pc, #4	@ (adr r2, 800c378 <USBD_GetDescriptor+0xb4>)
 800c372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c376:	bf00      	nop
 800c378:	0800c391 	.word	0x0800c391
 800c37c:	0800c3c5 	.word	0x0800c3c5
 800c380:	0800c3f9 	.word	0x0800c3f9
 800c384:	0800c42d 	.word	0x0800c42d
 800c388:	0800c461 	.word	0x0800c461
 800c38c:	0800c495 	.word	0x0800c495
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d00b      	beq.n	800c3b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3a2:	685b      	ldr	r3, [r3, #4]
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	7c12      	ldrb	r2, [r2, #16]
 800c3a8:	f107 0108 	add.w	r1, r7, #8
 800c3ac:	4610      	mov	r0, r2
 800c3ae:	4798      	blx	r3
 800c3b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3b2:	e091      	b.n	800c4d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3b4:	6839      	ldr	r1, [r7, #0]
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 facb 	bl	800c952 <USBD_CtlError>
            err++;
 800c3bc:	7afb      	ldrb	r3, [r7, #11]
 800c3be:	3301      	adds	r3, #1
 800c3c0:	72fb      	strb	r3, [r7, #11]
          break;
 800c3c2:	e089      	b.n	800c4d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3ca:	689b      	ldr	r3, [r3, #8]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d00b      	beq.n	800c3e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3d6:	689b      	ldr	r3, [r3, #8]
 800c3d8:	687a      	ldr	r2, [r7, #4]
 800c3da:	7c12      	ldrb	r2, [r2, #16]
 800c3dc:	f107 0108 	add.w	r1, r7, #8
 800c3e0:	4610      	mov	r0, r2
 800c3e2:	4798      	blx	r3
 800c3e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3e6:	e077      	b.n	800c4d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3e8:	6839      	ldr	r1, [r7, #0]
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 fab1 	bl	800c952 <USBD_CtlError>
            err++;
 800c3f0:	7afb      	ldrb	r3, [r7, #11]
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	72fb      	strb	r3, [r7, #11]
          break;
 800c3f6:	e06f      	b.n	800c4d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d00b      	beq.n	800c41c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c40a:	68db      	ldr	r3, [r3, #12]
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	7c12      	ldrb	r2, [r2, #16]
 800c410:	f107 0108 	add.w	r1, r7, #8
 800c414:	4610      	mov	r0, r2
 800c416:	4798      	blx	r3
 800c418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c41a:	e05d      	b.n	800c4d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c41c:	6839      	ldr	r1, [r7, #0]
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f000 fa97 	bl	800c952 <USBD_CtlError>
            err++;
 800c424:	7afb      	ldrb	r3, [r7, #11]
 800c426:	3301      	adds	r3, #1
 800c428:	72fb      	strb	r3, [r7, #11]
          break;
 800c42a:	e055      	b.n	800c4d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c432:	691b      	ldr	r3, [r3, #16]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d00b      	beq.n	800c450 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c43e:	691b      	ldr	r3, [r3, #16]
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	7c12      	ldrb	r2, [r2, #16]
 800c444:	f107 0108 	add.w	r1, r7, #8
 800c448:	4610      	mov	r0, r2
 800c44a:	4798      	blx	r3
 800c44c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c44e:	e043      	b.n	800c4d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c450:	6839      	ldr	r1, [r7, #0]
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f000 fa7d 	bl	800c952 <USBD_CtlError>
            err++;
 800c458:	7afb      	ldrb	r3, [r7, #11]
 800c45a:	3301      	adds	r3, #1
 800c45c:	72fb      	strb	r3, [r7, #11]
          break;
 800c45e:	e03b      	b.n	800c4d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c466:	695b      	ldr	r3, [r3, #20]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d00b      	beq.n	800c484 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c472:	695b      	ldr	r3, [r3, #20]
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	7c12      	ldrb	r2, [r2, #16]
 800c478:	f107 0108 	add.w	r1, r7, #8
 800c47c:	4610      	mov	r0, r2
 800c47e:	4798      	blx	r3
 800c480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c482:	e029      	b.n	800c4d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c484:	6839      	ldr	r1, [r7, #0]
 800c486:	6878      	ldr	r0, [r7, #4]
 800c488:	f000 fa63 	bl	800c952 <USBD_CtlError>
            err++;
 800c48c:	7afb      	ldrb	r3, [r7, #11]
 800c48e:	3301      	adds	r3, #1
 800c490:	72fb      	strb	r3, [r7, #11]
          break;
 800c492:	e021      	b.n	800c4d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c49a:	699b      	ldr	r3, [r3, #24]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d00b      	beq.n	800c4b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c4a6:	699b      	ldr	r3, [r3, #24]
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	7c12      	ldrb	r2, [r2, #16]
 800c4ac:	f107 0108 	add.w	r1, r7, #8
 800c4b0:	4610      	mov	r0, r2
 800c4b2:	4798      	blx	r3
 800c4b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4b6:	e00f      	b.n	800c4d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4b8:	6839      	ldr	r1, [r7, #0]
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 fa49 	bl	800c952 <USBD_CtlError>
            err++;
 800c4c0:	7afb      	ldrb	r3, [r7, #11]
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	72fb      	strb	r3, [r7, #11]
          break;
 800c4c6:	e007      	b.n	800c4d8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c4c8:	6839      	ldr	r1, [r7, #0]
 800c4ca:	6878      	ldr	r0, [r7, #4]
 800c4cc:	f000 fa41 	bl	800c952 <USBD_CtlError>
          err++;
 800c4d0:	7afb      	ldrb	r3, [r7, #11]
 800c4d2:	3301      	adds	r3, #1
 800c4d4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c4d6:	bf00      	nop
      }
      break;
 800c4d8:	e037      	b.n	800c54a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	7c1b      	ldrb	r3, [r3, #16]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d109      	bne.n	800c4f6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4ea:	f107 0208 	add.w	r2, r7, #8
 800c4ee:	4610      	mov	r0, r2
 800c4f0:	4798      	blx	r3
 800c4f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4f4:	e029      	b.n	800c54a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c4f6:	6839      	ldr	r1, [r7, #0]
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f000 fa2a 	bl	800c952 <USBD_CtlError>
        err++;
 800c4fe:	7afb      	ldrb	r3, [r7, #11]
 800c500:	3301      	adds	r3, #1
 800c502:	72fb      	strb	r3, [r7, #11]
      break;
 800c504:	e021      	b.n	800c54a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	7c1b      	ldrb	r3, [r3, #16]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d10d      	bne.n	800c52a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c516:	f107 0208 	add.w	r2, r7, #8
 800c51a:	4610      	mov	r0, r2
 800c51c:	4798      	blx	r3
 800c51e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	3301      	adds	r3, #1
 800c524:	2207      	movs	r2, #7
 800c526:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c528:	e00f      	b.n	800c54a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c52a:	6839      	ldr	r1, [r7, #0]
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f000 fa10 	bl	800c952 <USBD_CtlError>
        err++;
 800c532:	7afb      	ldrb	r3, [r7, #11]
 800c534:	3301      	adds	r3, #1
 800c536:	72fb      	strb	r3, [r7, #11]
      break;
 800c538:	e007      	b.n	800c54a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c53a:	6839      	ldr	r1, [r7, #0]
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f000 fa08 	bl	800c952 <USBD_CtlError>
      err++;
 800c542:	7afb      	ldrb	r3, [r7, #11]
 800c544:	3301      	adds	r3, #1
 800c546:	72fb      	strb	r3, [r7, #11]
      break;
 800c548:	bf00      	nop
  }

  if (err != 0U)
 800c54a:	7afb      	ldrb	r3, [r7, #11]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d11e      	bne.n	800c58e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	88db      	ldrh	r3, [r3, #6]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d016      	beq.n	800c586 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c558:	893b      	ldrh	r3, [r7, #8]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d00e      	beq.n	800c57c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	88da      	ldrh	r2, [r3, #6]
 800c562:	893b      	ldrh	r3, [r7, #8]
 800c564:	4293      	cmp	r3, r2
 800c566:	bf28      	it	cs
 800c568:	4613      	movcs	r3, r2
 800c56a:	b29b      	uxth	r3, r3
 800c56c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c56e:	893b      	ldrh	r3, [r7, #8]
 800c570:	461a      	mov	r2, r3
 800c572:	68f9      	ldr	r1, [r7, #12]
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 fa69 	bl	800ca4c <USBD_CtlSendData>
 800c57a:	e009      	b.n	800c590 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c57c:	6839      	ldr	r1, [r7, #0]
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 f9e7 	bl	800c952 <USBD_CtlError>
 800c584:	e004      	b.n	800c590 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f000 faba 	bl	800cb00 <USBD_CtlSendStatus>
 800c58c:	e000      	b.n	800c590 <USBD_GetDescriptor+0x2cc>
    return;
 800c58e:	bf00      	nop
  }
}
 800c590:	3710      	adds	r7, #16
 800c592:	46bd      	mov	sp, r7
 800c594:	bd80      	pop	{r7, pc}
 800c596:	bf00      	nop

0800c598 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b084      	sub	sp, #16
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	889b      	ldrh	r3, [r3, #4]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d131      	bne.n	800c60e <USBD_SetAddress+0x76>
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	88db      	ldrh	r3, [r3, #6]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d12d      	bne.n	800c60e <USBD_SetAddress+0x76>
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	885b      	ldrh	r3, [r3, #2]
 800c5b6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c5b8:	d829      	bhi.n	800c60e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	885b      	ldrh	r3, [r3, #2]
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c5c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5cc:	b2db      	uxtb	r3, r3
 800c5ce:	2b03      	cmp	r3, #3
 800c5d0:	d104      	bne.n	800c5dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c5d2:	6839      	ldr	r1, [r7, #0]
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f000 f9bc 	bl	800c952 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5da:	e01d      	b.n	800c618 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	7bfa      	ldrb	r2, [r7, #15]
 800c5e0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c5e4:	7bfb      	ldrb	r3, [r7, #15]
 800c5e6:	4619      	mov	r1, r3
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 feeb 	bl	800d3c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f000 fa86 	bl	800cb00 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c5f4:	7bfb      	ldrb	r3, [r7, #15]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d004      	beq.n	800c604 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2202      	movs	r2, #2
 800c5fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c602:	e009      	b.n	800c618 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	2201      	movs	r2, #1
 800c608:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c60c:	e004      	b.n	800c618 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c60e:	6839      	ldr	r1, [r7, #0]
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	f000 f99e 	bl	800c952 <USBD_CtlError>
  }
}
 800c616:	bf00      	nop
 800c618:	bf00      	nop
 800c61a:	3710      	adds	r7, #16
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b084      	sub	sp, #16
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c62a:	2300      	movs	r3, #0
 800c62c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	885b      	ldrh	r3, [r3, #2]
 800c632:	b2da      	uxtb	r2, r3
 800c634:	4b4e      	ldr	r3, [pc, #312]	@ (800c770 <USBD_SetConfig+0x150>)
 800c636:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c638:	4b4d      	ldr	r3, [pc, #308]	@ (800c770 <USBD_SetConfig+0x150>)
 800c63a:	781b      	ldrb	r3, [r3, #0]
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	d905      	bls.n	800c64c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c640:	6839      	ldr	r1, [r7, #0]
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 f985 	bl	800c952 <USBD_CtlError>
    return USBD_FAIL;
 800c648:	2303      	movs	r3, #3
 800c64a:	e08c      	b.n	800c766 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c652:	b2db      	uxtb	r3, r3
 800c654:	2b02      	cmp	r3, #2
 800c656:	d002      	beq.n	800c65e <USBD_SetConfig+0x3e>
 800c658:	2b03      	cmp	r3, #3
 800c65a:	d029      	beq.n	800c6b0 <USBD_SetConfig+0x90>
 800c65c:	e075      	b.n	800c74a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c65e:	4b44      	ldr	r3, [pc, #272]	@ (800c770 <USBD_SetConfig+0x150>)
 800c660:	781b      	ldrb	r3, [r3, #0]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d020      	beq.n	800c6a8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c666:	4b42      	ldr	r3, [pc, #264]	@ (800c770 <USBD_SetConfig+0x150>)
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	461a      	mov	r2, r3
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c670:	4b3f      	ldr	r3, [pc, #252]	@ (800c770 <USBD_SetConfig+0x150>)
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	4619      	mov	r1, r3
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f7fe ffe3 	bl	800b642 <USBD_SetClassConfig>
 800c67c:	4603      	mov	r3, r0
 800c67e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c680:	7bfb      	ldrb	r3, [r7, #15]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d008      	beq.n	800c698 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c686:	6839      	ldr	r1, [r7, #0]
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f000 f962 	bl	800c952 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2202      	movs	r2, #2
 800c692:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c696:	e065      	b.n	800c764 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f000 fa31 	bl	800cb00 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2203      	movs	r2, #3
 800c6a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c6a6:	e05d      	b.n	800c764 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c6a8:	6878      	ldr	r0, [r7, #4]
 800c6aa:	f000 fa29 	bl	800cb00 <USBD_CtlSendStatus>
      break;
 800c6ae:	e059      	b.n	800c764 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c6b0:	4b2f      	ldr	r3, [pc, #188]	@ (800c770 <USBD_SetConfig+0x150>)
 800c6b2:	781b      	ldrb	r3, [r3, #0]
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d112      	bne.n	800c6de <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2202      	movs	r2, #2
 800c6bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c6c0:	4b2b      	ldr	r3, [pc, #172]	@ (800c770 <USBD_SetConfig+0x150>)
 800c6c2:	781b      	ldrb	r3, [r3, #0]
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c6ca:	4b29      	ldr	r3, [pc, #164]	@ (800c770 <USBD_SetConfig+0x150>)
 800c6cc:	781b      	ldrb	r3, [r3, #0]
 800c6ce:	4619      	mov	r1, r3
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f7fe ffd2 	bl	800b67a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 fa12 	bl	800cb00 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c6dc:	e042      	b.n	800c764 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c6de:	4b24      	ldr	r3, [pc, #144]	@ (800c770 <USBD_SetConfig+0x150>)
 800c6e0:	781b      	ldrb	r3, [r3, #0]
 800c6e2:	461a      	mov	r2, r3
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	429a      	cmp	r2, r3
 800c6ea:	d02a      	beq.n	800c742 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	685b      	ldr	r3, [r3, #4]
 800c6f0:	b2db      	uxtb	r3, r3
 800c6f2:	4619      	mov	r1, r3
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f7fe ffc0 	bl	800b67a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c6fa:	4b1d      	ldr	r3, [pc, #116]	@ (800c770 <USBD_SetConfig+0x150>)
 800c6fc:	781b      	ldrb	r3, [r3, #0]
 800c6fe:	461a      	mov	r2, r3
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c704:	4b1a      	ldr	r3, [pc, #104]	@ (800c770 <USBD_SetConfig+0x150>)
 800c706:	781b      	ldrb	r3, [r3, #0]
 800c708:	4619      	mov	r1, r3
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f7fe ff99 	bl	800b642 <USBD_SetClassConfig>
 800c710:	4603      	mov	r3, r0
 800c712:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c714:	7bfb      	ldrb	r3, [r7, #15]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d00f      	beq.n	800c73a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c71a:	6839      	ldr	r1, [r7, #0]
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f000 f918 	bl	800c952 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	685b      	ldr	r3, [r3, #4]
 800c726:	b2db      	uxtb	r3, r3
 800c728:	4619      	mov	r1, r3
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f7fe ffa5 	bl	800b67a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2202      	movs	r2, #2
 800c734:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c738:	e014      	b.n	800c764 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	f000 f9e0 	bl	800cb00 <USBD_CtlSendStatus>
      break;
 800c740:	e010      	b.n	800c764 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f000 f9dc 	bl	800cb00 <USBD_CtlSendStatus>
      break;
 800c748:	e00c      	b.n	800c764 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c74a:	6839      	ldr	r1, [r7, #0]
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f000 f900 	bl	800c952 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c752:	4b07      	ldr	r3, [pc, #28]	@ (800c770 <USBD_SetConfig+0x150>)
 800c754:	781b      	ldrb	r3, [r3, #0]
 800c756:	4619      	mov	r1, r3
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f7fe ff8e 	bl	800b67a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c75e:	2303      	movs	r3, #3
 800c760:	73fb      	strb	r3, [r7, #15]
      break;
 800c762:	bf00      	nop
  }

  return ret;
 800c764:	7bfb      	ldrb	r3, [r7, #15]
}
 800c766:	4618      	mov	r0, r3
 800c768:	3710      	adds	r7, #16
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	20000680 	.word	0x20000680

0800c774 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	88db      	ldrh	r3, [r3, #6]
 800c782:	2b01      	cmp	r3, #1
 800c784:	d004      	beq.n	800c790 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c786:	6839      	ldr	r1, [r7, #0]
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 f8e2 	bl	800c952 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c78e:	e023      	b.n	800c7d8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c796:	b2db      	uxtb	r3, r3
 800c798:	2b02      	cmp	r3, #2
 800c79a:	dc02      	bgt.n	800c7a2 <USBD_GetConfig+0x2e>
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	dc03      	bgt.n	800c7a8 <USBD_GetConfig+0x34>
 800c7a0:	e015      	b.n	800c7ce <USBD_GetConfig+0x5a>
 800c7a2:	2b03      	cmp	r3, #3
 800c7a4:	d00b      	beq.n	800c7be <USBD_GetConfig+0x4a>
 800c7a6:	e012      	b.n	800c7ce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	3308      	adds	r3, #8
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	4619      	mov	r1, r3
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f000 f948 	bl	800ca4c <USBD_CtlSendData>
        break;
 800c7bc:	e00c      	b.n	800c7d8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	3304      	adds	r3, #4
 800c7c2:	2201      	movs	r2, #1
 800c7c4:	4619      	mov	r1, r3
 800c7c6:	6878      	ldr	r0, [r7, #4]
 800c7c8:	f000 f940 	bl	800ca4c <USBD_CtlSendData>
        break;
 800c7cc:	e004      	b.n	800c7d8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c7ce:	6839      	ldr	r1, [r7, #0]
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 f8be 	bl	800c952 <USBD_CtlError>
        break;
 800c7d6:	bf00      	nop
}
 800c7d8:	bf00      	nop
 800c7da:	3708      	adds	r7, #8
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd80      	pop	{r7, pc}

0800c7e0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7f0:	b2db      	uxtb	r3, r3
 800c7f2:	3b01      	subs	r3, #1
 800c7f4:	2b02      	cmp	r3, #2
 800c7f6:	d81e      	bhi.n	800c836 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	88db      	ldrh	r3, [r3, #6]
 800c7fc:	2b02      	cmp	r3, #2
 800c7fe:	d004      	beq.n	800c80a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c800:	6839      	ldr	r1, [r7, #0]
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f000 f8a5 	bl	800c952 <USBD_CtlError>
        break;
 800c808:	e01a      	b.n	800c840 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2201      	movs	r2, #1
 800c80e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c816:	2b00      	cmp	r3, #0
 800c818:	d005      	beq.n	800c826 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	68db      	ldr	r3, [r3, #12]
 800c81e:	f043 0202 	orr.w	r2, r3, #2
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	330c      	adds	r3, #12
 800c82a:	2202      	movs	r2, #2
 800c82c:	4619      	mov	r1, r3
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 f90c 	bl	800ca4c <USBD_CtlSendData>
      break;
 800c834:	e004      	b.n	800c840 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c836:	6839      	ldr	r1, [r7, #0]
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f000 f88a 	bl	800c952 <USBD_CtlError>
      break;
 800c83e:	bf00      	nop
  }
}
 800c840:	bf00      	nop
 800c842:	3708      	adds	r7, #8
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}

0800c848 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
 800c850:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	885b      	ldrh	r3, [r3, #2]
 800c856:	2b01      	cmp	r3, #1
 800c858:	d107      	bne.n	800c86a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2201      	movs	r2, #1
 800c85e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 f94c 	bl	800cb00 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c868:	e013      	b.n	800c892 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	885b      	ldrh	r3, [r3, #2]
 800c86e:	2b02      	cmp	r3, #2
 800c870:	d10b      	bne.n	800c88a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	889b      	ldrh	r3, [r3, #4]
 800c876:	0a1b      	lsrs	r3, r3, #8
 800c878:	b29b      	uxth	r3, r3
 800c87a:	b2da      	uxtb	r2, r3
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	f000 f93c 	bl	800cb00 <USBD_CtlSendStatus>
}
 800c888:	e003      	b.n	800c892 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c88a:	6839      	ldr	r1, [r7, #0]
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f000 f860 	bl	800c952 <USBD_CtlError>
}
 800c892:	bf00      	nop
 800c894:	3708      	adds	r7, #8
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}

0800c89a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c89a:	b580      	push	{r7, lr}
 800c89c:	b082      	sub	sp, #8
 800c89e:	af00      	add	r7, sp, #0
 800c8a0:	6078      	str	r0, [r7, #4]
 800c8a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8aa:	b2db      	uxtb	r3, r3
 800c8ac:	3b01      	subs	r3, #1
 800c8ae:	2b02      	cmp	r3, #2
 800c8b0:	d80b      	bhi.n	800c8ca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	885b      	ldrh	r3, [r3, #2]
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	d10c      	bne.n	800c8d4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2200      	movs	r2, #0
 800c8be:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 f91c 	bl	800cb00 <USBD_CtlSendStatus>
      }
      break;
 800c8c8:	e004      	b.n	800c8d4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c8ca:	6839      	ldr	r1, [r7, #0]
 800c8cc:	6878      	ldr	r0, [r7, #4]
 800c8ce:	f000 f840 	bl	800c952 <USBD_CtlError>
      break;
 800c8d2:	e000      	b.n	800c8d6 <USBD_ClrFeature+0x3c>
      break;
 800c8d4:	bf00      	nop
  }
}
 800c8d6:	bf00      	nop
 800c8d8:	3708      	adds	r7, #8
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c8de:	b580      	push	{r7, lr}
 800c8e0:	b084      	sub	sp, #16
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
 800c8e6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	781a      	ldrb	r2, [r3, #0]
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	781a      	ldrb	r2, [r3, #0]
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	3301      	adds	r3, #1
 800c906:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	f7ff fa40 	bl	800bd8e <SWAPBYTE>
 800c90e:	4603      	mov	r3, r0
 800c910:	461a      	mov	r2, r3
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	3301      	adds	r3, #1
 800c91a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	3301      	adds	r3, #1
 800c920:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c922:	68f8      	ldr	r0, [r7, #12]
 800c924:	f7ff fa33 	bl	800bd8e <SWAPBYTE>
 800c928:	4603      	mov	r3, r0
 800c92a:	461a      	mov	r2, r3
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	3301      	adds	r3, #1
 800c934:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	3301      	adds	r3, #1
 800c93a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c93c:	68f8      	ldr	r0, [r7, #12]
 800c93e:	f7ff fa26 	bl	800bd8e <SWAPBYTE>
 800c942:	4603      	mov	r3, r0
 800c944:	461a      	mov	r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	80da      	strh	r2, [r3, #6]
}
 800c94a:	bf00      	nop
 800c94c:	3710      	adds	r7, #16
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}

0800c952 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c952:	b580      	push	{r7, lr}
 800c954:	b082      	sub	sp, #8
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
 800c95a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c95c:	2180      	movs	r1, #128	@ 0x80
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 fcc6 	bl	800d2f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c964:	2100      	movs	r1, #0
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f000 fcc2 	bl	800d2f0 <USBD_LL_StallEP>
}
 800c96c:	bf00      	nop
 800c96e:	3708      	adds	r7, #8
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}

0800c974 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b086      	sub	sp, #24
 800c978:	af00      	add	r7, sp, #0
 800c97a:	60f8      	str	r0, [r7, #12]
 800c97c:	60b9      	str	r1, [r7, #8]
 800c97e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c980:	2300      	movs	r3, #0
 800c982:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d042      	beq.n	800ca10 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c98e:	6938      	ldr	r0, [r7, #16]
 800c990:	f000 f842 	bl	800ca18 <USBD_GetLen>
 800c994:	4603      	mov	r3, r0
 800c996:	3301      	adds	r3, #1
 800c998:	005b      	lsls	r3, r3, #1
 800c99a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c99e:	d808      	bhi.n	800c9b2 <USBD_GetString+0x3e>
 800c9a0:	6938      	ldr	r0, [r7, #16]
 800c9a2:	f000 f839 	bl	800ca18 <USBD_GetLen>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	005b      	lsls	r3, r3, #1
 800c9ae:	b29a      	uxth	r2, r3
 800c9b0:	e001      	b.n	800c9b6 <USBD_GetString+0x42>
 800c9b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c9ba:	7dfb      	ldrb	r3, [r7, #23]
 800c9bc:	68ba      	ldr	r2, [r7, #8]
 800c9be:	4413      	add	r3, r2
 800c9c0:	687a      	ldr	r2, [r7, #4]
 800c9c2:	7812      	ldrb	r2, [r2, #0]
 800c9c4:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9c6:	7dfb      	ldrb	r3, [r7, #23]
 800c9c8:	3301      	adds	r3, #1
 800c9ca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c9cc:	7dfb      	ldrb	r3, [r7, #23]
 800c9ce:	68ba      	ldr	r2, [r7, #8]
 800c9d0:	4413      	add	r3, r2
 800c9d2:	2203      	movs	r2, #3
 800c9d4:	701a      	strb	r2, [r3, #0]
  idx++;
 800c9d6:	7dfb      	ldrb	r3, [r7, #23]
 800c9d8:	3301      	adds	r3, #1
 800c9da:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c9dc:	e013      	b.n	800ca06 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c9de:	7dfb      	ldrb	r3, [r7, #23]
 800c9e0:	68ba      	ldr	r2, [r7, #8]
 800c9e2:	4413      	add	r3, r2
 800c9e4:	693a      	ldr	r2, [r7, #16]
 800c9e6:	7812      	ldrb	r2, [r2, #0]
 800c9e8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	613b      	str	r3, [r7, #16]
    idx++;
 800c9f0:	7dfb      	ldrb	r3, [r7, #23]
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c9f6:	7dfb      	ldrb	r3, [r7, #23]
 800c9f8:	68ba      	ldr	r2, [r7, #8]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	701a      	strb	r2, [r3, #0]
    idx++;
 800ca00:	7dfb      	ldrb	r3, [r7, #23]
 800ca02:	3301      	adds	r3, #1
 800ca04:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d1e7      	bne.n	800c9de <USBD_GetString+0x6a>
 800ca0e:	e000      	b.n	800ca12 <USBD_GetString+0x9e>
    return;
 800ca10:	bf00      	nop
  }
}
 800ca12:	3718      	adds	r7, #24
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b085      	sub	sp, #20
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ca20:	2300      	movs	r3, #0
 800ca22:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ca28:	e005      	b.n	800ca36 <USBD_GetLen+0x1e>
  {
    len++;
 800ca2a:	7bfb      	ldrb	r3, [r7, #15]
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	3301      	adds	r3, #1
 800ca34:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d1f5      	bne.n	800ca2a <USBD_GetLen+0x12>
  }

  return len;
 800ca3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3714      	adds	r7, #20
 800ca44:	46bd      	mov	sp, r7
 800ca46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4a:	4770      	bx	lr

0800ca4c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b084      	sub	sp, #16
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	60f8      	str	r0, [r7, #12]
 800ca54:	60b9      	str	r1, [r7, #8]
 800ca56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	2202      	movs	r2, #2
 800ca5c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	687a      	ldr	r2, [r7, #4]
 800ca6a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	68ba      	ldr	r2, [r7, #8]
 800ca70:	2100      	movs	r1, #0
 800ca72:	68f8      	ldr	r0, [r7, #12]
 800ca74:	f000 fcc5 	bl	800d402 <USBD_LL_Transmit>

  return USBD_OK;
 800ca78:	2300      	movs	r3, #0
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3710      	adds	r7, #16
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}

0800ca82 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ca82:	b580      	push	{r7, lr}
 800ca84:	b084      	sub	sp, #16
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	60f8      	str	r0, [r7, #12]
 800ca8a:	60b9      	str	r1, [r7, #8]
 800ca8c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	68ba      	ldr	r2, [r7, #8]
 800ca92:	2100      	movs	r1, #0
 800ca94:	68f8      	ldr	r0, [r7, #12]
 800ca96:	f000 fcb4 	bl	800d402 <USBD_LL_Transmit>

  return USBD_OK;
 800ca9a:	2300      	movs	r3, #0
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3710      	adds	r7, #16
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}

0800caa4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b084      	sub	sp, #16
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	60f8      	str	r0, [r7, #12]
 800caac:	60b9      	str	r1, [r7, #8]
 800caae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	2203      	movs	r2, #3
 800cab4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	68ba      	ldr	r2, [r7, #8]
 800cacc:	2100      	movs	r1, #0
 800cace:	68f8      	ldr	r0, [r7, #12]
 800cad0:	f000 fcb8 	bl	800d444 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3710      	adds	r7, #16
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}

0800cade <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cade:	b580      	push	{r7, lr}
 800cae0:	b084      	sub	sp, #16
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	60f8      	str	r0, [r7, #12]
 800cae6:	60b9      	str	r1, [r7, #8]
 800cae8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	68ba      	ldr	r2, [r7, #8]
 800caee:	2100      	movs	r1, #0
 800caf0:	68f8      	ldr	r0, [r7, #12]
 800caf2:	f000 fca7 	bl	800d444 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800caf6:	2300      	movs	r3, #0
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3710      	adds	r7, #16
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b082      	sub	sp, #8
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2204      	movs	r2, #4
 800cb0c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cb10:	2300      	movs	r3, #0
 800cb12:	2200      	movs	r2, #0
 800cb14:	2100      	movs	r1, #0
 800cb16:	6878      	ldr	r0, [r7, #4]
 800cb18:	f000 fc73 	bl	800d402 <USBD_LL_Transmit>

  return USBD_OK;
 800cb1c:	2300      	movs	r3, #0
}
 800cb1e:	4618      	mov	r0, r3
 800cb20:	3708      	adds	r7, #8
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}

0800cb26 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cb26:	b580      	push	{r7, lr}
 800cb28:	b082      	sub	sp, #8
 800cb2a:	af00      	add	r7, sp, #0
 800cb2c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2205      	movs	r2, #5
 800cb32:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb36:	2300      	movs	r3, #0
 800cb38:	2200      	movs	r2, #0
 800cb3a:	2100      	movs	r1, #0
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f000 fc81 	bl	800d444 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cb42:	2300      	movs	r3, #0
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3708      	adds	r7, #8
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cb50:	2200      	movs	r2, #0
 800cb52:	4912      	ldr	r1, [pc, #72]	@ (800cb9c <MX_USB_DEVICE_Init+0x50>)
 800cb54:	4812      	ldr	r0, [pc, #72]	@ (800cba0 <MX_USB_DEVICE_Init+0x54>)
 800cb56:	f7fe fcf7 	bl	800b548 <USBD_Init>
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d001      	beq.n	800cb64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cb60:	f7f5 f83e 	bl	8001be0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cb64:	490f      	ldr	r1, [pc, #60]	@ (800cba4 <MX_USB_DEVICE_Init+0x58>)
 800cb66:	480e      	ldr	r0, [pc, #56]	@ (800cba0 <MX_USB_DEVICE_Init+0x54>)
 800cb68:	f7fe fd1e 	bl	800b5a8 <USBD_RegisterClass>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d001      	beq.n	800cb76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cb72:	f7f5 f835 	bl	8001be0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cb76:	490c      	ldr	r1, [pc, #48]	@ (800cba8 <MX_USB_DEVICE_Init+0x5c>)
 800cb78:	4809      	ldr	r0, [pc, #36]	@ (800cba0 <MX_USB_DEVICE_Init+0x54>)
 800cb7a:	f7fe fc55 	bl	800b428 <USBD_CDC_RegisterInterface>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d001      	beq.n	800cb88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cb84:	f7f5 f82c 	bl	8001be0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cb88:	4805      	ldr	r0, [pc, #20]	@ (800cba0 <MX_USB_DEVICE_Init+0x54>)
 800cb8a:	f7fe fd43 	bl	800b614 <USBD_Start>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d001      	beq.n	800cb98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cb94:	f7f5 f824 	bl	8001be0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cb98:	bf00      	nop
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	200000b8 	.word	0x200000b8
 800cba0:	20000684 	.word	0x20000684
 800cba4:	20000024 	.word	0x20000024
 800cba8:	200000a4 	.word	0x200000a4

0800cbac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	4905      	ldr	r1, [pc, #20]	@ (800cbc8 <CDC_Init_FS+0x1c>)
 800cbb4:	4805      	ldr	r0, [pc, #20]	@ (800cbcc <CDC_Init_FS+0x20>)
 800cbb6:	f7fe fc51 	bl	800b45c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cbba:	4905      	ldr	r1, [pc, #20]	@ (800cbd0 <CDC_Init_FS+0x24>)
 800cbbc:	4803      	ldr	r0, [pc, #12]	@ (800cbcc <CDC_Init_FS+0x20>)
 800cbbe:	f7fe fc6f 	bl	800b4a0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cbc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	20001160 	.word	0x20001160
 800cbcc:	20000684 	.word	0x20000684
 800cbd0:	20000960 	.word	0x20000960

0800cbd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cbd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr

0800cbe4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b083      	sub	sp, #12
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	4603      	mov	r3, r0
 800cbec:	6039      	str	r1, [r7, #0]
 800cbee:	71fb      	strb	r3, [r7, #7]
 800cbf0:	4613      	mov	r3, r2
 800cbf2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cbf4:	79fb      	ldrb	r3, [r7, #7]
 800cbf6:	2b23      	cmp	r3, #35	@ 0x23
 800cbf8:	d84a      	bhi.n	800cc90 <CDC_Control_FS+0xac>
 800cbfa:	a201      	add	r2, pc, #4	@ (adr r2, 800cc00 <CDC_Control_FS+0x1c>)
 800cbfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc00:	0800cc91 	.word	0x0800cc91
 800cc04:	0800cc91 	.word	0x0800cc91
 800cc08:	0800cc91 	.word	0x0800cc91
 800cc0c:	0800cc91 	.word	0x0800cc91
 800cc10:	0800cc91 	.word	0x0800cc91
 800cc14:	0800cc91 	.word	0x0800cc91
 800cc18:	0800cc91 	.word	0x0800cc91
 800cc1c:	0800cc91 	.word	0x0800cc91
 800cc20:	0800cc91 	.word	0x0800cc91
 800cc24:	0800cc91 	.word	0x0800cc91
 800cc28:	0800cc91 	.word	0x0800cc91
 800cc2c:	0800cc91 	.word	0x0800cc91
 800cc30:	0800cc91 	.word	0x0800cc91
 800cc34:	0800cc91 	.word	0x0800cc91
 800cc38:	0800cc91 	.word	0x0800cc91
 800cc3c:	0800cc91 	.word	0x0800cc91
 800cc40:	0800cc91 	.word	0x0800cc91
 800cc44:	0800cc91 	.word	0x0800cc91
 800cc48:	0800cc91 	.word	0x0800cc91
 800cc4c:	0800cc91 	.word	0x0800cc91
 800cc50:	0800cc91 	.word	0x0800cc91
 800cc54:	0800cc91 	.word	0x0800cc91
 800cc58:	0800cc91 	.word	0x0800cc91
 800cc5c:	0800cc91 	.word	0x0800cc91
 800cc60:	0800cc91 	.word	0x0800cc91
 800cc64:	0800cc91 	.word	0x0800cc91
 800cc68:	0800cc91 	.word	0x0800cc91
 800cc6c:	0800cc91 	.word	0x0800cc91
 800cc70:	0800cc91 	.word	0x0800cc91
 800cc74:	0800cc91 	.word	0x0800cc91
 800cc78:	0800cc91 	.word	0x0800cc91
 800cc7c:	0800cc91 	.word	0x0800cc91
 800cc80:	0800cc91 	.word	0x0800cc91
 800cc84:	0800cc91 	.word	0x0800cc91
 800cc88:	0800cc91 	.word	0x0800cc91
 800cc8c:	0800cc91 	.word	0x0800cc91
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cc90:	bf00      	nop
  }

  return (USBD_OK);
 800cc92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	370c      	adds	r7, #12
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b082      	sub	sp, #8
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ccaa:	6879      	ldr	r1, [r7, #4]
 800ccac:	4805      	ldr	r0, [pc, #20]	@ (800ccc4 <CDC_Receive_FS+0x24>)
 800ccae:	f7fe fbf7 	bl	800b4a0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ccb2:	4804      	ldr	r0, [pc, #16]	@ (800ccc4 <CDC_Receive_FS+0x24>)
 800ccb4:	f7fe fc12 	bl	800b4dc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ccb8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ccba:	4618      	mov	r0, r3
 800ccbc:	3708      	adds	r7, #8
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}
 800ccc2:	bf00      	nop
 800ccc4:	20000684 	.word	0x20000684

0800ccc8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ccc8:	b480      	push	{r7}
 800ccca:	b087      	sub	sp, #28
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	4613      	mov	r3, r2
 800ccd4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ccd6:	2300      	movs	r3, #0
 800ccd8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ccda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	371c      	adds	r7, #28
 800cce2:	46bd      	mov	sp, r7
 800cce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce8:	4770      	bx	lr
	...

0800ccec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ccec:	b480      	push	{r7}
 800ccee:	b083      	sub	sp, #12
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	6039      	str	r1, [r7, #0]
 800ccf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	2212      	movs	r2, #18
 800ccfc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ccfe:	4b03      	ldr	r3, [pc, #12]	@ (800cd0c <USBD_FS_DeviceDescriptor+0x20>)
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	370c      	adds	r7, #12
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr
 800cd0c:	200000d4 	.word	0x200000d4

0800cd10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b083      	sub	sp, #12
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	4603      	mov	r3, r0
 800cd18:	6039      	str	r1, [r7, #0]
 800cd1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	2204      	movs	r2, #4
 800cd20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cd22:	4b03      	ldr	r3, [pc, #12]	@ (800cd30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	370c      	adds	r7, #12
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2e:	4770      	bx	lr
 800cd30:	200000e8 	.word	0x200000e8

0800cd34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	6039      	str	r1, [r7, #0]
 800cd3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cd40:	79fb      	ldrb	r3, [r7, #7]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d105      	bne.n	800cd52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cd46:	683a      	ldr	r2, [r7, #0]
 800cd48:	4907      	ldr	r1, [pc, #28]	@ (800cd68 <USBD_FS_ProductStrDescriptor+0x34>)
 800cd4a:	4808      	ldr	r0, [pc, #32]	@ (800cd6c <USBD_FS_ProductStrDescriptor+0x38>)
 800cd4c:	f7ff fe12 	bl	800c974 <USBD_GetString>
 800cd50:	e004      	b.n	800cd5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cd52:	683a      	ldr	r2, [r7, #0]
 800cd54:	4904      	ldr	r1, [pc, #16]	@ (800cd68 <USBD_FS_ProductStrDescriptor+0x34>)
 800cd56:	4805      	ldr	r0, [pc, #20]	@ (800cd6c <USBD_FS_ProductStrDescriptor+0x38>)
 800cd58:	f7ff fe0c 	bl	800c974 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cd5c:	4b02      	ldr	r3, [pc, #8]	@ (800cd68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3708      	adds	r7, #8
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}
 800cd66:	bf00      	nop
 800cd68:	20001960 	.word	0x20001960
 800cd6c:	080102d8 	.word	0x080102d8

0800cd70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b082      	sub	sp, #8
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	4603      	mov	r3, r0
 800cd78:	6039      	str	r1, [r7, #0]
 800cd7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cd7c:	683a      	ldr	r2, [r7, #0]
 800cd7e:	4904      	ldr	r1, [pc, #16]	@ (800cd90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cd80:	4804      	ldr	r0, [pc, #16]	@ (800cd94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cd82:	f7ff fdf7 	bl	800c974 <USBD_GetString>
  return USBD_StrDesc;
 800cd86:	4b02      	ldr	r3, [pc, #8]	@ (800cd90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3708      	adds	r7, #8
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	20001960 	.word	0x20001960
 800cd94:	080102f0 	.word	0x080102f0

0800cd98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b082      	sub	sp, #8
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	4603      	mov	r3, r0
 800cda0:	6039      	str	r1, [r7, #0]
 800cda2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	221a      	movs	r2, #26
 800cda8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cdaa:	f000 f843 	bl	800ce34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cdae:	4b02      	ldr	r3, [pc, #8]	@ (800cdb8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	3708      	adds	r7, #8
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bd80      	pop	{r7, pc}
 800cdb8:	200000ec 	.word	0x200000ec

0800cdbc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b082      	sub	sp, #8
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	6039      	str	r1, [r7, #0]
 800cdc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cdc8:	79fb      	ldrb	r3, [r7, #7]
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	d105      	bne.n	800cdda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cdce:	683a      	ldr	r2, [r7, #0]
 800cdd0:	4907      	ldr	r1, [pc, #28]	@ (800cdf0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cdd2:	4808      	ldr	r0, [pc, #32]	@ (800cdf4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cdd4:	f7ff fdce 	bl	800c974 <USBD_GetString>
 800cdd8:	e004      	b.n	800cde4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cdda:	683a      	ldr	r2, [r7, #0]
 800cddc:	4904      	ldr	r1, [pc, #16]	@ (800cdf0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800cdde:	4805      	ldr	r0, [pc, #20]	@ (800cdf4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cde0:	f7ff fdc8 	bl	800c974 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cde4:	4b02      	ldr	r3, [pc, #8]	@ (800cdf0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3708      	adds	r7, #8
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	20001960 	.word	0x20001960
 800cdf4:	08010304 	.word	0x08010304

0800cdf8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b082      	sub	sp, #8
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	4603      	mov	r3, r0
 800ce00:	6039      	str	r1, [r7, #0]
 800ce02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce04:	79fb      	ldrb	r3, [r7, #7]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d105      	bne.n	800ce16 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce0a:	683a      	ldr	r2, [r7, #0]
 800ce0c:	4907      	ldr	r1, [pc, #28]	@ (800ce2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce0e:	4808      	ldr	r0, [pc, #32]	@ (800ce30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce10:	f7ff fdb0 	bl	800c974 <USBD_GetString>
 800ce14:	e004      	b.n	800ce20 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ce16:	683a      	ldr	r2, [r7, #0]
 800ce18:	4904      	ldr	r1, [pc, #16]	@ (800ce2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ce1a:	4805      	ldr	r0, [pc, #20]	@ (800ce30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ce1c:	f7ff fdaa 	bl	800c974 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce20:	4b02      	ldr	r3, [pc, #8]	@ (800ce2c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3708      	adds	r7, #8
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	20001960 	.word	0x20001960
 800ce30:	08010310 	.word	0x08010310

0800ce34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b084      	sub	sp, #16
 800ce38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ce3a:	4b0f      	ldr	r3, [pc, #60]	@ (800ce78 <Get_SerialNum+0x44>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ce40:	4b0e      	ldr	r3, [pc, #56]	@ (800ce7c <Get_SerialNum+0x48>)
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ce46:	4b0e      	ldr	r3, [pc, #56]	@ (800ce80 <Get_SerialNum+0x4c>)
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ce4c:	68fa      	ldr	r2, [r7, #12]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	4413      	add	r3, r2
 800ce52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d009      	beq.n	800ce6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ce5a:	2208      	movs	r2, #8
 800ce5c:	4909      	ldr	r1, [pc, #36]	@ (800ce84 <Get_SerialNum+0x50>)
 800ce5e:	68f8      	ldr	r0, [r7, #12]
 800ce60:	f000 f814 	bl	800ce8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ce64:	2204      	movs	r2, #4
 800ce66:	4908      	ldr	r1, [pc, #32]	@ (800ce88 <Get_SerialNum+0x54>)
 800ce68:	68b8      	ldr	r0, [r7, #8]
 800ce6a:	f000 f80f 	bl	800ce8c <IntToUnicode>
  }
}
 800ce6e:	bf00      	nop
 800ce70:	3710      	adds	r7, #16
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	bf00      	nop
 800ce78:	1fff7a10 	.word	0x1fff7a10
 800ce7c:	1fff7a14 	.word	0x1fff7a14
 800ce80:	1fff7a18 	.word	0x1fff7a18
 800ce84:	200000ee 	.word	0x200000ee
 800ce88:	200000fe 	.word	0x200000fe

0800ce8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b087      	sub	sp, #28
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	4613      	mov	r3, r2
 800ce98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ce9e:	2300      	movs	r3, #0
 800cea0:	75fb      	strb	r3, [r7, #23]
 800cea2:	e027      	b.n	800cef4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	0f1b      	lsrs	r3, r3, #28
 800cea8:	2b09      	cmp	r3, #9
 800ceaa:	d80b      	bhi.n	800cec4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	0f1b      	lsrs	r3, r3, #28
 800ceb0:	b2da      	uxtb	r2, r3
 800ceb2:	7dfb      	ldrb	r3, [r7, #23]
 800ceb4:	005b      	lsls	r3, r3, #1
 800ceb6:	4619      	mov	r1, r3
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	440b      	add	r3, r1
 800cebc:	3230      	adds	r2, #48	@ 0x30
 800cebe:	b2d2      	uxtb	r2, r2
 800cec0:	701a      	strb	r2, [r3, #0]
 800cec2:	e00a      	b.n	800ceda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	0f1b      	lsrs	r3, r3, #28
 800cec8:	b2da      	uxtb	r2, r3
 800ceca:	7dfb      	ldrb	r3, [r7, #23]
 800cecc:	005b      	lsls	r3, r3, #1
 800cece:	4619      	mov	r1, r3
 800ced0:	68bb      	ldr	r3, [r7, #8]
 800ced2:	440b      	add	r3, r1
 800ced4:	3237      	adds	r2, #55	@ 0x37
 800ced6:	b2d2      	uxtb	r2, r2
 800ced8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	011b      	lsls	r3, r3, #4
 800cede:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cee0:	7dfb      	ldrb	r3, [r7, #23]
 800cee2:	005b      	lsls	r3, r3, #1
 800cee4:	3301      	adds	r3, #1
 800cee6:	68ba      	ldr	r2, [r7, #8]
 800cee8:	4413      	add	r3, r2
 800ceea:	2200      	movs	r2, #0
 800ceec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ceee:	7dfb      	ldrb	r3, [r7, #23]
 800cef0:	3301      	adds	r3, #1
 800cef2:	75fb      	strb	r3, [r7, #23]
 800cef4:	7dfa      	ldrb	r2, [r7, #23]
 800cef6:	79fb      	ldrb	r3, [r7, #7]
 800cef8:	429a      	cmp	r2, r3
 800cefa:	d3d3      	bcc.n	800cea4 <IntToUnicode+0x18>
  }
}
 800cefc:	bf00      	nop
 800cefe:	bf00      	nop
 800cf00:	371c      	adds	r7, #28
 800cf02:	46bd      	mov	sp, r7
 800cf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf08:	4770      	bx	lr
	...

0800cf0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b08a      	sub	sp, #40	@ 0x28
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf14:	f107 0314 	add.w	r3, r7, #20
 800cf18:	2200      	movs	r2, #0
 800cf1a:	601a      	str	r2, [r3, #0]
 800cf1c:	605a      	str	r2, [r3, #4]
 800cf1e:	609a      	str	r2, [r3, #8]
 800cf20:	60da      	str	r2, [r3, #12]
 800cf22:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800cf2c:	d13a      	bne.n	800cfa4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cf2e:	2300      	movs	r3, #0
 800cf30:	613b      	str	r3, [r7, #16]
 800cf32:	4b1e      	ldr	r3, [pc, #120]	@ (800cfac <HAL_PCD_MspInit+0xa0>)
 800cf34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf36:	4a1d      	ldr	r2, [pc, #116]	@ (800cfac <HAL_PCD_MspInit+0xa0>)
 800cf38:	f043 0301 	orr.w	r3, r3, #1
 800cf3c:	6313      	str	r3, [r2, #48]	@ 0x30
 800cf3e:	4b1b      	ldr	r3, [pc, #108]	@ (800cfac <HAL_PCD_MspInit+0xa0>)
 800cf40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cf42:	f003 0301 	and.w	r3, r3, #1
 800cf46:	613b      	str	r3, [r7, #16]
 800cf48:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_D__Pin|USB_D_A12_Pin;
 800cf4a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800cf4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf50:	2302      	movs	r3, #2
 800cf52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cf54:	2300      	movs	r3, #0
 800cf56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf58:	2303      	movs	r3, #3
 800cf5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cf5c:	230a      	movs	r3, #10
 800cf5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cf60:	f107 0314 	add.w	r3, r7, #20
 800cf64:	4619      	mov	r1, r3
 800cf66:	4812      	ldr	r0, [pc, #72]	@ (800cfb0 <HAL_PCD_MspInit+0xa4>)
 800cf68:	f7f6 fba2 	bl	80036b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800cf6c:	4b0f      	ldr	r3, [pc, #60]	@ (800cfac <HAL_PCD_MspInit+0xa0>)
 800cf6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cf70:	4a0e      	ldr	r2, [pc, #56]	@ (800cfac <HAL_PCD_MspInit+0xa0>)
 800cf72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf76:	6353      	str	r3, [r2, #52]	@ 0x34
 800cf78:	2300      	movs	r3, #0
 800cf7a:	60fb      	str	r3, [r7, #12]
 800cf7c:	4b0b      	ldr	r3, [pc, #44]	@ (800cfac <HAL_PCD_MspInit+0xa0>)
 800cf7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf80:	4a0a      	ldr	r2, [pc, #40]	@ (800cfac <HAL_PCD_MspInit+0xa0>)
 800cf82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cf86:	6453      	str	r3, [r2, #68]	@ 0x44
 800cf88:	4b08      	ldr	r3, [pc, #32]	@ (800cfac <HAL_PCD_MspInit+0xa0>)
 800cf8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cf8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cf90:	60fb      	str	r3, [r7, #12]
 800cf92:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cf94:	2200      	movs	r2, #0
 800cf96:	2100      	movs	r1, #0
 800cf98:	2043      	movs	r0, #67	@ 0x43
 800cf9a:	f7f6 f838 	bl	800300e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cf9e:	2043      	movs	r0, #67	@ 0x43
 800cfa0:	f7f6 f851 	bl	8003046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cfa4:	bf00      	nop
 800cfa6:	3728      	adds	r7, #40	@ 0x28
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	bd80      	pop	{r7, pc}
 800cfac:	40023800 	.word	0x40023800
 800cfb0:	40020000 	.word	0x40020000

0800cfb4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b082      	sub	sp, #8
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cfc8:	4619      	mov	r1, r3
 800cfca:	4610      	mov	r0, r2
 800cfcc:	f7fe fb6f 	bl	800b6ae <USBD_LL_SetupStage>
}
 800cfd0:	bf00      	nop
 800cfd2:	3708      	adds	r7, #8
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd80      	pop	{r7, pc}

0800cfd8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b082      	sub	sp, #8
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	460b      	mov	r3, r1
 800cfe2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800cfea:	78fa      	ldrb	r2, [r7, #3]
 800cfec:	6879      	ldr	r1, [r7, #4]
 800cfee:	4613      	mov	r3, r2
 800cff0:	00db      	lsls	r3, r3, #3
 800cff2:	4413      	add	r3, r2
 800cff4:	009b      	lsls	r3, r3, #2
 800cff6:	440b      	add	r3, r1
 800cff8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800cffc:	681a      	ldr	r2, [r3, #0]
 800cffe:	78fb      	ldrb	r3, [r7, #3]
 800d000:	4619      	mov	r1, r3
 800d002:	f7fe fba9 	bl	800b758 <USBD_LL_DataOutStage>
}
 800d006:	bf00      	nop
 800d008:	3708      	adds	r7, #8
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}

0800d00e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d00e:	b580      	push	{r7, lr}
 800d010:	b082      	sub	sp, #8
 800d012:	af00      	add	r7, sp, #0
 800d014:	6078      	str	r0, [r7, #4]
 800d016:	460b      	mov	r3, r1
 800d018:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d020:	78fa      	ldrb	r2, [r7, #3]
 800d022:	6879      	ldr	r1, [r7, #4]
 800d024:	4613      	mov	r3, r2
 800d026:	00db      	lsls	r3, r3, #3
 800d028:	4413      	add	r3, r2
 800d02a:	009b      	lsls	r3, r3, #2
 800d02c:	440b      	add	r3, r1
 800d02e:	3320      	adds	r3, #32
 800d030:	681a      	ldr	r2, [r3, #0]
 800d032:	78fb      	ldrb	r3, [r7, #3]
 800d034:	4619      	mov	r1, r3
 800d036:	f7fe fc42 	bl	800b8be <USBD_LL_DataInStage>
}
 800d03a:	bf00      	nop
 800d03c:	3708      	adds	r7, #8
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}

0800d042 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d042:	b580      	push	{r7, lr}
 800d044:	b082      	sub	sp, #8
 800d046:	af00      	add	r7, sp, #0
 800d048:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d050:	4618      	mov	r0, r3
 800d052:	f7fe fd7c 	bl	800bb4e <USBD_LL_SOF>
}
 800d056:	bf00      	nop
 800d058:	3708      	adds	r7, #8
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}

0800d05e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d05e:	b580      	push	{r7, lr}
 800d060:	b084      	sub	sp, #16
 800d062:	af00      	add	r7, sp, #0
 800d064:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d066:	2301      	movs	r3, #1
 800d068:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	79db      	ldrb	r3, [r3, #7]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d102      	bne.n	800d078 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d072:	2300      	movs	r3, #0
 800d074:	73fb      	strb	r3, [r7, #15]
 800d076:	e008      	b.n	800d08a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	79db      	ldrb	r3, [r3, #7]
 800d07c:	2b02      	cmp	r3, #2
 800d07e:	d102      	bne.n	800d086 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d080:	2301      	movs	r3, #1
 800d082:	73fb      	strb	r3, [r7, #15]
 800d084:	e001      	b.n	800d08a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d086:	f7f4 fdab 	bl	8001be0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d090:	7bfa      	ldrb	r2, [r7, #15]
 800d092:	4611      	mov	r1, r2
 800d094:	4618      	mov	r0, r3
 800d096:	f7fe fd16 	bl	800bac6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7fe fcbe 	bl	800ba22 <USBD_LL_Reset>
}
 800d0a6:	bf00      	nop
 800d0a8:	3710      	adds	r7, #16
 800d0aa:	46bd      	mov	sp, r7
 800d0ac:	bd80      	pop	{r7, pc}
	...

0800d0b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d0be:	4618      	mov	r0, r3
 800d0c0:	f7fe fd11 	bl	800bae6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	687a      	ldr	r2, [r7, #4]
 800d0d0:	6812      	ldr	r2, [r2, #0]
 800d0d2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d0d6:	f043 0301 	orr.w	r3, r3, #1
 800d0da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	7adb      	ldrb	r3, [r3, #11]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d005      	beq.n	800d0f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d0e4:	4b04      	ldr	r3, [pc, #16]	@ (800d0f8 <HAL_PCD_SuspendCallback+0x48>)
 800d0e6:	691b      	ldr	r3, [r3, #16]
 800d0e8:	4a03      	ldr	r2, [pc, #12]	@ (800d0f8 <HAL_PCD_SuspendCallback+0x48>)
 800d0ea:	f043 0306 	orr.w	r3, r3, #6
 800d0ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d0f0:	bf00      	nop
 800d0f2:	3708      	adds	r7, #8
 800d0f4:	46bd      	mov	sp, r7
 800d0f6:	bd80      	pop	{r7, pc}
 800d0f8:	e000ed00 	.word	0xe000ed00

0800d0fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b082      	sub	sp, #8
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fe fd07 	bl	800bb1e <USBD_LL_Resume>
}
 800d110:	bf00      	nop
 800d112:	3708      	adds	r7, #8
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}

0800d118 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b082      	sub	sp, #8
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
 800d120:	460b      	mov	r3, r1
 800d122:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d12a:	78fa      	ldrb	r2, [r7, #3]
 800d12c:	4611      	mov	r1, r2
 800d12e:	4618      	mov	r0, r3
 800d130:	f7fe fd5f 	bl	800bbf2 <USBD_LL_IsoOUTIncomplete>
}
 800d134:	bf00      	nop
 800d136:	3708      	adds	r7, #8
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}

0800d13c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b082      	sub	sp, #8
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	460b      	mov	r3, r1
 800d146:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d14e:	78fa      	ldrb	r2, [r7, #3]
 800d150:	4611      	mov	r1, r2
 800d152:	4618      	mov	r0, r3
 800d154:	f7fe fd1b 	bl	800bb8e <USBD_LL_IsoINIncomplete>
}
 800d158:	bf00      	nop
 800d15a:	3708      	adds	r7, #8
 800d15c:	46bd      	mov	sp, r7
 800d15e:	bd80      	pop	{r7, pc}

0800d160 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d160:	b580      	push	{r7, lr}
 800d162:	b082      	sub	sp, #8
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d16e:	4618      	mov	r0, r3
 800d170:	f7fe fd71 	bl	800bc56 <USBD_LL_DevConnected>
}
 800d174:	bf00      	nop
 800d176:	3708      	adds	r7, #8
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}

0800d17c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b082      	sub	sp, #8
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7fe fd6e 	bl	800bc6c <USBD_LL_DevDisconnected>
}
 800d190:	bf00      	nop
 800d192:	3708      	adds	r7, #8
 800d194:	46bd      	mov	sp, r7
 800d196:	bd80      	pop	{r7, pc}

0800d198 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b082      	sub	sp, #8
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d13c      	bne.n	800d222 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d1a8:	4a20      	ldr	r2, [pc, #128]	@ (800d22c <USBD_LL_Init+0x94>)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	4a1e      	ldr	r2, [pc, #120]	@ (800d22c <USBD_LL_Init+0x94>)
 800d1b4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d1b8:	4b1c      	ldr	r3, [pc, #112]	@ (800d22c <USBD_LL_Init+0x94>)
 800d1ba:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d1be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d1c0:	4b1a      	ldr	r3, [pc, #104]	@ (800d22c <USBD_LL_Init+0x94>)
 800d1c2:	2204      	movs	r2, #4
 800d1c4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d1c6:	4b19      	ldr	r3, [pc, #100]	@ (800d22c <USBD_LL_Init+0x94>)
 800d1c8:	2202      	movs	r2, #2
 800d1ca:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d1cc:	4b17      	ldr	r3, [pc, #92]	@ (800d22c <USBD_LL_Init+0x94>)
 800d1ce:	2200      	movs	r2, #0
 800d1d0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d1d2:	4b16      	ldr	r3, [pc, #88]	@ (800d22c <USBD_LL_Init+0x94>)
 800d1d4:	2202      	movs	r2, #2
 800d1d6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d1d8:	4b14      	ldr	r3, [pc, #80]	@ (800d22c <USBD_LL_Init+0x94>)
 800d1da:	2200      	movs	r2, #0
 800d1dc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d1de:	4b13      	ldr	r3, [pc, #76]	@ (800d22c <USBD_LL_Init+0x94>)
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d1e4:	4b11      	ldr	r3, [pc, #68]	@ (800d22c <USBD_LL_Init+0x94>)
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d1ea:	4b10      	ldr	r3, [pc, #64]	@ (800d22c <USBD_LL_Init+0x94>)
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d1f0:	4b0e      	ldr	r3, [pc, #56]	@ (800d22c <USBD_LL_Init+0x94>)
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d1f6:	480d      	ldr	r0, [pc, #52]	@ (800d22c <USBD_LL_Init+0x94>)
 800d1f8:	f7f9 f9ff 	bl	80065fa <HAL_PCD_Init>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d001      	beq.n	800d206 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d202:	f7f4 fced 	bl	8001be0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d206:	2180      	movs	r1, #128	@ 0x80
 800d208:	4808      	ldr	r0, [pc, #32]	@ (800d22c <USBD_LL_Init+0x94>)
 800d20a:	f7fa fc2c 	bl	8007a66 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d20e:	2240      	movs	r2, #64	@ 0x40
 800d210:	2100      	movs	r1, #0
 800d212:	4806      	ldr	r0, [pc, #24]	@ (800d22c <USBD_LL_Init+0x94>)
 800d214:	f7fa fbe0 	bl	80079d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d218:	2280      	movs	r2, #128	@ 0x80
 800d21a:	2101      	movs	r1, #1
 800d21c:	4803      	ldr	r0, [pc, #12]	@ (800d22c <USBD_LL_Init+0x94>)
 800d21e:	f7fa fbdb 	bl	80079d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d222:	2300      	movs	r3, #0
}
 800d224:	4618      	mov	r0, r3
 800d226:	3708      	adds	r7, #8
 800d228:	46bd      	mov	sp, r7
 800d22a:	bd80      	pop	{r7, pc}
 800d22c:	20001b60 	.word	0x20001b60

0800d230 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d238:	2300      	movs	r3, #0
 800d23a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d23c:	2300      	movs	r3, #0
 800d23e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d246:	4618      	mov	r0, r3
 800d248:	f7f9 fae6 	bl	8006818 <HAL_PCD_Start>
 800d24c:	4603      	mov	r3, r0
 800d24e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d250:	7bfb      	ldrb	r3, [r7, #15]
 800d252:	4618      	mov	r0, r3
 800d254:	f000 f942 	bl	800d4dc <USBD_Get_USB_Status>
 800d258:	4603      	mov	r3, r0
 800d25a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d25c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3710      	adds	r7, #16
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}

0800d266 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d266:	b580      	push	{r7, lr}
 800d268:	b084      	sub	sp, #16
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
 800d26e:	4608      	mov	r0, r1
 800d270:	4611      	mov	r1, r2
 800d272:	461a      	mov	r2, r3
 800d274:	4603      	mov	r3, r0
 800d276:	70fb      	strb	r3, [r7, #3]
 800d278:	460b      	mov	r3, r1
 800d27a:	70bb      	strb	r3, [r7, #2]
 800d27c:	4613      	mov	r3, r2
 800d27e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d280:	2300      	movs	r3, #0
 800d282:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d284:	2300      	movs	r3, #0
 800d286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d28e:	78bb      	ldrb	r3, [r7, #2]
 800d290:	883a      	ldrh	r2, [r7, #0]
 800d292:	78f9      	ldrb	r1, [r7, #3]
 800d294:	f7f9 ffba 	bl	800720c <HAL_PCD_EP_Open>
 800d298:	4603      	mov	r3, r0
 800d29a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d29c:	7bfb      	ldrb	r3, [r7, #15]
 800d29e:	4618      	mov	r0, r3
 800d2a0:	f000 f91c 	bl	800d4dc <USBD_Get_USB_Status>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3710      	adds	r7, #16
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}

0800d2b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2b2:	b580      	push	{r7, lr}
 800d2b4:	b084      	sub	sp, #16
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
 800d2ba:	460b      	mov	r3, r1
 800d2bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d2cc:	78fa      	ldrb	r2, [r7, #3]
 800d2ce:	4611      	mov	r1, r2
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7fa f805 	bl	80072e0 <HAL_PCD_EP_Close>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d2da:	7bfb      	ldrb	r3, [r7, #15]
 800d2dc:	4618      	mov	r0, r3
 800d2de:	f000 f8fd 	bl	800d4dc <USBD_Get_USB_Status>
 800d2e2:	4603      	mov	r3, r0
 800d2e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d2e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3710      	adds	r7, #16
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}

0800d2f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b084      	sub	sp, #16
 800d2f4:	af00      	add	r7, sp, #0
 800d2f6:	6078      	str	r0, [r7, #4]
 800d2f8:	460b      	mov	r3, r1
 800d2fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d300:	2300      	movs	r3, #0
 800d302:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d30a:	78fa      	ldrb	r2, [r7, #3]
 800d30c:	4611      	mov	r1, r2
 800d30e:	4618      	mov	r0, r3
 800d310:	f7fa f8bd 	bl	800748e <HAL_PCD_EP_SetStall>
 800d314:	4603      	mov	r3, r0
 800d316:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d318:	7bfb      	ldrb	r3, [r7, #15]
 800d31a:	4618      	mov	r0, r3
 800d31c:	f000 f8de 	bl	800d4dc <USBD_Get_USB_Status>
 800d320:	4603      	mov	r3, r0
 800d322:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d324:	7bbb      	ldrb	r3, [r7, #14]
}
 800d326:	4618      	mov	r0, r3
 800d328:	3710      	adds	r7, #16
 800d32a:	46bd      	mov	sp, r7
 800d32c:	bd80      	pop	{r7, pc}

0800d32e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d32e:	b580      	push	{r7, lr}
 800d330:	b084      	sub	sp, #16
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
 800d336:	460b      	mov	r3, r1
 800d338:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d33a:	2300      	movs	r3, #0
 800d33c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d33e:	2300      	movs	r3, #0
 800d340:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d348:	78fa      	ldrb	r2, [r7, #3]
 800d34a:	4611      	mov	r1, r2
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7fa f901 	bl	8007554 <HAL_PCD_EP_ClrStall>
 800d352:	4603      	mov	r3, r0
 800d354:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d356:	7bfb      	ldrb	r3, [r7, #15]
 800d358:	4618      	mov	r0, r3
 800d35a:	f000 f8bf 	bl	800d4dc <USBD_Get_USB_Status>
 800d35e:	4603      	mov	r3, r0
 800d360:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d362:	7bbb      	ldrb	r3, [r7, #14]
}
 800d364:	4618      	mov	r0, r3
 800d366:	3710      	adds	r7, #16
 800d368:	46bd      	mov	sp, r7
 800d36a:	bd80      	pop	{r7, pc}

0800d36c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d36c:	b480      	push	{r7}
 800d36e:	b085      	sub	sp, #20
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	460b      	mov	r3, r1
 800d376:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d37e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d380:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d384:	2b00      	cmp	r3, #0
 800d386:	da0b      	bge.n	800d3a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d388:	78fb      	ldrb	r3, [r7, #3]
 800d38a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d38e:	68f9      	ldr	r1, [r7, #12]
 800d390:	4613      	mov	r3, r2
 800d392:	00db      	lsls	r3, r3, #3
 800d394:	4413      	add	r3, r2
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	440b      	add	r3, r1
 800d39a:	3316      	adds	r3, #22
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	e00b      	b.n	800d3b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d3a0:	78fb      	ldrb	r3, [r7, #3]
 800d3a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d3a6:	68f9      	ldr	r1, [r7, #12]
 800d3a8:	4613      	mov	r3, r2
 800d3aa:	00db      	lsls	r3, r3, #3
 800d3ac:	4413      	add	r3, r2
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	440b      	add	r3, r1
 800d3b2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d3b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d3b8:	4618      	mov	r0, r3
 800d3ba:	3714      	adds	r7, #20
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c2:	4770      	bx	lr

0800d3c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b084      	sub	sp, #16
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
 800d3cc:	460b      	mov	r3, r1
 800d3ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d3de:	78fa      	ldrb	r2, [r7, #3]
 800d3e0:	4611      	mov	r1, r2
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f7f9 feee 	bl	80071c4 <HAL_PCD_SetAddress>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3ec:	7bfb      	ldrb	r3, [r7, #15]
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	f000 f874 	bl	800d4dc <USBD_Get_USB_Status>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	3710      	adds	r7, #16
 800d3fe:	46bd      	mov	sp, r7
 800d400:	bd80      	pop	{r7, pc}

0800d402 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d402:	b580      	push	{r7, lr}
 800d404:	b086      	sub	sp, #24
 800d406:	af00      	add	r7, sp, #0
 800d408:	60f8      	str	r0, [r7, #12]
 800d40a:	607a      	str	r2, [r7, #4]
 800d40c:	603b      	str	r3, [r7, #0]
 800d40e:	460b      	mov	r3, r1
 800d410:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d412:	2300      	movs	r3, #0
 800d414:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d416:	2300      	movs	r3, #0
 800d418:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d420:	7af9      	ldrb	r1, [r7, #11]
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	687a      	ldr	r2, [r7, #4]
 800d426:	f7f9 fff8 	bl	800741a <HAL_PCD_EP_Transmit>
 800d42a:	4603      	mov	r3, r0
 800d42c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d42e:	7dfb      	ldrb	r3, [r7, #23]
 800d430:	4618      	mov	r0, r3
 800d432:	f000 f853 	bl	800d4dc <USBD_Get_USB_Status>
 800d436:	4603      	mov	r3, r0
 800d438:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d43a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d43c:	4618      	mov	r0, r3
 800d43e:	3718      	adds	r7, #24
 800d440:	46bd      	mov	sp, r7
 800d442:	bd80      	pop	{r7, pc}

0800d444 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b086      	sub	sp, #24
 800d448:	af00      	add	r7, sp, #0
 800d44a:	60f8      	str	r0, [r7, #12]
 800d44c:	607a      	str	r2, [r7, #4]
 800d44e:	603b      	str	r3, [r7, #0]
 800d450:	460b      	mov	r3, r1
 800d452:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d454:	2300      	movs	r3, #0
 800d456:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d458:	2300      	movs	r3, #0
 800d45a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d462:	7af9      	ldrb	r1, [r7, #11]
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	687a      	ldr	r2, [r7, #4]
 800d468:	f7f9 ff84 	bl	8007374 <HAL_PCD_EP_Receive>
 800d46c:	4603      	mov	r3, r0
 800d46e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d470:	7dfb      	ldrb	r3, [r7, #23]
 800d472:	4618      	mov	r0, r3
 800d474:	f000 f832 	bl	800d4dc <USBD_Get_USB_Status>
 800d478:	4603      	mov	r3, r0
 800d47a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d47c:	7dbb      	ldrb	r3, [r7, #22]
}
 800d47e:	4618      	mov	r0, r3
 800d480:	3718      	adds	r7, #24
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}

0800d486 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d486:	b580      	push	{r7, lr}
 800d488:	b082      	sub	sp, #8
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	6078      	str	r0, [r7, #4]
 800d48e:	460b      	mov	r3, r1
 800d490:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d498:	78fa      	ldrb	r2, [r7, #3]
 800d49a:	4611      	mov	r1, r2
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7f9 ffa4 	bl	80073ea <HAL_PCD_EP_GetRxCount>
 800d4a2:	4603      	mov	r3, r0
}
 800d4a4:	4618      	mov	r0, r3
 800d4a6:	3708      	adds	r7, #8
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}

0800d4ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b083      	sub	sp, #12
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d4b4:	4b03      	ldr	r3, [pc, #12]	@ (800d4c4 <USBD_static_malloc+0x18>)
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	370c      	adds	r7, #12
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c0:	4770      	bx	lr
 800d4c2:	bf00      	nop
 800d4c4:	20002044 	.word	0x20002044

0800d4c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b083      	sub	sp, #12
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]

}
 800d4d0:	bf00      	nop
 800d4d2:	370c      	adds	r7, #12
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4da:	4770      	bx	lr

0800d4dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b085      	sub	sp, #20
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d4ea:	79fb      	ldrb	r3, [r7, #7]
 800d4ec:	2b03      	cmp	r3, #3
 800d4ee:	d817      	bhi.n	800d520 <USBD_Get_USB_Status+0x44>
 800d4f0:	a201      	add	r2, pc, #4	@ (adr r2, 800d4f8 <USBD_Get_USB_Status+0x1c>)
 800d4f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4f6:	bf00      	nop
 800d4f8:	0800d509 	.word	0x0800d509
 800d4fc:	0800d50f 	.word	0x0800d50f
 800d500:	0800d515 	.word	0x0800d515
 800d504:	0800d51b 	.word	0x0800d51b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d508:	2300      	movs	r3, #0
 800d50a:	73fb      	strb	r3, [r7, #15]
    break;
 800d50c:	e00b      	b.n	800d526 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d50e:	2303      	movs	r3, #3
 800d510:	73fb      	strb	r3, [r7, #15]
    break;
 800d512:	e008      	b.n	800d526 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d514:	2301      	movs	r3, #1
 800d516:	73fb      	strb	r3, [r7, #15]
    break;
 800d518:	e005      	b.n	800d526 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d51a:	2303      	movs	r3, #3
 800d51c:	73fb      	strb	r3, [r7, #15]
    break;
 800d51e:	e002      	b.n	800d526 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d520:	2303      	movs	r3, #3
 800d522:	73fb      	strb	r3, [r7, #15]
    break;
 800d524:	bf00      	nop
  }
  return usb_status;
 800d526:	7bfb      	ldrb	r3, [r7, #15]
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3714      	adds	r7, #20
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr

0800d534 <__cvt>:
 800d534:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d538:	ec57 6b10 	vmov	r6, r7, d0
 800d53c:	2f00      	cmp	r7, #0
 800d53e:	460c      	mov	r4, r1
 800d540:	4619      	mov	r1, r3
 800d542:	463b      	mov	r3, r7
 800d544:	bfbb      	ittet	lt
 800d546:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d54a:	461f      	movlt	r7, r3
 800d54c:	2300      	movge	r3, #0
 800d54e:	232d      	movlt	r3, #45	@ 0x2d
 800d550:	700b      	strb	r3, [r1, #0]
 800d552:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d554:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d558:	4691      	mov	r9, r2
 800d55a:	f023 0820 	bic.w	r8, r3, #32
 800d55e:	bfbc      	itt	lt
 800d560:	4632      	movlt	r2, r6
 800d562:	4616      	movlt	r6, r2
 800d564:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d568:	d005      	beq.n	800d576 <__cvt+0x42>
 800d56a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d56e:	d100      	bne.n	800d572 <__cvt+0x3e>
 800d570:	3401      	adds	r4, #1
 800d572:	2102      	movs	r1, #2
 800d574:	e000      	b.n	800d578 <__cvt+0x44>
 800d576:	2103      	movs	r1, #3
 800d578:	ab03      	add	r3, sp, #12
 800d57a:	9301      	str	r3, [sp, #4]
 800d57c:	ab02      	add	r3, sp, #8
 800d57e:	9300      	str	r3, [sp, #0]
 800d580:	ec47 6b10 	vmov	d0, r6, r7
 800d584:	4653      	mov	r3, sl
 800d586:	4622      	mov	r2, r4
 800d588:	f000 fde2 	bl	800e150 <_dtoa_r>
 800d58c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d590:	4605      	mov	r5, r0
 800d592:	d119      	bne.n	800d5c8 <__cvt+0x94>
 800d594:	f019 0f01 	tst.w	r9, #1
 800d598:	d00e      	beq.n	800d5b8 <__cvt+0x84>
 800d59a:	eb00 0904 	add.w	r9, r0, r4
 800d59e:	2200      	movs	r2, #0
 800d5a0:	2300      	movs	r3, #0
 800d5a2:	4630      	mov	r0, r6
 800d5a4:	4639      	mov	r1, r7
 800d5a6:	f7f3 fa8f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5aa:	b108      	cbz	r0, 800d5b0 <__cvt+0x7c>
 800d5ac:	f8cd 900c 	str.w	r9, [sp, #12]
 800d5b0:	2230      	movs	r2, #48	@ 0x30
 800d5b2:	9b03      	ldr	r3, [sp, #12]
 800d5b4:	454b      	cmp	r3, r9
 800d5b6:	d31e      	bcc.n	800d5f6 <__cvt+0xc2>
 800d5b8:	9b03      	ldr	r3, [sp, #12]
 800d5ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d5bc:	1b5b      	subs	r3, r3, r5
 800d5be:	4628      	mov	r0, r5
 800d5c0:	6013      	str	r3, [r2, #0]
 800d5c2:	b004      	add	sp, #16
 800d5c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d5cc:	eb00 0904 	add.w	r9, r0, r4
 800d5d0:	d1e5      	bne.n	800d59e <__cvt+0x6a>
 800d5d2:	7803      	ldrb	r3, [r0, #0]
 800d5d4:	2b30      	cmp	r3, #48	@ 0x30
 800d5d6:	d10a      	bne.n	800d5ee <__cvt+0xba>
 800d5d8:	2200      	movs	r2, #0
 800d5da:	2300      	movs	r3, #0
 800d5dc:	4630      	mov	r0, r6
 800d5de:	4639      	mov	r1, r7
 800d5e0:	f7f3 fa72 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5e4:	b918      	cbnz	r0, 800d5ee <__cvt+0xba>
 800d5e6:	f1c4 0401 	rsb	r4, r4, #1
 800d5ea:	f8ca 4000 	str.w	r4, [sl]
 800d5ee:	f8da 3000 	ldr.w	r3, [sl]
 800d5f2:	4499      	add	r9, r3
 800d5f4:	e7d3      	b.n	800d59e <__cvt+0x6a>
 800d5f6:	1c59      	adds	r1, r3, #1
 800d5f8:	9103      	str	r1, [sp, #12]
 800d5fa:	701a      	strb	r2, [r3, #0]
 800d5fc:	e7d9      	b.n	800d5b2 <__cvt+0x7e>

0800d5fe <__exponent>:
 800d5fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d600:	2900      	cmp	r1, #0
 800d602:	bfba      	itte	lt
 800d604:	4249      	neglt	r1, r1
 800d606:	232d      	movlt	r3, #45	@ 0x2d
 800d608:	232b      	movge	r3, #43	@ 0x2b
 800d60a:	2909      	cmp	r1, #9
 800d60c:	7002      	strb	r2, [r0, #0]
 800d60e:	7043      	strb	r3, [r0, #1]
 800d610:	dd29      	ble.n	800d666 <__exponent+0x68>
 800d612:	f10d 0307 	add.w	r3, sp, #7
 800d616:	461d      	mov	r5, r3
 800d618:	270a      	movs	r7, #10
 800d61a:	461a      	mov	r2, r3
 800d61c:	fbb1 f6f7 	udiv	r6, r1, r7
 800d620:	fb07 1416 	mls	r4, r7, r6, r1
 800d624:	3430      	adds	r4, #48	@ 0x30
 800d626:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d62a:	460c      	mov	r4, r1
 800d62c:	2c63      	cmp	r4, #99	@ 0x63
 800d62e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800d632:	4631      	mov	r1, r6
 800d634:	dcf1      	bgt.n	800d61a <__exponent+0x1c>
 800d636:	3130      	adds	r1, #48	@ 0x30
 800d638:	1e94      	subs	r4, r2, #2
 800d63a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d63e:	1c41      	adds	r1, r0, #1
 800d640:	4623      	mov	r3, r4
 800d642:	42ab      	cmp	r3, r5
 800d644:	d30a      	bcc.n	800d65c <__exponent+0x5e>
 800d646:	f10d 0309 	add.w	r3, sp, #9
 800d64a:	1a9b      	subs	r3, r3, r2
 800d64c:	42ac      	cmp	r4, r5
 800d64e:	bf88      	it	hi
 800d650:	2300      	movhi	r3, #0
 800d652:	3302      	adds	r3, #2
 800d654:	4403      	add	r3, r0
 800d656:	1a18      	subs	r0, r3, r0
 800d658:	b003      	add	sp, #12
 800d65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d65c:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d660:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d664:	e7ed      	b.n	800d642 <__exponent+0x44>
 800d666:	2330      	movs	r3, #48	@ 0x30
 800d668:	3130      	adds	r1, #48	@ 0x30
 800d66a:	7083      	strb	r3, [r0, #2]
 800d66c:	70c1      	strb	r1, [r0, #3]
 800d66e:	1d03      	adds	r3, r0, #4
 800d670:	e7f1      	b.n	800d656 <__exponent+0x58>
	...

0800d674 <_printf_float>:
 800d674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d678:	b08d      	sub	sp, #52	@ 0x34
 800d67a:	460c      	mov	r4, r1
 800d67c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d680:	4616      	mov	r6, r2
 800d682:	461f      	mov	r7, r3
 800d684:	4605      	mov	r5, r0
 800d686:	f000 fca9 	bl	800dfdc <_localeconv_r>
 800d68a:	6803      	ldr	r3, [r0, #0]
 800d68c:	9304      	str	r3, [sp, #16]
 800d68e:	4618      	mov	r0, r3
 800d690:	f7f2 fdee 	bl	8000270 <strlen>
 800d694:	2300      	movs	r3, #0
 800d696:	930a      	str	r3, [sp, #40]	@ 0x28
 800d698:	f8d8 3000 	ldr.w	r3, [r8]
 800d69c:	9005      	str	r0, [sp, #20]
 800d69e:	3307      	adds	r3, #7
 800d6a0:	f023 0307 	bic.w	r3, r3, #7
 800d6a4:	f103 0208 	add.w	r2, r3, #8
 800d6a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d6ac:	f8d4 b000 	ldr.w	fp, [r4]
 800d6b0:	f8c8 2000 	str.w	r2, [r8]
 800d6b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d6b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d6bc:	9307      	str	r3, [sp, #28]
 800d6be:	f8cd 8018 	str.w	r8, [sp, #24]
 800d6c2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d6c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d6ca:	4b9c      	ldr	r3, [pc, #624]	@ (800d93c <_printf_float+0x2c8>)
 800d6cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d6d0:	f7f3 fa2c 	bl	8000b2c <__aeabi_dcmpun>
 800d6d4:	bb70      	cbnz	r0, 800d734 <_printf_float+0xc0>
 800d6d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d6da:	4b98      	ldr	r3, [pc, #608]	@ (800d93c <_printf_float+0x2c8>)
 800d6dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d6e0:	f7f3 fa06 	bl	8000af0 <__aeabi_dcmple>
 800d6e4:	bb30      	cbnz	r0, 800d734 <_printf_float+0xc0>
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	4640      	mov	r0, r8
 800d6ec:	4649      	mov	r1, r9
 800d6ee:	f7f3 f9f5 	bl	8000adc <__aeabi_dcmplt>
 800d6f2:	b110      	cbz	r0, 800d6fa <_printf_float+0x86>
 800d6f4:	232d      	movs	r3, #45	@ 0x2d
 800d6f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d6fa:	4a91      	ldr	r2, [pc, #580]	@ (800d940 <_printf_float+0x2cc>)
 800d6fc:	4b91      	ldr	r3, [pc, #580]	@ (800d944 <_printf_float+0x2d0>)
 800d6fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d702:	bf94      	ite	ls
 800d704:	4690      	movls	r8, r2
 800d706:	4698      	movhi	r8, r3
 800d708:	2303      	movs	r3, #3
 800d70a:	6123      	str	r3, [r4, #16]
 800d70c:	f02b 0304 	bic.w	r3, fp, #4
 800d710:	6023      	str	r3, [r4, #0]
 800d712:	f04f 0900 	mov.w	r9, #0
 800d716:	9700      	str	r7, [sp, #0]
 800d718:	4633      	mov	r3, r6
 800d71a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d71c:	4621      	mov	r1, r4
 800d71e:	4628      	mov	r0, r5
 800d720:	f000 f9d2 	bl	800dac8 <_printf_common>
 800d724:	3001      	adds	r0, #1
 800d726:	f040 808d 	bne.w	800d844 <_printf_float+0x1d0>
 800d72a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d72e:	b00d      	add	sp, #52	@ 0x34
 800d730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d734:	4642      	mov	r2, r8
 800d736:	464b      	mov	r3, r9
 800d738:	4640      	mov	r0, r8
 800d73a:	4649      	mov	r1, r9
 800d73c:	f7f3 f9f6 	bl	8000b2c <__aeabi_dcmpun>
 800d740:	b140      	cbz	r0, 800d754 <_printf_float+0xe0>
 800d742:	464b      	mov	r3, r9
 800d744:	2b00      	cmp	r3, #0
 800d746:	bfbc      	itt	lt
 800d748:	232d      	movlt	r3, #45	@ 0x2d
 800d74a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d74e:	4a7e      	ldr	r2, [pc, #504]	@ (800d948 <_printf_float+0x2d4>)
 800d750:	4b7e      	ldr	r3, [pc, #504]	@ (800d94c <_printf_float+0x2d8>)
 800d752:	e7d4      	b.n	800d6fe <_printf_float+0x8a>
 800d754:	6863      	ldr	r3, [r4, #4]
 800d756:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d75a:	9206      	str	r2, [sp, #24]
 800d75c:	1c5a      	adds	r2, r3, #1
 800d75e:	d13b      	bne.n	800d7d8 <_printf_float+0x164>
 800d760:	2306      	movs	r3, #6
 800d762:	6063      	str	r3, [r4, #4]
 800d764:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d768:	2300      	movs	r3, #0
 800d76a:	6022      	str	r2, [r4, #0]
 800d76c:	9303      	str	r3, [sp, #12]
 800d76e:	ab0a      	add	r3, sp, #40	@ 0x28
 800d770:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d774:	ab09      	add	r3, sp, #36	@ 0x24
 800d776:	9300      	str	r3, [sp, #0]
 800d778:	6861      	ldr	r1, [r4, #4]
 800d77a:	ec49 8b10 	vmov	d0, r8, r9
 800d77e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d782:	4628      	mov	r0, r5
 800d784:	f7ff fed6 	bl	800d534 <__cvt>
 800d788:	9b06      	ldr	r3, [sp, #24]
 800d78a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d78c:	2b47      	cmp	r3, #71	@ 0x47
 800d78e:	4680      	mov	r8, r0
 800d790:	d129      	bne.n	800d7e6 <_printf_float+0x172>
 800d792:	1cc8      	adds	r0, r1, #3
 800d794:	db02      	blt.n	800d79c <_printf_float+0x128>
 800d796:	6863      	ldr	r3, [r4, #4]
 800d798:	4299      	cmp	r1, r3
 800d79a:	dd41      	ble.n	800d820 <_printf_float+0x1ac>
 800d79c:	f1aa 0a02 	sub.w	sl, sl, #2
 800d7a0:	fa5f fa8a 	uxtb.w	sl, sl
 800d7a4:	3901      	subs	r1, #1
 800d7a6:	4652      	mov	r2, sl
 800d7a8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d7ac:	9109      	str	r1, [sp, #36]	@ 0x24
 800d7ae:	f7ff ff26 	bl	800d5fe <__exponent>
 800d7b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d7b4:	1813      	adds	r3, r2, r0
 800d7b6:	2a01      	cmp	r2, #1
 800d7b8:	4681      	mov	r9, r0
 800d7ba:	6123      	str	r3, [r4, #16]
 800d7bc:	dc02      	bgt.n	800d7c4 <_printf_float+0x150>
 800d7be:	6822      	ldr	r2, [r4, #0]
 800d7c0:	07d2      	lsls	r2, r2, #31
 800d7c2:	d501      	bpl.n	800d7c8 <_printf_float+0x154>
 800d7c4:	3301      	adds	r3, #1
 800d7c6:	6123      	str	r3, [r4, #16]
 800d7c8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d0a2      	beq.n	800d716 <_printf_float+0xa2>
 800d7d0:	232d      	movs	r3, #45	@ 0x2d
 800d7d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d7d6:	e79e      	b.n	800d716 <_printf_float+0xa2>
 800d7d8:	9a06      	ldr	r2, [sp, #24]
 800d7da:	2a47      	cmp	r2, #71	@ 0x47
 800d7dc:	d1c2      	bne.n	800d764 <_printf_float+0xf0>
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d1c0      	bne.n	800d764 <_printf_float+0xf0>
 800d7e2:	2301      	movs	r3, #1
 800d7e4:	e7bd      	b.n	800d762 <_printf_float+0xee>
 800d7e6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d7ea:	d9db      	bls.n	800d7a4 <_printf_float+0x130>
 800d7ec:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d7f0:	d118      	bne.n	800d824 <_printf_float+0x1b0>
 800d7f2:	2900      	cmp	r1, #0
 800d7f4:	6863      	ldr	r3, [r4, #4]
 800d7f6:	dd0b      	ble.n	800d810 <_printf_float+0x19c>
 800d7f8:	6121      	str	r1, [r4, #16]
 800d7fa:	b913      	cbnz	r3, 800d802 <_printf_float+0x18e>
 800d7fc:	6822      	ldr	r2, [r4, #0]
 800d7fe:	07d0      	lsls	r0, r2, #31
 800d800:	d502      	bpl.n	800d808 <_printf_float+0x194>
 800d802:	3301      	adds	r3, #1
 800d804:	440b      	add	r3, r1
 800d806:	6123      	str	r3, [r4, #16]
 800d808:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d80a:	f04f 0900 	mov.w	r9, #0
 800d80e:	e7db      	b.n	800d7c8 <_printf_float+0x154>
 800d810:	b913      	cbnz	r3, 800d818 <_printf_float+0x1a4>
 800d812:	6822      	ldr	r2, [r4, #0]
 800d814:	07d2      	lsls	r2, r2, #31
 800d816:	d501      	bpl.n	800d81c <_printf_float+0x1a8>
 800d818:	3302      	adds	r3, #2
 800d81a:	e7f4      	b.n	800d806 <_printf_float+0x192>
 800d81c:	2301      	movs	r3, #1
 800d81e:	e7f2      	b.n	800d806 <_printf_float+0x192>
 800d820:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d824:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d826:	4299      	cmp	r1, r3
 800d828:	db05      	blt.n	800d836 <_printf_float+0x1c2>
 800d82a:	6823      	ldr	r3, [r4, #0]
 800d82c:	6121      	str	r1, [r4, #16]
 800d82e:	07d8      	lsls	r0, r3, #31
 800d830:	d5ea      	bpl.n	800d808 <_printf_float+0x194>
 800d832:	1c4b      	adds	r3, r1, #1
 800d834:	e7e7      	b.n	800d806 <_printf_float+0x192>
 800d836:	2900      	cmp	r1, #0
 800d838:	bfd4      	ite	le
 800d83a:	f1c1 0202 	rsble	r2, r1, #2
 800d83e:	2201      	movgt	r2, #1
 800d840:	4413      	add	r3, r2
 800d842:	e7e0      	b.n	800d806 <_printf_float+0x192>
 800d844:	6823      	ldr	r3, [r4, #0]
 800d846:	055a      	lsls	r2, r3, #21
 800d848:	d407      	bmi.n	800d85a <_printf_float+0x1e6>
 800d84a:	6923      	ldr	r3, [r4, #16]
 800d84c:	4642      	mov	r2, r8
 800d84e:	4631      	mov	r1, r6
 800d850:	4628      	mov	r0, r5
 800d852:	47b8      	blx	r7
 800d854:	3001      	adds	r0, #1
 800d856:	d12b      	bne.n	800d8b0 <_printf_float+0x23c>
 800d858:	e767      	b.n	800d72a <_printf_float+0xb6>
 800d85a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d85e:	f240 80dd 	bls.w	800da1c <_printf_float+0x3a8>
 800d862:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d866:	2200      	movs	r2, #0
 800d868:	2300      	movs	r3, #0
 800d86a:	f7f3 f92d 	bl	8000ac8 <__aeabi_dcmpeq>
 800d86e:	2800      	cmp	r0, #0
 800d870:	d033      	beq.n	800d8da <_printf_float+0x266>
 800d872:	4a37      	ldr	r2, [pc, #220]	@ (800d950 <_printf_float+0x2dc>)
 800d874:	2301      	movs	r3, #1
 800d876:	4631      	mov	r1, r6
 800d878:	4628      	mov	r0, r5
 800d87a:	47b8      	blx	r7
 800d87c:	3001      	adds	r0, #1
 800d87e:	f43f af54 	beq.w	800d72a <_printf_float+0xb6>
 800d882:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d886:	4543      	cmp	r3, r8
 800d888:	db02      	blt.n	800d890 <_printf_float+0x21c>
 800d88a:	6823      	ldr	r3, [r4, #0]
 800d88c:	07d8      	lsls	r0, r3, #31
 800d88e:	d50f      	bpl.n	800d8b0 <_printf_float+0x23c>
 800d890:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d894:	4631      	mov	r1, r6
 800d896:	4628      	mov	r0, r5
 800d898:	47b8      	blx	r7
 800d89a:	3001      	adds	r0, #1
 800d89c:	f43f af45 	beq.w	800d72a <_printf_float+0xb6>
 800d8a0:	f04f 0900 	mov.w	r9, #0
 800d8a4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d8a8:	f104 0a1a 	add.w	sl, r4, #26
 800d8ac:	45c8      	cmp	r8, r9
 800d8ae:	dc09      	bgt.n	800d8c4 <_printf_float+0x250>
 800d8b0:	6823      	ldr	r3, [r4, #0]
 800d8b2:	079b      	lsls	r3, r3, #30
 800d8b4:	f100 8103 	bmi.w	800dabe <_printf_float+0x44a>
 800d8b8:	68e0      	ldr	r0, [r4, #12]
 800d8ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d8bc:	4298      	cmp	r0, r3
 800d8be:	bfb8      	it	lt
 800d8c0:	4618      	movlt	r0, r3
 800d8c2:	e734      	b.n	800d72e <_printf_float+0xba>
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	4652      	mov	r2, sl
 800d8c8:	4631      	mov	r1, r6
 800d8ca:	4628      	mov	r0, r5
 800d8cc:	47b8      	blx	r7
 800d8ce:	3001      	adds	r0, #1
 800d8d0:	f43f af2b 	beq.w	800d72a <_printf_float+0xb6>
 800d8d4:	f109 0901 	add.w	r9, r9, #1
 800d8d8:	e7e8      	b.n	800d8ac <_printf_float+0x238>
 800d8da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	dc39      	bgt.n	800d954 <_printf_float+0x2e0>
 800d8e0:	4a1b      	ldr	r2, [pc, #108]	@ (800d950 <_printf_float+0x2dc>)
 800d8e2:	2301      	movs	r3, #1
 800d8e4:	4631      	mov	r1, r6
 800d8e6:	4628      	mov	r0, r5
 800d8e8:	47b8      	blx	r7
 800d8ea:	3001      	adds	r0, #1
 800d8ec:	f43f af1d 	beq.w	800d72a <_printf_float+0xb6>
 800d8f0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d8f4:	ea59 0303 	orrs.w	r3, r9, r3
 800d8f8:	d102      	bne.n	800d900 <_printf_float+0x28c>
 800d8fa:	6823      	ldr	r3, [r4, #0]
 800d8fc:	07d9      	lsls	r1, r3, #31
 800d8fe:	d5d7      	bpl.n	800d8b0 <_printf_float+0x23c>
 800d900:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d904:	4631      	mov	r1, r6
 800d906:	4628      	mov	r0, r5
 800d908:	47b8      	blx	r7
 800d90a:	3001      	adds	r0, #1
 800d90c:	f43f af0d 	beq.w	800d72a <_printf_float+0xb6>
 800d910:	f04f 0a00 	mov.w	sl, #0
 800d914:	f104 0b1a 	add.w	fp, r4, #26
 800d918:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d91a:	425b      	negs	r3, r3
 800d91c:	4553      	cmp	r3, sl
 800d91e:	dc01      	bgt.n	800d924 <_printf_float+0x2b0>
 800d920:	464b      	mov	r3, r9
 800d922:	e793      	b.n	800d84c <_printf_float+0x1d8>
 800d924:	2301      	movs	r3, #1
 800d926:	465a      	mov	r2, fp
 800d928:	4631      	mov	r1, r6
 800d92a:	4628      	mov	r0, r5
 800d92c:	47b8      	blx	r7
 800d92e:	3001      	adds	r0, #1
 800d930:	f43f aefb 	beq.w	800d72a <_printf_float+0xb6>
 800d934:	f10a 0a01 	add.w	sl, sl, #1
 800d938:	e7ee      	b.n	800d918 <_printf_float+0x2a4>
 800d93a:	bf00      	nop
 800d93c:	7fefffff 	.word	0x7fefffff
 800d940:	08010340 	.word	0x08010340
 800d944:	08010344 	.word	0x08010344
 800d948:	08010348 	.word	0x08010348
 800d94c:	0801034c 	.word	0x0801034c
 800d950:	08010350 	.word	0x08010350
 800d954:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d956:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d95a:	4553      	cmp	r3, sl
 800d95c:	bfa8      	it	ge
 800d95e:	4653      	movge	r3, sl
 800d960:	2b00      	cmp	r3, #0
 800d962:	4699      	mov	r9, r3
 800d964:	dc36      	bgt.n	800d9d4 <_printf_float+0x360>
 800d966:	f04f 0b00 	mov.w	fp, #0
 800d96a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d96e:	f104 021a 	add.w	r2, r4, #26
 800d972:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d974:	9306      	str	r3, [sp, #24]
 800d976:	eba3 0309 	sub.w	r3, r3, r9
 800d97a:	455b      	cmp	r3, fp
 800d97c:	dc31      	bgt.n	800d9e2 <_printf_float+0x36e>
 800d97e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d980:	459a      	cmp	sl, r3
 800d982:	dc3a      	bgt.n	800d9fa <_printf_float+0x386>
 800d984:	6823      	ldr	r3, [r4, #0]
 800d986:	07da      	lsls	r2, r3, #31
 800d988:	d437      	bmi.n	800d9fa <_printf_float+0x386>
 800d98a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d98c:	ebaa 0903 	sub.w	r9, sl, r3
 800d990:	9b06      	ldr	r3, [sp, #24]
 800d992:	ebaa 0303 	sub.w	r3, sl, r3
 800d996:	4599      	cmp	r9, r3
 800d998:	bfa8      	it	ge
 800d99a:	4699      	movge	r9, r3
 800d99c:	f1b9 0f00 	cmp.w	r9, #0
 800d9a0:	dc33      	bgt.n	800da0a <_printf_float+0x396>
 800d9a2:	f04f 0800 	mov.w	r8, #0
 800d9a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d9aa:	f104 0b1a 	add.w	fp, r4, #26
 800d9ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9b0:	ebaa 0303 	sub.w	r3, sl, r3
 800d9b4:	eba3 0309 	sub.w	r3, r3, r9
 800d9b8:	4543      	cmp	r3, r8
 800d9ba:	f77f af79 	ble.w	800d8b0 <_printf_float+0x23c>
 800d9be:	2301      	movs	r3, #1
 800d9c0:	465a      	mov	r2, fp
 800d9c2:	4631      	mov	r1, r6
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	47b8      	blx	r7
 800d9c8:	3001      	adds	r0, #1
 800d9ca:	f43f aeae 	beq.w	800d72a <_printf_float+0xb6>
 800d9ce:	f108 0801 	add.w	r8, r8, #1
 800d9d2:	e7ec      	b.n	800d9ae <_printf_float+0x33a>
 800d9d4:	4642      	mov	r2, r8
 800d9d6:	4631      	mov	r1, r6
 800d9d8:	4628      	mov	r0, r5
 800d9da:	47b8      	blx	r7
 800d9dc:	3001      	adds	r0, #1
 800d9de:	d1c2      	bne.n	800d966 <_printf_float+0x2f2>
 800d9e0:	e6a3      	b.n	800d72a <_printf_float+0xb6>
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	4631      	mov	r1, r6
 800d9e6:	4628      	mov	r0, r5
 800d9e8:	9206      	str	r2, [sp, #24]
 800d9ea:	47b8      	blx	r7
 800d9ec:	3001      	adds	r0, #1
 800d9ee:	f43f ae9c 	beq.w	800d72a <_printf_float+0xb6>
 800d9f2:	9a06      	ldr	r2, [sp, #24]
 800d9f4:	f10b 0b01 	add.w	fp, fp, #1
 800d9f8:	e7bb      	b.n	800d972 <_printf_float+0x2fe>
 800d9fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9fe:	4631      	mov	r1, r6
 800da00:	4628      	mov	r0, r5
 800da02:	47b8      	blx	r7
 800da04:	3001      	adds	r0, #1
 800da06:	d1c0      	bne.n	800d98a <_printf_float+0x316>
 800da08:	e68f      	b.n	800d72a <_printf_float+0xb6>
 800da0a:	9a06      	ldr	r2, [sp, #24]
 800da0c:	464b      	mov	r3, r9
 800da0e:	4442      	add	r2, r8
 800da10:	4631      	mov	r1, r6
 800da12:	4628      	mov	r0, r5
 800da14:	47b8      	blx	r7
 800da16:	3001      	adds	r0, #1
 800da18:	d1c3      	bne.n	800d9a2 <_printf_float+0x32e>
 800da1a:	e686      	b.n	800d72a <_printf_float+0xb6>
 800da1c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800da20:	f1ba 0f01 	cmp.w	sl, #1
 800da24:	dc01      	bgt.n	800da2a <_printf_float+0x3b6>
 800da26:	07db      	lsls	r3, r3, #31
 800da28:	d536      	bpl.n	800da98 <_printf_float+0x424>
 800da2a:	2301      	movs	r3, #1
 800da2c:	4642      	mov	r2, r8
 800da2e:	4631      	mov	r1, r6
 800da30:	4628      	mov	r0, r5
 800da32:	47b8      	blx	r7
 800da34:	3001      	adds	r0, #1
 800da36:	f43f ae78 	beq.w	800d72a <_printf_float+0xb6>
 800da3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da3e:	4631      	mov	r1, r6
 800da40:	4628      	mov	r0, r5
 800da42:	47b8      	blx	r7
 800da44:	3001      	adds	r0, #1
 800da46:	f43f ae70 	beq.w	800d72a <_printf_float+0xb6>
 800da4a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800da4e:	2200      	movs	r2, #0
 800da50:	2300      	movs	r3, #0
 800da52:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800da56:	f7f3 f837 	bl	8000ac8 <__aeabi_dcmpeq>
 800da5a:	b9c0      	cbnz	r0, 800da8e <_printf_float+0x41a>
 800da5c:	4653      	mov	r3, sl
 800da5e:	f108 0201 	add.w	r2, r8, #1
 800da62:	4631      	mov	r1, r6
 800da64:	4628      	mov	r0, r5
 800da66:	47b8      	blx	r7
 800da68:	3001      	adds	r0, #1
 800da6a:	d10c      	bne.n	800da86 <_printf_float+0x412>
 800da6c:	e65d      	b.n	800d72a <_printf_float+0xb6>
 800da6e:	2301      	movs	r3, #1
 800da70:	465a      	mov	r2, fp
 800da72:	4631      	mov	r1, r6
 800da74:	4628      	mov	r0, r5
 800da76:	47b8      	blx	r7
 800da78:	3001      	adds	r0, #1
 800da7a:	f43f ae56 	beq.w	800d72a <_printf_float+0xb6>
 800da7e:	f108 0801 	add.w	r8, r8, #1
 800da82:	45d0      	cmp	r8, sl
 800da84:	dbf3      	blt.n	800da6e <_printf_float+0x3fa>
 800da86:	464b      	mov	r3, r9
 800da88:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800da8c:	e6df      	b.n	800d84e <_printf_float+0x1da>
 800da8e:	f04f 0800 	mov.w	r8, #0
 800da92:	f104 0b1a 	add.w	fp, r4, #26
 800da96:	e7f4      	b.n	800da82 <_printf_float+0x40e>
 800da98:	2301      	movs	r3, #1
 800da9a:	4642      	mov	r2, r8
 800da9c:	e7e1      	b.n	800da62 <_printf_float+0x3ee>
 800da9e:	2301      	movs	r3, #1
 800daa0:	464a      	mov	r2, r9
 800daa2:	4631      	mov	r1, r6
 800daa4:	4628      	mov	r0, r5
 800daa6:	47b8      	blx	r7
 800daa8:	3001      	adds	r0, #1
 800daaa:	f43f ae3e 	beq.w	800d72a <_printf_float+0xb6>
 800daae:	f108 0801 	add.w	r8, r8, #1
 800dab2:	68e3      	ldr	r3, [r4, #12]
 800dab4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dab6:	1a5b      	subs	r3, r3, r1
 800dab8:	4543      	cmp	r3, r8
 800daba:	dcf0      	bgt.n	800da9e <_printf_float+0x42a>
 800dabc:	e6fc      	b.n	800d8b8 <_printf_float+0x244>
 800dabe:	f04f 0800 	mov.w	r8, #0
 800dac2:	f104 0919 	add.w	r9, r4, #25
 800dac6:	e7f4      	b.n	800dab2 <_printf_float+0x43e>

0800dac8 <_printf_common>:
 800dac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dacc:	4616      	mov	r6, r2
 800dace:	4698      	mov	r8, r3
 800dad0:	688a      	ldr	r2, [r1, #8]
 800dad2:	690b      	ldr	r3, [r1, #16]
 800dad4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dad8:	4293      	cmp	r3, r2
 800dada:	bfb8      	it	lt
 800dadc:	4613      	movlt	r3, r2
 800dade:	6033      	str	r3, [r6, #0]
 800dae0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dae4:	4607      	mov	r7, r0
 800dae6:	460c      	mov	r4, r1
 800dae8:	b10a      	cbz	r2, 800daee <_printf_common+0x26>
 800daea:	3301      	adds	r3, #1
 800daec:	6033      	str	r3, [r6, #0]
 800daee:	6823      	ldr	r3, [r4, #0]
 800daf0:	0699      	lsls	r1, r3, #26
 800daf2:	bf42      	ittt	mi
 800daf4:	6833      	ldrmi	r3, [r6, #0]
 800daf6:	3302      	addmi	r3, #2
 800daf8:	6033      	strmi	r3, [r6, #0]
 800dafa:	6825      	ldr	r5, [r4, #0]
 800dafc:	f015 0506 	ands.w	r5, r5, #6
 800db00:	d106      	bne.n	800db10 <_printf_common+0x48>
 800db02:	f104 0a19 	add.w	sl, r4, #25
 800db06:	68e3      	ldr	r3, [r4, #12]
 800db08:	6832      	ldr	r2, [r6, #0]
 800db0a:	1a9b      	subs	r3, r3, r2
 800db0c:	42ab      	cmp	r3, r5
 800db0e:	dc26      	bgt.n	800db5e <_printf_common+0x96>
 800db10:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800db14:	6822      	ldr	r2, [r4, #0]
 800db16:	3b00      	subs	r3, #0
 800db18:	bf18      	it	ne
 800db1a:	2301      	movne	r3, #1
 800db1c:	0692      	lsls	r2, r2, #26
 800db1e:	d42b      	bmi.n	800db78 <_printf_common+0xb0>
 800db20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800db24:	4641      	mov	r1, r8
 800db26:	4638      	mov	r0, r7
 800db28:	47c8      	blx	r9
 800db2a:	3001      	adds	r0, #1
 800db2c:	d01e      	beq.n	800db6c <_printf_common+0xa4>
 800db2e:	6823      	ldr	r3, [r4, #0]
 800db30:	6922      	ldr	r2, [r4, #16]
 800db32:	f003 0306 	and.w	r3, r3, #6
 800db36:	2b04      	cmp	r3, #4
 800db38:	bf02      	ittt	eq
 800db3a:	68e5      	ldreq	r5, [r4, #12]
 800db3c:	6833      	ldreq	r3, [r6, #0]
 800db3e:	1aed      	subeq	r5, r5, r3
 800db40:	68a3      	ldr	r3, [r4, #8]
 800db42:	bf0c      	ite	eq
 800db44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db48:	2500      	movne	r5, #0
 800db4a:	4293      	cmp	r3, r2
 800db4c:	bfc4      	itt	gt
 800db4e:	1a9b      	subgt	r3, r3, r2
 800db50:	18ed      	addgt	r5, r5, r3
 800db52:	2600      	movs	r6, #0
 800db54:	341a      	adds	r4, #26
 800db56:	42b5      	cmp	r5, r6
 800db58:	d11a      	bne.n	800db90 <_printf_common+0xc8>
 800db5a:	2000      	movs	r0, #0
 800db5c:	e008      	b.n	800db70 <_printf_common+0xa8>
 800db5e:	2301      	movs	r3, #1
 800db60:	4652      	mov	r2, sl
 800db62:	4641      	mov	r1, r8
 800db64:	4638      	mov	r0, r7
 800db66:	47c8      	blx	r9
 800db68:	3001      	adds	r0, #1
 800db6a:	d103      	bne.n	800db74 <_printf_common+0xac>
 800db6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800db70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db74:	3501      	adds	r5, #1
 800db76:	e7c6      	b.n	800db06 <_printf_common+0x3e>
 800db78:	18e1      	adds	r1, r4, r3
 800db7a:	1c5a      	adds	r2, r3, #1
 800db7c:	2030      	movs	r0, #48	@ 0x30
 800db7e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800db82:	4422      	add	r2, r4
 800db84:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800db88:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800db8c:	3302      	adds	r3, #2
 800db8e:	e7c7      	b.n	800db20 <_printf_common+0x58>
 800db90:	2301      	movs	r3, #1
 800db92:	4622      	mov	r2, r4
 800db94:	4641      	mov	r1, r8
 800db96:	4638      	mov	r0, r7
 800db98:	47c8      	blx	r9
 800db9a:	3001      	adds	r0, #1
 800db9c:	d0e6      	beq.n	800db6c <_printf_common+0xa4>
 800db9e:	3601      	adds	r6, #1
 800dba0:	e7d9      	b.n	800db56 <_printf_common+0x8e>
	...

0800dba4 <_printf_i>:
 800dba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dba8:	7e0f      	ldrb	r7, [r1, #24]
 800dbaa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dbac:	2f78      	cmp	r7, #120	@ 0x78
 800dbae:	4691      	mov	r9, r2
 800dbb0:	4680      	mov	r8, r0
 800dbb2:	460c      	mov	r4, r1
 800dbb4:	469a      	mov	sl, r3
 800dbb6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dbba:	d807      	bhi.n	800dbcc <_printf_i+0x28>
 800dbbc:	2f62      	cmp	r7, #98	@ 0x62
 800dbbe:	d80a      	bhi.n	800dbd6 <_printf_i+0x32>
 800dbc0:	2f00      	cmp	r7, #0
 800dbc2:	f000 80d2 	beq.w	800dd6a <_printf_i+0x1c6>
 800dbc6:	2f58      	cmp	r7, #88	@ 0x58
 800dbc8:	f000 80b9 	beq.w	800dd3e <_printf_i+0x19a>
 800dbcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dbd0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dbd4:	e03a      	b.n	800dc4c <_printf_i+0xa8>
 800dbd6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dbda:	2b15      	cmp	r3, #21
 800dbdc:	d8f6      	bhi.n	800dbcc <_printf_i+0x28>
 800dbde:	a101      	add	r1, pc, #4	@ (adr r1, 800dbe4 <_printf_i+0x40>)
 800dbe0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dbe4:	0800dc3d 	.word	0x0800dc3d
 800dbe8:	0800dc51 	.word	0x0800dc51
 800dbec:	0800dbcd 	.word	0x0800dbcd
 800dbf0:	0800dbcd 	.word	0x0800dbcd
 800dbf4:	0800dbcd 	.word	0x0800dbcd
 800dbf8:	0800dbcd 	.word	0x0800dbcd
 800dbfc:	0800dc51 	.word	0x0800dc51
 800dc00:	0800dbcd 	.word	0x0800dbcd
 800dc04:	0800dbcd 	.word	0x0800dbcd
 800dc08:	0800dbcd 	.word	0x0800dbcd
 800dc0c:	0800dbcd 	.word	0x0800dbcd
 800dc10:	0800dd51 	.word	0x0800dd51
 800dc14:	0800dc7b 	.word	0x0800dc7b
 800dc18:	0800dd0b 	.word	0x0800dd0b
 800dc1c:	0800dbcd 	.word	0x0800dbcd
 800dc20:	0800dbcd 	.word	0x0800dbcd
 800dc24:	0800dd73 	.word	0x0800dd73
 800dc28:	0800dbcd 	.word	0x0800dbcd
 800dc2c:	0800dc7b 	.word	0x0800dc7b
 800dc30:	0800dbcd 	.word	0x0800dbcd
 800dc34:	0800dbcd 	.word	0x0800dbcd
 800dc38:	0800dd13 	.word	0x0800dd13
 800dc3c:	6833      	ldr	r3, [r6, #0]
 800dc3e:	1d1a      	adds	r2, r3, #4
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	6032      	str	r2, [r6, #0]
 800dc44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dc48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	e09d      	b.n	800dd8c <_printf_i+0x1e8>
 800dc50:	6833      	ldr	r3, [r6, #0]
 800dc52:	6820      	ldr	r0, [r4, #0]
 800dc54:	1d19      	adds	r1, r3, #4
 800dc56:	6031      	str	r1, [r6, #0]
 800dc58:	0606      	lsls	r6, r0, #24
 800dc5a:	d501      	bpl.n	800dc60 <_printf_i+0xbc>
 800dc5c:	681d      	ldr	r5, [r3, #0]
 800dc5e:	e003      	b.n	800dc68 <_printf_i+0xc4>
 800dc60:	0645      	lsls	r5, r0, #25
 800dc62:	d5fb      	bpl.n	800dc5c <_printf_i+0xb8>
 800dc64:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dc68:	2d00      	cmp	r5, #0
 800dc6a:	da03      	bge.n	800dc74 <_printf_i+0xd0>
 800dc6c:	232d      	movs	r3, #45	@ 0x2d
 800dc6e:	426d      	negs	r5, r5
 800dc70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc74:	4859      	ldr	r0, [pc, #356]	@ (800dddc <_printf_i+0x238>)
 800dc76:	230a      	movs	r3, #10
 800dc78:	e011      	b.n	800dc9e <_printf_i+0xfa>
 800dc7a:	6821      	ldr	r1, [r4, #0]
 800dc7c:	6833      	ldr	r3, [r6, #0]
 800dc7e:	0608      	lsls	r0, r1, #24
 800dc80:	f853 5b04 	ldr.w	r5, [r3], #4
 800dc84:	d402      	bmi.n	800dc8c <_printf_i+0xe8>
 800dc86:	0649      	lsls	r1, r1, #25
 800dc88:	bf48      	it	mi
 800dc8a:	b2ad      	uxthmi	r5, r5
 800dc8c:	2f6f      	cmp	r7, #111	@ 0x6f
 800dc8e:	4853      	ldr	r0, [pc, #332]	@ (800dddc <_printf_i+0x238>)
 800dc90:	6033      	str	r3, [r6, #0]
 800dc92:	bf14      	ite	ne
 800dc94:	230a      	movne	r3, #10
 800dc96:	2308      	moveq	r3, #8
 800dc98:	2100      	movs	r1, #0
 800dc9a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dc9e:	6866      	ldr	r6, [r4, #4]
 800dca0:	60a6      	str	r6, [r4, #8]
 800dca2:	2e00      	cmp	r6, #0
 800dca4:	bfa2      	ittt	ge
 800dca6:	6821      	ldrge	r1, [r4, #0]
 800dca8:	f021 0104 	bicge.w	r1, r1, #4
 800dcac:	6021      	strge	r1, [r4, #0]
 800dcae:	b90d      	cbnz	r5, 800dcb4 <_printf_i+0x110>
 800dcb0:	2e00      	cmp	r6, #0
 800dcb2:	d04b      	beq.n	800dd4c <_printf_i+0x1a8>
 800dcb4:	4616      	mov	r6, r2
 800dcb6:	fbb5 f1f3 	udiv	r1, r5, r3
 800dcba:	fb03 5711 	mls	r7, r3, r1, r5
 800dcbe:	5dc7      	ldrb	r7, [r0, r7]
 800dcc0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dcc4:	462f      	mov	r7, r5
 800dcc6:	42bb      	cmp	r3, r7
 800dcc8:	460d      	mov	r5, r1
 800dcca:	d9f4      	bls.n	800dcb6 <_printf_i+0x112>
 800dccc:	2b08      	cmp	r3, #8
 800dcce:	d10b      	bne.n	800dce8 <_printf_i+0x144>
 800dcd0:	6823      	ldr	r3, [r4, #0]
 800dcd2:	07df      	lsls	r7, r3, #31
 800dcd4:	d508      	bpl.n	800dce8 <_printf_i+0x144>
 800dcd6:	6923      	ldr	r3, [r4, #16]
 800dcd8:	6861      	ldr	r1, [r4, #4]
 800dcda:	4299      	cmp	r1, r3
 800dcdc:	bfde      	ittt	le
 800dcde:	2330      	movle	r3, #48	@ 0x30
 800dce0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dce4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800dce8:	1b92      	subs	r2, r2, r6
 800dcea:	6122      	str	r2, [r4, #16]
 800dcec:	f8cd a000 	str.w	sl, [sp]
 800dcf0:	464b      	mov	r3, r9
 800dcf2:	aa03      	add	r2, sp, #12
 800dcf4:	4621      	mov	r1, r4
 800dcf6:	4640      	mov	r0, r8
 800dcf8:	f7ff fee6 	bl	800dac8 <_printf_common>
 800dcfc:	3001      	adds	r0, #1
 800dcfe:	d14a      	bne.n	800dd96 <_printf_i+0x1f2>
 800dd00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dd04:	b004      	add	sp, #16
 800dd06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd0a:	6823      	ldr	r3, [r4, #0]
 800dd0c:	f043 0320 	orr.w	r3, r3, #32
 800dd10:	6023      	str	r3, [r4, #0]
 800dd12:	4833      	ldr	r0, [pc, #204]	@ (800dde0 <_printf_i+0x23c>)
 800dd14:	2778      	movs	r7, #120	@ 0x78
 800dd16:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dd1a:	6823      	ldr	r3, [r4, #0]
 800dd1c:	6831      	ldr	r1, [r6, #0]
 800dd1e:	061f      	lsls	r7, r3, #24
 800dd20:	f851 5b04 	ldr.w	r5, [r1], #4
 800dd24:	d402      	bmi.n	800dd2c <_printf_i+0x188>
 800dd26:	065f      	lsls	r7, r3, #25
 800dd28:	bf48      	it	mi
 800dd2a:	b2ad      	uxthmi	r5, r5
 800dd2c:	6031      	str	r1, [r6, #0]
 800dd2e:	07d9      	lsls	r1, r3, #31
 800dd30:	bf44      	itt	mi
 800dd32:	f043 0320 	orrmi.w	r3, r3, #32
 800dd36:	6023      	strmi	r3, [r4, #0]
 800dd38:	b11d      	cbz	r5, 800dd42 <_printf_i+0x19e>
 800dd3a:	2310      	movs	r3, #16
 800dd3c:	e7ac      	b.n	800dc98 <_printf_i+0xf4>
 800dd3e:	4827      	ldr	r0, [pc, #156]	@ (800dddc <_printf_i+0x238>)
 800dd40:	e7e9      	b.n	800dd16 <_printf_i+0x172>
 800dd42:	6823      	ldr	r3, [r4, #0]
 800dd44:	f023 0320 	bic.w	r3, r3, #32
 800dd48:	6023      	str	r3, [r4, #0]
 800dd4a:	e7f6      	b.n	800dd3a <_printf_i+0x196>
 800dd4c:	4616      	mov	r6, r2
 800dd4e:	e7bd      	b.n	800dccc <_printf_i+0x128>
 800dd50:	6833      	ldr	r3, [r6, #0]
 800dd52:	6825      	ldr	r5, [r4, #0]
 800dd54:	6961      	ldr	r1, [r4, #20]
 800dd56:	1d18      	adds	r0, r3, #4
 800dd58:	6030      	str	r0, [r6, #0]
 800dd5a:	062e      	lsls	r6, r5, #24
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	d501      	bpl.n	800dd64 <_printf_i+0x1c0>
 800dd60:	6019      	str	r1, [r3, #0]
 800dd62:	e002      	b.n	800dd6a <_printf_i+0x1c6>
 800dd64:	0668      	lsls	r0, r5, #25
 800dd66:	d5fb      	bpl.n	800dd60 <_printf_i+0x1bc>
 800dd68:	8019      	strh	r1, [r3, #0]
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	6123      	str	r3, [r4, #16]
 800dd6e:	4616      	mov	r6, r2
 800dd70:	e7bc      	b.n	800dcec <_printf_i+0x148>
 800dd72:	6833      	ldr	r3, [r6, #0]
 800dd74:	1d1a      	adds	r2, r3, #4
 800dd76:	6032      	str	r2, [r6, #0]
 800dd78:	681e      	ldr	r6, [r3, #0]
 800dd7a:	6862      	ldr	r2, [r4, #4]
 800dd7c:	2100      	movs	r1, #0
 800dd7e:	4630      	mov	r0, r6
 800dd80:	f7f2 fa26 	bl	80001d0 <memchr>
 800dd84:	b108      	cbz	r0, 800dd8a <_printf_i+0x1e6>
 800dd86:	1b80      	subs	r0, r0, r6
 800dd88:	6060      	str	r0, [r4, #4]
 800dd8a:	6863      	ldr	r3, [r4, #4]
 800dd8c:	6123      	str	r3, [r4, #16]
 800dd8e:	2300      	movs	r3, #0
 800dd90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd94:	e7aa      	b.n	800dcec <_printf_i+0x148>
 800dd96:	6923      	ldr	r3, [r4, #16]
 800dd98:	4632      	mov	r2, r6
 800dd9a:	4649      	mov	r1, r9
 800dd9c:	4640      	mov	r0, r8
 800dd9e:	47d0      	blx	sl
 800dda0:	3001      	adds	r0, #1
 800dda2:	d0ad      	beq.n	800dd00 <_printf_i+0x15c>
 800dda4:	6823      	ldr	r3, [r4, #0]
 800dda6:	079b      	lsls	r3, r3, #30
 800dda8:	d413      	bmi.n	800ddd2 <_printf_i+0x22e>
 800ddaa:	68e0      	ldr	r0, [r4, #12]
 800ddac:	9b03      	ldr	r3, [sp, #12]
 800ddae:	4298      	cmp	r0, r3
 800ddb0:	bfb8      	it	lt
 800ddb2:	4618      	movlt	r0, r3
 800ddb4:	e7a6      	b.n	800dd04 <_printf_i+0x160>
 800ddb6:	2301      	movs	r3, #1
 800ddb8:	4632      	mov	r2, r6
 800ddba:	4649      	mov	r1, r9
 800ddbc:	4640      	mov	r0, r8
 800ddbe:	47d0      	blx	sl
 800ddc0:	3001      	adds	r0, #1
 800ddc2:	d09d      	beq.n	800dd00 <_printf_i+0x15c>
 800ddc4:	3501      	adds	r5, #1
 800ddc6:	68e3      	ldr	r3, [r4, #12]
 800ddc8:	9903      	ldr	r1, [sp, #12]
 800ddca:	1a5b      	subs	r3, r3, r1
 800ddcc:	42ab      	cmp	r3, r5
 800ddce:	dcf2      	bgt.n	800ddb6 <_printf_i+0x212>
 800ddd0:	e7eb      	b.n	800ddaa <_printf_i+0x206>
 800ddd2:	2500      	movs	r5, #0
 800ddd4:	f104 0619 	add.w	r6, r4, #25
 800ddd8:	e7f5      	b.n	800ddc6 <_printf_i+0x222>
 800ddda:	bf00      	nop
 800dddc:	08010352 	.word	0x08010352
 800dde0:	08010363 	.word	0x08010363

0800dde4 <siprintf>:
 800dde4:	b40e      	push	{r1, r2, r3}
 800dde6:	b500      	push	{lr}
 800dde8:	b09c      	sub	sp, #112	@ 0x70
 800ddea:	ab1d      	add	r3, sp, #116	@ 0x74
 800ddec:	9002      	str	r0, [sp, #8]
 800ddee:	9006      	str	r0, [sp, #24]
 800ddf0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ddf4:	4809      	ldr	r0, [pc, #36]	@ (800de1c <siprintf+0x38>)
 800ddf6:	9107      	str	r1, [sp, #28]
 800ddf8:	9104      	str	r1, [sp, #16]
 800ddfa:	4909      	ldr	r1, [pc, #36]	@ (800de20 <siprintf+0x3c>)
 800ddfc:	f853 2b04 	ldr.w	r2, [r3], #4
 800de00:	9105      	str	r1, [sp, #20]
 800de02:	6800      	ldr	r0, [r0, #0]
 800de04:	9301      	str	r3, [sp, #4]
 800de06:	a902      	add	r1, sp, #8
 800de08:	f000 ffc2 	bl	800ed90 <_svfiprintf_r>
 800de0c:	9b02      	ldr	r3, [sp, #8]
 800de0e:	2200      	movs	r2, #0
 800de10:	701a      	strb	r2, [r3, #0]
 800de12:	b01c      	add	sp, #112	@ 0x70
 800de14:	f85d eb04 	ldr.w	lr, [sp], #4
 800de18:	b003      	add	sp, #12
 800de1a:	4770      	bx	lr
 800de1c:	20000114 	.word	0x20000114
 800de20:	ffff0208 	.word	0xffff0208

0800de24 <std>:
 800de24:	2300      	movs	r3, #0
 800de26:	b510      	push	{r4, lr}
 800de28:	4604      	mov	r4, r0
 800de2a:	e9c0 3300 	strd	r3, r3, [r0]
 800de2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800de32:	6083      	str	r3, [r0, #8]
 800de34:	8181      	strh	r1, [r0, #12]
 800de36:	6643      	str	r3, [r0, #100]	@ 0x64
 800de38:	81c2      	strh	r2, [r0, #14]
 800de3a:	6183      	str	r3, [r0, #24]
 800de3c:	4619      	mov	r1, r3
 800de3e:	2208      	movs	r2, #8
 800de40:	305c      	adds	r0, #92	@ 0x5c
 800de42:	f000 f8c3 	bl	800dfcc <memset>
 800de46:	4b0d      	ldr	r3, [pc, #52]	@ (800de7c <std+0x58>)
 800de48:	6263      	str	r3, [r4, #36]	@ 0x24
 800de4a:	4b0d      	ldr	r3, [pc, #52]	@ (800de80 <std+0x5c>)
 800de4c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800de4e:	4b0d      	ldr	r3, [pc, #52]	@ (800de84 <std+0x60>)
 800de50:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800de52:	4b0d      	ldr	r3, [pc, #52]	@ (800de88 <std+0x64>)
 800de54:	6323      	str	r3, [r4, #48]	@ 0x30
 800de56:	4b0d      	ldr	r3, [pc, #52]	@ (800de8c <std+0x68>)
 800de58:	6224      	str	r4, [r4, #32]
 800de5a:	429c      	cmp	r4, r3
 800de5c:	d006      	beq.n	800de6c <std+0x48>
 800de5e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800de62:	4294      	cmp	r4, r2
 800de64:	d002      	beq.n	800de6c <std+0x48>
 800de66:	33d0      	adds	r3, #208	@ 0xd0
 800de68:	429c      	cmp	r4, r3
 800de6a:	d105      	bne.n	800de78 <std+0x54>
 800de6c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800de70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de74:	f000 b8e0 	b.w	800e038 <__retarget_lock_init_recursive>
 800de78:	bd10      	pop	{r4, pc}
 800de7a:	bf00      	nop
 800de7c:	0800fbd5 	.word	0x0800fbd5
 800de80:	0800fbf7 	.word	0x0800fbf7
 800de84:	0800fc2f 	.word	0x0800fc2f
 800de88:	0800fc53 	.word	0x0800fc53
 800de8c:	20002264 	.word	0x20002264

0800de90 <stdio_exit_handler>:
 800de90:	4a02      	ldr	r2, [pc, #8]	@ (800de9c <stdio_exit_handler+0xc>)
 800de92:	4903      	ldr	r1, [pc, #12]	@ (800dea0 <stdio_exit_handler+0x10>)
 800de94:	4803      	ldr	r0, [pc, #12]	@ (800dea4 <stdio_exit_handler+0x14>)
 800de96:	f000 b869 	b.w	800df6c <_fwalk_sglue>
 800de9a:	bf00      	nop
 800de9c:	20000108 	.word	0x20000108
 800dea0:	0800f469 	.word	0x0800f469
 800dea4:	20000118 	.word	0x20000118

0800dea8 <cleanup_stdio>:
 800dea8:	6841      	ldr	r1, [r0, #4]
 800deaa:	4b0c      	ldr	r3, [pc, #48]	@ (800dedc <cleanup_stdio+0x34>)
 800deac:	4299      	cmp	r1, r3
 800deae:	b510      	push	{r4, lr}
 800deb0:	4604      	mov	r4, r0
 800deb2:	d001      	beq.n	800deb8 <cleanup_stdio+0x10>
 800deb4:	f001 fad8 	bl	800f468 <_fflush_r>
 800deb8:	68a1      	ldr	r1, [r4, #8]
 800deba:	4b09      	ldr	r3, [pc, #36]	@ (800dee0 <cleanup_stdio+0x38>)
 800debc:	4299      	cmp	r1, r3
 800debe:	d002      	beq.n	800dec6 <cleanup_stdio+0x1e>
 800dec0:	4620      	mov	r0, r4
 800dec2:	f001 fad1 	bl	800f468 <_fflush_r>
 800dec6:	68e1      	ldr	r1, [r4, #12]
 800dec8:	4b06      	ldr	r3, [pc, #24]	@ (800dee4 <cleanup_stdio+0x3c>)
 800deca:	4299      	cmp	r1, r3
 800decc:	d004      	beq.n	800ded8 <cleanup_stdio+0x30>
 800dece:	4620      	mov	r0, r4
 800ded0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ded4:	f001 bac8 	b.w	800f468 <_fflush_r>
 800ded8:	bd10      	pop	{r4, pc}
 800deda:	bf00      	nop
 800dedc:	20002264 	.word	0x20002264
 800dee0:	200022cc 	.word	0x200022cc
 800dee4:	20002334 	.word	0x20002334

0800dee8 <global_stdio_init.part.0>:
 800dee8:	b510      	push	{r4, lr}
 800deea:	4b0b      	ldr	r3, [pc, #44]	@ (800df18 <global_stdio_init.part.0+0x30>)
 800deec:	4c0b      	ldr	r4, [pc, #44]	@ (800df1c <global_stdio_init.part.0+0x34>)
 800deee:	4a0c      	ldr	r2, [pc, #48]	@ (800df20 <global_stdio_init.part.0+0x38>)
 800def0:	601a      	str	r2, [r3, #0]
 800def2:	4620      	mov	r0, r4
 800def4:	2200      	movs	r2, #0
 800def6:	2104      	movs	r1, #4
 800def8:	f7ff ff94 	bl	800de24 <std>
 800defc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800df00:	2201      	movs	r2, #1
 800df02:	2109      	movs	r1, #9
 800df04:	f7ff ff8e 	bl	800de24 <std>
 800df08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800df0c:	2202      	movs	r2, #2
 800df0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df12:	2112      	movs	r1, #18
 800df14:	f7ff bf86 	b.w	800de24 <std>
 800df18:	2000239c 	.word	0x2000239c
 800df1c:	20002264 	.word	0x20002264
 800df20:	0800de91 	.word	0x0800de91

0800df24 <__sfp_lock_acquire>:
 800df24:	4801      	ldr	r0, [pc, #4]	@ (800df2c <__sfp_lock_acquire+0x8>)
 800df26:	f000 b888 	b.w	800e03a <__retarget_lock_acquire_recursive>
 800df2a:	bf00      	nop
 800df2c:	200023a1 	.word	0x200023a1

0800df30 <__sfp_lock_release>:
 800df30:	4801      	ldr	r0, [pc, #4]	@ (800df38 <__sfp_lock_release+0x8>)
 800df32:	f000 b883 	b.w	800e03c <__retarget_lock_release_recursive>
 800df36:	bf00      	nop
 800df38:	200023a1 	.word	0x200023a1

0800df3c <__sinit>:
 800df3c:	b510      	push	{r4, lr}
 800df3e:	4604      	mov	r4, r0
 800df40:	f7ff fff0 	bl	800df24 <__sfp_lock_acquire>
 800df44:	6a23      	ldr	r3, [r4, #32]
 800df46:	b11b      	cbz	r3, 800df50 <__sinit+0x14>
 800df48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df4c:	f7ff bff0 	b.w	800df30 <__sfp_lock_release>
 800df50:	4b04      	ldr	r3, [pc, #16]	@ (800df64 <__sinit+0x28>)
 800df52:	6223      	str	r3, [r4, #32]
 800df54:	4b04      	ldr	r3, [pc, #16]	@ (800df68 <__sinit+0x2c>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d1f5      	bne.n	800df48 <__sinit+0xc>
 800df5c:	f7ff ffc4 	bl	800dee8 <global_stdio_init.part.0>
 800df60:	e7f2      	b.n	800df48 <__sinit+0xc>
 800df62:	bf00      	nop
 800df64:	0800dea9 	.word	0x0800dea9
 800df68:	2000239c 	.word	0x2000239c

0800df6c <_fwalk_sglue>:
 800df6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df70:	4607      	mov	r7, r0
 800df72:	4688      	mov	r8, r1
 800df74:	4614      	mov	r4, r2
 800df76:	2600      	movs	r6, #0
 800df78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800df7c:	f1b9 0901 	subs.w	r9, r9, #1
 800df80:	d505      	bpl.n	800df8e <_fwalk_sglue+0x22>
 800df82:	6824      	ldr	r4, [r4, #0]
 800df84:	2c00      	cmp	r4, #0
 800df86:	d1f7      	bne.n	800df78 <_fwalk_sglue+0xc>
 800df88:	4630      	mov	r0, r6
 800df8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df8e:	89ab      	ldrh	r3, [r5, #12]
 800df90:	2b01      	cmp	r3, #1
 800df92:	d907      	bls.n	800dfa4 <_fwalk_sglue+0x38>
 800df94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df98:	3301      	adds	r3, #1
 800df9a:	d003      	beq.n	800dfa4 <_fwalk_sglue+0x38>
 800df9c:	4629      	mov	r1, r5
 800df9e:	4638      	mov	r0, r7
 800dfa0:	47c0      	blx	r8
 800dfa2:	4306      	orrs	r6, r0
 800dfa4:	3568      	adds	r5, #104	@ 0x68
 800dfa6:	e7e9      	b.n	800df7c <_fwalk_sglue+0x10>

0800dfa8 <iprintf>:
 800dfa8:	b40f      	push	{r0, r1, r2, r3}
 800dfaa:	b507      	push	{r0, r1, r2, lr}
 800dfac:	4906      	ldr	r1, [pc, #24]	@ (800dfc8 <iprintf+0x20>)
 800dfae:	ab04      	add	r3, sp, #16
 800dfb0:	6808      	ldr	r0, [r1, #0]
 800dfb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfb6:	6881      	ldr	r1, [r0, #8]
 800dfb8:	9301      	str	r3, [sp, #4]
 800dfba:	f001 f80f 	bl	800efdc <_vfiprintf_r>
 800dfbe:	b003      	add	sp, #12
 800dfc0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dfc4:	b004      	add	sp, #16
 800dfc6:	4770      	bx	lr
 800dfc8:	20000114 	.word	0x20000114

0800dfcc <memset>:
 800dfcc:	4402      	add	r2, r0
 800dfce:	4603      	mov	r3, r0
 800dfd0:	4293      	cmp	r3, r2
 800dfd2:	d100      	bne.n	800dfd6 <memset+0xa>
 800dfd4:	4770      	bx	lr
 800dfd6:	f803 1b01 	strb.w	r1, [r3], #1
 800dfda:	e7f9      	b.n	800dfd0 <memset+0x4>

0800dfdc <_localeconv_r>:
 800dfdc:	4800      	ldr	r0, [pc, #0]	@ (800dfe0 <_localeconv_r+0x4>)
 800dfde:	4770      	bx	lr
 800dfe0:	20000254 	.word	0x20000254

0800dfe4 <__errno>:
 800dfe4:	4b01      	ldr	r3, [pc, #4]	@ (800dfec <__errno+0x8>)
 800dfe6:	6818      	ldr	r0, [r3, #0]
 800dfe8:	4770      	bx	lr
 800dfea:	bf00      	nop
 800dfec:	20000114 	.word	0x20000114

0800dff0 <__libc_init_array>:
 800dff0:	b570      	push	{r4, r5, r6, lr}
 800dff2:	4d0d      	ldr	r5, [pc, #52]	@ (800e028 <__libc_init_array+0x38>)
 800dff4:	4c0d      	ldr	r4, [pc, #52]	@ (800e02c <__libc_init_array+0x3c>)
 800dff6:	1b64      	subs	r4, r4, r5
 800dff8:	10a4      	asrs	r4, r4, #2
 800dffa:	2600      	movs	r6, #0
 800dffc:	42a6      	cmp	r6, r4
 800dffe:	d109      	bne.n	800e014 <__libc_init_array+0x24>
 800e000:	4d0b      	ldr	r5, [pc, #44]	@ (800e030 <__libc_init_array+0x40>)
 800e002:	4c0c      	ldr	r4, [pc, #48]	@ (800e034 <__libc_init_array+0x44>)
 800e004:	f002 f8ee 	bl	80101e4 <_init>
 800e008:	1b64      	subs	r4, r4, r5
 800e00a:	10a4      	asrs	r4, r4, #2
 800e00c:	2600      	movs	r6, #0
 800e00e:	42a6      	cmp	r6, r4
 800e010:	d105      	bne.n	800e01e <__libc_init_array+0x2e>
 800e012:	bd70      	pop	{r4, r5, r6, pc}
 800e014:	f855 3b04 	ldr.w	r3, [r5], #4
 800e018:	4798      	blx	r3
 800e01a:	3601      	adds	r6, #1
 800e01c:	e7ee      	b.n	800dffc <__libc_init_array+0xc>
 800e01e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e022:	4798      	blx	r3
 800e024:	3601      	adds	r6, #1
 800e026:	e7f2      	b.n	800e00e <__libc_init_array+0x1e>
 800e028:	080106b8 	.word	0x080106b8
 800e02c:	080106b8 	.word	0x080106b8
 800e030:	080106b8 	.word	0x080106b8
 800e034:	080106bc 	.word	0x080106bc

0800e038 <__retarget_lock_init_recursive>:
 800e038:	4770      	bx	lr

0800e03a <__retarget_lock_acquire_recursive>:
 800e03a:	4770      	bx	lr

0800e03c <__retarget_lock_release_recursive>:
 800e03c:	4770      	bx	lr

0800e03e <quorem>:
 800e03e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e042:	6903      	ldr	r3, [r0, #16]
 800e044:	690c      	ldr	r4, [r1, #16]
 800e046:	42a3      	cmp	r3, r4
 800e048:	4607      	mov	r7, r0
 800e04a:	db7e      	blt.n	800e14a <quorem+0x10c>
 800e04c:	3c01      	subs	r4, #1
 800e04e:	f101 0814 	add.w	r8, r1, #20
 800e052:	00a3      	lsls	r3, r4, #2
 800e054:	f100 0514 	add.w	r5, r0, #20
 800e058:	9300      	str	r3, [sp, #0]
 800e05a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e05e:	9301      	str	r3, [sp, #4]
 800e060:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e064:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e068:	3301      	adds	r3, #1
 800e06a:	429a      	cmp	r2, r3
 800e06c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e070:	fbb2 f6f3 	udiv	r6, r2, r3
 800e074:	d32e      	bcc.n	800e0d4 <quorem+0x96>
 800e076:	f04f 0a00 	mov.w	sl, #0
 800e07a:	46c4      	mov	ip, r8
 800e07c:	46ae      	mov	lr, r5
 800e07e:	46d3      	mov	fp, sl
 800e080:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e084:	b298      	uxth	r0, r3
 800e086:	fb06 a000 	mla	r0, r6, r0, sl
 800e08a:	0c02      	lsrs	r2, r0, #16
 800e08c:	0c1b      	lsrs	r3, r3, #16
 800e08e:	fb06 2303 	mla	r3, r6, r3, r2
 800e092:	f8de 2000 	ldr.w	r2, [lr]
 800e096:	b280      	uxth	r0, r0
 800e098:	b292      	uxth	r2, r2
 800e09a:	1a12      	subs	r2, r2, r0
 800e09c:	445a      	add	r2, fp
 800e09e:	f8de 0000 	ldr.w	r0, [lr]
 800e0a2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e0a6:	b29b      	uxth	r3, r3
 800e0a8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e0ac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e0b0:	b292      	uxth	r2, r2
 800e0b2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e0b6:	45e1      	cmp	r9, ip
 800e0b8:	f84e 2b04 	str.w	r2, [lr], #4
 800e0bc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e0c0:	d2de      	bcs.n	800e080 <quorem+0x42>
 800e0c2:	9b00      	ldr	r3, [sp, #0]
 800e0c4:	58eb      	ldr	r3, [r5, r3]
 800e0c6:	b92b      	cbnz	r3, 800e0d4 <quorem+0x96>
 800e0c8:	9b01      	ldr	r3, [sp, #4]
 800e0ca:	3b04      	subs	r3, #4
 800e0cc:	429d      	cmp	r5, r3
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	d32f      	bcc.n	800e132 <quorem+0xf4>
 800e0d2:	613c      	str	r4, [r7, #16]
 800e0d4:	4638      	mov	r0, r7
 800e0d6:	f001 fc75 	bl	800f9c4 <__mcmp>
 800e0da:	2800      	cmp	r0, #0
 800e0dc:	db25      	blt.n	800e12a <quorem+0xec>
 800e0de:	4629      	mov	r1, r5
 800e0e0:	2000      	movs	r0, #0
 800e0e2:	f858 2b04 	ldr.w	r2, [r8], #4
 800e0e6:	f8d1 c000 	ldr.w	ip, [r1]
 800e0ea:	fa1f fe82 	uxth.w	lr, r2
 800e0ee:	fa1f f38c 	uxth.w	r3, ip
 800e0f2:	eba3 030e 	sub.w	r3, r3, lr
 800e0f6:	4403      	add	r3, r0
 800e0f8:	0c12      	lsrs	r2, r2, #16
 800e0fa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e0fe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e102:	b29b      	uxth	r3, r3
 800e104:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e108:	45c1      	cmp	r9, r8
 800e10a:	f841 3b04 	str.w	r3, [r1], #4
 800e10e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e112:	d2e6      	bcs.n	800e0e2 <quorem+0xa4>
 800e114:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e118:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e11c:	b922      	cbnz	r2, 800e128 <quorem+0xea>
 800e11e:	3b04      	subs	r3, #4
 800e120:	429d      	cmp	r5, r3
 800e122:	461a      	mov	r2, r3
 800e124:	d30b      	bcc.n	800e13e <quorem+0x100>
 800e126:	613c      	str	r4, [r7, #16]
 800e128:	3601      	adds	r6, #1
 800e12a:	4630      	mov	r0, r6
 800e12c:	b003      	add	sp, #12
 800e12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e132:	6812      	ldr	r2, [r2, #0]
 800e134:	3b04      	subs	r3, #4
 800e136:	2a00      	cmp	r2, #0
 800e138:	d1cb      	bne.n	800e0d2 <quorem+0x94>
 800e13a:	3c01      	subs	r4, #1
 800e13c:	e7c6      	b.n	800e0cc <quorem+0x8e>
 800e13e:	6812      	ldr	r2, [r2, #0]
 800e140:	3b04      	subs	r3, #4
 800e142:	2a00      	cmp	r2, #0
 800e144:	d1ef      	bne.n	800e126 <quorem+0xe8>
 800e146:	3c01      	subs	r4, #1
 800e148:	e7ea      	b.n	800e120 <quorem+0xe2>
 800e14a:	2000      	movs	r0, #0
 800e14c:	e7ee      	b.n	800e12c <quorem+0xee>
	...

0800e150 <_dtoa_r>:
 800e150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e154:	69c7      	ldr	r7, [r0, #28]
 800e156:	b099      	sub	sp, #100	@ 0x64
 800e158:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e15c:	ec55 4b10 	vmov	r4, r5, d0
 800e160:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e162:	9109      	str	r1, [sp, #36]	@ 0x24
 800e164:	4683      	mov	fp, r0
 800e166:	920e      	str	r2, [sp, #56]	@ 0x38
 800e168:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e16a:	b97f      	cbnz	r7, 800e18c <_dtoa_r+0x3c>
 800e16c:	2010      	movs	r0, #16
 800e16e:	f001 f84d 	bl	800f20c <malloc>
 800e172:	4602      	mov	r2, r0
 800e174:	f8cb 001c 	str.w	r0, [fp, #28]
 800e178:	b920      	cbnz	r0, 800e184 <_dtoa_r+0x34>
 800e17a:	4ba7      	ldr	r3, [pc, #668]	@ (800e418 <_dtoa_r+0x2c8>)
 800e17c:	21ef      	movs	r1, #239	@ 0xef
 800e17e:	48a7      	ldr	r0, [pc, #668]	@ (800e41c <_dtoa_r+0x2cc>)
 800e180:	f001 ff30 	bl	800ffe4 <__assert_func>
 800e184:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e188:	6007      	str	r7, [r0, #0]
 800e18a:	60c7      	str	r7, [r0, #12]
 800e18c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e190:	6819      	ldr	r1, [r3, #0]
 800e192:	b159      	cbz	r1, 800e1ac <_dtoa_r+0x5c>
 800e194:	685a      	ldr	r2, [r3, #4]
 800e196:	604a      	str	r2, [r1, #4]
 800e198:	2301      	movs	r3, #1
 800e19a:	4093      	lsls	r3, r2
 800e19c:	608b      	str	r3, [r1, #8]
 800e19e:	4658      	mov	r0, fp
 800e1a0:	f001 f9d6 	bl	800f550 <_Bfree>
 800e1a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	601a      	str	r2, [r3, #0]
 800e1ac:	1e2b      	subs	r3, r5, #0
 800e1ae:	bfb9      	ittee	lt
 800e1b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e1b4:	9303      	strlt	r3, [sp, #12]
 800e1b6:	2300      	movge	r3, #0
 800e1b8:	6033      	strge	r3, [r6, #0]
 800e1ba:	9f03      	ldr	r7, [sp, #12]
 800e1bc:	4b98      	ldr	r3, [pc, #608]	@ (800e420 <_dtoa_r+0x2d0>)
 800e1be:	bfbc      	itt	lt
 800e1c0:	2201      	movlt	r2, #1
 800e1c2:	6032      	strlt	r2, [r6, #0]
 800e1c4:	43bb      	bics	r3, r7
 800e1c6:	d112      	bne.n	800e1ee <_dtoa_r+0x9e>
 800e1c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e1ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e1ce:	6013      	str	r3, [r2, #0]
 800e1d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e1d4:	4323      	orrs	r3, r4
 800e1d6:	f000 854d 	beq.w	800ec74 <_dtoa_r+0xb24>
 800e1da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e1dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e434 <_dtoa_r+0x2e4>
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	f000 854f 	beq.w	800ec84 <_dtoa_r+0xb34>
 800e1e6:	f10a 0303 	add.w	r3, sl, #3
 800e1ea:	f000 bd49 	b.w	800ec80 <_dtoa_r+0xb30>
 800e1ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	ec51 0b17 	vmov	r0, r1, d7
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e1fe:	f7f2 fc63 	bl	8000ac8 <__aeabi_dcmpeq>
 800e202:	4680      	mov	r8, r0
 800e204:	b158      	cbz	r0, 800e21e <_dtoa_r+0xce>
 800e206:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e208:	2301      	movs	r3, #1
 800e20a:	6013      	str	r3, [r2, #0]
 800e20c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e20e:	b113      	cbz	r3, 800e216 <_dtoa_r+0xc6>
 800e210:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e212:	4b84      	ldr	r3, [pc, #528]	@ (800e424 <_dtoa_r+0x2d4>)
 800e214:	6013      	str	r3, [r2, #0]
 800e216:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e438 <_dtoa_r+0x2e8>
 800e21a:	f000 bd33 	b.w	800ec84 <_dtoa_r+0xb34>
 800e21e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e222:	aa16      	add	r2, sp, #88	@ 0x58
 800e224:	a917      	add	r1, sp, #92	@ 0x5c
 800e226:	4658      	mov	r0, fp
 800e228:	f001 fc7c 	bl	800fb24 <__d2b>
 800e22c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e230:	4681      	mov	r9, r0
 800e232:	2e00      	cmp	r6, #0
 800e234:	d077      	beq.n	800e326 <_dtoa_r+0x1d6>
 800e236:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e238:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e23c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e240:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e244:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e248:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e24c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e250:	4619      	mov	r1, r3
 800e252:	2200      	movs	r2, #0
 800e254:	4b74      	ldr	r3, [pc, #464]	@ (800e428 <_dtoa_r+0x2d8>)
 800e256:	f7f2 f817 	bl	8000288 <__aeabi_dsub>
 800e25a:	a369      	add	r3, pc, #420	@ (adr r3, 800e400 <_dtoa_r+0x2b0>)
 800e25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e260:	f7f2 f9ca 	bl	80005f8 <__aeabi_dmul>
 800e264:	a368      	add	r3, pc, #416	@ (adr r3, 800e408 <_dtoa_r+0x2b8>)
 800e266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e26a:	f7f2 f80f 	bl	800028c <__adddf3>
 800e26e:	4604      	mov	r4, r0
 800e270:	4630      	mov	r0, r6
 800e272:	460d      	mov	r5, r1
 800e274:	f7f2 f956 	bl	8000524 <__aeabi_i2d>
 800e278:	a365      	add	r3, pc, #404	@ (adr r3, 800e410 <_dtoa_r+0x2c0>)
 800e27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27e:	f7f2 f9bb 	bl	80005f8 <__aeabi_dmul>
 800e282:	4602      	mov	r2, r0
 800e284:	460b      	mov	r3, r1
 800e286:	4620      	mov	r0, r4
 800e288:	4629      	mov	r1, r5
 800e28a:	f7f1 ffff 	bl	800028c <__adddf3>
 800e28e:	4604      	mov	r4, r0
 800e290:	460d      	mov	r5, r1
 800e292:	f7f2 fc61 	bl	8000b58 <__aeabi_d2iz>
 800e296:	2200      	movs	r2, #0
 800e298:	4607      	mov	r7, r0
 800e29a:	2300      	movs	r3, #0
 800e29c:	4620      	mov	r0, r4
 800e29e:	4629      	mov	r1, r5
 800e2a0:	f7f2 fc1c 	bl	8000adc <__aeabi_dcmplt>
 800e2a4:	b140      	cbz	r0, 800e2b8 <_dtoa_r+0x168>
 800e2a6:	4638      	mov	r0, r7
 800e2a8:	f7f2 f93c 	bl	8000524 <__aeabi_i2d>
 800e2ac:	4622      	mov	r2, r4
 800e2ae:	462b      	mov	r3, r5
 800e2b0:	f7f2 fc0a 	bl	8000ac8 <__aeabi_dcmpeq>
 800e2b4:	b900      	cbnz	r0, 800e2b8 <_dtoa_r+0x168>
 800e2b6:	3f01      	subs	r7, #1
 800e2b8:	2f16      	cmp	r7, #22
 800e2ba:	d851      	bhi.n	800e360 <_dtoa_r+0x210>
 800e2bc:	4b5b      	ldr	r3, [pc, #364]	@ (800e42c <_dtoa_r+0x2dc>)
 800e2be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e2ca:	f7f2 fc07 	bl	8000adc <__aeabi_dcmplt>
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	d048      	beq.n	800e364 <_dtoa_r+0x214>
 800e2d2:	3f01      	subs	r7, #1
 800e2d4:	2300      	movs	r3, #0
 800e2d6:	9312      	str	r3, [sp, #72]	@ 0x48
 800e2d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e2da:	1b9b      	subs	r3, r3, r6
 800e2dc:	1e5a      	subs	r2, r3, #1
 800e2de:	bf44      	itt	mi
 800e2e0:	f1c3 0801 	rsbmi	r8, r3, #1
 800e2e4:	2300      	movmi	r3, #0
 800e2e6:	9208      	str	r2, [sp, #32]
 800e2e8:	bf54      	ite	pl
 800e2ea:	f04f 0800 	movpl.w	r8, #0
 800e2ee:	9308      	strmi	r3, [sp, #32]
 800e2f0:	2f00      	cmp	r7, #0
 800e2f2:	db39      	blt.n	800e368 <_dtoa_r+0x218>
 800e2f4:	9b08      	ldr	r3, [sp, #32]
 800e2f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e2f8:	443b      	add	r3, r7
 800e2fa:	9308      	str	r3, [sp, #32]
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800e300:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e302:	2b09      	cmp	r3, #9
 800e304:	d864      	bhi.n	800e3d0 <_dtoa_r+0x280>
 800e306:	2b05      	cmp	r3, #5
 800e308:	bfc4      	itt	gt
 800e30a:	3b04      	subgt	r3, #4
 800e30c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e30e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e310:	f1a3 0302 	sub.w	r3, r3, #2
 800e314:	bfcc      	ite	gt
 800e316:	2400      	movgt	r4, #0
 800e318:	2401      	movle	r4, #1
 800e31a:	2b03      	cmp	r3, #3
 800e31c:	d863      	bhi.n	800e3e6 <_dtoa_r+0x296>
 800e31e:	e8df f003 	tbb	[pc, r3]
 800e322:	372a      	.short	0x372a
 800e324:	5535      	.short	0x5535
 800e326:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e32a:	441e      	add	r6, r3
 800e32c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e330:	2b20      	cmp	r3, #32
 800e332:	bfc1      	itttt	gt
 800e334:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e338:	409f      	lslgt	r7, r3
 800e33a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e33e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e342:	bfd6      	itet	le
 800e344:	f1c3 0320 	rsble	r3, r3, #32
 800e348:	ea47 0003 	orrgt.w	r0, r7, r3
 800e34c:	fa04 f003 	lslle.w	r0, r4, r3
 800e350:	f7f2 f8d8 	bl	8000504 <__aeabi_ui2d>
 800e354:	2201      	movs	r2, #1
 800e356:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e35a:	3e01      	subs	r6, #1
 800e35c:	9214      	str	r2, [sp, #80]	@ 0x50
 800e35e:	e777      	b.n	800e250 <_dtoa_r+0x100>
 800e360:	2301      	movs	r3, #1
 800e362:	e7b8      	b.n	800e2d6 <_dtoa_r+0x186>
 800e364:	9012      	str	r0, [sp, #72]	@ 0x48
 800e366:	e7b7      	b.n	800e2d8 <_dtoa_r+0x188>
 800e368:	427b      	negs	r3, r7
 800e36a:	930a      	str	r3, [sp, #40]	@ 0x28
 800e36c:	2300      	movs	r3, #0
 800e36e:	eba8 0807 	sub.w	r8, r8, r7
 800e372:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e374:	e7c4      	b.n	800e300 <_dtoa_r+0x1b0>
 800e376:	2300      	movs	r3, #0
 800e378:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e37a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	dc35      	bgt.n	800e3ec <_dtoa_r+0x29c>
 800e380:	2301      	movs	r3, #1
 800e382:	9300      	str	r3, [sp, #0]
 800e384:	9307      	str	r3, [sp, #28]
 800e386:	461a      	mov	r2, r3
 800e388:	920e      	str	r2, [sp, #56]	@ 0x38
 800e38a:	e00b      	b.n	800e3a4 <_dtoa_r+0x254>
 800e38c:	2301      	movs	r3, #1
 800e38e:	e7f3      	b.n	800e378 <_dtoa_r+0x228>
 800e390:	2300      	movs	r3, #0
 800e392:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e394:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e396:	18fb      	adds	r3, r7, r3
 800e398:	9300      	str	r3, [sp, #0]
 800e39a:	3301      	adds	r3, #1
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	9307      	str	r3, [sp, #28]
 800e3a0:	bfb8      	it	lt
 800e3a2:	2301      	movlt	r3, #1
 800e3a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e3a8:	2100      	movs	r1, #0
 800e3aa:	2204      	movs	r2, #4
 800e3ac:	f102 0514 	add.w	r5, r2, #20
 800e3b0:	429d      	cmp	r5, r3
 800e3b2:	d91f      	bls.n	800e3f4 <_dtoa_r+0x2a4>
 800e3b4:	6041      	str	r1, [r0, #4]
 800e3b6:	4658      	mov	r0, fp
 800e3b8:	f001 f88a 	bl	800f4d0 <_Balloc>
 800e3bc:	4682      	mov	sl, r0
 800e3be:	2800      	cmp	r0, #0
 800e3c0:	d13c      	bne.n	800e43c <_dtoa_r+0x2ec>
 800e3c2:	4b1b      	ldr	r3, [pc, #108]	@ (800e430 <_dtoa_r+0x2e0>)
 800e3c4:	4602      	mov	r2, r0
 800e3c6:	f240 11af 	movw	r1, #431	@ 0x1af
 800e3ca:	e6d8      	b.n	800e17e <_dtoa_r+0x2e>
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	e7e0      	b.n	800e392 <_dtoa_r+0x242>
 800e3d0:	2401      	movs	r4, #1
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e3d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e3dc:	9300      	str	r3, [sp, #0]
 800e3de:	9307      	str	r3, [sp, #28]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	2312      	movs	r3, #18
 800e3e4:	e7d0      	b.n	800e388 <_dtoa_r+0x238>
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e3ea:	e7f5      	b.n	800e3d8 <_dtoa_r+0x288>
 800e3ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3ee:	9300      	str	r3, [sp, #0]
 800e3f0:	9307      	str	r3, [sp, #28]
 800e3f2:	e7d7      	b.n	800e3a4 <_dtoa_r+0x254>
 800e3f4:	3101      	adds	r1, #1
 800e3f6:	0052      	lsls	r2, r2, #1
 800e3f8:	e7d8      	b.n	800e3ac <_dtoa_r+0x25c>
 800e3fa:	bf00      	nop
 800e3fc:	f3af 8000 	nop.w
 800e400:	636f4361 	.word	0x636f4361
 800e404:	3fd287a7 	.word	0x3fd287a7
 800e408:	8b60c8b3 	.word	0x8b60c8b3
 800e40c:	3fc68a28 	.word	0x3fc68a28
 800e410:	509f79fb 	.word	0x509f79fb
 800e414:	3fd34413 	.word	0x3fd34413
 800e418:	08010381 	.word	0x08010381
 800e41c:	08010398 	.word	0x08010398
 800e420:	7ff00000 	.word	0x7ff00000
 800e424:	08010351 	.word	0x08010351
 800e428:	3ff80000 	.word	0x3ff80000
 800e42c:	080104a0 	.word	0x080104a0
 800e430:	080103f0 	.word	0x080103f0
 800e434:	0801037d 	.word	0x0801037d
 800e438:	08010350 	.word	0x08010350
 800e43c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e440:	6018      	str	r0, [r3, #0]
 800e442:	9b07      	ldr	r3, [sp, #28]
 800e444:	2b0e      	cmp	r3, #14
 800e446:	f200 80a4 	bhi.w	800e592 <_dtoa_r+0x442>
 800e44a:	2c00      	cmp	r4, #0
 800e44c:	f000 80a1 	beq.w	800e592 <_dtoa_r+0x442>
 800e450:	2f00      	cmp	r7, #0
 800e452:	dd33      	ble.n	800e4bc <_dtoa_r+0x36c>
 800e454:	4bad      	ldr	r3, [pc, #692]	@ (800e70c <_dtoa_r+0x5bc>)
 800e456:	f007 020f 	and.w	r2, r7, #15
 800e45a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e45e:	ed93 7b00 	vldr	d7, [r3]
 800e462:	05f8      	lsls	r0, r7, #23
 800e464:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e468:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e46c:	d516      	bpl.n	800e49c <_dtoa_r+0x34c>
 800e46e:	4ba8      	ldr	r3, [pc, #672]	@ (800e710 <_dtoa_r+0x5c0>)
 800e470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e474:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e478:	f7f2 f9e8 	bl	800084c <__aeabi_ddiv>
 800e47c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e480:	f004 040f 	and.w	r4, r4, #15
 800e484:	2603      	movs	r6, #3
 800e486:	4da2      	ldr	r5, [pc, #648]	@ (800e710 <_dtoa_r+0x5c0>)
 800e488:	b954      	cbnz	r4, 800e4a0 <_dtoa_r+0x350>
 800e48a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e48e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e492:	f7f2 f9db 	bl	800084c <__aeabi_ddiv>
 800e496:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e49a:	e028      	b.n	800e4ee <_dtoa_r+0x39e>
 800e49c:	2602      	movs	r6, #2
 800e49e:	e7f2      	b.n	800e486 <_dtoa_r+0x336>
 800e4a0:	07e1      	lsls	r1, r4, #31
 800e4a2:	d508      	bpl.n	800e4b6 <_dtoa_r+0x366>
 800e4a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e4a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e4ac:	f7f2 f8a4 	bl	80005f8 <__aeabi_dmul>
 800e4b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e4b4:	3601      	adds	r6, #1
 800e4b6:	1064      	asrs	r4, r4, #1
 800e4b8:	3508      	adds	r5, #8
 800e4ba:	e7e5      	b.n	800e488 <_dtoa_r+0x338>
 800e4bc:	f000 80d2 	beq.w	800e664 <_dtoa_r+0x514>
 800e4c0:	427c      	negs	r4, r7
 800e4c2:	4b92      	ldr	r3, [pc, #584]	@ (800e70c <_dtoa_r+0x5bc>)
 800e4c4:	4d92      	ldr	r5, [pc, #584]	@ (800e710 <_dtoa_r+0x5c0>)
 800e4c6:	f004 020f 	and.w	r2, r4, #15
 800e4ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e4d6:	f7f2 f88f 	bl	80005f8 <__aeabi_dmul>
 800e4da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4de:	1124      	asrs	r4, r4, #4
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	2602      	movs	r6, #2
 800e4e4:	2c00      	cmp	r4, #0
 800e4e6:	f040 80b2 	bne.w	800e64e <_dtoa_r+0x4fe>
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d1d3      	bne.n	800e496 <_dtoa_r+0x346>
 800e4ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e4f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	f000 80b7 	beq.w	800e668 <_dtoa_r+0x518>
 800e4fa:	4b86      	ldr	r3, [pc, #536]	@ (800e714 <_dtoa_r+0x5c4>)
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	4620      	mov	r0, r4
 800e500:	4629      	mov	r1, r5
 800e502:	f7f2 faeb 	bl	8000adc <__aeabi_dcmplt>
 800e506:	2800      	cmp	r0, #0
 800e508:	f000 80ae 	beq.w	800e668 <_dtoa_r+0x518>
 800e50c:	9b07      	ldr	r3, [sp, #28]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	f000 80aa 	beq.w	800e668 <_dtoa_r+0x518>
 800e514:	9b00      	ldr	r3, [sp, #0]
 800e516:	2b00      	cmp	r3, #0
 800e518:	dd37      	ble.n	800e58a <_dtoa_r+0x43a>
 800e51a:	1e7b      	subs	r3, r7, #1
 800e51c:	9304      	str	r3, [sp, #16]
 800e51e:	4620      	mov	r0, r4
 800e520:	4b7d      	ldr	r3, [pc, #500]	@ (800e718 <_dtoa_r+0x5c8>)
 800e522:	2200      	movs	r2, #0
 800e524:	4629      	mov	r1, r5
 800e526:	f7f2 f867 	bl	80005f8 <__aeabi_dmul>
 800e52a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e52e:	9c00      	ldr	r4, [sp, #0]
 800e530:	3601      	adds	r6, #1
 800e532:	4630      	mov	r0, r6
 800e534:	f7f1 fff6 	bl	8000524 <__aeabi_i2d>
 800e538:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e53c:	f7f2 f85c 	bl	80005f8 <__aeabi_dmul>
 800e540:	4b76      	ldr	r3, [pc, #472]	@ (800e71c <_dtoa_r+0x5cc>)
 800e542:	2200      	movs	r2, #0
 800e544:	f7f1 fea2 	bl	800028c <__adddf3>
 800e548:	4605      	mov	r5, r0
 800e54a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e54e:	2c00      	cmp	r4, #0
 800e550:	f040 808d 	bne.w	800e66e <_dtoa_r+0x51e>
 800e554:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e558:	4b71      	ldr	r3, [pc, #452]	@ (800e720 <_dtoa_r+0x5d0>)
 800e55a:	2200      	movs	r2, #0
 800e55c:	f7f1 fe94 	bl	8000288 <__aeabi_dsub>
 800e560:	4602      	mov	r2, r0
 800e562:	460b      	mov	r3, r1
 800e564:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e568:	462a      	mov	r2, r5
 800e56a:	4633      	mov	r3, r6
 800e56c:	f7f2 fad4 	bl	8000b18 <__aeabi_dcmpgt>
 800e570:	2800      	cmp	r0, #0
 800e572:	f040 828b 	bne.w	800ea8c <_dtoa_r+0x93c>
 800e576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e57a:	462a      	mov	r2, r5
 800e57c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e580:	f7f2 faac 	bl	8000adc <__aeabi_dcmplt>
 800e584:	2800      	cmp	r0, #0
 800e586:	f040 8128 	bne.w	800e7da <_dtoa_r+0x68a>
 800e58a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e58e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e592:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e594:	2b00      	cmp	r3, #0
 800e596:	f2c0 815a 	blt.w	800e84e <_dtoa_r+0x6fe>
 800e59a:	2f0e      	cmp	r7, #14
 800e59c:	f300 8157 	bgt.w	800e84e <_dtoa_r+0x6fe>
 800e5a0:	4b5a      	ldr	r3, [pc, #360]	@ (800e70c <_dtoa_r+0x5bc>)
 800e5a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e5a6:	ed93 7b00 	vldr	d7, [r3]
 800e5aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e5ac:	2b00      	cmp	r3, #0
 800e5ae:	ed8d 7b00 	vstr	d7, [sp]
 800e5b2:	da03      	bge.n	800e5bc <_dtoa_r+0x46c>
 800e5b4:	9b07      	ldr	r3, [sp, #28]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	f340 8101 	ble.w	800e7be <_dtoa_r+0x66e>
 800e5bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e5c0:	4656      	mov	r6, sl
 800e5c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e5c6:	4620      	mov	r0, r4
 800e5c8:	4629      	mov	r1, r5
 800e5ca:	f7f2 f93f 	bl	800084c <__aeabi_ddiv>
 800e5ce:	f7f2 fac3 	bl	8000b58 <__aeabi_d2iz>
 800e5d2:	4680      	mov	r8, r0
 800e5d4:	f7f1 ffa6 	bl	8000524 <__aeabi_i2d>
 800e5d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e5dc:	f7f2 f80c 	bl	80005f8 <__aeabi_dmul>
 800e5e0:	4602      	mov	r2, r0
 800e5e2:	460b      	mov	r3, r1
 800e5e4:	4620      	mov	r0, r4
 800e5e6:	4629      	mov	r1, r5
 800e5e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e5ec:	f7f1 fe4c 	bl	8000288 <__aeabi_dsub>
 800e5f0:	f806 4b01 	strb.w	r4, [r6], #1
 800e5f4:	9d07      	ldr	r5, [sp, #28]
 800e5f6:	eba6 040a 	sub.w	r4, r6, sl
 800e5fa:	42a5      	cmp	r5, r4
 800e5fc:	4602      	mov	r2, r0
 800e5fe:	460b      	mov	r3, r1
 800e600:	f040 8117 	bne.w	800e832 <_dtoa_r+0x6e2>
 800e604:	f7f1 fe42 	bl	800028c <__adddf3>
 800e608:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e60c:	4604      	mov	r4, r0
 800e60e:	460d      	mov	r5, r1
 800e610:	f7f2 fa82 	bl	8000b18 <__aeabi_dcmpgt>
 800e614:	2800      	cmp	r0, #0
 800e616:	f040 80f9 	bne.w	800e80c <_dtoa_r+0x6bc>
 800e61a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e61e:	4620      	mov	r0, r4
 800e620:	4629      	mov	r1, r5
 800e622:	f7f2 fa51 	bl	8000ac8 <__aeabi_dcmpeq>
 800e626:	b118      	cbz	r0, 800e630 <_dtoa_r+0x4e0>
 800e628:	f018 0f01 	tst.w	r8, #1
 800e62c:	f040 80ee 	bne.w	800e80c <_dtoa_r+0x6bc>
 800e630:	4649      	mov	r1, r9
 800e632:	4658      	mov	r0, fp
 800e634:	f000 ff8c 	bl	800f550 <_Bfree>
 800e638:	2300      	movs	r3, #0
 800e63a:	7033      	strb	r3, [r6, #0]
 800e63c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e63e:	3701      	adds	r7, #1
 800e640:	601f      	str	r7, [r3, #0]
 800e642:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e644:	2b00      	cmp	r3, #0
 800e646:	f000 831d 	beq.w	800ec84 <_dtoa_r+0xb34>
 800e64a:	601e      	str	r6, [r3, #0]
 800e64c:	e31a      	b.n	800ec84 <_dtoa_r+0xb34>
 800e64e:	07e2      	lsls	r2, r4, #31
 800e650:	d505      	bpl.n	800e65e <_dtoa_r+0x50e>
 800e652:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e656:	f7f1 ffcf 	bl	80005f8 <__aeabi_dmul>
 800e65a:	3601      	adds	r6, #1
 800e65c:	2301      	movs	r3, #1
 800e65e:	1064      	asrs	r4, r4, #1
 800e660:	3508      	adds	r5, #8
 800e662:	e73f      	b.n	800e4e4 <_dtoa_r+0x394>
 800e664:	2602      	movs	r6, #2
 800e666:	e742      	b.n	800e4ee <_dtoa_r+0x39e>
 800e668:	9c07      	ldr	r4, [sp, #28]
 800e66a:	9704      	str	r7, [sp, #16]
 800e66c:	e761      	b.n	800e532 <_dtoa_r+0x3e2>
 800e66e:	4b27      	ldr	r3, [pc, #156]	@ (800e70c <_dtoa_r+0x5bc>)
 800e670:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e672:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e676:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e67a:	4454      	add	r4, sl
 800e67c:	2900      	cmp	r1, #0
 800e67e:	d053      	beq.n	800e728 <_dtoa_r+0x5d8>
 800e680:	4928      	ldr	r1, [pc, #160]	@ (800e724 <_dtoa_r+0x5d4>)
 800e682:	2000      	movs	r0, #0
 800e684:	f7f2 f8e2 	bl	800084c <__aeabi_ddiv>
 800e688:	4633      	mov	r3, r6
 800e68a:	462a      	mov	r2, r5
 800e68c:	f7f1 fdfc 	bl	8000288 <__aeabi_dsub>
 800e690:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e694:	4656      	mov	r6, sl
 800e696:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e69a:	f7f2 fa5d 	bl	8000b58 <__aeabi_d2iz>
 800e69e:	4605      	mov	r5, r0
 800e6a0:	f7f1 ff40 	bl	8000524 <__aeabi_i2d>
 800e6a4:	4602      	mov	r2, r0
 800e6a6:	460b      	mov	r3, r1
 800e6a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e6ac:	f7f1 fdec 	bl	8000288 <__aeabi_dsub>
 800e6b0:	3530      	adds	r5, #48	@ 0x30
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	460b      	mov	r3, r1
 800e6b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e6ba:	f806 5b01 	strb.w	r5, [r6], #1
 800e6be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e6c2:	f7f2 fa0b 	bl	8000adc <__aeabi_dcmplt>
 800e6c6:	2800      	cmp	r0, #0
 800e6c8:	d171      	bne.n	800e7ae <_dtoa_r+0x65e>
 800e6ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e6ce:	4911      	ldr	r1, [pc, #68]	@ (800e714 <_dtoa_r+0x5c4>)
 800e6d0:	2000      	movs	r0, #0
 800e6d2:	f7f1 fdd9 	bl	8000288 <__aeabi_dsub>
 800e6d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e6da:	f7f2 f9ff 	bl	8000adc <__aeabi_dcmplt>
 800e6de:	2800      	cmp	r0, #0
 800e6e0:	f040 8095 	bne.w	800e80e <_dtoa_r+0x6be>
 800e6e4:	42a6      	cmp	r6, r4
 800e6e6:	f43f af50 	beq.w	800e58a <_dtoa_r+0x43a>
 800e6ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e6ee:	4b0a      	ldr	r3, [pc, #40]	@ (800e718 <_dtoa_r+0x5c8>)
 800e6f0:	2200      	movs	r2, #0
 800e6f2:	f7f1 ff81 	bl	80005f8 <__aeabi_dmul>
 800e6f6:	4b08      	ldr	r3, [pc, #32]	@ (800e718 <_dtoa_r+0x5c8>)
 800e6f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e702:	f7f1 ff79 	bl	80005f8 <__aeabi_dmul>
 800e706:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e70a:	e7c4      	b.n	800e696 <_dtoa_r+0x546>
 800e70c:	080104a0 	.word	0x080104a0
 800e710:	08010478 	.word	0x08010478
 800e714:	3ff00000 	.word	0x3ff00000
 800e718:	40240000 	.word	0x40240000
 800e71c:	401c0000 	.word	0x401c0000
 800e720:	40140000 	.word	0x40140000
 800e724:	3fe00000 	.word	0x3fe00000
 800e728:	4631      	mov	r1, r6
 800e72a:	4628      	mov	r0, r5
 800e72c:	f7f1 ff64 	bl	80005f8 <__aeabi_dmul>
 800e730:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e734:	9415      	str	r4, [sp, #84]	@ 0x54
 800e736:	4656      	mov	r6, sl
 800e738:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e73c:	f7f2 fa0c 	bl	8000b58 <__aeabi_d2iz>
 800e740:	4605      	mov	r5, r0
 800e742:	f7f1 feef 	bl	8000524 <__aeabi_i2d>
 800e746:	4602      	mov	r2, r0
 800e748:	460b      	mov	r3, r1
 800e74a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e74e:	f7f1 fd9b 	bl	8000288 <__aeabi_dsub>
 800e752:	3530      	adds	r5, #48	@ 0x30
 800e754:	f806 5b01 	strb.w	r5, [r6], #1
 800e758:	4602      	mov	r2, r0
 800e75a:	460b      	mov	r3, r1
 800e75c:	42a6      	cmp	r6, r4
 800e75e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e762:	f04f 0200 	mov.w	r2, #0
 800e766:	d124      	bne.n	800e7b2 <_dtoa_r+0x662>
 800e768:	4bac      	ldr	r3, [pc, #688]	@ (800ea1c <_dtoa_r+0x8cc>)
 800e76a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e76e:	f7f1 fd8d 	bl	800028c <__adddf3>
 800e772:	4602      	mov	r2, r0
 800e774:	460b      	mov	r3, r1
 800e776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e77a:	f7f2 f9cd 	bl	8000b18 <__aeabi_dcmpgt>
 800e77e:	2800      	cmp	r0, #0
 800e780:	d145      	bne.n	800e80e <_dtoa_r+0x6be>
 800e782:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e786:	49a5      	ldr	r1, [pc, #660]	@ (800ea1c <_dtoa_r+0x8cc>)
 800e788:	2000      	movs	r0, #0
 800e78a:	f7f1 fd7d 	bl	8000288 <__aeabi_dsub>
 800e78e:	4602      	mov	r2, r0
 800e790:	460b      	mov	r3, r1
 800e792:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e796:	f7f2 f9a1 	bl	8000adc <__aeabi_dcmplt>
 800e79a:	2800      	cmp	r0, #0
 800e79c:	f43f aef5 	beq.w	800e58a <_dtoa_r+0x43a>
 800e7a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e7a2:	1e73      	subs	r3, r6, #1
 800e7a4:	9315      	str	r3, [sp, #84]	@ 0x54
 800e7a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e7aa:	2b30      	cmp	r3, #48	@ 0x30
 800e7ac:	d0f8      	beq.n	800e7a0 <_dtoa_r+0x650>
 800e7ae:	9f04      	ldr	r7, [sp, #16]
 800e7b0:	e73e      	b.n	800e630 <_dtoa_r+0x4e0>
 800e7b2:	4b9b      	ldr	r3, [pc, #620]	@ (800ea20 <_dtoa_r+0x8d0>)
 800e7b4:	f7f1 ff20 	bl	80005f8 <__aeabi_dmul>
 800e7b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e7bc:	e7bc      	b.n	800e738 <_dtoa_r+0x5e8>
 800e7be:	d10c      	bne.n	800e7da <_dtoa_r+0x68a>
 800e7c0:	4b98      	ldr	r3, [pc, #608]	@ (800ea24 <_dtoa_r+0x8d4>)
 800e7c2:	2200      	movs	r2, #0
 800e7c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7c8:	f7f1 ff16 	bl	80005f8 <__aeabi_dmul>
 800e7cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e7d0:	f7f2 f998 	bl	8000b04 <__aeabi_dcmpge>
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	f000 8157 	beq.w	800ea88 <_dtoa_r+0x938>
 800e7da:	2400      	movs	r4, #0
 800e7dc:	4625      	mov	r5, r4
 800e7de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e7e0:	43db      	mvns	r3, r3
 800e7e2:	9304      	str	r3, [sp, #16]
 800e7e4:	4656      	mov	r6, sl
 800e7e6:	2700      	movs	r7, #0
 800e7e8:	4621      	mov	r1, r4
 800e7ea:	4658      	mov	r0, fp
 800e7ec:	f000 feb0 	bl	800f550 <_Bfree>
 800e7f0:	2d00      	cmp	r5, #0
 800e7f2:	d0dc      	beq.n	800e7ae <_dtoa_r+0x65e>
 800e7f4:	b12f      	cbz	r7, 800e802 <_dtoa_r+0x6b2>
 800e7f6:	42af      	cmp	r7, r5
 800e7f8:	d003      	beq.n	800e802 <_dtoa_r+0x6b2>
 800e7fa:	4639      	mov	r1, r7
 800e7fc:	4658      	mov	r0, fp
 800e7fe:	f000 fea7 	bl	800f550 <_Bfree>
 800e802:	4629      	mov	r1, r5
 800e804:	4658      	mov	r0, fp
 800e806:	f000 fea3 	bl	800f550 <_Bfree>
 800e80a:	e7d0      	b.n	800e7ae <_dtoa_r+0x65e>
 800e80c:	9704      	str	r7, [sp, #16]
 800e80e:	4633      	mov	r3, r6
 800e810:	461e      	mov	r6, r3
 800e812:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e816:	2a39      	cmp	r2, #57	@ 0x39
 800e818:	d107      	bne.n	800e82a <_dtoa_r+0x6da>
 800e81a:	459a      	cmp	sl, r3
 800e81c:	d1f8      	bne.n	800e810 <_dtoa_r+0x6c0>
 800e81e:	9a04      	ldr	r2, [sp, #16]
 800e820:	3201      	adds	r2, #1
 800e822:	9204      	str	r2, [sp, #16]
 800e824:	2230      	movs	r2, #48	@ 0x30
 800e826:	f88a 2000 	strb.w	r2, [sl]
 800e82a:	781a      	ldrb	r2, [r3, #0]
 800e82c:	3201      	adds	r2, #1
 800e82e:	701a      	strb	r2, [r3, #0]
 800e830:	e7bd      	b.n	800e7ae <_dtoa_r+0x65e>
 800e832:	4b7b      	ldr	r3, [pc, #492]	@ (800ea20 <_dtoa_r+0x8d0>)
 800e834:	2200      	movs	r2, #0
 800e836:	f7f1 fedf 	bl	80005f8 <__aeabi_dmul>
 800e83a:	2200      	movs	r2, #0
 800e83c:	2300      	movs	r3, #0
 800e83e:	4604      	mov	r4, r0
 800e840:	460d      	mov	r5, r1
 800e842:	f7f2 f941 	bl	8000ac8 <__aeabi_dcmpeq>
 800e846:	2800      	cmp	r0, #0
 800e848:	f43f aebb 	beq.w	800e5c2 <_dtoa_r+0x472>
 800e84c:	e6f0      	b.n	800e630 <_dtoa_r+0x4e0>
 800e84e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e850:	2a00      	cmp	r2, #0
 800e852:	f000 80db 	beq.w	800ea0c <_dtoa_r+0x8bc>
 800e856:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e858:	2a01      	cmp	r2, #1
 800e85a:	f300 80bf 	bgt.w	800e9dc <_dtoa_r+0x88c>
 800e85e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e860:	2a00      	cmp	r2, #0
 800e862:	f000 80b7 	beq.w	800e9d4 <_dtoa_r+0x884>
 800e866:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e86a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e86c:	4646      	mov	r6, r8
 800e86e:	9a08      	ldr	r2, [sp, #32]
 800e870:	2101      	movs	r1, #1
 800e872:	441a      	add	r2, r3
 800e874:	4658      	mov	r0, fp
 800e876:	4498      	add	r8, r3
 800e878:	9208      	str	r2, [sp, #32]
 800e87a:	f000 ff1d 	bl	800f6b8 <__i2b>
 800e87e:	4605      	mov	r5, r0
 800e880:	b15e      	cbz	r6, 800e89a <_dtoa_r+0x74a>
 800e882:	9b08      	ldr	r3, [sp, #32]
 800e884:	2b00      	cmp	r3, #0
 800e886:	dd08      	ble.n	800e89a <_dtoa_r+0x74a>
 800e888:	42b3      	cmp	r3, r6
 800e88a:	9a08      	ldr	r2, [sp, #32]
 800e88c:	bfa8      	it	ge
 800e88e:	4633      	movge	r3, r6
 800e890:	eba8 0803 	sub.w	r8, r8, r3
 800e894:	1af6      	subs	r6, r6, r3
 800e896:	1ad3      	subs	r3, r2, r3
 800e898:	9308      	str	r3, [sp, #32]
 800e89a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e89c:	b1f3      	cbz	r3, 800e8dc <_dtoa_r+0x78c>
 800e89e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	f000 80b7 	beq.w	800ea14 <_dtoa_r+0x8c4>
 800e8a6:	b18c      	cbz	r4, 800e8cc <_dtoa_r+0x77c>
 800e8a8:	4629      	mov	r1, r5
 800e8aa:	4622      	mov	r2, r4
 800e8ac:	4658      	mov	r0, fp
 800e8ae:	f000 ffc3 	bl	800f838 <__pow5mult>
 800e8b2:	464a      	mov	r2, r9
 800e8b4:	4601      	mov	r1, r0
 800e8b6:	4605      	mov	r5, r0
 800e8b8:	4658      	mov	r0, fp
 800e8ba:	f000 ff13 	bl	800f6e4 <__multiply>
 800e8be:	4649      	mov	r1, r9
 800e8c0:	9004      	str	r0, [sp, #16]
 800e8c2:	4658      	mov	r0, fp
 800e8c4:	f000 fe44 	bl	800f550 <_Bfree>
 800e8c8:	9b04      	ldr	r3, [sp, #16]
 800e8ca:	4699      	mov	r9, r3
 800e8cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e8ce:	1b1a      	subs	r2, r3, r4
 800e8d0:	d004      	beq.n	800e8dc <_dtoa_r+0x78c>
 800e8d2:	4649      	mov	r1, r9
 800e8d4:	4658      	mov	r0, fp
 800e8d6:	f000 ffaf 	bl	800f838 <__pow5mult>
 800e8da:	4681      	mov	r9, r0
 800e8dc:	2101      	movs	r1, #1
 800e8de:	4658      	mov	r0, fp
 800e8e0:	f000 feea 	bl	800f6b8 <__i2b>
 800e8e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8e6:	4604      	mov	r4, r0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	f000 81cf 	beq.w	800ec8c <_dtoa_r+0xb3c>
 800e8ee:	461a      	mov	r2, r3
 800e8f0:	4601      	mov	r1, r0
 800e8f2:	4658      	mov	r0, fp
 800e8f4:	f000 ffa0 	bl	800f838 <__pow5mult>
 800e8f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8fa:	2b01      	cmp	r3, #1
 800e8fc:	4604      	mov	r4, r0
 800e8fe:	f300 8095 	bgt.w	800ea2c <_dtoa_r+0x8dc>
 800e902:	9b02      	ldr	r3, [sp, #8]
 800e904:	2b00      	cmp	r3, #0
 800e906:	f040 8087 	bne.w	800ea18 <_dtoa_r+0x8c8>
 800e90a:	9b03      	ldr	r3, [sp, #12]
 800e90c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e910:	2b00      	cmp	r3, #0
 800e912:	f040 8089 	bne.w	800ea28 <_dtoa_r+0x8d8>
 800e916:	9b03      	ldr	r3, [sp, #12]
 800e918:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e91c:	0d1b      	lsrs	r3, r3, #20
 800e91e:	051b      	lsls	r3, r3, #20
 800e920:	b12b      	cbz	r3, 800e92e <_dtoa_r+0x7de>
 800e922:	9b08      	ldr	r3, [sp, #32]
 800e924:	3301      	adds	r3, #1
 800e926:	9308      	str	r3, [sp, #32]
 800e928:	f108 0801 	add.w	r8, r8, #1
 800e92c:	2301      	movs	r3, #1
 800e92e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e930:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e932:	2b00      	cmp	r3, #0
 800e934:	f000 81b0 	beq.w	800ec98 <_dtoa_r+0xb48>
 800e938:	6923      	ldr	r3, [r4, #16]
 800e93a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e93e:	6918      	ldr	r0, [r3, #16]
 800e940:	f000 fe6e 	bl	800f620 <__hi0bits>
 800e944:	f1c0 0020 	rsb	r0, r0, #32
 800e948:	9b08      	ldr	r3, [sp, #32]
 800e94a:	4418      	add	r0, r3
 800e94c:	f010 001f 	ands.w	r0, r0, #31
 800e950:	d077      	beq.n	800ea42 <_dtoa_r+0x8f2>
 800e952:	f1c0 0320 	rsb	r3, r0, #32
 800e956:	2b04      	cmp	r3, #4
 800e958:	dd6b      	ble.n	800ea32 <_dtoa_r+0x8e2>
 800e95a:	9b08      	ldr	r3, [sp, #32]
 800e95c:	f1c0 001c 	rsb	r0, r0, #28
 800e960:	4403      	add	r3, r0
 800e962:	4480      	add	r8, r0
 800e964:	4406      	add	r6, r0
 800e966:	9308      	str	r3, [sp, #32]
 800e968:	f1b8 0f00 	cmp.w	r8, #0
 800e96c:	dd05      	ble.n	800e97a <_dtoa_r+0x82a>
 800e96e:	4649      	mov	r1, r9
 800e970:	4642      	mov	r2, r8
 800e972:	4658      	mov	r0, fp
 800e974:	f000 ffba 	bl	800f8ec <__lshift>
 800e978:	4681      	mov	r9, r0
 800e97a:	9b08      	ldr	r3, [sp, #32]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	dd05      	ble.n	800e98c <_dtoa_r+0x83c>
 800e980:	4621      	mov	r1, r4
 800e982:	461a      	mov	r2, r3
 800e984:	4658      	mov	r0, fp
 800e986:	f000 ffb1 	bl	800f8ec <__lshift>
 800e98a:	4604      	mov	r4, r0
 800e98c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d059      	beq.n	800ea46 <_dtoa_r+0x8f6>
 800e992:	4621      	mov	r1, r4
 800e994:	4648      	mov	r0, r9
 800e996:	f001 f815 	bl	800f9c4 <__mcmp>
 800e99a:	2800      	cmp	r0, #0
 800e99c:	da53      	bge.n	800ea46 <_dtoa_r+0x8f6>
 800e99e:	1e7b      	subs	r3, r7, #1
 800e9a0:	9304      	str	r3, [sp, #16]
 800e9a2:	4649      	mov	r1, r9
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	220a      	movs	r2, #10
 800e9a8:	4658      	mov	r0, fp
 800e9aa:	f000 fdf3 	bl	800f594 <__multadd>
 800e9ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e9b0:	4681      	mov	r9, r0
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	f000 8172 	beq.w	800ec9c <_dtoa_r+0xb4c>
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	4629      	mov	r1, r5
 800e9bc:	220a      	movs	r2, #10
 800e9be:	4658      	mov	r0, fp
 800e9c0:	f000 fde8 	bl	800f594 <__multadd>
 800e9c4:	9b00      	ldr	r3, [sp, #0]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	4605      	mov	r5, r0
 800e9ca:	dc67      	bgt.n	800ea9c <_dtoa_r+0x94c>
 800e9cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9ce:	2b02      	cmp	r3, #2
 800e9d0:	dc41      	bgt.n	800ea56 <_dtoa_r+0x906>
 800e9d2:	e063      	b.n	800ea9c <_dtoa_r+0x94c>
 800e9d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e9d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e9da:	e746      	b.n	800e86a <_dtoa_r+0x71a>
 800e9dc:	9b07      	ldr	r3, [sp, #28]
 800e9de:	1e5c      	subs	r4, r3, #1
 800e9e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e9e2:	42a3      	cmp	r3, r4
 800e9e4:	bfbf      	itttt	lt
 800e9e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e9e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e9ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e9ec:	1ae3      	sublt	r3, r4, r3
 800e9ee:	bfb4      	ite	lt
 800e9f0:	18d2      	addlt	r2, r2, r3
 800e9f2:	1b1c      	subge	r4, r3, r4
 800e9f4:	9b07      	ldr	r3, [sp, #28]
 800e9f6:	bfbc      	itt	lt
 800e9f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e9fa:	2400      	movlt	r4, #0
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	bfb5      	itete	lt
 800ea00:	eba8 0603 	sublt.w	r6, r8, r3
 800ea04:	9b07      	ldrge	r3, [sp, #28]
 800ea06:	2300      	movlt	r3, #0
 800ea08:	4646      	movge	r6, r8
 800ea0a:	e730      	b.n	800e86e <_dtoa_r+0x71e>
 800ea0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ea0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ea10:	4646      	mov	r6, r8
 800ea12:	e735      	b.n	800e880 <_dtoa_r+0x730>
 800ea14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea16:	e75c      	b.n	800e8d2 <_dtoa_r+0x782>
 800ea18:	2300      	movs	r3, #0
 800ea1a:	e788      	b.n	800e92e <_dtoa_r+0x7de>
 800ea1c:	3fe00000 	.word	0x3fe00000
 800ea20:	40240000 	.word	0x40240000
 800ea24:	40140000 	.word	0x40140000
 800ea28:	9b02      	ldr	r3, [sp, #8]
 800ea2a:	e780      	b.n	800e92e <_dtoa_r+0x7de>
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ea30:	e782      	b.n	800e938 <_dtoa_r+0x7e8>
 800ea32:	d099      	beq.n	800e968 <_dtoa_r+0x818>
 800ea34:	9a08      	ldr	r2, [sp, #32]
 800ea36:	331c      	adds	r3, #28
 800ea38:	441a      	add	r2, r3
 800ea3a:	4498      	add	r8, r3
 800ea3c:	441e      	add	r6, r3
 800ea3e:	9208      	str	r2, [sp, #32]
 800ea40:	e792      	b.n	800e968 <_dtoa_r+0x818>
 800ea42:	4603      	mov	r3, r0
 800ea44:	e7f6      	b.n	800ea34 <_dtoa_r+0x8e4>
 800ea46:	9b07      	ldr	r3, [sp, #28]
 800ea48:	9704      	str	r7, [sp, #16]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	dc20      	bgt.n	800ea90 <_dtoa_r+0x940>
 800ea4e:	9300      	str	r3, [sp, #0]
 800ea50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea52:	2b02      	cmp	r3, #2
 800ea54:	dd1e      	ble.n	800ea94 <_dtoa_r+0x944>
 800ea56:	9b00      	ldr	r3, [sp, #0]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	f47f aec0 	bne.w	800e7de <_dtoa_r+0x68e>
 800ea5e:	4621      	mov	r1, r4
 800ea60:	2205      	movs	r2, #5
 800ea62:	4658      	mov	r0, fp
 800ea64:	f000 fd96 	bl	800f594 <__multadd>
 800ea68:	4601      	mov	r1, r0
 800ea6a:	4604      	mov	r4, r0
 800ea6c:	4648      	mov	r0, r9
 800ea6e:	f000 ffa9 	bl	800f9c4 <__mcmp>
 800ea72:	2800      	cmp	r0, #0
 800ea74:	f77f aeb3 	ble.w	800e7de <_dtoa_r+0x68e>
 800ea78:	4656      	mov	r6, sl
 800ea7a:	2331      	movs	r3, #49	@ 0x31
 800ea7c:	f806 3b01 	strb.w	r3, [r6], #1
 800ea80:	9b04      	ldr	r3, [sp, #16]
 800ea82:	3301      	adds	r3, #1
 800ea84:	9304      	str	r3, [sp, #16]
 800ea86:	e6ae      	b.n	800e7e6 <_dtoa_r+0x696>
 800ea88:	9c07      	ldr	r4, [sp, #28]
 800ea8a:	9704      	str	r7, [sp, #16]
 800ea8c:	4625      	mov	r5, r4
 800ea8e:	e7f3      	b.n	800ea78 <_dtoa_r+0x928>
 800ea90:	9b07      	ldr	r3, [sp, #28]
 800ea92:	9300      	str	r3, [sp, #0]
 800ea94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	f000 8104 	beq.w	800eca4 <_dtoa_r+0xb54>
 800ea9c:	2e00      	cmp	r6, #0
 800ea9e:	dd05      	ble.n	800eaac <_dtoa_r+0x95c>
 800eaa0:	4629      	mov	r1, r5
 800eaa2:	4632      	mov	r2, r6
 800eaa4:	4658      	mov	r0, fp
 800eaa6:	f000 ff21 	bl	800f8ec <__lshift>
 800eaaa:	4605      	mov	r5, r0
 800eaac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d05a      	beq.n	800eb68 <_dtoa_r+0xa18>
 800eab2:	6869      	ldr	r1, [r5, #4]
 800eab4:	4658      	mov	r0, fp
 800eab6:	f000 fd0b 	bl	800f4d0 <_Balloc>
 800eaba:	4606      	mov	r6, r0
 800eabc:	b928      	cbnz	r0, 800eaca <_dtoa_r+0x97a>
 800eabe:	4b84      	ldr	r3, [pc, #528]	@ (800ecd0 <_dtoa_r+0xb80>)
 800eac0:	4602      	mov	r2, r0
 800eac2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800eac6:	f7ff bb5a 	b.w	800e17e <_dtoa_r+0x2e>
 800eaca:	692a      	ldr	r2, [r5, #16]
 800eacc:	3202      	adds	r2, #2
 800eace:	0092      	lsls	r2, r2, #2
 800ead0:	f105 010c 	add.w	r1, r5, #12
 800ead4:	300c      	adds	r0, #12
 800ead6:	f001 fa77 	bl	800ffc8 <memcpy>
 800eada:	2201      	movs	r2, #1
 800eadc:	4631      	mov	r1, r6
 800eade:	4658      	mov	r0, fp
 800eae0:	f000 ff04 	bl	800f8ec <__lshift>
 800eae4:	f10a 0301 	add.w	r3, sl, #1
 800eae8:	9307      	str	r3, [sp, #28]
 800eaea:	9b00      	ldr	r3, [sp, #0]
 800eaec:	4453      	add	r3, sl
 800eaee:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eaf0:	9b02      	ldr	r3, [sp, #8]
 800eaf2:	f003 0301 	and.w	r3, r3, #1
 800eaf6:	462f      	mov	r7, r5
 800eaf8:	930a      	str	r3, [sp, #40]	@ 0x28
 800eafa:	4605      	mov	r5, r0
 800eafc:	9b07      	ldr	r3, [sp, #28]
 800eafe:	4621      	mov	r1, r4
 800eb00:	3b01      	subs	r3, #1
 800eb02:	4648      	mov	r0, r9
 800eb04:	9300      	str	r3, [sp, #0]
 800eb06:	f7ff fa9a 	bl	800e03e <quorem>
 800eb0a:	4639      	mov	r1, r7
 800eb0c:	9002      	str	r0, [sp, #8]
 800eb0e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800eb12:	4648      	mov	r0, r9
 800eb14:	f000 ff56 	bl	800f9c4 <__mcmp>
 800eb18:	462a      	mov	r2, r5
 800eb1a:	9008      	str	r0, [sp, #32]
 800eb1c:	4621      	mov	r1, r4
 800eb1e:	4658      	mov	r0, fp
 800eb20:	f000 ff6c 	bl	800f9fc <__mdiff>
 800eb24:	68c2      	ldr	r2, [r0, #12]
 800eb26:	4606      	mov	r6, r0
 800eb28:	bb02      	cbnz	r2, 800eb6c <_dtoa_r+0xa1c>
 800eb2a:	4601      	mov	r1, r0
 800eb2c:	4648      	mov	r0, r9
 800eb2e:	f000 ff49 	bl	800f9c4 <__mcmp>
 800eb32:	4602      	mov	r2, r0
 800eb34:	4631      	mov	r1, r6
 800eb36:	4658      	mov	r0, fp
 800eb38:	920e      	str	r2, [sp, #56]	@ 0x38
 800eb3a:	f000 fd09 	bl	800f550 <_Bfree>
 800eb3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800eb42:	9e07      	ldr	r6, [sp, #28]
 800eb44:	ea43 0102 	orr.w	r1, r3, r2
 800eb48:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb4a:	4319      	orrs	r1, r3
 800eb4c:	d110      	bne.n	800eb70 <_dtoa_r+0xa20>
 800eb4e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eb52:	d029      	beq.n	800eba8 <_dtoa_r+0xa58>
 800eb54:	9b08      	ldr	r3, [sp, #32]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	dd02      	ble.n	800eb60 <_dtoa_r+0xa10>
 800eb5a:	9b02      	ldr	r3, [sp, #8]
 800eb5c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800eb60:	9b00      	ldr	r3, [sp, #0]
 800eb62:	f883 8000 	strb.w	r8, [r3]
 800eb66:	e63f      	b.n	800e7e8 <_dtoa_r+0x698>
 800eb68:	4628      	mov	r0, r5
 800eb6a:	e7bb      	b.n	800eae4 <_dtoa_r+0x994>
 800eb6c:	2201      	movs	r2, #1
 800eb6e:	e7e1      	b.n	800eb34 <_dtoa_r+0x9e4>
 800eb70:	9b08      	ldr	r3, [sp, #32]
 800eb72:	2b00      	cmp	r3, #0
 800eb74:	db04      	blt.n	800eb80 <_dtoa_r+0xa30>
 800eb76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eb78:	430b      	orrs	r3, r1
 800eb7a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eb7c:	430b      	orrs	r3, r1
 800eb7e:	d120      	bne.n	800ebc2 <_dtoa_r+0xa72>
 800eb80:	2a00      	cmp	r2, #0
 800eb82:	dded      	ble.n	800eb60 <_dtoa_r+0xa10>
 800eb84:	4649      	mov	r1, r9
 800eb86:	2201      	movs	r2, #1
 800eb88:	4658      	mov	r0, fp
 800eb8a:	f000 feaf 	bl	800f8ec <__lshift>
 800eb8e:	4621      	mov	r1, r4
 800eb90:	4681      	mov	r9, r0
 800eb92:	f000 ff17 	bl	800f9c4 <__mcmp>
 800eb96:	2800      	cmp	r0, #0
 800eb98:	dc03      	bgt.n	800eba2 <_dtoa_r+0xa52>
 800eb9a:	d1e1      	bne.n	800eb60 <_dtoa_r+0xa10>
 800eb9c:	f018 0f01 	tst.w	r8, #1
 800eba0:	d0de      	beq.n	800eb60 <_dtoa_r+0xa10>
 800eba2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800eba6:	d1d8      	bne.n	800eb5a <_dtoa_r+0xa0a>
 800eba8:	9a00      	ldr	r2, [sp, #0]
 800ebaa:	2339      	movs	r3, #57	@ 0x39
 800ebac:	7013      	strb	r3, [r2, #0]
 800ebae:	4633      	mov	r3, r6
 800ebb0:	461e      	mov	r6, r3
 800ebb2:	3b01      	subs	r3, #1
 800ebb4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ebb8:	2a39      	cmp	r2, #57	@ 0x39
 800ebba:	d052      	beq.n	800ec62 <_dtoa_r+0xb12>
 800ebbc:	3201      	adds	r2, #1
 800ebbe:	701a      	strb	r2, [r3, #0]
 800ebc0:	e612      	b.n	800e7e8 <_dtoa_r+0x698>
 800ebc2:	2a00      	cmp	r2, #0
 800ebc4:	dd07      	ble.n	800ebd6 <_dtoa_r+0xa86>
 800ebc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ebca:	d0ed      	beq.n	800eba8 <_dtoa_r+0xa58>
 800ebcc:	9a00      	ldr	r2, [sp, #0]
 800ebce:	f108 0301 	add.w	r3, r8, #1
 800ebd2:	7013      	strb	r3, [r2, #0]
 800ebd4:	e608      	b.n	800e7e8 <_dtoa_r+0x698>
 800ebd6:	9b07      	ldr	r3, [sp, #28]
 800ebd8:	9a07      	ldr	r2, [sp, #28]
 800ebda:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ebde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ebe0:	4293      	cmp	r3, r2
 800ebe2:	d028      	beq.n	800ec36 <_dtoa_r+0xae6>
 800ebe4:	4649      	mov	r1, r9
 800ebe6:	2300      	movs	r3, #0
 800ebe8:	220a      	movs	r2, #10
 800ebea:	4658      	mov	r0, fp
 800ebec:	f000 fcd2 	bl	800f594 <__multadd>
 800ebf0:	42af      	cmp	r7, r5
 800ebf2:	4681      	mov	r9, r0
 800ebf4:	f04f 0300 	mov.w	r3, #0
 800ebf8:	f04f 020a 	mov.w	r2, #10
 800ebfc:	4639      	mov	r1, r7
 800ebfe:	4658      	mov	r0, fp
 800ec00:	d107      	bne.n	800ec12 <_dtoa_r+0xac2>
 800ec02:	f000 fcc7 	bl	800f594 <__multadd>
 800ec06:	4607      	mov	r7, r0
 800ec08:	4605      	mov	r5, r0
 800ec0a:	9b07      	ldr	r3, [sp, #28]
 800ec0c:	3301      	adds	r3, #1
 800ec0e:	9307      	str	r3, [sp, #28]
 800ec10:	e774      	b.n	800eafc <_dtoa_r+0x9ac>
 800ec12:	f000 fcbf 	bl	800f594 <__multadd>
 800ec16:	4629      	mov	r1, r5
 800ec18:	4607      	mov	r7, r0
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	220a      	movs	r2, #10
 800ec1e:	4658      	mov	r0, fp
 800ec20:	f000 fcb8 	bl	800f594 <__multadd>
 800ec24:	4605      	mov	r5, r0
 800ec26:	e7f0      	b.n	800ec0a <_dtoa_r+0xaba>
 800ec28:	9b00      	ldr	r3, [sp, #0]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	bfcc      	ite	gt
 800ec2e:	461e      	movgt	r6, r3
 800ec30:	2601      	movle	r6, #1
 800ec32:	4456      	add	r6, sl
 800ec34:	2700      	movs	r7, #0
 800ec36:	4649      	mov	r1, r9
 800ec38:	2201      	movs	r2, #1
 800ec3a:	4658      	mov	r0, fp
 800ec3c:	f000 fe56 	bl	800f8ec <__lshift>
 800ec40:	4621      	mov	r1, r4
 800ec42:	4681      	mov	r9, r0
 800ec44:	f000 febe 	bl	800f9c4 <__mcmp>
 800ec48:	2800      	cmp	r0, #0
 800ec4a:	dcb0      	bgt.n	800ebae <_dtoa_r+0xa5e>
 800ec4c:	d102      	bne.n	800ec54 <_dtoa_r+0xb04>
 800ec4e:	f018 0f01 	tst.w	r8, #1
 800ec52:	d1ac      	bne.n	800ebae <_dtoa_r+0xa5e>
 800ec54:	4633      	mov	r3, r6
 800ec56:	461e      	mov	r6, r3
 800ec58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ec5c:	2a30      	cmp	r2, #48	@ 0x30
 800ec5e:	d0fa      	beq.n	800ec56 <_dtoa_r+0xb06>
 800ec60:	e5c2      	b.n	800e7e8 <_dtoa_r+0x698>
 800ec62:	459a      	cmp	sl, r3
 800ec64:	d1a4      	bne.n	800ebb0 <_dtoa_r+0xa60>
 800ec66:	9b04      	ldr	r3, [sp, #16]
 800ec68:	3301      	adds	r3, #1
 800ec6a:	9304      	str	r3, [sp, #16]
 800ec6c:	2331      	movs	r3, #49	@ 0x31
 800ec6e:	f88a 3000 	strb.w	r3, [sl]
 800ec72:	e5b9      	b.n	800e7e8 <_dtoa_r+0x698>
 800ec74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ec76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ecd4 <_dtoa_r+0xb84>
 800ec7a:	b11b      	cbz	r3, 800ec84 <_dtoa_r+0xb34>
 800ec7c:	f10a 0308 	add.w	r3, sl, #8
 800ec80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ec82:	6013      	str	r3, [r2, #0]
 800ec84:	4650      	mov	r0, sl
 800ec86:	b019      	add	sp, #100	@ 0x64
 800ec88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec8e:	2b01      	cmp	r3, #1
 800ec90:	f77f ae37 	ble.w	800e902 <_dtoa_r+0x7b2>
 800ec94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec96:	930a      	str	r3, [sp, #40]	@ 0x28
 800ec98:	2001      	movs	r0, #1
 800ec9a:	e655      	b.n	800e948 <_dtoa_r+0x7f8>
 800ec9c:	9b00      	ldr	r3, [sp, #0]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	f77f aed6 	ble.w	800ea50 <_dtoa_r+0x900>
 800eca4:	4656      	mov	r6, sl
 800eca6:	4621      	mov	r1, r4
 800eca8:	4648      	mov	r0, r9
 800ecaa:	f7ff f9c8 	bl	800e03e <quorem>
 800ecae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ecb2:	f806 8b01 	strb.w	r8, [r6], #1
 800ecb6:	9b00      	ldr	r3, [sp, #0]
 800ecb8:	eba6 020a 	sub.w	r2, r6, sl
 800ecbc:	4293      	cmp	r3, r2
 800ecbe:	ddb3      	ble.n	800ec28 <_dtoa_r+0xad8>
 800ecc0:	4649      	mov	r1, r9
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	220a      	movs	r2, #10
 800ecc6:	4658      	mov	r0, fp
 800ecc8:	f000 fc64 	bl	800f594 <__multadd>
 800eccc:	4681      	mov	r9, r0
 800ecce:	e7ea      	b.n	800eca6 <_dtoa_r+0xb56>
 800ecd0:	080103f0 	.word	0x080103f0
 800ecd4:	08010374 	.word	0x08010374

0800ecd8 <__ssputs_r>:
 800ecd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecdc:	688e      	ldr	r6, [r1, #8]
 800ecde:	461f      	mov	r7, r3
 800ece0:	42be      	cmp	r6, r7
 800ece2:	680b      	ldr	r3, [r1, #0]
 800ece4:	4682      	mov	sl, r0
 800ece6:	460c      	mov	r4, r1
 800ece8:	4690      	mov	r8, r2
 800ecea:	d82d      	bhi.n	800ed48 <__ssputs_r+0x70>
 800ecec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ecf0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ecf4:	d026      	beq.n	800ed44 <__ssputs_r+0x6c>
 800ecf6:	6965      	ldr	r5, [r4, #20]
 800ecf8:	6909      	ldr	r1, [r1, #16]
 800ecfa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ecfe:	eba3 0901 	sub.w	r9, r3, r1
 800ed02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ed06:	1c7b      	adds	r3, r7, #1
 800ed08:	444b      	add	r3, r9
 800ed0a:	106d      	asrs	r5, r5, #1
 800ed0c:	429d      	cmp	r5, r3
 800ed0e:	bf38      	it	cc
 800ed10:	461d      	movcc	r5, r3
 800ed12:	0553      	lsls	r3, r2, #21
 800ed14:	d527      	bpl.n	800ed66 <__ssputs_r+0x8e>
 800ed16:	4629      	mov	r1, r5
 800ed18:	f000 faa2 	bl	800f260 <_malloc_r>
 800ed1c:	4606      	mov	r6, r0
 800ed1e:	b360      	cbz	r0, 800ed7a <__ssputs_r+0xa2>
 800ed20:	6921      	ldr	r1, [r4, #16]
 800ed22:	464a      	mov	r2, r9
 800ed24:	f001 f950 	bl	800ffc8 <memcpy>
 800ed28:	89a3      	ldrh	r3, [r4, #12]
 800ed2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ed2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed32:	81a3      	strh	r3, [r4, #12]
 800ed34:	6126      	str	r6, [r4, #16]
 800ed36:	6165      	str	r5, [r4, #20]
 800ed38:	444e      	add	r6, r9
 800ed3a:	eba5 0509 	sub.w	r5, r5, r9
 800ed3e:	6026      	str	r6, [r4, #0]
 800ed40:	60a5      	str	r5, [r4, #8]
 800ed42:	463e      	mov	r6, r7
 800ed44:	42be      	cmp	r6, r7
 800ed46:	d900      	bls.n	800ed4a <__ssputs_r+0x72>
 800ed48:	463e      	mov	r6, r7
 800ed4a:	6820      	ldr	r0, [r4, #0]
 800ed4c:	4632      	mov	r2, r6
 800ed4e:	4641      	mov	r1, r8
 800ed50:	f001 f8a8 	bl	800fea4 <memmove>
 800ed54:	68a3      	ldr	r3, [r4, #8]
 800ed56:	1b9b      	subs	r3, r3, r6
 800ed58:	60a3      	str	r3, [r4, #8]
 800ed5a:	6823      	ldr	r3, [r4, #0]
 800ed5c:	4433      	add	r3, r6
 800ed5e:	6023      	str	r3, [r4, #0]
 800ed60:	2000      	movs	r0, #0
 800ed62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed66:	462a      	mov	r2, r5
 800ed68:	f000 ff77 	bl	800fc5a <_realloc_r>
 800ed6c:	4606      	mov	r6, r0
 800ed6e:	2800      	cmp	r0, #0
 800ed70:	d1e0      	bne.n	800ed34 <__ssputs_r+0x5c>
 800ed72:	6921      	ldr	r1, [r4, #16]
 800ed74:	4650      	mov	r0, sl
 800ed76:	f001 f967 	bl	8010048 <_free_r>
 800ed7a:	230c      	movs	r3, #12
 800ed7c:	f8ca 3000 	str.w	r3, [sl]
 800ed80:	89a3      	ldrh	r3, [r4, #12]
 800ed82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed86:	81a3      	strh	r3, [r4, #12]
 800ed88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed8c:	e7e9      	b.n	800ed62 <__ssputs_r+0x8a>
	...

0800ed90 <_svfiprintf_r>:
 800ed90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed94:	4698      	mov	r8, r3
 800ed96:	898b      	ldrh	r3, [r1, #12]
 800ed98:	061b      	lsls	r3, r3, #24
 800ed9a:	b09d      	sub	sp, #116	@ 0x74
 800ed9c:	4607      	mov	r7, r0
 800ed9e:	460d      	mov	r5, r1
 800eda0:	4614      	mov	r4, r2
 800eda2:	d510      	bpl.n	800edc6 <_svfiprintf_r+0x36>
 800eda4:	690b      	ldr	r3, [r1, #16]
 800eda6:	b973      	cbnz	r3, 800edc6 <_svfiprintf_r+0x36>
 800eda8:	2140      	movs	r1, #64	@ 0x40
 800edaa:	f000 fa59 	bl	800f260 <_malloc_r>
 800edae:	6028      	str	r0, [r5, #0]
 800edb0:	6128      	str	r0, [r5, #16]
 800edb2:	b930      	cbnz	r0, 800edc2 <_svfiprintf_r+0x32>
 800edb4:	230c      	movs	r3, #12
 800edb6:	603b      	str	r3, [r7, #0]
 800edb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800edbc:	b01d      	add	sp, #116	@ 0x74
 800edbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edc2:	2340      	movs	r3, #64	@ 0x40
 800edc4:	616b      	str	r3, [r5, #20]
 800edc6:	2300      	movs	r3, #0
 800edc8:	9309      	str	r3, [sp, #36]	@ 0x24
 800edca:	2320      	movs	r3, #32
 800edcc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800edd0:	f8cd 800c 	str.w	r8, [sp, #12]
 800edd4:	2330      	movs	r3, #48	@ 0x30
 800edd6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ef74 <_svfiprintf_r+0x1e4>
 800edda:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800edde:	f04f 0901 	mov.w	r9, #1
 800ede2:	4623      	mov	r3, r4
 800ede4:	469a      	mov	sl, r3
 800ede6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800edea:	b10a      	cbz	r2, 800edf0 <_svfiprintf_r+0x60>
 800edec:	2a25      	cmp	r2, #37	@ 0x25
 800edee:	d1f9      	bne.n	800ede4 <_svfiprintf_r+0x54>
 800edf0:	ebba 0b04 	subs.w	fp, sl, r4
 800edf4:	d00b      	beq.n	800ee0e <_svfiprintf_r+0x7e>
 800edf6:	465b      	mov	r3, fp
 800edf8:	4622      	mov	r2, r4
 800edfa:	4629      	mov	r1, r5
 800edfc:	4638      	mov	r0, r7
 800edfe:	f7ff ff6b 	bl	800ecd8 <__ssputs_r>
 800ee02:	3001      	adds	r0, #1
 800ee04:	f000 80a7 	beq.w	800ef56 <_svfiprintf_r+0x1c6>
 800ee08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee0a:	445a      	add	r2, fp
 800ee0c:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee0e:	f89a 3000 	ldrb.w	r3, [sl]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	f000 809f 	beq.w	800ef56 <_svfiprintf_r+0x1c6>
 800ee18:	2300      	movs	r3, #0
 800ee1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ee1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee22:	f10a 0a01 	add.w	sl, sl, #1
 800ee26:	9304      	str	r3, [sp, #16]
 800ee28:	9307      	str	r3, [sp, #28]
 800ee2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ee2e:	931a      	str	r3, [sp, #104]	@ 0x68
 800ee30:	4654      	mov	r4, sl
 800ee32:	2205      	movs	r2, #5
 800ee34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee38:	484e      	ldr	r0, [pc, #312]	@ (800ef74 <_svfiprintf_r+0x1e4>)
 800ee3a:	f7f1 f9c9 	bl	80001d0 <memchr>
 800ee3e:	9a04      	ldr	r2, [sp, #16]
 800ee40:	b9d8      	cbnz	r0, 800ee7a <_svfiprintf_r+0xea>
 800ee42:	06d0      	lsls	r0, r2, #27
 800ee44:	bf44      	itt	mi
 800ee46:	2320      	movmi	r3, #32
 800ee48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee4c:	0711      	lsls	r1, r2, #28
 800ee4e:	bf44      	itt	mi
 800ee50:	232b      	movmi	r3, #43	@ 0x2b
 800ee52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee56:	f89a 3000 	ldrb.w	r3, [sl]
 800ee5a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee5c:	d015      	beq.n	800ee8a <_svfiprintf_r+0xfa>
 800ee5e:	9a07      	ldr	r2, [sp, #28]
 800ee60:	4654      	mov	r4, sl
 800ee62:	2000      	movs	r0, #0
 800ee64:	f04f 0c0a 	mov.w	ip, #10
 800ee68:	4621      	mov	r1, r4
 800ee6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee6e:	3b30      	subs	r3, #48	@ 0x30
 800ee70:	2b09      	cmp	r3, #9
 800ee72:	d94b      	bls.n	800ef0c <_svfiprintf_r+0x17c>
 800ee74:	b1b0      	cbz	r0, 800eea4 <_svfiprintf_r+0x114>
 800ee76:	9207      	str	r2, [sp, #28]
 800ee78:	e014      	b.n	800eea4 <_svfiprintf_r+0x114>
 800ee7a:	eba0 0308 	sub.w	r3, r0, r8
 800ee7e:	fa09 f303 	lsl.w	r3, r9, r3
 800ee82:	4313      	orrs	r3, r2
 800ee84:	9304      	str	r3, [sp, #16]
 800ee86:	46a2      	mov	sl, r4
 800ee88:	e7d2      	b.n	800ee30 <_svfiprintf_r+0xa0>
 800ee8a:	9b03      	ldr	r3, [sp, #12]
 800ee8c:	1d19      	adds	r1, r3, #4
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	9103      	str	r1, [sp, #12]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	bfbb      	ittet	lt
 800ee96:	425b      	neglt	r3, r3
 800ee98:	f042 0202 	orrlt.w	r2, r2, #2
 800ee9c:	9307      	strge	r3, [sp, #28]
 800ee9e:	9307      	strlt	r3, [sp, #28]
 800eea0:	bfb8      	it	lt
 800eea2:	9204      	strlt	r2, [sp, #16]
 800eea4:	7823      	ldrb	r3, [r4, #0]
 800eea6:	2b2e      	cmp	r3, #46	@ 0x2e
 800eea8:	d10a      	bne.n	800eec0 <_svfiprintf_r+0x130>
 800eeaa:	7863      	ldrb	r3, [r4, #1]
 800eeac:	2b2a      	cmp	r3, #42	@ 0x2a
 800eeae:	d132      	bne.n	800ef16 <_svfiprintf_r+0x186>
 800eeb0:	9b03      	ldr	r3, [sp, #12]
 800eeb2:	1d1a      	adds	r2, r3, #4
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	9203      	str	r2, [sp, #12]
 800eeb8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eebc:	3402      	adds	r4, #2
 800eebe:	9305      	str	r3, [sp, #20]
 800eec0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ef84 <_svfiprintf_r+0x1f4>
 800eec4:	7821      	ldrb	r1, [r4, #0]
 800eec6:	2203      	movs	r2, #3
 800eec8:	4650      	mov	r0, sl
 800eeca:	f7f1 f981 	bl	80001d0 <memchr>
 800eece:	b138      	cbz	r0, 800eee0 <_svfiprintf_r+0x150>
 800eed0:	9b04      	ldr	r3, [sp, #16]
 800eed2:	eba0 000a 	sub.w	r0, r0, sl
 800eed6:	2240      	movs	r2, #64	@ 0x40
 800eed8:	4082      	lsls	r2, r0
 800eeda:	4313      	orrs	r3, r2
 800eedc:	3401      	adds	r4, #1
 800eede:	9304      	str	r3, [sp, #16]
 800eee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eee4:	4824      	ldr	r0, [pc, #144]	@ (800ef78 <_svfiprintf_r+0x1e8>)
 800eee6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eeea:	2206      	movs	r2, #6
 800eeec:	f7f1 f970 	bl	80001d0 <memchr>
 800eef0:	2800      	cmp	r0, #0
 800eef2:	d036      	beq.n	800ef62 <_svfiprintf_r+0x1d2>
 800eef4:	4b21      	ldr	r3, [pc, #132]	@ (800ef7c <_svfiprintf_r+0x1ec>)
 800eef6:	bb1b      	cbnz	r3, 800ef40 <_svfiprintf_r+0x1b0>
 800eef8:	9b03      	ldr	r3, [sp, #12]
 800eefa:	3307      	adds	r3, #7
 800eefc:	f023 0307 	bic.w	r3, r3, #7
 800ef00:	3308      	adds	r3, #8
 800ef02:	9303      	str	r3, [sp, #12]
 800ef04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef06:	4433      	add	r3, r6
 800ef08:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef0a:	e76a      	b.n	800ede2 <_svfiprintf_r+0x52>
 800ef0c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef10:	460c      	mov	r4, r1
 800ef12:	2001      	movs	r0, #1
 800ef14:	e7a8      	b.n	800ee68 <_svfiprintf_r+0xd8>
 800ef16:	2300      	movs	r3, #0
 800ef18:	3401      	adds	r4, #1
 800ef1a:	9305      	str	r3, [sp, #20]
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	f04f 0c0a 	mov.w	ip, #10
 800ef22:	4620      	mov	r0, r4
 800ef24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef28:	3a30      	subs	r2, #48	@ 0x30
 800ef2a:	2a09      	cmp	r2, #9
 800ef2c:	d903      	bls.n	800ef36 <_svfiprintf_r+0x1a6>
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d0c6      	beq.n	800eec0 <_svfiprintf_r+0x130>
 800ef32:	9105      	str	r1, [sp, #20]
 800ef34:	e7c4      	b.n	800eec0 <_svfiprintf_r+0x130>
 800ef36:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef3a:	4604      	mov	r4, r0
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	e7f0      	b.n	800ef22 <_svfiprintf_r+0x192>
 800ef40:	ab03      	add	r3, sp, #12
 800ef42:	9300      	str	r3, [sp, #0]
 800ef44:	462a      	mov	r2, r5
 800ef46:	4b0e      	ldr	r3, [pc, #56]	@ (800ef80 <_svfiprintf_r+0x1f0>)
 800ef48:	a904      	add	r1, sp, #16
 800ef4a:	4638      	mov	r0, r7
 800ef4c:	f7fe fb92 	bl	800d674 <_printf_float>
 800ef50:	1c42      	adds	r2, r0, #1
 800ef52:	4606      	mov	r6, r0
 800ef54:	d1d6      	bne.n	800ef04 <_svfiprintf_r+0x174>
 800ef56:	89ab      	ldrh	r3, [r5, #12]
 800ef58:	065b      	lsls	r3, r3, #25
 800ef5a:	f53f af2d 	bmi.w	800edb8 <_svfiprintf_r+0x28>
 800ef5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ef60:	e72c      	b.n	800edbc <_svfiprintf_r+0x2c>
 800ef62:	ab03      	add	r3, sp, #12
 800ef64:	9300      	str	r3, [sp, #0]
 800ef66:	462a      	mov	r2, r5
 800ef68:	4b05      	ldr	r3, [pc, #20]	@ (800ef80 <_svfiprintf_r+0x1f0>)
 800ef6a:	a904      	add	r1, sp, #16
 800ef6c:	4638      	mov	r0, r7
 800ef6e:	f7fe fe19 	bl	800dba4 <_printf_i>
 800ef72:	e7ed      	b.n	800ef50 <_svfiprintf_r+0x1c0>
 800ef74:	08010401 	.word	0x08010401
 800ef78:	0801040b 	.word	0x0801040b
 800ef7c:	0800d675 	.word	0x0800d675
 800ef80:	0800ecd9 	.word	0x0800ecd9
 800ef84:	08010407 	.word	0x08010407

0800ef88 <__sfputc_r>:
 800ef88:	6893      	ldr	r3, [r2, #8]
 800ef8a:	3b01      	subs	r3, #1
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	b410      	push	{r4}
 800ef90:	6093      	str	r3, [r2, #8]
 800ef92:	da08      	bge.n	800efa6 <__sfputc_r+0x1e>
 800ef94:	6994      	ldr	r4, [r2, #24]
 800ef96:	42a3      	cmp	r3, r4
 800ef98:	db01      	blt.n	800ef9e <__sfputc_r+0x16>
 800ef9a:	290a      	cmp	r1, #10
 800ef9c:	d103      	bne.n	800efa6 <__sfputc_r+0x1e>
 800ef9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efa2:	f000 be88 	b.w	800fcb6 <__swbuf_r>
 800efa6:	6813      	ldr	r3, [r2, #0]
 800efa8:	1c58      	adds	r0, r3, #1
 800efaa:	6010      	str	r0, [r2, #0]
 800efac:	7019      	strb	r1, [r3, #0]
 800efae:	4608      	mov	r0, r1
 800efb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efb4:	4770      	bx	lr

0800efb6 <__sfputs_r>:
 800efb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800efb8:	4606      	mov	r6, r0
 800efba:	460f      	mov	r7, r1
 800efbc:	4614      	mov	r4, r2
 800efbe:	18d5      	adds	r5, r2, r3
 800efc0:	42ac      	cmp	r4, r5
 800efc2:	d101      	bne.n	800efc8 <__sfputs_r+0x12>
 800efc4:	2000      	movs	r0, #0
 800efc6:	e007      	b.n	800efd8 <__sfputs_r+0x22>
 800efc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800efcc:	463a      	mov	r2, r7
 800efce:	4630      	mov	r0, r6
 800efd0:	f7ff ffda 	bl	800ef88 <__sfputc_r>
 800efd4:	1c43      	adds	r3, r0, #1
 800efd6:	d1f3      	bne.n	800efc0 <__sfputs_r+0xa>
 800efd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800efdc <_vfiprintf_r>:
 800efdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe0:	460d      	mov	r5, r1
 800efe2:	b09d      	sub	sp, #116	@ 0x74
 800efe4:	4614      	mov	r4, r2
 800efe6:	4698      	mov	r8, r3
 800efe8:	4606      	mov	r6, r0
 800efea:	b118      	cbz	r0, 800eff4 <_vfiprintf_r+0x18>
 800efec:	6a03      	ldr	r3, [r0, #32]
 800efee:	b90b      	cbnz	r3, 800eff4 <_vfiprintf_r+0x18>
 800eff0:	f7fe ffa4 	bl	800df3c <__sinit>
 800eff4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eff6:	07d9      	lsls	r1, r3, #31
 800eff8:	d405      	bmi.n	800f006 <_vfiprintf_r+0x2a>
 800effa:	89ab      	ldrh	r3, [r5, #12]
 800effc:	059a      	lsls	r2, r3, #22
 800effe:	d402      	bmi.n	800f006 <_vfiprintf_r+0x2a>
 800f000:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f002:	f7ff f81a 	bl	800e03a <__retarget_lock_acquire_recursive>
 800f006:	89ab      	ldrh	r3, [r5, #12]
 800f008:	071b      	lsls	r3, r3, #28
 800f00a:	d501      	bpl.n	800f010 <_vfiprintf_r+0x34>
 800f00c:	692b      	ldr	r3, [r5, #16]
 800f00e:	b99b      	cbnz	r3, 800f038 <_vfiprintf_r+0x5c>
 800f010:	4629      	mov	r1, r5
 800f012:	4630      	mov	r0, r6
 800f014:	f000 fe8e 	bl	800fd34 <__swsetup_r>
 800f018:	b170      	cbz	r0, 800f038 <_vfiprintf_r+0x5c>
 800f01a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f01c:	07dc      	lsls	r4, r3, #31
 800f01e:	d504      	bpl.n	800f02a <_vfiprintf_r+0x4e>
 800f020:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f024:	b01d      	add	sp, #116	@ 0x74
 800f026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f02a:	89ab      	ldrh	r3, [r5, #12]
 800f02c:	0598      	lsls	r0, r3, #22
 800f02e:	d4f7      	bmi.n	800f020 <_vfiprintf_r+0x44>
 800f030:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f032:	f7ff f803 	bl	800e03c <__retarget_lock_release_recursive>
 800f036:	e7f3      	b.n	800f020 <_vfiprintf_r+0x44>
 800f038:	2300      	movs	r3, #0
 800f03a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f03c:	2320      	movs	r3, #32
 800f03e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f042:	f8cd 800c 	str.w	r8, [sp, #12]
 800f046:	2330      	movs	r3, #48	@ 0x30
 800f048:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f1f8 <_vfiprintf_r+0x21c>
 800f04c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f050:	f04f 0901 	mov.w	r9, #1
 800f054:	4623      	mov	r3, r4
 800f056:	469a      	mov	sl, r3
 800f058:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f05c:	b10a      	cbz	r2, 800f062 <_vfiprintf_r+0x86>
 800f05e:	2a25      	cmp	r2, #37	@ 0x25
 800f060:	d1f9      	bne.n	800f056 <_vfiprintf_r+0x7a>
 800f062:	ebba 0b04 	subs.w	fp, sl, r4
 800f066:	d00b      	beq.n	800f080 <_vfiprintf_r+0xa4>
 800f068:	465b      	mov	r3, fp
 800f06a:	4622      	mov	r2, r4
 800f06c:	4629      	mov	r1, r5
 800f06e:	4630      	mov	r0, r6
 800f070:	f7ff ffa1 	bl	800efb6 <__sfputs_r>
 800f074:	3001      	adds	r0, #1
 800f076:	f000 80a7 	beq.w	800f1c8 <_vfiprintf_r+0x1ec>
 800f07a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f07c:	445a      	add	r2, fp
 800f07e:	9209      	str	r2, [sp, #36]	@ 0x24
 800f080:	f89a 3000 	ldrb.w	r3, [sl]
 800f084:	2b00      	cmp	r3, #0
 800f086:	f000 809f 	beq.w	800f1c8 <_vfiprintf_r+0x1ec>
 800f08a:	2300      	movs	r3, #0
 800f08c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f090:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f094:	f10a 0a01 	add.w	sl, sl, #1
 800f098:	9304      	str	r3, [sp, #16]
 800f09a:	9307      	str	r3, [sp, #28]
 800f09c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f0a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800f0a2:	4654      	mov	r4, sl
 800f0a4:	2205      	movs	r2, #5
 800f0a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0aa:	4853      	ldr	r0, [pc, #332]	@ (800f1f8 <_vfiprintf_r+0x21c>)
 800f0ac:	f7f1 f890 	bl	80001d0 <memchr>
 800f0b0:	9a04      	ldr	r2, [sp, #16]
 800f0b2:	b9d8      	cbnz	r0, 800f0ec <_vfiprintf_r+0x110>
 800f0b4:	06d1      	lsls	r1, r2, #27
 800f0b6:	bf44      	itt	mi
 800f0b8:	2320      	movmi	r3, #32
 800f0ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f0be:	0713      	lsls	r3, r2, #28
 800f0c0:	bf44      	itt	mi
 800f0c2:	232b      	movmi	r3, #43	@ 0x2b
 800f0c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f0c8:	f89a 3000 	ldrb.w	r3, [sl]
 800f0cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800f0ce:	d015      	beq.n	800f0fc <_vfiprintf_r+0x120>
 800f0d0:	9a07      	ldr	r2, [sp, #28]
 800f0d2:	4654      	mov	r4, sl
 800f0d4:	2000      	movs	r0, #0
 800f0d6:	f04f 0c0a 	mov.w	ip, #10
 800f0da:	4621      	mov	r1, r4
 800f0dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f0e0:	3b30      	subs	r3, #48	@ 0x30
 800f0e2:	2b09      	cmp	r3, #9
 800f0e4:	d94b      	bls.n	800f17e <_vfiprintf_r+0x1a2>
 800f0e6:	b1b0      	cbz	r0, 800f116 <_vfiprintf_r+0x13a>
 800f0e8:	9207      	str	r2, [sp, #28]
 800f0ea:	e014      	b.n	800f116 <_vfiprintf_r+0x13a>
 800f0ec:	eba0 0308 	sub.w	r3, r0, r8
 800f0f0:	fa09 f303 	lsl.w	r3, r9, r3
 800f0f4:	4313      	orrs	r3, r2
 800f0f6:	9304      	str	r3, [sp, #16]
 800f0f8:	46a2      	mov	sl, r4
 800f0fa:	e7d2      	b.n	800f0a2 <_vfiprintf_r+0xc6>
 800f0fc:	9b03      	ldr	r3, [sp, #12]
 800f0fe:	1d19      	adds	r1, r3, #4
 800f100:	681b      	ldr	r3, [r3, #0]
 800f102:	9103      	str	r1, [sp, #12]
 800f104:	2b00      	cmp	r3, #0
 800f106:	bfbb      	ittet	lt
 800f108:	425b      	neglt	r3, r3
 800f10a:	f042 0202 	orrlt.w	r2, r2, #2
 800f10e:	9307      	strge	r3, [sp, #28]
 800f110:	9307      	strlt	r3, [sp, #28]
 800f112:	bfb8      	it	lt
 800f114:	9204      	strlt	r2, [sp, #16]
 800f116:	7823      	ldrb	r3, [r4, #0]
 800f118:	2b2e      	cmp	r3, #46	@ 0x2e
 800f11a:	d10a      	bne.n	800f132 <_vfiprintf_r+0x156>
 800f11c:	7863      	ldrb	r3, [r4, #1]
 800f11e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f120:	d132      	bne.n	800f188 <_vfiprintf_r+0x1ac>
 800f122:	9b03      	ldr	r3, [sp, #12]
 800f124:	1d1a      	adds	r2, r3, #4
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	9203      	str	r2, [sp, #12]
 800f12a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f12e:	3402      	adds	r4, #2
 800f130:	9305      	str	r3, [sp, #20]
 800f132:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f208 <_vfiprintf_r+0x22c>
 800f136:	7821      	ldrb	r1, [r4, #0]
 800f138:	2203      	movs	r2, #3
 800f13a:	4650      	mov	r0, sl
 800f13c:	f7f1 f848 	bl	80001d0 <memchr>
 800f140:	b138      	cbz	r0, 800f152 <_vfiprintf_r+0x176>
 800f142:	9b04      	ldr	r3, [sp, #16]
 800f144:	eba0 000a 	sub.w	r0, r0, sl
 800f148:	2240      	movs	r2, #64	@ 0x40
 800f14a:	4082      	lsls	r2, r0
 800f14c:	4313      	orrs	r3, r2
 800f14e:	3401      	adds	r4, #1
 800f150:	9304      	str	r3, [sp, #16]
 800f152:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f156:	4829      	ldr	r0, [pc, #164]	@ (800f1fc <_vfiprintf_r+0x220>)
 800f158:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f15c:	2206      	movs	r2, #6
 800f15e:	f7f1 f837 	bl	80001d0 <memchr>
 800f162:	2800      	cmp	r0, #0
 800f164:	d03f      	beq.n	800f1e6 <_vfiprintf_r+0x20a>
 800f166:	4b26      	ldr	r3, [pc, #152]	@ (800f200 <_vfiprintf_r+0x224>)
 800f168:	bb1b      	cbnz	r3, 800f1b2 <_vfiprintf_r+0x1d6>
 800f16a:	9b03      	ldr	r3, [sp, #12]
 800f16c:	3307      	adds	r3, #7
 800f16e:	f023 0307 	bic.w	r3, r3, #7
 800f172:	3308      	adds	r3, #8
 800f174:	9303      	str	r3, [sp, #12]
 800f176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f178:	443b      	add	r3, r7
 800f17a:	9309      	str	r3, [sp, #36]	@ 0x24
 800f17c:	e76a      	b.n	800f054 <_vfiprintf_r+0x78>
 800f17e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f182:	460c      	mov	r4, r1
 800f184:	2001      	movs	r0, #1
 800f186:	e7a8      	b.n	800f0da <_vfiprintf_r+0xfe>
 800f188:	2300      	movs	r3, #0
 800f18a:	3401      	adds	r4, #1
 800f18c:	9305      	str	r3, [sp, #20]
 800f18e:	4619      	mov	r1, r3
 800f190:	f04f 0c0a 	mov.w	ip, #10
 800f194:	4620      	mov	r0, r4
 800f196:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f19a:	3a30      	subs	r2, #48	@ 0x30
 800f19c:	2a09      	cmp	r2, #9
 800f19e:	d903      	bls.n	800f1a8 <_vfiprintf_r+0x1cc>
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d0c6      	beq.n	800f132 <_vfiprintf_r+0x156>
 800f1a4:	9105      	str	r1, [sp, #20]
 800f1a6:	e7c4      	b.n	800f132 <_vfiprintf_r+0x156>
 800f1a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1ac:	4604      	mov	r4, r0
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	e7f0      	b.n	800f194 <_vfiprintf_r+0x1b8>
 800f1b2:	ab03      	add	r3, sp, #12
 800f1b4:	9300      	str	r3, [sp, #0]
 800f1b6:	462a      	mov	r2, r5
 800f1b8:	4b12      	ldr	r3, [pc, #72]	@ (800f204 <_vfiprintf_r+0x228>)
 800f1ba:	a904      	add	r1, sp, #16
 800f1bc:	4630      	mov	r0, r6
 800f1be:	f7fe fa59 	bl	800d674 <_printf_float>
 800f1c2:	4607      	mov	r7, r0
 800f1c4:	1c78      	adds	r0, r7, #1
 800f1c6:	d1d6      	bne.n	800f176 <_vfiprintf_r+0x19a>
 800f1c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f1ca:	07d9      	lsls	r1, r3, #31
 800f1cc:	d405      	bmi.n	800f1da <_vfiprintf_r+0x1fe>
 800f1ce:	89ab      	ldrh	r3, [r5, #12]
 800f1d0:	059a      	lsls	r2, r3, #22
 800f1d2:	d402      	bmi.n	800f1da <_vfiprintf_r+0x1fe>
 800f1d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f1d6:	f7fe ff31 	bl	800e03c <__retarget_lock_release_recursive>
 800f1da:	89ab      	ldrh	r3, [r5, #12]
 800f1dc:	065b      	lsls	r3, r3, #25
 800f1de:	f53f af1f 	bmi.w	800f020 <_vfiprintf_r+0x44>
 800f1e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f1e4:	e71e      	b.n	800f024 <_vfiprintf_r+0x48>
 800f1e6:	ab03      	add	r3, sp, #12
 800f1e8:	9300      	str	r3, [sp, #0]
 800f1ea:	462a      	mov	r2, r5
 800f1ec:	4b05      	ldr	r3, [pc, #20]	@ (800f204 <_vfiprintf_r+0x228>)
 800f1ee:	a904      	add	r1, sp, #16
 800f1f0:	4630      	mov	r0, r6
 800f1f2:	f7fe fcd7 	bl	800dba4 <_printf_i>
 800f1f6:	e7e4      	b.n	800f1c2 <_vfiprintf_r+0x1e6>
 800f1f8:	08010401 	.word	0x08010401
 800f1fc:	0801040b 	.word	0x0801040b
 800f200:	0800d675 	.word	0x0800d675
 800f204:	0800efb7 	.word	0x0800efb7
 800f208:	08010407 	.word	0x08010407

0800f20c <malloc>:
 800f20c:	4b02      	ldr	r3, [pc, #8]	@ (800f218 <malloc+0xc>)
 800f20e:	4601      	mov	r1, r0
 800f210:	6818      	ldr	r0, [r3, #0]
 800f212:	f000 b825 	b.w	800f260 <_malloc_r>
 800f216:	bf00      	nop
 800f218:	20000114 	.word	0x20000114

0800f21c <sbrk_aligned>:
 800f21c:	b570      	push	{r4, r5, r6, lr}
 800f21e:	4e0f      	ldr	r6, [pc, #60]	@ (800f25c <sbrk_aligned+0x40>)
 800f220:	460c      	mov	r4, r1
 800f222:	6831      	ldr	r1, [r6, #0]
 800f224:	4605      	mov	r5, r0
 800f226:	b911      	cbnz	r1, 800f22e <sbrk_aligned+0x12>
 800f228:	f000 feac 	bl	800ff84 <_sbrk_r>
 800f22c:	6030      	str	r0, [r6, #0]
 800f22e:	4621      	mov	r1, r4
 800f230:	4628      	mov	r0, r5
 800f232:	f000 fea7 	bl	800ff84 <_sbrk_r>
 800f236:	1c43      	adds	r3, r0, #1
 800f238:	d103      	bne.n	800f242 <sbrk_aligned+0x26>
 800f23a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f23e:	4620      	mov	r0, r4
 800f240:	bd70      	pop	{r4, r5, r6, pc}
 800f242:	1cc4      	adds	r4, r0, #3
 800f244:	f024 0403 	bic.w	r4, r4, #3
 800f248:	42a0      	cmp	r0, r4
 800f24a:	d0f8      	beq.n	800f23e <sbrk_aligned+0x22>
 800f24c:	1a21      	subs	r1, r4, r0
 800f24e:	4628      	mov	r0, r5
 800f250:	f000 fe98 	bl	800ff84 <_sbrk_r>
 800f254:	3001      	adds	r0, #1
 800f256:	d1f2      	bne.n	800f23e <sbrk_aligned+0x22>
 800f258:	e7ef      	b.n	800f23a <sbrk_aligned+0x1e>
 800f25a:	bf00      	nop
 800f25c:	200023a4 	.word	0x200023a4

0800f260 <_malloc_r>:
 800f260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f264:	1ccd      	adds	r5, r1, #3
 800f266:	f025 0503 	bic.w	r5, r5, #3
 800f26a:	3508      	adds	r5, #8
 800f26c:	2d0c      	cmp	r5, #12
 800f26e:	bf38      	it	cc
 800f270:	250c      	movcc	r5, #12
 800f272:	2d00      	cmp	r5, #0
 800f274:	4606      	mov	r6, r0
 800f276:	db01      	blt.n	800f27c <_malloc_r+0x1c>
 800f278:	42a9      	cmp	r1, r5
 800f27a:	d904      	bls.n	800f286 <_malloc_r+0x26>
 800f27c:	230c      	movs	r3, #12
 800f27e:	6033      	str	r3, [r6, #0]
 800f280:	2000      	movs	r0, #0
 800f282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f286:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f35c <_malloc_r+0xfc>
 800f28a:	f000 f915 	bl	800f4b8 <__malloc_lock>
 800f28e:	f8d8 3000 	ldr.w	r3, [r8]
 800f292:	461c      	mov	r4, r3
 800f294:	bb44      	cbnz	r4, 800f2e8 <_malloc_r+0x88>
 800f296:	4629      	mov	r1, r5
 800f298:	4630      	mov	r0, r6
 800f29a:	f7ff ffbf 	bl	800f21c <sbrk_aligned>
 800f29e:	1c43      	adds	r3, r0, #1
 800f2a0:	4604      	mov	r4, r0
 800f2a2:	d158      	bne.n	800f356 <_malloc_r+0xf6>
 800f2a4:	f8d8 4000 	ldr.w	r4, [r8]
 800f2a8:	4627      	mov	r7, r4
 800f2aa:	2f00      	cmp	r7, #0
 800f2ac:	d143      	bne.n	800f336 <_malloc_r+0xd6>
 800f2ae:	2c00      	cmp	r4, #0
 800f2b0:	d04b      	beq.n	800f34a <_malloc_r+0xea>
 800f2b2:	6823      	ldr	r3, [r4, #0]
 800f2b4:	4639      	mov	r1, r7
 800f2b6:	4630      	mov	r0, r6
 800f2b8:	eb04 0903 	add.w	r9, r4, r3
 800f2bc:	f000 fe62 	bl	800ff84 <_sbrk_r>
 800f2c0:	4581      	cmp	r9, r0
 800f2c2:	d142      	bne.n	800f34a <_malloc_r+0xea>
 800f2c4:	6821      	ldr	r1, [r4, #0]
 800f2c6:	1a6d      	subs	r5, r5, r1
 800f2c8:	4629      	mov	r1, r5
 800f2ca:	4630      	mov	r0, r6
 800f2cc:	f7ff ffa6 	bl	800f21c <sbrk_aligned>
 800f2d0:	3001      	adds	r0, #1
 800f2d2:	d03a      	beq.n	800f34a <_malloc_r+0xea>
 800f2d4:	6823      	ldr	r3, [r4, #0]
 800f2d6:	442b      	add	r3, r5
 800f2d8:	6023      	str	r3, [r4, #0]
 800f2da:	f8d8 3000 	ldr.w	r3, [r8]
 800f2de:	685a      	ldr	r2, [r3, #4]
 800f2e0:	bb62      	cbnz	r2, 800f33c <_malloc_r+0xdc>
 800f2e2:	f8c8 7000 	str.w	r7, [r8]
 800f2e6:	e00f      	b.n	800f308 <_malloc_r+0xa8>
 800f2e8:	6822      	ldr	r2, [r4, #0]
 800f2ea:	1b52      	subs	r2, r2, r5
 800f2ec:	d420      	bmi.n	800f330 <_malloc_r+0xd0>
 800f2ee:	2a0b      	cmp	r2, #11
 800f2f0:	d917      	bls.n	800f322 <_malloc_r+0xc2>
 800f2f2:	1961      	adds	r1, r4, r5
 800f2f4:	42a3      	cmp	r3, r4
 800f2f6:	6025      	str	r5, [r4, #0]
 800f2f8:	bf18      	it	ne
 800f2fa:	6059      	strne	r1, [r3, #4]
 800f2fc:	6863      	ldr	r3, [r4, #4]
 800f2fe:	bf08      	it	eq
 800f300:	f8c8 1000 	streq.w	r1, [r8]
 800f304:	5162      	str	r2, [r4, r5]
 800f306:	604b      	str	r3, [r1, #4]
 800f308:	4630      	mov	r0, r6
 800f30a:	f000 f8db 	bl	800f4c4 <__malloc_unlock>
 800f30e:	f104 000b 	add.w	r0, r4, #11
 800f312:	1d23      	adds	r3, r4, #4
 800f314:	f020 0007 	bic.w	r0, r0, #7
 800f318:	1ac2      	subs	r2, r0, r3
 800f31a:	bf1c      	itt	ne
 800f31c:	1a1b      	subne	r3, r3, r0
 800f31e:	50a3      	strne	r3, [r4, r2]
 800f320:	e7af      	b.n	800f282 <_malloc_r+0x22>
 800f322:	6862      	ldr	r2, [r4, #4]
 800f324:	42a3      	cmp	r3, r4
 800f326:	bf0c      	ite	eq
 800f328:	f8c8 2000 	streq.w	r2, [r8]
 800f32c:	605a      	strne	r2, [r3, #4]
 800f32e:	e7eb      	b.n	800f308 <_malloc_r+0xa8>
 800f330:	4623      	mov	r3, r4
 800f332:	6864      	ldr	r4, [r4, #4]
 800f334:	e7ae      	b.n	800f294 <_malloc_r+0x34>
 800f336:	463c      	mov	r4, r7
 800f338:	687f      	ldr	r7, [r7, #4]
 800f33a:	e7b6      	b.n	800f2aa <_malloc_r+0x4a>
 800f33c:	461a      	mov	r2, r3
 800f33e:	685b      	ldr	r3, [r3, #4]
 800f340:	42a3      	cmp	r3, r4
 800f342:	d1fb      	bne.n	800f33c <_malloc_r+0xdc>
 800f344:	2300      	movs	r3, #0
 800f346:	6053      	str	r3, [r2, #4]
 800f348:	e7de      	b.n	800f308 <_malloc_r+0xa8>
 800f34a:	230c      	movs	r3, #12
 800f34c:	6033      	str	r3, [r6, #0]
 800f34e:	4630      	mov	r0, r6
 800f350:	f000 f8b8 	bl	800f4c4 <__malloc_unlock>
 800f354:	e794      	b.n	800f280 <_malloc_r+0x20>
 800f356:	6005      	str	r5, [r0, #0]
 800f358:	e7d6      	b.n	800f308 <_malloc_r+0xa8>
 800f35a:	bf00      	nop
 800f35c:	200023a8 	.word	0x200023a8

0800f360 <__sflush_r>:
 800f360:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f368:	0716      	lsls	r6, r2, #28
 800f36a:	4605      	mov	r5, r0
 800f36c:	460c      	mov	r4, r1
 800f36e:	d454      	bmi.n	800f41a <__sflush_r+0xba>
 800f370:	684b      	ldr	r3, [r1, #4]
 800f372:	2b00      	cmp	r3, #0
 800f374:	dc02      	bgt.n	800f37c <__sflush_r+0x1c>
 800f376:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f378:	2b00      	cmp	r3, #0
 800f37a:	dd48      	ble.n	800f40e <__sflush_r+0xae>
 800f37c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f37e:	2e00      	cmp	r6, #0
 800f380:	d045      	beq.n	800f40e <__sflush_r+0xae>
 800f382:	2300      	movs	r3, #0
 800f384:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f388:	682f      	ldr	r7, [r5, #0]
 800f38a:	6a21      	ldr	r1, [r4, #32]
 800f38c:	602b      	str	r3, [r5, #0]
 800f38e:	d030      	beq.n	800f3f2 <__sflush_r+0x92>
 800f390:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f392:	89a3      	ldrh	r3, [r4, #12]
 800f394:	0759      	lsls	r1, r3, #29
 800f396:	d505      	bpl.n	800f3a4 <__sflush_r+0x44>
 800f398:	6863      	ldr	r3, [r4, #4]
 800f39a:	1ad2      	subs	r2, r2, r3
 800f39c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f39e:	b10b      	cbz	r3, 800f3a4 <__sflush_r+0x44>
 800f3a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f3a2:	1ad2      	subs	r2, r2, r3
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f3a8:	6a21      	ldr	r1, [r4, #32]
 800f3aa:	4628      	mov	r0, r5
 800f3ac:	47b0      	blx	r6
 800f3ae:	1c43      	adds	r3, r0, #1
 800f3b0:	89a3      	ldrh	r3, [r4, #12]
 800f3b2:	d106      	bne.n	800f3c2 <__sflush_r+0x62>
 800f3b4:	6829      	ldr	r1, [r5, #0]
 800f3b6:	291d      	cmp	r1, #29
 800f3b8:	d82b      	bhi.n	800f412 <__sflush_r+0xb2>
 800f3ba:	4a2a      	ldr	r2, [pc, #168]	@ (800f464 <__sflush_r+0x104>)
 800f3bc:	410a      	asrs	r2, r1
 800f3be:	07d6      	lsls	r6, r2, #31
 800f3c0:	d427      	bmi.n	800f412 <__sflush_r+0xb2>
 800f3c2:	2200      	movs	r2, #0
 800f3c4:	6062      	str	r2, [r4, #4]
 800f3c6:	04d9      	lsls	r1, r3, #19
 800f3c8:	6922      	ldr	r2, [r4, #16]
 800f3ca:	6022      	str	r2, [r4, #0]
 800f3cc:	d504      	bpl.n	800f3d8 <__sflush_r+0x78>
 800f3ce:	1c42      	adds	r2, r0, #1
 800f3d0:	d101      	bne.n	800f3d6 <__sflush_r+0x76>
 800f3d2:	682b      	ldr	r3, [r5, #0]
 800f3d4:	b903      	cbnz	r3, 800f3d8 <__sflush_r+0x78>
 800f3d6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f3d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f3da:	602f      	str	r7, [r5, #0]
 800f3dc:	b1b9      	cbz	r1, 800f40e <__sflush_r+0xae>
 800f3de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f3e2:	4299      	cmp	r1, r3
 800f3e4:	d002      	beq.n	800f3ec <__sflush_r+0x8c>
 800f3e6:	4628      	mov	r0, r5
 800f3e8:	f000 fe2e 	bl	8010048 <_free_r>
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	6363      	str	r3, [r4, #52]	@ 0x34
 800f3f0:	e00d      	b.n	800f40e <__sflush_r+0xae>
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	4628      	mov	r0, r5
 800f3f6:	47b0      	blx	r6
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	1c50      	adds	r0, r2, #1
 800f3fc:	d1c9      	bne.n	800f392 <__sflush_r+0x32>
 800f3fe:	682b      	ldr	r3, [r5, #0]
 800f400:	2b00      	cmp	r3, #0
 800f402:	d0c6      	beq.n	800f392 <__sflush_r+0x32>
 800f404:	2b1d      	cmp	r3, #29
 800f406:	d001      	beq.n	800f40c <__sflush_r+0xac>
 800f408:	2b16      	cmp	r3, #22
 800f40a:	d11e      	bne.n	800f44a <__sflush_r+0xea>
 800f40c:	602f      	str	r7, [r5, #0]
 800f40e:	2000      	movs	r0, #0
 800f410:	e022      	b.n	800f458 <__sflush_r+0xf8>
 800f412:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f416:	b21b      	sxth	r3, r3
 800f418:	e01b      	b.n	800f452 <__sflush_r+0xf2>
 800f41a:	690f      	ldr	r7, [r1, #16]
 800f41c:	2f00      	cmp	r7, #0
 800f41e:	d0f6      	beq.n	800f40e <__sflush_r+0xae>
 800f420:	0793      	lsls	r3, r2, #30
 800f422:	680e      	ldr	r6, [r1, #0]
 800f424:	bf08      	it	eq
 800f426:	694b      	ldreq	r3, [r1, #20]
 800f428:	600f      	str	r7, [r1, #0]
 800f42a:	bf18      	it	ne
 800f42c:	2300      	movne	r3, #0
 800f42e:	eba6 0807 	sub.w	r8, r6, r7
 800f432:	608b      	str	r3, [r1, #8]
 800f434:	f1b8 0f00 	cmp.w	r8, #0
 800f438:	dde9      	ble.n	800f40e <__sflush_r+0xae>
 800f43a:	6a21      	ldr	r1, [r4, #32]
 800f43c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f43e:	4643      	mov	r3, r8
 800f440:	463a      	mov	r2, r7
 800f442:	4628      	mov	r0, r5
 800f444:	47b0      	blx	r6
 800f446:	2800      	cmp	r0, #0
 800f448:	dc08      	bgt.n	800f45c <__sflush_r+0xfc>
 800f44a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f44e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f452:	81a3      	strh	r3, [r4, #12]
 800f454:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f45c:	4407      	add	r7, r0
 800f45e:	eba8 0800 	sub.w	r8, r8, r0
 800f462:	e7e7      	b.n	800f434 <__sflush_r+0xd4>
 800f464:	dfbffffe 	.word	0xdfbffffe

0800f468 <_fflush_r>:
 800f468:	b538      	push	{r3, r4, r5, lr}
 800f46a:	690b      	ldr	r3, [r1, #16]
 800f46c:	4605      	mov	r5, r0
 800f46e:	460c      	mov	r4, r1
 800f470:	b913      	cbnz	r3, 800f478 <_fflush_r+0x10>
 800f472:	2500      	movs	r5, #0
 800f474:	4628      	mov	r0, r5
 800f476:	bd38      	pop	{r3, r4, r5, pc}
 800f478:	b118      	cbz	r0, 800f482 <_fflush_r+0x1a>
 800f47a:	6a03      	ldr	r3, [r0, #32]
 800f47c:	b90b      	cbnz	r3, 800f482 <_fflush_r+0x1a>
 800f47e:	f7fe fd5d 	bl	800df3c <__sinit>
 800f482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d0f3      	beq.n	800f472 <_fflush_r+0xa>
 800f48a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f48c:	07d0      	lsls	r0, r2, #31
 800f48e:	d404      	bmi.n	800f49a <_fflush_r+0x32>
 800f490:	0599      	lsls	r1, r3, #22
 800f492:	d402      	bmi.n	800f49a <_fflush_r+0x32>
 800f494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f496:	f7fe fdd0 	bl	800e03a <__retarget_lock_acquire_recursive>
 800f49a:	4628      	mov	r0, r5
 800f49c:	4621      	mov	r1, r4
 800f49e:	f7ff ff5f 	bl	800f360 <__sflush_r>
 800f4a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f4a4:	07da      	lsls	r2, r3, #31
 800f4a6:	4605      	mov	r5, r0
 800f4a8:	d4e4      	bmi.n	800f474 <_fflush_r+0xc>
 800f4aa:	89a3      	ldrh	r3, [r4, #12]
 800f4ac:	059b      	lsls	r3, r3, #22
 800f4ae:	d4e1      	bmi.n	800f474 <_fflush_r+0xc>
 800f4b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f4b2:	f7fe fdc3 	bl	800e03c <__retarget_lock_release_recursive>
 800f4b6:	e7dd      	b.n	800f474 <_fflush_r+0xc>

0800f4b8 <__malloc_lock>:
 800f4b8:	4801      	ldr	r0, [pc, #4]	@ (800f4c0 <__malloc_lock+0x8>)
 800f4ba:	f7fe bdbe 	b.w	800e03a <__retarget_lock_acquire_recursive>
 800f4be:	bf00      	nop
 800f4c0:	200023a0 	.word	0x200023a0

0800f4c4 <__malloc_unlock>:
 800f4c4:	4801      	ldr	r0, [pc, #4]	@ (800f4cc <__malloc_unlock+0x8>)
 800f4c6:	f7fe bdb9 	b.w	800e03c <__retarget_lock_release_recursive>
 800f4ca:	bf00      	nop
 800f4cc:	200023a0 	.word	0x200023a0

0800f4d0 <_Balloc>:
 800f4d0:	b570      	push	{r4, r5, r6, lr}
 800f4d2:	69c6      	ldr	r6, [r0, #28]
 800f4d4:	4604      	mov	r4, r0
 800f4d6:	460d      	mov	r5, r1
 800f4d8:	b976      	cbnz	r6, 800f4f8 <_Balloc+0x28>
 800f4da:	2010      	movs	r0, #16
 800f4dc:	f7ff fe96 	bl	800f20c <malloc>
 800f4e0:	4602      	mov	r2, r0
 800f4e2:	61e0      	str	r0, [r4, #28]
 800f4e4:	b920      	cbnz	r0, 800f4f0 <_Balloc+0x20>
 800f4e6:	4b18      	ldr	r3, [pc, #96]	@ (800f548 <_Balloc+0x78>)
 800f4e8:	4818      	ldr	r0, [pc, #96]	@ (800f54c <_Balloc+0x7c>)
 800f4ea:	216b      	movs	r1, #107	@ 0x6b
 800f4ec:	f000 fd7a 	bl	800ffe4 <__assert_func>
 800f4f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f4f4:	6006      	str	r6, [r0, #0]
 800f4f6:	60c6      	str	r6, [r0, #12]
 800f4f8:	69e6      	ldr	r6, [r4, #28]
 800f4fa:	68f3      	ldr	r3, [r6, #12]
 800f4fc:	b183      	cbz	r3, 800f520 <_Balloc+0x50>
 800f4fe:	69e3      	ldr	r3, [r4, #28]
 800f500:	68db      	ldr	r3, [r3, #12]
 800f502:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f506:	b9b8      	cbnz	r0, 800f538 <_Balloc+0x68>
 800f508:	2101      	movs	r1, #1
 800f50a:	fa01 f605 	lsl.w	r6, r1, r5
 800f50e:	1d72      	adds	r2, r6, #5
 800f510:	0092      	lsls	r2, r2, #2
 800f512:	4620      	mov	r0, r4
 800f514:	f000 fd84 	bl	8010020 <_calloc_r>
 800f518:	b160      	cbz	r0, 800f534 <_Balloc+0x64>
 800f51a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f51e:	e00e      	b.n	800f53e <_Balloc+0x6e>
 800f520:	2221      	movs	r2, #33	@ 0x21
 800f522:	2104      	movs	r1, #4
 800f524:	4620      	mov	r0, r4
 800f526:	f000 fd7b 	bl	8010020 <_calloc_r>
 800f52a:	69e3      	ldr	r3, [r4, #28]
 800f52c:	60f0      	str	r0, [r6, #12]
 800f52e:	68db      	ldr	r3, [r3, #12]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d1e4      	bne.n	800f4fe <_Balloc+0x2e>
 800f534:	2000      	movs	r0, #0
 800f536:	bd70      	pop	{r4, r5, r6, pc}
 800f538:	6802      	ldr	r2, [r0, #0]
 800f53a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f53e:	2300      	movs	r3, #0
 800f540:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f544:	e7f7      	b.n	800f536 <_Balloc+0x66>
 800f546:	bf00      	nop
 800f548:	08010381 	.word	0x08010381
 800f54c:	08010412 	.word	0x08010412

0800f550 <_Bfree>:
 800f550:	b570      	push	{r4, r5, r6, lr}
 800f552:	69c6      	ldr	r6, [r0, #28]
 800f554:	4605      	mov	r5, r0
 800f556:	460c      	mov	r4, r1
 800f558:	b976      	cbnz	r6, 800f578 <_Bfree+0x28>
 800f55a:	2010      	movs	r0, #16
 800f55c:	f7ff fe56 	bl	800f20c <malloc>
 800f560:	4602      	mov	r2, r0
 800f562:	61e8      	str	r0, [r5, #28]
 800f564:	b920      	cbnz	r0, 800f570 <_Bfree+0x20>
 800f566:	4b09      	ldr	r3, [pc, #36]	@ (800f58c <_Bfree+0x3c>)
 800f568:	4809      	ldr	r0, [pc, #36]	@ (800f590 <_Bfree+0x40>)
 800f56a:	218f      	movs	r1, #143	@ 0x8f
 800f56c:	f000 fd3a 	bl	800ffe4 <__assert_func>
 800f570:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f574:	6006      	str	r6, [r0, #0]
 800f576:	60c6      	str	r6, [r0, #12]
 800f578:	b13c      	cbz	r4, 800f58a <_Bfree+0x3a>
 800f57a:	69eb      	ldr	r3, [r5, #28]
 800f57c:	6862      	ldr	r2, [r4, #4]
 800f57e:	68db      	ldr	r3, [r3, #12]
 800f580:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f584:	6021      	str	r1, [r4, #0]
 800f586:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f58a:	bd70      	pop	{r4, r5, r6, pc}
 800f58c:	08010381 	.word	0x08010381
 800f590:	08010412 	.word	0x08010412

0800f594 <__multadd>:
 800f594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f598:	690d      	ldr	r5, [r1, #16]
 800f59a:	4607      	mov	r7, r0
 800f59c:	460c      	mov	r4, r1
 800f59e:	461e      	mov	r6, r3
 800f5a0:	f101 0c14 	add.w	ip, r1, #20
 800f5a4:	2000      	movs	r0, #0
 800f5a6:	f8dc 3000 	ldr.w	r3, [ip]
 800f5aa:	b299      	uxth	r1, r3
 800f5ac:	fb02 6101 	mla	r1, r2, r1, r6
 800f5b0:	0c1e      	lsrs	r6, r3, #16
 800f5b2:	0c0b      	lsrs	r3, r1, #16
 800f5b4:	fb02 3306 	mla	r3, r2, r6, r3
 800f5b8:	b289      	uxth	r1, r1
 800f5ba:	3001      	adds	r0, #1
 800f5bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f5c0:	4285      	cmp	r5, r0
 800f5c2:	f84c 1b04 	str.w	r1, [ip], #4
 800f5c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f5ca:	dcec      	bgt.n	800f5a6 <__multadd+0x12>
 800f5cc:	b30e      	cbz	r6, 800f612 <__multadd+0x7e>
 800f5ce:	68a3      	ldr	r3, [r4, #8]
 800f5d0:	42ab      	cmp	r3, r5
 800f5d2:	dc19      	bgt.n	800f608 <__multadd+0x74>
 800f5d4:	6861      	ldr	r1, [r4, #4]
 800f5d6:	4638      	mov	r0, r7
 800f5d8:	3101      	adds	r1, #1
 800f5da:	f7ff ff79 	bl	800f4d0 <_Balloc>
 800f5de:	4680      	mov	r8, r0
 800f5e0:	b928      	cbnz	r0, 800f5ee <__multadd+0x5a>
 800f5e2:	4602      	mov	r2, r0
 800f5e4:	4b0c      	ldr	r3, [pc, #48]	@ (800f618 <__multadd+0x84>)
 800f5e6:	480d      	ldr	r0, [pc, #52]	@ (800f61c <__multadd+0x88>)
 800f5e8:	21ba      	movs	r1, #186	@ 0xba
 800f5ea:	f000 fcfb 	bl	800ffe4 <__assert_func>
 800f5ee:	6922      	ldr	r2, [r4, #16]
 800f5f0:	3202      	adds	r2, #2
 800f5f2:	f104 010c 	add.w	r1, r4, #12
 800f5f6:	0092      	lsls	r2, r2, #2
 800f5f8:	300c      	adds	r0, #12
 800f5fa:	f000 fce5 	bl	800ffc8 <memcpy>
 800f5fe:	4621      	mov	r1, r4
 800f600:	4638      	mov	r0, r7
 800f602:	f7ff ffa5 	bl	800f550 <_Bfree>
 800f606:	4644      	mov	r4, r8
 800f608:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f60c:	3501      	adds	r5, #1
 800f60e:	615e      	str	r6, [r3, #20]
 800f610:	6125      	str	r5, [r4, #16]
 800f612:	4620      	mov	r0, r4
 800f614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f618:	080103f0 	.word	0x080103f0
 800f61c:	08010412 	.word	0x08010412

0800f620 <__hi0bits>:
 800f620:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f624:	4603      	mov	r3, r0
 800f626:	bf36      	itet	cc
 800f628:	0403      	lslcc	r3, r0, #16
 800f62a:	2000      	movcs	r0, #0
 800f62c:	2010      	movcc	r0, #16
 800f62e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f632:	bf3c      	itt	cc
 800f634:	021b      	lslcc	r3, r3, #8
 800f636:	3008      	addcc	r0, #8
 800f638:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f63c:	bf3c      	itt	cc
 800f63e:	011b      	lslcc	r3, r3, #4
 800f640:	3004      	addcc	r0, #4
 800f642:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f646:	bf3c      	itt	cc
 800f648:	009b      	lslcc	r3, r3, #2
 800f64a:	3002      	addcc	r0, #2
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	db05      	blt.n	800f65c <__hi0bits+0x3c>
 800f650:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f654:	f100 0001 	add.w	r0, r0, #1
 800f658:	bf08      	it	eq
 800f65a:	2020      	moveq	r0, #32
 800f65c:	4770      	bx	lr

0800f65e <__lo0bits>:
 800f65e:	6803      	ldr	r3, [r0, #0]
 800f660:	4602      	mov	r2, r0
 800f662:	f013 0007 	ands.w	r0, r3, #7
 800f666:	d00b      	beq.n	800f680 <__lo0bits+0x22>
 800f668:	07d9      	lsls	r1, r3, #31
 800f66a:	d421      	bmi.n	800f6b0 <__lo0bits+0x52>
 800f66c:	0798      	lsls	r0, r3, #30
 800f66e:	bf49      	itett	mi
 800f670:	085b      	lsrmi	r3, r3, #1
 800f672:	089b      	lsrpl	r3, r3, #2
 800f674:	2001      	movmi	r0, #1
 800f676:	6013      	strmi	r3, [r2, #0]
 800f678:	bf5c      	itt	pl
 800f67a:	6013      	strpl	r3, [r2, #0]
 800f67c:	2002      	movpl	r0, #2
 800f67e:	4770      	bx	lr
 800f680:	b299      	uxth	r1, r3
 800f682:	b909      	cbnz	r1, 800f688 <__lo0bits+0x2a>
 800f684:	0c1b      	lsrs	r3, r3, #16
 800f686:	2010      	movs	r0, #16
 800f688:	b2d9      	uxtb	r1, r3
 800f68a:	b909      	cbnz	r1, 800f690 <__lo0bits+0x32>
 800f68c:	3008      	adds	r0, #8
 800f68e:	0a1b      	lsrs	r3, r3, #8
 800f690:	0719      	lsls	r1, r3, #28
 800f692:	bf04      	itt	eq
 800f694:	091b      	lsreq	r3, r3, #4
 800f696:	3004      	addeq	r0, #4
 800f698:	0799      	lsls	r1, r3, #30
 800f69a:	bf04      	itt	eq
 800f69c:	089b      	lsreq	r3, r3, #2
 800f69e:	3002      	addeq	r0, #2
 800f6a0:	07d9      	lsls	r1, r3, #31
 800f6a2:	d403      	bmi.n	800f6ac <__lo0bits+0x4e>
 800f6a4:	085b      	lsrs	r3, r3, #1
 800f6a6:	f100 0001 	add.w	r0, r0, #1
 800f6aa:	d003      	beq.n	800f6b4 <__lo0bits+0x56>
 800f6ac:	6013      	str	r3, [r2, #0]
 800f6ae:	4770      	bx	lr
 800f6b0:	2000      	movs	r0, #0
 800f6b2:	4770      	bx	lr
 800f6b4:	2020      	movs	r0, #32
 800f6b6:	4770      	bx	lr

0800f6b8 <__i2b>:
 800f6b8:	b510      	push	{r4, lr}
 800f6ba:	460c      	mov	r4, r1
 800f6bc:	2101      	movs	r1, #1
 800f6be:	f7ff ff07 	bl	800f4d0 <_Balloc>
 800f6c2:	4602      	mov	r2, r0
 800f6c4:	b928      	cbnz	r0, 800f6d2 <__i2b+0x1a>
 800f6c6:	4b05      	ldr	r3, [pc, #20]	@ (800f6dc <__i2b+0x24>)
 800f6c8:	4805      	ldr	r0, [pc, #20]	@ (800f6e0 <__i2b+0x28>)
 800f6ca:	f240 1145 	movw	r1, #325	@ 0x145
 800f6ce:	f000 fc89 	bl	800ffe4 <__assert_func>
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	6144      	str	r4, [r0, #20]
 800f6d6:	6103      	str	r3, [r0, #16]
 800f6d8:	bd10      	pop	{r4, pc}
 800f6da:	bf00      	nop
 800f6dc:	080103f0 	.word	0x080103f0
 800f6e0:	08010412 	.word	0x08010412

0800f6e4 <__multiply>:
 800f6e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6e8:	4614      	mov	r4, r2
 800f6ea:	690a      	ldr	r2, [r1, #16]
 800f6ec:	6923      	ldr	r3, [r4, #16]
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	bfa8      	it	ge
 800f6f2:	4623      	movge	r3, r4
 800f6f4:	460f      	mov	r7, r1
 800f6f6:	bfa4      	itt	ge
 800f6f8:	460c      	movge	r4, r1
 800f6fa:	461f      	movge	r7, r3
 800f6fc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800f700:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800f704:	68a3      	ldr	r3, [r4, #8]
 800f706:	6861      	ldr	r1, [r4, #4]
 800f708:	eb0a 0609 	add.w	r6, sl, r9
 800f70c:	42b3      	cmp	r3, r6
 800f70e:	b085      	sub	sp, #20
 800f710:	bfb8      	it	lt
 800f712:	3101      	addlt	r1, #1
 800f714:	f7ff fedc 	bl	800f4d0 <_Balloc>
 800f718:	b930      	cbnz	r0, 800f728 <__multiply+0x44>
 800f71a:	4602      	mov	r2, r0
 800f71c:	4b44      	ldr	r3, [pc, #272]	@ (800f830 <__multiply+0x14c>)
 800f71e:	4845      	ldr	r0, [pc, #276]	@ (800f834 <__multiply+0x150>)
 800f720:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f724:	f000 fc5e 	bl	800ffe4 <__assert_func>
 800f728:	f100 0514 	add.w	r5, r0, #20
 800f72c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f730:	462b      	mov	r3, r5
 800f732:	2200      	movs	r2, #0
 800f734:	4543      	cmp	r3, r8
 800f736:	d321      	bcc.n	800f77c <__multiply+0x98>
 800f738:	f107 0114 	add.w	r1, r7, #20
 800f73c:	f104 0214 	add.w	r2, r4, #20
 800f740:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800f744:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800f748:	9302      	str	r3, [sp, #8]
 800f74a:	1b13      	subs	r3, r2, r4
 800f74c:	3b15      	subs	r3, #21
 800f74e:	f023 0303 	bic.w	r3, r3, #3
 800f752:	3304      	adds	r3, #4
 800f754:	f104 0715 	add.w	r7, r4, #21
 800f758:	42ba      	cmp	r2, r7
 800f75a:	bf38      	it	cc
 800f75c:	2304      	movcc	r3, #4
 800f75e:	9301      	str	r3, [sp, #4]
 800f760:	9b02      	ldr	r3, [sp, #8]
 800f762:	9103      	str	r1, [sp, #12]
 800f764:	428b      	cmp	r3, r1
 800f766:	d80c      	bhi.n	800f782 <__multiply+0x9e>
 800f768:	2e00      	cmp	r6, #0
 800f76a:	dd03      	ble.n	800f774 <__multiply+0x90>
 800f76c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f770:	2b00      	cmp	r3, #0
 800f772:	d05b      	beq.n	800f82c <__multiply+0x148>
 800f774:	6106      	str	r6, [r0, #16]
 800f776:	b005      	add	sp, #20
 800f778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f77c:	f843 2b04 	str.w	r2, [r3], #4
 800f780:	e7d8      	b.n	800f734 <__multiply+0x50>
 800f782:	f8b1 a000 	ldrh.w	sl, [r1]
 800f786:	f1ba 0f00 	cmp.w	sl, #0
 800f78a:	d024      	beq.n	800f7d6 <__multiply+0xf2>
 800f78c:	f104 0e14 	add.w	lr, r4, #20
 800f790:	46a9      	mov	r9, r5
 800f792:	f04f 0c00 	mov.w	ip, #0
 800f796:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f79a:	f8d9 3000 	ldr.w	r3, [r9]
 800f79e:	fa1f fb87 	uxth.w	fp, r7
 800f7a2:	b29b      	uxth	r3, r3
 800f7a4:	fb0a 330b 	mla	r3, sl, fp, r3
 800f7a8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800f7ac:	f8d9 7000 	ldr.w	r7, [r9]
 800f7b0:	4463      	add	r3, ip
 800f7b2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f7b6:	fb0a c70b 	mla	r7, sl, fp, ip
 800f7ba:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800f7be:	b29b      	uxth	r3, r3
 800f7c0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f7c4:	4572      	cmp	r2, lr
 800f7c6:	f849 3b04 	str.w	r3, [r9], #4
 800f7ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800f7ce:	d8e2      	bhi.n	800f796 <__multiply+0xb2>
 800f7d0:	9b01      	ldr	r3, [sp, #4]
 800f7d2:	f845 c003 	str.w	ip, [r5, r3]
 800f7d6:	9b03      	ldr	r3, [sp, #12]
 800f7d8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f7dc:	3104      	adds	r1, #4
 800f7de:	f1b9 0f00 	cmp.w	r9, #0
 800f7e2:	d021      	beq.n	800f828 <__multiply+0x144>
 800f7e4:	682b      	ldr	r3, [r5, #0]
 800f7e6:	f104 0c14 	add.w	ip, r4, #20
 800f7ea:	46ae      	mov	lr, r5
 800f7ec:	f04f 0a00 	mov.w	sl, #0
 800f7f0:	f8bc b000 	ldrh.w	fp, [ip]
 800f7f4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800f7f8:	fb09 770b 	mla	r7, r9, fp, r7
 800f7fc:	4457      	add	r7, sl
 800f7fe:	b29b      	uxth	r3, r3
 800f800:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800f804:	f84e 3b04 	str.w	r3, [lr], #4
 800f808:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f80c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f810:	f8be 3000 	ldrh.w	r3, [lr]
 800f814:	fb09 330a 	mla	r3, r9, sl, r3
 800f818:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800f81c:	4562      	cmp	r2, ip
 800f81e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f822:	d8e5      	bhi.n	800f7f0 <__multiply+0x10c>
 800f824:	9f01      	ldr	r7, [sp, #4]
 800f826:	51eb      	str	r3, [r5, r7]
 800f828:	3504      	adds	r5, #4
 800f82a:	e799      	b.n	800f760 <__multiply+0x7c>
 800f82c:	3e01      	subs	r6, #1
 800f82e:	e79b      	b.n	800f768 <__multiply+0x84>
 800f830:	080103f0 	.word	0x080103f0
 800f834:	08010412 	.word	0x08010412

0800f838 <__pow5mult>:
 800f838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f83c:	4615      	mov	r5, r2
 800f83e:	f012 0203 	ands.w	r2, r2, #3
 800f842:	4607      	mov	r7, r0
 800f844:	460e      	mov	r6, r1
 800f846:	d007      	beq.n	800f858 <__pow5mult+0x20>
 800f848:	4c25      	ldr	r4, [pc, #148]	@ (800f8e0 <__pow5mult+0xa8>)
 800f84a:	3a01      	subs	r2, #1
 800f84c:	2300      	movs	r3, #0
 800f84e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f852:	f7ff fe9f 	bl	800f594 <__multadd>
 800f856:	4606      	mov	r6, r0
 800f858:	10ad      	asrs	r5, r5, #2
 800f85a:	d03d      	beq.n	800f8d8 <__pow5mult+0xa0>
 800f85c:	69fc      	ldr	r4, [r7, #28]
 800f85e:	b97c      	cbnz	r4, 800f880 <__pow5mult+0x48>
 800f860:	2010      	movs	r0, #16
 800f862:	f7ff fcd3 	bl	800f20c <malloc>
 800f866:	4602      	mov	r2, r0
 800f868:	61f8      	str	r0, [r7, #28]
 800f86a:	b928      	cbnz	r0, 800f878 <__pow5mult+0x40>
 800f86c:	4b1d      	ldr	r3, [pc, #116]	@ (800f8e4 <__pow5mult+0xac>)
 800f86e:	481e      	ldr	r0, [pc, #120]	@ (800f8e8 <__pow5mult+0xb0>)
 800f870:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f874:	f000 fbb6 	bl	800ffe4 <__assert_func>
 800f878:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f87c:	6004      	str	r4, [r0, #0]
 800f87e:	60c4      	str	r4, [r0, #12]
 800f880:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f884:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f888:	b94c      	cbnz	r4, 800f89e <__pow5mult+0x66>
 800f88a:	f240 2171 	movw	r1, #625	@ 0x271
 800f88e:	4638      	mov	r0, r7
 800f890:	f7ff ff12 	bl	800f6b8 <__i2b>
 800f894:	2300      	movs	r3, #0
 800f896:	f8c8 0008 	str.w	r0, [r8, #8]
 800f89a:	4604      	mov	r4, r0
 800f89c:	6003      	str	r3, [r0, #0]
 800f89e:	f04f 0900 	mov.w	r9, #0
 800f8a2:	07eb      	lsls	r3, r5, #31
 800f8a4:	d50a      	bpl.n	800f8bc <__pow5mult+0x84>
 800f8a6:	4631      	mov	r1, r6
 800f8a8:	4622      	mov	r2, r4
 800f8aa:	4638      	mov	r0, r7
 800f8ac:	f7ff ff1a 	bl	800f6e4 <__multiply>
 800f8b0:	4631      	mov	r1, r6
 800f8b2:	4680      	mov	r8, r0
 800f8b4:	4638      	mov	r0, r7
 800f8b6:	f7ff fe4b 	bl	800f550 <_Bfree>
 800f8ba:	4646      	mov	r6, r8
 800f8bc:	106d      	asrs	r5, r5, #1
 800f8be:	d00b      	beq.n	800f8d8 <__pow5mult+0xa0>
 800f8c0:	6820      	ldr	r0, [r4, #0]
 800f8c2:	b938      	cbnz	r0, 800f8d4 <__pow5mult+0x9c>
 800f8c4:	4622      	mov	r2, r4
 800f8c6:	4621      	mov	r1, r4
 800f8c8:	4638      	mov	r0, r7
 800f8ca:	f7ff ff0b 	bl	800f6e4 <__multiply>
 800f8ce:	6020      	str	r0, [r4, #0]
 800f8d0:	f8c0 9000 	str.w	r9, [r0]
 800f8d4:	4604      	mov	r4, r0
 800f8d6:	e7e4      	b.n	800f8a2 <__pow5mult+0x6a>
 800f8d8:	4630      	mov	r0, r6
 800f8da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8de:	bf00      	nop
 800f8e0:	0801046c 	.word	0x0801046c
 800f8e4:	08010381 	.word	0x08010381
 800f8e8:	08010412 	.word	0x08010412

0800f8ec <__lshift>:
 800f8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8f0:	460c      	mov	r4, r1
 800f8f2:	6849      	ldr	r1, [r1, #4]
 800f8f4:	6923      	ldr	r3, [r4, #16]
 800f8f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f8fa:	68a3      	ldr	r3, [r4, #8]
 800f8fc:	4607      	mov	r7, r0
 800f8fe:	4691      	mov	r9, r2
 800f900:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f904:	f108 0601 	add.w	r6, r8, #1
 800f908:	42b3      	cmp	r3, r6
 800f90a:	db0b      	blt.n	800f924 <__lshift+0x38>
 800f90c:	4638      	mov	r0, r7
 800f90e:	f7ff fddf 	bl	800f4d0 <_Balloc>
 800f912:	4605      	mov	r5, r0
 800f914:	b948      	cbnz	r0, 800f92a <__lshift+0x3e>
 800f916:	4602      	mov	r2, r0
 800f918:	4b28      	ldr	r3, [pc, #160]	@ (800f9bc <__lshift+0xd0>)
 800f91a:	4829      	ldr	r0, [pc, #164]	@ (800f9c0 <__lshift+0xd4>)
 800f91c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f920:	f000 fb60 	bl	800ffe4 <__assert_func>
 800f924:	3101      	adds	r1, #1
 800f926:	005b      	lsls	r3, r3, #1
 800f928:	e7ee      	b.n	800f908 <__lshift+0x1c>
 800f92a:	2300      	movs	r3, #0
 800f92c:	f100 0114 	add.w	r1, r0, #20
 800f930:	f100 0210 	add.w	r2, r0, #16
 800f934:	4618      	mov	r0, r3
 800f936:	4553      	cmp	r3, sl
 800f938:	db33      	blt.n	800f9a2 <__lshift+0xb6>
 800f93a:	6920      	ldr	r0, [r4, #16]
 800f93c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f940:	f104 0314 	add.w	r3, r4, #20
 800f944:	f019 091f 	ands.w	r9, r9, #31
 800f948:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f94c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f950:	d02b      	beq.n	800f9aa <__lshift+0xbe>
 800f952:	f1c9 0e20 	rsb	lr, r9, #32
 800f956:	468a      	mov	sl, r1
 800f958:	2200      	movs	r2, #0
 800f95a:	6818      	ldr	r0, [r3, #0]
 800f95c:	fa00 f009 	lsl.w	r0, r0, r9
 800f960:	4310      	orrs	r0, r2
 800f962:	f84a 0b04 	str.w	r0, [sl], #4
 800f966:	f853 2b04 	ldr.w	r2, [r3], #4
 800f96a:	459c      	cmp	ip, r3
 800f96c:	fa22 f20e 	lsr.w	r2, r2, lr
 800f970:	d8f3      	bhi.n	800f95a <__lshift+0x6e>
 800f972:	ebac 0304 	sub.w	r3, ip, r4
 800f976:	3b15      	subs	r3, #21
 800f978:	f023 0303 	bic.w	r3, r3, #3
 800f97c:	3304      	adds	r3, #4
 800f97e:	f104 0015 	add.w	r0, r4, #21
 800f982:	4584      	cmp	ip, r0
 800f984:	bf38      	it	cc
 800f986:	2304      	movcc	r3, #4
 800f988:	50ca      	str	r2, [r1, r3]
 800f98a:	b10a      	cbz	r2, 800f990 <__lshift+0xa4>
 800f98c:	f108 0602 	add.w	r6, r8, #2
 800f990:	3e01      	subs	r6, #1
 800f992:	4638      	mov	r0, r7
 800f994:	612e      	str	r6, [r5, #16]
 800f996:	4621      	mov	r1, r4
 800f998:	f7ff fdda 	bl	800f550 <_Bfree>
 800f99c:	4628      	mov	r0, r5
 800f99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9a2:	f842 0f04 	str.w	r0, [r2, #4]!
 800f9a6:	3301      	adds	r3, #1
 800f9a8:	e7c5      	b.n	800f936 <__lshift+0x4a>
 800f9aa:	3904      	subs	r1, #4
 800f9ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9b0:	f841 2f04 	str.w	r2, [r1, #4]!
 800f9b4:	459c      	cmp	ip, r3
 800f9b6:	d8f9      	bhi.n	800f9ac <__lshift+0xc0>
 800f9b8:	e7ea      	b.n	800f990 <__lshift+0xa4>
 800f9ba:	bf00      	nop
 800f9bc:	080103f0 	.word	0x080103f0
 800f9c0:	08010412 	.word	0x08010412

0800f9c4 <__mcmp>:
 800f9c4:	690a      	ldr	r2, [r1, #16]
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	6900      	ldr	r0, [r0, #16]
 800f9ca:	1a80      	subs	r0, r0, r2
 800f9cc:	b530      	push	{r4, r5, lr}
 800f9ce:	d10e      	bne.n	800f9ee <__mcmp+0x2a>
 800f9d0:	3314      	adds	r3, #20
 800f9d2:	3114      	adds	r1, #20
 800f9d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f9d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f9dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f9e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f9e4:	4295      	cmp	r5, r2
 800f9e6:	d003      	beq.n	800f9f0 <__mcmp+0x2c>
 800f9e8:	d205      	bcs.n	800f9f6 <__mcmp+0x32>
 800f9ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f9ee:	bd30      	pop	{r4, r5, pc}
 800f9f0:	42a3      	cmp	r3, r4
 800f9f2:	d3f3      	bcc.n	800f9dc <__mcmp+0x18>
 800f9f4:	e7fb      	b.n	800f9ee <__mcmp+0x2a>
 800f9f6:	2001      	movs	r0, #1
 800f9f8:	e7f9      	b.n	800f9ee <__mcmp+0x2a>
	...

0800f9fc <__mdiff>:
 800f9fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa00:	4689      	mov	r9, r1
 800fa02:	4606      	mov	r6, r0
 800fa04:	4611      	mov	r1, r2
 800fa06:	4648      	mov	r0, r9
 800fa08:	4614      	mov	r4, r2
 800fa0a:	f7ff ffdb 	bl	800f9c4 <__mcmp>
 800fa0e:	1e05      	subs	r5, r0, #0
 800fa10:	d112      	bne.n	800fa38 <__mdiff+0x3c>
 800fa12:	4629      	mov	r1, r5
 800fa14:	4630      	mov	r0, r6
 800fa16:	f7ff fd5b 	bl	800f4d0 <_Balloc>
 800fa1a:	4602      	mov	r2, r0
 800fa1c:	b928      	cbnz	r0, 800fa2a <__mdiff+0x2e>
 800fa1e:	4b3f      	ldr	r3, [pc, #252]	@ (800fb1c <__mdiff+0x120>)
 800fa20:	f240 2137 	movw	r1, #567	@ 0x237
 800fa24:	483e      	ldr	r0, [pc, #248]	@ (800fb20 <__mdiff+0x124>)
 800fa26:	f000 fadd 	bl	800ffe4 <__assert_func>
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fa30:	4610      	mov	r0, r2
 800fa32:	b003      	add	sp, #12
 800fa34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa38:	bfbc      	itt	lt
 800fa3a:	464b      	movlt	r3, r9
 800fa3c:	46a1      	movlt	r9, r4
 800fa3e:	4630      	mov	r0, r6
 800fa40:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fa44:	bfba      	itte	lt
 800fa46:	461c      	movlt	r4, r3
 800fa48:	2501      	movlt	r5, #1
 800fa4a:	2500      	movge	r5, #0
 800fa4c:	f7ff fd40 	bl	800f4d0 <_Balloc>
 800fa50:	4602      	mov	r2, r0
 800fa52:	b918      	cbnz	r0, 800fa5c <__mdiff+0x60>
 800fa54:	4b31      	ldr	r3, [pc, #196]	@ (800fb1c <__mdiff+0x120>)
 800fa56:	f240 2145 	movw	r1, #581	@ 0x245
 800fa5a:	e7e3      	b.n	800fa24 <__mdiff+0x28>
 800fa5c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fa60:	6926      	ldr	r6, [r4, #16]
 800fa62:	60c5      	str	r5, [r0, #12]
 800fa64:	f109 0310 	add.w	r3, r9, #16
 800fa68:	f109 0514 	add.w	r5, r9, #20
 800fa6c:	f104 0e14 	add.w	lr, r4, #20
 800fa70:	f100 0b14 	add.w	fp, r0, #20
 800fa74:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fa78:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fa7c:	9301      	str	r3, [sp, #4]
 800fa7e:	46d9      	mov	r9, fp
 800fa80:	f04f 0c00 	mov.w	ip, #0
 800fa84:	9b01      	ldr	r3, [sp, #4]
 800fa86:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fa8a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fa8e:	9301      	str	r3, [sp, #4]
 800fa90:	fa1f f38a 	uxth.w	r3, sl
 800fa94:	4619      	mov	r1, r3
 800fa96:	b283      	uxth	r3, r0
 800fa98:	1acb      	subs	r3, r1, r3
 800fa9a:	0c00      	lsrs	r0, r0, #16
 800fa9c:	4463      	add	r3, ip
 800fa9e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800faa2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800faa6:	b29b      	uxth	r3, r3
 800faa8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800faac:	4576      	cmp	r6, lr
 800faae:	f849 3b04 	str.w	r3, [r9], #4
 800fab2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fab6:	d8e5      	bhi.n	800fa84 <__mdiff+0x88>
 800fab8:	1b33      	subs	r3, r6, r4
 800faba:	3b15      	subs	r3, #21
 800fabc:	f023 0303 	bic.w	r3, r3, #3
 800fac0:	3415      	adds	r4, #21
 800fac2:	3304      	adds	r3, #4
 800fac4:	42a6      	cmp	r6, r4
 800fac6:	bf38      	it	cc
 800fac8:	2304      	movcc	r3, #4
 800faca:	441d      	add	r5, r3
 800facc:	445b      	add	r3, fp
 800face:	461e      	mov	r6, r3
 800fad0:	462c      	mov	r4, r5
 800fad2:	4544      	cmp	r4, r8
 800fad4:	d30e      	bcc.n	800faf4 <__mdiff+0xf8>
 800fad6:	f108 0103 	add.w	r1, r8, #3
 800fada:	1b49      	subs	r1, r1, r5
 800fadc:	f021 0103 	bic.w	r1, r1, #3
 800fae0:	3d03      	subs	r5, #3
 800fae2:	45a8      	cmp	r8, r5
 800fae4:	bf38      	it	cc
 800fae6:	2100      	movcc	r1, #0
 800fae8:	440b      	add	r3, r1
 800faea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800faee:	b191      	cbz	r1, 800fb16 <__mdiff+0x11a>
 800faf0:	6117      	str	r7, [r2, #16]
 800faf2:	e79d      	b.n	800fa30 <__mdiff+0x34>
 800faf4:	f854 1b04 	ldr.w	r1, [r4], #4
 800faf8:	46e6      	mov	lr, ip
 800fafa:	0c08      	lsrs	r0, r1, #16
 800fafc:	fa1c fc81 	uxtah	ip, ip, r1
 800fb00:	4471      	add	r1, lr
 800fb02:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fb06:	b289      	uxth	r1, r1
 800fb08:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800fb0c:	f846 1b04 	str.w	r1, [r6], #4
 800fb10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fb14:	e7dd      	b.n	800fad2 <__mdiff+0xd6>
 800fb16:	3f01      	subs	r7, #1
 800fb18:	e7e7      	b.n	800faea <__mdiff+0xee>
 800fb1a:	bf00      	nop
 800fb1c:	080103f0 	.word	0x080103f0
 800fb20:	08010412 	.word	0x08010412

0800fb24 <__d2b>:
 800fb24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fb28:	460f      	mov	r7, r1
 800fb2a:	2101      	movs	r1, #1
 800fb2c:	ec59 8b10 	vmov	r8, r9, d0
 800fb30:	4616      	mov	r6, r2
 800fb32:	f7ff fccd 	bl	800f4d0 <_Balloc>
 800fb36:	4604      	mov	r4, r0
 800fb38:	b930      	cbnz	r0, 800fb48 <__d2b+0x24>
 800fb3a:	4602      	mov	r2, r0
 800fb3c:	4b23      	ldr	r3, [pc, #140]	@ (800fbcc <__d2b+0xa8>)
 800fb3e:	4824      	ldr	r0, [pc, #144]	@ (800fbd0 <__d2b+0xac>)
 800fb40:	f240 310f 	movw	r1, #783	@ 0x30f
 800fb44:	f000 fa4e 	bl	800ffe4 <__assert_func>
 800fb48:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fb4c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fb50:	b10d      	cbz	r5, 800fb56 <__d2b+0x32>
 800fb52:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fb56:	9301      	str	r3, [sp, #4]
 800fb58:	f1b8 0300 	subs.w	r3, r8, #0
 800fb5c:	d023      	beq.n	800fba6 <__d2b+0x82>
 800fb5e:	4668      	mov	r0, sp
 800fb60:	9300      	str	r3, [sp, #0]
 800fb62:	f7ff fd7c 	bl	800f65e <__lo0bits>
 800fb66:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fb6a:	b1d0      	cbz	r0, 800fba2 <__d2b+0x7e>
 800fb6c:	f1c0 0320 	rsb	r3, r0, #32
 800fb70:	fa02 f303 	lsl.w	r3, r2, r3
 800fb74:	430b      	orrs	r3, r1
 800fb76:	40c2      	lsrs	r2, r0
 800fb78:	6163      	str	r3, [r4, #20]
 800fb7a:	9201      	str	r2, [sp, #4]
 800fb7c:	9b01      	ldr	r3, [sp, #4]
 800fb7e:	61a3      	str	r3, [r4, #24]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	bf0c      	ite	eq
 800fb84:	2201      	moveq	r2, #1
 800fb86:	2202      	movne	r2, #2
 800fb88:	6122      	str	r2, [r4, #16]
 800fb8a:	b1a5      	cbz	r5, 800fbb6 <__d2b+0x92>
 800fb8c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fb90:	4405      	add	r5, r0
 800fb92:	603d      	str	r5, [r7, #0]
 800fb94:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fb98:	6030      	str	r0, [r6, #0]
 800fb9a:	4620      	mov	r0, r4
 800fb9c:	b003      	add	sp, #12
 800fb9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fba2:	6161      	str	r1, [r4, #20]
 800fba4:	e7ea      	b.n	800fb7c <__d2b+0x58>
 800fba6:	a801      	add	r0, sp, #4
 800fba8:	f7ff fd59 	bl	800f65e <__lo0bits>
 800fbac:	9b01      	ldr	r3, [sp, #4]
 800fbae:	6163      	str	r3, [r4, #20]
 800fbb0:	3020      	adds	r0, #32
 800fbb2:	2201      	movs	r2, #1
 800fbb4:	e7e8      	b.n	800fb88 <__d2b+0x64>
 800fbb6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fbba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fbbe:	6038      	str	r0, [r7, #0]
 800fbc0:	6918      	ldr	r0, [r3, #16]
 800fbc2:	f7ff fd2d 	bl	800f620 <__hi0bits>
 800fbc6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fbca:	e7e5      	b.n	800fb98 <__d2b+0x74>
 800fbcc:	080103f0 	.word	0x080103f0
 800fbd0:	08010412 	.word	0x08010412

0800fbd4 <__sread>:
 800fbd4:	b510      	push	{r4, lr}
 800fbd6:	460c      	mov	r4, r1
 800fbd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbdc:	f000 f9c0 	bl	800ff60 <_read_r>
 800fbe0:	2800      	cmp	r0, #0
 800fbe2:	bfab      	itete	ge
 800fbe4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fbe6:	89a3      	ldrhlt	r3, [r4, #12]
 800fbe8:	181b      	addge	r3, r3, r0
 800fbea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fbee:	bfac      	ite	ge
 800fbf0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fbf2:	81a3      	strhlt	r3, [r4, #12]
 800fbf4:	bd10      	pop	{r4, pc}

0800fbf6 <__swrite>:
 800fbf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbfa:	461f      	mov	r7, r3
 800fbfc:	898b      	ldrh	r3, [r1, #12]
 800fbfe:	05db      	lsls	r3, r3, #23
 800fc00:	4605      	mov	r5, r0
 800fc02:	460c      	mov	r4, r1
 800fc04:	4616      	mov	r6, r2
 800fc06:	d505      	bpl.n	800fc14 <__swrite+0x1e>
 800fc08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc0c:	2302      	movs	r3, #2
 800fc0e:	2200      	movs	r2, #0
 800fc10:	f000 f994 	bl	800ff3c <_lseek_r>
 800fc14:	89a3      	ldrh	r3, [r4, #12]
 800fc16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc1a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fc1e:	81a3      	strh	r3, [r4, #12]
 800fc20:	4632      	mov	r2, r6
 800fc22:	463b      	mov	r3, r7
 800fc24:	4628      	mov	r0, r5
 800fc26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc2a:	f000 b9bb 	b.w	800ffa4 <_write_r>

0800fc2e <__sseek>:
 800fc2e:	b510      	push	{r4, lr}
 800fc30:	460c      	mov	r4, r1
 800fc32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc36:	f000 f981 	bl	800ff3c <_lseek_r>
 800fc3a:	1c43      	adds	r3, r0, #1
 800fc3c:	89a3      	ldrh	r3, [r4, #12]
 800fc3e:	bf15      	itete	ne
 800fc40:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fc42:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fc46:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fc4a:	81a3      	strheq	r3, [r4, #12]
 800fc4c:	bf18      	it	ne
 800fc4e:	81a3      	strhne	r3, [r4, #12]
 800fc50:	bd10      	pop	{r4, pc}

0800fc52 <__sclose>:
 800fc52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc56:	f000 b93f 	b.w	800fed8 <_close_r>

0800fc5a <_realloc_r>:
 800fc5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc5e:	4680      	mov	r8, r0
 800fc60:	4615      	mov	r5, r2
 800fc62:	460c      	mov	r4, r1
 800fc64:	b921      	cbnz	r1, 800fc70 <_realloc_r+0x16>
 800fc66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc6a:	4611      	mov	r1, r2
 800fc6c:	f7ff baf8 	b.w	800f260 <_malloc_r>
 800fc70:	b92a      	cbnz	r2, 800fc7e <_realloc_r+0x24>
 800fc72:	f000 f9e9 	bl	8010048 <_free_r>
 800fc76:	2400      	movs	r4, #0
 800fc78:	4620      	mov	r0, r4
 800fc7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc7e:	f000 fa3f 	bl	8010100 <_malloc_usable_size_r>
 800fc82:	4285      	cmp	r5, r0
 800fc84:	4606      	mov	r6, r0
 800fc86:	d802      	bhi.n	800fc8e <_realloc_r+0x34>
 800fc88:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fc8c:	d8f4      	bhi.n	800fc78 <_realloc_r+0x1e>
 800fc8e:	4629      	mov	r1, r5
 800fc90:	4640      	mov	r0, r8
 800fc92:	f7ff fae5 	bl	800f260 <_malloc_r>
 800fc96:	4607      	mov	r7, r0
 800fc98:	2800      	cmp	r0, #0
 800fc9a:	d0ec      	beq.n	800fc76 <_realloc_r+0x1c>
 800fc9c:	42b5      	cmp	r5, r6
 800fc9e:	462a      	mov	r2, r5
 800fca0:	4621      	mov	r1, r4
 800fca2:	bf28      	it	cs
 800fca4:	4632      	movcs	r2, r6
 800fca6:	f000 f98f 	bl	800ffc8 <memcpy>
 800fcaa:	4621      	mov	r1, r4
 800fcac:	4640      	mov	r0, r8
 800fcae:	f000 f9cb 	bl	8010048 <_free_r>
 800fcb2:	463c      	mov	r4, r7
 800fcb4:	e7e0      	b.n	800fc78 <_realloc_r+0x1e>

0800fcb6 <__swbuf_r>:
 800fcb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcb8:	460e      	mov	r6, r1
 800fcba:	4614      	mov	r4, r2
 800fcbc:	4605      	mov	r5, r0
 800fcbe:	b118      	cbz	r0, 800fcc8 <__swbuf_r+0x12>
 800fcc0:	6a03      	ldr	r3, [r0, #32]
 800fcc2:	b90b      	cbnz	r3, 800fcc8 <__swbuf_r+0x12>
 800fcc4:	f7fe f93a 	bl	800df3c <__sinit>
 800fcc8:	69a3      	ldr	r3, [r4, #24]
 800fcca:	60a3      	str	r3, [r4, #8]
 800fccc:	89a3      	ldrh	r3, [r4, #12]
 800fcce:	071a      	lsls	r2, r3, #28
 800fcd0:	d501      	bpl.n	800fcd6 <__swbuf_r+0x20>
 800fcd2:	6923      	ldr	r3, [r4, #16]
 800fcd4:	b943      	cbnz	r3, 800fce8 <__swbuf_r+0x32>
 800fcd6:	4621      	mov	r1, r4
 800fcd8:	4628      	mov	r0, r5
 800fcda:	f000 f82b 	bl	800fd34 <__swsetup_r>
 800fcde:	b118      	cbz	r0, 800fce8 <__swbuf_r+0x32>
 800fce0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800fce4:	4638      	mov	r0, r7
 800fce6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fce8:	6823      	ldr	r3, [r4, #0]
 800fcea:	6922      	ldr	r2, [r4, #16]
 800fcec:	1a98      	subs	r0, r3, r2
 800fcee:	6963      	ldr	r3, [r4, #20]
 800fcf0:	b2f6      	uxtb	r6, r6
 800fcf2:	4283      	cmp	r3, r0
 800fcf4:	4637      	mov	r7, r6
 800fcf6:	dc05      	bgt.n	800fd04 <__swbuf_r+0x4e>
 800fcf8:	4621      	mov	r1, r4
 800fcfa:	4628      	mov	r0, r5
 800fcfc:	f7ff fbb4 	bl	800f468 <_fflush_r>
 800fd00:	2800      	cmp	r0, #0
 800fd02:	d1ed      	bne.n	800fce0 <__swbuf_r+0x2a>
 800fd04:	68a3      	ldr	r3, [r4, #8]
 800fd06:	3b01      	subs	r3, #1
 800fd08:	60a3      	str	r3, [r4, #8]
 800fd0a:	6823      	ldr	r3, [r4, #0]
 800fd0c:	1c5a      	adds	r2, r3, #1
 800fd0e:	6022      	str	r2, [r4, #0]
 800fd10:	701e      	strb	r6, [r3, #0]
 800fd12:	6962      	ldr	r2, [r4, #20]
 800fd14:	1c43      	adds	r3, r0, #1
 800fd16:	429a      	cmp	r2, r3
 800fd18:	d004      	beq.n	800fd24 <__swbuf_r+0x6e>
 800fd1a:	89a3      	ldrh	r3, [r4, #12]
 800fd1c:	07db      	lsls	r3, r3, #31
 800fd1e:	d5e1      	bpl.n	800fce4 <__swbuf_r+0x2e>
 800fd20:	2e0a      	cmp	r6, #10
 800fd22:	d1df      	bne.n	800fce4 <__swbuf_r+0x2e>
 800fd24:	4621      	mov	r1, r4
 800fd26:	4628      	mov	r0, r5
 800fd28:	f7ff fb9e 	bl	800f468 <_fflush_r>
 800fd2c:	2800      	cmp	r0, #0
 800fd2e:	d0d9      	beq.n	800fce4 <__swbuf_r+0x2e>
 800fd30:	e7d6      	b.n	800fce0 <__swbuf_r+0x2a>
	...

0800fd34 <__swsetup_r>:
 800fd34:	b538      	push	{r3, r4, r5, lr}
 800fd36:	4b29      	ldr	r3, [pc, #164]	@ (800fddc <__swsetup_r+0xa8>)
 800fd38:	4605      	mov	r5, r0
 800fd3a:	6818      	ldr	r0, [r3, #0]
 800fd3c:	460c      	mov	r4, r1
 800fd3e:	b118      	cbz	r0, 800fd48 <__swsetup_r+0x14>
 800fd40:	6a03      	ldr	r3, [r0, #32]
 800fd42:	b90b      	cbnz	r3, 800fd48 <__swsetup_r+0x14>
 800fd44:	f7fe f8fa 	bl	800df3c <__sinit>
 800fd48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd4c:	0719      	lsls	r1, r3, #28
 800fd4e:	d422      	bmi.n	800fd96 <__swsetup_r+0x62>
 800fd50:	06da      	lsls	r2, r3, #27
 800fd52:	d407      	bmi.n	800fd64 <__swsetup_r+0x30>
 800fd54:	2209      	movs	r2, #9
 800fd56:	602a      	str	r2, [r5, #0]
 800fd58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fd5c:	81a3      	strh	r3, [r4, #12]
 800fd5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fd62:	e033      	b.n	800fdcc <__swsetup_r+0x98>
 800fd64:	0758      	lsls	r0, r3, #29
 800fd66:	d512      	bpl.n	800fd8e <__swsetup_r+0x5a>
 800fd68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fd6a:	b141      	cbz	r1, 800fd7e <__swsetup_r+0x4a>
 800fd6c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fd70:	4299      	cmp	r1, r3
 800fd72:	d002      	beq.n	800fd7a <__swsetup_r+0x46>
 800fd74:	4628      	mov	r0, r5
 800fd76:	f000 f967 	bl	8010048 <_free_r>
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	6363      	str	r3, [r4, #52]	@ 0x34
 800fd7e:	89a3      	ldrh	r3, [r4, #12]
 800fd80:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fd84:	81a3      	strh	r3, [r4, #12]
 800fd86:	2300      	movs	r3, #0
 800fd88:	6063      	str	r3, [r4, #4]
 800fd8a:	6923      	ldr	r3, [r4, #16]
 800fd8c:	6023      	str	r3, [r4, #0]
 800fd8e:	89a3      	ldrh	r3, [r4, #12]
 800fd90:	f043 0308 	orr.w	r3, r3, #8
 800fd94:	81a3      	strh	r3, [r4, #12]
 800fd96:	6923      	ldr	r3, [r4, #16]
 800fd98:	b94b      	cbnz	r3, 800fdae <__swsetup_r+0x7a>
 800fd9a:	89a3      	ldrh	r3, [r4, #12]
 800fd9c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fda0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fda4:	d003      	beq.n	800fdae <__swsetup_r+0x7a>
 800fda6:	4621      	mov	r1, r4
 800fda8:	4628      	mov	r0, r5
 800fdaa:	f000 f83f 	bl	800fe2c <__smakebuf_r>
 800fdae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fdb2:	f013 0201 	ands.w	r2, r3, #1
 800fdb6:	d00a      	beq.n	800fdce <__swsetup_r+0x9a>
 800fdb8:	2200      	movs	r2, #0
 800fdba:	60a2      	str	r2, [r4, #8]
 800fdbc:	6962      	ldr	r2, [r4, #20]
 800fdbe:	4252      	negs	r2, r2
 800fdc0:	61a2      	str	r2, [r4, #24]
 800fdc2:	6922      	ldr	r2, [r4, #16]
 800fdc4:	b942      	cbnz	r2, 800fdd8 <__swsetup_r+0xa4>
 800fdc6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fdca:	d1c5      	bne.n	800fd58 <__swsetup_r+0x24>
 800fdcc:	bd38      	pop	{r3, r4, r5, pc}
 800fdce:	0799      	lsls	r1, r3, #30
 800fdd0:	bf58      	it	pl
 800fdd2:	6962      	ldrpl	r2, [r4, #20]
 800fdd4:	60a2      	str	r2, [r4, #8]
 800fdd6:	e7f4      	b.n	800fdc2 <__swsetup_r+0x8e>
 800fdd8:	2000      	movs	r0, #0
 800fdda:	e7f7      	b.n	800fdcc <__swsetup_r+0x98>
 800fddc:	20000114 	.word	0x20000114

0800fde0 <__swhatbuf_r>:
 800fde0:	b570      	push	{r4, r5, r6, lr}
 800fde2:	460c      	mov	r4, r1
 800fde4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fde8:	2900      	cmp	r1, #0
 800fdea:	b096      	sub	sp, #88	@ 0x58
 800fdec:	4615      	mov	r5, r2
 800fdee:	461e      	mov	r6, r3
 800fdf0:	da0d      	bge.n	800fe0e <__swhatbuf_r+0x2e>
 800fdf2:	89a3      	ldrh	r3, [r4, #12]
 800fdf4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fdf8:	f04f 0100 	mov.w	r1, #0
 800fdfc:	bf14      	ite	ne
 800fdfe:	2340      	movne	r3, #64	@ 0x40
 800fe00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fe04:	2000      	movs	r0, #0
 800fe06:	6031      	str	r1, [r6, #0]
 800fe08:	602b      	str	r3, [r5, #0]
 800fe0a:	b016      	add	sp, #88	@ 0x58
 800fe0c:	bd70      	pop	{r4, r5, r6, pc}
 800fe0e:	466a      	mov	r2, sp
 800fe10:	f000 f872 	bl	800fef8 <_fstat_r>
 800fe14:	2800      	cmp	r0, #0
 800fe16:	dbec      	blt.n	800fdf2 <__swhatbuf_r+0x12>
 800fe18:	9901      	ldr	r1, [sp, #4]
 800fe1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fe1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fe22:	4259      	negs	r1, r3
 800fe24:	4159      	adcs	r1, r3
 800fe26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fe2a:	e7eb      	b.n	800fe04 <__swhatbuf_r+0x24>

0800fe2c <__smakebuf_r>:
 800fe2c:	898b      	ldrh	r3, [r1, #12]
 800fe2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fe30:	079d      	lsls	r5, r3, #30
 800fe32:	4606      	mov	r6, r0
 800fe34:	460c      	mov	r4, r1
 800fe36:	d507      	bpl.n	800fe48 <__smakebuf_r+0x1c>
 800fe38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fe3c:	6023      	str	r3, [r4, #0]
 800fe3e:	6123      	str	r3, [r4, #16]
 800fe40:	2301      	movs	r3, #1
 800fe42:	6163      	str	r3, [r4, #20]
 800fe44:	b003      	add	sp, #12
 800fe46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe48:	ab01      	add	r3, sp, #4
 800fe4a:	466a      	mov	r2, sp
 800fe4c:	f7ff ffc8 	bl	800fde0 <__swhatbuf_r>
 800fe50:	9f00      	ldr	r7, [sp, #0]
 800fe52:	4605      	mov	r5, r0
 800fe54:	4639      	mov	r1, r7
 800fe56:	4630      	mov	r0, r6
 800fe58:	f7ff fa02 	bl	800f260 <_malloc_r>
 800fe5c:	b948      	cbnz	r0, 800fe72 <__smakebuf_r+0x46>
 800fe5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fe62:	059a      	lsls	r2, r3, #22
 800fe64:	d4ee      	bmi.n	800fe44 <__smakebuf_r+0x18>
 800fe66:	f023 0303 	bic.w	r3, r3, #3
 800fe6a:	f043 0302 	orr.w	r3, r3, #2
 800fe6e:	81a3      	strh	r3, [r4, #12]
 800fe70:	e7e2      	b.n	800fe38 <__smakebuf_r+0xc>
 800fe72:	89a3      	ldrh	r3, [r4, #12]
 800fe74:	6020      	str	r0, [r4, #0]
 800fe76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe7a:	81a3      	strh	r3, [r4, #12]
 800fe7c:	9b01      	ldr	r3, [sp, #4]
 800fe7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fe82:	b15b      	cbz	r3, 800fe9c <__smakebuf_r+0x70>
 800fe84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fe88:	4630      	mov	r0, r6
 800fe8a:	f000 f847 	bl	800ff1c <_isatty_r>
 800fe8e:	b128      	cbz	r0, 800fe9c <__smakebuf_r+0x70>
 800fe90:	89a3      	ldrh	r3, [r4, #12]
 800fe92:	f023 0303 	bic.w	r3, r3, #3
 800fe96:	f043 0301 	orr.w	r3, r3, #1
 800fe9a:	81a3      	strh	r3, [r4, #12]
 800fe9c:	89a3      	ldrh	r3, [r4, #12]
 800fe9e:	431d      	orrs	r5, r3
 800fea0:	81a5      	strh	r5, [r4, #12]
 800fea2:	e7cf      	b.n	800fe44 <__smakebuf_r+0x18>

0800fea4 <memmove>:
 800fea4:	4288      	cmp	r0, r1
 800fea6:	b510      	push	{r4, lr}
 800fea8:	eb01 0402 	add.w	r4, r1, r2
 800feac:	d902      	bls.n	800feb4 <memmove+0x10>
 800feae:	4284      	cmp	r4, r0
 800feb0:	4623      	mov	r3, r4
 800feb2:	d807      	bhi.n	800fec4 <memmove+0x20>
 800feb4:	1e43      	subs	r3, r0, #1
 800feb6:	42a1      	cmp	r1, r4
 800feb8:	d008      	beq.n	800fecc <memmove+0x28>
 800feba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800febe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fec2:	e7f8      	b.n	800feb6 <memmove+0x12>
 800fec4:	4402      	add	r2, r0
 800fec6:	4601      	mov	r1, r0
 800fec8:	428a      	cmp	r2, r1
 800feca:	d100      	bne.n	800fece <memmove+0x2a>
 800fecc:	bd10      	pop	{r4, pc}
 800fece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fed2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fed6:	e7f7      	b.n	800fec8 <memmove+0x24>

0800fed8 <_close_r>:
 800fed8:	b538      	push	{r3, r4, r5, lr}
 800feda:	4d06      	ldr	r5, [pc, #24]	@ (800fef4 <_close_r+0x1c>)
 800fedc:	2300      	movs	r3, #0
 800fede:	4604      	mov	r4, r0
 800fee0:	4608      	mov	r0, r1
 800fee2:	602b      	str	r3, [r5, #0]
 800fee4:	f7f2 fab0 	bl	8002448 <_close>
 800fee8:	1c43      	adds	r3, r0, #1
 800feea:	d102      	bne.n	800fef2 <_close_r+0x1a>
 800feec:	682b      	ldr	r3, [r5, #0]
 800feee:	b103      	cbz	r3, 800fef2 <_close_r+0x1a>
 800fef0:	6023      	str	r3, [r4, #0]
 800fef2:	bd38      	pop	{r3, r4, r5, pc}
 800fef4:	200023ac 	.word	0x200023ac

0800fef8 <_fstat_r>:
 800fef8:	b538      	push	{r3, r4, r5, lr}
 800fefa:	4d07      	ldr	r5, [pc, #28]	@ (800ff18 <_fstat_r+0x20>)
 800fefc:	2300      	movs	r3, #0
 800fefe:	4604      	mov	r4, r0
 800ff00:	4608      	mov	r0, r1
 800ff02:	4611      	mov	r1, r2
 800ff04:	602b      	str	r3, [r5, #0]
 800ff06:	f7f2 faab 	bl	8002460 <_fstat>
 800ff0a:	1c43      	adds	r3, r0, #1
 800ff0c:	d102      	bne.n	800ff14 <_fstat_r+0x1c>
 800ff0e:	682b      	ldr	r3, [r5, #0]
 800ff10:	b103      	cbz	r3, 800ff14 <_fstat_r+0x1c>
 800ff12:	6023      	str	r3, [r4, #0]
 800ff14:	bd38      	pop	{r3, r4, r5, pc}
 800ff16:	bf00      	nop
 800ff18:	200023ac 	.word	0x200023ac

0800ff1c <_isatty_r>:
 800ff1c:	b538      	push	{r3, r4, r5, lr}
 800ff1e:	4d06      	ldr	r5, [pc, #24]	@ (800ff38 <_isatty_r+0x1c>)
 800ff20:	2300      	movs	r3, #0
 800ff22:	4604      	mov	r4, r0
 800ff24:	4608      	mov	r0, r1
 800ff26:	602b      	str	r3, [r5, #0]
 800ff28:	f7f2 faaa 	bl	8002480 <_isatty>
 800ff2c:	1c43      	adds	r3, r0, #1
 800ff2e:	d102      	bne.n	800ff36 <_isatty_r+0x1a>
 800ff30:	682b      	ldr	r3, [r5, #0]
 800ff32:	b103      	cbz	r3, 800ff36 <_isatty_r+0x1a>
 800ff34:	6023      	str	r3, [r4, #0]
 800ff36:	bd38      	pop	{r3, r4, r5, pc}
 800ff38:	200023ac 	.word	0x200023ac

0800ff3c <_lseek_r>:
 800ff3c:	b538      	push	{r3, r4, r5, lr}
 800ff3e:	4d07      	ldr	r5, [pc, #28]	@ (800ff5c <_lseek_r+0x20>)
 800ff40:	4604      	mov	r4, r0
 800ff42:	4608      	mov	r0, r1
 800ff44:	4611      	mov	r1, r2
 800ff46:	2200      	movs	r2, #0
 800ff48:	602a      	str	r2, [r5, #0]
 800ff4a:	461a      	mov	r2, r3
 800ff4c:	f7f2 faa3 	bl	8002496 <_lseek>
 800ff50:	1c43      	adds	r3, r0, #1
 800ff52:	d102      	bne.n	800ff5a <_lseek_r+0x1e>
 800ff54:	682b      	ldr	r3, [r5, #0]
 800ff56:	b103      	cbz	r3, 800ff5a <_lseek_r+0x1e>
 800ff58:	6023      	str	r3, [r4, #0]
 800ff5a:	bd38      	pop	{r3, r4, r5, pc}
 800ff5c:	200023ac 	.word	0x200023ac

0800ff60 <_read_r>:
 800ff60:	b538      	push	{r3, r4, r5, lr}
 800ff62:	4d07      	ldr	r5, [pc, #28]	@ (800ff80 <_read_r+0x20>)
 800ff64:	4604      	mov	r4, r0
 800ff66:	4608      	mov	r0, r1
 800ff68:	4611      	mov	r1, r2
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	602a      	str	r2, [r5, #0]
 800ff6e:	461a      	mov	r2, r3
 800ff70:	f7f2 fa31 	bl	80023d6 <_read>
 800ff74:	1c43      	adds	r3, r0, #1
 800ff76:	d102      	bne.n	800ff7e <_read_r+0x1e>
 800ff78:	682b      	ldr	r3, [r5, #0]
 800ff7a:	b103      	cbz	r3, 800ff7e <_read_r+0x1e>
 800ff7c:	6023      	str	r3, [r4, #0]
 800ff7e:	bd38      	pop	{r3, r4, r5, pc}
 800ff80:	200023ac 	.word	0x200023ac

0800ff84 <_sbrk_r>:
 800ff84:	b538      	push	{r3, r4, r5, lr}
 800ff86:	4d06      	ldr	r5, [pc, #24]	@ (800ffa0 <_sbrk_r+0x1c>)
 800ff88:	2300      	movs	r3, #0
 800ff8a:	4604      	mov	r4, r0
 800ff8c:	4608      	mov	r0, r1
 800ff8e:	602b      	str	r3, [r5, #0]
 800ff90:	f7f2 fa8e 	bl	80024b0 <_sbrk>
 800ff94:	1c43      	adds	r3, r0, #1
 800ff96:	d102      	bne.n	800ff9e <_sbrk_r+0x1a>
 800ff98:	682b      	ldr	r3, [r5, #0]
 800ff9a:	b103      	cbz	r3, 800ff9e <_sbrk_r+0x1a>
 800ff9c:	6023      	str	r3, [r4, #0]
 800ff9e:	bd38      	pop	{r3, r4, r5, pc}
 800ffa0:	200023ac 	.word	0x200023ac

0800ffa4 <_write_r>:
 800ffa4:	b538      	push	{r3, r4, r5, lr}
 800ffa6:	4d07      	ldr	r5, [pc, #28]	@ (800ffc4 <_write_r+0x20>)
 800ffa8:	4604      	mov	r4, r0
 800ffaa:	4608      	mov	r0, r1
 800ffac:	4611      	mov	r1, r2
 800ffae:	2200      	movs	r2, #0
 800ffb0:	602a      	str	r2, [r5, #0]
 800ffb2:	461a      	mov	r2, r3
 800ffb4:	f7f2 fa2c 	bl	8002410 <_write>
 800ffb8:	1c43      	adds	r3, r0, #1
 800ffba:	d102      	bne.n	800ffc2 <_write_r+0x1e>
 800ffbc:	682b      	ldr	r3, [r5, #0]
 800ffbe:	b103      	cbz	r3, 800ffc2 <_write_r+0x1e>
 800ffc0:	6023      	str	r3, [r4, #0]
 800ffc2:	bd38      	pop	{r3, r4, r5, pc}
 800ffc4:	200023ac 	.word	0x200023ac

0800ffc8 <memcpy>:
 800ffc8:	440a      	add	r2, r1
 800ffca:	4291      	cmp	r1, r2
 800ffcc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ffd0:	d100      	bne.n	800ffd4 <memcpy+0xc>
 800ffd2:	4770      	bx	lr
 800ffd4:	b510      	push	{r4, lr}
 800ffd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ffda:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ffde:	4291      	cmp	r1, r2
 800ffe0:	d1f9      	bne.n	800ffd6 <memcpy+0xe>
 800ffe2:	bd10      	pop	{r4, pc}

0800ffe4 <__assert_func>:
 800ffe4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ffe6:	4614      	mov	r4, r2
 800ffe8:	461a      	mov	r2, r3
 800ffea:	4b09      	ldr	r3, [pc, #36]	@ (8010010 <__assert_func+0x2c>)
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	4605      	mov	r5, r0
 800fff0:	68d8      	ldr	r0, [r3, #12]
 800fff2:	b954      	cbnz	r4, 801000a <__assert_func+0x26>
 800fff4:	4b07      	ldr	r3, [pc, #28]	@ (8010014 <__assert_func+0x30>)
 800fff6:	461c      	mov	r4, r3
 800fff8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fffc:	9100      	str	r1, [sp, #0]
 800fffe:	462b      	mov	r3, r5
 8010000:	4905      	ldr	r1, [pc, #20]	@ (8010018 <__assert_func+0x34>)
 8010002:	f000 f885 	bl	8010110 <fiprintf>
 8010006:	f000 f8a2 	bl	801014e <abort>
 801000a:	4b04      	ldr	r3, [pc, #16]	@ (801001c <__assert_func+0x38>)
 801000c:	e7f4      	b.n	800fff8 <__assert_func+0x14>
 801000e:	bf00      	nop
 8010010:	20000114 	.word	0x20000114
 8010014:	080106ae 	.word	0x080106ae
 8010018:	08010680 	.word	0x08010680
 801001c:	08010673 	.word	0x08010673

08010020 <_calloc_r>:
 8010020:	b570      	push	{r4, r5, r6, lr}
 8010022:	fba1 5402 	umull	r5, r4, r1, r2
 8010026:	b93c      	cbnz	r4, 8010038 <_calloc_r+0x18>
 8010028:	4629      	mov	r1, r5
 801002a:	f7ff f919 	bl	800f260 <_malloc_r>
 801002e:	4606      	mov	r6, r0
 8010030:	b928      	cbnz	r0, 801003e <_calloc_r+0x1e>
 8010032:	2600      	movs	r6, #0
 8010034:	4630      	mov	r0, r6
 8010036:	bd70      	pop	{r4, r5, r6, pc}
 8010038:	220c      	movs	r2, #12
 801003a:	6002      	str	r2, [r0, #0]
 801003c:	e7f9      	b.n	8010032 <_calloc_r+0x12>
 801003e:	462a      	mov	r2, r5
 8010040:	4621      	mov	r1, r4
 8010042:	f7fd ffc3 	bl	800dfcc <memset>
 8010046:	e7f5      	b.n	8010034 <_calloc_r+0x14>

08010048 <_free_r>:
 8010048:	b538      	push	{r3, r4, r5, lr}
 801004a:	4605      	mov	r5, r0
 801004c:	2900      	cmp	r1, #0
 801004e:	d041      	beq.n	80100d4 <_free_r+0x8c>
 8010050:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010054:	1f0c      	subs	r4, r1, #4
 8010056:	2b00      	cmp	r3, #0
 8010058:	bfb8      	it	lt
 801005a:	18e4      	addlt	r4, r4, r3
 801005c:	f7ff fa2c 	bl	800f4b8 <__malloc_lock>
 8010060:	4a1d      	ldr	r2, [pc, #116]	@ (80100d8 <_free_r+0x90>)
 8010062:	6813      	ldr	r3, [r2, #0]
 8010064:	b933      	cbnz	r3, 8010074 <_free_r+0x2c>
 8010066:	6063      	str	r3, [r4, #4]
 8010068:	6014      	str	r4, [r2, #0]
 801006a:	4628      	mov	r0, r5
 801006c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010070:	f7ff ba28 	b.w	800f4c4 <__malloc_unlock>
 8010074:	42a3      	cmp	r3, r4
 8010076:	d908      	bls.n	801008a <_free_r+0x42>
 8010078:	6820      	ldr	r0, [r4, #0]
 801007a:	1821      	adds	r1, r4, r0
 801007c:	428b      	cmp	r3, r1
 801007e:	bf01      	itttt	eq
 8010080:	6819      	ldreq	r1, [r3, #0]
 8010082:	685b      	ldreq	r3, [r3, #4]
 8010084:	1809      	addeq	r1, r1, r0
 8010086:	6021      	streq	r1, [r4, #0]
 8010088:	e7ed      	b.n	8010066 <_free_r+0x1e>
 801008a:	461a      	mov	r2, r3
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	b10b      	cbz	r3, 8010094 <_free_r+0x4c>
 8010090:	42a3      	cmp	r3, r4
 8010092:	d9fa      	bls.n	801008a <_free_r+0x42>
 8010094:	6811      	ldr	r1, [r2, #0]
 8010096:	1850      	adds	r0, r2, r1
 8010098:	42a0      	cmp	r0, r4
 801009a:	d10b      	bne.n	80100b4 <_free_r+0x6c>
 801009c:	6820      	ldr	r0, [r4, #0]
 801009e:	4401      	add	r1, r0
 80100a0:	1850      	adds	r0, r2, r1
 80100a2:	4283      	cmp	r3, r0
 80100a4:	6011      	str	r1, [r2, #0]
 80100a6:	d1e0      	bne.n	801006a <_free_r+0x22>
 80100a8:	6818      	ldr	r0, [r3, #0]
 80100aa:	685b      	ldr	r3, [r3, #4]
 80100ac:	6053      	str	r3, [r2, #4]
 80100ae:	4408      	add	r0, r1
 80100b0:	6010      	str	r0, [r2, #0]
 80100b2:	e7da      	b.n	801006a <_free_r+0x22>
 80100b4:	d902      	bls.n	80100bc <_free_r+0x74>
 80100b6:	230c      	movs	r3, #12
 80100b8:	602b      	str	r3, [r5, #0]
 80100ba:	e7d6      	b.n	801006a <_free_r+0x22>
 80100bc:	6820      	ldr	r0, [r4, #0]
 80100be:	1821      	adds	r1, r4, r0
 80100c0:	428b      	cmp	r3, r1
 80100c2:	bf04      	itt	eq
 80100c4:	6819      	ldreq	r1, [r3, #0]
 80100c6:	685b      	ldreq	r3, [r3, #4]
 80100c8:	6063      	str	r3, [r4, #4]
 80100ca:	bf04      	itt	eq
 80100cc:	1809      	addeq	r1, r1, r0
 80100ce:	6021      	streq	r1, [r4, #0]
 80100d0:	6054      	str	r4, [r2, #4]
 80100d2:	e7ca      	b.n	801006a <_free_r+0x22>
 80100d4:	bd38      	pop	{r3, r4, r5, pc}
 80100d6:	bf00      	nop
 80100d8:	200023a8 	.word	0x200023a8

080100dc <__ascii_mbtowc>:
 80100dc:	b082      	sub	sp, #8
 80100de:	b901      	cbnz	r1, 80100e2 <__ascii_mbtowc+0x6>
 80100e0:	a901      	add	r1, sp, #4
 80100e2:	b142      	cbz	r2, 80100f6 <__ascii_mbtowc+0x1a>
 80100e4:	b14b      	cbz	r3, 80100fa <__ascii_mbtowc+0x1e>
 80100e6:	7813      	ldrb	r3, [r2, #0]
 80100e8:	600b      	str	r3, [r1, #0]
 80100ea:	7812      	ldrb	r2, [r2, #0]
 80100ec:	1e10      	subs	r0, r2, #0
 80100ee:	bf18      	it	ne
 80100f0:	2001      	movne	r0, #1
 80100f2:	b002      	add	sp, #8
 80100f4:	4770      	bx	lr
 80100f6:	4610      	mov	r0, r2
 80100f8:	e7fb      	b.n	80100f2 <__ascii_mbtowc+0x16>
 80100fa:	f06f 0001 	mvn.w	r0, #1
 80100fe:	e7f8      	b.n	80100f2 <__ascii_mbtowc+0x16>

08010100 <_malloc_usable_size_r>:
 8010100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010104:	1f18      	subs	r0, r3, #4
 8010106:	2b00      	cmp	r3, #0
 8010108:	bfbc      	itt	lt
 801010a:	580b      	ldrlt	r3, [r1, r0]
 801010c:	18c0      	addlt	r0, r0, r3
 801010e:	4770      	bx	lr

08010110 <fiprintf>:
 8010110:	b40e      	push	{r1, r2, r3}
 8010112:	b503      	push	{r0, r1, lr}
 8010114:	4601      	mov	r1, r0
 8010116:	ab03      	add	r3, sp, #12
 8010118:	4805      	ldr	r0, [pc, #20]	@ (8010130 <fiprintf+0x20>)
 801011a:	f853 2b04 	ldr.w	r2, [r3], #4
 801011e:	6800      	ldr	r0, [r0, #0]
 8010120:	9301      	str	r3, [sp, #4]
 8010122:	f7fe ff5b 	bl	800efdc <_vfiprintf_r>
 8010126:	b002      	add	sp, #8
 8010128:	f85d eb04 	ldr.w	lr, [sp], #4
 801012c:	b003      	add	sp, #12
 801012e:	4770      	bx	lr
 8010130:	20000114 	.word	0x20000114

08010134 <__ascii_wctomb>:
 8010134:	4603      	mov	r3, r0
 8010136:	4608      	mov	r0, r1
 8010138:	b141      	cbz	r1, 801014c <__ascii_wctomb+0x18>
 801013a:	2aff      	cmp	r2, #255	@ 0xff
 801013c:	d904      	bls.n	8010148 <__ascii_wctomb+0x14>
 801013e:	228a      	movs	r2, #138	@ 0x8a
 8010140:	601a      	str	r2, [r3, #0]
 8010142:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010146:	4770      	bx	lr
 8010148:	700a      	strb	r2, [r1, #0]
 801014a:	2001      	movs	r0, #1
 801014c:	4770      	bx	lr

0801014e <abort>:
 801014e:	b508      	push	{r3, lr}
 8010150:	2006      	movs	r0, #6
 8010152:	f000 f82b 	bl	80101ac <raise>
 8010156:	2001      	movs	r0, #1
 8010158:	f7f2 f932 	bl	80023c0 <_exit>

0801015c <_raise_r>:
 801015c:	291f      	cmp	r1, #31
 801015e:	b538      	push	{r3, r4, r5, lr}
 8010160:	4605      	mov	r5, r0
 8010162:	460c      	mov	r4, r1
 8010164:	d904      	bls.n	8010170 <_raise_r+0x14>
 8010166:	2316      	movs	r3, #22
 8010168:	6003      	str	r3, [r0, #0]
 801016a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801016e:	bd38      	pop	{r3, r4, r5, pc}
 8010170:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010172:	b112      	cbz	r2, 801017a <_raise_r+0x1e>
 8010174:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010178:	b94b      	cbnz	r3, 801018e <_raise_r+0x32>
 801017a:	4628      	mov	r0, r5
 801017c:	f000 f830 	bl	80101e0 <_getpid_r>
 8010180:	4622      	mov	r2, r4
 8010182:	4601      	mov	r1, r0
 8010184:	4628      	mov	r0, r5
 8010186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801018a:	f000 b817 	b.w	80101bc <_kill_r>
 801018e:	2b01      	cmp	r3, #1
 8010190:	d00a      	beq.n	80101a8 <_raise_r+0x4c>
 8010192:	1c59      	adds	r1, r3, #1
 8010194:	d103      	bne.n	801019e <_raise_r+0x42>
 8010196:	2316      	movs	r3, #22
 8010198:	6003      	str	r3, [r0, #0]
 801019a:	2001      	movs	r0, #1
 801019c:	e7e7      	b.n	801016e <_raise_r+0x12>
 801019e:	2100      	movs	r1, #0
 80101a0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80101a4:	4620      	mov	r0, r4
 80101a6:	4798      	blx	r3
 80101a8:	2000      	movs	r0, #0
 80101aa:	e7e0      	b.n	801016e <_raise_r+0x12>

080101ac <raise>:
 80101ac:	4b02      	ldr	r3, [pc, #8]	@ (80101b8 <raise+0xc>)
 80101ae:	4601      	mov	r1, r0
 80101b0:	6818      	ldr	r0, [r3, #0]
 80101b2:	f7ff bfd3 	b.w	801015c <_raise_r>
 80101b6:	bf00      	nop
 80101b8:	20000114 	.word	0x20000114

080101bc <_kill_r>:
 80101bc:	b538      	push	{r3, r4, r5, lr}
 80101be:	4d07      	ldr	r5, [pc, #28]	@ (80101dc <_kill_r+0x20>)
 80101c0:	2300      	movs	r3, #0
 80101c2:	4604      	mov	r4, r0
 80101c4:	4608      	mov	r0, r1
 80101c6:	4611      	mov	r1, r2
 80101c8:	602b      	str	r3, [r5, #0]
 80101ca:	f7f2 f8e9 	bl	80023a0 <_kill>
 80101ce:	1c43      	adds	r3, r0, #1
 80101d0:	d102      	bne.n	80101d8 <_kill_r+0x1c>
 80101d2:	682b      	ldr	r3, [r5, #0]
 80101d4:	b103      	cbz	r3, 80101d8 <_kill_r+0x1c>
 80101d6:	6023      	str	r3, [r4, #0]
 80101d8:	bd38      	pop	{r3, r4, r5, pc}
 80101da:	bf00      	nop
 80101dc:	200023ac 	.word	0x200023ac

080101e0 <_getpid_r>:
 80101e0:	f7f2 b8d6 	b.w	8002390 <_getpid>

080101e4 <_init>:
 80101e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101e6:	bf00      	nop
 80101e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101ea:	bc08      	pop	{r3}
 80101ec:	469e      	mov	lr, r3
 80101ee:	4770      	bx	lr

080101f0 <_fini>:
 80101f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101f2:	bf00      	nop
 80101f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80101f6:	bc08      	pop	{r3}
 80101f8:	469e      	mov	lr, r3
 80101fa:	4770      	bx	lr
