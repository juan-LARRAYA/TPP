
STM32F405_EPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c30  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  08009dc0  08009dc0  0000adc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4e0  0800a4e0  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4e0  0800a4e0  0000b4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4e8  0800a4e8  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4e8  0800a4e8  0000b4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a4ec  0800a4ec  0000b4ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a4f0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d4  2**0
                  CONTENTS
 10 .bss          000008f4  200001d4  200001d4  0000c1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ac8  20000ac8  0000c1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017662  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003543  00000000  00000000  00023866  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  00026db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ff9  00000000  00000000  00028228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002450e  00000000  00000000  00029221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d92c  00000000  00000000  0004d72f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d44ca  00000000  00000000  0006b05b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013f525  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000067ec  00000000  00000000  0013f568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00145d54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009da8 	.word	0x08009da8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08009da8 	.word	0x08009da8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <strcmp>:
 8000280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000284:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000288:	2a01      	cmp	r2, #1
 800028a:	bf28      	it	cs
 800028c:	429a      	cmpcs	r2, r3
 800028e:	d0f7      	beq.n	8000280 <strcmp>
 8000290:	1ad0      	subs	r0, r2, r3
 8000292:	4770      	bx	lr

08000294 <__aeabi_drsub>:
 8000294:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000298:	e002      	b.n	80002a0 <__adddf3>
 800029a:	bf00      	nop

0800029c <__aeabi_dsub>:
 800029c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002a0 <__adddf3>:
 80002a0:	b530      	push	{r4, r5, lr}
 80002a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002aa:	ea94 0f05 	teq	r4, r5
 80002ae:	bf08      	it	eq
 80002b0:	ea90 0f02 	teqeq	r0, r2
 80002b4:	bf1f      	itttt	ne
 80002b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c6:	f000 80e2 	beq.w	800048e <__adddf3+0x1ee>
 80002ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002d2:	bfb8      	it	lt
 80002d4:	426d      	neglt	r5, r5
 80002d6:	dd0c      	ble.n	80002f2 <__adddf3+0x52>
 80002d8:	442c      	add	r4, r5
 80002da:	ea80 0202 	eor.w	r2, r0, r2
 80002de:	ea81 0303 	eor.w	r3, r1, r3
 80002e2:	ea82 0000 	eor.w	r0, r2, r0
 80002e6:	ea83 0101 	eor.w	r1, r3, r1
 80002ea:	ea80 0202 	eor.w	r2, r0, r2
 80002ee:	ea81 0303 	eor.w	r3, r1, r3
 80002f2:	2d36      	cmp	r5, #54	@ 0x36
 80002f4:	bf88      	it	hi
 80002f6:	bd30      	pophi	{r4, r5, pc}
 80002f8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000300:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000304:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x70>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000314:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000318:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800031c:	d002      	beq.n	8000324 <__adddf3+0x84>
 800031e:	4252      	negs	r2, r2
 8000320:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000324:	ea94 0f05 	teq	r4, r5
 8000328:	f000 80a7 	beq.w	800047a <__adddf3+0x1da>
 800032c:	f1a4 0401 	sub.w	r4, r4, #1
 8000330:	f1d5 0e20 	rsbs	lr, r5, #32
 8000334:	db0d      	blt.n	8000352 <__adddf3+0xb2>
 8000336:	fa02 fc0e 	lsl.w	ip, r2, lr
 800033a:	fa22 f205 	lsr.w	r2, r2, r5
 800033e:	1880      	adds	r0, r0, r2
 8000340:	f141 0100 	adc.w	r1, r1, #0
 8000344:	fa03 f20e 	lsl.w	r2, r3, lr
 8000348:	1880      	adds	r0, r0, r2
 800034a:	fa43 f305 	asr.w	r3, r3, r5
 800034e:	4159      	adcs	r1, r3
 8000350:	e00e      	b.n	8000370 <__adddf3+0xd0>
 8000352:	f1a5 0520 	sub.w	r5, r5, #32
 8000356:	f10e 0e20 	add.w	lr, lr, #32
 800035a:	2a01      	cmp	r2, #1
 800035c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000360:	bf28      	it	cs
 8000362:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	18c0      	adds	r0, r0, r3
 800036c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000370:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000374:	d507      	bpl.n	8000386 <__adddf3+0xe6>
 8000376:	f04f 0e00 	mov.w	lr, #0
 800037a:	f1dc 0c00 	rsbs	ip, ip, #0
 800037e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000382:	eb6e 0101 	sbc.w	r1, lr, r1
 8000386:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800038a:	d31b      	bcc.n	80003c4 <__adddf3+0x124>
 800038c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000390:	d30c      	bcc.n	80003ac <__adddf3+0x10c>
 8000392:	0849      	lsrs	r1, r1, #1
 8000394:	ea5f 0030 	movs.w	r0, r0, rrx
 8000398:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800039c:	f104 0401 	add.w	r4, r4, #1
 80003a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a8:	f080 809a 	bcs.w	80004e0 <__adddf3+0x240>
 80003ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003b0:	bf08      	it	eq
 80003b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b6:	f150 0000 	adcs.w	r0, r0, #0
 80003ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003be:	ea41 0105 	orr.w	r1, r1, r5
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c8:	4140      	adcs	r0, r0
 80003ca:	eb41 0101 	adc.w	r1, r1, r1
 80003ce:	3c01      	subs	r4, #1
 80003d0:	bf28      	it	cs
 80003d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d6:	d2e9      	bcs.n	80003ac <__adddf3+0x10c>
 80003d8:	f091 0f00 	teq	r1, #0
 80003dc:	bf04      	itt	eq
 80003de:	4601      	moveq	r1, r0
 80003e0:	2000      	moveq	r0, #0
 80003e2:	fab1 f381 	clz	r3, r1
 80003e6:	bf08      	it	eq
 80003e8:	3320      	addeq	r3, #32
 80003ea:	f1a3 030b 	sub.w	r3, r3, #11
 80003ee:	f1b3 0220 	subs.w	r2, r3, #32
 80003f2:	da0c      	bge.n	800040e <__adddf3+0x16e>
 80003f4:	320c      	adds	r2, #12
 80003f6:	dd08      	ble.n	800040a <__adddf3+0x16a>
 80003f8:	f102 0c14 	add.w	ip, r2, #20
 80003fc:	f1c2 020c 	rsb	r2, r2, #12
 8000400:	fa01 f00c 	lsl.w	r0, r1, ip
 8000404:	fa21 f102 	lsr.w	r1, r1, r2
 8000408:	e00c      	b.n	8000424 <__adddf3+0x184>
 800040a:	f102 0214 	add.w	r2, r2, #20
 800040e:	bfd8      	it	le
 8000410:	f1c2 0c20 	rsble	ip, r2, #32
 8000414:	fa01 f102 	lsl.w	r1, r1, r2
 8000418:	fa20 fc0c 	lsr.w	ip, r0, ip
 800041c:	bfdc      	itt	le
 800041e:	ea41 010c 	orrle.w	r1, r1, ip
 8000422:	4090      	lslle	r0, r2
 8000424:	1ae4      	subs	r4, r4, r3
 8000426:	bfa2      	ittt	ge
 8000428:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800042c:	4329      	orrge	r1, r5
 800042e:	bd30      	popge	{r4, r5, pc}
 8000430:	ea6f 0404 	mvn.w	r4, r4
 8000434:	3c1f      	subs	r4, #31
 8000436:	da1c      	bge.n	8000472 <__adddf3+0x1d2>
 8000438:	340c      	adds	r4, #12
 800043a:	dc0e      	bgt.n	800045a <__adddf3+0x1ba>
 800043c:	f104 0414 	add.w	r4, r4, #20
 8000440:	f1c4 0220 	rsb	r2, r4, #32
 8000444:	fa20 f004 	lsr.w	r0, r0, r4
 8000448:	fa01 f302 	lsl.w	r3, r1, r2
 800044c:	ea40 0003 	orr.w	r0, r0, r3
 8000450:	fa21 f304 	lsr.w	r3, r1, r4
 8000454:	ea45 0103 	orr.w	r1, r5, r3
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	f1c4 040c 	rsb	r4, r4, #12
 800045e:	f1c4 0220 	rsb	r2, r4, #32
 8000462:	fa20 f002 	lsr.w	r0, r0, r2
 8000466:	fa01 f304 	lsl.w	r3, r1, r4
 800046a:	ea40 0003 	orr.w	r0, r0, r3
 800046e:	4629      	mov	r1, r5
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	fa21 f004 	lsr.w	r0, r1, r4
 8000476:	4629      	mov	r1, r5
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	f094 0f00 	teq	r4, #0
 800047e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000482:	bf06      	itte	eq
 8000484:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000488:	3401      	addeq	r4, #1
 800048a:	3d01      	subne	r5, #1
 800048c:	e74e      	b.n	800032c <__adddf3+0x8c>
 800048e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000492:	bf18      	it	ne
 8000494:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000498:	d029      	beq.n	80004ee <__adddf3+0x24e>
 800049a:	ea94 0f05 	teq	r4, r5
 800049e:	bf08      	it	eq
 80004a0:	ea90 0f02 	teqeq	r0, r2
 80004a4:	d005      	beq.n	80004b2 <__adddf3+0x212>
 80004a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80004aa:	bf04      	itt	eq
 80004ac:	4619      	moveq	r1, r3
 80004ae:	4610      	moveq	r0, r2
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	ea91 0f03 	teq	r1, r3
 80004b6:	bf1e      	ittt	ne
 80004b8:	2100      	movne	r1, #0
 80004ba:	2000      	movne	r0, #0
 80004bc:	bd30      	popne	{r4, r5, pc}
 80004be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004c2:	d105      	bne.n	80004d0 <__adddf3+0x230>
 80004c4:	0040      	lsls	r0, r0, #1
 80004c6:	4149      	adcs	r1, r1
 80004c8:	bf28      	it	cs
 80004ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d4:	bf3c      	itt	cc
 80004d6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004da:	bd30      	popcc	{r4, r5, pc}
 80004dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e8:	f04f 0000 	mov.w	r0, #0
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004f2:	bf1a      	itte	ne
 80004f4:	4619      	movne	r1, r3
 80004f6:	4610      	movne	r0, r2
 80004f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004fc:	bf1c      	itt	ne
 80004fe:	460b      	movne	r3, r1
 8000500:	4602      	movne	r2, r0
 8000502:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000506:	bf06      	itte	eq
 8000508:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800050c:	ea91 0f03 	teqeq	r1, r3
 8000510:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	bf00      	nop

08000518 <__aeabi_ui2d>:
 8000518:	f090 0f00 	teq	r0, #0
 800051c:	bf04      	itt	eq
 800051e:	2100      	moveq	r1, #0
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000528:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052c:	f04f 0500 	mov.w	r5, #0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e750      	b.n	80003d8 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_i2d>:
 8000538:	f090 0f00 	teq	r0, #0
 800053c:	bf04      	itt	eq
 800053e:	2100      	moveq	r1, #0
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000548:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800054c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000550:	bf48      	it	mi
 8000552:	4240      	negmi	r0, r0
 8000554:	f04f 0100 	mov.w	r1, #0
 8000558:	e73e      	b.n	80003d8 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_f2d>:
 800055c:	0042      	lsls	r2, r0, #1
 800055e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000562:	ea4f 0131 	mov.w	r1, r1, rrx
 8000566:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800056a:	bf1f      	itttt	ne
 800056c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000570:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000574:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000578:	4770      	bxne	lr
 800057a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057e:	bf08      	it	eq
 8000580:	4770      	bxeq	lr
 8000582:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000586:	bf04      	itt	eq
 8000588:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000594:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000598:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800059c:	e71c      	b.n	80003d8 <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_ul2d>:
 80005a0:	ea50 0201 	orrs.w	r2, r0, r1
 80005a4:	bf08      	it	eq
 80005a6:	4770      	bxeq	lr
 80005a8:	b530      	push	{r4, r5, lr}
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	e00a      	b.n	80005c6 <__aeabi_l2d+0x16>

080005b0 <__aeabi_l2d>:
 80005b0:	ea50 0201 	orrs.w	r2, r0, r1
 80005b4:	bf08      	it	eq
 80005b6:	4770      	bxeq	lr
 80005b8:	b530      	push	{r4, r5, lr}
 80005ba:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005be:	d502      	bpl.n	80005c6 <__aeabi_l2d+0x16>
 80005c0:	4240      	negs	r0, r0
 80005c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005ca:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005d2:	f43f aed8 	beq.w	8000386 <__adddf3+0xe6>
 80005d6:	f04f 0203 	mov.w	r2, #3
 80005da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005de:	bf18      	it	ne
 80005e0:	3203      	addne	r2, #3
 80005e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e6:	bf18      	it	ne
 80005e8:	3203      	addne	r2, #3
 80005ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ee:	f1c2 0320 	rsb	r3, r2, #32
 80005f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f6:	fa20 f002 	lsr.w	r0, r0, r2
 80005fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fe:	ea40 000e 	orr.w	r0, r0, lr
 8000602:	fa21 f102 	lsr.w	r1, r1, r2
 8000606:	4414      	add	r4, r2
 8000608:	e6bd      	b.n	8000386 <__adddf3+0xe6>
 800060a:	bf00      	nop

0800060c <__aeabi_dmul>:
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000612:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000616:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800061a:	bf1d      	ittte	ne
 800061c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000620:	ea94 0f0c 	teqne	r4, ip
 8000624:	ea95 0f0c 	teqne	r5, ip
 8000628:	f000 f8de 	bleq	80007e8 <__aeabi_dmul+0x1dc>
 800062c:	442c      	add	r4, r5
 800062e:	ea81 0603 	eor.w	r6, r1, r3
 8000632:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000636:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800063a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063e:	bf18      	it	ne
 8000640:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000644:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000648:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800064c:	d038      	beq.n	80006c0 <__aeabi_dmul+0xb4>
 800064e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000652:	f04f 0500 	mov.w	r5, #0
 8000656:	fbe1 e502 	umlal	lr, r5, r1, r2
 800065a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000662:	f04f 0600 	mov.w	r6, #0
 8000666:	fbe1 5603 	umlal	r5, r6, r1, r3
 800066a:	f09c 0f00 	teq	ip, #0
 800066e:	bf18      	it	ne
 8000670:	f04e 0e01 	orrne.w	lr, lr, #1
 8000674:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000678:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800067c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000680:	d204      	bcs.n	800068c <__aeabi_dmul+0x80>
 8000682:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000686:	416d      	adcs	r5, r5
 8000688:	eb46 0606 	adc.w	r6, r6, r6
 800068c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000690:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000694:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000698:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800069c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006a0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a4:	bf88      	it	hi
 80006a6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006aa:	d81e      	bhi.n	80006ea <__aeabi_dmul+0xde>
 80006ac:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006b0:	bf08      	it	eq
 80006b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b6:	f150 0000 	adcs.w	r0, r0, #0
 80006ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c4:	ea46 0101 	orr.w	r1, r6, r1
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	ea81 0103 	eor.w	r1, r1, r3
 80006d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d4:	bfc2      	ittt	gt
 80006d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006de:	bd70      	popgt	{r4, r5, r6, pc}
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e4:	f04f 0e00 	mov.w	lr, #0
 80006e8:	3c01      	subs	r4, #1
 80006ea:	f300 80ab 	bgt.w	8000844 <__aeabi_dmul+0x238>
 80006ee:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006f2:	bfde      	ittt	le
 80006f4:	2000      	movle	r0, #0
 80006f6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006fa:	bd70      	pople	{r4, r5, r6, pc}
 80006fc:	f1c4 0400 	rsb	r4, r4, #0
 8000700:	3c20      	subs	r4, #32
 8000702:	da35      	bge.n	8000770 <__aeabi_dmul+0x164>
 8000704:	340c      	adds	r4, #12
 8000706:	dc1b      	bgt.n	8000740 <__aeabi_dmul+0x134>
 8000708:	f104 0414 	add.w	r4, r4, #20
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f305 	lsl.w	r3, r0, r5
 8000714:	fa20 f004 	lsr.w	r0, r0, r4
 8000718:	fa01 f205 	lsl.w	r2, r1, r5
 800071c:	ea40 0002 	orr.w	r0, r0, r2
 8000720:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000724:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800072c:	fa21 f604 	lsr.w	r6, r1, r4
 8000730:	eb42 0106 	adc.w	r1, r2, r6
 8000734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000738:	bf08      	it	eq
 800073a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073e:	bd70      	pop	{r4, r5, r6, pc}
 8000740:	f1c4 040c 	rsb	r4, r4, #12
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f304 	lsl.w	r3, r0, r4
 800074c:	fa20 f005 	lsr.w	r0, r0, r5
 8000750:	fa01 f204 	lsl.w	r2, r1, r4
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	f141 0100 	adc.w	r1, r1, #0
 8000764:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000768:	bf08      	it	eq
 800076a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076e:	bd70      	pop	{r4, r5, r6, pc}
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f205 	lsl.w	r2, r0, r5
 8000778:	ea4e 0e02 	orr.w	lr, lr, r2
 800077c:	fa20 f304 	lsr.w	r3, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea43 0302 	orr.w	r3, r3, r2
 8000788:	fa21 f004 	lsr.w	r0, r1, r4
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	fa21 f204 	lsr.w	r2, r1, r4
 8000794:	ea20 0002 	bic.w	r0, r0, r2
 8000798:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f094 0f00 	teq	r4, #0
 80007ac:	d10f      	bne.n	80007ce <__aeabi_dmul+0x1c2>
 80007ae:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007b2:	0040      	lsls	r0, r0, #1
 80007b4:	eb41 0101 	adc.w	r1, r1, r1
 80007b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007bc:	bf08      	it	eq
 80007be:	3c01      	subeq	r4, #1
 80007c0:	d0f7      	beq.n	80007b2 <__aeabi_dmul+0x1a6>
 80007c2:	ea41 0106 	orr.w	r1, r1, r6
 80007c6:	f095 0f00 	teq	r5, #0
 80007ca:	bf18      	it	ne
 80007cc:	4770      	bxne	lr
 80007ce:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007d2:	0052      	lsls	r2, r2, #1
 80007d4:	eb43 0303 	adc.w	r3, r3, r3
 80007d8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007dc:	bf08      	it	eq
 80007de:	3d01      	subeq	r5, #1
 80007e0:	d0f7      	beq.n	80007d2 <__aeabi_dmul+0x1c6>
 80007e2:	ea43 0306 	orr.w	r3, r3, r6
 80007e6:	4770      	bx	lr
 80007e8:	ea94 0f0c 	teq	r4, ip
 80007ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007f0:	bf18      	it	ne
 80007f2:	ea95 0f0c 	teqne	r5, ip
 80007f6:	d00c      	beq.n	8000812 <__aeabi_dmul+0x206>
 80007f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fc:	bf18      	it	ne
 80007fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000802:	d1d1      	bne.n	80007a8 <__aeabi_dmul+0x19c>
 8000804:	ea81 0103 	eor.w	r1, r1, r3
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000816:	bf06      	itte	eq
 8000818:	4610      	moveq	r0, r2
 800081a:	4619      	moveq	r1, r3
 800081c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000820:	d019      	beq.n	8000856 <__aeabi_dmul+0x24a>
 8000822:	ea94 0f0c 	teq	r4, ip
 8000826:	d102      	bne.n	800082e <__aeabi_dmul+0x222>
 8000828:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800082c:	d113      	bne.n	8000856 <__aeabi_dmul+0x24a>
 800082e:	ea95 0f0c 	teq	r5, ip
 8000832:	d105      	bne.n	8000840 <__aeabi_dmul+0x234>
 8000834:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000838:	bf1c      	itt	ne
 800083a:	4610      	movne	r0, r2
 800083c:	4619      	movne	r1, r3
 800083e:	d10a      	bne.n	8000856 <__aeabi_dmul+0x24a>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800084c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800085a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085e:	bd70      	pop	{r4, r5, r6, pc}

08000860 <__aeabi_ddiv>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8a7 	bleq	80009ce <__aeabi_ddiv+0x16e>
 8000880:	eba4 0405 	sub.w	r4, r4, r5
 8000884:	ea81 0e03 	eor.w	lr, r1, r3
 8000888:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800088c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000890:	f000 8088 	beq.w	80009a4 <__aeabi_ddiv+0x144>
 8000894:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000898:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800089c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b8:	429d      	cmp	r5, r3
 80008ba:	bf08      	it	eq
 80008bc:	4296      	cmpeq	r6, r2
 80008be:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008c2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c6:	d202      	bcs.n	80008ce <__aeabi_ddiv+0x6e>
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	1ab6      	subs	r6, r6, r2
 80008d0:	eb65 0503 	sbc.w	r5, r5, r3
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008de:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000902:	bf22      	ittt	cs
 8000904:	1ab6      	subcs	r6, r6, r2
 8000906:	4675      	movcs	r5, lr
 8000908:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	ebb6 0e02 	subs.w	lr, r6, r2
 8000916:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091a:	bf22      	ittt	cs
 800091c:	1ab6      	subcs	r6, r6, r2
 800091e:	4675      	movcs	r5, lr
 8000920:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	ebb6 0e02 	subs.w	lr, r6, r2
 800092e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000932:	bf22      	ittt	cs
 8000934:	1ab6      	subcs	r6, r6, r2
 8000936:	4675      	movcs	r5, lr
 8000938:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800093c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000940:	d018      	beq.n	8000974 <__aeabi_ddiv+0x114>
 8000942:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000946:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800094a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000952:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000956:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800095a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095e:	d1c0      	bne.n	80008e2 <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	d10b      	bne.n	800097e <__aeabi_ddiv+0x11e>
 8000966:	ea41 0100 	orr.w	r1, r1, r0
 800096a:	f04f 0000 	mov.w	r0, #0
 800096e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000972:	e7b6      	b.n	80008e2 <__aeabi_ddiv+0x82>
 8000974:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000978:	bf04      	itt	eq
 800097a:	4301      	orreq	r1, r0
 800097c:	2000      	moveq	r0, #0
 800097e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000982:	bf88      	it	hi
 8000984:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000988:	f63f aeaf 	bhi.w	80006ea <__aeabi_dmul+0xde>
 800098c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000990:	bf04      	itt	eq
 8000992:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000996:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800099a:	f150 0000 	adcs.w	r0, r0, #0
 800099e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009a2:	bd70      	pop	{r4, r5, r6, pc}
 80009a4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009b0:	bfc2      	ittt	gt
 80009b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ba:	bd70      	popgt	{r4, r5, r6, pc}
 80009bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009c0:	f04f 0e00 	mov.w	lr, #0
 80009c4:	3c01      	subs	r4, #1
 80009c6:	e690      	b.n	80006ea <__aeabi_dmul+0xde>
 80009c8:	ea45 0e06 	orr.w	lr, r5, r6
 80009cc:	e68d      	b.n	80006ea <__aeabi_dmul+0xde>
 80009ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009d2:	ea94 0f0c 	teq	r4, ip
 80009d6:	bf08      	it	eq
 80009d8:	ea95 0f0c 	teqeq	r5, ip
 80009dc:	f43f af3b 	beq.w	8000856 <__aeabi_dmul+0x24a>
 80009e0:	ea94 0f0c 	teq	r4, ip
 80009e4:	d10a      	bne.n	80009fc <__aeabi_ddiv+0x19c>
 80009e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ea:	f47f af34 	bne.w	8000856 <__aeabi_dmul+0x24a>
 80009ee:	ea95 0f0c 	teq	r5, ip
 80009f2:	f47f af25 	bne.w	8000840 <__aeabi_dmul+0x234>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e72c      	b.n	8000856 <__aeabi_dmul+0x24a>
 80009fc:	ea95 0f0c 	teq	r5, ip
 8000a00:	d106      	bne.n	8000a10 <__aeabi_ddiv+0x1b0>
 8000a02:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a06:	f43f aefd 	beq.w	8000804 <__aeabi_dmul+0x1f8>
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	e722      	b.n	8000856 <__aeabi_dmul+0x24a>
 8000a10:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a14:	bf18      	it	ne
 8000a16:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a1a:	f47f aec5 	bne.w	80007a8 <__aeabi_dmul+0x19c>
 8000a1e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a22:	f47f af0d 	bne.w	8000840 <__aeabi_dmul+0x234>
 8000a26:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a2a:	f47f aeeb 	bne.w	8000804 <__aeabi_dmul+0x1f8>
 8000a2e:	e712      	b.n	8000856 <__aeabi_dmul+0x24a>

08000a30 <__gedf2>:
 8000a30:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a34:	e006      	b.n	8000a44 <__cmpdf2+0x4>
 8000a36:	bf00      	nop

08000a38 <__ledf2>:
 8000a38:	f04f 0c01 	mov.w	ip, #1
 8000a3c:	e002      	b.n	8000a44 <__cmpdf2+0x4>
 8000a3e:	bf00      	nop

08000a40 <__cmpdf2>:
 8000a40:	f04f 0c01 	mov.w	ip, #1
 8000a44:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	bf18      	it	ne
 8000a56:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a5a:	d01b      	beq.n	8000a94 <__cmpdf2+0x54>
 8000a5c:	b001      	add	sp, #4
 8000a5e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a62:	bf0c      	ite	eq
 8000a64:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a68:	ea91 0f03 	teqne	r1, r3
 8000a6c:	bf02      	ittt	eq
 8000a6e:	ea90 0f02 	teqeq	r0, r2
 8000a72:	2000      	moveq	r0, #0
 8000a74:	4770      	bxeq	lr
 8000a76:	f110 0f00 	cmn.w	r0, #0
 8000a7a:	ea91 0f03 	teq	r1, r3
 8000a7e:	bf58      	it	pl
 8000a80:	4299      	cmppl	r1, r3
 8000a82:	bf08      	it	eq
 8000a84:	4290      	cmpeq	r0, r2
 8000a86:	bf2c      	ite	cs
 8000a88:	17d8      	asrcs	r0, r3, #31
 8000a8a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8e:	f040 0001 	orr.w	r0, r0, #1
 8000a92:	4770      	bx	lr
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__cmpdf2+0x64>
 8000a9e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa2:	d107      	bne.n	8000ab4 <__cmpdf2+0x74>
 8000aa4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	d1d6      	bne.n	8000a5c <__cmpdf2+0x1c>
 8000aae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab2:	d0d3      	beq.n	8000a5c <__cmpdf2+0x1c>
 8000ab4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_cdrcmple>:
 8000abc:	4684      	mov	ip, r0
 8000abe:	4610      	mov	r0, r2
 8000ac0:	4662      	mov	r2, ip
 8000ac2:	468c      	mov	ip, r1
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4663      	mov	r3, ip
 8000ac8:	e000      	b.n	8000acc <__aeabi_cdcmpeq>
 8000aca:	bf00      	nop

08000acc <__aeabi_cdcmpeq>:
 8000acc:	b501      	push	{r0, lr}
 8000ace:	f7ff ffb7 	bl	8000a40 <__cmpdf2>
 8000ad2:	2800      	cmp	r0, #0
 8000ad4:	bf48      	it	mi
 8000ad6:	f110 0f00 	cmnmi.w	r0, #0
 8000ada:	bd01      	pop	{r0, pc}

08000adc <__aeabi_dcmpeq>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff fff4 	bl	8000acc <__aeabi_cdcmpeq>
 8000ae4:	bf0c      	ite	eq
 8000ae6:	2001      	moveq	r0, #1
 8000ae8:	2000      	movne	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmplt>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffea 	bl	8000acc <__aeabi_cdcmpeq>
 8000af8:	bf34      	ite	cc
 8000afa:	2001      	movcc	r0, #1
 8000afc:	2000      	movcs	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmple>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffe0 	bl	8000acc <__aeabi_cdcmpeq>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpge>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffce 	bl	8000abc <__aeabi_cdrcmple>
 8000b20:	bf94      	ite	ls
 8000b22:	2001      	movls	r0, #1
 8000b24:	2000      	movhi	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpgt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffc4 	bl	8000abc <__aeabi_cdrcmple>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmpun>:
 8000b40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d102      	bne.n	8000b50 <__aeabi_dcmpun+0x10>
 8000b4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4e:	d10a      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b58:	d102      	bne.n	8000b60 <__aeabi_dcmpun+0x20>
 8000b5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5e:	d102      	bne.n	8000b66 <__aeabi_dcmpun+0x26>
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	f04f 0001 	mov.w	r0, #1
 8000b6a:	4770      	bx	lr

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c10:	f000 b96a 	b.w	8000ee8 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9d08      	ldr	r5, [sp, #32]
 8000c32:	460c      	mov	r4, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14e      	bne.n	8000cd6 <__udivmoddi4+0xaa>
 8000c38:	4694      	mov	ip, r2
 8000c3a:	458c      	cmp	ip, r1
 8000c3c:	4686      	mov	lr, r0
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	d962      	bls.n	8000d0a <__udivmoddi4+0xde>
 8000c44:	b14a      	cbz	r2, 8000c5a <__udivmoddi4+0x2e>
 8000c46:	f1c2 0320 	rsb	r3, r2, #32
 8000c4a:	4091      	lsls	r1, r2
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c54:	4319      	orrs	r1, r3
 8000c56:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5e:	fa1f f68c 	uxth.w	r6, ip
 8000c62:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c6a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c72:	fb04 f106 	mul.w	r1, r4, r6
 8000c76:	4299      	cmp	r1, r3
 8000c78:	d90a      	bls.n	8000c90 <__udivmoddi4+0x64>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c82:	f080 8112 	bcs.w	8000eaa <__udivmoddi4+0x27e>
 8000c86:	4299      	cmp	r1, r3
 8000c88:	f240 810f 	bls.w	8000eaa <__udivmoddi4+0x27e>
 8000c8c:	3c02      	subs	r4, #2
 8000c8e:	4463      	add	r3, ip
 8000c90:	1a59      	subs	r1, r3, r1
 8000c92:	fa1f f38e 	uxth.w	r3, lr
 8000c96:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c9a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca2:	fb00 f606 	mul.w	r6, r0, r6
 8000ca6:	429e      	cmp	r6, r3
 8000ca8:	d90a      	bls.n	8000cc0 <__udivmoddi4+0x94>
 8000caa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cae:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cb2:	f080 80fc 	bcs.w	8000eae <__udivmoddi4+0x282>
 8000cb6:	429e      	cmp	r6, r3
 8000cb8:	f240 80f9 	bls.w	8000eae <__udivmoddi4+0x282>
 8000cbc:	4463      	add	r3, ip
 8000cbe:	3802      	subs	r0, #2
 8000cc0:	1b9b      	subs	r3, r3, r6
 8000cc2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	b11d      	cbz	r5, 8000cd2 <__udivmoddi4+0xa6>
 8000cca:	40d3      	lsrs	r3, r2
 8000ccc:	2200      	movs	r2, #0
 8000cce:	e9c5 3200 	strd	r3, r2, [r5]
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d905      	bls.n	8000ce6 <__udivmoddi4+0xba>
 8000cda:	b10d      	cbz	r5, 8000ce0 <__udivmoddi4+0xb4>
 8000cdc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e7f5      	b.n	8000cd2 <__udivmoddi4+0xa6>
 8000ce6:	fab3 f183 	clz	r1, r3
 8000cea:	2900      	cmp	r1, #0
 8000cec:	d146      	bne.n	8000d7c <__udivmoddi4+0x150>
 8000cee:	42a3      	cmp	r3, r4
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0xcc>
 8000cf2:	4290      	cmp	r0, r2
 8000cf4:	f0c0 80f0 	bcc.w	8000ed8 <__udivmoddi4+0x2ac>
 8000cf8:	1a86      	subs	r6, r0, r2
 8000cfa:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	2d00      	cmp	r5, #0
 8000d02:	d0e6      	beq.n	8000cd2 <__udivmoddi4+0xa6>
 8000d04:	e9c5 6300 	strd	r6, r3, [r5]
 8000d08:	e7e3      	b.n	8000cd2 <__udivmoddi4+0xa6>
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	f040 8090 	bne.w	8000e30 <__udivmoddi4+0x204>
 8000d10:	eba1 040c 	sub.w	r4, r1, ip
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	fa1f f78c 	uxth.w	r7, ip
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb08 4416 	mls	r4, r8, r6, r4
 8000d2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2e:	fb07 f006 	mul.w	r0, r7, r6
 8000d32:	4298      	cmp	r0, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x11c>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x11a>
 8000d40:	4298      	cmp	r0, r3
 8000d42:	f200 80cd 	bhi.w	8000ee0 <__udivmoddi4+0x2b4>
 8000d46:	4626      	mov	r6, r4
 8000d48:	1a1c      	subs	r4, r3, r0
 8000d4a:	fa1f f38e 	uxth.w	r3, lr
 8000d4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d52:	fb08 4410 	mls	r4, r8, r0, r4
 8000d56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d5a:	fb00 f707 	mul.w	r7, r0, r7
 8000d5e:	429f      	cmp	r7, r3
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x148>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x146>
 8000d6c:	429f      	cmp	r7, r3
 8000d6e:	f200 80b0 	bhi.w	8000ed2 <__udivmoddi4+0x2a6>
 8000d72:	4620      	mov	r0, r4
 8000d74:	1bdb      	subs	r3, r3, r7
 8000d76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0x9c>
 8000d7c:	f1c1 0620 	rsb	r6, r1, #32
 8000d80:	408b      	lsls	r3, r1
 8000d82:	fa22 f706 	lsr.w	r7, r2, r6
 8000d86:	431f      	orrs	r7, r3
 8000d88:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d8c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d90:	ea43 030c 	orr.w	r3, r3, ip
 8000d94:	40f4      	lsrs	r4, r6
 8000d96:	fa00 f801 	lsl.w	r8, r0, r1
 8000d9a:	0c38      	lsrs	r0, r7, #16
 8000d9c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000da0:	fbb4 fef0 	udiv	lr, r4, r0
 8000da4:	fa1f fc87 	uxth.w	ip, r7
 8000da8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db0:	fb0e f90c 	mul.w	r9, lr, ip
 8000db4:	45a1      	cmp	r9, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	d90a      	bls.n	8000dd2 <__udivmoddi4+0x1a6>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dc2:	f080 8084 	bcs.w	8000ece <__udivmoddi4+0x2a2>
 8000dc6:	45a1      	cmp	r9, r4
 8000dc8:	f240 8081 	bls.w	8000ece <__udivmoddi4+0x2a2>
 8000dcc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dd0:	443c      	add	r4, r7
 8000dd2:	eba4 0409 	sub.w	r4, r4, r9
 8000dd6:	fa1f f983 	uxth.w	r9, r3
 8000dda:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dde:	fb00 4413 	mls	r4, r0, r3, r4
 8000de2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d907      	bls.n	8000dfe <__udivmoddi4+0x1d2>
 8000dee:	193c      	adds	r4, r7, r4
 8000df0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000df4:	d267      	bcs.n	8000ec6 <__udivmoddi4+0x29a>
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d965      	bls.n	8000ec6 <__udivmoddi4+0x29a>
 8000dfa:	3b02      	subs	r3, #2
 8000dfc:	443c      	add	r4, r7
 8000dfe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e02:	fba0 9302 	umull	r9, r3, r0, r2
 8000e06:	eba4 040c 	sub.w	r4, r4, ip
 8000e0a:	429c      	cmp	r4, r3
 8000e0c:	46ce      	mov	lr, r9
 8000e0e:	469c      	mov	ip, r3
 8000e10:	d351      	bcc.n	8000eb6 <__udivmoddi4+0x28a>
 8000e12:	d04e      	beq.n	8000eb2 <__udivmoddi4+0x286>
 8000e14:	b155      	cbz	r5, 8000e2c <__udivmoddi4+0x200>
 8000e16:	ebb8 030e 	subs.w	r3, r8, lr
 8000e1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e22:	40cb      	lsrs	r3, r1
 8000e24:	431e      	orrs	r6, r3
 8000e26:	40cc      	lsrs	r4, r1
 8000e28:	e9c5 6400 	strd	r6, r4, [r5]
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	e750      	b.n	8000cd2 <__udivmoddi4+0xa6>
 8000e30:	f1c2 0320 	rsb	r3, r2, #32
 8000e34:	fa20 f103 	lsr.w	r1, r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e40:	4094      	lsls	r4, r2
 8000e42:	430c      	orrs	r4, r1
 8000e44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e4c:	fa1f f78c 	uxth.w	r7, ip
 8000e50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e54:	fb08 3110 	mls	r1, r8, r0, r3
 8000e58:	0c23      	lsrs	r3, r4, #16
 8000e5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5e:	fb00 f107 	mul.w	r1, r0, r7
 8000e62:	4299      	cmp	r1, r3
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x24c>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e6e:	d22c      	bcs.n	8000eca <__udivmoddi4+0x29e>
 8000e70:	4299      	cmp	r1, r3
 8000e72:	d92a      	bls.n	8000eca <__udivmoddi4+0x29e>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1a5b      	subs	r3, r3, r1
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e80:	fb08 3311 	mls	r3, r8, r1, r3
 8000e84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e88:	fb01 f307 	mul.w	r3, r1, r7
 8000e8c:	42a3      	cmp	r3, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x276>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e98:	d213      	bcs.n	8000ec2 <__udivmoddi4+0x296>
 8000e9a:	42a3      	cmp	r3, r4
 8000e9c:	d911      	bls.n	8000ec2 <__udivmoddi4+0x296>
 8000e9e:	3902      	subs	r1, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	1ae4      	subs	r4, r4, r3
 8000ea4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea8:	e739      	b.n	8000d1e <__udivmoddi4+0xf2>
 8000eaa:	4604      	mov	r4, r0
 8000eac:	e6f0      	b.n	8000c90 <__udivmoddi4+0x64>
 8000eae:	4608      	mov	r0, r1
 8000eb0:	e706      	b.n	8000cc0 <__udivmoddi4+0x94>
 8000eb2:	45c8      	cmp	r8, r9
 8000eb4:	d2ae      	bcs.n	8000e14 <__udivmoddi4+0x1e8>
 8000eb6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ebe:	3801      	subs	r0, #1
 8000ec0:	e7a8      	b.n	8000e14 <__udivmoddi4+0x1e8>
 8000ec2:	4631      	mov	r1, r6
 8000ec4:	e7ed      	b.n	8000ea2 <__udivmoddi4+0x276>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	e799      	b.n	8000dfe <__udivmoddi4+0x1d2>
 8000eca:	4630      	mov	r0, r6
 8000ecc:	e7d4      	b.n	8000e78 <__udivmoddi4+0x24c>
 8000ece:	46d6      	mov	lr, sl
 8000ed0:	e77f      	b.n	8000dd2 <__udivmoddi4+0x1a6>
 8000ed2:	4463      	add	r3, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e74d      	b.n	8000d74 <__udivmoddi4+0x148>
 8000ed8:	4606      	mov	r6, r0
 8000eda:	4623      	mov	r3, r4
 8000edc:	4608      	mov	r0, r1
 8000ede:	e70f      	b.n	8000d00 <__udivmoddi4+0xd4>
 8000ee0:	3e02      	subs	r6, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	e730      	b.n	8000d48 <__udivmoddi4+0x11c>
 8000ee6:	bf00      	nop

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	0000      	movs	r0, r0
	...

08000ef0 <readADC>:

/* USER CODE BEGIN 0 */
#define VOLTAGE_STM32 3.3
#define ADC_RESOLUTION 4095.0 	//2^12 - 1

uint32_t readADC(ADC_HandleTypeDef *hadc, uint32_t channel) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = { 0 };
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]

    // Configurar el canal que se desea leer
    sConfig.Channel = channel;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 0x00000001U; // Reemplazado con el valor correcto
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = 0x00000000U; // Reemplazado con el valor correcto
 8000f10:	2300      	movs	r3, #0
 8000f12:	613b      	str	r3, [r7, #16]

    if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK) {
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	4619      	mov	r1, r3
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f002 faac 	bl	8003478 <HAL_ADC_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <readADC+0x3a>
        Error_Handler(); // Maneja errores de configuración
 8000f26:	f001 fadf 	bl	80024e8 <Error_Handler>
    }

    // Inicia la conversión del ADC
    HAL_ADC_Start(hadc);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f002 f93a 	bl	80031a4 <HAL_ADC_Start>

    // Espera hasta que la conversión termine
    if (HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY) == HAL_OK) {
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f002 fa07 	bl	8003348 <HAL_ADC_PollForConversion>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d113      	bne.n	8000f68 <readADC+0x78>
        // Retorna el valor convertido
        return HAL_ADC_GetValue(hadc) * (VOLTAGE_STM32 / ADC_RESOLUTION);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f002 fa8c 	bl	800345e <HAL_ADC_GetValue>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fae5 	bl	8000518 <__aeabi_ui2d>
 8000f4e:	a30a      	add	r3, pc, #40	@ (adr r3, 8000f78 <readADC+0x88>)
 8000f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f54:	f7ff fb5a 	bl	800060c <__aeabi_dmul>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4610      	mov	r0, r2
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f7ff fe2c 	bl	8000bbc <__aeabi_d2uiz>
 8000f64:	4603      	mov	r3, r0
 8000f66:	e000      	b.n	8000f6a <readADC+0x7a>
    }

    return 0; // Retorna 0 en caso de error
 8000f68:	2300      	movs	r3, #0
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3718      	adds	r7, #24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	f3af 8000 	nop.w
 8000f78:	e734d9b4 	.word	0xe734d9b4
 8000f7c:	3f4a680c 	.word	0x3f4a680c

08000f80 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f86:	463b      	mov	r3, r7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f92:	4b21      	ldr	r3, [pc, #132]	@ (8001018 <MX_ADC1_Init+0x98>)
 8000f94:	4a21      	ldr	r2, [pc, #132]	@ (800101c <MX_ADC1_Init+0x9c>)
 8000f96:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f98:	4b1f      	ldr	r3, [pc, #124]	@ (8001018 <MX_ADC1_Init+0x98>)
 8000f9a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f9e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8001018 <MX_ADC1_Init+0x98>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001018 <MX_ADC1_Init+0x98>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fac:	4b1a      	ldr	r3, [pc, #104]	@ (8001018 <MX_ADC1_Init+0x98>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fb2:	4b19      	ldr	r3, [pc, #100]	@ (8001018 <MX_ADC1_Init+0x98>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fba:	4b17      	ldr	r3, [pc, #92]	@ (8001018 <MX_ADC1_Init+0x98>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fc0:	4b15      	ldr	r3, [pc, #84]	@ (8001018 <MX_ADC1_Init+0x98>)
 8000fc2:	4a17      	ldr	r2, [pc, #92]	@ (8001020 <MX_ADC1_Init+0xa0>)
 8000fc4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc6:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <MX_ADC1_Init+0x98>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fcc:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <MX_ADC1_Init+0x98>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <MX_ADC1_Init+0x98>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fda:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <MX_ADC1_Init+0x98>)
 8000fdc:	2201      	movs	r2, #1
 8000fde:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fe0:	480d      	ldr	r0, [pc, #52]	@ (8001018 <MX_ADC1_Init+0x98>)
 8000fe2:	f002 f89b 	bl	800311c <HAL_ADC_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fec:	f001 fa7c 	bl	80024e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	@ (8001018 <MX_ADC1_Init+0x98>)
 8001002:	f002 fa39 	bl	8003478 <HAL_ADC_ConfigChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800100c:	f001 fa6c 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	200001f0 	.word	0x200001f0
 800101c:	40012000 	.word	0x40012000
 8001020:	0f000001 	.word	0x0f000001

08001024 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800102a:	463b      	mov	r3, r7
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8001036:	4b21      	ldr	r3, [pc, #132]	@ (80010bc <MX_ADC2_Init+0x98>)
 8001038:	4a21      	ldr	r2, [pc, #132]	@ (80010c0 <MX_ADC2_Init+0x9c>)
 800103a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800103c:	4b1f      	ldr	r3, [pc, #124]	@ (80010bc <MX_ADC2_Init+0x98>)
 800103e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001042:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001044:	4b1d      	ldr	r3, [pc, #116]	@ (80010bc <MX_ADC2_Init+0x98>)
 8001046:	2200      	movs	r2, #0
 8001048:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800104a:	4b1c      	ldr	r3, [pc, #112]	@ (80010bc <MX_ADC2_Init+0x98>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001050:	4b1a      	ldr	r3, [pc, #104]	@ (80010bc <MX_ADC2_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001056:	4b19      	ldr	r3, [pc, #100]	@ (80010bc <MX_ADC2_Init+0x98>)
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800105e:	4b17      	ldr	r3, [pc, #92]	@ (80010bc <MX_ADC2_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001064:	4b15      	ldr	r3, [pc, #84]	@ (80010bc <MX_ADC2_Init+0x98>)
 8001066:	4a17      	ldr	r2, [pc, #92]	@ (80010c4 <MX_ADC2_Init+0xa0>)
 8001068:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800106a:	4b14      	ldr	r3, [pc, #80]	@ (80010bc <MX_ADC2_Init+0x98>)
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001070:	4b12      	ldr	r3, [pc, #72]	@ (80010bc <MX_ADC2_Init+0x98>)
 8001072:	2201      	movs	r2, #1
 8001074:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001076:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <MX_ADC2_Init+0x98>)
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800107e:	4b0f      	ldr	r3, [pc, #60]	@ (80010bc <MX_ADC2_Init+0x98>)
 8001080:	2201      	movs	r2, #1
 8001082:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001084:	480d      	ldr	r0, [pc, #52]	@ (80010bc <MX_ADC2_Init+0x98>)
 8001086:	f002 f849 	bl	800311c <HAL_ADC_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001090:	f001 fa2a 	bl	80024e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001094:	2306      	movs	r3, #6
 8001096:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001098:	2301      	movs	r3, #1
 800109a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010a0:	463b      	mov	r3, r7
 80010a2:	4619      	mov	r1, r3
 80010a4:	4805      	ldr	r0, [pc, #20]	@ (80010bc <MX_ADC2_Init+0x98>)
 80010a6:	f002 f9e7 	bl	8003478 <HAL_ADC_ConfigChannel>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80010b0:	f001 fa1a 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000238 	.word	0x20000238
 80010c0:	40012100 	.word	0x40012100
 80010c4:	0f000001 	.word	0x0f000001

080010c8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ce:	463b      	mov	r3, r7
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80010da:	4b21      	ldr	r3, [pc, #132]	@ (8001160 <MX_ADC3_Init+0x98>)
 80010dc:	4a21      	ldr	r2, [pc, #132]	@ (8001164 <MX_ADC3_Init+0x9c>)
 80010de:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001160 <MX_ADC3_Init+0x98>)
 80010e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80010e6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80010e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001160 <MX_ADC3_Init+0x98>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80010ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001160 <MX_ADC3_Init+0x98>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80010f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <MX_ADC3_Init+0x98>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80010fa:	4b19      	ldr	r3, [pc, #100]	@ (8001160 <MX_ADC3_Init+0x98>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001102:	4b17      	ldr	r3, [pc, #92]	@ (8001160 <MX_ADC3_Init+0x98>)
 8001104:	2200      	movs	r2, #0
 8001106:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001108:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <MX_ADC3_Init+0x98>)
 800110a:	4a17      	ldr	r2, [pc, #92]	@ (8001168 <MX_ADC3_Init+0xa0>)
 800110c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800110e:	4b14      	ldr	r3, [pc, #80]	@ (8001160 <MX_ADC3_Init+0x98>)
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001114:	4b12      	ldr	r3, [pc, #72]	@ (8001160 <MX_ADC3_Init+0x98>)
 8001116:	2201      	movs	r2, #1
 8001118:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800111a:	4b11      	ldr	r3, [pc, #68]	@ (8001160 <MX_ADC3_Init+0x98>)
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001122:	4b0f      	ldr	r3, [pc, #60]	@ (8001160 <MX_ADC3_Init+0x98>)
 8001124:	2201      	movs	r2, #1
 8001126:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001128:	480d      	ldr	r0, [pc, #52]	@ (8001160 <MX_ADC3_Init+0x98>)
 800112a:	f001 fff7 	bl	800311c <HAL_ADC_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001134:	f001 f9d8 	bl	80024e8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001138:	2301      	movs	r3, #1
 800113a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800113c:	2301      	movs	r3, #1
 800113e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001144:	463b      	mov	r3, r7
 8001146:	4619      	mov	r1, r3
 8001148:	4805      	ldr	r0, [pc, #20]	@ (8001160 <MX_ADC3_Init+0x98>)
 800114a:	f002 f995 	bl	8003478 <HAL_ADC_ConfigChannel>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001154:	f001 f9c8 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000280 	.word	0x20000280
 8001164:	40012200 	.word	0x40012200
 8001168:	0f000001 	.word	0x0f000001

0800116c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b090      	sub	sp, #64	@ 0x40
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a6c      	ldr	r2, [pc, #432]	@ (800133c <HAL_ADC_MspInit+0x1d0>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d142      	bne.n	8001214 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001192:	4b6b      	ldr	r3, [pc, #428]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001196:	4a6a      	ldr	r2, [pc, #424]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 8001198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800119c:	6453      	str	r3, [r2, #68]	@ 0x44
 800119e:	4b68      	ldr	r3, [pc, #416]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 80011a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ae:	4b64      	ldr	r3, [pc, #400]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	4a63      	ldr	r2, [pc, #396]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ba:	4b61      	ldr	r3, [pc, #388]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80011c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
 80011ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a5c      	ldr	r2, [pc, #368]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	4b5a      	ldr	r3, [pc, #360]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	623b      	str	r3, [r7, #32]
 80011e0:	6a3b      	ldr	r3, [r7, #32]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = CurrYMPPT_Pin|VoltYMPPT_Pin|Volt5V_Pin|Curr5V_Pin;
 80011e2:	233c      	movs	r3, #60	@ 0x3c
 80011e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e6:	2303      	movs	r3, #3
 80011e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011f2:	4619      	mov	r1, r3
 80011f4:	4853      	ldr	r0, [pc, #332]	@ (8001344 <HAL_ADC_MspInit+0x1d8>)
 80011f6:	f002 fc43 	bl	8003a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Curr5VBis_Pin|Volt5VBis_Pin;
 80011fa:	2330      	movs	r3, #48	@ 0x30
 80011fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011fe:	2303      	movs	r3, #3
 8001200:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800120a:	4619      	mov	r1, r3
 800120c:	484e      	ldr	r0, [pc, #312]	@ (8001348 <HAL_ADC_MspInit+0x1dc>)
 800120e:	f002 fc37 	bl	8003a80 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8001212:	e08e      	b.n	8001332 <HAL_ADC_MspInit+0x1c6>
  else if(adcHandle->Instance==ADC2)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a4c      	ldr	r2, [pc, #304]	@ (800134c <HAL_ADC_MspInit+0x1e0>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d15c      	bne.n	80012d8 <HAL_ADC_MspInit+0x16c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
 8001222:	4b47      	ldr	r3, [pc, #284]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001226:	4a46      	ldr	r2, [pc, #280]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 8001228:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800122c:	6453      	str	r3, [r2, #68]	@ 0x44
 800122e:	4b44      	ldr	r3, [pc, #272]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 8001230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001232:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001236:	61fb      	str	r3, [r7, #28]
 8001238:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
 800123e:	4b40      	ldr	r3, [pc, #256]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a3f      	ldr	r2, [pc, #252]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b3d      	ldr	r3, [pc, #244]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	61bb      	str	r3, [r7, #24]
 8001254:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	4b39      	ldr	r3, [pc, #228]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a38      	ldr	r2, [pc, #224]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b36      	ldr	r3, [pc, #216]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b32      	ldr	r3, [pc, #200]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a31      	ldr	r2, [pc, #196]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b2f      	ldr	r3, [pc, #188]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = CurrXMPPT_Pin|VoltXMPPT_Pin;
 800128e:	2303      	movs	r3, #3
 8001290:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001292:	2303      	movs	r3, #3
 8001294:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001296:	2300      	movs	r3, #0
 8001298:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800129e:	4619      	mov	r1, r3
 80012a0:	4828      	ldr	r0, [pc, #160]	@ (8001344 <HAL_ADC_MspInit+0x1d8>)
 80012a2:	f002 fbed 	bl	8003a80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Volt3_3V_Pin|Curr3_3V_Pin;
 80012a6:	23c0      	movs	r3, #192	@ 0xc0
 80012a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012aa:	2303      	movs	r3, #3
 80012ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012b6:	4619      	mov	r1, r3
 80012b8:	4823      	ldr	r0, [pc, #140]	@ (8001348 <HAL_ADC_MspInit+0x1dc>)
 80012ba:	f002 fbe1 	bl	8003a80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Volt3_3VBis_Pin|Curr3_3Vbis_Pin;
 80012be:	2303      	movs	r3, #3
 80012c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c2:	2303      	movs	r3, #3
 80012c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012ce:	4619      	mov	r1, r3
 80012d0:	481f      	ldr	r0, [pc, #124]	@ (8001350 <HAL_ADC_MspInit+0x1e4>)
 80012d2:	f002 fbd5 	bl	8003a80 <HAL_GPIO_Init>
}
 80012d6:	e02c      	b.n	8001332 <HAL_ADC_MspInit+0x1c6>
  else if(adcHandle->Instance==ADC3)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001354 <HAL_ADC_MspInit+0x1e8>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d127      	bne.n	8001332 <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b16      	ldr	r3, [pc, #88]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ea:	4a15      	ldr	r2, [pc, #84]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 80012ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012f2:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	4b0f      	ldr	r3, [pc, #60]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	4a0e      	ldr	r2, [pc, #56]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6313      	str	r3, [r2, #48]	@ 0x30
 800130e:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <HAL_ADC_MspInit+0x1d4>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CurrZMPPT_Pin|VoltZMPPT_Pin;
 800131a:	2306      	movs	r3, #6
 800131c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131e:	2303      	movs	r3, #3
 8001320:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001326:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800132a:	4619      	mov	r1, r3
 800132c:	4806      	ldr	r0, [pc, #24]	@ (8001348 <HAL_ADC_MspInit+0x1dc>)
 800132e:	f002 fba7 	bl	8003a80 <HAL_GPIO_Init>
}
 8001332:	bf00      	nop
 8001334:	3740      	adds	r7, #64	@ 0x40
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40012000 	.word	0x40012000
 8001340:	40023800 	.word	0x40023800
 8001344:	40020800 	.word	0x40020800
 8001348:	40020000 	.word	0x40020000
 800134c:	40012100 	.word	0x40012100
 8001350:	40020400 	.word	0x40020400
 8001354:	40012200 	.word	0x40012200

08001358 <BQ76905_WriteSubcommand>:
#include "usart.h"
#include <stdio.h>
#include <string.h>

// Función para enviar un subcomando al BQ76905 (no requiere checksum)
HAL_StatusTypeDef BQ76905_WriteSubcommand(BQ76905_Device *bms, BQ76905_Registers subcmd) {
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af02      	add	r7, sp, #8
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	807b      	strh	r3, [r7, #2]
    uint8_t tx[3] = {BASE_SUBCOMMAND_ADDRESS, (uint8_t)(subcmd & 0xFF), (uint8_t)(subcmd >> 8)};
 8001364:	233e      	movs	r3, #62	@ 0x3e
 8001366:	733b      	strb	r3, [r7, #12]
 8001368:	887b      	ldrh	r3, [r7, #2]
 800136a:	b2db      	uxtb	r3, r3
 800136c:	737b      	strb	r3, [r7, #13]
 800136e:	887b      	ldrh	r3, [r7, #2]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	b29b      	uxth	r3, r3
 8001374:	b2db      	uxtb	r3, r3
 8001376:	73bb      	strb	r3, [r7, #14]
    return HAL_I2C_Master_Transmit(bms->hi2c, BQ76905_I2C_ADDR, tx, 3, HAL_MAX_DELAY);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6818      	ldr	r0, [r3, #0]
 800137c:	f107 020c 	add.w	r2, r7, #12
 8001380:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	2303      	movs	r3, #3
 8001388:	2110      	movs	r1, #16
 800138a:	f002 fe73 	bl	8004074 <HAL_I2C_Master_Transmit>
 800138e:	4603      	mov	r3, r0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <BQ76905_WriteRegister>:


// Función para escribir en un registro (requiere checksum si es de memoria)
HAL_StatusTypeDef BQ76905_WriteRegister(BQ76905_Device *bms, BQ76905_Registers reg, uint8_t *data, uint8_t len) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b090      	sub	sp, #64	@ 0x40
 800139c:	af02      	add	r7, sp, #8
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	461a      	mov	r2, r3
 80013a4:	460b      	mov	r3, r1
 80013a6:	817b      	strh	r3, [r7, #10]
 80013a8:	4613      	mov	r3, r2
 80013aa:	727b      	strb	r3, [r7, #9]
    uint8_t tx[32];
    tx[0] = BASE_SUBCOMMAND_ADDRESS; // Dirección base
 80013ac:	233e      	movs	r3, #62	@ 0x3e
 80013ae:	753b      	strb	r3, [r7, #20]
    tx[1] = (uint8_t)(reg & 0xFF);  // LSB del registro
 80013b0:	897b      	ldrh	r3, [r7, #10]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	757b      	strb	r3, [r7, #21]
    tx[2] = (uint8_t)(reg >> 8);    // MSB del registro
 80013b6:	897b      	ldrh	r3, [r7, #10]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	75bb      	strb	r3, [r7, #22]

    // Copiar datos al buffer de transmisión
    memcpy(&tx[3], data, len);
 80013c0:	7a7a      	ldrb	r2, [r7, #9]
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	3303      	adds	r3, #3
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f006 fc19 	bl	8007c02 <memcpy>

    // Enviar datos al registro
    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(bms->hi2c, BQ76905_I2C_ADDR, tx, len + 3, HAL_MAX_DELAY);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	6818      	ldr	r0, [r3, #0]
 80013d4:	7a7b      	ldrb	r3, [r7, #9]
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	3303      	adds	r3, #3
 80013da:	b29b      	uxth	r3, r3
 80013dc:	f107 0214 	add.w	r2, r7, #20
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013e4:	9100      	str	r1, [sp, #0]
 80013e6:	2110      	movs	r1, #16
 80013e8:	f002 fe44 	bl	8004074 <HAL_I2C_Master_Transmit>
 80013ec:	4603      	mov	r3, r0
 80013ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (ret != HAL_OK) return ret;
 80013f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <BQ76905_WriteRegister+0x68>
 80013fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80013fe:	e006      	b.n	800140e <BQ76905_WriteRegister+0x76>

    // Si el registro pertenece a la memoria, escribir checksum
    return BQ76905_WriteChecksum(bms, reg, data, len);
 8001400:	7a7b      	ldrb	r3, [r7, #9]
 8001402:	8979      	ldrh	r1, [r7, #10]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f000 f805 	bl	8001416 <BQ76905_WriteChecksum>
 800140c:	4603      	mov	r3, r0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3738      	adds	r7, #56	@ 0x38
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}

08001416 <BQ76905_WriteChecksum>:

// Función para calcular y escribir el checksum
HAL_StatusTypeDef BQ76905_WriteChecksum(BQ76905_Device *bms, BQ76905_Registers reg, uint8_t *data, uint8_t len) {
 8001416:	b580      	push	{r7, lr}
 8001418:	b088      	sub	sp, #32
 800141a:	af02      	add	r7, sp, #8
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	461a      	mov	r2, r3
 8001422:	460b      	mov	r3, r1
 8001424:	817b      	strh	r3, [r7, #10]
 8001426:	4613      	mov	r3, r2
 8001428:	727b      	strb	r3, [r7, #9]
    uint8_t sum = (uint8_t)(reg & 0xFF) + (uint8_t)(reg >> 8);
 800142a:	897b      	ldrh	r3, [r7, #10]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	897b      	ldrh	r3, [r7, #10]
 8001430:	0a1b      	lsrs	r3, r3, #8
 8001432:	b29b      	uxth	r3, r3
 8001434:	b2db      	uxtb	r3, r3
 8001436:	4413      	add	r3, r2
 8001438:	75fb      	strb	r3, [r7, #23]

    for (uint8_t i = 0; i < len; i++) {
 800143a:	2300      	movs	r3, #0
 800143c:	75bb      	strb	r3, [r7, #22]
 800143e:	e009      	b.n	8001454 <BQ76905_WriteChecksum+0x3e>
        sum += data[i];
 8001440:	7dbb      	ldrb	r3, [r7, #22]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	781a      	ldrb	r2, [r3, #0]
 8001448:	7dfb      	ldrb	r3, [r7, #23]
 800144a:	4413      	add	r3, r2
 800144c:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < len; i++) {
 800144e:	7dbb      	ldrb	r3, [r7, #22]
 8001450:	3301      	adds	r3, #1
 8001452:	75bb      	strb	r3, [r7, #22]
 8001454:	7dba      	ldrb	r2, [r7, #22]
 8001456:	7a7b      	ldrb	r3, [r7, #9]
 8001458:	429a      	cmp	r2, r3
 800145a:	d3f1      	bcc.n	8001440 <BQ76905_WriteChecksum+0x2a>
    }

    uint8_t chksum = ~sum;      // Invertimos el complemento a uno
 800145c:	7dfb      	ldrb	r3, [r7, #23]
 800145e:	43db      	mvns	r3, r3
 8001460:	757b      	strb	r3, [r7, #21]
    uint8_t lengthVal = len + 4;  // Longitud = datos + dirección + (checksum + longitud)
 8001462:	7a7b      	ldrb	r3, [r7, #9]
 8001464:	3304      	adds	r3, #4
 8001466:	753b      	strb	r3, [r7, #20]

    uint8_t tx[3] = {0x60, chksum, lengthVal};  // Dirección del checksum
 8001468:	2360      	movs	r3, #96	@ 0x60
 800146a:	743b      	strb	r3, [r7, #16]
 800146c:	7d7b      	ldrb	r3, [r7, #21]
 800146e:	747b      	strb	r3, [r7, #17]
 8001470:	7d3b      	ldrb	r3, [r7, #20]
 8001472:	74bb      	strb	r3, [r7, #18]
    return HAL_I2C_Master_Transmit(bms->hi2c, BQ76905_I2C_ADDR, tx, 3, HAL_MAX_DELAY);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6818      	ldr	r0, [r3, #0]
 8001478:	f107 0210 	add.w	r2, r7, #16
 800147c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2303      	movs	r3, #3
 8001484:	2110      	movs	r1, #16
 8001486:	f002 fdf5 	bl	8004074 <HAL_I2C_Master_Transmit>
 800148a:	4603      	mov	r3, r0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}

08001494 <BQ76905_ReadRegister>:


// Función para leer un registro
HAL_StatusTypeDef BQ76905_ReadRegister(BQ76905_Device *bms, BQ76905_Registers reg, uint8_t *rxData, uint8_t len) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af02      	add	r7, sp, #8
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	461a      	mov	r2, r3
 80014a0:	460b      	mov	r3, r1
 80014a2:	817b      	strh	r3, [r7, #10]
 80014a4:	4613      	mov	r3, r2
 80014a6:	727b      	strb	r3, [r7, #9]
    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(bms->hi2c, BQ76905_I2C_ADDR, (uint8_t*)&reg, 1, HAL_MAX_DELAY);
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6818      	ldr	r0, [r3, #0]
 80014ac:	f107 020a 	add.w	r2, r7, #10
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2301      	movs	r3, #1
 80014b8:	2110      	movs	r1, #16
 80014ba:	f002 fddb 	bl	8004074 <HAL_I2C_Master_Transmit>
 80014be:	4603      	mov	r3, r0
 80014c0:	75fb      	strb	r3, [r7, #23]
    if (ret != HAL_OK) return ret;
 80014c2:	7dfb      	ldrb	r3, [r7, #23]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <BQ76905_ReadRegister+0x38>
 80014c8:	7dfb      	ldrb	r3, [r7, #23]
 80014ca:	e00b      	b.n	80014e4 <BQ76905_ReadRegister+0x50>
    return HAL_I2C_Master_Receive(bms->hi2c, BQ76905_I2C_ADDR, rxData, len, HAL_MAX_DELAY);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6818      	ldr	r0, [r3, #0]
 80014d0:	7a7b      	ldrb	r3, [r7, #9]
 80014d2:	b29b      	uxth	r3, r3
 80014d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014d8:	9200      	str	r2, [sp, #0]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	2110      	movs	r1, #16
 80014de:	f002 fec7 	bl	8004270 <HAL_I2C_Master_Receive>
 80014e2:	4603      	mov	r3, r0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <BQ76905_Configure>:


// Función para configurar el BQ76905
void BQ76905_Configure(BQ76905_Device *bms) {
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
    uint8_t data[2];

    // Entrar en modo CONFIG_UPDATE
    BQ76905_WriteSubcommand(bms, CONFIG_UPDATE);
 80014f4:	2190      	movs	r1, #144	@ 0x90
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ff2e 	bl	8001358 <BQ76905_WriteSubcommand>

    // Configurar VCell Mode (2 celdas)
    data[0] = 0x02;
 80014fc:	2302      	movs	r3, #2
 80014fe:	733b      	strb	r3, [r7, #12]
    BQ76905_WriteRegister(bms, VCELL_MODE, data, 1);
 8001500:	f107 020c 	add.w	r2, r7, #12
 8001504:	2301      	movs	r3, #1
 8001506:	f249 011b 	movw	r1, #36891	@ 0x901b
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff ff44 	bl	8001398 <BQ76905_WriteRegister>

    // Habilita protecciones OCC, OCD, SCD y COV
    data[0] = 0xE1;
 8001510:	23e1      	movs	r3, #225	@ 0xe1
 8001512:	733b      	strb	r3, [r7, #12]
    BQ76905_WriteRegister(bms, ENABLED_PROT_A, data, 1);
 8001514:	f107 020c 	add.w	r2, r7, #12
 8001518:	2301      	movs	r3, #1
 800151a:	f249 0124 	movw	r1, #36900	@ 0x9024
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f7ff ff3a 	bl	8001398 <BQ76905_WriteRegister>

    // Umbral de bajo voltaje (en mV) 0x0B *256 + 0x8b = 3000 mV
    data[0] = 0xB8;
 8001524:	23b8      	movs	r3, #184	@ 0xb8
 8001526:	733b      	strb	r3, [r7, #12]
    data[1] = 0x0B;
 8001528:	230b      	movs	r3, #11
 800152a:	737b      	strb	r3, [r7, #13]
    BQ76905_WriteRegister(bms, CELL_UV_THRESHOLD, data, 2);
 800152c:	f107 020c 	add.w	r2, r7, #12
 8001530:	2302      	movs	r3, #2
 8001532:	f249 012e 	movw	r1, #36910	@ 0x902e
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7ff ff2e 	bl	8001398 <BQ76905_WriteRegister>

    // Salir de modo CONFIG_UPDATE
    BQ76905_WriteSubcommand(bms, CONFIG_EXIT);
 800153c:	2192      	movs	r1, #146	@ 0x92
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff ff0a 	bl	8001358 <BQ76905_WriteSubcommand>
}
 8001544:	bf00      	nop
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <BQ76905_ReadData>:

// Función para leer datos desde el BQ76905
void BQ76905_ReadData(BQ76905_Device *bms) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
    uint8_t rx[6]; // Buffer temporal de lectura

    //  Leer voltaje de todas las celdas (hasta 5 celdas)
    for (uint8_t i = 0; i < MAX_CELLS; i++) {
 8001554:	2300      	movs	r3, #0
 8001556:	73fb      	strb	r3, [r7, #15]
 8001558:	e01b      	b.n	8001592 <BQ76905_ReadData+0x46>
        BQ76905_ReadRegister(bms, CELL1_VOLTAGE + (i * 2), rx, 2);
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	330a      	adds	r3, #10
 800155e:	b29b      	uxth	r3, r3
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	b299      	uxth	r1, r3
 8001564:	f107 0208 	add.w	r2, r7, #8
 8001568:	2302      	movs	r3, #2
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff ff92 	bl	8001494 <BQ76905_ReadRegister>
        bms->cell_voltages[i] = rx[0] | (rx[1] << 8);
 8001570:	7a3b      	ldrb	r3, [r7, #8]
 8001572:	b21a      	sxth	r2, r3
 8001574:	7a7b      	ldrb	r3, [r7, #9]
 8001576:	021b      	lsls	r3, r3, #8
 8001578:	b21b      	sxth	r3, r3
 800157a:	4313      	orrs	r3, r2
 800157c:	b21a      	sxth	r2, r3
 800157e:	7bfb      	ldrb	r3, [r7, #15]
 8001580:	b291      	uxth	r1, r2
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	005b      	lsls	r3, r3, #1
 8001586:	4413      	add	r3, r2
 8001588:	460a      	mov	r2, r1
 800158a:	809a      	strh	r2, [r3, #4]
    for (uint8_t i = 0; i < MAX_CELLS; i++) {
 800158c:	7bfb      	ldrb	r3, [r7, #15]
 800158e:	3301      	adds	r3, #1
 8001590:	73fb      	strb	r3, [r7, #15]
 8001592:	7bfb      	ldrb	r3, [r7, #15]
 8001594:	2b04      	cmp	r3, #4
 8001596:	d9e0      	bls.n	800155a <BQ76905_ReadData+0xe>
    }

    //  Leer voltaje total del pack
    BQ76905_ReadRegister(bms, STACK_VOLTAGE, rx, 2);
 8001598:	f107 0208 	add.w	r2, r7, #8
 800159c:	2302      	movs	r3, #2
 800159e:	2126      	movs	r1, #38	@ 0x26
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff ff77 	bl	8001494 <BQ76905_ReadRegister>
    bms->stack_voltage = rx[0] | (rx[1] << 8);
 80015a6:	7a3b      	ldrb	r3, [r7, #8]
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	7a7b      	ldrb	r3, [r7, #9]
 80015ac:	021b      	lsls	r3, r3, #8
 80015ae:	b21b      	sxth	r3, r3
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b21b      	sxth	r3, r3
 80015b4:	b29a      	uxth	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	81da      	strh	r2, [r3, #14]

    //  Leer voltaje de referencia interna (1.8V)
    BQ76905_ReadRegister(bms, REG18_VOLTAGE, rx, 2);
 80015ba:	f107 0208 	add.w	r2, r7, #8
 80015be:	2302      	movs	r3, #2
 80015c0:	2122      	movs	r1, #34	@ 0x22
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f7ff ff66 	bl	8001494 <BQ76905_ReadRegister>
    bms->reg18_voltage = rx[0] | (rx[1] << 8);
 80015c8:	7a3b      	ldrb	r3, [r7, #8]
 80015ca:	b21a      	sxth	r2, r3
 80015cc:	7a7b      	ldrb	r3, [r7, #9]
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	b21b      	sxth	r3, r3
 80015d2:	4313      	orrs	r3, r2
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	821a      	strh	r2, [r3, #16]

    //  Leer medición de referencia de tierra
    BQ76905_ReadRegister(bms, VSS_VOLTAGE, rx, 2);
 80015dc:	f107 0208 	add.w	r2, r7, #8
 80015e0:	2302      	movs	r3, #2
 80015e2:	2124      	movs	r1, #36	@ 0x24
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff ff55 	bl	8001494 <BQ76905_ReadRegister>
    bms->vss_voltage = rx[0] | (rx[1] << 8);
 80015ea:	7a3b      	ldrb	r3, [r7, #8]
 80015ec:	b21a      	sxth	r2, r3
 80015ee:	7a7b      	ldrb	r3, [r7, #9]
 80015f0:	021b      	lsls	r3, r3, #8
 80015f2:	b21b      	sxth	r3, r3
 80015f4:	4313      	orrs	r3, r2
 80015f6:	b21b      	sxth	r3, r3
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	825a      	strh	r2, [r3, #18]

    //  Leer temperatura interna
    BQ76905_ReadRegister(bms, INT_TEMPERATURE, rx, 2);
 80015fe:	f107 0208 	add.w	r2, r7, #8
 8001602:	2302      	movs	r3, #2
 8001604:	2128      	movs	r1, #40	@ 0x28
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff ff44 	bl	8001494 <BQ76905_ReadRegister>
    bms->internal_temperature = rx[0] | (rx[1] << 8);
 800160c:	7a3b      	ldrb	r3, [r7, #8]
 800160e:	b21a      	sxth	r2, r3
 8001610:	7a7b      	ldrb	r3, [r7, #9]
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	b21b      	sxth	r3, r3
 8001616:	4313      	orrs	r3, r2
 8001618:	b21a      	sxth	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	829a      	strh	r2, [r3, #20]

    //  Leer temperatura del sensor externo (TS)
    BQ76905_ReadRegister(bms, TS_MEASUREMENT, rx, 2);
 800161e:	f107 0208 	add.w	r2, r7, #8
 8001622:	2302      	movs	r3, #2
 8001624:	212a      	movs	r1, #42	@ 0x2a
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ff34 	bl	8001494 <BQ76905_ReadRegister>
    bms->ts_measurement = rx[0] | (rx[1] << 8);
 800162c:	7a3b      	ldrb	r3, [r7, #8]
 800162e:	b21a      	sxth	r2, r3
 8001630:	7a7b      	ldrb	r3, [r7, #9]
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b21b      	sxth	r3, r3
 8001636:	4313      	orrs	r3, r2
 8001638:	b21b      	sxth	r3, r3
 800163a:	b29a      	uxth	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	82da      	strh	r2, [r3, #22]

    //  Leer medición de corriente cruda (32 bits)
    BQ76905_ReadRegister(bms, RAW_CURRENT, rx, 4);
 8001640:	f107 0208 	add.w	r2, r7, #8
 8001644:	2304      	movs	r3, #4
 8001646:	2136      	movs	r1, #54	@ 0x36
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff ff23 	bl	8001494 <BQ76905_ReadRegister>
    bms->raw_current = (int32_t)(rx[0] | (rx[1] << 8) | (rx[2] << 16) | (rx[3] << 24));
 800164e:	7a3b      	ldrb	r3, [r7, #8]
 8001650:	461a      	mov	r2, r3
 8001652:	7a7b      	ldrb	r3, [r7, #9]
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	431a      	orrs	r2, r3
 8001658:	7abb      	ldrb	r3, [r7, #10]
 800165a:	041b      	lsls	r3, r3, #16
 800165c:	431a      	orrs	r2, r3
 800165e:	7afb      	ldrb	r3, [r7, #11]
 8001660:	061b      	lsls	r3, r3, #24
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	619a      	str	r2, [r3, #24]

    //  Leer corriente CC2 (16 bits)
    BQ76905_ReadRegister(bms, CURRENT_MEASUREMENT, rx, 2);
 8001668:	f107 0208 	add.w	r2, r7, #8
 800166c:	2302      	movs	r3, #2
 800166e:	213a      	movs	r1, #58	@ 0x3a
 8001670:	6878      	ldr	r0, [r7, #4]
 8001672:	f7ff ff0f 	bl	8001494 <BQ76905_ReadRegister>
    bms->current = (int16_t)(rx[0] | (rx[1] << 8));
 8001676:	7a3b      	ldrb	r3, [r7, #8]
 8001678:	b21a      	sxth	r2, r3
 800167a:	7a7b      	ldrb	r3, [r7, #9]
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	b21b      	sxth	r3, r3
 8001680:	4313      	orrs	r3, r2
 8001682:	b21a      	sxth	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	839a      	strh	r2, [r3, #28]

    //  Leer corriente CC1 (16 bits)
    BQ76905_ReadRegister(bms, CC1_CURRENT_MEASUREMENT, rx, 2);
 8001688:	f107 0208 	add.w	r2, r7, #8
 800168c:	2302      	movs	r3, #2
 800168e:	213c      	movs	r1, #60	@ 0x3c
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff feff 	bl	8001494 <BQ76905_ReadRegister>
    bms->cc1_current = (int16_t)(rx[0] | (rx[1] << 8));
 8001696:	7a3b      	ldrb	r3, [r7, #8]
 8001698:	b21a      	sxth	r2, r3
 800169a:	7a7b      	ldrb	r3, [r7, #9]
 800169c:	021b      	lsls	r3, r3, #8
 800169e:	b21b      	sxth	r3, r3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	b21a      	sxth	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	83da      	strh	r2, [r3, #30]

    //  Leer estado de la batería
    BQ76905_ReadRegister(bms, BATTERY_STATUS, rx, 2);
 80016a8:	f107 0208 	add.w	r2, r7, #8
 80016ac:	2302      	movs	r3, #2
 80016ae:	2112      	movs	r1, #18
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff feef 	bl	8001494 <BQ76905_ReadRegister>
    bms->battery_status = rx[0] | (rx[1] << 8);
 80016b6:	7a3b      	ldrb	r3, [r7, #8]
 80016b8:	b25a      	sxtb	r2, r3
 80016ba:	7a7b      	ldrb	r3, [r7, #9]
 80016bc:	021b      	lsls	r3, r3, #8
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	4313      	orrs	r3, r2
 80016c2:	b25b      	sxtb	r3, r3
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f883 2020 	strb.w	r2, [r3, #32]

    //  Leer estado de alarmas y protecciones
    BQ76905_ReadRegister(bms, ALARM_STATUS, &bms->alarm_status, 1);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 80016d2:	2301      	movs	r3, #1
 80016d4:	2162      	movs	r1, #98	@ 0x62
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff fedc 	bl	8001494 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, ALARM_RAW_STATUS, &bms->alarm_raw_status, 1);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 80016e2:	2301      	movs	r3, #1
 80016e4:	2164      	movs	r1, #100	@ 0x64
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff fed4 	bl	8001494 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, ENABLED_PROT_A, &bms->enabled_protections, 1);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f103 0223 	add.w	r2, r3, #35	@ 0x23
 80016f2:	2301      	movs	r3, #1
 80016f4:	f249 0124 	movw	r1, #36900	@ 0x9024
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff fecb 	bl	8001494 <BQ76905_ReadRegister>

    //  Leer umbrales de protección por voltaje
    BQ76905_ReadRegister(bms, CELL_UNDERVOLTAGE_THRESHOLD, rx, 2);
 80016fe:	f107 0208 	add.w	r2, r7, #8
 8001702:	2302      	movs	r3, #2
 8001704:	f249 012e 	movw	r1, #36910	@ 0x902e
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff fec3 	bl	8001494 <BQ76905_ReadRegister>
    bms->cell_undervoltage_threshold = rx[0] | (rx[1] << 8);
 800170e:	7a3b      	ldrb	r3, [r7, #8]
 8001710:	b21a      	sxth	r2, r3
 8001712:	7a7b      	ldrb	r3, [r7, #9]
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	b21b      	sxth	r3, r3
 8001718:	4313      	orrs	r3, r2
 800171a:	b21b      	sxth	r3, r3
 800171c:	b29a      	uxth	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	849a      	strh	r2, [r3, #36]	@ 0x24

    BQ76905_ReadRegister(bms, CELL_OVERVOLTAGE_THRESHOLD, rx, 2);
 8001722:	f107 0208 	add.w	r2, r7, #8
 8001726:	2302      	movs	r3, #2
 8001728:	f249 0132 	movw	r1, #36914	@ 0x9032
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff feb1 	bl	8001494 <BQ76905_ReadRegister>
    bms->cell_overvoltage_threshold = rx[0] | (rx[1] << 8);
 8001732:	7a3b      	ldrb	r3, [r7, #8]
 8001734:	b21a      	sxth	r2, r3
 8001736:	7a7b      	ldrb	r3, [r7, #9]
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	b21b      	sxth	r3, r3
 800173c:	4313      	orrs	r3, r2
 800173e:	b21b      	sxth	r3, r3
 8001740:	b29a      	uxth	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	84da      	strh	r2, [r3, #38]	@ 0x26

    //  Leer protecciones de sobrecorriente y cortocircuito
    BQ76905_ReadRegister(bms, OVERCURRENT_CHARGE_THRESHOLD, &bms->overcurrent_charge_threshold, 1);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 800174c:	2301      	movs	r3, #1
 800174e:	f249 0136 	movw	r1, #36918	@ 0x9036
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff fe9e 	bl	8001494 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, OVERCURRENT_DISCHARGE_1, &bms->overcurrent_discharge_1, 1);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 800175e:	2301      	movs	r3, #1
 8001760:	f249 0138 	movw	r1, #36920	@ 0x9038
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f7ff fe95 	bl	8001494 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, OVERCURRENT_DISCHARGE_2, &bms->overcurrent_discharge_2, 1);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 8001770:	2301      	movs	r3, #1
 8001772:	f249 013a 	movw	r1, #36922	@ 0x903a
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff fe8c 	bl	8001494 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, SHORT_CIRCUIT_DISCHARGE, &bms->short_circuit_discharge, 1);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	f103 022b 	add.w	r2, r3, #43	@ 0x2b
 8001782:	2301      	movs	r3, #1
 8001784:	f249 013c 	movw	r1, #36924	@ 0x903c
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff fe83 	bl	8001494 <BQ76905_ReadRegister>

    //  Leer protecciones de temperatura
    BQ76905_ReadRegister(bms, OVERTEMP_CHARGE_THRESHOLD, &bms->overtemp_charge_threshold, 1);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8001794:	2301      	movs	r3, #1
 8001796:	f249 0140 	movw	r1, #36928	@ 0x9040
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff fe7a 	bl	8001494 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, UNDERTEMP_CHARGE_THRESHOLD, &bms->undertemp_charge_threshold, 1);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 80017a6:	2301      	movs	r3, #1
 80017a8:	f249 0143 	movw	r1, #36931	@ 0x9043
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff fe71 	bl	8001494 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, OVERTEMP_DISCHARGE_THRESHOLD, &bms->overtemp_discharge_threshold, 1);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 80017b8:	2301      	movs	r3, #1
 80017ba:	f249 0146 	movw	r1, #36934	@ 0x9046
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff fe68 	bl	8001494 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, UNDERTEMP_DISCHARGE_THRESHOLD, &bms->undertemp_discharge_threshold, 1);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 80017ca:	2301      	movs	r3, #1
 80017cc:	f249 0149 	movw	r1, #36937	@ 0x9049
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f7ff fe5f 	bl	8001494 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, INTERNAL_OVERTEMP_THRESHOLD, &bms->internal_overtemp_threshold, 1);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80017dc:	2301      	movs	r3, #1
 80017de:	f249 014c 	movw	r1, #36940	@ 0x904c
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f7ff fe56 	bl	8001494 <BQ76905_ReadRegister>
}
 80017e8:	bf00      	nop
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <sendBMSDataI2C>:

void sendBMSDataI2C(BQ76905_Device *bms) {
 80017f0:	b590      	push	{r4, r7, lr}
 80017f2:	b097      	sub	sp, #92	@ 0x5c
 80017f4:	af02      	add	r7, sp, #8
 80017f6:	6078      	str	r0, [r7, #4]
    char buffer[BUFFER_SIZE];

    // 🟢 Encabezado
    snprintf(buffer, BUFFER_SIZE, "\n--- Datos del BMS ---\n");
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001834 <sendBMSDataI2C+0x44>)
 80017fe:	2140      	movs	r1, #64	@ 0x40
 8001800:	4618      	mov	r0, r3
 8001802:	f006 f8cf 	bl	80079a4 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001806:	f107 030c 	add.w	r3, r7, #12
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fd30 	bl	8000270 <strlen>
 8001810:	4603      	mov	r3, r0
 8001812:	b29b      	uxth	r3, r3
 8001814:	f107 020c 	add.w	r2, r7, #12
 8001818:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800181c:	9100      	str	r1, [sp, #0]
 800181e:	2110      	movs	r1, #16
 8001820:	4805      	ldr	r0, [pc, #20]	@ (8001838 <sendBMSDataI2C+0x48>)
 8001822:	f002 fc27 	bl	8004074 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001826:	200a      	movs	r0, #10
 8001828:	f001 fc54 	bl	80030d4 <HAL_Delay>

    // 🔹 Voltajes de celdas
    for (int i = 0; i < MAX_CELLS; i++) {
 800182c:	2300      	movs	r3, #0
 800182e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001830:	e034      	b.n	800189c <sendBMSDataI2C+0xac>
 8001832:	bf00      	nop
 8001834:	08009dc0 	.word	0x08009dc0
 8001838:	2000031c 	.word	0x2000031c
        snprintf(buffer, BUFFER_SIZE, "Celda %d: %.3f V\n", i + 1, bms->cell_voltages[i] * 0.001);
 800183c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800183e:	1c5c      	adds	r4, r3, #1
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	889b      	ldrh	r3, [r3, #4]
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fe74 	bl	8000538 <__aeabi_i2d>
 8001850:	a3d3      	add	r3, pc, #844	@ (adr r3, 8001ba0 <sendBMSDataI2C+0x3b0>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7fe fed9 	bl	800060c <__aeabi_dmul>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	f107 000c 	add.w	r0, r7, #12
 8001862:	e9cd 2300 	strd	r2, r3, [sp]
 8001866:	4623      	mov	r3, r4
 8001868:	4ad1      	ldr	r2, [pc, #836]	@ (8001bb0 <sendBMSDataI2C+0x3c0>)
 800186a:	2140      	movs	r1, #64	@ 0x40
 800186c:	f006 f89a 	bl	80079a4 <sniprintf>
        HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe fcfb 	bl	8000270 <strlen>
 800187a:	4603      	mov	r3, r0
 800187c:	b29b      	uxth	r3, r3
 800187e:	f107 020c 	add.w	r2, r7, #12
 8001882:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001886:	9100      	str	r1, [sp, #0]
 8001888:	2110      	movs	r1, #16
 800188a:	48ca      	ldr	r0, [pc, #808]	@ (8001bb4 <sendBMSDataI2C+0x3c4>)
 800188c:	f002 fbf2 	bl	8004074 <HAL_I2C_Master_Transmit>
        HAL_Delay(10);
 8001890:	200a      	movs	r0, #10
 8001892:	f001 fc1f 	bl	80030d4 <HAL_Delay>
    for (int i = 0; i < MAX_CELLS; i++) {
 8001896:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001898:	3301      	adds	r3, #1
 800189a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800189c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800189e:	2b04      	cmp	r3, #4
 80018a0:	ddcc      	ble.n	800183c <sendBMSDataI2C+0x4c>
    }

    // 🔹 Voltajes generales
    snprintf(buffer, BUFFER_SIZE, "Voltaje Pack: %.3f V\n", bms->stack_voltage * 0.001);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	89db      	ldrh	r3, [r3, #14]
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fe46 	bl	8000538 <__aeabi_i2d>
 80018ac:	a3bc      	add	r3, pc, #752	@ (adr r3, 8001ba0 <sendBMSDataI2C+0x3b0>)
 80018ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b2:	f7fe feab 	bl	800060c <__aeabi_dmul>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	f107 000c 	add.w	r0, r7, #12
 80018be:	e9cd 2300 	strd	r2, r3, [sp]
 80018c2:	4abd      	ldr	r2, [pc, #756]	@ (8001bb8 <sendBMSDataI2C+0x3c8>)
 80018c4:	2140      	movs	r1, #64	@ 0x40
 80018c6:	f006 f86d 	bl	80079a4 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80018ca:	f107 030c 	add.w	r3, r7, #12
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fcce 	bl	8000270 <strlen>
 80018d4:	4603      	mov	r3, r0
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	f107 020c 	add.w	r2, r7, #12
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018e0:	9100      	str	r1, [sp, #0]
 80018e2:	2110      	movs	r1, #16
 80018e4:	48b3      	ldr	r0, [pc, #716]	@ (8001bb4 <sendBMSDataI2C+0x3c4>)
 80018e6:	f002 fbc5 	bl	8004074 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 80018ea:	200a      	movs	r0, #10
 80018ec:	f001 fbf2 	bl	80030d4 <HAL_Delay>

    snprintf(buffer, BUFFER_SIZE, "Voltaje REG18: %.3f V\n", bms->reg18_voltage * 0.001);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	8a1b      	ldrh	r3, [r3, #16]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fe1f 	bl	8000538 <__aeabi_i2d>
 80018fa:	a3a9      	add	r3, pc, #676	@ (adr r3, 8001ba0 <sendBMSDataI2C+0x3b0>)
 80018fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001900:	f7fe fe84 	bl	800060c <__aeabi_dmul>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	f107 000c 	add.w	r0, r7, #12
 800190c:	e9cd 2300 	strd	r2, r3, [sp]
 8001910:	4aaa      	ldr	r2, [pc, #680]	@ (8001bbc <sendBMSDataI2C+0x3cc>)
 8001912:	2140      	movs	r1, #64	@ 0x40
 8001914:	f006 f846 	bl	80079a4 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001918:	f107 030c 	add.w	r3, r7, #12
 800191c:	4618      	mov	r0, r3
 800191e:	f7fe fca7 	bl	8000270 <strlen>
 8001922:	4603      	mov	r3, r0
 8001924:	b29b      	uxth	r3, r3
 8001926:	f107 020c 	add.w	r2, r7, #12
 800192a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800192e:	9100      	str	r1, [sp, #0]
 8001930:	2110      	movs	r1, #16
 8001932:	48a0      	ldr	r0, [pc, #640]	@ (8001bb4 <sendBMSDataI2C+0x3c4>)
 8001934:	f002 fb9e 	bl	8004074 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001938:	200a      	movs	r0, #10
 800193a:	f001 fbcb 	bl	80030d4 <HAL_Delay>

    snprintf(buffer, BUFFER_SIZE, "Voltaje VSS: %.3f V\n", bms->vss_voltage * 0.001);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	8a5b      	ldrh	r3, [r3, #18]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fdf8 	bl	8000538 <__aeabi_i2d>
 8001948:	a395      	add	r3, pc, #596	@ (adr r3, 8001ba0 <sendBMSDataI2C+0x3b0>)
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194e:	f7fe fe5d 	bl	800060c <__aeabi_dmul>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	f107 000c 	add.w	r0, r7, #12
 800195a:	e9cd 2300 	strd	r2, r3, [sp]
 800195e:	4a98      	ldr	r2, [pc, #608]	@ (8001bc0 <sendBMSDataI2C+0x3d0>)
 8001960:	2140      	movs	r1, #64	@ 0x40
 8001962:	f006 f81f 	bl	80079a4 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001966:	f107 030c 	add.w	r3, r7, #12
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fc80 	bl	8000270 <strlen>
 8001970:	4603      	mov	r3, r0
 8001972:	b29b      	uxth	r3, r3
 8001974:	f107 020c 	add.w	r2, r7, #12
 8001978:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800197c:	9100      	str	r1, [sp, #0]
 800197e:	2110      	movs	r1, #16
 8001980:	488c      	ldr	r0, [pc, #560]	@ (8001bb4 <sendBMSDataI2C+0x3c4>)
 8001982:	f002 fb77 	bl	8004074 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001986:	200a      	movs	r0, #10
 8001988:	f001 fba4 	bl	80030d4 <HAL_Delay>

    // 🔹 Temperaturas
    snprintf(buffer, BUFFER_SIZE, "Temp Interna: %.2f °C\n", bms->internal_temperature * 0.1);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fdd0 	bl	8000538 <__aeabi_i2d>
 8001998:	a383      	add	r3, pc, #524	@ (adr r3, 8001ba8 <sendBMSDataI2C+0x3b8>)
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	f7fe fe35 	bl	800060c <__aeabi_dmul>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	f107 000c 	add.w	r0, r7, #12
 80019aa:	e9cd 2300 	strd	r2, r3, [sp]
 80019ae:	4a85      	ldr	r2, [pc, #532]	@ (8001bc4 <sendBMSDataI2C+0x3d4>)
 80019b0:	2140      	movs	r1, #64	@ 0x40
 80019b2:	f005 fff7 	bl	80079a4 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80019b6:	f107 030c 	add.w	r3, r7, #12
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fc58 	bl	8000270 <strlen>
 80019c0:	4603      	mov	r3, r0
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	f107 020c 	add.w	r2, r7, #12
 80019c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019cc:	9100      	str	r1, [sp, #0]
 80019ce:	2110      	movs	r1, #16
 80019d0:	4878      	ldr	r0, [pc, #480]	@ (8001bb4 <sendBMSDataI2C+0x3c4>)
 80019d2:	f002 fb4f 	bl	8004074 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 80019d6:	200a      	movs	r0, #10
 80019d8:	f001 fb7c 	bl	80030d4 <HAL_Delay>

    snprintf(buffer, BUFFER_SIZE, "Temp Externa: %.2f °C\n", bms->ts_measurement * 0.1);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	8adb      	ldrh	r3, [r3, #22]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fda9 	bl	8000538 <__aeabi_i2d>
 80019e6:	a370      	add	r3, pc, #448	@ (adr r3, 8001ba8 <sendBMSDataI2C+0x3b8>)
 80019e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ec:	f7fe fe0e 	bl	800060c <__aeabi_dmul>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	f107 000c 	add.w	r0, r7, #12
 80019f8:	e9cd 2300 	strd	r2, r3, [sp]
 80019fc:	4a72      	ldr	r2, [pc, #456]	@ (8001bc8 <sendBMSDataI2C+0x3d8>)
 80019fe:	2140      	movs	r1, #64	@ 0x40
 8001a00:	f005 ffd0 	bl	80079a4 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001a04:	f107 030c 	add.w	r3, r7, #12
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7fe fc31 	bl	8000270 <strlen>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	f107 020c 	add.w	r2, r7, #12
 8001a16:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a1a:	9100      	str	r1, [sp, #0]
 8001a1c:	2110      	movs	r1, #16
 8001a1e:	4865      	ldr	r0, [pc, #404]	@ (8001bb4 <sendBMSDataI2C+0x3c4>)
 8001a20:	f002 fb28 	bl	8004074 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001a24:	200a      	movs	r0, #10
 8001a26:	f001 fb55 	bl	80030d4 <HAL_Delay>

    // 🔹 Corriente
    snprintf(buffer, BUFFER_SIZE, "Corriente Raw: %ld\n", (int32_t)bms->raw_current);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	f107 000c 	add.w	r0, r7, #12
 8001a32:	4a66      	ldr	r2, [pc, #408]	@ (8001bcc <sendBMSDataI2C+0x3dc>)
 8001a34:	2140      	movs	r1, #64	@ 0x40
 8001a36:	f005 ffb5 	bl	80079a4 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fc16 	bl	8000270 <strlen>
 8001a44:	4603      	mov	r3, r0
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	f107 020c 	add.w	r2, r7, #12
 8001a4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a50:	9100      	str	r1, [sp, #0]
 8001a52:	2110      	movs	r1, #16
 8001a54:	4857      	ldr	r0, [pc, #348]	@ (8001bb4 <sendBMSDataI2C+0x3c4>)
 8001a56:	f002 fb0d 	bl	8004074 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001a5a:	200a      	movs	r0, #10
 8001a5c:	f001 fb3a 	bl	80030d4 <HAL_Delay>

    snprintf(buffer, BUFFER_SIZE, "Corriente CC2: %d mA\n", (int16_t)bms->current);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001a66:	f107 000c 	add.w	r0, r7, #12
 8001a6a:	4a59      	ldr	r2, [pc, #356]	@ (8001bd0 <sendBMSDataI2C+0x3e0>)
 8001a6c:	2140      	movs	r1, #64	@ 0x40
 8001a6e:	f005 ff99 	bl	80079a4 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001a72:	f107 030c 	add.w	r3, r7, #12
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fbfa 	bl	8000270 <strlen>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	f107 020c 	add.w	r2, r7, #12
 8001a84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a88:	9100      	str	r1, [sp, #0]
 8001a8a:	2110      	movs	r1, #16
 8001a8c:	4849      	ldr	r0, [pc, #292]	@ (8001bb4 <sendBMSDataI2C+0x3c4>)
 8001a8e:	f002 faf1 	bl	8004074 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001a92:	200a      	movs	r0, #10
 8001a94:	f001 fb1e 	bl	80030d4 <HAL_Delay>

    snprintf(buffer, BUFFER_SIZE, "Corriente CC1: %d mA\n", (int16_t)bms->cc1_current);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001a9e:	f107 000c 	add.w	r0, r7, #12
 8001aa2:	4a4c      	ldr	r2, [pc, #304]	@ (8001bd4 <sendBMSDataI2C+0x3e4>)
 8001aa4:	2140      	movs	r1, #64	@ 0x40
 8001aa6:	f005 ff7d 	bl	80079a4 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001aaa:	f107 030c 	add.w	r3, r7, #12
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fbde 	bl	8000270 <strlen>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	f107 020c 	add.w	r2, r7, #12
 8001abc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ac0:	9100      	str	r1, [sp, #0]
 8001ac2:	2110      	movs	r1, #16
 8001ac4:	483b      	ldr	r0, [pc, #236]	@ (8001bb4 <sendBMSDataI2C+0x3c4>)
 8001ac6:	f002 fad5 	bl	8004074 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001aca:	200a      	movs	r0, #10
 8001acc:	f001 fb02 	bl	80030d4 <HAL_Delay>

    // 🔹 Estados y Protecciones
    snprintf(buffer, BUFFER_SIZE, "Estado Bateria: 0x%02X\n", bms->battery_status);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ad6:	f107 000c 	add.w	r0, r7, #12
 8001ada:	4a3f      	ldr	r2, [pc, #252]	@ (8001bd8 <sendBMSDataI2C+0x3e8>)
 8001adc:	2140      	movs	r1, #64	@ 0x40
 8001ade:	f005 ff61 	bl	80079a4 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fbc2 	bl	8000270 <strlen>
 8001aec:	4603      	mov	r3, r0
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	f107 020c 	add.w	r2, r7, #12
 8001af4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001af8:	9100      	str	r1, [sp, #0]
 8001afa:	2110      	movs	r1, #16
 8001afc:	482d      	ldr	r0, [pc, #180]	@ (8001bb4 <sendBMSDataI2C+0x3c4>)
 8001afe:	f002 fab9 	bl	8004074 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001b02:	200a      	movs	r0, #10
 8001b04:	f001 fae6 	bl	80030d4 <HAL_Delay>

    snprintf(buffer, BUFFER_SIZE, "Alarmas Activas: 0x%02X\n", bms->alarm_status);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b0e:	f107 000c 	add.w	r0, r7, #12
 8001b12:	4a32      	ldr	r2, [pc, #200]	@ (8001bdc <sendBMSDataI2C+0x3ec>)
 8001b14:	2140      	movs	r1, #64	@ 0x40
 8001b16:	f005 ff45 	bl	80079a4 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fba6 	bl	8000270 <strlen>
 8001b24:	4603      	mov	r3, r0
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	f107 020c 	add.w	r2, r7, #12
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b30:	9100      	str	r1, [sp, #0]
 8001b32:	2110      	movs	r1, #16
 8001b34:	481f      	ldr	r0, [pc, #124]	@ (8001bb4 <sendBMSDataI2C+0x3c4>)
 8001b36:	f002 fa9d 	bl	8004074 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001b3a:	200a      	movs	r0, #10
 8001b3c:	f001 faca 	bl	80030d4 <HAL_Delay>

    snprintf(buffer, BUFFER_SIZE, "Protecciones Activas: 0x%02X\n", bms->enabled_protections);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001b46:	f107 000c 	add.w	r0, r7, #12
 8001b4a:	4a25      	ldr	r2, [pc, #148]	@ (8001be0 <sendBMSDataI2C+0x3f0>)
 8001b4c:	2140      	movs	r1, #64	@ 0x40
 8001b4e:	f005 ff29 	bl	80079a4 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001b52:	f107 030c 	add.w	r3, r7, #12
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fb8a 	bl	8000270 <strlen>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	f107 020c 	add.w	r2, r7, #12
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b68:	9100      	str	r1, [sp, #0]
 8001b6a:	2110      	movs	r1, #16
 8001b6c:	4811      	ldr	r0, [pc, #68]	@ (8001bb4 <sendBMSDataI2C+0x3c4>)
 8001b6e:	f002 fa81 	bl	8004074 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001b72:	200a      	movs	r0, #10
 8001b74:	f001 faae 	bl	80030d4 <HAL_Delay>

    // 🔹 Configuración de Protección por Voltaje
    snprintf(buffer, BUFFER_SIZE, "Undervoltage Threshold: %.3f V\n", bms->cell_undervoltage_threshold * 0.001);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fcdb 	bl	8000538 <__aeabi_i2d>
 8001b82:	a307      	add	r3, pc, #28	@ (adr r3, 8001ba0 <sendBMSDataI2C+0x3b0>)
 8001b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b88:	f7fe fd40 	bl	800060c <__aeabi_dmul>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	f107 000c 	add.w	r0, r7, #12
 8001b94:	e9cd 2300 	strd	r2, r3, [sp]
 8001b98:	e024      	b.n	8001be4 <sendBMSDataI2C+0x3f4>
 8001b9a:	bf00      	nop
 8001b9c:	f3af 8000 	nop.w
 8001ba0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001ba4:	3f50624d 	.word	0x3f50624d
 8001ba8:	9999999a 	.word	0x9999999a
 8001bac:	3fb99999 	.word	0x3fb99999
 8001bb0:	08009dd8 	.word	0x08009dd8
 8001bb4:	2000031c 	.word	0x2000031c
 8001bb8:	08009dec 	.word	0x08009dec
 8001bbc:	08009e04 	.word	0x08009e04
 8001bc0:	08009e1c 	.word	0x08009e1c
 8001bc4:	08009e34 	.word	0x08009e34
 8001bc8:	08009e4c 	.word	0x08009e4c
 8001bcc:	08009e64 	.word	0x08009e64
 8001bd0:	08009e78 	.word	0x08009e78
 8001bd4:	08009e90 	.word	0x08009e90
 8001bd8:	08009ea8 	.word	0x08009ea8
 8001bdc:	08009ec0 	.word	0x08009ec0
 8001be0:	08009edc 	.word	0x08009edc
 8001be4:	4a86      	ldr	r2, [pc, #536]	@ (8001e00 <sendBMSDataI2C+0x610>)
 8001be6:	2140      	movs	r1, #64	@ 0x40
 8001be8:	f005 fedc 	bl	80079a4 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001bec:	f107 030c 	add.w	r3, r7, #12
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe fb3d 	bl	8000270 <strlen>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	f107 020c 	add.w	r2, r7, #12
 8001bfe:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c02:	9100      	str	r1, [sp, #0]
 8001c04:	2110      	movs	r1, #16
 8001c06:	487f      	ldr	r0, [pc, #508]	@ (8001e04 <sendBMSDataI2C+0x614>)
 8001c08:	f002 fa34 	bl	8004074 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001c0c:	200a      	movs	r0, #10
 8001c0e:	f001 fa61 	bl	80030d4 <HAL_Delay>

    snprintf(buffer, BUFFER_SIZE, "Overvoltage Threshold: %.3f V\n", bms->cell_overvoltage_threshold * 0.001);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7fe fc8e 	bl	8000538 <__aeabi_i2d>
 8001c1c:	a374      	add	r3, pc, #464	@ (adr r3, 8001df0 <sendBMSDataI2C+0x600>)
 8001c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c22:	f7fe fcf3 	bl	800060c <__aeabi_dmul>
 8001c26:	4602      	mov	r2, r0
 8001c28:	460b      	mov	r3, r1
 8001c2a:	f107 000c 	add.w	r0, r7, #12
 8001c2e:	e9cd 2300 	strd	r2, r3, [sp]
 8001c32:	4a75      	ldr	r2, [pc, #468]	@ (8001e08 <sendBMSDataI2C+0x618>)
 8001c34:	2140      	movs	r1, #64	@ 0x40
 8001c36:	f005 feb5 	bl	80079a4 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001c3a:	f107 030c 	add.w	r3, r7, #12
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fb16 	bl	8000270 <strlen>
 8001c44:	4603      	mov	r3, r0
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	f107 020c 	add.w	r2, r7, #12
 8001c4c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c50:	9100      	str	r1, [sp, #0]
 8001c52:	2110      	movs	r1, #16
 8001c54:	486b      	ldr	r0, [pc, #428]	@ (8001e04 <sendBMSDataI2C+0x614>)
 8001c56:	f002 fa0d 	bl	8004074 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001c5a:	200a      	movs	r0, #10
 8001c5c:	f001 fa3a 	bl	80030d4 <HAL_Delay>

    // 🔹 Protección por Corriente
    snprintf(buffer, BUFFER_SIZE, "Overcurrent Charge: %d mA\n", bms->overcurrent_charge_threshold * 10);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001c66:	461a      	mov	r2, r3
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	f107 000c 	add.w	r0, r7, #12
 8001c74:	4a65      	ldr	r2, [pc, #404]	@ (8001e0c <sendBMSDataI2C+0x61c>)
 8001c76:	2140      	movs	r1, #64	@ 0x40
 8001c78:	f005 fe94 	bl	80079a4 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001c7c:	f107 030c 	add.w	r3, r7, #12
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe faf5 	bl	8000270 <strlen>
 8001c86:	4603      	mov	r3, r0
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	f107 020c 	add.w	r2, r7, #12
 8001c8e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c92:	9100      	str	r1, [sp, #0]
 8001c94:	2110      	movs	r1, #16
 8001c96:	485b      	ldr	r0, [pc, #364]	@ (8001e04 <sendBMSDataI2C+0x614>)
 8001c98:	f002 f9ec 	bl	8004074 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001c9c:	200a      	movs	r0, #10
 8001c9e:	f001 fa19 	bl	80030d4 <HAL_Delay>

    snprintf(buffer, BUFFER_SIZE, "Overcurrent Discharge 1: %d mA\n", bms->overcurrent_discharge_1 * 10);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4613      	mov	r3, r2
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	4413      	add	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	f107 000c 	add.w	r0, r7, #12
 8001cb6:	4a56      	ldr	r2, [pc, #344]	@ (8001e10 <sendBMSDataI2C+0x620>)
 8001cb8:	2140      	movs	r1, #64	@ 0x40
 8001cba:	f005 fe73 	bl	80079a4 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001cbe:	f107 030c 	add.w	r3, r7, #12
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fad4 	bl	8000270 <strlen>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	f107 020c 	add.w	r2, r7, #12
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cd4:	9100      	str	r1, [sp, #0]
 8001cd6:	2110      	movs	r1, #16
 8001cd8:	484a      	ldr	r0, [pc, #296]	@ (8001e04 <sendBMSDataI2C+0x614>)
 8001cda:	f002 f9cb 	bl	8004074 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001cde:	200a      	movs	r0, #10
 8001ce0:	f001 f9f8 	bl	80030d4 <HAL_Delay>

    snprintf(buffer, BUFFER_SIZE, "Overcurrent Discharge 2: %d mA\n", bms->overcurrent_discharge_2 * 10);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001cea:	461a      	mov	r2, r3
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	f107 000c 	add.w	r0, r7, #12
 8001cf8:	4a46      	ldr	r2, [pc, #280]	@ (8001e14 <sendBMSDataI2C+0x624>)
 8001cfa:	2140      	movs	r1, #64	@ 0x40
 8001cfc:	f005 fe52 	bl	80079a4 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001d00:	f107 030c 	add.w	r3, r7, #12
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fab3 	bl	8000270 <strlen>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	f107 020c 	add.w	r2, r7, #12
 8001d12:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d16:	9100      	str	r1, [sp, #0]
 8001d18:	2110      	movs	r1, #16
 8001d1a:	483a      	ldr	r0, [pc, #232]	@ (8001e04 <sendBMSDataI2C+0x614>)
 8001d1c:	f002 f9aa 	bl	8004074 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001d20:	200a      	movs	r0, #10
 8001d22:	f001 f9d7 	bl	80030d4 <HAL_Delay>

    snprintf(buffer, BUFFER_SIZE, "Short Circuit Discharge: %d mA\n", bms->short_circuit_discharge * 10);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	f107 000c 	add.w	r0, r7, #12
 8001d3a:	4a37      	ldr	r2, [pc, #220]	@ (8001e18 <sendBMSDataI2C+0x628>)
 8001d3c:	2140      	movs	r1, #64	@ 0x40
 8001d3e:	f005 fe31 	bl	80079a4 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001d42:	f107 030c 	add.w	r3, r7, #12
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fa92 	bl	8000270 <strlen>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	f107 020c 	add.w	r2, r7, #12
 8001d54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d58:	9100      	str	r1, [sp, #0]
 8001d5a:	2110      	movs	r1, #16
 8001d5c:	4829      	ldr	r0, [pc, #164]	@ (8001e04 <sendBMSDataI2C+0x614>)
 8001d5e:	f002 f989 	bl	8004074 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001d62:	200a      	movs	r0, #10
 8001d64:	f001 f9b6 	bl	80030d4 <HAL_Delay>

    // 🔹 Protección por Temperatura
    snprintf(buffer, BUFFER_SIZE, "Overtemp Charge: %.2f °C\n", bms->overtemp_charge_threshold * 0.1);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7fe fbe2 	bl	8000538 <__aeabi_i2d>
 8001d74:	a320      	add	r3, pc, #128	@ (adr r3, 8001df8 <sendBMSDataI2C+0x608>)
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7a:	f7fe fc47 	bl	800060c <__aeabi_dmul>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	f107 000c 	add.w	r0, r7, #12
 8001d86:	e9cd 2300 	strd	r2, r3, [sp]
 8001d8a:	4a24      	ldr	r2, [pc, #144]	@ (8001e1c <sendBMSDataI2C+0x62c>)
 8001d8c:	2140      	movs	r1, #64	@ 0x40
 8001d8e:	f005 fe09 	bl	80079a4 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fa6a 	bl	8000270 <strlen>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	f107 020c 	add.w	r2, r7, #12
 8001da4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001da8:	9100      	str	r1, [sp, #0]
 8001daa:	2110      	movs	r1, #16
 8001dac:	4815      	ldr	r0, [pc, #84]	@ (8001e04 <sendBMSDataI2C+0x614>)
 8001dae:	f002 f961 	bl	8004074 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001db2:	200a      	movs	r0, #10
 8001db4:	f001 f98e 	bl	80030d4 <HAL_Delay>

    // 🟢 Fin del mensaje
    snprintf(buffer, BUFFER_SIZE, "--------------------------\n");
 8001db8:	f107 030c 	add.w	r3, r7, #12
 8001dbc:	4a18      	ldr	r2, [pc, #96]	@ (8001e20 <sendBMSDataI2C+0x630>)
 8001dbe:	2140      	movs	r1, #64	@ 0x40
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f005 fdef 	bl	80079a4 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001dc6:	f107 030c 	add.w	r3, r7, #12
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fa50 	bl	8000270 <strlen>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	f107 020c 	add.w	r2, r7, #12
 8001dd8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ddc:	9100      	str	r1, [sp, #0]
 8001dde:	2110      	movs	r1, #16
 8001de0:	4808      	ldr	r0, [pc, #32]	@ (8001e04 <sendBMSDataI2C+0x614>)
 8001de2:	f002 f947 	bl	8004074 <HAL_I2C_Master_Transmit>
}
 8001de6:	bf00      	nop
 8001de8:	3754      	adds	r7, #84	@ 0x54
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd90      	pop	{r4, r7, pc}
 8001dee:	bf00      	nop
 8001df0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001df4:	3f50624d 	.word	0x3f50624d
 8001df8:	9999999a 	.word	0x9999999a
 8001dfc:	3fb99999 	.word	0x3fb99999
 8001e00:	08009efc 	.word	0x08009efc
 8001e04:	2000031c 	.word	0x2000031c
 8001e08:	08009f1c 	.word	0x08009f1c
 8001e0c:	08009f3c 	.word	0x08009f3c
 8001e10:	08009f58 	.word	0x08009f58
 8001e14:	08009f78 	.word	0x08009f78
 8001e18:	08009f98 	.word	0x08009f98
 8001e1c:	08009fb8 	.word	0x08009fb8
 8001e20:	08009fd4 	.word	0x08009fd4

08001e24 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	@ 0x28
 8001e28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2a:	f107 0314 	add.w	r3, r7, #20
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	605a      	str	r2, [r3, #4]
 8001e34:	609a      	str	r2, [r3, #8]
 8001e36:	60da      	str	r2, [r3, #12]
 8001e38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	4b59      	ldr	r3, [pc, #356]	@ (8001fa4 <MX_GPIO_Init+0x180>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	4a58      	ldr	r2, [pc, #352]	@ (8001fa4 <MX_GPIO_Init+0x180>)
 8001e44:	f043 0304 	orr.w	r3, r3, #4
 8001e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e4a:	4b56      	ldr	r3, [pc, #344]	@ (8001fa4 <MX_GPIO_Init+0x180>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	4b52      	ldr	r3, [pc, #328]	@ (8001fa4 <MX_GPIO_Init+0x180>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	4a51      	ldr	r2, [pc, #324]	@ (8001fa4 <MX_GPIO_Init+0x180>)
 8001e60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e66:	4b4f      	ldr	r3, [pc, #316]	@ (8001fa4 <MX_GPIO_Init+0x180>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	4b4b      	ldr	r3, [pc, #300]	@ (8001fa4 <MX_GPIO_Init+0x180>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	4a4a      	ldr	r2, [pc, #296]	@ (8001fa4 <MX_GPIO_Init+0x180>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e82:	4b48      	ldr	r3, [pc, #288]	@ (8001fa4 <MX_GPIO_Init+0x180>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
 8001e92:	4b44      	ldr	r3, [pc, #272]	@ (8001fa4 <MX_GPIO_Init+0x180>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e96:	4a43      	ldr	r2, [pc, #268]	@ (8001fa4 <MX_GPIO_Init+0x180>)
 8001e98:	f043 0302 	orr.w	r3, r3, #2
 8001e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9e:	4b41      	ldr	r3, [pc, #260]	@ (8001fa4 <MX_GPIO_Init+0x180>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	607b      	str	r3, [r7, #4]
 8001ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	603b      	str	r3, [r7, #0]
 8001eae:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa4 <MX_GPIO_Init+0x180>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	4a3c      	ldr	r2, [pc, #240]	@ (8001fa4 <MX_GPIO_Init+0x180>)
 8001eb4:	f043 0308 	orr.w	r3, r3, #8
 8001eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eba:	4b3a      	ldr	r3, [pc, #232]	@ (8001fa4 <MX_GPIO_Init+0x180>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ebe:	f003 0308 	and.w	r3, r3, #8
 8001ec2:	603b      	str	r3, [r7, #0]
 8001ec4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Enable5V_Pin|Enable3_3VBis_Pin|Enable3_3V_Pin|Enable5VBis_Pin
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f645 4104 	movw	r1, #23556	@ 0x5c04
 8001ecc:	4836      	ldr	r0, [pc, #216]	@ (8001fa8 <MX_GPIO_Init+0x184>)
 8001ece:	f001 ff73 	bl	8003db8 <HAL_GPIO_WritePin>
                          |EnableCalefactor_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EnableBatOut_GPIO_Port, EnableBatOut_Pin, GPIO_PIN_RESET);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ed8:	4834      	ldr	r0, [pc, #208]	@ (8001fac <MX_GPIO_Init+0x188>)
 8001eda:	f001 ff6d 	bl	8003db8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC7 PC8 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 8001ede:	f24f 13c0 	movw	r3, #61888	@ 0xf1c0
 8001ee2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	482f      	ldr	r0, [pc, #188]	@ (8001fb0 <MX_GPIO_Init+0x18c>)
 8001ef4:	f001 fdc4 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Enable5V_Pin|Enable3_3VBis_Pin|Enable3_3V_Pin|Enable5VBis_Pin
 8001ef8:	f645 4304 	movw	r3, #23556	@ 0x5c04
 8001efc:	617b      	str	r3, [r7, #20]
                          |EnableCalefactor_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efe:	2301      	movs	r3, #1
 8001f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f02:	2301      	movs	r3, #1
 8001f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	2300      	movs	r3, #0
 8001f08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0a:	f107 0314 	add.w	r3, r7, #20
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4825      	ldr	r0, [pc, #148]	@ (8001fa8 <MX_GPIO_Init+0x184>)
 8001f12:	f001 fdb5 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
 8001f16:	f24a 0338 	movw	r3, #41016	@ 0xa038
 8001f1a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	4619      	mov	r1, r3
 8001f2a:	481f      	ldr	r0, [pc, #124]	@ (8001fa8 <MX_GPIO_Init+0x184>)
 8001f2c:	f001 fda8 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EnableBatOut_Pin;
 8001f30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f36:	2301      	movs	r3, #1
 8001f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EnableBatOut_GPIO_Port, &GPIO_InitStruct);
 8001f42:	f107 0314 	add.w	r3, r7, #20
 8001f46:	4619      	mov	r1, r3
 8001f48:	4818      	ldr	r0, [pc, #96]	@ (8001fac <MX_GPIO_Init+0x188>)
 8001f4a:	f001 fd99 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001f4e:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8001f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f54:	2303      	movs	r3, #3
 8001f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	4619      	mov	r1, r3
 8001f62:	4812      	ldr	r0, [pc, #72]	@ (8001fac <MX_GPIO_Init+0x188>)
 8001f64:	f001 fd8c 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f68:	2304      	movs	r3, #4
 8001f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f74:	f107 0314 	add.w	r3, r7, #20
 8001f78:	4619      	mov	r1, r3
 8001f7a:	480e      	ldr	r0, [pc, #56]	@ (8001fb4 <MX_GPIO_Init+0x190>)
 8001f7c:	f001 fd80 	bl	8003a80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMS_Alert_Pin;
 8001f80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BMS_Alert_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	4619      	mov	r1, r3
 8001f94:	4804      	ldr	r0, [pc, #16]	@ (8001fa8 <MX_GPIO_Init+0x184>)
 8001f96:	f001 fd73 	bl	8003a80 <HAL_GPIO_Init>

}
 8001f9a:	bf00      	nop
 8001f9c:	3728      	adds	r7, #40	@ 0x28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40020400 	.word	0x40020400
 8001fac:	40020000 	.word	0x40020000
 8001fb0:	40020800 	.word	0x40020800
 8001fb4:	40020c00 	.word	0x40020c00

08001fb8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fbc:	4b12      	ldr	r3, [pc, #72]	@ (8002008 <MX_I2C1_Init+0x50>)
 8001fbe:	4a13      	ldr	r2, [pc, #76]	@ (800200c <MX_I2C1_Init+0x54>)
 8001fc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001fc2:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <MX_I2C1_Init+0x50>)
 8001fc4:	4a12      	ldr	r2, [pc, #72]	@ (8002010 <MX_I2C1_Init+0x58>)
 8001fc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <MX_I2C1_Init+0x50>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fce:	4b0e      	ldr	r3, [pc, #56]	@ (8002008 <MX_I2C1_Init+0x50>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <MX_I2C1_Init+0x50>)
 8001fd6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001fda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002008 <MX_I2C1_Init+0x50>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001fe2:	4b09      	ldr	r3, [pc, #36]	@ (8002008 <MX_I2C1_Init+0x50>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fe8:	4b07      	ldr	r3, [pc, #28]	@ (8002008 <MX_I2C1_Init+0x50>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fee:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <MX_I2C1_Init+0x50>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ff4:	4804      	ldr	r0, [pc, #16]	@ (8002008 <MX_I2C1_Init+0x50>)
 8001ff6:	f001 fef9 	bl	8003dec <HAL_I2C_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002000:	f000 fa72 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002004:	bf00      	nop
 8002006:	bd80      	pop	{r7, pc}
 8002008:	200002c8 	.word	0x200002c8
 800200c:	40005400 	.word	0x40005400
 8002010:	00061a80 	.word	0x00061a80

08002014 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002018:	4b12      	ldr	r3, [pc, #72]	@ (8002064 <MX_I2C3_Init+0x50>)
 800201a:	4a13      	ldr	r2, [pc, #76]	@ (8002068 <MX_I2C3_Init+0x54>)
 800201c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800201e:	4b11      	ldr	r3, [pc, #68]	@ (8002064 <MX_I2C3_Init+0x50>)
 8002020:	4a12      	ldr	r2, [pc, #72]	@ (800206c <MX_I2C3_Init+0x58>)
 8002022:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002024:	4b0f      	ldr	r3, [pc, #60]	@ (8002064 <MX_I2C3_Init+0x50>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800202a:	4b0e      	ldr	r3, [pc, #56]	@ (8002064 <MX_I2C3_Init+0x50>)
 800202c:	2200      	movs	r2, #0
 800202e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002030:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <MX_I2C3_Init+0x50>)
 8002032:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002036:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002038:	4b0a      	ldr	r3, [pc, #40]	@ (8002064 <MX_I2C3_Init+0x50>)
 800203a:	2200      	movs	r2, #0
 800203c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800203e:	4b09      	ldr	r3, [pc, #36]	@ (8002064 <MX_I2C3_Init+0x50>)
 8002040:	2200      	movs	r2, #0
 8002042:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002044:	4b07      	ldr	r3, [pc, #28]	@ (8002064 <MX_I2C3_Init+0x50>)
 8002046:	2200      	movs	r2, #0
 8002048:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800204a:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <MX_I2C3_Init+0x50>)
 800204c:	2200      	movs	r2, #0
 800204e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002050:	4804      	ldr	r0, [pc, #16]	@ (8002064 <MX_I2C3_Init+0x50>)
 8002052:	f001 fecb 	bl	8003dec <HAL_I2C_Init>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800205c:	f000 fa44 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}
 8002064:	2000031c 	.word	0x2000031c
 8002068:	40005c00 	.word	0x40005c00
 800206c:	000186a0 	.word	0x000186a0

08002070 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08c      	sub	sp, #48	@ 0x30
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 031c 	add.w	r3, r7, #28
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a42      	ldr	r2, [pc, #264]	@ (8002198 <HAL_I2C_MspInit+0x128>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d12c      	bne.n	80020ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	61bb      	str	r3, [r7, #24]
 8002096:	4b41      	ldr	r3, [pc, #260]	@ (800219c <HAL_I2C_MspInit+0x12c>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	4a40      	ldr	r2, [pc, #256]	@ (800219c <HAL_I2C_MspInit+0x12c>)
 800209c:	f043 0302 	orr.w	r3, r3, #2
 80020a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020a2:	4b3e      	ldr	r3, [pc, #248]	@ (800219c <HAL_I2C_MspInit+0x12c>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	61bb      	str	r3, [r7, #24]
 80020ac:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_I2C_BMS_Pin|SDA_I2C_BMS_Pin;
 80020ae:	23c0      	movs	r3, #192	@ 0xc0
 80020b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020b2:	2312      	movs	r3, #18
 80020b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ba:	2303      	movs	r3, #3
 80020bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020be:	2304      	movs	r3, #4
 80020c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020c2:	f107 031c 	add.w	r3, r7, #28
 80020c6:	4619      	mov	r1, r3
 80020c8:	4835      	ldr	r0, [pc, #212]	@ (80021a0 <HAL_I2C_MspInit+0x130>)
 80020ca:	f001 fcd9 	bl	8003a80 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	617b      	str	r3, [r7, #20]
 80020d2:	4b32      	ldr	r3, [pc, #200]	@ (800219c <HAL_I2C_MspInit+0x12c>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d6:	4a31      	ldr	r2, [pc, #196]	@ (800219c <HAL_I2C_MspInit+0x12c>)
 80020d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020de:	4b2f      	ldr	r3, [pc, #188]	@ (800219c <HAL_I2C_MspInit+0x12c>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80020ea:	e050      	b.n	800218e <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a2c      	ldr	r2, [pc, #176]	@ (80021a4 <HAL_I2C_MspInit+0x134>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d14b      	bne.n	800218e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	4b28      	ldr	r3, [pc, #160]	@ (800219c <HAL_I2C_MspInit+0x12c>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	4a27      	ldr	r2, [pc, #156]	@ (800219c <HAL_I2C_MspInit+0x12c>)
 8002100:	f043 0304 	orr.w	r3, r3, #4
 8002104:	6313      	str	r3, [r2, #48]	@ 0x30
 8002106:	4b25      	ldr	r3, [pc, #148]	@ (800219c <HAL_I2C_MspInit+0x12c>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	4b21      	ldr	r3, [pc, #132]	@ (800219c <HAL_I2C_MspInit+0x12c>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	4a20      	ldr	r2, [pc, #128]	@ (800219c <HAL_I2C_MspInit+0x12c>)
 800211c:	f043 0301 	orr.w	r3, r3, #1
 8002120:	6313      	str	r3, [r2, #48]	@ 0x30
 8002122:	4b1e      	ldr	r3, [pc, #120]	@ (800219c <HAL_I2C_MspInit+0x12c>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SDA_I2C_COM_Pin;
 800212e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002132:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002134:	2312      	movs	r3, #18
 8002136:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002138:	2301      	movs	r3, #1
 800213a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213c:	2303      	movs	r3, #3
 800213e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002140:	2304      	movs	r3, #4
 8002142:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SDA_I2C_COM_GPIO_Port, &GPIO_InitStruct);
 8002144:	f107 031c 	add.w	r3, r7, #28
 8002148:	4619      	mov	r1, r3
 800214a:	4817      	ldr	r0, [pc, #92]	@ (80021a8 <HAL_I2C_MspInit+0x138>)
 800214c:	f001 fc98 	bl	8003a80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCL_I2C_COM_Pin;
 8002150:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002154:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002156:	2312      	movs	r3, #18
 8002158:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800215a:	2301      	movs	r3, #1
 800215c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215e:	2303      	movs	r3, #3
 8002160:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002162:	2304      	movs	r3, #4
 8002164:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SCL_I2C_COM_GPIO_Port, &GPIO_InitStruct);
 8002166:	f107 031c 	add.w	r3, r7, #28
 800216a:	4619      	mov	r1, r3
 800216c:	480f      	ldr	r0, [pc, #60]	@ (80021ac <HAL_I2C_MspInit+0x13c>)
 800216e:	f001 fc87 	bl	8003a80 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	4b09      	ldr	r3, [pc, #36]	@ (800219c <HAL_I2C_MspInit+0x12c>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	4a08      	ldr	r2, [pc, #32]	@ (800219c <HAL_I2C_MspInit+0x12c>)
 800217c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002180:	6413      	str	r3, [r2, #64]	@ 0x40
 8002182:	4b06      	ldr	r3, [pc, #24]	@ (800219c <HAL_I2C_MspInit+0x12c>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002186:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
}
 800218e:	bf00      	nop
 8002190:	3730      	adds	r7, #48	@ 0x30
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40005400 	.word	0x40005400
 800219c:	40023800 	.word	0x40023800
 80021a0:	40020400 	.word	0x40020400
 80021a4:	40005c00 	.word	0x40005c00
 80021a8:	40020800 	.word	0x40020800
 80021ac:	40020000 	.word	0x40020000

080021b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021b0:	b5b0      	push	{r4, r5, r7, lr}
 80021b2:	b0d4      	sub	sp, #336	@ 0x150
 80021b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021b6:	f000 ff1b 	bl	8002ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021ba:	f000 f92d 	bl	8002418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021be:	f7ff fe31 	bl	8001e24 <MX_GPIO_Init>
  MX_ADC1_Init();
 80021c2:	f7fe fedd 	bl	8000f80 <MX_ADC1_Init>
  MX_ADC2_Init();
 80021c6:	f7fe ff2d 	bl	8001024 <MX_ADC2_Init>
  MX_ADC3_Init();
 80021ca:	f7fe ff7d 	bl	80010c8 <MX_ADC3_Init>
  MX_I2C3_Init();
 80021ce:	f7ff ff21 	bl	8002014 <MX_I2C3_Init>
  MX_TIM2_Init();
 80021d2:	f000 fc19 	bl	8002a08 <MX_TIM2_Init>
  MX_TIM4_Init();
 80021d6:	f000 fc71 	bl	8002abc <MX_TIM4_Init>
  MX_TIM5_Init();
 80021da:	f000 fcc7 	bl	8002b6c <MX_TIM5_Init>
  MX_UART4_Init();
 80021de:	f000 fdf1 	bl	8002dc4 <MX_UART4_Init>
  MX_USB_OTG_FS_PCD_Init();
 80021e2:	f000 fe61 	bl	8002ea8 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80021e6:	f7ff fee7 	bl	8001fb8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80021ea:	2100      	movs	r1, #0
 80021ec:	4879      	ldr	r0, [pc, #484]	@ (80023d4 <main+0x224>)
 80021ee:	f003 fbef 	bl	80059d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80021f2:	210c      	movs	r1, #12
 80021f4:	4878      	ldr	r0, [pc, #480]	@ (80023d8 <main+0x228>)
 80021f6:	f003 fbeb 	bl	80059d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 80021fa:	210c      	movs	r1, #12
 80021fc:	4877      	ldr	r0, [pc, #476]	@ (80023dc <main+0x22c>)
 80021fe:	f003 fbe7 	bl	80059d0 <HAL_TIM_PWM_Start>

	//MPPT Variables

	MPPT_Channel mpptX = {
 8002202:	4b77      	ldr	r3, [pc, #476]	@ (80023e0 <main+0x230>)
 8002204:	f507 7494 	add.w	r4, r7, #296	@ 0x128
 8002208:	461d      	mov	r5, r3
 800220a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800220c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800220e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002212:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002216:	e884 0003 	stmia.w	r4, {r0, r1}
		.power = -1,      // Inicializar como indefinido
		.prevPower = 0,
		.dutyCycle = 255 * 0  // 0% de 255
	};

	MPPT_Channel mpptY = {
 800221a:	4b72      	ldr	r3, [pc, #456]	@ (80023e4 <main+0x234>)
 800221c:	f507 7480 	add.w	r4, r7, #256	@ 0x100
 8002220:	461d      	mov	r5, r3
 8002222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800222a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800222e:	e884 0003 	stmia.w	r4, {r0, r1}
		.power = -1,      // Inicializar como indefinido
		.prevPower = 0,
		.dutyCycle = 255 * 0  // 0% de 255
	};

	MPPT_Channel mpptZ = {
 8002232:	4b6d      	ldr	r3, [pc, #436]	@ (80023e8 <main+0x238>)
 8002234:	f107 04d8 	add.w	r4, r7, #216	@ 0xd8
 8002238:	461d      	mov	r5, r3
 800223a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800223c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800223e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002240:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002242:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002246:	e884 0003 	stmia.w	r4, {r0, r1}
		.dutyCycle = 255 * 0  // 0% de 255
	};

	// PDU Variables

	PDU_Channel pdu_V5 = {
 800224a:	4b68      	ldr	r3, [pc, #416]	@ (80023ec <main+0x23c>)
 800224c:	f107 04b8 	add.w	r4, r7, #184	@ 0xb8
 8002250:	461d      	mov	r5, r3
 8002252:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002254:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002256:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800225a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    .label = "V5",
	    .gpio_port = GPIOB,  // Puerto GPIO de salida
	    .gpio_pin = GPIO_PIN_2  // Pin de control para 5V BIS
	};

	PDU_Channel pdu_V5bis = {
 800225e:	4b64      	ldr	r3, [pc, #400]	@ (80023f0 <main+0x240>)
 8002260:	f107 0498 	add.w	r4, r7, #152	@ 0x98
 8002264:	461d      	mov	r5, r3
 8002266:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002268:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800226a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800226e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    .label = "V5bis",
	    .gpio_port = GPIOB,
	    .gpio_pin = GPIO_PIN_12  // Pin de control para 5V BIS
	};

	PDU_Channel pdu_V3 = {
 8002272:	4b60      	ldr	r3, [pc, #384]	@ (80023f4 <main+0x244>)
 8002274:	f107 0478 	add.w	r4, r7, #120	@ 0x78
 8002278:	461d      	mov	r5, r3
 800227a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800227c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800227e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002282:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    .label = "V3",
	    .gpio_port = GPIOB,
	    .gpio_pin = GPIO_PIN_11  // Pin de control para 3.3V
	};

	PDU_Channel pdu_V3bis = {
 8002286:	4b5c      	ldr	r3, [pc, #368]	@ (80023f8 <main+0x248>)
 8002288:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800228c:	461d      	mov	r5, r3
 800228e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002290:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002292:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002296:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	    .label = "V3bis",
	    .gpio_port = GPIOB,
	    .gpio_pin = GPIO_PIN_10  // Pin de control para 3.3V BIS
	};

	PDU_Channel pdu_BatOut = {
 800229a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800229e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80022a2:	4618      	mov	r0, r3
 80022a4:	2320      	movs	r3, #32
 80022a6:	461a      	mov	r2, r3
 80022a8:	2100      	movs	r1, #0
 80022aa:	f005 fc71 	bl	8007b90 <memset>
 80022ae:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80022b2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80022b6:	4a51      	ldr	r2, [pc, #324]	@ (80023fc <main+0x24c>)
 80022b8:	615a      	str	r2, [r3, #20]
 80022ba:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80022be:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80022c2:	4a4f      	ldr	r2, [pc, #316]	@ (8002400 <main+0x250>)
 80022c4:	619a      	str	r2, [r3, #24]
 80022c6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80022ca:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80022ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022d2:	839a      	strh	r2, [r3, #28]
	    .gpio_port = GPIOA,
	    .gpio_pin = GPIO_PIN_9  // Pin de control para 3.3V BIS
	};

	// BMS Variables
	BQ76905_Device bms = { .hi2c = &hi2c1 };
 80022d4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80022d8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80022dc:	4618      	mov	r0, r3
 80022de:	2334      	movs	r3, #52	@ 0x34
 80022e0:	461a      	mov	r2, r3
 80022e2:	2100      	movs	r1, #0
 80022e4:	f005 fc54 	bl	8007b90 <memset>
 80022e8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80022ec:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80022f0:	4a44      	ldr	r2, [pc, #272]	@ (8002404 <main+0x254>)
 80022f2:	601a      	str	r2, [r3, #0]


	//Configuro las salidas
	//Pruebas de salidas
    enablePDU(&pdu_V3bis);				//a veces prende y a veces no
 80022f4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80022f8:	4618      	mov	r0, r3
 80022fa:	f000 fa45 	bl	8002788 <enablePDU>
    enablePDU(&pdu_V3);
 80022fe:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8002302:	4618      	mov	r0, r3
 8002304:	f000 fa40 	bl	8002788 <enablePDU>
    enablePDU(&pdu_V5bis); 				//a veces prende y a veces no
 8002308:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 800230c:	4618      	mov	r0, r3
 800230e:	f000 fa3b 	bl	8002788 <enablePDU>
//  enablePDU(&pdu_V5);		//5V  		//NO ANDA Y METE RUIDO
    enablePDU(&pdu_BatOut);
 8002312:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002316:	4618      	mov	r0, r3
 8002318:	f000 fa36 	bl	8002788 <enablePDU>

    //
    BQ76905_Configure(&bms);
 800231c:	1d3b      	adds	r3, r7, #4
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff f8e4 	bl	80014ec <BQ76905_Configure>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  	//MPPT
        updateMPPT(&mpptX);
 8002324:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002328:	4618      	mov	r0, r3
 800232a:	f000 f924 	bl	8002576 <updateMPPT>
        updateMPPT(&mpptY);
 800232e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8002332:	4618      	mov	r0, r3
 8002334:	f000 f91f 	bl	8002576 <updateMPPT>
        updateMPPT(&mpptZ);
 8002338:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800233c:	4618      	mov	r0, r3
 800233e:	f000 f91a 	bl	8002576 <updateMPPT>
		// Imprimir datos al puerto serie
        printMPPTData(&mpptX, "VX_in"); // Imprimir valores de MPPT para el eje X
 8002342:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002346:	4930      	ldr	r1, [pc, #192]	@ (8002408 <main+0x258>)
 8002348:	4618      	mov	r0, r3
 800234a:	f000 f97f 	bl	800264c <printMPPTData>
        printMPPTData(&mpptY, "VY_in"); // Imprimir valores de MPPT para el eje Y
 800234e:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8002352:	492e      	ldr	r1, [pc, #184]	@ (800240c <main+0x25c>)
 8002354:	4618      	mov	r0, r3
 8002356:	f000 f979 	bl	800264c <printMPPTData>
        printMPPTData(&mpptZ, "VZ_in"); // Imprimir valores de MPPT para el eje Z
 800235a:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800235e:	492c      	ldr	r1, [pc, #176]	@ (8002410 <main+0x260>)
 8002360:	4618      	mov	r0, r3
 8002362:	f000 f973 	bl	800264c <printMPPTData>

		//PDU
        updatePDU(&pdu_V5);
 8002366:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 800236a:	4618      	mov	r0, r3
 800236c:	f000 f9ae 	bl	80026cc <updatePDU>
        updatePDU(&pdu_V5bis);
 8002370:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8002374:	4618      	mov	r0, r3
 8002376:	f000 f9a9 	bl	80026cc <updatePDU>
        updatePDU(&pdu_V3);
 800237a:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800237e:	4618      	mov	r0, r3
 8002380:	f000 f9a4 	bl	80026cc <updatePDU>
        updatePDU(&pdu_V3bis);
 8002384:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002388:	4618      	mov	r0, r3
 800238a:	f000 f99f 	bl	80026cc <updatePDU>
        updatePDU(&pdu_BatOut); //fallo
 800238e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002392:	4618      	mov	r0, r3
 8002394:	f000 f99a 	bl	80026cc <updatePDU>
		//COMUNICACION BQ76905
			//limites de voltage UV Y OV
			//limites de corrinte (over current in discharge and OCIC)
			//short circuit detection
			//proteccion por temperatura alta o baja en carga y descarga
        BQ76905_ReadData(&bms);
 8002398:	1d3b      	adds	r3, r7, #4
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff f8d6 	bl	800154c <BQ76905_ReadData>
        sendBMSDataI2C(&bms);
 80023a0:	1d3b      	adds	r3, r7, #4
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fa24 	bl	80017f0 <sendBMSDataI2C>

		//MODO BAJO CONSUMO

		//ALMACENAMIENTO EN FLASH DE VARIBLES

      	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80023a8:	2201      	movs	r2, #1
 80023aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80023ae:	4819      	ldr	r0, [pc, #100]	@ (8002414 <main+0x264>)
 80023b0:	f001 fd02 	bl	8003db8 <HAL_GPIO_WritePin>
    	HAL_Delay(DELAY);
 80023b4:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80023b8:	f000 fe8c 	bl	80030d4 <HAL_Delay>
      	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80023bc:	2200      	movs	r2, #0
 80023be:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80023c2:	4814      	ldr	r0, [pc, #80]	@ (8002414 <main+0x264>)
 80023c4:	f001 fcf8 	bl	8003db8 <HAL_GPIO_WritePin>
    	HAL_Delay(DELAY);
 80023c8:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80023cc:	f000 fe82 	bl	80030d4 <HAL_Delay>
        updateMPPT(&mpptX);
 80023d0:	bf00      	nop
 80023d2:	e7a7      	b.n	8002324 <main+0x174>
 80023d4:	20000374 	.word	0x20000374
 80023d8:	200003bc 	.word	0x200003bc
 80023dc:	20000404 	.word	0x20000404
 80023e0:	0800a010 	.word	0x0800a010
 80023e4:	0800a038 	.word	0x0800a038
 80023e8:	0800a060 	.word	0x0800a060
 80023ec:	0800a08c 	.word	0x0800a08c
 80023f0:	0800a0b4 	.word	0x0800a0b4
 80023f4:	0800a0d8 	.word	0x0800a0d8
 80023f8:	0800a100 	.word	0x0800a100
 80023fc:	08009ff0 	.word	0x08009ff0
 8002400:	40020000 	.word	0x40020000
 8002404:	200002c8 	.word	0x200002c8
 8002408:	08009ff8 	.word	0x08009ff8
 800240c:	0800a000 	.word	0x0800a000
 8002410:	0800a008 	.word	0x0800a008
 8002414:	40020400 	.word	0x40020400

08002418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b094      	sub	sp, #80	@ 0x50
 800241c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800241e:	f107 0320 	add.w	r3, r7, #32
 8002422:	2230      	movs	r2, #48	@ 0x30
 8002424:	2100      	movs	r1, #0
 8002426:	4618      	mov	r0, r3
 8002428:	f005 fbb2 	bl	8007b90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800242c:	f107 030c 	add.w	r3, r7, #12
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800243c:	2300      	movs	r3, #0
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	4b27      	ldr	r3, [pc, #156]	@ (80024e0 <SystemClock_Config+0xc8>)
 8002442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002444:	4a26      	ldr	r2, [pc, #152]	@ (80024e0 <SystemClock_Config+0xc8>)
 8002446:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800244a:	6413      	str	r3, [r2, #64]	@ 0x40
 800244c:	4b24      	ldr	r3, [pc, #144]	@ (80024e0 <SystemClock_Config+0xc8>)
 800244e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002450:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002458:	2300      	movs	r3, #0
 800245a:	607b      	str	r3, [r7, #4]
 800245c:	4b21      	ldr	r3, [pc, #132]	@ (80024e4 <SystemClock_Config+0xcc>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a20      	ldr	r2, [pc, #128]	@ (80024e4 <SystemClock_Config+0xcc>)
 8002462:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002466:	6013      	str	r3, [r2, #0]
 8002468:	4b1e      	ldr	r3, [pc, #120]	@ (80024e4 <SystemClock_Config+0xcc>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002470:	607b      	str	r3, [r7, #4]
 8002472:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002474:	2301      	movs	r3, #1
 8002476:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002478:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800247c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800247e:	2302      	movs	r3, #2
 8002480:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002482:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002486:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002488:	2304      	movs	r3, #4
 800248a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800248c:	2360      	movs	r3, #96	@ 0x60
 800248e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8002490:	2306      	movs	r3, #6
 8002492:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002494:	2304      	movs	r3, #4
 8002496:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002498:	f107 0320 	add.w	r3, r7, #32
 800249c:	4618      	mov	r0, r3
 800249e:	f002 fdaf 	bl	8005000 <HAL_RCC_OscConfig>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80024a8:	f000 f81e 	bl	80024e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024ac:	230f      	movs	r3, #15
 80024ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024b0:	2302      	movs	r3, #2
 80024b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024b4:	2300      	movs	r3, #0
 80024b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024bc:	2300      	movs	r3, #0
 80024be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80024c0:	f107 030c 	add.w	r3, r7, #12
 80024c4:	2101      	movs	r1, #1
 80024c6:	4618      	mov	r0, r3
 80024c8:	f003 f812 	bl	80054f0 <HAL_RCC_ClockConfig>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80024d2:	f000 f809 	bl	80024e8 <Error_Handler>
  }
}
 80024d6:	bf00      	nop
 80024d8:	3750      	adds	r7, #80	@ 0x50
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40007000 	.word	0x40007000

080024e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024ec:	b672      	cpsid	i
}
 80024ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024f0:	bf00      	nop
 80024f2:	e7fd      	b.n	80024f0 <Error_Handler+0x8>

080024f4 <mppt_algorithm>:
#define MAX_DUTY 255




void mppt_algorithm(uint8_t *dutyCycle, const float *power, float *prevPower) {
 80024f4:	b480      	push	{r7}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
    const uint8_t deltaDuty = MAX_DUTY / 100;  // Incremento/decremento del Duty Cycle
 8002500:	2302      	movs	r3, #2
 8002502:	75fb      	strb	r3, [r7, #23]

    if (*power > *prevPower) {
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	ed93 7a00 	vldr	s14, [r3]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	edd3 7a00 	vldr	s15, [r3]
 8002510:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002518:	dd13      	ble.n	8002542 <mppt_algorithm+0x4e>
        if (*dutyCycle <= MAX_DUTY - deltaDuty) {
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	7dfb      	ldrb	r3, [r7, #23]
 8002522:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8002526:	429a      	cmp	r2, r3
 8002528:	dc07      	bgt.n	800253a <mppt_algorithm+0x46>
            *dutyCycle += deltaDuty;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	781a      	ldrb	r2, [r3, #0]
 800252e:	7dfb      	ldrb	r3, [r7, #23]
 8002530:	4413      	add	r3, r2
 8002532:	b2da      	uxtb	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	e013      	b.n	8002562 <mppt_algorithm+0x6e>
        } else {
            *dutyCycle = MAX_DUTY; // Límite máximo
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	22ff      	movs	r2, #255	@ 0xff
 800253e:	701a      	strb	r2, [r3, #0]
 8002540:	e00f      	b.n	8002562 <mppt_algorithm+0x6e>
        }
    } else {
        if (*dutyCycle >= deltaDuty) {
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	7dfa      	ldrb	r2, [r7, #23]
 8002548:	429a      	cmp	r2, r3
 800254a:	d807      	bhi.n	800255c <mppt_algorithm+0x68>
            *dutyCycle -= deltaDuty;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	781a      	ldrb	r2, [r3, #0]
 8002550:	7dfb      	ldrb	r3, [r7, #23]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	b2da      	uxtb	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	e002      	b.n	8002562 <mppt_algorithm+0x6e>
        } else {
            *dutyCycle = 0; // Límite mínimo
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	701a      	strb	r2, [r3, #0]
        }
    }

    *prevPower = *power; // Actualizar `prevPower` con el nuevo valor
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	681a      	ldr	r2, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	601a      	str	r2, [r3, #0]
}
 800256a:	bf00      	nop
 800256c:	371c      	adds	r7, #28
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <updateMPPT>:



void updateMPPT(MPPT_Channel *mppt) {
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
    // Leer valores de voltaje y corriente del ADC
    mppt->voltage = readADC(mppt->hadc, mppt->v_channel);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	4619      	mov	r1, r3
 8002588:	4610      	mov	r0, r2
 800258a:	f7fe fcb1 	bl	8000ef0 <readADC>
 800258e:	ee07 0a90 	vmov	s15, r0
 8002592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	edc3 7a05 	vstr	s15, [r3, #20]
    mppt->current = readADC(mppt->hadc, mppt->i_channel);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	4619      	mov	r1, r3
 80025a6:	4610      	mov	r0, r2
 80025a8:	f7fe fca2 	bl	8000ef0 <readADC>
 80025ac:	ee07 0a90 	vmov	s15, r0
 80025b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	edc3 7a06 	vstr	s15, [r3, #24]

    // Calcular potencia
    mppt->power = mppt->voltage * mppt->current;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	ed93 7a05 	vldr	s14, [r3, #20]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	edd3 7a06 	vldr	s15, [r3, #24]
 80025c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	edc3 7a07 	vstr	s15, [r3, #28]

    // Aplicar algoritmo MPPT
    mppt_algorithm(&mppt->dutyCycle, &mppt->power, &mppt->prevPower);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f103 011c 	add.w	r1, r3, #28
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3320      	adds	r3, #32
 80025e0:	461a      	mov	r2, r3
 80025e2:	f7ff ff87 	bl	80024f4 <mppt_algorithm>

    // Actualizar el PWM en el canal correspondiente
    __HAL_TIM_SET_COMPARE(mppt->htim, mppt->tim_channel, mppt->dutyCycle);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d107      	bne.n	80025fe <updateMPPT+0x88>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80025fc:	e021      	b.n	8002642 <updateMPPT+0xcc>
    __HAL_TIM_SET_COMPARE(mppt->htim, mppt->tim_channel, mppt->dutyCycle);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	2b04      	cmp	r3, #4
 8002604:	d108      	bne.n	8002618 <updateMPPT+0xa2>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 1024 	ldrb.w	r1, [r3, #36]	@ 0x24
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	460b      	mov	r3, r1
 8002614:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002616:	e014      	b.n	8002642 <updateMPPT+0xcc>
    __HAL_TIM_SET_COMPARE(mppt->htim, mppt->tim_channel, mppt->dutyCycle);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	2b08      	cmp	r3, #8
 800261e:	d108      	bne.n	8002632 <updateMPPT+0xbc>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 1024 	ldrb.w	r1, [r3, #36]	@ 0x24
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	460b      	mov	r3, r1
 800262e:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8002630:	e007      	b.n	8002642 <updateMPPT+0xcc>
    __HAL_TIM_SET_COMPARE(mppt->htim, mppt->tim_channel, mppt->dutyCycle);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 1024 	ldrb.w	r1, [r3, #36]	@ 0x24
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	460b      	mov	r3, r1
 8002640:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8002642:	bf00      	nop
 8002644:	3708      	adds	r7, #8
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <printMPPTData>:


void printMPPTData(MPPT_Channel *mppt, const char *label) {
 800264c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002650:	b096      	sub	sp, #88	@ 0x58
 8002652:	af06      	add	r7, sp, #24
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
    char buffer[STR_LEN];
    snprintf(buffer, STR_LEN, "%s: %.2f V, %.2f A, %.2f W\n",
             label, mppt->voltage, mppt->current, mppt->power);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	695b      	ldr	r3, [r3, #20]
    snprintf(buffer, STR_LEN, "%s: %.2f V, %.2f A, %.2f W\n",
 800265c:	4618      	mov	r0, r3
 800265e:	f7fd ff7d 	bl	800055c <__aeabi_f2d>
 8002662:	4604      	mov	r4, r0
 8002664:	460d      	mov	r5, r1
             label, mppt->voltage, mppt->current, mppt->power);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	699b      	ldr	r3, [r3, #24]
    snprintf(buffer, STR_LEN, "%s: %.2f V, %.2f A, %.2f W\n",
 800266a:	4618      	mov	r0, r3
 800266c:	f7fd ff76 	bl	800055c <__aeabi_f2d>
 8002670:	4680      	mov	r8, r0
 8002672:	4689      	mov	r9, r1
             label, mppt->voltage, mppt->current, mppt->power);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69db      	ldr	r3, [r3, #28]
    snprintf(buffer, STR_LEN, "%s: %.2f V, %.2f A, %.2f W\n",
 8002678:	4618      	mov	r0, r3
 800267a:	f7fd ff6f 	bl	800055c <__aeabi_f2d>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	f107 000c 	add.w	r0, r7, #12
 8002686:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800268a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800268e:	e9cd 4500 	strd	r4, r5, [sp]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	4a0b      	ldr	r2, [pc, #44]	@ (80026c4 <printMPPTData+0x78>)
 8002696:	2132      	movs	r1, #50	@ 0x32
 8002698:	f005 f984 	bl	80079a4 <sniprintf>
    HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 800269c:	f107 030c 	add.w	r3, r7, #12
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fd fde5 	bl	8000270 <strlen>
 80026a6:	4603      	mov	r3, r0
 80026a8:	b29a      	uxth	r2, r3
 80026aa:	f107 010c 	add.w	r1, r7, #12
 80026ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80026b2:	4805      	ldr	r0, [pc, #20]	@ (80026c8 <printMPPTData+0x7c>)
 80026b4:	f003 fe64 	bl	8006380 <HAL_UART_Transmit>
}
 80026b8:	bf00      	nop
 80026ba:	3740      	adds	r7, #64	@ 0x40
 80026bc:	46bd      	mov	sp, r7
 80026be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026c2:	bf00      	nop
 80026c4:	0800a120 	.word	0x0800a120
 80026c8:	2000044c 	.word	0x2000044c

080026cc <updatePDU>:
#include "usart.h"
#include <stdio.h>
#include <string.h>


void updatePDU(PDU_Channel *pdu) {
 80026cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ce:	b095      	sub	sp, #84	@ 0x54
 80026d0:	af04      	add	r7, sp, #16
 80026d2:	6078      	str	r0, [r7, #4]
	if (strcmp(pdu->label, "VBatOut") != 0) { //Para que no se rompa el codigo, ya que bat out es una salida q no tiene con el adc
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	4928      	ldr	r1, [pc, #160]	@ (800277c <updatePDU+0xb0>)
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd fdd0 	bl	8000280 <strcmp>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d01d      	beq.n	8002722 <updatePDU+0x56>
		// Leer valores de voltaje y corriente del ADC
		pdu->voltage = readADC(pdu->hadc, pdu->v_channel);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4619      	mov	r1, r3
 80026f0:	4610      	mov	r0, r2
 80026f2:	f7fe fbfd 	bl	8000ef0 <readADC>
 80026f6:	ee07 0a90 	vmov	s15, r0
 80026fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	edc3 7a03 	vstr	s15, [r3, #12]
		pdu->current = readADC(pdu->hadc, pdu->i_channel);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	4619      	mov	r1, r3
 800270e:	4610      	mov	r0, r2
 8002710:	f7fe fbee 	bl	8000ef0 <readADC>
 8002714:	ee07 0a90 	vmov	s15, r0
 8002718:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	edc3 7a04 	vstr	s15, [r3, #16]
    }
    // Enviar datos por UART
    char buffer[STR_LEN];
    snprintf(buffer, STR_LEN, "%s: %.2f V, %.2f A\n", pdu->label, pdu->voltage, pdu->current);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	695e      	ldr	r6, [r3, #20]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	4618      	mov	r0, r3
 800272c:	f7fd ff16 	bl	800055c <__aeabi_f2d>
 8002730:	4604      	mov	r4, r0
 8002732:	460d      	mov	r5, r1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	4618      	mov	r0, r3
 800273a:	f7fd ff0f 	bl	800055c <__aeabi_f2d>
 800273e:	4602      	mov	r2, r0
 8002740:	460b      	mov	r3, r1
 8002742:	f107 000c 	add.w	r0, r7, #12
 8002746:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800274a:	e9cd 4500 	strd	r4, r5, [sp]
 800274e:	4633      	mov	r3, r6
 8002750:	4a0b      	ldr	r2, [pc, #44]	@ (8002780 <updatePDU+0xb4>)
 8002752:	2132      	movs	r1, #50	@ 0x32
 8002754:	f005 f926 	bl	80079a4 <sniprintf>
    HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 8002758:	f107 030c 	add.w	r3, r7, #12
 800275c:	4618      	mov	r0, r3
 800275e:	f7fd fd87 	bl	8000270 <strlen>
 8002762:	4603      	mov	r3, r0
 8002764:	b29a      	uxth	r2, r3
 8002766:	f107 010c 	add.w	r1, r7, #12
 800276a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800276e:	4805      	ldr	r0, [pc, #20]	@ (8002784 <updatePDU+0xb8>)
 8002770:	f003 fe06 	bl	8006380 <HAL_UART_Transmit>

}
 8002774:	bf00      	nop
 8002776:	3744      	adds	r7, #68	@ 0x44
 8002778:	46bd      	mov	sp, r7
 800277a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800277c:	0800a13c 	.word	0x0800a13c
 8002780:	0800a144 	.word	0x0800a144
 8002784:	2000044c 	.word	0x2000044c

08002788 <enablePDU>:

// Habilitar la salida GPIO asociada a la fuente
void enablePDU(PDU_Channel *pdu) {
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(pdu->gpio_port, pdu->gpio_pin, GPIO_PIN_SET);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6998      	ldr	r0, [r3, #24]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	8b9b      	ldrh	r3, [r3, #28]
 8002798:	2201      	movs	r2, #1
 800279a:	4619      	mov	r1, r3
 800279c:	f001 fb0c 	bl	8003db8 <HAL_GPIO_WritePin>
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	607b      	str	r3, [r7, #4]
 80027b2:	4b10      	ldr	r3, [pc, #64]	@ (80027f4 <HAL_MspInit+0x4c>)
 80027b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b6:	4a0f      	ldr	r2, [pc, #60]	@ (80027f4 <HAL_MspInit+0x4c>)
 80027b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80027be:	4b0d      	ldr	r3, [pc, #52]	@ (80027f4 <HAL_MspInit+0x4c>)
 80027c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027c6:	607b      	str	r3, [r7, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	603b      	str	r3, [r7, #0]
 80027ce:	4b09      	ldr	r3, [pc, #36]	@ (80027f4 <HAL_MspInit+0x4c>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d2:	4a08      	ldr	r2, [pc, #32]	@ (80027f4 <HAL_MspInit+0x4c>)
 80027d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027da:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <HAL_MspInit+0x4c>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e2:	603b      	str	r3, [r7, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800

080027f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80027fc:	bf00      	nop
 80027fe:	e7fd      	b.n	80027fc <NMI_Handler+0x4>

08002800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002804:	bf00      	nop
 8002806:	e7fd      	b.n	8002804 <HardFault_Handler+0x4>

08002808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800280c:	bf00      	nop
 800280e:	e7fd      	b.n	800280c <MemManage_Handler+0x4>

08002810 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002810:	b480      	push	{r7}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002814:	bf00      	nop
 8002816:	e7fd      	b.n	8002814 <BusFault_Handler+0x4>

08002818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800281c:	bf00      	nop
 800281e:	e7fd      	b.n	800281c <UsageFault_Handler+0x4>

08002820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002824:	bf00      	nop
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr

0800282e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800282e:	b480      	push	{r7}
 8002830:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002840:	bf00      	nop
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800284e:	f000 fc21 	bl	8003094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002852:	bf00      	nop
 8002854:	bd80      	pop	{r7, pc}

08002856 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002856:	b480      	push	{r7}
 8002858:	af00      	add	r7, sp, #0
  return 1;
 800285a:	2301      	movs	r3, #1
}
 800285c:	4618      	mov	r0, r3
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <_kill>:

int _kill(int pid, int sig)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
 800286e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002870:	f005 f99a 	bl	8007ba8 <__errno>
 8002874:	4603      	mov	r3, r0
 8002876:	2216      	movs	r2, #22
 8002878:	601a      	str	r2, [r3, #0]
  return -1;
 800287a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800287e:	4618      	mov	r0, r3
 8002880:	3708      	adds	r7, #8
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <_exit>:

void _exit (int status)
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b082      	sub	sp, #8
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800288e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7ff ffe7 	bl	8002866 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002898:	bf00      	nop
 800289a:	e7fd      	b.n	8002898 <_exit+0x12>

0800289c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	e00a      	b.n	80028c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028ae:	f3af 8000 	nop.w
 80028b2:	4601      	mov	r1, r0
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	60ba      	str	r2, [r7, #8]
 80028ba:	b2ca      	uxtb	r2, r1
 80028bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	3301      	adds	r3, #1
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	dbf0      	blt.n	80028ae <_read+0x12>
  }

  return len;
 80028cc:	687b      	ldr	r3, [r7, #4]
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b086      	sub	sp, #24
 80028da:	af00      	add	r7, sp, #0
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028e2:	2300      	movs	r3, #0
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	e009      	b.n	80028fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	60ba      	str	r2, [r7, #8]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	4618      	mov	r0, r3
 80028f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	3301      	adds	r3, #1
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	429a      	cmp	r2, r3
 8002902:	dbf1      	blt.n	80028e8 <_write+0x12>
  }
  return len;
 8002904:	687b      	ldr	r3, [r7, #4]
}
 8002906:	4618      	mov	r0, r3
 8002908:	3718      	adds	r7, #24
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <_close>:

int _close(int file)
{
 800290e:	b480      	push	{r7}
 8002910:	b083      	sub	sp, #12
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002916:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
 800292e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002936:	605a      	str	r2, [r3, #4]
  return 0;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <_isatty>:

int _isatty(int file)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800294e:	2301      	movs	r3, #1
}
 8002950:	4618      	mov	r0, r3
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3714      	adds	r7, #20
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
	...

08002978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b086      	sub	sp, #24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002980:	4a14      	ldr	r2, [pc, #80]	@ (80029d4 <_sbrk+0x5c>)
 8002982:	4b15      	ldr	r3, [pc, #84]	@ (80029d8 <_sbrk+0x60>)
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800298c:	4b13      	ldr	r3, [pc, #76]	@ (80029dc <_sbrk+0x64>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d102      	bne.n	800299a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002994:	4b11      	ldr	r3, [pc, #68]	@ (80029dc <_sbrk+0x64>)
 8002996:	4a12      	ldr	r2, [pc, #72]	@ (80029e0 <_sbrk+0x68>)
 8002998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800299a:	4b10      	ldr	r3, [pc, #64]	@ (80029dc <_sbrk+0x64>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d207      	bcs.n	80029b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029a8:	f005 f8fe 	bl	8007ba8 <__errno>
 80029ac:	4603      	mov	r3, r0
 80029ae:	220c      	movs	r2, #12
 80029b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029b6:	e009      	b.n	80029cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029b8:	4b08      	ldr	r3, [pc, #32]	@ (80029dc <_sbrk+0x64>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029be:	4b07      	ldr	r3, [pc, #28]	@ (80029dc <_sbrk+0x64>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4413      	add	r3, r2
 80029c6:	4a05      	ldr	r2, [pc, #20]	@ (80029dc <_sbrk+0x64>)
 80029c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029ca:	68fb      	ldr	r3, [r7, #12]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	20020000 	.word	0x20020000
 80029d8:	00000400 	.word	0x00000400
 80029dc:	20000370 	.word	0x20000370
 80029e0:	20000ac8 	.word	0x20000ac8

080029e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029e8:	4b06      	ldr	r3, [pc, #24]	@ (8002a04 <SystemInit+0x20>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ee:	4a05      	ldr	r2, [pc, #20]	@ (8002a04 <SystemInit+0x20>)
 80029f0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029f4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	@ 0x28
 8002a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a0e:	f107 0320 	add.w	r3, r7, #32
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a18:	1d3b      	adds	r3, r7, #4
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
 8002a20:	609a      	str	r2, [r3, #8]
 8002a22:	60da      	str	r2, [r3, #12]
 8002a24:	611a      	str	r2, [r3, #16]
 8002a26:	615a      	str	r2, [r3, #20]
 8002a28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002a2a:	4b23      	ldr	r3, [pc, #140]	@ (8002ab8 <MX_TIM2_Init+0xb0>)
 8002a2c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002a30:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8002a32:	4b21      	ldr	r3, [pc, #132]	@ (8002ab8 <MX_TIM2_Init+0xb0>)
 8002a34:	f240 12a3 	movw	r2, #419	@ 0x1a3
 8002a38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ab8 <MX_TIM2_Init+0xb0>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002a40:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab8 <MX_TIM2_Init+0xb0>)
 8002a42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a48:	4b1b      	ldr	r3, [pc, #108]	@ (8002ab8 <MX_TIM2_Init+0xb0>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ab8 <MX_TIM2_Init+0xb0>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002a54:	4818      	ldr	r0, [pc, #96]	@ (8002ab8 <MX_TIM2_Init+0xb0>)
 8002a56:	f002 ff6b 	bl	8005930 <HAL_TIM_PWM_Init>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8002a60:	f7ff fd42 	bl	80024e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a64:	2300      	movs	r3, #0
 8002a66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002a6c:	f107 0320 	add.w	r3, r7, #32
 8002a70:	4619      	mov	r1, r3
 8002a72:	4811      	ldr	r0, [pc, #68]	@ (8002ab8 <MX_TIM2_Init+0xb0>)
 8002a74:	f003 fbb8 	bl	80061e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d001      	beq.n	8002a82 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8002a7e:	f7ff fd33 	bl	80024e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a82:	2360      	movs	r3, #96	@ 0x60
 8002a84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a86:	2300      	movs	r3, #0
 8002a88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a92:	1d3b      	adds	r3, r7, #4
 8002a94:	2200      	movs	r2, #0
 8002a96:	4619      	mov	r1, r3
 8002a98:	4807      	ldr	r0, [pc, #28]	@ (8002ab8 <MX_TIM2_Init+0xb0>)
 8002a9a:	f003 f861 	bl	8005b60 <HAL_TIM_PWM_ConfigChannel>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8002aa4:	f7ff fd20 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002aa8:	4803      	ldr	r0, [pc, #12]	@ (8002ab8 <MX_TIM2_Init+0xb0>)
 8002aaa:	f000 f905 	bl	8002cb8 <HAL_TIM_MspPostInit>

}
 8002aae:	bf00      	nop
 8002ab0:	3728      	adds	r7, #40	@ 0x28
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000374 	.word	0x20000374

08002abc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08a      	sub	sp, #40	@ 0x28
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ac2:	f107 0320 	add.w	r3, r7, #32
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
 8002aca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002acc:	1d3b      	adds	r3, r7, #4
 8002ace:	2200      	movs	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	605a      	str	r2, [r3, #4]
 8002ad4:	609a      	str	r2, [r3, #8]
 8002ad6:	60da      	str	r2, [r3, #12]
 8002ad8:	611a      	str	r2, [r3, #16]
 8002ada:	615a      	str	r2, [r3, #20]
 8002adc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ade:	4b21      	ldr	r3, [pc, #132]	@ (8002b64 <MX_TIM4_Init+0xa8>)
 8002ae0:	4a21      	ldr	r2, [pc, #132]	@ (8002b68 <MX_TIM4_Init+0xac>)
 8002ae2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8002ae4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b64 <MX_TIM4_Init+0xa8>)
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aea:	4b1e      	ldr	r3, [pc, #120]	@ (8002b64 <MX_TIM4_Init+0xa8>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 30;
 8002af0:	4b1c      	ldr	r3, [pc, #112]	@ (8002b64 <MX_TIM4_Init+0xa8>)
 8002af2:	221e      	movs	r2, #30
 8002af4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002af6:	4b1b      	ldr	r3, [pc, #108]	@ (8002b64 <MX_TIM4_Init+0xa8>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002afc:	4b19      	ldr	r3, [pc, #100]	@ (8002b64 <MX_TIM4_Init+0xa8>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002b02:	4818      	ldr	r0, [pc, #96]	@ (8002b64 <MX_TIM4_Init+0xa8>)
 8002b04:	f002 ff14 	bl	8005930 <HAL_TIM_PWM_Init>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002b0e:	f7ff fceb 	bl	80024e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b12:	2300      	movs	r3, #0
 8002b14:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b16:	2300      	movs	r3, #0
 8002b18:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b1a:	f107 0320 	add.w	r3, r7, #32
 8002b1e:	4619      	mov	r1, r3
 8002b20:	4810      	ldr	r0, [pc, #64]	@ (8002b64 <MX_TIM4_Init+0xa8>)
 8002b22:	f003 fb61 	bl	80061e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8002b2c:	f7ff fcdc 	bl	80024e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002b30:	2360      	movs	r3, #96	@ 0x60
 8002b32:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b40:	1d3b      	adds	r3, r7, #4
 8002b42:	220c      	movs	r2, #12
 8002b44:	4619      	mov	r1, r3
 8002b46:	4807      	ldr	r0, [pc, #28]	@ (8002b64 <MX_TIM4_Init+0xa8>)
 8002b48:	f003 f80a 	bl	8005b60 <HAL_TIM_PWM_ConfigChannel>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002b52:	f7ff fcc9 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002b56:	4803      	ldr	r0, [pc, #12]	@ (8002b64 <MX_TIM4_Init+0xa8>)
 8002b58:	f000 f8ae 	bl	8002cb8 <HAL_TIM_MspPostInit>

}
 8002b5c:	bf00      	nop
 8002b5e:	3728      	adds	r7, #40	@ 0x28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	200003bc 	.word	0x200003bc
 8002b68:	40000800 	.word	0x40000800

08002b6c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08a      	sub	sp, #40	@ 0x28
 8002b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b72:	f107 0320 	add.w	r3, r7, #32
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b7c:	1d3b      	adds	r3, r7, #4
 8002b7e:	2200      	movs	r2, #0
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	605a      	str	r2, [r3, #4]
 8002b84:	609a      	str	r2, [r3, #8]
 8002b86:	60da      	str	r2, [r3, #12]
 8002b88:	611a      	str	r2, [r3, #16]
 8002b8a:	615a      	str	r2, [r3, #20]
 8002b8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002b8e:	4b22      	ldr	r3, [pc, #136]	@ (8002c18 <MX_TIM5_Init+0xac>)
 8002b90:	4a22      	ldr	r2, [pc, #136]	@ (8002c1c <MX_TIM5_Init+0xb0>)
 8002b92:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 420-1;
 8002b94:	4b20      	ldr	r3, [pc, #128]	@ (8002c18 <MX_TIM5_Init+0xac>)
 8002b96:	f240 12a3 	movw	r2, #419	@ 0x1a3
 8002b9a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b9c:	4b1e      	ldr	r3, [pc, #120]	@ (8002c18 <MX_TIM5_Init+0xac>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c18 <MX_TIM5_Init+0xac>)
 8002ba4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ba8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002baa:	4b1b      	ldr	r3, [pc, #108]	@ (8002c18 <MX_TIM5_Init+0xac>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bb0:	4b19      	ldr	r3, [pc, #100]	@ (8002c18 <MX_TIM5_Init+0xac>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002bb6:	4818      	ldr	r0, [pc, #96]	@ (8002c18 <MX_TIM5_Init+0xac>)
 8002bb8:	f002 feba 	bl	8005930 <HAL_TIM_PWM_Init>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d001      	beq.n	8002bc6 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8002bc2:	f7ff fc91 	bl	80024e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002bce:	f107 0320 	add.w	r3, r7, #32
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4810      	ldr	r0, [pc, #64]	@ (8002c18 <MX_TIM5_Init+0xac>)
 8002bd6:	f003 fb07 	bl	80061e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d001      	beq.n	8002be4 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8002be0:	f7ff fc82 	bl	80024e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002be4:	2360      	movs	r3, #96	@ 0x60
 8002be6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002be8:	2300      	movs	r3, #0
 8002bea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bec:	2300      	movs	r3, #0
 8002bee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002bf4:	1d3b      	adds	r3, r7, #4
 8002bf6:	220c      	movs	r2, #12
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4807      	ldr	r0, [pc, #28]	@ (8002c18 <MX_TIM5_Init+0xac>)
 8002bfc:	f002 ffb0 	bl	8005b60 <HAL_TIM_PWM_ConfigChannel>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8002c06:	f7ff fc6f 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002c0a:	4803      	ldr	r0, [pc, #12]	@ (8002c18 <MX_TIM5_Init+0xac>)
 8002c0c:	f000 f854 	bl	8002cb8 <HAL_TIM_MspPostInit>

}
 8002c10:	bf00      	nop
 8002c12:	3728      	adds	r7, #40	@ 0x28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20000404 	.word	0x20000404
 8002c1c:	40000c00 	.word	0x40000c00

08002c20 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c30:	d10e      	bne.n	8002c50 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	617b      	str	r3, [r7, #20]
 8002c36:	4b1d      	ldr	r3, [pc, #116]	@ (8002cac <HAL_TIM_PWM_MspInit+0x8c>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	4a1c      	ldr	r2, [pc, #112]	@ (8002cac <HAL_TIM_PWM_MspInit+0x8c>)
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c42:	4b1a      	ldr	r3, [pc, #104]	@ (8002cac <HAL_TIM_PWM_MspInit+0x8c>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002c4e:	e026      	b.n	8002c9e <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM4)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a16      	ldr	r2, [pc, #88]	@ (8002cb0 <HAL_TIM_PWM_MspInit+0x90>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d10e      	bne.n	8002c78 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	613b      	str	r3, [r7, #16]
 8002c5e:	4b13      	ldr	r3, [pc, #76]	@ (8002cac <HAL_TIM_PWM_MspInit+0x8c>)
 8002c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c62:	4a12      	ldr	r2, [pc, #72]	@ (8002cac <HAL_TIM_PWM_MspInit+0x8c>)
 8002c64:	f043 0304 	orr.w	r3, r3, #4
 8002c68:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c6a:	4b10      	ldr	r3, [pc, #64]	@ (8002cac <HAL_TIM_PWM_MspInit+0x8c>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c6e:	f003 0304 	and.w	r3, r3, #4
 8002c72:	613b      	str	r3, [r7, #16]
 8002c74:	693b      	ldr	r3, [r7, #16]
}
 8002c76:	e012      	b.n	8002c9e <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM5)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002cb4 <HAL_TIM_PWM_MspInit+0x94>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d10d      	bne.n	8002c9e <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	60fb      	str	r3, [r7, #12]
 8002c86:	4b09      	ldr	r3, [pc, #36]	@ (8002cac <HAL_TIM_PWM_MspInit+0x8c>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8a:	4a08      	ldr	r2, [pc, #32]	@ (8002cac <HAL_TIM_PWM_MspInit+0x8c>)
 8002c8c:	f043 0308 	orr.w	r3, r3, #8
 8002c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c92:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <HAL_TIM_PWM_MspInit+0x8c>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
}
 8002c9e:	bf00      	nop
 8002ca0:	371c      	adds	r7, #28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40000800 	.word	0x40000800
 8002cb4:	40000c00 	.word	0x40000c00

08002cb8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	@ 0x28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc0:	f107 0314 	add.w	r3, r7, #20
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	605a      	str	r2, [r3, #4]
 8002cca:	609a      	str	r2, [r3, #8]
 8002ccc:	60da      	str	r2, [r3, #12]
 8002cce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cd8:	d11e      	bne.n	8002d18 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	4b34      	ldr	r3, [pc, #208]	@ (8002db0 <HAL_TIM_MspPostInit+0xf8>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	4a33      	ldr	r2, [pc, #204]	@ (8002db0 <HAL_TIM_MspPostInit+0xf8>)
 8002ce4:	f043 0301 	orr.w	r3, r3, #1
 8002ce8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cea:	4b31      	ldr	r3, [pc, #196]	@ (8002db0 <HAL_TIM_MspPostInit+0xf8>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = MPPTYControl_Pin;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfa:	2302      	movs	r3, #2
 8002cfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d02:	2300      	movs	r3, #0
 8002d04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002d06:	2301      	movs	r3, #1
 8002d08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPPTYControl_GPIO_Port, &GPIO_InitStruct);
 8002d0a:	f107 0314 	add.w	r3, r7, #20
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4828      	ldr	r0, [pc, #160]	@ (8002db4 <HAL_TIM_MspPostInit+0xfc>)
 8002d12:	f000 feb5 	bl	8003a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002d16:	e047      	b.n	8002da8 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a26      	ldr	r2, [pc, #152]	@ (8002db8 <HAL_TIM_MspPostInit+0x100>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d11f      	bne.n	8002d62 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d22:	2300      	movs	r3, #0
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	4b22      	ldr	r3, [pc, #136]	@ (8002db0 <HAL_TIM_MspPostInit+0xf8>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2a:	4a21      	ldr	r2, [pc, #132]	@ (8002db0 <HAL_TIM_MspPostInit+0xf8>)
 8002d2c:	f043 0302 	orr.w	r3, r3, #2
 8002d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d32:	4b1f      	ldr	r3, [pc, #124]	@ (8002db0 <HAL_TIM_MspPostInit+0xf8>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MPPTXControl_Pin;
 8002d3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	2302      	movs	r3, #2
 8002d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d50:	2302      	movs	r3, #2
 8002d52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPPTXControl_GPIO_Port, &GPIO_InitStruct);
 8002d54:	f107 0314 	add.w	r3, r7, #20
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4818      	ldr	r0, [pc, #96]	@ (8002dbc <HAL_TIM_MspPostInit+0x104>)
 8002d5c:	f000 fe90 	bl	8003a80 <HAL_GPIO_Init>
}
 8002d60:	e022      	b.n	8002da8 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM5)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a16      	ldr	r2, [pc, #88]	@ (8002dc0 <HAL_TIM_MspPostInit+0x108>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d11d      	bne.n	8002da8 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	4b0f      	ldr	r3, [pc, #60]	@ (8002db0 <HAL_TIM_MspPostInit+0xf8>)
 8002d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d74:	4a0e      	ldr	r2, [pc, #56]	@ (8002db0 <HAL_TIM_MspPostInit+0xf8>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002db0 <HAL_TIM_MspPostInit+0xf8>)
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MPPTZControl_Pin;
 8002d88:	2308      	movs	r3, #8
 8002d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d94:	2300      	movs	r3, #0
 8002d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPPTZControl_GPIO_Port, &GPIO_InitStruct);
 8002d9c:	f107 0314 	add.w	r3, r7, #20
 8002da0:	4619      	mov	r1, r3
 8002da2:	4804      	ldr	r0, [pc, #16]	@ (8002db4 <HAL_TIM_MspPostInit+0xfc>)
 8002da4:	f000 fe6c 	bl	8003a80 <HAL_GPIO_Init>
}
 8002da8:	bf00      	nop
 8002daa:	3728      	adds	r7, #40	@ 0x28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40023800 	.word	0x40023800
 8002db4:	40020000 	.word	0x40020000
 8002db8:	40000800 	.word	0x40000800
 8002dbc:	40020400 	.word	0x40020400
 8002dc0:	40000c00 	.word	0x40000c00

08002dc4 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002dc8:	4b11      	ldr	r3, [pc, #68]	@ (8002e10 <MX_UART4_Init+0x4c>)
 8002dca:	4a12      	ldr	r2, [pc, #72]	@ (8002e14 <MX_UART4_Init+0x50>)
 8002dcc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002dce:	4b10      	ldr	r3, [pc, #64]	@ (8002e10 <MX_UART4_Init+0x4c>)
 8002dd0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002dd4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e10 <MX_UART4_Init+0x4c>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	@ (8002e10 <MX_UART4_Init+0x4c>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002de2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e10 <MX_UART4_Init+0x4c>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002de8:	4b09      	ldr	r3, [pc, #36]	@ (8002e10 <MX_UART4_Init+0x4c>)
 8002dea:	220c      	movs	r2, #12
 8002dec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002dee:	4b08      	ldr	r3, [pc, #32]	@ (8002e10 <MX_UART4_Init+0x4c>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002df4:	4b06      	ldr	r3, [pc, #24]	@ (8002e10 <MX_UART4_Init+0x4c>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002dfa:	4805      	ldr	r0, [pc, #20]	@ (8002e10 <MX_UART4_Init+0x4c>)
 8002dfc:	f003 fa70 	bl	80062e0 <HAL_UART_Init>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002e06:	f7ff fb6f 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	2000044c 	.word	0x2000044c
 8002e14:	40004c00 	.word	0x40004c00

08002e18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	@ 0x28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e20:	f107 0314 	add.w	r3, r7, #20
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a19      	ldr	r2, [pc, #100]	@ (8002e9c <HAL_UART_MspInit+0x84>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d12c      	bne.n	8002e94 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	4b18      	ldr	r3, [pc, #96]	@ (8002ea0 <HAL_UART_MspInit+0x88>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e42:	4a17      	ldr	r2, [pc, #92]	@ (8002ea0 <HAL_UART_MspInit+0x88>)
 8002e44:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e4a:	4b15      	ldr	r3, [pc, #84]	@ (8002ea0 <HAL_UART_MspInit+0x88>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	4b11      	ldr	r3, [pc, #68]	@ (8002ea0 <HAL_UART_MspInit+0x88>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5e:	4a10      	ldr	r2, [pc, #64]	@ (8002ea0 <HAL_UART_MspInit+0x88>)
 8002e60:	f043 0304 	orr.w	r3, r3, #4
 8002e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea0 <HAL_UART_MspInit+0x88>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8002e72:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e78:	2302      	movs	r3, #2
 8002e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e80:	2303      	movs	r3, #3
 8002e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002e84:	2308      	movs	r3, #8
 8002e86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e88:	f107 0314 	add.w	r3, r7, #20
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4805      	ldr	r0, [pc, #20]	@ (8002ea4 <HAL_UART_MspInit+0x8c>)
 8002e90:	f000 fdf6 	bl	8003a80 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8002e94:	bf00      	nop
 8002e96:	3728      	adds	r7, #40	@ 0x28
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40004c00 	.word	0x40004c00
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	40020800 	.word	0x40020800

08002ea8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002eac:	4b14      	ldr	r3, [pc, #80]	@ (8002f00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002eae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002eb2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002eb4:	4b12      	ldr	r3, [pc, #72]	@ (8002f00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002eba:	4b11      	ldr	r3, [pc, #68]	@ (8002f00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8002f00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8002f00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ec8:	2202      	movs	r2, #2
 8002eca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8002f00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	@ (8002f00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002ed8:	4b09      	ldr	r3, [pc, #36]	@ (8002f00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002ede:	4b08      	ldr	r3, [pc, #32]	@ (8002f00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002ee4:	4b06      	ldr	r3, [pc, #24]	@ (8002f00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002eea:	4805      	ldr	r0, [pc, #20]	@ (8002f00 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002eec:	f001 ff78 	bl	8004de0 <HAL_PCD_Init>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002ef6:	f7ff faf7 	bl	80024e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002efa:	bf00      	nop
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	bf00      	nop
 8002f00:	20000494 	.word	0x20000494

08002f04 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b08a      	sub	sp, #40	@ 0x28
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f0c:	f107 0314 	add.w	r3, r7, #20
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	605a      	str	r2, [r3, #4]
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	60da      	str	r2, [r3, #12]
 8002f1a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002f24:	d132      	bne.n	8002f8c <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	613b      	str	r3, [r7, #16]
 8002f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002f94 <HAL_PCD_MspInit+0x90>)
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2e:	4a19      	ldr	r2, [pc, #100]	@ (8002f94 <HAL_PCD_MspInit+0x90>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f36:	4b17      	ldr	r3, [pc, #92]	@ (8002f94 <HAL_PCD_MspInit+0x90>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	613b      	str	r3, [r7, #16]
 8002f40:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002f42:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002f46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f50:	2303      	movs	r3, #3
 8002f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002f54:	230a      	movs	r3, #10
 8002f56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f58:	f107 0314 	add.w	r3, r7, #20
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	480e      	ldr	r0, [pc, #56]	@ (8002f98 <HAL_PCD_MspInit+0x94>)
 8002f60:	f000 fd8e 	bl	8003a80 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002f64:	4b0b      	ldr	r3, [pc, #44]	@ (8002f94 <HAL_PCD_MspInit+0x90>)
 8002f66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f68:	4a0a      	ldr	r2, [pc, #40]	@ (8002f94 <HAL_PCD_MspInit+0x90>)
 8002f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f6e:	6353      	str	r3, [r2, #52]	@ 0x34
 8002f70:	2300      	movs	r3, #0
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	4b07      	ldr	r3, [pc, #28]	@ (8002f94 <HAL_PCD_MspInit+0x90>)
 8002f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f78:	4a06      	ldr	r2, [pc, #24]	@ (8002f94 <HAL_PCD_MspInit+0x90>)
 8002f7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f7e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f80:	4b04      	ldr	r3, [pc, #16]	@ (8002f94 <HAL_PCD_MspInit+0x90>)
 8002f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002f8c:	bf00      	nop
 8002f8e:	3728      	adds	r7, #40	@ 0x28
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40020000 	.word	0x40020000

08002f9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002fd4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002fa0:	f7ff fd20 	bl	80029e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fa4:	480c      	ldr	r0, [pc, #48]	@ (8002fd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fa6:	490d      	ldr	r1, [pc, #52]	@ (8002fdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fa8:	4a0d      	ldr	r2, [pc, #52]	@ (8002fe0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002faa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fac:	e002      	b.n	8002fb4 <LoopCopyDataInit>

08002fae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fb2:	3304      	adds	r3, #4

08002fb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fb8:	d3f9      	bcc.n	8002fae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fba:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fbc:	4c0a      	ldr	r4, [pc, #40]	@ (8002fe8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002fbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fc0:	e001      	b.n	8002fc6 <LoopFillZerobss>

08002fc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fc4:	3204      	adds	r2, #4

08002fc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fc8:	d3fb      	bcc.n	8002fc2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002fca:	f004 fdf3 	bl	8007bb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fce:	f7ff f8ef 	bl	80021b0 <main>
  bx  lr    
 8002fd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002fd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fdc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002fe0:	0800a4f0 	.word	0x0800a4f0
  ldr r2, =_sbss
 8002fe4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002fe8:	20000ac8 	.word	0x20000ac8

08002fec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fec:	e7fe      	b.n	8002fec <ADC_IRQHandler>
	...

08002ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ff4:	4b0e      	ldr	r3, [pc, #56]	@ (8003030 <HAL_Init+0x40>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8003030 <HAL_Init+0x40>)
 8002ffa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ffe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003000:	4b0b      	ldr	r3, [pc, #44]	@ (8003030 <HAL_Init+0x40>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0a      	ldr	r2, [pc, #40]	@ (8003030 <HAL_Init+0x40>)
 8003006:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800300a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800300c:	4b08      	ldr	r3, [pc, #32]	@ (8003030 <HAL_Init+0x40>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a07      	ldr	r2, [pc, #28]	@ (8003030 <HAL_Init+0x40>)
 8003012:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003018:	2003      	movs	r0, #3
 800301a:	f000 fcfd 	bl	8003a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800301e:	200f      	movs	r0, #15
 8003020:	f000 f808 	bl	8003034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003024:	f7ff fbc0 	bl	80027a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40023c00 	.word	0x40023c00

08003034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800303c:	4b12      	ldr	r3, [pc, #72]	@ (8003088 <HAL_InitTick+0x54>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4b12      	ldr	r3, [pc, #72]	@ (800308c <HAL_InitTick+0x58>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	4619      	mov	r1, r3
 8003046:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800304a:	fbb3 f3f1 	udiv	r3, r3, r1
 800304e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003052:	4618      	mov	r0, r3
 8003054:	f000 fd07 	bl	8003a66 <HAL_SYSTICK_Config>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e00e      	b.n	8003080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b0f      	cmp	r3, #15
 8003066:	d80a      	bhi.n	800307e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003068:	2200      	movs	r2, #0
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003070:	f000 fcdd 	bl	8003a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003074:	4a06      	ldr	r2, [pc, #24]	@ (8003090 <HAL_InitTick+0x5c>)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	e000      	b.n	8003080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
}
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20000000 	.word	0x20000000
 800308c:	20000008 	.word	0x20000008
 8003090:	20000004 	.word	0x20000004

08003094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003098:	4b06      	ldr	r3, [pc, #24]	@ (80030b4 <HAL_IncTick+0x20>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	4b06      	ldr	r3, [pc, #24]	@ (80030b8 <HAL_IncTick+0x24>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4413      	add	r3, r2
 80030a4:	4a04      	ldr	r2, [pc, #16]	@ (80030b8 <HAL_IncTick+0x24>)
 80030a6:	6013      	str	r3, [r2, #0]
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	20000008 	.word	0x20000008
 80030b8:	20000978 	.word	0x20000978

080030bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return uwTick;
 80030c0:	4b03      	ldr	r3, [pc, #12]	@ (80030d0 <HAL_GetTick+0x14>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20000978 	.word	0x20000978

080030d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030dc:	f7ff ffee 	bl	80030bc <HAL_GetTick>
 80030e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80030ec:	d005      	beq.n	80030fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003118 <HAL_Delay+0x44>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030fa:	bf00      	nop
 80030fc:	f7ff ffde 	bl	80030bc <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	429a      	cmp	r2, r3
 800310a:	d8f7      	bhi.n	80030fc <HAL_Delay+0x28>
  {
  }
}
 800310c:	bf00      	nop
 800310e:	bf00      	nop
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000008 	.word	0x20000008

0800311c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e033      	b.n	800319a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	2b00      	cmp	r3, #0
 8003138:	d109      	bne.n	800314e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7fe f816 	bl	800116c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	2b00      	cmp	r3, #0
 8003158:	d118      	bne.n	800318c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003162:	f023 0302 	bic.w	r3, r3, #2
 8003166:	f043 0202 	orr.w	r2, r3, #2
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 faa4 	bl	80036bc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317e:	f023 0303 	bic.w	r3, r3, #3
 8003182:	f043 0201 	orr.w	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	641a      	str	r2, [r3, #64]	@ 0x40
 800318a:	e001      	b.n	8003190 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003198:	7bfb      	ldrb	r3, [r7, #15]
}
 800319a:	4618      	mov	r0, r3
 800319c:	3710      	adds	r7, #16
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
	...

080031a4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_ADC_Start+0x1a>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e0b2      	b.n	8003324 <HAL_ADC_Start+0x180>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d018      	beq.n	8003206 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031e4:	4b52      	ldr	r3, [pc, #328]	@ (8003330 <HAL_ADC_Start+0x18c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a52      	ldr	r2, [pc, #328]	@ (8003334 <HAL_ADC_Start+0x190>)
 80031ea:	fba2 2303 	umull	r2, r3, r2, r3
 80031ee:	0c9a      	lsrs	r2, r3, #18
 80031f0:	4613      	mov	r3, r2
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	4413      	add	r3, r2
 80031f6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80031f8:	e002      	b.n	8003200 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f9      	bne.n	80031fa <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b01      	cmp	r3, #1
 8003212:	d17a      	bne.n	800330a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003218:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003232:	2b00      	cmp	r3, #0
 8003234:	d007      	beq.n	8003246 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800323a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800323e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800324e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003252:	d106      	bne.n	8003262 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003258:	f023 0206 	bic.w	r2, r3, #6
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003260:	e002      	b.n	8003268 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003270:	4b31      	ldr	r3, [pc, #196]	@ (8003338 <HAL_ADC_Start+0x194>)
 8003272:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800327c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	2b00      	cmp	r3, #0
 8003288:	d12a      	bne.n	80032e0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a2b      	ldr	r2, [pc, #172]	@ (800333c <HAL_ADC_Start+0x198>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d015      	beq.n	80032c0 <HAL_ADC_Start+0x11c>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a29      	ldr	r2, [pc, #164]	@ (8003340 <HAL_ADC_Start+0x19c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d105      	bne.n	80032aa <HAL_ADC_Start+0x106>
 800329e:	4b26      	ldr	r3, [pc, #152]	@ (8003338 <HAL_ADC_Start+0x194>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f003 031f 	and.w	r3, r3, #31
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a25      	ldr	r2, [pc, #148]	@ (8003344 <HAL_ADC_Start+0x1a0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d136      	bne.n	8003322 <HAL_ADC_Start+0x17e>
 80032b4:	4b20      	ldr	r3, [pc, #128]	@ (8003338 <HAL_ADC_Start+0x194>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d130      	bne.n	8003322 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d129      	bne.n	8003322 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80032dc:	609a      	str	r2, [r3, #8]
 80032de:	e020      	b.n	8003322 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a15      	ldr	r2, [pc, #84]	@ (800333c <HAL_ADC_Start+0x198>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d11b      	bne.n	8003322 <HAL_ADC_Start+0x17e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d114      	bne.n	8003322 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	e00b      	b.n	8003322 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330e:	f043 0210 	orr.w	r2, r3, #16
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331a:	f043 0201 	orr.w	r2, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003322:	2300      	movs	r3, #0
}
 8003324:	4618      	mov	r0, r3
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	20000000 	.word	0x20000000
 8003334:	431bde83 	.word	0x431bde83
 8003338:	40012300 	.word	0x40012300
 800333c:	40012000 	.word	0x40012000
 8003340:	40012100 	.word	0x40012100
 8003344:	40012200 	.word	0x40012200

08003348 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003360:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003364:	d113      	bne.n	800338e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003370:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003374:	d10b      	bne.n	800338e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	f043 0220 	orr.w	r2, r3, #32
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e063      	b.n	8003456 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800338e:	f7ff fe95 	bl	80030bc <HAL_GetTick>
 8003392:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003394:	e021      	b.n	80033da <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800339c:	d01d      	beq.n	80033da <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d007      	beq.n	80033b4 <HAL_ADC_PollForConversion+0x6c>
 80033a4:	f7ff fe8a 	bl	80030bc <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d212      	bcs.n	80033da <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d00b      	beq.n	80033da <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	f043 0204 	orr.w	r2, r3, #4
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e03d      	b.n	8003456 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0302 	and.w	r3, r3, #2
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d1d6      	bne.n	8003396 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0212 	mvn.w	r2, #18
 80033f0:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d123      	bne.n	8003454 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003410:	2b00      	cmp	r3, #0
 8003412:	d11f      	bne.n	8003454 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800341a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800341e:	2b00      	cmp	r3, #0
 8003420:	d006      	beq.n	8003430 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800342c:	2b00      	cmp	r3, #0
 800342e:	d111      	bne.n	8003454 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003434:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003440:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d105      	bne.n	8003454 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344c:	f043 0201 	orr.w	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3710      	adds	r7, #16
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800346c:	4618      	mov	r0, r3
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800348c:	2b01      	cmp	r3, #1
 800348e:	d101      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x1c>
 8003490:	2302      	movs	r3, #2
 8003492:	e105      	b.n	80036a0 <HAL_ADC_ConfigChannel+0x228>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b09      	cmp	r3, #9
 80034a2:	d925      	bls.n	80034f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68d9      	ldr	r1, [r3, #12]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	461a      	mov	r2, r3
 80034b2:	4613      	mov	r3, r2
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	4413      	add	r3, r2
 80034b8:	3b1e      	subs	r3, #30
 80034ba:	2207      	movs	r2, #7
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43da      	mvns	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	400a      	ands	r2, r1
 80034c8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68d9      	ldr	r1, [r3, #12]
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	b29b      	uxth	r3, r3
 80034da:	4618      	mov	r0, r3
 80034dc:	4603      	mov	r3, r0
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	4403      	add	r3, r0
 80034e2:	3b1e      	subs	r3, #30
 80034e4:	409a      	lsls	r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	430a      	orrs	r2, r1
 80034ec:	60da      	str	r2, [r3, #12]
 80034ee:	e022      	b.n	8003536 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6919      	ldr	r1, [r3, #16]
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	461a      	mov	r2, r3
 80034fe:	4613      	mov	r3, r2
 8003500:	005b      	lsls	r3, r3, #1
 8003502:	4413      	add	r3, r2
 8003504:	2207      	movs	r2, #7
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	43da      	mvns	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	400a      	ands	r2, r1
 8003512:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6919      	ldr	r1, [r3, #16]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	b29b      	uxth	r3, r3
 8003524:	4618      	mov	r0, r3
 8003526:	4603      	mov	r3, r0
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	4403      	add	r3, r0
 800352c:	409a      	lsls	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	2b06      	cmp	r3, #6
 800353c:	d824      	bhi.n	8003588 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	3b05      	subs	r3, #5
 8003550:	221f      	movs	r2, #31
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43da      	mvns	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	400a      	ands	r2, r1
 800355e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	b29b      	uxth	r3, r3
 800356c:	4618      	mov	r0, r3
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	3b05      	subs	r3, #5
 800357a:	fa00 f203 	lsl.w	r2, r0, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	635a      	str	r2, [r3, #52]	@ 0x34
 8003586:	e04c      	b.n	8003622 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b0c      	cmp	r3, #12
 800358e:	d824      	bhi.n	80035da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685a      	ldr	r2, [r3, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	009b      	lsls	r3, r3, #2
 800359e:	4413      	add	r3, r2
 80035a0:	3b23      	subs	r3, #35	@ 0x23
 80035a2:	221f      	movs	r2, #31
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	43da      	mvns	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	400a      	ands	r2, r1
 80035b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	4618      	mov	r0, r3
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	4613      	mov	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	3b23      	subs	r3, #35	@ 0x23
 80035cc:	fa00 f203 	lsl.w	r2, r0, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80035d8:	e023      	b.n	8003622 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	3b41      	subs	r3, #65	@ 0x41
 80035ec:	221f      	movs	r2, #31
 80035ee:	fa02 f303 	lsl.w	r3, r2, r3
 80035f2:	43da      	mvns	r2, r3
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	400a      	ands	r2, r1
 80035fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	b29b      	uxth	r3, r3
 8003608:	4618      	mov	r0, r3
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	4613      	mov	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	4413      	add	r3, r2
 8003614:	3b41      	subs	r3, #65	@ 0x41
 8003616:	fa00 f203 	lsl.w	r2, r0, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	430a      	orrs	r2, r1
 8003620:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003622:	4b22      	ldr	r3, [pc, #136]	@ (80036ac <HAL_ADC_ConfigChannel+0x234>)
 8003624:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a21      	ldr	r2, [pc, #132]	@ (80036b0 <HAL_ADC_ConfigChannel+0x238>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d109      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x1cc>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2b12      	cmp	r3, #18
 8003636:	d105      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a19      	ldr	r2, [pc, #100]	@ (80036b0 <HAL_ADC_ConfigChannel+0x238>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d123      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x21e>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b10      	cmp	r3, #16
 8003654:	d003      	beq.n	800365e <HAL_ADC_ConfigChannel+0x1e6>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b11      	cmp	r3, #17
 800365c:	d11b      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	2b10      	cmp	r3, #16
 8003670:	d111      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003672:	4b10      	ldr	r3, [pc, #64]	@ (80036b4 <HAL_ADC_ConfigChannel+0x23c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a10      	ldr	r2, [pc, #64]	@ (80036b8 <HAL_ADC_ConfigChannel+0x240>)
 8003678:	fba2 2303 	umull	r2, r3, r2, r3
 800367c:	0c9a      	lsrs	r2, r3, #18
 800367e:	4613      	mov	r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	005b      	lsls	r3, r3, #1
 8003686:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003688:	e002      	b.n	8003690 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	3b01      	subs	r3, #1
 800368e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f9      	bne.n	800368a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	40012300 	.word	0x40012300
 80036b0:	40012000 	.word	0x40012000
 80036b4:	20000000 	.word	0x20000000
 80036b8:	431bde83 	.word	0x431bde83

080036bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036c4:	4b79      	ldr	r3, [pc, #484]	@ (80038ac <ADC_Init+0x1f0>)
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	431a      	orrs	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6859      	ldr	r1, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	021a      	lsls	r2, r3, #8
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	430a      	orrs	r2, r1
 8003704:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003714:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6859      	ldr	r1, [r3, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	430a      	orrs	r2, r1
 8003726:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689a      	ldr	r2, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003736:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6899      	ldr	r1, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68da      	ldr	r2, [r3, #12]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	430a      	orrs	r2, r1
 8003748:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800374e:	4a58      	ldr	r2, [pc, #352]	@ (80038b0 <ADC_Init+0x1f4>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d022      	beq.n	800379a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003762:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6899      	ldr	r1, [r3, #8]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	689a      	ldr	r2, [r3, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003784:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6899      	ldr	r1, [r3, #8]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	609a      	str	r2, [r3, #8]
 8003798:	e00f      	b.n	80037ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80037b8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689a      	ldr	r2, [r3, #8]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0202 	bic.w	r2, r2, #2
 80037c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	6899      	ldr	r1, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	7e1b      	ldrb	r3, [r3, #24]
 80037d4:	005a      	lsls	r2, r3, #1
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d01b      	beq.n	8003820 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037f6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003806:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	6859      	ldr	r1, [r3, #4]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003812:	3b01      	subs	r3, #1
 8003814:	035a      	lsls	r2, r3, #13
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
 800381e:	e007      	b.n	8003830 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800382e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800383e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	3b01      	subs	r3, #1
 800384c:	051a      	lsls	r2, r3, #20
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	430a      	orrs	r2, r1
 8003854:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003864:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	6899      	ldr	r1, [r3, #8]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003872:	025a      	lsls	r2, r3, #9
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800388a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6899      	ldr	r1, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	695b      	ldr	r3, [r3, #20]
 8003896:	029a      	lsls	r2, r3, #10
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	609a      	str	r2, [r3, #8]
}
 80038a0:	bf00      	nop
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr
 80038ac:	40012300 	.word	0x40012300
 80038b0:	0f000001 	.word	0x0f000001

080038b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038c4:	4b0c      	ldr	r3, [pc, #48]	@ (80038f8 <__NVIC_SetPriorityGrouping+0x44>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038d0:	4013      	ands	r3, r2
 80038d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038e6:	4a04      	ldr	r2, [pc, #16]	@ (80038f8 <__NVIC_SetPriorityGrouping+0x44>)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	60d3      	str	r3, [r2, #12]
}
 80038ec:	bf00      	nop
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	e000ed00 	.word	0xe000ed00

080038fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003900:	4b04      	ldr	r3, [pc, #16]	@ (8003914 <__NVIC_GetPriorityGrouping+0x18>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	0a1b      	lsrs	r3, r3, #8
 8003906:	f003 0307 	and.w	r3, r3, #7
}
 800390a:	4618      	mov	r0, r3
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	6039      	str	r1, [r7, #0]
 8003922:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003928:	2b00      	cmp	r3, #0
 800392a:	db0a      	blt.n	8003942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	b2da      	uxtb	r2, r3
 8003930:	490c      	ldr	r1, [pc, #48]	@ (8003964 <__NVIC_SetPriority+0x4c>)
 8003932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003936:	0112      	lsls	r2, r2, #4
 8003938:	b2d2      	uxtb	r2, r2
 800393a:	440b      	add	r3, r1
 800393c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003940:	e00a      	b.n	8003958 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	b2da      	uxtb	r2, r3
 8003946:	4908      	ldr	r1, [pc, #32]	@ (8003968 <__NVIC_SetPriority+0x50>)
 8003948:	79fb      	ldrb	r3, [r7, #7]
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	3b04      	subs	r3, #4
 8003950:	0112      	lsls	r2, r2, #4
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	440b      	add	r3, r1
 8003956:	761a      	strb	r2, [r3, #24]
}
 8003958:	bf00      	nop
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	e000e100 	.word	0xe000e100
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800396c:	b480      	push	{r7}
 800396e:	b089      	sub	sp, #36	@ 0x24
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f003 0307 	and.w	r3, r3, #7
 800397e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	f1c3 0307 	rsb	r3, r3, #7
 8003986:	2b04      	cmp	r3, #4
 8003988:	bf28      	it	cs
 800398a:	2304      	movcs	r3, #4
 800398c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	3304      	adds	r3, #4
 8003992:	2b06      	cmp	r3, #6
 8003994:	d902      	bls.n	800399c <NVIC_EncodePriority+0x30>
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	3b03      	subs	r3, #3
 800399a:	e000      	b.n	800399e <NVIC_EncodePriority+0x32>
 800399c:	2300      	movs	r3, #0
 800399e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	43da      	mvns	r2, r3
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	401a      	ands	r2, r3
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	fa01 f303 	lsl.w	r3, r1, r3
 80039be:	43d9      	mvns	r1, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039c4:	4313      	orrs	r3, r2
         );
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3724      	adds	r7, #36	@ 0x24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
	...

080039d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	3b01      	subs	r3, #1
 80039e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039e4:	d301      	bcc.n	80039ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039e6:	2301      	movs	r3, #1
 80039e8:	e00f      	b.n	8003a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003a14 <SysTick_Config+0x40>)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039f2:	210f      	movs	r1, #15
 80039f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80039f8:	f7ff ff8e 	bl	8003918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80039fc:	4b05      	ldr	r3, [pc, #20]	@ (8003a14 <SysTick_Config+0x40>)
 80039fe:	2200      	movs	r2, #0
 8003a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a02:	4b04      	ldr	r3, [pc, #16]	@ (8003a14 <SysTick_Config+0x40>)
 8003a04:	2207      	movs	r2, #7
 8003a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	e000e010 	.word	0xe000e010

08003a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff ff47 	bl	80038b4 <__NVIC_SetPriorityGrouping>
}
 8003a26:	bf00      	nop
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b086      	sub	sp, #24
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	4603      	mov	r3, r0
 8003a36:	60b9      	str	r1, [r7, #8]
 8003a38:	607a      	str	r2, [r7, #4]
 8003a3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a40:	f7ff ff5c 	bl	80038fc <__NVIC_GetPriorityGrouping>
 8003a44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	68b9      	ldr	r1, [r7, #8]
 8003a4a:	6978      	ldr	r0, [r7, #20]
 8003a4c:	f7ff ff8e 	bl	800396c <NVIC_EncodePriority>
 8003a50:	4602      	mov	r2, r0
 8003a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a56:	4611      	mov	r1, r2
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f7ff ff5d 	bl	8003918 <__NVIC_SetPriority>
}
 8003a5e:	bf00      	nop
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a66:	b580      	push	{r7, lr}
 8003a68:	b082      	sub	sp, #8
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff ffb0 	bl	80039d4 <SysTick_Config>
 8003a74:	4603      	mov	r3, r0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b089      	sub	sp, #36	@ 0x24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a92:	2300      	movs	r3, #0
 8003a94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a96:	2300      	movs	r3, #0
 8003a98:	61fb      	str	r3, [r7, #28]
 8003a9a:	e16b      	b.n	8003d74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4013      	ands	r3, r2
 8003aae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	f040 815a 	bne.w	8003d6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d005      	beq.n	8003ad2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d130      	bne.n	8003b34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	2203      	movs	r2, #3
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	69ba      	ldr	r2, [r7, #24]
 8003b00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b08:	2201      	movs	r2, #1
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	43db      	mvns	r3, r3
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4013      	ands	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	091b      	lsrs	r3, r3, #4
 8003b1e:	f003 0201 	and.w	r2, r3, #1
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f003 0303 	and.w	r3, r3, #3
 8003b3c:	2b03      	cmp	r3, #3
 8003b3e:	d017      	beq.n	8003b70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	2203      	movs	r2, #3
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	43db      	mvns	r3, r3
 8003b52:	69ba      	ldr	r2, [r7, #24]
 8003b54:	4013      	ands	r3, r2
 8003b56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	689a      	ldr	r2, [r3, #8]
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f003 0303 	and.w	r3, r3, #3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d123      	bne.n	8003bc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	08da      	lsrs	r2, r3, #3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3208      	adds	r2, #8
 8003b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	f003 0307 	and.w	r3, r3, #7
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	220f      	movs	r2, #15
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	08da      	lsrs	r2, r3, #3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	3208      	adds	r2, #8
 8003bbe:	69b9      	ldr	r1, [r7, #24]
 8003bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	2203      	movs	r2, #3
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f003 0203 	and.w	r2, r3, #3
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 80b4 	beq.w	8003d6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	4b60      	ldr	r3, [pc, #384]	@ (8003d8c <HAL_GPIO_Init+0x30c>)
 8003c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c0e:	4a5f      	ldr	r2, [pc, #380]	@ (8003d8c <HAL_GPIO_Init+0x30c>)
 8003c10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c16:	4b5d      	ldr	r3, [pc, #372]	@ (8003d8c <HAL_GPIO_Init+0x30c>)
 8003c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c22:	4a5b      	ldr	r2, [pc, #364]	@ (8003d90 <HAL_GPIO_Init+0x310>)
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	089b      	lsrs	r3, r3, #2
 8003c28:	3302      	adds	r3, #2
 8003c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f003 0303 	and.w	r3, r3, #3
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	220f      	movs	r2, #15
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4013      	ands	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a52      	ldr	r2, [pc, #328]	@ (8003d94 <HAL_GPIO_Init+0x314>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d02b      	beq.n	8003ca6 <HAL_GPIO_Init+0x226>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a51      	ldr	r2, [pc, #324]	@ (8003d98 <HAL_GPIO_Init+0x318>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d025      	beq.n	8003ca2 <HAL_GPIO_Init+0x222>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a50      	ldr	r2, [pc, #320]	@ (8003d9c <HAL_GPIO_Init+0x31c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d01f      	beq.n	8003c9e <HAL_GPIO_Init+0x21e>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a4f      	ldr	r2, [pc, #316]	@ (8003da0 <HAL_GPIO_Init+0x320>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d019      	beq.n	8003c9a <HAL_GPIO_Init+0x21a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a4e      	ldr	r2, [pc, #312]	@ (8003da4 <HAL_GPIO_Init+0x324>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d013      	beq.n	8003c96 <HAL_GPIO_Init+0x216>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a4d      	ldr	r2, [pc, #308]	@ (8003da8 <HAL_GPIO_Init+0x328>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d00d      	beq.n	8003c92 <HAL_GPIO_Init+0x212>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a4c      	ldr	r2, [pc, #304]	@ (8003dac <HAL_GPIO_Init+0x32c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d007      	beq.n	8003c8e <HAL_GPIO_Init+0x20e>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a4b      	ldr	r2, [pc, #300]	@ (8003db0 <HAL_GPIO_Init+0x330>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d101      	bne.n	8003c8a <HAL_GPIO_Init+0x20a>
 8003c86:	2307      	movs	r3, #7
 8003c88:	e00e      	b.n	8003ca8 <HAL_GPIO_Init+0x228>
 8003c8a:	2308      	movs	r3, #8
 8003c8c:	e00c      	b.n	8003ca8 <HAL_GPIO_Init+0x228>
 8003c8e:	2306      	movs	r3, #6
 8003c90:	e00a      	b.n	8003ca8 <HAL_GPIO_Init+0x228>
 8003c92:	2305      	movs	r3, #5
 8003c94:	e008      	b.n	8003ca8 <HAL_GPIO_Init+0x228>
 8003c96:	2304      	movs	r3, #4
 8003c98:	e006      	b.n	8003ca8 <HAL_GPIO_Init+0x228>
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e004      	b.n	8003ca8 <HAL_GPIO_Init+0x228>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e002      	b.n	8003ca8 <HAL_GPIO_Init+0x228>
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e000      	b.n	8003ca8 <HAL_GPIO_Init+0x228>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	69fa      	ldr	r2, [r7, #28]
 8003caa:	f002 0203 	and.w	r2, r2, #3
 8003cae:	0092      	lsls	r2, r2, #2
 8003cb0:	4093      	lsls	r3, r2
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cb8:	4935      	ldr	r1, [pc, #212]	@ (8003d90 <HAL_GPIO_Init+0x310>)
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	089b      	lsrs	r3, r3, #2
 8003cbe:	3302      	adds	r3, #2
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cc6:	4b3b      	ldr	r3, [pc, #236]	@ (8003db4 <HAL_GPIO_Init+0x334>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cea:	4a32      	ldr	r2, [pc, #200]	@ (8003db4 <HAL_GPIO_Init+0x334>)
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cf0:	4b30      	ldr	r3, [pc, #192]	@ (8003db4 <HAL_GPIO_Init+0x334>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	43db      	mvns	r3, r3
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d003      	beq.n	8003d14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d14:	4a27      	ldr	r2, [pc, #156]	@ (8003db4 <HAL_GPIO_Init+0x334>)
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d1a:	4b26      	ldr	r3, [pc, #152]	@ (8003db4 <HAL_GPIO_Init+0x334>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	43db      	mvns	r3, r3
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	4013      	ands	r3, r2
 8003d28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d3e:	4a1d      	ldr	r2, [pc, #116]	@ (8003db4 <HAL_GPIO_Init+0x334>)
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d44:	4b1b      	ldr	r3, [pc, #108]	@ (8003db4 <HAL_GPIO_Init+0x334>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	43db      	mvns	r3, r3
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	4013      	ands	r3, r2
 8003d52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d003      	beq.n	8003d68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d68:	4a12      	ldr	r2, [pc, #72]	@ (8003db4 <HAL_GPIO_Init+0x334>)
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	3301      	adds	r3, #1
 8003d72:	61fb      	str	r3, [r7, #28]
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	2b0f      	cmp	r3, #15
 8003d78:	f67f ae90 	bls.w	8003a9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	3724      	adds	r7, #36	@ 0x24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	40013800 	.word	0x40013800
 8003d94:	40020000 	.word	0x40020000
 8003d98:	40020400 	.word	0x40020400
 8003d9c:	40020800 	.word	0x40020800
 8003da0:	40020c00 	.word	0x40020c00
 8003da4:	40021000 	.word	0x40021000
 8003da8:	40021400 	.word	0x40021400
 8003dac:	40021800 	.word	0x40021800
 8003db0:	40021c00 	.word	0x40021c00
 8003db4:	40013c00 	.word	0x40013c00

08003db8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	807b      	strh	r3, [r7, #2]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dc8:	787b      	ldrb	r3, [r7, #1]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d003      	beq.n	8003dd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dce:	887a      	ldrh	r2, [r7, #2]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dd4:	e003      	b.n	8003dde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dd6:	887b      	ldrh	r3, [r7, #2]
 8003dd8:	041a      	lsls	r2, r3, #16
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	619a      	str	r2, [r3, #24]
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de8:	4770      	bx	lr
	...

08003dec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e12b      	b.n	8004056 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d106      	bne.n	8003e18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7fe f92c 	bl	8002070 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2224      	movs	r2, #36	@ 0x24
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0201 	bic.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e50:	f001 fd46 	bl	80058e0 <HAL_RCC_GetPCLK1Freq>
 8003e54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	4a81      	ldr	r2, [pc, #516]	@ (8004060 <HAL_I2C_Init+0x274>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d807      	bhi.n	8003e70 <HAL_I2C_Init+0x84>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4a80      	ldr	r2, [pc, #512]	@ (8004064 <HAL_I2C_Init+0x278>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	bf94      	ite	ls
 8003e68:	2301      	movls	r3, #1
 8003e6a:	2300      	movhi	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	e006      	b.n	8003e7e <HAL_I2C_Init+0x92>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4a7d      	ldr	r2, [pc, #500]	@ (8004068 <HAL_I2C_Init+0x27c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	bf94      	ite	ls
 8003e78:	2301      	movls	r3, #1
 8003e7a:	2300      	movhi	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e0e7      	b.n	8004056 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4a78      	ldr	r2, [pc, #480]	@ (800406c <HAL_I2C_Init+0x280>)
 8003e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8e:	0c9b      	lsrs	r3, r3, #18
 8003e90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	4a6a      	ldr	r2, [pc, #424]	@ (8004060 <HAL_I2C_Init+0x274>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d802      	bhi.n	8003ec0 <HAL_I2C_Init+0xd4>
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	e009      	b.n	8003ed4 <HAL_I2C_Init+0xe8>
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003ec6:	fb02 f303 	mul.w	r3, r2, r3
 8003eca:	4a69      	ldr	r2, [pc, #420]	@ (8004070 <HAL_I2C_Init+0x284>)
 8003ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed0:	099b      	lsrs	r3, r3, #6
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	430b      	orrs	r3, r1
 8003eda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003ee6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	495c      	ldr	r1, [pc, #368]	@ (8004060 <HAL_I2C_Init+0x274>)
 8003ef0:	428b      	cmp	r3, r1
 8003ef2:	d819      	bhi.n	8003f28 <HAL_I2C_Init+0x13c>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	1e59      	subs	r1, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f02:	1c59      	adds	r1, r3, #1
 8003f04:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f08:	400b      	ands	r3, r1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <HAL_I2C_Init+0x138>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	1e59      	subs	r1, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	005b      	lsls	r3, r3, #1
 8003f18:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f1c:	3301      	adds	r3, #1
 8003f1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f22:	e051      	b.n	8003fc8 <HAL_I2C_Init+0x1dc>
 8003f24:	2304      	movs	r3, #4
 8003f26:	e04f      	b.n	8003fc8 <HAL_I2C_Init+0x1dc>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d111      	bne.n	8003f54 <HAL_I2C_Init+0x168>
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	1e58      	subs	r0, r3, #1
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6859      	ldr	r1, [r3, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	440b      	add	r3, r1
 8003f3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f42:	3301      	adds	r3, #1
 8003f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	bf0c      	ite	eq
 8003f4c:	2301      	moveq	r3, #1
 8003f4e:	2300      	movne	r3, #0
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	e012      	b.n	8003f7a <HAL_I2C_Init+0x18e>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	1e58      	subs	r0, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6859      	ldr	r1, [r3, #4]
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	440b      	add	r3, r1
 8003f62:	0099      	lsls	r1, r3, #2
 8003f64:	440b      	add	r3, r1
 8003f66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	bf0c      	ite	eq
 8003f74:	2301      	moveq	r3, #1
 8003f76:	2300      	movne	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <HAL_I2C_Init+0x196>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e022      	b.n	8003fc8 <HAL_I2C_Init+0x1dc>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10e      	bne.n	8003fa8 <HAL_I2C_Init+0x1bc>
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1e58      	subs	r0, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6859      	ldr	r1, [r3, #4]
 8003f92:	460b      	mov	r3, r1
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	440b      	add	r3, r1
 8003f98:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fa6:	e00f      	b.n	8003fc8 <HAL_I2C_Init+0x1dc>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	1e58      	subs	r0, r3, #1
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6859      	ldr	r1, [r3, #4]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	0099      	lsls	r1, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	6809      	ldr	r1, [r1, #0]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69da      	ldr	r2, [r3, #28]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	431a      	orrs	r2, r3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003ff6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	6911      	ldr	r1, [r2, #16]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	68d2      	ldr	r2, [r2, #12]
 8004002:	4311      	orrs	r1, r2
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	6812      	ldr	r2, [r2, #0]
 8004008:	430b      	orrs	r3, r1
 800400a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	695a      	ldr	r2, [r3, #20]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	430a      	orrs	r2, r1
 8004026:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	000186a0 	.word	0x000186a0
 8004064:	001e847f 	.word	0x001e847f
 8004068:	003d08ff 	.word	0x003d08ff
 800406c:	431bde83 	.word	0x431bde83
 8004070:	10624dd3 	.word	0x10624dd3

08004074 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b088      	sub	sp, #32
 8004078:	af02      	add	r7, sp, #8
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	607a      	str	r2, [r7, #4]
 800407e:	461a      	mov	r2, r3
 8004080:	460b      	mov	r3, r1
 8004082:	817b      	strh	r3, [r7, #10]
 8004084:	4613      	mov	r3, r2
 8004086:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004088:	f7ff f818 	bl	80030bc <HAL_GetTick>
 800408c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004094:	b2db      	uxtb	r3, r3
 8004096:	2b20      	cmp	r3, #32
 8004098:	f040 80e0 	bne.w	800425c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	2319      	movs	r3, #25
 80040a2:	2201      	movs	r2, #1
 80040a4:	4970      	ldr	r1, [pc, #448]	@ (8004268 <HAL_I2C_Master_Transmit+0x1f4>)
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f000 fc64 	bl	8004974 <I2C_WaitOnFlagUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80040b2:	2302      	movs	r3, #2
 80040b4:	e0d3      	b.n	800425e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_I2C_Master_Transmit+0x50>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e0cc      	b.n	800425e <HAL_I2C_Master_Transmit+0x1ea>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d007      	beq.n	80040ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f042 0201 	orr.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2221      	movs	r2, #33	@ 0x21
 80040fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2210      	movs	r2, #16
 8004106:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	893a      	ldrh	r2, [r7, #8]
 800411a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004120:	b29a      	uxth	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	4a50      	ldr	r2, [pc, #320]	@ (800426c <HAL_I2C_Master_Transmit+0x1f8>)
 800412a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800412c:	8979      	ldrh	r1, [r7, #10]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	6a3a      	ldr	r2, [r7, #32]
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f000 face 	bl	80046d4 <I2C_MasterRequestWrite>
 8004138:	4603      	mov	r3, r0
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	e08d      	b.n	800425e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004142:	2300      	movs	r3, #0
 8004144:	613b      	str	r3, [r7, #16]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	613b      	str	r3, [r7, #16]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	613b      	str	r3, [r7, #16]
 8004156:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004158:	e066      	b.n	8004228 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	6a39      	ldr	r1, [r7, #32]
 800415e:	68f8      	ldr	r0, [r7, #12]
 8004160:	f000 fd22 	bl	8004ba8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00d      	beq.n	8004186 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	2b04      	cmp	r3, #4
 8004170:	d107      	bne.n	8004182 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004180:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e06b      	b.n	800425e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418a:	781a      	ldrb	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	3b01      	subs	r3, #1
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041ae:	3b01      	subs	r3, #1
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d11b      	bne.n	80041fc <HAL_I2C_Master_Transmit+0x188>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d017      	beq.n	80041fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d0:	781a      	ldrb	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	6a39      	ldr	r1, [r7, #32]
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 fd19 	bl	8004c38 <I2C_WaitOnBTFFlagUntilTimeout>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00d      	beq.n	8004228 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004210:	2b04      	cmp	r3, #4
 8004212:	d107      	bne.n	8004224 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004222:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e01a      	b.n	800425e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800422c:	2b00      	cmp	r3, #0
 800422e:	d194      	bne.n	800415a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800423e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	e000      	b.n	800425e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800425c:	2302      	movs	r3, #2
  }
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	00100002 	.word	0x00100002
 800426c:	ffff0000 	.word	0xffff0000

08004270 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08c      	sub	sp, #48	@ 0x30
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	607a      	str	r2, [r7, #4]
 800427a:	461a      	mov	r2, r3
 800427c:	460b      	mov	r3, r1
 800427e:	817b      	strh	r3, [r7, #10]
 8004280:	4613      	mov	r3, r2
 8004282:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004284:	f7fe ff1a 	bl	80030bc <HAL_GetTick>
 8004288:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b20      	cmp	r3, #32
 8004294:	f040 8217 	bne.w	80046c6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	2319      	movs	r3, #25
 800429e:	2201      	movs	r2, #1
 80042a0:	497c      	ldr	r1, [pc, #496]	@ (8004494 <HAL_I2C_Master_Receive+0x224>)
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 fb66 	bl	8004974 <I2C_WaitOnFlagUntilTimeout>
 80042a8:	4603      	mov	r3, r0
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d001      	beq.n	80042b2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80042ae:	2302      	movs	r3, #2
 80042b0:	e20a      	b.n	80046c8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d101      	bne.n	80042c0 <HAL_I2C_Master_Receive+0x50>
 80042bc:	2302      	movs	r3, #2
 80042be:	e203      	b.n	80046c8 <HAL_I2C_Master_Receive+0x458>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0301 	and.w	r3, r3, #1
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d007      	beq.n	80042e6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 0201 	orr.w	r2, r2, #1
 80042e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2222      	movs	r2, #34	@ 0x22
 80042fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2210      	movs	r2, #16
 8004302:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	893a      	ldrh	r2, [r7, #8]
 8004316:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4a5c      	ldr	r2, [pc, #368]	@ (8004498 <HAL_I2C_Master_Receive+0x228>)
 8004326:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004328:	8979      	ldrh	r1, [r7, #10]
 800432a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 fa52 	bl	80047d8 <I2C_MasterRequestRead>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e1c4      	b.n	80046c8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004342:	2b00      	cmp	r3, #0
 8004344:	d113      	bne.n	800436e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004346:	2300      	movs	r3, #0
 8004348:	623b      	str	r3, [r7, #32]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	623b      	str	r3, [r7, #32]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	623b      	str	r3, [r7, #32]
 800435a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	e198      	b.n	80046a0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004372:	2b01      	cmp	r3, #1
 8004374:	d11b      	bne.n	80043ae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004384:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004386:	2300      	movs	r3, #0
 8004388:	61fb      	str	r3, [r7, #28]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	61fb      	str	r3, [r7, #28]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	61fb      	str	r3, [r7, #28]
 800439a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	e178      	b.n	80046a0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d11b      	bne.n	80043ee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d6:	2300      	movs	r3, #0
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	61bb      	str	r3, [r7, #24]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	61bb      	str	r3, [r7, #24]
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	e158      	b.n	80046a0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80043fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	617b      	str	r3, [r7, #20]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004414:	e144      	b.n	80046a0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800441a:	2b03      	cmp	r3, #3
 800441c:	f200 80f1 	bhi.w	8004602 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004424:	2b01      	cmp	r3, #1
 8004426:	d123      	bne.n	8004470 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004428:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800442a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 fc4b 	bl	8004cc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e145      	b.n	80046c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	691a      	ldr	r2, [r3, #16]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444e:	1c5a      	adds	r2, r3, #1
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004458:	3b01      	subs	r3, #1
 800445a:	b29a      	uxth	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004464:	b29b      	uxth	r3, r3
 8004466:	3b01      	subs	r3, #1
 8004468:	b29a      	uxth	r2, r3
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800446e:	e117      	b.n	80046a0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004474:	2b02      	cmp	r3, #2
 8004476:	d14e      	bne.n	8004516 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800447e:	2200      	movs	r2, #0
 8004480:	4906      	ldr	r1, [pc, #24]	@ (800449c <HAL_I2C_Master_Receive+0x22c>)
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 fa76 	bl	8004974 <I2C_WaitOnFlagUntilTimeout>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d008      	beq.n	80044a0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e11a      	b.n	80046c8 <HAL_I2C_Master_Receive+0x458>
 8004492:	bf00      	nop
 8004494:	00100002 	.word	0x00100002
 8004498:	ffff0000 	.word	0xffff0000
 800449c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681a      	ldr	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	691a      	ldr	r2, [r3, #16]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044cc:	3b01      	subs	r3, #1
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044d8:	b29b      	uxth	r3, r3
 80044da:	3b01      	subs	r3, #1
 80044dc:	b29a      	uxth	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004514:	e0c4      	b.n	80046a0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451c:	2200      	movs	r2, #0
 800451e:	496c      	ldr	r1, [pc, #432]	@ (80046d0 <HAL_I2C_Master_Receive+0x460>)
 8004520:	68f8      	ldr	r0, [r7, #12]
 8004522:	f000 fa27 	bl	8004974 <I2C_WaitOnFlagUntilTimeout>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e0cb      	b.n	80046c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800453e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454a:	b2d2      	uxtb	r2, r2
 800454c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800455c:	3b01      	subs	r3, #1
 800455e:	b29a      	uxth	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004568:	b29b      	uxth	r3, r3
 800456a:	3b01      	subs	r3, #1
 800456c:	b29a      	uxth	r2, r3
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004574:	9300      	str	r3, [sp, #0]
 8004576:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004578:	2200      	movs	r2, #0
 800457a:	4955      	ldr	r1, [pc, #340]	@ (80046d0 <HAL_I2C_Master_Receive+0x460>)
 800457c:	68f8      	ldr	r0, [r7, #12]
 800457e:	f000 f9f9 	bl	8004974 <I2C_WaitOnFlagUntilTimeout>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d001      	beq.n	800458c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e09d      	b.n	80046c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800459a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	691a      	ldr	r2, [r3, #16]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e0:	1c5a      	adds	r2, r3, #1
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b01      	subs	r3, #1
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004600:	e04e      	b.n	80046a0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004602:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004604:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 fb5e 	bl	8004cc8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e058      	b.n	80046c8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004632:	3b01      	subs	r3, #1
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b04      	cmp	r3, #4
 8004654:	d124      	bne.n	80046a0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800465a:	2b03      	cmp	r3, #3
 800465c:	d107      	bne.n	800466e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800466c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	691a      	ldr	r2, [r3, #16]
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004678:	b2d2      	uxtb	r2, r2
 800467a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004680:	1c5a      	adds	r2, r3, #1
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800468a:	3b01      	subs	r3, #1
 800468c:	b29a      	uxth	r2, r3
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004696:	b29b      	uxth	r3, r3
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f47f aeb6 	bne.w	8004416 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2220      	movs	r2, #32
 80046ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	e000      	b.n	80046c8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80046c6:	2302      	movs	r3, #2
  }
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3728      	adds	r7, #40	@ 0x28
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	00010004 	.word	0x00010004

080046d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b088      	sub	sp, #32
 80046d8:	af02      	add	r7, sp, #8
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	607a      	str	r2, [r7, #4]
 80046de:	603b      	str	r3, [r7, #0]
 80046e0:	460b      	mov	r3, r1
 80046e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d006      	beq.n	80046fe <I2C_MasterRequestWrite+0x2a>
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d003      	beq.n	80046fe <I2C_MasterRequestWrite+0x2a>
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80046fc:	d108      	bne.n	8004710 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	e00b      	b.n	8004728 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004714:	2b12      	cmp	r3, #18
 8004716:	d107      	bne.n	8004728 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004726:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 f91d 	bl	8004974 <I2C_WaitOnFlagUntilTimeout>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00d      	beq.n	800475c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800474a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800474e:	d103      	bne.n	8004758 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004756:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e035      	b.n	80047c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004764:	d108      	bne.n	8004778 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004766:	897b      	ldrh	r3, [r7, #10]
 8004768:	b2db      	uxtb	r3, r3
 800476a:	461a      	mov	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004774:	611a      	str	r2, [r3, #16]
 8004776:	e01b      	b.n	80047b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004778:	897b      	ldrh	r3, [r7, #10]
 800477a:	11db      	asrs	r3, r3, #7
 800477c:	b2db      	uxtb	r3, r3
 800477e:	f003 0306 	and.w	r3, r3, #6
 8004782:	b2db      	uxtb	r3, r3
 8004784:	f063 030f 	orn	r3, r3, #15
 8004788:	b2da      	uxtb	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	490e      	ldr	r1, [pc, #56]	@ (80047d0 <I2C_MasterRequestWrite+0xfc>)
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 f966 	bl	8004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e010      	b.n	80047c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80047a6:	897b      	ldrh	r3, [r7, #10]
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	4907      	ldr	r1, [pc, #28]	@ (80047d4 <I2C_MasterRequestWrite+0x100>)
 80047b6:	68f8      	ldr	r0, [r7, #12]
 80047b8:	f000 f956 	bl	8004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e000      	b.n	80047c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3718      	adds	r7, #24
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	00010008 	.word	0x00010008
 80047d4:	00010002 	.word	0x00010002

080047d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b088      	sub	sp, #32
 80047dc:	af02      	add	r7, sp, #8
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	607a      	str	r2, [r7, #4]
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	460b      	mov	r3, r1
 80047e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80047fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2b08      	cmp	r3, #8
 8004802:	d006      	beq.n	8004812 <I2C_MasterRequestRead+0x3a>
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d003      	beq.n	8004812 <I2C_MasterRequestRead+0x3a>
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004810:	d108      	bne.n	8004824 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004820:	601a      	str	r2, [r3, #0]
 8004822:	e00b      	b.n	800483c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004828:	2b11      	cmp	r3, #17
 800482a:	d107      	bne.n	800483c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800483a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 f893 	bl	8004974 <I2C_WaitOnFlagUntilTimeout>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00d      	beq.n	8004870 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800485e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004862:	d103      	bne.n	800486c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800486a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e079      	b.n	8004964 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004878:	d108      	bne.n	800488c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800487a:	897b      	ldrh	r3, [r7, #10]
 800487c:	b2db      	uxtb	r3, r3
 800487e:	f043 0301 	orr.w	r3, r3, #1
 8004882:	b2da      	uxtb	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	611a      	str	r2, [r3, #16]
 800488a:	e05f      	b.n	800494c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800488c:	897b      	ldrh	r3, [r7, #10]
 800488e:	11db      	asrs	r3, r3, #7
 8004890:	b2db      	uxtb	r3, r3
 8004892:	f003 0306 	and.w	r3, r3, #6
 8004896:	b2db      	uxtb	r3, r3
 8004898:	f063 030f 	orn	r3, r3, #15
 800489c:	b2da      	uxtb	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	4930      	ldr	r1, [pc, #192]	@ (800496c <I2C_MasterRequestRead+0x194>)
 80048aa:	68f8      	ldr	r0, [r7, #12]
 80048ac:	f000 f8dc 	bl	8004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d001      	beq.n	80048ba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e054      	b.n	8004964 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048ba:	897b      	ldrh	r3, [r7, #10]
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	4929      	ldr	r1, [pc, #164]	@ (8004970 <I2C_MasterRequestRead+0x198>)
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f000 f8cc 	bl	8004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048d0:	4603      	mov	r3, r0
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d001      	beq.n	80048da <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e044      	b.n	8004964 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048da:	2300      	movs	r3, #0
 80048dc:	613b      	str	r3, [r7, #16]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	695b      	ldr	r3, [r3, #20]
 80048e4:	613b      	str	r3, [r7, #16]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048fe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 f831 	bl	8004974 <I2C_WaitOnFlagUntilTimeout>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00d      	beq.n	8004934 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004922:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004926:	d103      	bne.n	8004930 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800492e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004930:	2303      	movs	r3, #3
 8004932:	e017      	b.n	8004964 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004934:	897b      	ldrh	r3, [r7, #10]
 8004936:	11db      	asrs	r3, r3, #7
 8004938:	b2db      	uxtb	r3, r3
 800493a:	f003 0306 	and.w	r3, r3, #6
 800493e:	b2db      	uxtb	r3, r3
 8004940:	f063 030e 	orn	r3, r3, #14
 8004944:	b2da      	uxtb	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	4907      	ldr	r1, [pc, #28]	@ (8004970 <I2C_MasterRequestRead+0x198>)
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 f888 	bl	8004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e000      	b.n	8004964 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	00010008 	.word	0x00010008
 8004970:	00010002 	.word	0x00010002

08004974 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	603b      	str	r3, [r7, #0]
 8004980:	4613      	mov	r3, r2
 8004982:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004984:	e048      	b.n	8004a18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800498c:	d044      	beq.n	8004a18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800498e:	f7fe fb95 	bl	80030bc <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	429a      	cmp	r2, r3
 800499c:	d302      	bcc.n	80049a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d139      	bne.n	8004a18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	0c1b      	lsrs	r3, r3, #16
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d10d      	bne.n	80049ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	43da      	mvns	r2, r3
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	4013      	ands	r3, r2
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	bf0c      	ite	eq
 80049c0:	2301      	moveq	r3, #1
 80049c2:	2300      	movne	r3, #0
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	461a      	mov	r2, r3
 80049c8:	e00c      	b.n	80049e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	43da      	mvns	r2, r3
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	4013      	ands	r3, r2
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	2b00      	cmp	r3, #0
 80049da:	bf0c      	ite	eq
 80049dc:	2301      	moveq	r3, #1
 80049de:	2300      	movne	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	461a      	mov	r2, r3
 80049e4:	79fb      	ldrb	r3, [r7, #7]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d116      	bne.n	8004a18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a04:	f043 0220 	orr.w	r2, r3, #32
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e023      	b.n	8004a60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	0c1b      	lsrs	r3, r3, #16
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d10d      	bne.n	8004a3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	43da      	mvns	r2, r3
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	bf0c      	ite	eq
 8004a34:	2301      	moveq	r3, #1
 8004a36:	2300      	movne	r3, #0
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	e00c      	b.n	8004a58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	43da      	mvns	r2, r3
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	4013      	ands	r3, r2
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	bf0c      	ite	eq
 8004a50:	2301      	moveq	r3, #1
 8004a52:	2300      	movne	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	461a      	mov	r2, r3
 8004a58:	79fb      	ldrb	r3, [r7, #7]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d093      	beq.n	8004986 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
 8004a74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a76:	e071      	b.n	8004b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a86:	d123      	bne.n	8004ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004aa0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	2220      	movs	r2, #32
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004abc:	f043 0204 	orr.w	r2, r3, #4
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e067      	b.n	8004ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ad6:	d041      	beq.n	8004b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad8:	f7fe faf0 	bl	80030bc <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d302      	bcc.n	8004aee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d136      	bne.n	8004b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	0c1b      	lsrs	r3, r3, #16
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d10c      	bne.n	8004b12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	43da      	mvns	r2, r3
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	4013      	ands	r3, r2
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	bf14      	ite	ne
 8004b0a:	2301      	movne	r3, #1
 8004b0c:	2300      	moveq	r3, #0
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	e00b      	b.n	8004b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	43da      	mvns	r2, r3
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	b29b      	uxth	r3, r3
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	bf14      	ite	ne
 8004b24:	2301      	movne	r3, #1
 8004b26:	2300      	moveq	r3, #0
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d016      	beq.n	8004b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2220      	movs	r2, #32
 8004b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b48:	f043 0220 	orr.w	r2, r3, #32
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e021      	b.n	8004ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	0c1b      	lsrs	r3, r3, #16
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d10c      	bne.n	8004b80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	43da      	mvns	r2, r3
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	4013      	ands	r3, r2
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bf14      	ite	ne
 8004b78:	2301      	movne	r3, #1
 8004b7a:	2300      	moveq	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	e00b      	b.n	8004b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	699b      	ldr	r3, [r3, #24]
 8004b86:	43da      	mvns	r2, r3
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	bf14      	ite	ne
 8004b92:	2301      	movne	r3, #1
 8004b94:	2300      	moveq	r3, #0
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f47f af6d 	bne.w	8004a78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bb4:	e034      	b.n	8004c20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f000 f8e3 	bl	8004d82 <I2C_IsAcknowledgeFailed>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e034      	b.n	8004c30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bcc:	d028      	beq.n	8004c20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bce:	f7fe fa75 	bl	80030bc <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	68ba      	ldr	r2, [r7, #8]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d302      	bcc.n	8004be4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d11d      	bne.n	8004c20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bee:	2b80      	cmp	r3, #128	@ 0x80
 8004bf0:	d016      	beq.n	8004c20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	2200      	movs	r2, #0
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0c:	f043 0220 	orr.w	r2, r3, #32
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e007      	b.n	8004c30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c2a:	2b80      	cmp	r3, #128	@ 0x80
 8004c2c:	d1c3      	bne.n	8004bb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c44:	e034      	b.n	8004cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f000 f89b 	bl	8004d82 <I2C_IsAcknowledgeFailed>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e034      	b.n	8004cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c5c:	d028      	beq.n	8004cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c5e:	f7fe fa2d 	bl	80030bc <HAL_GetTick>
 8004c62:	4602      	mov	r2, r0
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	1ad3      	subs	r3, r2, r3
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d302      	bcc.n	8004c74 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d11d      	bne.n	8004cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	d016      	beq.n	8004cb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9c:	f043 0220 	orr.w	r2, r3, #32
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e007      	b.n	8004cc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f003 0304 	and.w	r3, r3, #4
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d1c3      	bne.n	8004c46 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cd4:	e049      	b.n	8004d6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	f003 0310 	and.w	r3, r3, #16
 8004ce0:	2b10      	cmp	r3, #16
 8004ce2:	d119      	bne.n	8004d18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f06f 0210 	mvn.w	r2, #16
 8004cec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e030      	b.n	8004d7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d18:	f7fe f9d0 	bl	80030bc <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d302      	bcc.n	8004d2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d11d      	bne.n	8004d6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d38:	2b40      	cmp	r3, #64	@ 0x40
 8004d3a:	d016      	beq.n	8004d6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2220      	movs	r2, #32
 8004d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d56:	f043 0220 	orr.w	r2, r3, #32
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e007      	b.n	8004d7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d74:	2b40      	cmp	r3, #64	@ 0x40
 8004d76:	d1ae      	bne.n	8004cd6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	695b      	ldr	r3, [r3, #20]
 8004d90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d98:	d11b      	bne.n	8004dd2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004da2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2220      	movs	r2, #32
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dbe:	f043 0204 	orr.w	r2, r3, #4
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e000      	b.n	8004dd4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b086      	sub	sp, #24
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e101      	b.n	8004ff6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d106      	bne.n	8004e12 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f7fe f879 	bl	8002f04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2203      	movs	r2, #3
 8004e16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e20:	d102      	bne.n	8004e28 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f001 fec7 	bl	8006bc0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6818      	ldr	r0, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	7c1a      	ldrb	r2, [r3, #16]
 8004e3a:	f88d 2000 	strb.w	r2, [sp]
 8004e3e:	3304      	adds	r3, #4
 8004e40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e42:	f001 fe59 	bl	8006af8 <USB_CoreInit>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d005      	beq.n	8004e58 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e0ce      	b.n	8004ff6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2100      	movs	r1, #0
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f001 febf 	bl	8006be2 <USB_SetCurrentMode>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d005      	beq.n	8004e76 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e0bf      	b.n	8004ff6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e76:	2300      	movs	r3, #0
 8004e78:	73fb      	strb	r3, [r7, #15]
 8004e7a:	e04a      	b.n	8004f12 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004e7c:	7bfa      	ldrb	r2, [r7, #15]
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	4613      	mov	r3, r2
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	4413      	add	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	440b      	add	r3, r1
 8004e8a:	3315      	adds	r3, #21
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004e90:	7bfa      	ldrb	r2, [r7, #15]
 8004e92:	6879      	ldr	r1, [r7, #4]
 8004e94:	4613      	mov	r3, r2
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	4413      	add	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	440b      	add	r3, r1
 8004e9e:	3314      	adds	r3, #20
 8004ea0:	7bfa      	ldrb	r2, [r7, #15]
 8004ea2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004ea4:	7bfa      	ldrb	r2, [r7, #15]
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
 8004ea8:	b298      	uxth	r0, r3
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	00db      	lsls	r3, r3, #3
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	332e      	adds	r3, #46	@ 0x2e
 8004eb8:	4602      	mov	r2, r0
 8004eba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004ebc:	7bfa      	ldrb	r2, [r7, #15]
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	00db      	lsls	r3, r3, #3
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	3318      	adds	r3, #24
 8004ecc:	2200      	movs	r2, #0
 8004ece:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ed0:	7bfa      	ldrb	r2, [r7, #15]
 8004ed2:	6879      	ldr	r1, [r7, #4]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	4413      	add	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	440b      	add	r3, r1
 8004ede:	331c      	adds	r3, #28
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ee4:	7bfa      	ldrb	r2, [r7, #15]
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	00db      	lsls	r3, r3, #3
 8004eec:	4413      	add	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	440b      	add	r3, r1
 8004ef2:	3320      	adds	r3, #32
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ef8:	7bfa      	ldrb	r2, [r7, #15]
 8004efa:	6879      	ldr	r1, [r7, #4]
 8004efc:	4613      	mov	r3, r2
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	4413      	add	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	440b      	add	r3, r1
 8004f06:	3324      	adds	r3, #36	@ 0x24
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f0c:	7bfb      	ldrb	r3, [r7, #15]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	73fb      	strb	r3, [r7, #15]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	791b      	ldrb	r3, [r3, #4]
 8004f16:	7bfa      	ldrb	r2, [r7, #15]
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d3af      	bcc.n	8004e7c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	73fb      	strb	r3, [r7, #15]
 8004f20:	e044      	b.n	8004fac <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f22:	7bfa      	ldrb	r2, [r7, #15]
 8004f24:	6879      	ldr	r1, [r7, #4]
 8004f26:	4613      	mov	r3, r2
 8004f28:	00db      	lsls	r3, r3, #3
 8004f2a:	4413      	add	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	440b      	add	r3, r1
 8004f30:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004f34:	2200      	movs	r2, #0
 8004f36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f38:	7bfa      	ldrb	r2, [r7, #15]
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	4413      	add	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	440b      	add	r3, r1
 8004f46:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004f4a:	7bfa      	ldrb	r2, [r7, #15]
 8004f4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004f4e:	7bfa      	ldrb	r2, [r7, #15]
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	4413      	add	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	440b      	add	r3, r1
 8004f5c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004f60:	2200      	movs	r2, #0
 8004f62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004f64:	7bfa      	ldrb	r2, [r7, #15]
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	4413      	add	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	440b      	add	r3, r1
 8004f72:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004f76:	2200      	movs	r2, #0
 8004f78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004f7a:	7bfa      	ldrb	r2, [r7, #15]
 8004f7c:	6879      	ldr	r1, [r7, #4]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	4413      	add	r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004f90:	7bfa      	ldrb	r2, [r7, #15]
 8004f92:	6879      	ldr	r1, [r7, #4]
 8004f94:	4613      	mov	r3, r2
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	4413      	add	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	440b      	add	r3, r1
 8004f9e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	73fb      	strb	r3, [r7, #15]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	791b      	ldrb	r3, [r3, #4]
 8004fb0:	7bfa      	ldrb	r2, [r7, #15]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d3b5      	bcc.n	8004f22 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6818      	ldr	r0, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	7c1a      	ldrb	r2, [r3, #16]
 8004fbe:	f88d 2000 	strb.w	r2, [sp]
 8004fc2:	3304      	adds	r3, #4
 8004fc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004fc6:	f001 fe59 	bl	8006c7c <USB_DevInit>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e00c      	b.n	8004ff6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f002 f821 	bl	8007036 <USB_DevDisconnect>

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d101      	bne.n	8005012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e267      	b.n	80054e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d075      	beq.n	800510a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800501e:	4b88      	ldr	r3, [pc, #544]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 030c 	and.w	r3, r3, #12
 8005026:	2b04      	cmp	r3, #4
 8005028:	d00c      	beq.n	8005044 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800502a:	4b85      	ldr	r3, [pc, #532]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005032:	2b08      	cmp	r3, #8
 8005034:	d112      	bne.n	800505c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005036:	4b82      	ldr	r3, [pc, #520]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800503e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005042:	d10b      	bne.n	800505c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005044:	4b7e      	ldr	r3, [pc, #504]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d05b      	beq.n	8005108 <HAL_RCC_OscConfig+0x108>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d157      	bne.n	8005108 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e242      	b.n	80054e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005064:	d106      	bne.n	8005074 <HAL_RCC_OscConfig+0x74>
 8005066:	4b76      	ldr	r3, [pc, #472]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a75      	ldr	r2, [pc, #468]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 800506c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	e01d      	b.n	80050b0 <HAL_RCC_OscConfig+0xb0>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800507c:	d10c      	bne.n	8005098 <HAL_RCC_OscConfig+0x98>
 800507e:	4b70      	ldr	r3, [pc, #448]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a6f      	ldr	r2, [pc, #444]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 8005084:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	4b6d      	ldr	r3, [pc, #436]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a6c      	ldr	r2, [pc, #432]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 8005090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005094:	6013      	str	r3, [r2, #0]
 8005096:	e00b      	b.n	80050b0 <HAL_RCC_OscConfig+0xb0>
 8005098:	4b69      	ldr	r3, [pc, #420]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a68      	ldr	r2, [pc, #416]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 800509e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	4b66      	ldr	r3, [pc, #408]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a65      	ldr	r2, [pc, #404]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 80050aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d013      	beq.n	80050e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050b8:	f7fe f800 	bl	80030bc <HAL_GetTick>
 80050bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050be:	e008      	b.n	80050d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050c0:	f7fd fffc 	bl	80030bc <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	2b64      	cmp	r3, #100	@ 0x64
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e207      	b.n	80054e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050d2:	4b5b      	ldr	r3, [pc, #364]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d0f0      	beq.n	80050c0 <HAL_RCC_OscConfig+0xc0>
 80050de:	e014      	b.n	800510a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050e0:	f7fd ffec 	bl	80030bc <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050e8:	f7fd ffe8 	bl	80030bc <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b64      	cmp	r3, #100	@ 0x64
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e1f3      	b.n	80054e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050fa:	4b51      	ldr	r3, [pc, #324]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1f0      	bne.n	80050e8 <HAL_RCC_OscConfig+0xe8>
 8005106:	e000      	b.n	800510a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f003 0302 	and.w	r3, r3, #2
 8005112:	2b00      	cmp	r3, #0
 8005114:	d063      	beq.n	80051de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005116:	4b4a      	ldr	r3, [pc, #296]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	f003 030c 	and.w	r3, r3, #12
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00b      	beq.n	800513a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005122:	4b47      	ldr	r3, [pc, #284]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800512a:	2b08      	cmp	r3, #8
 800512c:	d11c      	bne.n	8005168 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800512e:	4b44      	ldr	r3, [pc, #272]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d116      	bne.n	8005168 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800513a:	4b41      	ldr	r3, [pc, #260]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 0302 	and.w	r3, r3, #2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d005      	beq.n	8005152 <HAL_RCC_OscConfig+0x152>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d001      	beq.n	8005152 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e1c7      	b.n	80054e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005152:	4b3b      	ldr	r3, [pc, #236]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	4937      	ldr	r1, [pc, #220]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 8005162:	4313      	orrs	r3, r2
 8005164:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005166:	e03a      	b.n	80051de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d020      	beq.n	80051b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005170:	4b34      	ldr	r3, [pc, #208]	@ (8005244 <HAL_RCC_OscConfig+0x244>)
 8005172:	2201      	movs	r2, #1
 8005174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005176:	f7fd ffa1 	bl	80030bc <HAL_GetTick>
 800517a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800517c:	e008      	b.n	8005190 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800517e:	f7fd ff9d 	bl	80030bc <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d901      	bls.n	8005190 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e1a8      	b.n	80054e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005190:	4b2b      	ldr	r3, [pc, #172]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0f0      	beq.n	800517e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800519c:	4b28      	ldr	r3, [pc, #160]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	00db      	lsls	r3, r3, #3
 80051aa:	4925      	ldr	r1, [pc, #148]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	600b      	str	r3, [r1, #0]
 80051b0:	e015      	b.n	80051de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051b2:	4b24      	ldr	r3, [pc, #144]	@ (8005244 <HAL_RCC_OscConfig+0x244>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051b8:	f7fd ff80 	bl	80030bc <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051c0:	f7fd ff7c 	bl	80030bc <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e187      	b.n	80054e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1f0      	bne.n	80051c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d036      	beq.n	8005258 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	695b      	ldr	r3, [r3, #20]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d016      	beq.n	8005220 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051f2:	4b15      	ldr	r3, [pc, #84]	@ (8005248 <HAL_RCC_OscConfig+0x248>)
 80051f4:	2201      	movs	r2, #1
 80051f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051f8:	f7fd ff60 	bl	80030bc <HAL_GetTick>
 80051fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051fe:	e008      	b.n	8005212 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005200:	f7fd ff5c 	bl	80030bc <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	2b02      	cmp	r3, #2
 800520c:	d901      	bls.n	8005212 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800520e:	2303      	movs	r3, #3
 8005210:	e167      	b.n	80054e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005212:	4b0b      	ldr	r3, [pc, #44]	@ (8005240 <HAL_RCC_OscConfig+0x240>)
 8005214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d0f0      	beq.n	8005200 <HAL_RCC_OscConfig+0x200>
 800521e:	e01b      	b.n	8005258 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005220:	4b09      	ldr	r3, [pc, #36]	@ (8005248 <HAL_RCC_OscConfig+0x248>)
 8005222:	2200      	movs	r2, #0
 8005224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005226:	f7fd ff49 	bl	80030bc <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800522c:	e00e      	b.n	800524c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800522e:	f7fd ff45 	bl	80030bc <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d907      	bls.n	800524c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e150      	b.n	80054e2 <HAL_RCC_OscConfig+0x4e2>
 8005240:	40023800 	.word	0x40023800
 8005244:	42470000 	.word	0x42470000
 8005248:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800524c:	4b88      	ldr	r3, [pc, #544]	@ (8005470 <HAL_RCC_OscConfig+0x470>)
 800524e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1ea      	bne.n	800522e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b00      	cmp	r3, #0
 8005262:	f000 8097 	beq.w	8005394 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005266:	2300      	movs	r3, #0
 8005268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800526a:	4b81      	ldr	r3, [pc, #516]	@ (8005470 <HAL_RCC_OscConfig+0x470>)
 800526c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10f      	bne.n	8005296 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005276:	2300      	movs	r3, #0
 8005278:	60bb      	str	r3, [r7, #8]
 800527a:	4b7d      	ldr	r3, [pc, #500]	@ (8005470 <HAL_RCC_OscConfig+0x470>)
 800527c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527e:	4a7c      	ldr	r2, [pc, #496]	@ (8005470 <HAL_RCC_OscConfig+0x470>)
 8005280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005284:	6413      	str	r3, [r2, #64]	@ 0x40
 8005286:	4b7a      	ldr	r3, [pc, #488]	@ (8005470 <HAL_RCC_OscConfig+0x470>)
 8005288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800528e:	60bb      	str	r3, [r7, #8]
 8005290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005292:	2301      	movs	r3, #1
 8005294:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005296:	4b77      	ldr	r3, [pc, #476]	@ (8005474 <HAL_RCC_OscConfig+0x474>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d118      	bne.n	80052d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052a2:	4b74      	ldr	r3, [pc, #464]	@ (8005474 <HAL_RCC_OscConfig+0x474>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a73      	ldr	r2, [pc, #460]	@ (8005474 <HAL_RCC_OscConfig+0x474>)
 80052a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ae:	f7fd ff05 	bl	80030bc <HAL_GetTick>
 80052b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052b4:	e008      	b.n	80052c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052b6:	f7fd ff01 	bl	80030bc <HAL_GetTick>
 80052ba:	4602      	mov	r2, r0
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e10c      	b.n	80054e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c8:	4b6a      	ldr	r3, [pc, #424]	@ (8005474 <HAL_RCC_OscConfig+0x474>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d0f0      	beq.n	80052b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d106      	bne.n	80052ea <HAL_RCC_OscConfig+0x2ea>
 80052dc:	4b64      	ldr	r3, [pc, #400]	@ (8005470 <HAL_RCC_OscConfig+0x470>)
 80052de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e0:	4a63      	ldr	r2, [pc, #396]	@ (8005470 <HAL_RCC_OscConfig+0x470>)
 80052e2:	f043 0301 	orr.w	r3, r3, #1
 80052e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80052e8:	e01c      	b.n	8005324 <HAL_RCC_OscConfig+0x324>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	2b05      	cmp	r3, #5
 80052f0:	d10c      	bne.n	800530c <HAL_RCC_OscConfig+0x30c>
 80052f2:	4b5f      	ldr	r3, [pc, #380]	@ (8005470 <HAL_RCC_OscConfig+0x470>)
 80052f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f6:	4a5e      	ldr	r2, [pc, #376]	@ (8005470 <HAL_RCC_OscConfig+0x470>)
 80052f8:	f043 0304 	orr.w	r3, r3, #4
 80052fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80052fe:	4b5c      	ldr	r3, [pc, #368]	@ (8005470 <HAL_RCC_OscConfig+0x470>)
 8005300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005302:	4a5b      	ldr	r2, [pc, #364]	@ (8005470 <HAL_RCC_OscConfig+0x470>)
 8005304:	f043 0301 	orr.w	r3, r3, #1
 8005308:	6713      	str	r3, [r2, #112]	@ 0x70
 800530a:	e00b      	b.n	8005324 <HAL_RCC_OscConfig+0x324>
 800530c:	4b58      	ldr	r3, [pc, #352]	@ (8005470 <HAL_RCC_OscConfig+0x470>)
 800530e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005310:	4a57      	ldr	r2, [pc, #348]	@ (8005470 <HAL_RCC_OscConfig+0x470>)
 8005312:	f023 0301 	bic.w	r3, r3, #1
 8005316:	6713      	str	r3, [r2, #112]	@ 0x70
 8005318:	4b55      	ldr	r3, [pc, #340]	@ (8005470 <HAL_RCC_OscConfig+0x470>)
 800531a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800531c:	4a54      	ldr	r2, [pc, #336]	@ (8005470 <HAL_RCC_OscConfig+0x470>)
 800531e:	f023 0304 	bic.w	r3, r3, #4
 8005322:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d015      	beq.n	8005358 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800532c:	f7fd fec6 	bl	80030bc <HAL_GetTick>
 8005330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005332:	e00a      	b.n	800534a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005334:	f7fd fec2 	bl	80030bc <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005342:	4293      	cmp	r3, r2
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e0cb      	b.n	80054e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800534a:	4b49      	ldr	r3, [pc, #292]	@ (8005470 <HAL_RCC_OscConfig+0x470>)
 800534c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800534e:	f003 0302 	and.w	r3, r3, #2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0ee      	beq.n	8005334 <HAL_RCC_OscConfig+0x334>
 8005356:	e014      	b.n	8005382 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005358:	f7fd feb0 	bl	80030bc <HAL_GetTick>
 800535c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800535e:	e00a      	b.n	8005376 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005360:	f7fd feac 	bl	80030bc <HAL_GetTick>
 8005364:	4602      	mov	r2, r0
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	1ad3      	subs	r3, r2, r3
 800536a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800536e:	4293      	cmp	r3, r2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e0b5      	b.n	80054e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005376:	4b3e      	ldr	r3, [pc, #248]	@ (8005470 <HAL_RCC_OscConfig+0x470>)
 8005378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1ee      	bne.n	8005360 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005382:	7dfb      	ldrb	r3, [r7, #23]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d105      	bne.n	8005394 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005388:	4b39      	ldr	r3, [pc, #228]	@ (8005470 <HAL_RCC_OscConfig+0x470>)
 800538a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538c:	4a38      	ldr	r2, [pc, #224]	@ (8005470 <HAL_RCC_OscConfig+0x470>)
 800538e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005392:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 80a1 	beq.w	80054e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800539e:	4b34      	ldr	r3, [pc, #208]	@ (8005470 <HAL_RCC_OscConfig+0x470>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 030c 	and.w	r3, r3, #12
 80053a6:	2b08      	cmp	r3, #8
 80053a8:	d05c      	beq.n	8005464 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d141      	bne.n	8005436 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053b2:	4b31      	ldr	r3, [pc, #196]	@ (8005478 <HAL_RCC_OscConfig+0x478>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b8:	f7fd fe80 	bl	80030bc <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053c0:	f7fd fe7c 	bl	80030bc <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e087      	b.n	80054e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053d2:	4b27      	ldr	r3, [pc, #156]	@ (8005470 <HAL_RCC_OscConfig+0x470>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1f0      	bne.n	80053c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	69da      	ldr	r2, [r3, #28]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ec:	019b      	lsls	r3, r3, #6
 80053ee:	431a      	orrs	r2, r3
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f4:	085b      	lsrs	r3, r3, #1
 80053f6:	3b01      	subs	r3, #1
 80053f8:	041b      	lsls	r3, r3, #16
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005400:	061b      	lsls	r3, r3, #24
 8005402:	491b      	ldr	r1, [pc, #108]	@ (8005470 <HAL_RCC_OscConfig+0x470>)
 8005404:	4313      	orrs	r3, r2
 8005406:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005408:	4b1b      	ldr	r3, [pc, #108]	@ (8005478 <HAL_RCC_OscConfig+0x478>)
 800540a:	2201      	movs	r2, #1
 800540c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540e:	f7fd fe55 	bl	80030bc <HAL_GetTick>
 8005412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005414:	e008      	b.n	8005428 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005416:	f7fd fe51 	bl	80030bc <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d901      	bls.n	8005428 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e05c      	b.n	80054e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005428:	4b11      	ldr	r3, [pc, #68]	@ (8005470 <HAL_RCC_OscConfig+0x470>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d0f0      	beq.n	8005416 <HAL_RCC_OscConfig+0x416>
 8005434:	e054      	b.n	80054e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005436:	4b10      	ldr	r3, [pc, #64]	@ (8005478 <HAL_RCC_OscConfig+0x478>)
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543c:	f7fd fe3e 	bl	80030bc <HAL_GetTick>
 8005440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005442:	e008      	b.n	8005456 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005444:	f7fd fe3a 	bl	80030bc <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	2b02      	cmp	r3, #2
 8005450:	d901      	bls.n	8005456 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005452:	2303      	movs	r3, #3
 8005454:	e045      	b.n	80054e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005456:	4b06      	ldr	r3, [pc, #24]	@ (8005470 <HAL_RCC_OscConfig+0x470>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1f0      	bne.n	8005444 <HAL_RCC_OscConfig+0x444>
 8005462:	e03d      	b.n	80054e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	2b01      	cmp	r3, #1
 800546a:	d107      	bne.n	800547c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e038      	b.n	80054e2 <HAL_RCC_OscConfig+0x4e2>
 8005470:	40023800 	.word	0x40023800
 8005474:	40007000 	.word	0x40007000
 8005478:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800547c:	4b1b      	ldr	r3, [pc, #108]	@ (80054ec <HAL_RCC_OscConfig+0x4ec>)
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d028      	beq.n	80054dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005494:	429a      	cmp	r2, r3
 8005496:	d121      	bne.n	80054dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d11a      	bne.n	80054dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80054ac:	4013      	ands	r3, r2
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80054b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d111      	bne.n	80054dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c2:	085b      	lsrs	r3, r3, #1
 80054c4:	3b01      	subs	r3, #1
 80054c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d107      	bne.n	80054dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054d8:	429a      	cmp	r2, r3
 80054da:	d001      	beq.n	80054e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e000      	b.n	80054e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3718      	adds	r7, #24
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40023800 	.word	0x40023800

080054f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e0cc      	b.n	800569e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005504:	4b68      	ldr	r3, [pc, #416]	@ (80056a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0307 	and.w	r3, r3, #7
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	429a      	cmp	r2, r3
 8005510:	d90c      	bls.n	800552c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005512:	4b65      	ldr	r3, [pc, #404]	@ (80056a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800551a:	4b63      	ldr	r3, [pc, #396]	@ (80056a8 <HAL_RCC_ClockConfig+0x1b8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0307 	and.w	r3, r3, #7
 8005522:	683a      	ldr	r2, [r7, #0]
 8005524:	429a      	cmp	r2, r3
 8005526:	d001      	beq.n	800552c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e0b8      	b.n	800569e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d020      	beq.n	800557a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0304 	and.w	r3, r3, #4
 8005540:	2b00      	cmp	r3, #0
 8005542:	d005      	beq.n	8005550 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005544:	4b59      	ldr	r3, [pc, #356]	@ (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	4a58      	ldr	r2, [pc, #352]	@ (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 800554a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800554e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f003 0308 	and.w	r3, r3, #8
 8005558:	2b00      	cmp	r3, #0
 800555a:	d005      	beq.n	8005568 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800555c:	4b53      	ldr	r3, [pc, #332]	@ (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	4a52      	ldr	r2, [pc, #328]	@ (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005562:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005566:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005568:	4b50      	ldr	r3, [pc, #320]	@ (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	494d      	ldr	r1, [pc, #308]	@ (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005576:	4313      	orrs	r3, r2
 8005578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d044      	beq.n	8005610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	2b01      	cmp	r3, #1
 800558c:	d107      	bne.n	800559e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800558e:	4b47      	ldr	r3, [pc, #284]	@ (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d119      	bne.n	80055ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e07f      	b.n	800569e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d003      	beq.n	80055ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055aa:	2b03      	cmp	r3, #3
 80055ac:	d107      	bne.n	80055be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055ae:	4b3f      	ldr	r3, [pc, #252]	@ (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d109      	bne.n	80055ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
 80055bc:	e06f      	b.n	800569e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055be:	4b3b      	ldr	r3, [pc, #236]	@ (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d101      	bne.n	80055ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e067      	b.n	800569e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055ce:	4b37      	ldr	r3, [pc, #220]	@ (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f023 0203 	bic.w	r2, r3, #3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	4934      	ldr	r1, [pc, #208]	@ (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055e0:	f7fd fd6c 	bl	80030bc <HAL_GetTick>
 80055e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e6:	e00a      	b.n	80055fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055e8:	f7fd fd68 	bl	80030bc <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e04f      	b.n	800569e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fe:	4b2b      	ldr	r3, [pc, #172]	@ (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f003 020c 	and.w	r2, r3, #12
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	429a      	cmp	r2, r3
 800560e:	d1eb      	bne.n	80055e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005610:	4b25      	ldr	r3, [pc, #148]	@ (80056a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0307 	and.w	r3, r3, #7
 8005618:	683a      	ldr	r2, [r7, #0]
 800561a:	429a      	cmp	r2, r3
 800561c:	d20c      	bcs.n	8005638 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800561e:	4b22      	ldr	r3, [pc, #136]	@ (80056a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	b2d2      	uxtb	r2, r2
 8005624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005626:	4b20      	ldr	r3, [pc, #128]	@ (80056a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0307 	and.w	r3, r3, #7
 800562e:	683a      	ldr	r2, [r7, #0]
 8005630:	429a      	cmp	r2, r3
 8005632:	d001      	beq.n	8005638 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e032      	b.n	800569e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b00      	cmp	r3, #0
 8005642:	d008      	beq.n	8005656 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005644:	4b19      	ldr	r3, [pc, #100]	@ (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	4916      	ldr	r1, [pc, #88]	@ (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005652:	4313      	orrs	r3, r2
 8005654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 0308 	and.w	r3, r3, #8
 800565e:	2b00      	cmp	r3, #0
 8005660:	d009      	beq.n	8005676 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005662:	4b12      	ldr	r3, [pc, #72]	@ (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	00db      	lsls	r3, r3, #3
 8005670:	490e      	ldr	r1, [pc, #56]	@ (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 8005672:	4313      	orrs	r3, r2
 8005674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005676:	f000 f821 	bl	80056bc <HAL_RCC_GetSysClockFreq>
 800567a:	4602      	mov	r2, r0
 800567c:	4b0b      	ldr	r3, [pc, #44]	@ (80056ac <HAL_RCC_ClockConfig+0x1bc>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	091b      	lsrs	r3, r3, #4
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	490a      	ldr	r1, [pc, #40]	@ (80056b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005688:	5ccb      	ldrb	r3, [r1, r3]
 800568a:	fa22 f303 	lsr.w	r3, r2, r3
 800568e:	4a09      	ldr	r2, [pc, #36]	@ (80056b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005692:	4b09      	ldr	r3, [pc, #36]	@ (80056b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4618      	mov	r0, r3
 8005698:	f7fd fccc 	bl	8003034 <HAL_InitTick>

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	40023c00 	.word	0x40023c00
 80056ac:	40023800 	.word	0x40023800
 80056b0:	0800a158 	.word	0x0800a158
 80056b4:	20000000 	.word	0x20000000
 80056b8:	20000004 	.word	0x20000004

080056bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056c0:	b094      	sub	sp, #80	@ 0x50
 80056c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80056c8:	2300      	movs	r3, #0
 80056ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80056cc:	2300      	movs	r3, #0
 80056ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80056d0:	2300      	movs	r3, #0
 80056d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80056d4:	4b79      	ldr	r3, [pc, #484]	@ (80058bc <HAL_RCC_GetSysClockFreq+0x200>)
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f003 030c 	and.w	r3, r3, #12
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d00d      	beq.n	80056fc <HAL_RCC_GetSysClockFreq+0x40>
 80056e0:	2b08      	cmp	r3, #8
 80056e2:	f200 80e1 	bhi.w	80058a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d002      	beq.n	80056f0 <HAL_RCC_GetSysClockFreq+0x34>
 80056ea:	2b04      	cmp	r3, #4
 80056ec:	d003      	beq.n	80056f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80056ee:	e0db      	b.n	80058a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80056f0:	4b73      	ldr	r3, [pc, #460]	@ (80058c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80056f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056f4:	e0db      	b.n	80058ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056f6:	4b73      	ldr	r3, [pc, #460]	@ (80058c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80056f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056fa:	e0d8      	b.n	80058ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056fc:	4b6f      	ldr	r3, [pc, #444]	@ (80058bc <HAL_RCC_GetSysClockFreq+0x200>)
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005704:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005706:	4b6d      	ldr	r3, [pc, #436]	@ (80058bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d063      	beq.n	80057da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005712:	4b6a      	ldr	r3, [pc, #424]	@ (80058bc <HAL_RCC_GetSysClockFreq+0x200>)
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	099b      	lsrs	r3, r3, #6
 8005718:	2200      	movs	r2, #0
 800571a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800571c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800571e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005724:	633b      	str	r3, [r7, #48]	@ 0x30
 8005726:	2300      	movs	r3, #0
 8005728:	637b      	str	r3, [r7, #52]	@ 0x34
 800572a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800572e:	4622      	mov	r2, r4
 8005730:	462b      	mov	r3, r5
 8005732:	f04f 0000 	mov.w	r0, #0
 8005736:	f04f 0100 	mov.w	r1, #0
 800573a:	0159      	lsls	r1, r3, #5
 800573c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005740:	0150      	lsls	r0, r2, #5
 8005742:	4602      	mov	r2, r0
 8005744:	460b      	mov	r3, r1
 8005746:	4621      	mov	r1, r4
 8005748:	1a51      	subs	r1, r2, r1
 800574a:	6139      	str	r1, [r7, #16]
 800574c:	4629      	mov	r1, r5
 800574e:	eb63 0301 	sbc.w	r3, r3, r1
 8005752:	617b      	str	r3, [r7, #20]
 8005754:	f04f 0200 	mov.w	r2, #0
 8005758:	f04f 0300 	mov.w	r3, #0
 800575c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005760:	4659      	mov	r1, fp
 8005762:	018b      	lsls	r3, r1, #6
 8005764:	4651      	mov	r1, sl
 8005766:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800576a:	4651      	mov	r1, sl
 800576c:	018a      	lsls	r2, r1, #6
 800576e:	4651      	mov	r1, sl
 8005770:	ebb2 0801 	subs.w	r8, r2, r1
 8005774:	4659      	mov	r1, fp
 8005776:	eb63 0901 	sbc.w	r9, r3, r1
 800577a:	f04f 0200 	mov.w	r2, #0
 800577e:	f04f 0300 	mov.w	r3, #0
 8005782:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005786:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800578a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800578e:	4690      	mov	r8, r2
 8005790:	4699      	mov	r9, r3
 8005792:	4623      	mov	r3, r4
 8005794:	eb18 0303 	adds.w	r3, r8, r3
 8005798:	60bb      	str	r3, [r7, #8]
 800579a:	462b      	mov	r3, r5
 800579c:	eb49 0303 	adc.w	r3, r9, r3
 80057a0:	60fb      	str	r3, [r7, #12]
 80057a2:	f04f 0200 	mov.w	r2, #0
 80057a6:	f04f 0300 	mov.w	r3, #0
 80057aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80057ae:	4629      	mov	r1, r5
 80057b0:	024b      	lsls	r3, r1, #9
 80057b2:	4621      	mov	r1, r4
 80057b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80057b8:	4621      	mov	r1, r4
 80057ba:	024a      	lsls	r2, r1, #9
 80057bc:	4610      	mov	r0, r2
 80057be:	4619      	mov	r1, r3
 80057c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057c2:	2200      	movs	r2, #0
 80057c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057cc:	f7fb fa16 	bl	8000bfc <__aeabi_uldivmod>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4613      	mov	r3, r2
 80057d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057d8:	e058      	b.n	800588c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057da:	4b38      	ldr	r3, [pc, #224]	@ (80058bc <HAL_RCC_GetSysClockFreq+0x200>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	099b      	lsrs	r3, r3, #6
 80057e0:	2200      	movs	r2, #0
 80057e2:	4618      	mov	r0, r3
 80057e4:	4611      	mov	r1, r2
 80057e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057ea:	623b      	str	r3, [r7, #32]
 80057ec:	2300      	movs	r3, #0
 80057ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80057f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057f4:	4642      	mov	r2, r8
 80057f6:	464b      	mov	r3, r9
 80057f8:	f04f 0000 	mov.w	r0, #0
 80057fc:	f04f 0100 	mov.w	r1, #0
 8005800:	0159      	lsls	r1, r3, #5
 8005802:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005806:	0150      	lsls	r0, r2, #5
 8005808:	4602      	mov	r2, r0
 800580a:	460b      	mov	r3, r1
 800580c:	4641      	mov	r1, r8
 800580e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005812:	4649      	mov	r1, r9
 8005814:	eb63 0b01 	sbc.w	fp, r3, r1
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005824:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005828:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800582c:	ebb2 040a 	subs.w	r4, r2, sl
 8005830:	eb63 050b 	sbc.w	r5, r3, fp
 8005834:	f04f 0200 	mov.w	r2, #0
 8005838:	f04f 0300 	mov.w	r3, #0
 800583c:	00eb      	lsls	r3, r5, #3
 800583e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005842:	00e2      	lsls	r2, r4, #3
 8005844:	4614      	mov	r4, r2
 8005846:	461d      	mov	r5, r3
 8005848:	4643      	mov	r3, r8
 800584a:	18e3      	adds	r3, r4, r3
 800584c:	603b      	str	r3, [r7, #0]
 800584e:	464b      	mov	r3, r9
 8005850:	eb45 0303 	adc.w	r3, r5, r3
 8005854:	607b      	str	r3, [r7, #4]
 8005856:	f04f 0200 	mov.w	r2, #0
 800585a:	f04f 0300 	mov.w	r3, #0
 800585e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005862:	4629      	mov	r1, r5
 8005864:	028b      	lsls	r3, r1, #10
 8005866:	4621      	mov	r1, r4
 8005868:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800586c:	4621      	mov	r1, r4
 800586e:	028a      	lsls	r2, r1, #10
 8005870:	4610      	mov	r0, r2
 8005872:	4619      	mov	r1, r3
 8005874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005876:	2200      	movs	r2, #0
 8005878:	61bb      	str	r3, [r7, #24]
 800587a:	61fa      	str	r2, [r7, #28]
 800587c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005880:	f7fb f9bc 	bl	8000bfc <__aeabi_uldivmod>
 8005884:	4602      	mov	r2, r0
 8005886:	460b      	mov	r3, r1
 8005888:	4613      	mov	r3, r2
 800588a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800588c:	4b0b      	ldr	r3, [pc, #44]	@ (80058bc <HAL_RCC_GetSysClockFreq+0x200>)
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	0c1b      	lsrs	r3, r3, #16
 8005892:	f003 0303 	and.w	r3, r3, #3
 8005896:	3301      	adds	r3, #1
 8005898:	005b      	lsls	r3, r3, #1
 800589a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800589c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800589e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80058a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058a6:	e002      	b.n	80058ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058a8:	4b05      	ldr	r3, [pc, #20]	@ (80058c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80058aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80058ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3750      	adds	r7, #80	@ 0x50
 80058b4:	46bd      	mov	sp, r7
 80058b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058ba:	bf00      	nop
 80058bc:	40023800 	.word	0x40023800
 80058c0:	00f42400 	.word	0x00f42400
 80058c4:	007a1200 	.word	0x007a1200

080058c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058c8:	b480      	push	{r7}
 80058ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058cc:	4b03      	ldr	r3, [pc, #12]	@ (80058dc <HAL_RCC_GetHCLKFreq+0x14>)
 80058ce:	681b      	ldr	r3, [r3, #0]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	20000000 	.word	0x20000000

080058e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80058e4:	f7ff fff0 	bl	80058c8 <HAL_RCC_GetHCLKFreq>
 80058e8:	4602      	mov	r2, r0
 80058ea:	4b05      	ldr	r3, [pc, #20]	@ (8005900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	0a9b      	lsrs	r3, r3, #10
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	4903      	ldr	r1, [pc, #12]	@ (8005904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058f6:	5ccb      	ldrb	r3, [r1, r3]
 80058f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40023800 	.word	0x40023800
 8005904:	0800a168 	.word	0x0800a168

08005908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800590c:	f7ff ffdc 	bl	80058c8 <HAL_RCC_GetHCLKFreq>
 8005910:	4602      	mov	r2, r0
 8005912:	4b05      	ldr	r3, [pc, #20]	@ (8005928 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	0b5b      	lsrs	r3, r3, #13
 8005918:	f003 0307 	and.w	r3, r3, #7
 800591c:	4903      	ldr	r1, [pc, #12]	@ (800592c <HAL_RCC_GetPCLK2Freq+0x24>)
 800591e:	5ccb      	ldrb	r3, [r1, r3]
 8005920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005924:	4618      	mov	r0, r3
 8005926:	bd80      	pop	{r7, pc}
 8005928:	40023800 	.word	0x40023800
 800592c:	0800a168 	.word	0x0800a168

08005930 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e041      	b.n	80059c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d106      	bne.n	800595c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7fd f962 	bl	8002c20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3304      	adds	r3, #4
 800596c:	4619      	mov	r1, r3
 800596e:	4610      	mov	r0, r2
 8005970:	f000 f9b8 	bl	8005ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80059c4:	2300      	movs	r3, #0
}
 80059c6:	4618      	mov	r0, r3
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
	...

080059d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d109      	bne.n	80059f4 <HAL_TIM_PWM_Start+0x24>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	bf14      	ite	ne
 80059ec:	2301      	movne	r3, #1
 80059ee:	2300      	moveq	r3, #0
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	e022      	b.n	8005a3a <HAL_TIM_PWM_Start+0x6a>
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	d109      	bne.n	8005a0e <HAL_TIM_PWM_Start+0x3e>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	bf14      	ite	ne
 8005a06:	2301      	movne	r3, #1
 8005a08:	2300      	moveq	r3, #0
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	e015      	b.n	8005a3a <HAL_TIM_PWM_Start+0x6a>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b08      	cmp	r3, #8
 8005a12:	d109      	bne.n	8005a28 <HAL_TIM_PWM_Start+0x58>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	bf14      	ite	ne
 8005a20:	2301      	movne	r3, #1
 8005a22:	2300      	moveq	r3, #0
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	e008      	b.n	8005a3a <HAL_TIM_PWM_Start+0x6a>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	bf14      	ite	ne
 8005a34:	2301      	movne	r3, #1
 8005a36:	2300      	moveq	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e07c      	b.n	8005b3c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d104      	bne.n	8005a52 <HAL_TIM_PWM_Start+0x82>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a50:	e013      	b.n	8005a7a <HAL_TIM_PWM_Start+0xaa>
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d104      	bne.n	8005a62 <HAL_TIM_PWM_Start+0x92>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a60:	e00b      	b.n	8005a7a <HAL_TIM_PWM_Start+0xaa>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b08      	cmp	r3, #8
 8005a66:	d104      	bne.n	8005a72 <HAL_TIM_PWM_Start+0xa2>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2202      	movs	r2, #2
 8005a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005a70:	e003      	b.n	8005a7a <HAL_TIM_PWM_Start+0xaa>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2202      	movs	r2, #2
 8005a76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	6839      	ldr	r1, [r7, #0]
 8005a82:	4618      	mov	r0, r3
 8005a84:	f000 fb8a 	bl	800619c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a2d      	ldr	r2, [pc, #180]	@ (8005b44 <HAL_TIM_PWM_Start+0x174>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d004      	beq.n	8005a9c <HAL_TIM_PWM_Start+0xcc>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a2c      	ldr	r2, [pc, #176]	@ (8005b48 <HAL_TIM_PWM_Start+0x178>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d101      	bne.n	8005aa0 <HAL_TIM_PWM_Start+0xd0>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	e000      	b.n	8005aa2 <HAL_TIM_PWM_Start+0xd2>
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d007      	beq.n	8005ab6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ab4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a22      	ldr	r2, [pc, #136]	@ (8005b44 <HAL_TIM_PWM_Start+0x174>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d022      	beq.n	8005b06 <HAL_TIM_PWM_Start+0x136>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ac8:	d01d      	beq.n	8005b06 <HAL_TIM_PWM_Start+0x136>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a1f      	ldr	r2, [pc, #124]	@ (8005b4c <HAL_TIM_PWM_Start+0x17c>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d018      	beq.n	8005b06 <HAL_TIM_PWM_Start+0x136>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a1d      	ldr	r2, [pc, #116]	@ (8005b50 <HAL_TIM_PWM_Start+0x180>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d013      	beq.n	8005b06 <HAL_TIM_PWM_Start+0x136>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a1c      	ldr	r2, [pc, #112]	@ (8005b54 <HAL_TIM_PWM_Start+0x184>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d00e      	beq.n	8005b06 <HAL_TIM_PWM_Start+0x136>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a16      	ldr	r2, [pc, #88]	@ (8005b48 <HAL_TIM_PWM_Start+0x178>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d009      	beq.n	8005b06 <HAL_TIM_PWM_Start+0x136>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a18      	ldr	r2, [pc, #96]	@ (8005b58 <HAL_TIM_PWM_Start+0x188>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d004      	beq.n	8005b06 <HAL_TIM_PWM_Start+0x136>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a16      	ldr	r2, [pc, #88]	@ (8005b5c <HAL_TIM_PWM_Start+0x18c>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d111      	bne.n	8005b2a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	f003 0307 	and.w	r3, r3, #7
 8005b10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b06      	cmp	r3, #6
 8005b16:	d010      	beq.n	8005b3a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f042 0201 	orr.w	r2, r2, #1
 8005b26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b28:	e007      	b.n	8005b3a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f042 0201 	orr.w	r2, r2, #1
 8005b38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	40010000 	.word	0x40010000
 8005b48:	40010400 	.word	0x40010400
 8005b4c:	40000400 	.word	0x40000400
 8005b50:	40000800 	.word	0x40000800
 8005b54:	40000c00 	.word	0x40000c00
 8005b58:	40014000 	.word	0x40014000
 8005b5c:	40001800 	.word	0x40001800

08005b60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d101      	bne.n	8005b7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	e0ae      	b.n	8005cdc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b0c      	cmp	r3, #12
 8005b8a:	f200 809f 	bhi.w	8005ccc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b94:	08005bc9 	.word	0x08005bc9
 8005b98:	08005ccd 	.word	0x08005ccd
 8005b9c:	08005ccd 	.word	0x08005ccd
 8005ba0:	08005ccd 	.word	0x08005ccd
 8005ba4:	08005c09 	.word	0x08005c09
 8005ba8:	08005ccd 	.word	0x08005ccd
 8005bac:	08005ccd 	.word	0x08005ccd
 8005bb0:	08005ccd 	.word	0x08005ccd
 8005bb4:	08005c4b 	.word	0x08005c4b
 8005bb8:	08005ccd 	.word	0x08005ccd
 8005bbc:	08005ccd 	.word	0x08005ccd
 8005bc0:	08005ccd 	.word	0x08005ccd
 8005bc4:	08005c8b 	.word	0x08005c8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68b9      	ldr	r1, [r7, #8]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 f934 	bl	8005e3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0208 	orr.w	r2, r2, #8
 8005be2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	699a      	ldr	r2, [r3, #24]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f022 0204 	bic.w	r2, r2, #4
 8005bf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6999      	ldr	r1, [r3, #24]
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	691a      	ldr	r2, [r3, #16]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	430a      	orrs	r2, r1
 8005c04:	619a      	str	r2, [r3, #24]
      break;
 8005c06:	e064      	b.n	8005cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68b9      	ldr	r1, [r7, #8]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 f984 	bl	8005f1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699a      	ldr	r2, [r3, #24]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6999      	ldr	r1, [r3, #24]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	021a      	lsls	r2, r3, #8
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	430a      	orrs	r2, r1
 8005c46:	619a      	str	r2, [r3, #24]
      break;
 8005c48:	e043      	b.n	8005cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f000 f9d9 	bl	8006008 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69da      	ldr	r2, [r3, #28]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f042 0208 	orr.w	r2, r2, #8
 8005c64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69da      	ldr	r2, [r3, #28]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f022 0204 	bic.w	r2, r2, #4
 8005c74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69d9      	ldr	r1, [r3, #28]
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	691a      	ldr	r2, [r3, #16]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	430a      	orrs	r2, r1
 8005c86:	61da      	str	r2, [r3, #28]
      break;
 8005c88:	e023      	b.n	8005cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68b9      	ldr	r1, [r7, #8]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 fa2d 	bl	80060f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69da      	ldr	r2, [r3, #28]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ca4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	69da      	ldr	r2, [r3, #28]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69d9      	ldr	r1, [r3, #28]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	021a      	lsls	r2, r3, #8
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	61da      	str	r2, [r3, #28]
      break;
 8005cca:	e002      	b.n	8005cd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	75fb      	strb	r3, [r7, #23]
      break;
 8005cd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a46      	ldr	r2, [pc, #280]	@ (8005e10 <TIM_Base_SetConfig+0x12c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d013      	beq.n	8005d24 <TIM_Base_SetConfig+0x40>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d02:	d00f      	beq.n	8005d24 <TIM_Base_SetConfig+0x40>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a43      	ldr	r2, [pc, #268]	@ (8005e14 <TIM_Base_SetConfig+0x130>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d00b      	beq.n	8005d24 <TIM_Base_SetConfig+0x40>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a42      	ldr	r2, [pc, #264]	@ (8005e18 <TIM_Base_SetConfig+0x134>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d007      	beq.n	8005d24 <TIM_Base_SetConfig+0x40>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a41      	ldr	r2, [pc, #260]	@ (8005e1c <TIM_Base_SetConfig+0x138>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d003      	beq.n	8005d24 <TIM_Base_SetConfig+0x40>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a40      	ldr	r2, [pc, #256]	@ (8005e20 <TIM_Base_SetConfig+0x13c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d108      	bne.n	8005d36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a35      	ldr	r2, [pc, #212]	@ (8005e10 <TIM_Base_SetConfig+0x12c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d02b      	beq.n	8005d96 <TIM_Base_SetConfig+0xb2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d44:	d027      	beq.n	8005d96 <TIM_Base_SetConfig+0xb2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a32      	ldr	r2, [pc, #200]	@ (8005e14 <TIM_Base_SetConfig+0x130>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d023      	beq.n	8005d96 <TIM_Base_SetConfig+0xb2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a31      	ldr	r2, [pc, #196]	@ (8005e18 <TIM_Base_SetConfig+0x134>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d01f      	beq.n	8005d96 <TIM_Base_SetConfig+0xb2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a30      	ldr	r2, [pc, #192]	@ (8005e1c <TIM_Base_SetConfig+0x138>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d01b      	beq.n	8005d96 <TIM_Base_SetConfig+0xb2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a2f      	ldr	r2, [pc, #188]	@ (8005e20 <TIM_Base_SetConfig+0x13c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d017      	beq.n	8005d96 <TIM_Base_SetConfig+0xb2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a2e      	ldr	r2, [pc, #184]	@ (8005e24 <TIM_Base_SetConfig+0x140>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d013      	beq.n	8005d96 <TIM_Base_SetConfig+0xb2>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a2d      	ldr	r2, [pc, #180]	@ (8005e28 <TIM_Base_SetConfig+0x144>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d00f      	beq.n	8005d96 <TIM_Base_SetConfig+0xb2>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a2c      	ldr	r2, [pc, #176]	@ (8005e2c <TIM_Base_SetConfig+0x148>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d00b      	beq.n	8005d96 <TIM_Base_SetConfig+0xb2>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a2b      	ldr	r2, [pc, #172]	@ (8005e30 <TIM_Base_SetConfig+0x14c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d007      	beq.n	8005d96 <TIM_Base_SetConfig+0xb2>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a2a      	ldr	r2, [pc, #168]	@ (8005e34 <TIM_Base_SetConfig+0x150>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d003      	beq.n	8005d96 <TIM_Base_SetConfig+0xb2>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a29      	ldr	r2, [pc, #164]	@ (8005e38 <TIM_Base_SetConfig+0x154>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d108      	bne.n	8005da8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a10      	ldr	r2, [pc, #64]	@ (8005e10 <TIM_Base_SetConfig+0x12c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d003      	beq.n	8005ddc <TIM_Base_SetConfig+0xf8>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a12      	ldr	r2, [pc, #72]	@ (8005e20 <TIM_Base_SetConfig+0x13c>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d103      	bne.n	8005de4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	691a      	ldr	r2, [r3, #16]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d105      	bne.n	8005e02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f023 0201 	bic.w	r2, r3, #1
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	611a      	str	r2, [r3, #16]
  }
}
 8005e02:	bf00      	nop
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	40010000 	.word	0x40010000
 8005e14:	40000400 	.word	0x40000400
 8005e18:	40000800 	.word	0x40000800
 8005e1c:	40000c00 	.word	0x40000c00
 8005e20:	40010400 	.word	0x40010400
 8005e24:	40014000 	.word	0x40014000
 8005e28:	40014400 	.word	0x40014400
 8005e2c:	40014800 	.word	0x40014800
 8005e30:	40001800 	.word	0x40001800
 8005e34:	40001c00 	.word	0x40001c00
 8005e38:	40002000 	.word	0x40002000

08005e3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	f023 0201 	bic.w	r2, r3, #1
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	699b      	ldr	r3, [r3, #24]
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f023 0303 	bic.w	r3, r3, #3
 8005e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f023 0302 	bic.w	r3, r3, #2
 8005e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	4a20      	ldr	r2, [pc, #128]	@ (8005f14 <TIM_OC1_SetConfig+0xd8>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d003      	beq.n	8005ea0 <TIM_OC1_SetConfig+0x64>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a1f      	ldr	r2, [pc, #124]	@ (8005f18 <TIM_OC1_SetConfig+0xdc>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d10c      	bne.n	8005eba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	f023 0308 	bic.w	r3, r3, #8
 8005ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	697a      	ldr	r2, [r7, #20]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f023 0304 	bic.w	r3, r3, #4
 8005eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a15      	ldr	r2, [pc, #84]	@ (8005f14 <TIM_OC1_SetConfig+0xd8>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d003      	beq.n	8005eca <TIM_OC1_SetConfig+0x8e>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a14      	ldr	r2, [pc, #80]	@ (8005f18 <TIM_OC1_SetConfig+0xdc>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d111      	bne.n	8005eee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	621a      	str	r2, [r3, #32]
}
 8005f08:	bf00      	nop
 8005f0a:	371c      	adds	r7, #28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	40010000 	.word	0x40010000
 8005f18:	40010400 	.word	0x40010400

08005f1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b087      	sub	sp, #28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	f023 0210 	bic.w	r2, r3, #16
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	699b      	ldr	r3, [r3, #24]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	021b      	lsls	r3, r3, #8
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	f023 0320 	bic.w	r3, r3, #32
 8005f66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	689b      	ldr	r3, [r3, #8]
 8005f6c:	011b      	lsls	r3, r3, #4
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	4313      	orrs	r3, r2
 8005f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	4a22      	ldr	r2, [pc, #136]	@ (8006000 <TIM_OC2_SetConfig+0xe4>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d003      	beq.n	8005f84 <TIM_OC2_SetConfig+0x68>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a21      	ldr	r2, [pc, #132]	@ (8006004 <TIM_OC2_SetConfig+0xe8>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d10d      	bne.n	8005fa0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f84:	697b      	ldr	r3, [r7, #20]
 8005f86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	011b      	lsls	r3, r3, #4
 8005f92:	697a      	ldr	r2, [r7, #20]
 8005f94:	4313      	orrs	r3, r2
 8005f96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	4a17      	ldr	r2, [pc, #92]	@ (8006000 <TIM_OC2_SetConfig+0xe4>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d003      	beq.n	8005fb0 <TIM_OC2_SetConfig+0x94>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	4a16      	ldr	r2, [pc, #88]	@ (8006004 <TIM_OC2_SetConfig+0xe8>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d113      	bne.n	8005fd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005fb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fb8:	693b      	ldr	r3, [r7, #16]
 8005fba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	695b      	ldr	r3, [r3, #20]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	693a      	ldr	r2, [r7, #16]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	621a      	str	r2, [r3, #32]
}
 8005ff2:	bf00      	nop
 8005ff4:	371c      	adds	r7, #28
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop
 8006000:	40010000 	.word	0x40010000
 8006004:	40010400 	.word	0x40010400

08006008 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006008:	b480      	push	{r7}
 800600a:	b087      	sub	sp, #28
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a1b      	ldr	r3, [r3, #32]
 800601c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	69db      	ldr	r3, [r3, #28]
 800602e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f023 0303 	bic.w	r3, r3, #3
 800603e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4313      	orrs	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	021b      	lsls	r3, r3, #8
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	4313      	orrs	r3, r2
 800605c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a21      	ldr	r2, [pc, #132]	@ (80060e8 <TIM_OC3_SetConfig+0xe0>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d003      	beq.n	800606e <TIM_OC3_SetConfig+0x66>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a20      	ldr	r2, [pc, #128]	@ (80060ec <TIM_OC3_SetConfig+0xe4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d10d      	bne.n	800608a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006074:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	68db      	ldr	r3, [r3, #12]
 800607a:	021b      	lsls	r3, r3, #8
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	4313      	orrs	r3, r2
 8006080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a16      	ldr	r2, [pc, #88]	@ (80060e8 <TIM_OC3_SetConfig+0xe0>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d003      	beq.n	800609a <TIM_OC3_SetConfig+0x92>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a15      	ldr	r2, [pc, #84]	@ (80060ec <TIM_OC3_SetConfig+0xe4>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d113      	bne.n	80060c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80060a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	011b      	lsls	r3, r3, #4
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	011b      	lsls	r3, r3, #4
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	4313      	orrs	r3, r2
 80060c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	621a      	str	r2, [r3, #32]
}
 80060dc:	bf00      	nop
 80060de:	371c      	adds	r7, #28
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr
 80060e8:	40010000 	.word	0x40010000
 80060ec:	40010400 	.word	0x40010400

080060f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b087      	sub	sp, #28
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a1b      	ldr	r3, [r3, #32]
 80060fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800611e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	021b      	lsls	r3, r3, #8
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	4313      	orrs	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800613a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	031b      	lsls	r3, r3, #12
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	4313      	orrs	r3, r2
 8006146:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a12      	ldr	r2, [pc, #72]	@ (8006194 <TIM_OC4_SetConfig+0xa4>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d003      	beq.n	8006158 <TIM_OC4_SetConfig+0x68>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a11      	ldr	r2, [pc, #68]	@ (8006198 <TIM_OC4_SetConfig+0xa8>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d109      	bne.n	800616c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800615e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	019b      	lsls	r3, r3, #6
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	4313      	orrs	r3, r2
 800616a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	621a      	str	r2, [r3, #32]
}
 8006186:	bf00      	nop
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	40010000 	.word	0x40010000
 8006198:	40010400 	.word	0x40010400

0800619c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	f003 031f 	and.w	r3, r3, #31
 80061ae:	2201      	movs	r2, #1
 80061b0:	fa02 f303 	lsl.w	r3, r2, r3
 80061b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6a1a      	ldr	r2, [r3, #32]
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	43db      	mvns	r3, r3
 80061be:	401a      	ands	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a1a      	ldr	r2, [r3, #32]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	f003 031f 	and.w	r3, r3, #31
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	fa01 f303 	lsl.w	r3, r1, r3
 80061d4:	431a      	orrs	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	621a      	str	r2, [r3, #32]
}
 80061da:	bf00      	nop
 80061dc:	371c      	adds	r7, #28
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
	...

080061e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d101      	bne.n	8006200 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80061fc:	2302      	movs	r3, #2
 80061fe:	e05a      	b.n	80062b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006226:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	4313      	orrs	r3, r2
 8006230:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a21      	ldr	r2, [pc, #132]	@ (80062c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d022      	beq.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800624c:	d01d      	beq.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a1d      	ldr	r2, [pc, #116]	@ (80062c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d018      	beq.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a1b      	ldr	r2, [pc, #108]	@ (80062cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d013      	beq.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a1a      	ldr	r2, [pc, #104]	@ (80062d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d00e      	beq.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a18      	ldr	r2, [pc, #96]	@ (80062d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d009      	beq.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a17      	ldr	r2, [pc, #92]	@ (80062d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d004      	beq.n	800628a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a15      	ldr	r2, [pc, #84]	@ (80062dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d10c      	bne.n	80062a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006290:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	4313      	orrs	r3, r2
 800629a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3714      	adds	r7, #20
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr
 80062c2:	bf00      	nop
 80062c4:	40010000 	.word	0x40010000
 80062c8:	40000400 	.word	0x40000400
 80062cc:	40000800 	.word	0x40000800
 80062d0:	40000c00 	.word	0x40000c00
 80062d4:	40010400 	.word	0x40010400
 80062d8:	40014000 	.word	0x40014000
 80062dc:	40001800 	.word	0x40001800

080062e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d101      	bne.n	80062f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ee:	2301      	movs	r3, #1
 80062f0:	e042      	b.n	8006378 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d106      	bne.n	800630c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f7fc fd86 	bl	8002e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2224      	movs	r2, #36	@ 0x24
 8006310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68da      	ldr	r2, [r3, #12]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006322:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f000 f973 	bl	8006610 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	691a      	ldr	r2, [r3, #16]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006338:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	695a      	ldr	r2, [r3, #20]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006348:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68da      	ldr	r2, [r3, #12]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006358:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2220      	movs	r2, #32
 8006364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2220      	movs	r2, #32
 800636c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006376:	2300      	movs	r3, #0
}
 8006378:	4618      	mov	r0, r3
 800637a:	3708      	adds	r7, #8
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b08a      	sub	sp, #40	@ 0x28
 8006384:	af02      	add	r7, sp, #8
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	4613      	mov	r3, r2
 800638e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006390:	2300      	movs	r3, #0
 8006392:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b20      	cmp	r3, #32
 800639e:	d175      	bne.n	800648c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d002      	beq.n	80063ac <HAL_UART_Transmit+0x2c>
 80063a6:	88fb      	ldrh	r3, [r7, #6]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d101      	bne.n	80063b0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	e06e      	b.n	800648e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2221      	movs	r2, #33	@ 0x21
 80063ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063be:	f7fc fe7d 	bl	80030bc <HAL_GetTick>
 80063c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	88fa      	ldrh	r2, [r7, #6]
 80063c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	88fa      	ldrh	r2, [r7, #6]
 80063ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063d8:	d108      	bne.n	80063ec <HAL_UART_Transmit+0x6c>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d104      	bne.n	80063ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80063e2:	2300      	movs	r3, #0
 80063e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	61bb      	str	r3, [r7, #24]
 80063ea:	e003      	b.n	80063f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063f0:	2300      	movs	r3, #0
 80063f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063f4:	e02e      	b.n	8006454 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	9300      	str	r3, [sp, #0]
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2200      	movs	r2, #0
 80063fe:	2180      	movs	r1, #128	@ 0x80
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f000 f848 	bl	8006496 <UART_WaitOnFlagUntilTimeout>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d005      	beq.n	8006418 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	2220      	movs	r2, #32
 8006410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e03a      	b.n	800648e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10b      	bne.n	8006436 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	461a      	mov	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800642c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	3302      	adds	r3, #2
 8006432:	61bb      	str	r3, [r7, #24]
 8006434:	e007      	b.n	8006446 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	781a      	ldrb	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	3301      	adds	r3, #1
 8006444:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800644a:	b29b      	uxth	r3, r3
 800644c:	3b01      	subs	r3, #1
 800644e:	b29a      	uxth	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006458:	b29b      	uxth	r3, r3
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1cb      	bne.n	80063f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	9300      	str	r3, [sp, #0]
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	2200      	movs	r2, #0
 8006466:	2140      	movs	r1, #64	@ 0x40
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 f814 	bl	8006496 <UART_WaitOnFlagUntilTimeout>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d005      	beq.n	8006480 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2220      	movs	r2, #32
 8006478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	e006      	b.n	800648e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2220      	movs	r2, #32
 8006484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006488:	2300      	movs	r3, #0
 800648a:	e000      	b.n	800648e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800648c:	2302      	movs	r3, #2
  }
}
 800648e:	4618      	mov	r0, r3
 8006490:	3720      	adds	r7, #32
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b086      	sub	sp, #24
 800649a:	af00      	add	r7, sp, #0
 800649c:	60f8      	str	r0, [r7, #12]
 800649e:	60b9      	str	r1, [r7, #8]
 80064a0:	603b      	str	r3, [r7, #0]
 80064a2:	4613      	mov	r3, r2
 80064a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064a6:	e03b      	b.n	8006520 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064ae:	d037      	beq.n	8006520 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064b0:	f7fc fe04 	bl	80030bc <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	6a3a      	ldr	r2, [r7, #32]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d302      	bcc.n	80064c6 <UART_WaitOnFlagUntilTimeout+0x30>
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e03a      	b.n	8006540 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d023      	beq.n	8006520 <UART_WaitOnFlagUntilTimeout+0x8a>
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	2b80      	cmp	r3, #128	@ 0x80
 80064dc:	d020      	beq.n	8006520 <UART_WaitOnFlagUntilTimeout+0x8a>
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	2b40      	cmp	r3, #64	@ 0x40
 80064e2:	d01d      	beq.n	8006520 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f003 0308 	and.w	r3, r3, #8
 80064ee:	2b08      	cmp	r3, #8
 80064f0:	d116      	bne.n	8006520 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80064f2:	2300      	movs	r3, #0
 80064f4:	617b      	str	r3, [r7, #20]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	617b      	str	r3, [r7, #20]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	685b      	ldr	r3, [r3, #4]
 8006504:	617b      	str	r3, [r7, #20]
 8006506:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 f81d 	bl	8006548 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2208      	movs	r2, #8
 8006512:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e00f      	b.n	8006540 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	4013      	ands	r3, r2
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	429a      	cmp	r2, r3
 800652e:	bf0c      	ite	eq
 8006530:	2301      	moveq	r3, #1
 8006532:	2300      	movne	r3, #0
 8006534:	b2db      	uxtb	r3, r3
 8006536:	461a      	mov	r2, r3
 8006538:	79fb      	ldrb	r3, [r7, #7]
 800653a:	429a      	cmp	r2, r3
 800653c:	d0b4      	beq.n	80064a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800653e:	2300      	movs	r3, #0
}
 8006540:	4618      	mov	r0, r3
 8006542:	3718      	adds	r7, #24
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006548:	b480      	push	{r7}
 800654a:	b095      	sub	sp, #84	@ 0x54
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	330c      	adds	r3, #12
 8006556:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800655a:	e853 3f00 	ldrex	r3, [r3]
 800655e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006562:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006566:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	330c      	adds	r3, #12
 800656e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006570:	643a      	str	r2, [r7, #64]	@ 0x40
 8006572:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006574:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006576:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006578:	e841 2300 	strex	r3, r2, [r1]
 800657c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800657e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1e5      	bne.n	8006550 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3314      	adds	r3, #20
 800658a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	e853 3f00 	ldrex	r3, [r3]
 8006592:	61fb      	str	r3, [r7, #28]
   return(result);
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	f023 0301 	bic.w	r3, r3, #1
 800659a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3314      	adds	r3, #20
 80065a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065ac:	e841 2300 	strex	r3, r2, [r1]
 80065b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1e5      	bne.n	8006584 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d119      	bne.n	80065f4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	330c      	adds	r3, #12
 80065c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	e853 3f00 	ldrex	r3, [r3]
 80065ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	f023 0310 	bic.w	r3, r3, #16
 80065d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	330c      	adds	r3, #12
 80065de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065e0:	61ba      	str	r2, [r7, #24]
 80065e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e4:	6979      	ldr	r1, [r7, #20]
 80065e6:	69ba      	ldr	r2, [r7, #24]
 80065e8:	e841 2300 	strex	r3, r2, [r1]
 80065ec:	613b      	str	r3, [r7, #16]
   return(result);
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d1e5      	bne.n	80065c0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2220      	movs	r2, #32
 80065f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006602:	bf00      	nop
 8006604:	3754      	adds	r7, #84	@ 0x54
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
	...

08006610 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006614:	b0c0      	sub	sp, #256	@ 0x100
 8006616:	af00      	add	r7, sp, #0
 8006618:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800661c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800662c:	68d9      	ldr	r1, [r3, #12]
 800662e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	ea40 0301 	orr.w	r3, r0, r1
 8006638:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800663a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800663e:	689a      	ldr	r2, [r3, #8]
 8006640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	431a      	orrs	r2, r3
 8006648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	431a      	orrs	r2, r3
 8006650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	4313      	orrs	r3, r2
 8006658:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800665c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006668:	f021 010c 	bic.w	r1, r1, #12
 800666c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006676:	430b      	orrs	r3, r1
 8006678:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800667a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800668a:	6999      	ldr	r1, [r3, #24]
 800668c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	ea40 0301 	orr.w	r3, r0, r1
 8006696:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	4b8f      	ldr	r3, [pc, #572]	@ (80068dc <UART_SetConfig+0x2cc>)
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d005      	beq.n	80066b0 <UART_SetConfig+0xa0>
 80066a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	4b8d      	ldr	r3, [pc, #564]	@ (80068e0 <UART_SetConfig+0x2d0>)
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d104      	bne.n	80066ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066b0:	f7ff f92a 	bl	8005908 <HAL_RCC_GetPCLK2Freq>
 80066b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80066b8:	e003      	b.n	80066c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066ba:	f7ff f911 	bl	80058e0 <HAL_RCC_GetPCLK1Freq>
 80066be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066c6:	69db      	ldr	r3, [r3, #28]
 80066c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066cc:	f040 810c 	bne.w	80068e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066d4:	2200      	movs	r2, #0
 80066d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80066da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80066de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80066e2:	4622      	mov	r2, r4
 80066e4:	462b      	mov	r3, r5
 80066e6:	1891      	adds	r1, r2, r2
 80066e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80066ea:	415b      	adcs	r3, r3
 80066ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80066f2:	4621      	mov	r1, r4
 80066f4:	eb12 0801 	adds.w	r8, r2, r1
 80066f8:	4629      	mov	r1, r5
 80066fa:	eb43 0901 	adc.w	r9, r3, r1
 80066fe:	f04f 0200 	mov.w	r2, #0
 8006702:	f04f 0300 	mov.w	r3, #0
 8006706:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800670a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800670e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006712:	4690      	mov	r8, r2
 8006714:	4699      	mov	r9, r3
 8006716:	4623      	mov	r3, r4
 8006718:	eb18 0303 	adds.w	r3, r8, r3
 800671c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006720:	462b      	mov	r3, r5
 8006722:	eb49 0303 	adc.w	r3, r9, r3
 8006726:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800672a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006736:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800673a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800673e:	460b      	mov	r3, r1
 8006740:	18db      	adds	r3, r3, r3
 8006742:	653b      	str	r3, [r7, #80]	@ 0x50
 8006744:	4613      	mov	r3, r2
 8006746:	eb42 0303 	adc.w	r3, r2, r3
 800674a:	657b      	str	r3, [r7, #84]	@ 0x54
 800674c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006750:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006754:	f7fa fa52 	bl	8000bfc <__aeabi_uldivmod>
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	4b61      	ldr	r3, [pc, #388]	@ (80068e4 <UART_SetConfig+0x2d4>)
 800675e:	fba3 2302 	umull	r2, r3, r3, r2
 8006762:	095b      	lsrs	r3, r3, #5
 8006764:	011c      	lsls	r4, r3, #4
 8006766:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800676a:	2200      	movs	r2, #0
 800676c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006770:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006774:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006778:	4642      	mov	r2, r8
 800677a:	464b      	mov	r3, r9
 800677c:	1891      	adds	r1, r2, r2
 800677e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006780:	415b      	adcs	r3, r3
 8006782:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006784:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006788:	4641      	mov	r1, r8
 800678a:	eb12 0a01 	adds.w	sl, r2, r1
 800678e:	4649      	mov	r1, r9
 8006790:	eb43 0b01 	adc.w	fp, r3, r1
 8006794:	f04f 0200 	mov.w	r2, #0
 8006798:	f04f 0300 	mov.w	r3, #0
 800679c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067a8:	4692      	mov	sl, r2
 80067aa:	469b      	mov	fp, r3
 80067ac:	4643      	mov	r3, r8
 80067ae:	eb1a 0303 	adds.w	r3, sl, r3
 80067b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067b6:	464b      	mov	r3, r9
 80067b8:	eb4b 0303 	adc.w	r3, fp, r3
 80067bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80067c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80067d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80067d4:	460b      	mov	r3, r1
 80067d6:	18db      	adds	r3, r3, r3
 80067d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80067da:	4613      	mov	r3, r2
 80067dc:	eb42 0303 	adc.w	r3, r2, r3
 80067e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80067e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80067e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80067ea:	f7fa fa07 	bl	8000bfc <__aeabi_uldivmod>
 80067ee:	4602      	mov	r2, r0
 80067f0:	460b      	mov	r3, r1
 80067f2:	4611      	mov	r1, r2
 80067f4:	4b3b      	ldr	r3, [pc, #236]	@ (80068e4 <UART_SetConfig+0x2d4>)
 80067f6:	fba3 2301 	umull	r2, r3, r3, r1
 80067fa:	095b      	lsrs	r3, r3, #5
 80067fc:	2264      	movs	r2, #100	@ 0x64
 80067fe:	fb02 f303 	mul.w	r3, r2, r3
 8006802:	1acb      	subs	r3, r1, r3
 8006804:	00db      	lsls	r3, r3, #3
 8006806:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800680a:	4b36      	ldr	r3, [pc, #216]	@ (80068e4 <UART_SetConfig+0x2d4>)
 800680c:	fba3 2302 	umull	r2, r3, r3, r2
 8006810:	095b      	lsrs	r3, r3, #5
 8006812:	005b      	lsls	r3, r3, #1
 8006814:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006818:	441c      	add	r4, r3
 800681a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800681e:	2200      	movs	r2, #0
 8006820:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006824:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006828:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800682c:	4642      	mov	r2, r8
 800682e:	464b      	mov	r3, r9
 8006830:	1891      	adds	r1, r2, r2
 8006832:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006834:	415b      	adcs	r3, r3
 8006836:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006838:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800683c:	4641      	mov	r1, r8
 800683e:	1851      	adds	r1, r2, r1
 8006840:	6339      	str	r1, [r7, #48]	@ 0x30
 8006842:	4649      	mov	r1, r9
 8006844:	414b      	adcs	r3, r1
 8006846:	637b      	str	r3, [r7, #52]	@ 0x34
 8006848:	f04f 0200 	mov.w	r2, #0
 800684c:	f04f 0300 	mov.w	r3, #0
 8006850:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006854:	4659      	mov	r1, fp
 8006856:	00cb      	lsls	r3, r1, #3
 8006858:	4651      	mov	r1, sl
 800685a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800685e:	4651      	mov	r1, sl
 8006860:	00ca      	lsls	r2, r1, #3
 8006862:	4610      	mov	r0, r2
 8006864:	4619      	mov	r1, r3
 8006866:	4603      	mov	r3, r0
 8006868:	4642      	mov	r2, r8
 800686a:	189b      	adds	r3, r3, r2
 800686c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006870:	464b      	mov	r3, r9
 8006872:	460a      	mov	r2, r1
 8006874:	eb42 0303 	adc.w	r3, r2, r3
 8006878:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800687c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006888:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800688c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006890:	460b      	mov	r3, r1
 8006892:	18db      	adds	r3, r3, r3
 8006894:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006896:	4613      	mov	r3, r2
 8006898:	eb42 0303 	adc.w	r3, r2, r3
 800689c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800689e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80068a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80068a6:	f7fa f9a9 	bl	8000bfc <__aeabi_uldivmod>
 80068aa:	4602      	mov	r2, r0
 80068ac:	460b      	mov	r3, r1
 80068ae:	4b0d      	ldr	r3, [pc, #52]	@ (80068e4 <UART_SetConfig+0x2d4>)
 80068b0:	fba3 1302 	umull	r1, r3, r3, r2
 80068b4:	095b      	lsrs	r3, r3, #5
 80068b6:	2164      	movs	r1, #100	@ 0x64
 80068b8:	fb01 f303 	mul.w	r3, r1, r3
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	00db      	lsls	r3, r3, #3
 80068c0:	3332      	adds	r3, #50	@ 0x32
 80068c2:	4a08      	ldr	r2, [pc, #32]	@ (80068e4 <UART_SetConfig+0x2d4>)
 80068c4:	fba2 2303 	umull	r2, r3, r2, r3
 80068c8:	095b      	lsrs	r3, r3, #5
 80068ca:	f003 0207 	and.w	r2, r3, #7
 80068ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4422      	add	r2, r4
 80068d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068d8:	e106      	b.n	8006ae8 <UART_SetConfig+0x4d8>
 80068da:	bf00      	nop
 80068dc:	40011000 	.word	0x40011000
 80068e0:	40011400 	.word	0x40011400
 80068e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068ec:	2200      	movs	r2, #0
 80068ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80068f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80068f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80068fa:	4642      	mov	r2, r8
 80068fc:	464b      	mov	r3, r9
 80068fe:	1891      	adds	r1, r2, r2
 8006900:	6239      	str	r1, [r7, #32]
 8006902:	415b      	adcs	r3, r3
 8006904:	627b      	str	r3, [r7, #36]	@ 0x24
 8006906:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800690a:	4641      	mov	r1, r8
 800690c:	1854      	adds	r4, r2, r1
 800690e:	4649      	mov	r1, r9
 8006910:	eb43 0501 	adc.w	r5, r3, r1
 8006914:	f04f 0200 	mov.w	r2, #0
 8006918:	f04f 0300 	mov.w	r3, #0
 800691c:	00eb      	lsls	r3, r5, #3
 800691e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006922:	00e2      	lsls	r2, r4, #3
 8006924:	4614      	mov	r4, r2
 8006926:	461d      	mov	r5, r3
 8006928:	4643      	mov	r3, r8
 800692a:	18e3      	adds	r3, r4, r3
 800692c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006930:	464b      	mov	r3, r9
 8006932:	eb45 0303 	adc.w	r3, r5, r3
 8006936:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800693a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006946:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800694a:	f04f 0200 	mov.w	r2, #0
 800694e:	f04f 0300 	mov.w	r3, #0
 8006952:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006956:	4629      	mov	r1, r5
 8006958:	008b      	lsls	r3, r1, #2
 800695a:	4621      	mov	r1, r4
 800695c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006960:	4621      	mov	r1, r4
 8006962:	008a      	lsls	r2, r1, #2
 8006964:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006968:	f7fa f948 	bl	8000bfc <__aeabi_uldivmod>
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	4b60      	ldr	r3, [pc, #384]	@ (8006af4 <UART_SetConfig+0x4e4>)
 8006972:	fba3 2302 	umull	r2, r3, r3, r2
 8006976:	095b      	lsrs	r3, r3, #5
 8006978:	011c      	lsls	r4, r3, #4
 800697a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800697e:	2200      	movs	r2, #0
 8006980:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006984:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006988:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800698c:	4642      	mov	r2, r8
 800698e:	464b      	mov	r3, r9
 8006990:	1891      	adds	r1, r2, r2
 8006992:	61b9      	str	r1, [r7, #24]
 8006994:	415b      	adcs	r3, r3
 8006996:	61fb      	str	r3, [r7, #28]
 8006998:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800699c:	4641      	mov	r1, r8
 800699e:	1851      	adds	r1, r2, r1
 80069a0:	6139      	str	r1, [r7, #16]
 80069a2:	4649      	mov	r1, r9
 80069a4:	414b      	adcs	r3, r1
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	f04f 0200 	mov.w	r2, #0
 80069ac:	f04f 0300 	mov.w	r3, #0
 80069b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069b4:	4659      	mov	r1, fp
 80069b6:	00cb      	lsls	r3, r1, #3
 80069b8:	4651      	mov	r1, sl
 80069ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069be:	4651      	mov	r1, sl
 80069c0:	00ca      	lsls	r2, r1, #3
 80069c2:	4610      	mov	r0, r2
 80069c4:	4619      	mov	r1, r3
 80069c6:	4603      	mov	r3, r0
 80069c8:	4642      	mov	r2, r8
 80069ca:	189b      	adds	r3, r3, r2
 80069cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069d0:	464b      	mov	r3, r9
 80069d2:	460a      	mov	r2, r1
 80069d4:	eb42 0303 	adc.w	r3, r2, r3
 80069d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80069e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80069e8:	f04f 0200 	mov.w	r2, #0
 80069ec:	f04f 0300 	mov.w	r3, #0
 80069f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80069f4:	4649      	mov	r1, r9
 80069f6:	008b      	lsls	r3, r1, #2
 80069f8:	4641      	mov	r1, r8
 80069fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069fe:	4641      	mov	r1, r8
 8006a00:	008a      	lsls	r2, r1, #2
 8006a02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006a06:	f7fa f8f9 	bl	8000bfc <__aeabi_uldivmod>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	460b      	mov	r3, r1
 8006a0e:	4611      	mov	r1, r2
 8006a10:	4b38      	ldr	r3, [pc, #224]	@ (8006af4 <UART_SetConfig+0x4e4>)
 8006a12:	fba3 2301 	umull	r2, r3, r3, r1
 8006a16:	095b      	lsrs	r3, r3, #5
 8006a18:	2264      	movs	r2, #100	@ 0x64
 8006a1a:	fb02 f303 	mul.w	r3, r2, r3
 8006a1e:	1acb      	subs	r3, r1, r3
 8006a20:	011b      	lsls	r3, r3, #4
 8006a22:	3332      	adds	r3, #50	@ 0x32
 8006a24:	4a33      	ldr	r2, [pc, #204]	@ (8006af4 <UART_SetConfig+0x4e4>)
 8006a26:	fba2 2303 	umull	r2, r3, r2, r3
 8006a2a:	095b      	lsrs	r3, r3, #5
 8006a2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a30:	441c      	add	r4, r3
 8006a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a36:	2200      	movs	r2, #0
 8006a38:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006a3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006a40:	4642      	mov	r2, r8
 8006a42:	464b      	mov	r3, r9
 8006a44:	1891      	adds	r1, r2, r2
 8006a46:	60b9      	str	r1, [r7, #8]
 8006a48:	415b      	adcs	r3, r3
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a50:	4641      	mov	r1, r8
 8006a52:	1851      	adds	r1, r2, r1
 8006a54:	6039      	str	r1, [r7, #0]
 8006a56:	4649      	mov	r1, r9
 8006a58:	414b      	adcs	r3, r1
 8006a5a:	607b      	str	r3, [r7, #4]
 8006a5c:	f04f 0200 	mov.w	r2, #0
 8006a60:	f04f 0300 	mov.w	r3, #0
 8006a64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a68:	4659      	mov	r1, fp
 8006a6a:	00cb      	lsls	r3, r1, #3
 8006a6c:	4651      	mov	r1, sl
 8006a6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a72:	4651      	mov	r1, sl
 8006a74:	00ca      	lsls	r2, r1, #3
 8006a76:	4610      	mov	r0, r2
 8006a78:	4619      	mov	r1, r3
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	4642      	mov	r2, r8
 8006a7e:	189b      	adds	r3, r3, r2
 8006a80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a82:	464b      	mov	r3, r9
 8006a84:	460a      	mov	r2, r1
 8006a86:	eb42 0303 	adc.w	r3, r2, r3
 8006a8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a96:	667a      	str	r2, [r7, #100]	@ 0x64
 8006a98:	f04f 0200 	mov.w	r2, #0
 8006a9c:	f04f 0300 	mov.w	r3, #0
 8006aa0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006aa4:	4649      	mov	r1, r9
 8006aa6:	008b      	lsls	r3, r1, #2
 8006aa8:	4641      	mov	r1, r8
 8006aaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006aae:	4641      	mov	r1, r8
 8006ab0:	008a      	lsls	r2, r1, #2
 8006ab2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006ab6:	f7fa f8a1 	bl	8000bfc <__aeabi_uldivmod>
 8006aba:	4602      	mov	r2, r0
 8006abc:	460b      	mov	r3, r1
 8006abe:	4b0d      	ldr	r3, [pc, #52]	@ (8006af4 <UART_SetConfig+0x4e4>)
 8006ac0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ac4:	095b      	lsrs	r3, r3, #5
 8006ac6:	2164      	movs	r1, #100	@ 0x64
 8006ac8:	fb01 f303 	mul.w	r3, r1, r3
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	011b      	lsls	r3, r3, #4
 8006ad0:	3332      	adds	r3, #50	@ 0x32
 8006ad2:	4a08      	ldr	r2, [pc, #32]	@ (8006af4 <UART_SetConfig+0x4e4>)
 8006ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad8:	095b      	lsrs	r3, r3, #5
 8006ada:	f003 020f 	and.w	r2, r3, #15
 8006ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4422      	add	r2, r4
 8006ae6:	609a      	str	r2, [r3, #8]
}
 8006ae8:	bf00      	nop
 8006aea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006aee:	46bd      	mov	sp, r7
 8006af0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006af4:	51eb851f 	.word	0x51eb851f

08006af8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006af8:	b084      	sub	sp, #16
 8006afa:	b580      	push	{r7, lr}
 8006afc:	b084      	sub	sp, #16
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	f107 001c 	add.w	r0, r7, #28
 8006b06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b0a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d123      	bne.n	8006b5a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b16:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006b26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b3a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d105      	bne.n	8006b4e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 faa0 	bl	8007094 <USB_CoreReset>
 8006b54:	4603      	mov	r3, r0
 8006b56:	73fb      	strb	r3, [r7, #15]
 8006b58:	e01b      	b.n	8006b92 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fa94 	bl	8007094 <USB_CoreReset>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006b70:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d106      	bne.n	8006b86 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b7c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b84:	e005      	b.n	8006b92 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b8a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006b92:	7fbb      	ldrb	r3, [r7, #30]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d10b      	bne.n	8006bb0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f043 0206 	orr.w	r2, r3, #6
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	f043 0220 	orr.w	r2, r3, #32
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bbc:	b004      	add	sp, #16
 8006bbe:	4770      	bx	lr

08006bc0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f023 0201 	bic.w	r2, r3, #1
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	460b      	mov	r3, r1
 8006bec:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006bfe:	78fb      	ldrb	r3, [r7, #3]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d115      	bne.n	8006c30 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006c10:	200a      	movs	r0, #10
 8006c12:	f7fc fa5f 	bl	80030d4 <HAL_Delay>
      ms += 10U;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	330a      	adds	r3, #10
 8006c1a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fa2b 	bl	8007078 <USB_GetMode>
 8006c22:	4603      	mov	r3, r0
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d01e      	beq.n	8006c66 <USB_SetCurrentMode+0x84>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	2bc7      	cmp	r3, #199	@ 0xc7
 8006c2c:	d9f0      	bls.n	8006c10 <USB_SetCurrentMode+0x2e>
 8006c2e:	e01a      	b.n	8006c66 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c30:	78fb      	ldrb	r3, [r7, #3]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d115      	bne.n	8006c62 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68db      	ldr	r3, [r3, #12]
 8006c3a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006c42:	200a      	movs	r0, #10
 8006c44:	f7fc fa46 	bl	80030d4 <HAL_Delay>
      ms += 10U;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	330a      	adds	r3, #10
 8006c4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 fa12 	bl	8007078 <USB_GetMode>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d005      	beq.n	8006c66 <USB_SetCurrentMode+0x84>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2bc7      	cmp	r3, #199	@ 0xc7
 8006c5e:	d9f0      	bls.n	8006c42 <USB_SetCurrentMode+0x60>
 8006c60:	e001      	b.n	8006c66 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e005      	b.n	8006c72 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2bc8      	cmp	r3, #200	@ 0xc8
 8006c6a:	d101      	bne.n	8006c70 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e000      	b.n	8006c72 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3710      	adds	r7, #16
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
	...

08006c7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c7c:	b084      	sub	sp, #16
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b086      	sub	sp, #24
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006c8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c8e:	2300      	movs	r3, #0
 8006c90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c96:	2300      	movs	r3, #0
 8006c98:	613b      	str	r3, [r7, #16]
 8006c9a:	e009      	b.n	8006cb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	3340      	adds	r3, #64	@ 0x40
 8006ca2:	009b      	lsls	r3, r3, #2
 8006ca4:	4413      	add	r3, r2
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	3301      	adds	r3, #1
 8006cae:	613b      	str	r3, [r7, #16]
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	2b0e      	cmp	r3, #14
 8006cb4:	d9f2      	bls.n	8006c9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006cb6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d11c      	bne.n	8006cf8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ccc:	f043 0302 	orr.w	r3, r3, #2
 8006cd0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cd6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cee:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	639a      	str	r2, [r3, #56]	@ 0x38
 8006cf6:	e00b      	b.n	8006d10 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d08:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006d16:	461a      	mov	r2, r3
 8006d18:	2300      	movs	r3, #0
 8006d1a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d1c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d10d      	bne.n	8006d40 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d104      	bne.n	8006d36 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f968 	bl	8007004 <USB_SetDevSpeed>
 8006d34:	e008      	b.n	8006d48 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d36:	2101      	movs	r1, #1
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f963 	bl	8007004 <USB_SetDevSpeed>
 8006d3e:	e003      	b.n	8006d48 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d40:	2103      	movs	r1, #3
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f95e 	bl	8007004 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d48:	2110      	movs	r1, #16
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f8fa 	bl	8006f44 <USB_FlushTxFifo>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f924 	bl	8006fa8 <USB_FlushRxFifo>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d70:	461a      	mov	r2, r3
 8006d72:	2300      	movs	r3, #0
 8006d74:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	2300      	movs	r3, #0
 8006d80:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d88:	461a      	mov	r2, r3
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d8e:	2300      	movs	r3, #0
 8006d90:	613b      	str	r3, [r7, #16]
 8006d92:	e043      	b.n	8006e1c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	015a      	lsls	r2, r3, #5
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006da6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006daa:	d118      	bne.n	8006dde <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10a      	bne.n	8006dc8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	015a      	lsls	r2, r3, #5
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	4413      	add	r3, r2
 8006dba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006dc4:	6013      	str	r3, [r2, #0]
 8006dc6:	e013      	b.n	8006df0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	015a      	lsls	r2, r3, #5
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	4413      	add	r3, r2
 8006dd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006dda:	6013      	str	r3, [r2, #0]
 8006ddc:	e008      	b.n	8006df0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dea:	461a      	mov	r2, r3
 8006dec:	2300      	movs	r3, #0
 8006dee:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	2300      	movs	r3, #0
 8006e00:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e0e:	461a      	mov	r2, r3
 8006e10:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006e14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	613b      	str	r3, [r7, #16]
 8006e1c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006e20:	461a      	mov	r2, r3
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d3b5      	bcc.n	8006d94 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e28:	2300      	movs	r3, #0
 8006e2a:	613b      	str	r3, [r7, #16]
 8006e2c:	e043      	b.n	8006eb6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e2e:	693b      	ldr	r3, [r7, #16]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e44:	d118      	bne.n	8006e78 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10a      	bne.n	8006e62 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	015a      	lsls	r2, r3, #5
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4413      	add	r3, r2
 8006e54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e58:	461a      	mov	r2, r3
 8006e5a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006e5e:	6013      	str	r3, [r2, #0]
 8006e60:	e013      	b.n	8006e8a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	015a      	lsls	r2, r3, #5
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	4413      	add	r3, r2
 8006e6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e6e:	461a      	mov	r2, r3
 8006e70:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	e008      	b.n	8006e8a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e84:	461a      	mov	r2, r3
 8006e86:	2300      	movs	r3, #0
 8006e88:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e96:	461a      	mov	r2, r3
 8006e98:	2300      	movs	r3, #0
 8006e9a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	015a      	lsls	r2, r3, #5
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006eae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	613b      	str	r3, [r7, #16]
 8006eb6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006eba:	461a      	mov	r2, r3
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d3b5      	bcc.n	8006e2e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	68fa      	ldr	r2, [r7, #12]
 8006ecc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ed0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006ed4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2200      	movs	r2, #0
 8006eda:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006ee2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ee4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d105      	bne.n	8006ef8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	699b      	ldr	r3, [r3, #24]
 8006ef0:	f043 0210 	orr.w	r2, r3, #16
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	699a      	ldr	r2, [r3, #24]
 8006efc:	4b10      	ldr	r3, [pc, #64]	@ (8006f40 <USB_DevInit+0x2c4>)
 8006efe:	4313      	orrs	r3, r2
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006f04:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d005      	beq.n	8006f18 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	699b      	ldr	r3, [r3, #24]
 8006f10:	f043 0208 	orr.w	r2, r3, #8
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006f18:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d107      	bne.n	8006f30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f28:	f043 0304 	orr.w	r3, r3, #4
 8006f2c:	687a      	ldr	r2, [r7, #4]
 8006f2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3718      	adds	r7, #24
 8006f36:	46bd      	mov	sp, r7
 8006f38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f3c:	b004      	add	sp, #16
 8006f3e:	4770      	bx	lr
 8006f40:	803c3800 	.word	0x803c3800

08006f44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	3301      	adds	r3, #1
 8006f56:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f5e:	d901      	bls.n	8006f64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e01b      	b.n	8006f9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	691b      	ldr	r3, [r3, #16]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	daf2      	bge.n	8006f52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	019b      	lsls	r3, r3, #6
 8006f74:	f043 0220 	orr.w	r2, r3, #32
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	3301      	adds	r3, #1
 8006f80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f88:	d901      	bls.n	8006f8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e006      	b.n	8006f9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	f003 0320 	and.w	r3, r3, #32
 8006f96:	2b20      	cmp	r3, #32
 8006f98:	d0f0      	beq.n	8006f7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f9a:	2300      	movs	r3, #0
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b085      	sub	sp, #20
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fc0:	d901      	bls.n	8006fc6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006fc2:	2303      	movs	r3, #3
 8006fc4:	e018      	b.n	8006ff8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	daf2      	bge.n	8006fb4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2210      	movs	r2, #16
 8006fd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fe4:	d901      	bls.n	8006fea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e006      	b.n	8006ff8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	f003 0310 	and.w	r3, r3, #16
 8006ff2:	2b10      	cmp	r3, #16
 8006ff4:	d0f0      	beq.n	8006fd8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006ff6:	2300      	movs	r3, #0
}
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007004:	b480      	push	{r7}
 8007006:	b085      	sub	sp, #20
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
 800700c:	460b      	mov	r3, r1
 800700e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	78fb      	ldrb	r3, [r7, #3]
 800701e:	68f9      	ldr	r1, [r7, #12]
 8007020:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007024:	4313      	orrs	r3, r2
 8007026:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007028:	2300      	movs	r3, #0
}
 800702a:	4618      	mov	r0, r3
 800702c:	3714      	adds	r7, #20
 800702e:	46bd      	mov	sp, r7
 8007030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007034:	4770      	bx	lr

08007036 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007036:	b480      	push	{r7}
 8007038:	b085      	sub	sp, #20
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007050:	f023 0303 	bic.w	r3, r3, #3
 8007054:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007064:	f043 0302 	orr.w	r3, r3, #2
 8007068:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	695b      	ldr	r3, [r3, #20]
 8007084:	f003 0301 	and.w	r3, r3, #1
}
 8007088:	4618      	mov	r0, r3
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007094:	b480      	push	{r7}
 8007096:	b085      	sub	sp, #20
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800709c:	2300      	movs	r3, #0
 800709e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	3301      	adds	r3, #1
 80070a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070ac:	d901      	bls.n	80070b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e01b      	b.n	80070ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	daf2      	bge.n	80070a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	f043 0201 	orr.w	r2, r3, #1
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	3301      	adds	r3, #1
 80070ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070d6:	d901      	bls.n	80070dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80070d8:	2303      	movs	r3, #3
 80070da:	e006      	b.n	80070ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	691b      	ldr	r3, [r3, #16]
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d0f0      	beq.n	80070ca <USB_CoreReset+0x36>

  return HAL_OK;
 80070e8:	2300      	movs	r3, #0
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <__cvt>:
 80070f6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070fa:	ec57 6b10 	vmov	r6, r7, d0
 80070fe:	2f00      	cmp	r7, #0
 8007100:	460c      	mov	r4, r1
 8007102:	4619      	mov	r1, r3
 8007104:	463b      	mov	r3, r7
 8007106:	bfbb      	ittet	lt
 8007108:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800710c:	461f      	movlt	r7, r3
 800710e:	2300      	movge	r3, #0
 8007110:	232d      	movlt	r3, #45	@ 0x2d
 8007112:	700b      	strb	r3, [r1, #0]
 8007114:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007116:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800711a:	4691      	mov	r9, r2
 800711c:	f023 0820 	bic.w	r8, r3, #32
 8007120:	bfbc      	itt	lt
 8007122:	4632      	movlt	r2, r6
 8007124:	4616      	movlt	r6, r2
 8007126:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800712a:	d005      	beq.n	8007138 <__cvt+0x42>
 800712c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007130:	d100      	bne.n	8007134 <__cvt+0x3e>
 8007132:	3401      	adds	r4, #1
 8007134:	2102      	movs	r1, #2
 8007136:	e000      	b.n	800713a <__cvt+0x44>
 8007138:	2103      	movs	r1, #3
 800713a:	ab03      	add	r3, sp, #12
 800713c:	9301      	str	r3, [sp, #4]
 800713e:	ab02      	add	r3, sp, #8
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	ec47 6b10 	vmov	d0, r6, r7
 8007146:	4653      	mov	r3, sl
 8007148:	4622      	mov	r2, r4
 800714a:	f000 fdf1 	bl	8007d30 <_dtoa_r>
 800714e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007152:	4605      	mov	r5, r0
 8007154:	d119      	bne.n	800718a <__cvt+0x94>
 8007156:	f019 0f01 	tst.w	r9, #1
 800715a:	d00e      	beq.n	800717a <__cvt+0x84>
 800715c:	eb00 0904 	add.w	r9, r0, r4
 8007160:	2200      	movs	r2, #0
 8007162:	2300      	movs	r3, #0
 8007164:	4630      	mov	r0, r6
 8007166:	4639      	mov	r1, r7
 8007168:	f7f9 fcb8 	bl	8000adc <__aeabi_dcmpeq>
 800716c:	b108      	cbz	r0, 8007172 <__cvt+0x7c>
 800716e:	f8cd 900c 	str.w	r9, [sp, #12]
 8007172:	2230      	movs	r2, #48	@ 0x30
 8007174:	9b03      	ldr	r3, [sp, #12]
 8007176:	454b      	cmp	r3, r9
 8007178:	d31e      	bcc.n	80071b8 <__cvt+0xc2>
 800717a:	9b03      	ldr	r3, [sp, #12]
 800717c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800717e:	1b5b      	subs	r3, r3, r5
 8007180:	4628      	mov	r0, r5
 8007182:	6013      	str	r3, [r2, #0]
 8007184:	b004      	add	sp, #16
 8007186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800718a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800718e:	eb00 0904 	add.w	r9, r0, r4
 8007192:	d1e5      	bne.n	8007160 <__cvt+0x6a>
 8007194:	7803      	ldrb	r3, [r0, #0]
 8007196:	2b30      	cmp	r3, #48	@ 0x30
 8007198:	d10a      	bne.n	80071b0 <__cvt+0xba>
 800719a:	2200      	movs	r2, #0
 800719c:	2300      	movs	r3, #0
 800719e:	4630      	mov	r0, r6
 80071a0:	4639      	mov	r1, r7
 80071a2:	f7f9 fc9b 	bl	8000adc <__aeabi_dcmpeq>
 80071a6:	b918      	cbnz	r0, 80071b0 <__cvt+0xba>
 80071a8:	f1c4 0401 	rsb	r4, r4, #1
 80071ac:	f8ca 4000 	str.w	r4, [sl]
 80071b0:	f8da 3000 	ldr.w	r3, [sl]
 80071b4:	4499      	add	r9, r3
 80071b6:	e7d3      	b.n	8007160 <__cvt+0x6a>
 80071b8:	1c59      	adds	r1, r3, #1
 80071ba:	9103      	str	r1, [sp, #12]
 80071bc:	701a      	strb	r2, [r3, #0]
 80071be:	e7d9      	b.n	8007174 <__cvt+0x7e>

080071c0 <__exponent>:
 80071c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071c2:	2900      	cmp	r1, #0
 80071c4:	bfba      	itte	lt
 80071c6:	4249      	neglt	r1, r1
 80071c8:	232d      	movlt	r3, #45	@ 0x2d
 80071ca:	232b      	movge	r3, #43	@ 0x2b
 80071cc:	2909      	cmp	r1, #9
 80071ce:	7002      	strb	r2, [r0, #0]
 80071d0:	7043      	strb	r3, [r0, #1]
 80071d2:	dd29      	ble.n	8007228 <__exponent+0x68>
 80071d4:	f10d 0307 	add.w	r3, sp, #7
 80071d8:	461d      	mov	r5, r3
 80071da:	270a      	movs	r7, #10
 80071dc:	461a      	mov	r2, r3
 80071de:	fbb1 f6f7 	udiv	r6, r1, r7
 80071e2:	fb07 1416 	mls	r4, r7, r6, r1
 80071e6:	3430      	adds	r4, #48	@ 0x30
 80071e8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80071ec:	460c      	mov	r4, r1
 80071ee:	2c63      	cmp	r4, #99	@ 0x63
 80071f0:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80071f4:	4631      	mov	r1, r6
 80071f6:	dcf1      	bgt.n	80071dc <__exponent+0x1c>
 80071f8:	3130      	adds	r1, #48	@ 0x30
 80071fa:	1e94      	subs	r4, r2, #2
 80071fc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007200:	1c41      	adds	r1, r0, #1
 8007202:	4623      	mov	r3, r4
 8007204:	42ab      	cmp	r3, r5
 8007206:	d30a      	bcc.n	800721e <__exponent+0x5e>
 8007208:	f10d 0309 	add.w	r3, sp, #9
 800720c:	1a9b      	subs	r3, r3, r2
 800720e:	42ac      	cmp	r4, r5
 8007210:	bf88      	it	hi
 8007212:	2300      	movhi	r3, #0
 8007214:	3302      	adds	r3, #2
 8007216:	4403      	add	r3, r0
 8007218:	1a18      	subs	r0, r3, r0
 800721a:	b003      	add	sp, #12
 800721c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800721e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007222:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007226:	e7ed      	b.n	8007204 <__exponent+0x44>
 8007228:	2330      	movs	r3, #48	@ 0x30
 800722a:	3130      	adds	r1, #48	@ 0x30
 800722c:	7083      	strb	r3, [r0, #2]
 800722e:	70c1      	strb	r1, [r0, #3]
 8007230:	1d03      	adds	r3, r0, #4
 8007232:	e7f1      	b.n	8007218 <__exponent+0x58>

08007234 <_printf_float>:
 8007234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007238:	b08d      	sub	sp, #52	@ 0x34
 800723a:	460c      	mov	r4, r1
 800723c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007240:	4616      	mov	r6, r2
 8007242:	461f      	mov	r7, r3
 8007244:	4605      	mov	r5, r0
 8007246:	f000 fcab 	bl	8007ba0 <_localeconv_r>
 800724a:	6803      	ldr	r3, [r0, #0]
 800724c:	9304      	str	r3, [sp, #16]
 800724e:	4618      	mov	r0, r3
 8007250:	f7f9 f80e 	bl	8000270 <strlen>
 8007254:	2300      	movs	r3, #0
 8007256:	930a      	str	r3, [sp, #40]	@ 0x28
 8007258:	f8d8 3000 	ldr.w	r3, [r8]
 800725c:	9005      	str	r0, [sp, #20]
 800725e:	3307      	adds	r3, #7
 8007260:	f023 0307 	bic.w	r3, r3, #7
 8007264:	f103 0208 	add.w	r2, r3, #8
 8007268:	f894 a018 	ldrb.w	sl, [r4, #24]
 800726c:	f8d4 b000 	ldr.w	fp, [r4]
 8007270:	f8c8 2000 	str.w	r2, [r8]
 8007274:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007278:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800727c:	9307      	str	r3, [sp, #28]
 800727e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007282:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007286:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800728a:	4b9c      	ldr	r3, [pc, #624]	@ (80074fc <_printf_float+0x2c8>)
 800728c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007290:	f7f9 fc56 	bl	8000b40 <__aeabi_dcmpun>
 8007294:	bb70      	cbnz	r0, 80072f4 <_printf_float+0xc0>
 8007296:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800729a:	4b98      	ldr	r3, [pc, #608]	@ (80074fc <_printf_float+0x2c8>)
 800729c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80072a0:	f7f9 fc30 	bl	8000b04 <__aeabi_dcmple>
 80072a4:	bb30      	cbnz	r0, 80072f4 <_printf_float+0xc0>
 80072a6:	2200      	movs	r2, #0
 80072a8:	2300      	movs	r3, #0
 80072aa:	4640      	mov	r0, r8
 80072ac:	4649      	mov	r1, r9
 80072ae:	f7f9 fc1f 	bl	8000af0 <__aeabi_dcmplt>
 80072b2:	b110      	cbz	r0, 80072ba <_printf_float+0x86>
 80072b4:	232d      	movs	r3, #45	@ 0x2d
 80072b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80072ba:	4a91      	ldr	r2, [pc, #580]	@ (8007500 <_printf_float+0x2cc>)
 80072bc:	4b91      	ldr	r3, [pc, #580]	@ (8007504 <_printf_float+0x2d0>)
 80072be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80072c2:	bf94      	ite	ls
 80072c4:	4690      	movls	r8, r2
 80072c6:	4698      	movhi	r8, r3
 80072c8:	2303      	movs	r3, #3
 80072ca:	6123      	str	r3, [r4, #16]
 80072cc:	f02b 0304 	bic.w	r3, fp, #4
 80072d0:	6023      	str	r3, [r4, #0]
 80072d2:	f04f 0900 	mov.w	r9, #0
 80072d6:	9700      	str	r7, [sp, #0]
 80072d8:	4633      	mov	r3, r6
 80072da:	aa0b      	add	r2, sp, #44	@ 0x2c
 80072dc:	4621      	mov	r1, r4
 80072de:	4628      	mov	r0, r5
 80072e0:	f000 f9d2 	bl	8007688 <_printf_common>
 80072e4:	3001      	adds	r0, #1
 80072e6:	f040 808d 	bne.w	8007404 <_printf_float+0x1d0>
 80072ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072ee:	b00d      	add	sp, #52	@ 0x34
 80072f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f4:	4642      	mov	r2, r8
 80072f6:	464b      	mov	r3, r9
 80072f8:	4640      	mov	r0, r8
 80072fa:	4649      	mov	r1, r9
 80072fc:	f7f9 fc20 	bl	8000b40 <__aeabi_dcmpun>
 8007300:	b140      	cbz	r0, 8007314 <_printf_float+0xe0>
 8007302:	464b      	mov	r3, r9
 8007304:	2b00      	cmp	r3, #0
 8007306:	bfbc      	itt	lt
 8007308:	232d      	movlt	r3, #45	@ 0x2d
 800730a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800730e:	4a7e      	ldr	r2, [pc, #504]	@ (8007508 <_printf_float+0x2d4>)
 8007310:	4b7e      	ldr	r3, [pc, #504]	@ (800750c <_printf_float+0x2d8>)
 8007312:	e7d4      	b.n	80072be <_printf_float+0x8a>
 8007314:	6863      	ldr	r3, [r4, #4]
 8007316:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800731a:	9206      	str	r2, [sp, #24]
 800731c:	1c5a      	adds	r2, r3, #1
 800731e:	d13b      	bne.n	8007398 <_printf_float+0x164>
 8007320:	2306      	movs	r3, #6
 8007322:	6063      	str	r3, [r4, #4]
 8007324:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007328:	2300      	movs	r3, #0
 800732a:	6022      	str	r2, [r4, #0]
 800732c:	9303      	str	r3, [sp, #12]
 800732e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007330:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007334:	ab09      	add	r3, sp, #36	@ 0x24
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	6861      	ldr	r1, [r4, #4]
 800733a:	ec49 8b10 	vmov	d0, r8, r9
 800733e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007342:	4628      	mov	r0, r5
 8007344:	f7ff fed7 	bl	80070f6 <__cvt>
 8007348:	9b06      	ldr	r3, [sp, #24]
 800734a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800734c:	2b47      	cmp	r3, #71	@ 0x47
 800734e:	4680      	mov	r8, r0
 8007350:	d129      	bne.n	80073a6 <_printf_float+0x172>
 8007352:	1cc8      	adds	r0, r1, #3
 8007354:	db02      	blt.n	800735c <_printf_float+0x128>
 8007356:	6863      	ldr	r3, [r4, #4]
 8007358:	4299      	cmp	r1, r3
 800735a:	dd41      	ble.n	80073e0 <_printf_float+0x1ac>
 800735c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007360:	fa5f fa8a 	uxtb.w	sl, sl
 8007364:	3901      	subs	r1, #1
 8007366:	4652      	mov	r2, sl
 8007368:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800736c:	9109      	str	r1, [sp, #36]	@ 0x24
 800736e:	f7ff ff27 	bl	80071c0 <__exponent>
 8007372:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007374:	1813      	adds	r3, r2, r0
 8007376:	2a01      	cmp	r2, #1
 8007378:	4681      	mov	r9, r0
 800737a:	6123      	str	r3, [r4, #16]
 800737c:	dc02      	bgt.n	8007384 <_printf_float+0x150>
 800737e:	6822      	ldr	r2, [r4, #0]
 8007380:	07d2      	lsls	r2, r2, #31
 8007382:	d501      	bpl.n	8007388 <_printf_float+0x154>
 8007384:	3301      	adds	r3, #1
 8007386:	6123      	str	r3, [r4, #16]
 8007388:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800738c:	2b00      	cmp	r3, #0
 800738e:	d0a2      	beq.n	80072d6 <_printf_float+0xa2>
 8007390:	232d      	movs	r3, #45	@ 0x2d
 8007392:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007396:	e79e      	b.n	80072d6 <_printf_float+0xa2>
 8007398:	9a06      	ldr	r2, [sp, #24]
 800739a:	2a47      	cmp	r2, #71	@ 0x47
 800739c:	d1c2      	bne.n	8007324 <_printf_float+0xf0>
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d1c0      	bne.n	8007324 <_printf_float+0xf0>
 80073a2:	2301      	movs	r3, #1
 80073a4:	e7bd      	b.n	8007322 <_printf_float+0xee>
 80073a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80073aa:	d9db      	bls.n	8007364 <_printf_float+0x130>
 80073ac:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80073b0:	d118      	bne.n	80073e4 <_printf_float+0x1b0>
 80073b2:	2900      	cmp	r1, #0
 80073b4:	6863      	ldr	r3, [r4, #4]
 80073b6:	dd0b      	ble.n	80073d0 <_printf_float+0x19c>
 80073b8:	6121      	str	r1, [r4, #16]
 80073ba:	b913      	cbnz	r3, 80073c2 <_printf_float+0x18e>
 80073bc:	6822      	ldr	r2, [r4, #0]
 80073be:	07d0      	lsls	r0, r2, #31
 80073c0:	d502      	bpl.n	80073c8 <_printf_float+0x194>
 80073c2:	3301      	adds	r3, #1
 80073c4:	440b      	add	r3, r1
 80073c6:	6123      	str	r3, [r4, #16]
 80073c8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80073ca:	f04f 0900 	mov.w	r9, #0
 80073ce:	e7db      	b.n	8007388 <_printf_float+0x154>
 80073d0:	b913      	cbnz	r3, 80073d8 <_printf_float+0x1a4>
 80073d2:	6822      	ldr	r2, [r4, #0]
 80073d4:	07d2      	lsls	r2, r2, #31
 80073d6:	d501      	bpl.n	80073dc <_printf_float+0x1a8>
 80073d8:	3302      	adds	r3, #2
 80073da:	e7f4      	b.n	80073c6 <_printf_float+0x192>
 80073dc:	2301      	movs	r3, #1
 80073de:	e7f2      	b.n	80073c6 <_printf_float+0x192>
 80073e0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80073e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80073e6:	4299      	cmp	r1, r3
 80073e8:	db05      	blt.n	80073f6 <_printf_float+0x1c2>
 80073ea:	6823      	ldr	r3, [r4, #0]
 80073ec:	6121      	str	r1, [r4, #16]
 80073ee:	07d8      	lsls	r0, r3, #31
 80073f0:	d5ea      	bpl.n	80073c8 <_printf_float+0x194>
 80073f2:	1c4b      	adds	r3, r1, #1
 80073f4:	e7e7      	b.n	80073c6 <_printf_float+0x192>
 80073f6:	2900      	cmp	r1, #0
 80073f8:	bfd4      	ite	le
 80073fa:	f1c1 0202 	rsble	r2, r1, #2
 80073fe:	2201      	movgt	r2, #1
 8007400:	4413      	add	r3, r2
 8007402:	e7e0      	b.n	80073c6 <_printf_float+0x192>
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	055a      	lsls	r2, r3, #21
 8007408:	d407      	bmi.n	800741a <_printf_float+0x1e6>
 800740a:	6923      	ldr	r3, [r4, #16]
 800740c:	4642      	mov	r2, r8
 800740e:	4631      	mov	r1, r6
 8007410:	4628      	mov	r0, r5
 8007412:	47b8      	blx	r7
 8007414:	3001      	adds	r0, #1
 8007416:	d12b      	bne.n	8007470 <_printf_float+0x23c>
 8007418:	e767      	b.n	80072ea <_printf_float+0xb6>
 800741a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800741e:	f240 80dd 	bls.w	80075dc <_printf_float+0x3a8>
 8007422:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007426:	2200      	movs	r2, #0
 8007428:	2300      	movs	r3, #0
 800742a:	f7f9 fb57 	bl	8000adc <__aeabi_dcmpeq>
 800742e:	2800      	cmp	r0, #0
 8007430:	d033      	beq.n	800749a <_printf_float+0x266>
 8007432:	4a37      	ldr	r2, [pc, #220]	@ (8007510 <_printf_float+0x2dc>)
 8007434:	2301      	movs	r3, #1
 8007436:	4631      	mov	r1, r6
 8007438:	4628      	mov	r0, r5
 800743a:	47b8      	blx	r7
 800743c:	3001      	adds	r0, #1
 800743e:	f43f af54 	beq.w	80072ea <_printf_float+0xb6>
 8007442:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007446:	4543      	cmp	r3, r8
 8007448:	db02      	blt.n	8007450 <_printf_float+0x21c>
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	07d8      	lsls	r0, r3, #31
 800744e:	d50f      	bpl.n	8007470 <_printf_float+0x23c>
 8007450:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007454:	4631      	mov	r1, r6
 8007456:	4628      	mov	r0, r5
 8007458:	47b8      	blx	r7
 800745a:	3001      	adds	r0, #1
 800745c:	f43f af45 	beq.w	80072ea <_printf_float+0xb6>
 8007460:	f04f 0900 	mov.w	r9, #0
 8007464:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007468:	f104 0a1a 	add.w	sl, r4, #26
 800746c:	45c8      	cmp	r8, r9
 800746e:	dc09      	bgt.n	8007484 <_printf_float+0x250>
 8007470:	6823      	ldr	r3, [r4, #0]
 8007472:	079b      	lsls	r3, r3, #30
 8007474:	f100 8103 	bmi.w	800767e <_printf_float+0x44a>
 8007478:	68e0      	ldr	r0, [r4, #12]
 800747a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800747c:	4298      	cmp	r0, r3
 800747e:	bfb8      	it	lt
 8007480:	4618      	movlt	r0, r3
 8007482:	e734      	b.n	80072ee <_printf_float+0xba>
 8007484:	2301      	movs	r3, #1
 8007486:	4652      	mov	r2, sl
 8007488:	4631      	mov	r1, r6
 800748a:	4628      	mov	r0, r5
 800748c:	47b8      	blx	r7
 800748e:	3001      	adds	r0, #1
 8007490:	f43f af2b 	beq.w	80072ea <_printf_float+0xb6>
 8007494:	f109 0901 	add.w	r9, r9, #1
 8007498:	e7e8      	b.n	800746c <_printf_float+0x238>
 800749a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800749c:	2b00      	cmp	r3, #0
 800749e:	dc39      	bgt.n	8007514 <_printf_float+0x2e0>
 80074a0:	4a1b      	ldr	r2, [pc, #108]	@ (8007510 <_printf_float+0x2dc>)
 80074a2:	2301      	movs	r3, #1
 80074a4:	4631      	mov	r1, r6
 80074a6:	4628      	mov	r0, r5
 80074a8:	47b8      	blx	r7
 80074aa:	3001      	adds	r0, #1
 80074ac:	f43f af1d 	beq.w	80072ea <_printf_float+0xb6>
 80074b0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80074b4:	ea59 0303 	orrs.w	r3, r9, r3
 80074b8:	d102      	bne.n	80074c0 <_printf_float+0x28c>
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	07d9      	lsls	r1, r3, #31
 80074be:	d5d7      	bpl.n	8007470 <_printf_float+0x23c>
 80074c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074c4:	4631      	mov	r1, r6
 80074c6:	4628      	mov	r0, r5
 80074c8:	47b8      	blx	r7
 80074ca:	3001      	adds	r0, #1
 80074cc:	f43f af0d 	beq.w	80072ea <_printf_float+0xb6>
 80074d0:	f04f 0a00 	mov.w	sl, #0
 80074d4:	f104 0b1a 	add.w	fp, r4, #26
 80074d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074da:	425b      	negs	r3, r3
 80074dc:	4553      	cmp	r3, sl
 80074de:	dc01      	bgt.n	80074e4 <_printf_float+0x2b0>
 80074e0:	464b      	mov	r3, r9
 80074e2:	e793      	b.n	800740c <_printf_float+0x1d8>
 80074e4:	2301      	movs	r3, #1
 80074e6:	465a      	mov	r2, fp
 80074e8:	4631      	mov	r1, r6
 80074ea:	4628      	mov	r0, r5
 80074ec:	47b8      	blx	r7
 80074ee:	3001      	adds	r0, #1
 80074f0:	f43f aefb 	beq.w	80072ea <_printf_float+0xb6>
 80074f4:	f10a 0a01 	add.w	sl, sl, #1
 80074f8:	e7ee      	b.n	80074d8 <_printf_float+0x2a4>
 80074fa:	bf00      	nop
 80074fc:	7fefffff 	.word	0x7fefffff
 8007500:	0800a170 	.word	0x0800a170
 8007504:	0800a174 	.word	0x0800a174
 8007508:	0800a178 	.word	0x0800a178
 800750c:	0800a17c 	.word	0x0800a17c
 8007510:	0800a180 	.word	0x0800a180
 8007514:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007516:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800751a:	4553      	cmp	r3, sl
 800751c:	bfa8      	it	ge
 800751e:	4653      	movge	r3, sl
 8007520:	2b00      	cmp	r3, #0
 8007522:	4699      	mov	r9, r3
 8007524:	dc36      	bgt.n	8007594 <_printf_float+0x360>
 8007526:	f04f 0b00 	mov.w	fp, #0
 800752a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800752e:	f104 021a 	add.w	r2, r4, #26
 8007532:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007534:	9306      	str	r3, [sp, #24]
 8007536:	eba3 0309 	sub.w	r3, r3, r9
 800753a:	455b      	cmp	r3, fp
 800753c:	dc31      	bgt.n	80075a2 <_printf_float+0x36e>
 800753e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007540:	459a      	cmp	sl, r3
 8007542:	dc3a      	bgt.n	80075ba <_printf_float+0x386>
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	07da      	lsls	r2, r3, #31
 8007548:	d437      	bmi.n	80075ba <_printf_float+0x386>
 800754a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800754c:	ebaa 0903 	sub.w	r9, sl, r3
 8007550:	9b06      	ldr	r3, [sp, #24]
 8007552:	ebaa 0303 	sub.w	r3, sl, r3
 8007556:	4599      	cmp	r9, r3
 8007558:	bfa8      	it	ge
 800755a:	4699      	movge	r9, r3
 800755c:	f1b9 0f00 	cmp.w	r9, #0
 8007560:	dc33      	bgt.n	80075ca <_printf_float+0x396>
 8007562:	f04f 0800 	mov.w	r8, #0
 8007566:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800756a:	f104 0b1a 	add.w	fp, r4, #26
 800756e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007570:	ebaa 0303 	sub.w	r3, sl, r3
 8007574:	eba3 0309 	sub.w	r3, r3, r9
 8007578:	4543      	cmp	r3, r8
 800757a:	f77f af79 	ble.w	8007470 <_printf_float+0x23c>
 800757e:	2301      	movs	r3, #1
 8007580:	465a      	mov	r2, fp
 8007582:	4631      	mov	r1, r6
 8007584:	4628      	mov	r0, r5
 8007586:	47b8      	blx	r7
 8007588:	3001      	adds	r0, #1
 800758a:	f43f aeae 	beq.w	80072ea <_printf_float+0xb6>
 800758e:	f108 0801 	add.w	r8, r8, #1
 8007592:	e7ec      	b.n	800756e <_printf_float+0x33a>
 8007594:	4642      	mov	r2, r8
 8007596:	4631      	mov	r1, r6
 8007598:	4628      	mov	r0, r5
 800759a:	47b8      	blx	r7
 800759c:	3001      	adds	r0, #1
 800759e:	d1c2      	bne.n	8007526 <_printf_float+0x2f2>
 80075a0:	e6a3      	b.n	80072ea <_printf_float+0xb6>
 80075a2:	2301      	movs	r3, #1
 80075a4:	4631      	mov	r1, r6
 80075a6:	4628      	mov	r0, r5
 80075a8:	9206      	str	r2, [sp, #24]
 80075aa:	47b8      	blx	r7
 80075ac:	3001      	adds	r0, #1
 80075ae:	f43f ae9c 	beq.w	80072ea <_printf_float+0xb6>
 80075b2:	9a06      	ldr	r2, [sp, #24]
 80075b4:	f10b 0b01 	add.w	fp, fp, #1
 80075b8:	e7bb      	b.n	8007532 <_printf_float+0x2fe>
 80075ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075be:	4631      	mov	r1, r6
 80075c0:	4628      	mov	r0, r5
 80075c2:	47b8      	blx	r7
 80075c4:	3001      	adds	r0, #1
 80075c6:	d1c0      	bne.n	800754a <_printf_float+0x316>
 80075c8:	e68f      	b.n	80072ea <_printf_float+0xb6>
 80075ca:	9a06      	ldr	r2, [sp, #24]
 80075cc:	464b      	mov	r3, r9
 80075ce:	4442      	add	r2, r8
 80075d0:	4631      	mov	r1, r6
 80075d2:	4628      	mov	r0, r5
 80075d4:	47b8      	blx	r7
 80075d6:	3001      	adds	r0, #1
 80075d8:	d1c3      	bne.n	8007562 <_printf_float+0x32e>
 80075da:	e686      	b.n	80072ea <_printf_float+0xb6>
 80075dc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80075e0:	f1ba 0f01 	cmp.w	sl, #1
 80075e4:	dc01      	bgt.n	80075ea <_printf_float+0x3b6>
 80075e6:	07db      	lsls	r3, r3, #31
 80075e8:	d536      	bpl.n	8007658 <_printf_float+0x424>
 80075ea:	2301      	movs	r3, #1
 80075ec:	4642      	mov	r2, r8
 80075ee:	4631      	mov	r1, r6
 80075f0:	4628      	mov	r0, r5
 80075f2:	47b8      	blx	r7
 80075f4:	3001      	adds	r0, #1
 80075f6:	f43f ae78 	beq.w	80072ea <_printf_float+0xb6>
 80075fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075fe:	4631      	mov	r1, r6
 8007600:	4628      	mov	r0, r5
 8007602:	47b8      	blx	r7
 8007604:	3001      	adds	r0, #1
 8007606:	f43f ae70 	beq.w	80072ea <_printf_float+0xb6>
 800760a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800760e:	2200      	movs	r2, #0
 8007610:	2300      	movs	r3, #0
 8007612:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007616:	f7f9 fa61 	bl	8000adc <__aeabi_dcmpeq>
 800761a:	b9c0      	cbnz	r0, 800764e <_printf_float+0x41a>
 800761c:	4653      	mov	r3, sl
 800761e:	f108 0201 	add.w	r2, r8, #1
 8007622:	4631      	mov	r1, r6
 8007624:	4628      	mov	r0, r5
 8007626:	47b8      	blx	r7
 8007628:	3001      	adds	r0, #1
 800762a:	d10c      	bne.n	8007646 <_printf_float+0x412>
 800762c:	e65d      	b.n	80072ea <_printf_float+0xb6>
 800762e:	2301      	movs	r3, #1
 8007630:	465a      	mov	r2, fp
 8007632:	4631      	mov	r1, r6
 8007634:	4628      	mov	r0, r5
 8007636:	47b8      	blx	r7
 8007638:	3001      	adds	r0, #1
 800763a:	f43f ae56 	beq.w	80072ea <_printf_float+0xb6>
 800763e:	f108 0801 	add.w	r8, r8, #1
 8007642:	45d0      	cmp	r8, sl
 8007644:	dbf3      	blt.n	800762e <_printf_float+0x3fa>
 8007646:	464b      	mov	r3, r9
 8007648:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800764c:	e6df      	b.n	800740e <_printf_float+0x1da>
 800764e:	f04f 0800 	mov.w	r8, #0
 8007652:	f104 0b1a 	add.w	fp, r4, #26
 8007656:	e7f4      	b.n	8007642 <_printf_float+0x40e>
 8007658:	2301      	movs	r3, #1
 800765a:	4642      	mov	r2, r8
 800765c:	e7e1      	b.n	8007622 <_printf_float+0x3ee>
 800765e:	2301      	movs	r3, #1
 8007660:	464a      	mov	r2, r9
 8007662:	4631      	mov	r1, r6
 8007664:	4628      	mov	r0, r5
 8007666:	47b8      	blx	r7
 8007668:	3001      	adds	r0, #1
 800766a:	f43f ae3e 	beq.w	80072ea <_printf_float+0xb6>
 800766e:	f108 0801 	add.w	r8, r8, #1
 8007672:	68e3      	ldr	r3, [r4, #12]
 8007674:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007676:	1a5b      	subs	r3, r3, r1
 8007678:	4543      	cmp	r3, r8
 800767a:	dcf0      	bgt.n	800765e <_printf_float+0x42a>
 800767c:	e6fc      	b.n	8007478 <_printf_float+0x244>
 800767e:	f04f 0800 	mov.w	r8, #0
 8007682:	f104 0919 	add.w	r9, r4, #25
 8007686:	e7f4      	b.n	8007672 <_printf_float+0x43e>

08007688 <_printf_common>:
 8007688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800768c:	4616      	mov	r6, r2
 800768e:	4698      	mov	r8, r3
 8007690:	688a      	ldr	r2, [r1, #8]
 8007692:	690b      	ldr	r3, [r1, #16]
 8007694:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007698:	4293      	cmp	r3, r2
 800769a:	bfb8      	it	lt
 800769c:	4613      	movlt	r3, r2
 800769e:	6033      	str	r3, [r6, #0]
 80076a0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80076a4:	4607      	mov	r7, r0
 80076a6:	460c      	mov	r4, r1
 80076a8:	b10a      	cbz	r2, 80076ae <_printf_common+0x26>
 80076aa:	3301      	adds	r3, #1
 80076ac:	6033      	str	r3, [r6, #0]
 80076ae:	6823      	ldr	r3, [r4, #0]
 80076b0:	0699      	lsls	r1, r3, #26
 80076b2:	bf42      	ittt	mi
 80076b4:	6833      	ldrmi	r3, [r6, #0]
 80076b6:	3302      	addmi	r3, #2
 80076b8:	6033      	strmi	r3, [r6, #0]
 80076ba:	6825      	ldr	r5, [r4, #0]
 80076bc:	f015 0506 	ands.w	r5, r5, #6
 80076c0:	d106      	bne.n	80076d0 <_printf_common+0x48>
 80076c2:	f104 0a19 	add.w	sl, r4, #25
 80076c6:	68e3      	ldr	r3, [r4, #12]
 80076c8:	6832      	ldr	r2, [r6, #0]
 80076ca:	1a9b      	subs	r3, r3, r2
 80076cc:	42ab      	cmp	r3, r5
 80076ce:	dc26      	bgt.n	800771e <_printf_common+0x96>
 80076d0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80076d4:	6822      	ldr	r2, [r4, #0]
 80076d6:	3b00      	subs	r3, #0
 80076d8:	bf18      	it	ne
 80076da:	2301      	movne	r3, #1
 80076dc:	0692      	lsls	r2, r2, #26
 80076de:	d42b      	bmi.n	8007738 <_printf_common+0xb0>
 80076e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80076e4:	4641      	mov	r1, r8
 80076e6:	4638      	mov	r0, r7
 80076e8:	47c8      	blx	r9
 80076ea:	3001      	adds	r0, #1
 80076ec:	d01e      	beq.n	800772c <_printf_common+0xa4>
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	6922      	ldr	r2, [r4, #16]
 80076f2:	f003 0306 	and.w	r3, r3, #6
 80076f6:	2b04      	cmp	r3, #4
 80076f8:	bf02      	ittt	eq
 80076fa:	68e5      	ldreq	r5, [r4, #12]
 80076fc:	6833      	ldreq	r3, [r6, #0]
 80076fe:	1aed      	subeq	r5, r5, r3
 8007700:	68a3      	ldr	r3, [r4, #8]
 8007702:	bf0c      	ite	eq
 8007704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007708:	2500      	movne	r5, #0
 800770a:	4293      	cmp	r3, r2
 800770c:	bfc4      	itt	gt
 800770e:	1a9b      	subgt	r3, r3, r2
 8007710:	18ed      	addgt	r5, r5, r3
 8007712:	2600      	movs	r6, #0
 8007714:	341a      	adds	r4, #26
 8007716:	42b5      	cmp	r5, r6
 8007718:	d11a      	bne.n	8007750 <_printf_common+0xc8>
 800771a:	2000      	movs	r0, #0
 800771c:	e008      	b.n	8007730 <_printf_common+0xa8>
 800771e:	2301      	movs	r3, #1
 8007720:	4652      	mov	r2, sl
 8007722:	4641      	mov	r1, r8
 8007724:	4638      	mov	r0, r7
 8007726:	47c8      	blx	r9
 8007728:	3001      	adds	r0, #1
 800772a:	d103      	bne.n	8007734 <_printf_common+0xac>
 800772c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007734:	3501      	adds	r5, #1
 8007736:	e7c6      	b.n	80076c6 <_printf_common+0x3e>
 8007738:	18e1      	adds	r1, r4, r3
 800773a:	1c5a      	adds	r2, r3, #1
 800773c:	2030      	movs	r0, #48	@ 0x30
 800773e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007742:	4422      	add	r2, r4
 8007744:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007748:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800774c:	3302      	adds	r3, #2
 800774e:	e7c7      	b.n	80076e0 <_printf_common+0x58>
 8007750:	2301      	movs	r3, #1
 8007752:	4622      	mov	r2, r4
 8007754:	4641      	mov	r1, r8
 8007756:	4638      	mov	r0, r7
 8007758:	47c8      	blx	r9
 800775a:	3001      	adds	r0, #1
 800775c:	d0e6      	beq.n	800772c <_printf_common+0xa4>
 800775e:	3601      	adds	r6, #1
 8007760:	e7d9      	b.n	8007716 <_printf_common+0x8e>
	...

08007764 <_printf_i>:
 8007764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007768:	7e0f      	ldrb	r7, [r1, #24]
 800776a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800776c:	2f78      	cmp	r7, #120	@ 0x78
 800776e:	4691      	mov	r9, r2
 8007770:	4680      	mov	r8, r0
 8007772:	460c      	mov	r4, r1
 8007774:	469a      	mov	sl, r3
 8007776:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800777a:	d807      	bhi.n	800778c <_printf_i+0x28>
 800777c:	2f62      	cmp	r7, #98	@ 0x62
 800777e:	d80a      	bhi.n	8007796 <_printf_i+0x32>
 8007780:	2f00      	cmp	r7, #0
 8007782:	f000 80d2 	beq.w	800792a <_printf_i+0x1c6>
 8007786:	2f58      	cmp	r7, #88	@ 0x58
 8007788:	f000 80b9 	beq.w	80078fe <_printf_i+0x19a>
 800778c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007790:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007794:	e03a      	b.n	800780c <_printf_i+0xa8>
 8007796:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800779a:	2b15      	cmp	r3, #21
 800779c:	d8f6      	bhi.n	800778c <_printf_i+0x28>
 800779e:	a101      	add	r1, pc, #4	@ (adr r1, 80077a4 <_printf_i+0x40>)
 80077a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077a4:	080077fd 	.word	0x080077fd
 80077a8:	08007811 	.word	0x08007811
 80077ac:	0800778d 	.word	0x0800778d
 80077b0:	0800778d 	.word	0x0800778d
 80077b4:	0800778d 	.word	0x0800778d
 80077b8:	0800778d 	.word	0x0800778d
 80077bc:	08007811 	.word	0x08007811
 80077c0:	0800778d 	.word	0x0800778d
 80077c4:	0800778d 	.word	0x0800778d
 80077c8:	0800778d 	.word	0x0800778d
 80077cc:	0800778d 	.word	0x0800778d
 80077d0:	08007911 	.word	0x08007911
 80077d4:	0800783b 	.word	0x0800783b
 80077d8:	080078cb 	.word	0x080078cb
 80077dc:	0800778d 	.word	0x0800778d
 80077e0:	0800778d 	.word	0x0800778d
 80077e4:	08007933 	.word	0x08007933
 80077e8:	0800778d 	.word	0x0800778d
 80077ec:	0800783b 	.word	0x0800783b
 80077f0:	0800778d 	.word	0x0800778d
 80077f4:	0800778d 	.word	0x0800778d
 80077f8:	080078d3 	.word	0x080078d3
 80077fc:	6833      	ldr	r3, [r6, #0]
 80077fe:	1d1a      	adds	r2, r3, #4
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6032      	str	r2, [r6, #0]
 8007804:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007808:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800780c:	2301      	movs	r3, #1
 800780e:	e09d      	b.n	800794c <_printf_i+0x1e8>
 8007810:	6833      	ldr	r3, [r6, #0]
 8007812:	6820      	ldr	r0, [r4, #0]
 8007814:	1d19      	adds	r1, r3, #4
 8007816:	6031      	str	r1, [r6, #0]
 8007818:	0606      	lsls	r6, r0, #24
 800781a:	d501      	bpl.n	8007820 <_printf_i+0xbc>
 800781c:	681d      	ldr	r5, [r3, #0]
 800781e:	e003      	b.n	8007828 <_printf_i+0xc4>
 8007820:	0645      	lsls	r5, r0, #25
 8007822:	d5fb      	bpl.n	800781c <_printf_i+0xb8>
 8007824:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007828:	2d00      	cmp	r5, #0
 800782a:	da03      	bge.n	8007834 <_printf_i+0xd0>
 800782c:	232d      	movs	r3, #45	@ 0x2d
 800782e:	426d      	negs	r5, r5
 8007830:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007834:	4859      	ldr	r0, [pc, #356]	@ (800799c <_printf_i+0x238>)
 8007836:	230a      	movs	r3, #10
 8007838:	e011      	b.n	800785e <_printf_i+0xfa>
 800783a:	6821      	ldr	r1, [r4, #0]
 800783c:	6833      	ldr	r3, [r6, #0]
 800783e:	0608      	lsls	r0, r1, #24
 8007840:	f853 5b04 	ldr.w	r5, [r3], #4
 8007844:	d402      	bmi.n	800784c <_printf_i+0xe8>
 8007846:	0649      	lsls	r1, r1, #25
 8007848:	bf48      	it	mi
 800784a:	b2ad      	uxthmi	r5, r5
 800784c:	2f6f      	cmp	r7, #111	@ 0x6f
 800784e:	4853      	ldr	r0, [pc, #332]	@ (800799c <_printf_i+0x238>)
 8007850:	6033      	str	r3, [r6, #0]
 8007852:	bf14      	ite	ne
 8007854:	230a      	movne	r3, #10
 8007856:	2308      	moveq	r3, #8
 8007858:	2100      	movs	r1, #0
 800785a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800785e:	6866      	ldr	r6, [r4, #4]
 8007860:	60a6      	str	r6, [r4, #8]
 8007862:	2e00      	cmp	r6, #0
 8007864:	bfa2      	ittt	ge
 8007866:	6821      	ldrge	r1, [r4, #0]
 8007868:	f021 0104 	bicge.w	r1, r1, #4
 800786c:	6021      	strge	r1, [r4, #0]
 800786e:	b90d      	cbnz	r5, 8007874 <_printf_i+0x110>
 8007870:	2e00      	cmp	r6, #0
 8007872:	d04b      	beq.n	800790c <_printf_i+0x1a8>
 8007874:	4616      	mov	r6, r2
 8007876:	fbb5 f1f3 	udiv	r1, r5, r3
 800787a:	fb03 5711 	mls	r7, r3, r1, r5
 800787e:	5dc7      	ldrb	r7, [r0, r7]
 8007880:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007884:	462f      	mov	r7, r5
 8007886:	42bb      	cmp	r3, r7
 8007888:	460d      	mov	r5, r1
 800788a:	d9f4      	bls.n	8007876 <_printf_i+0x112>
 800788c:	2b08      	cmp	r3, #8
 800788e:	d10b      	bne.n	80078a8 <_printf_i+0x144>
 8007890:	6823      	ldr	r3, [r4, #0]
 8007892:	07df      	lsls	r7, r3, #31
 8007894:	d508      	bpl.n	80078a8 <_printf_i+0x144>
 8007896:	6923      	ldr	r3, [r4, #16]
 8007898:	6861      	ldr	r1, [r4, #4]
 800789a:	4299      	cmp	r1, r3
 800789c:	bfde      	ittt	le
 800789e:	2330      	movle	r3, #48	@ 0x30
 80078a0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80078a4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80078a8:	1b92      	subs	r2, r2, r6
 80078aa:	6122      	str	r2, [r4, #16]
 80078ac:	f8cd a000 	str.w	sl, [sp]
 80078b0:	464b      	mov	r3, r9
 80078b2:	aa03      	add	r2, sp, #12
 80078b4:	4621      	mov	r1, r4
 80078b6:	4640      	mov	r0, r8
 80078b8:	f7ff fee6 	bl	8007688 <_printf_common>
 80078bc:	3001      	adds	r0, #1
 80078be:	d14a      	bne.n	8007956 <_printf_i+0x1f2>
 80078c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078c4:	b004      	add	sp, #16
 80078c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	f043 0320 	orr.w	r3, r3, #32
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	4833      	ldr	r0, [pc, #204]	@ (80079a0 <_printf_i+0x23c>)
 80078d4:	2778      	movs	r7, #120	@ 0x78
 80078d6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	6831      	ldr	r1, [r6, #0]
 80078de:	061f      	lsls	r7, r3, #24
 80078e0:	f851 5b04 	ldr.w	r5, [r1], #4
 80078e4:	d402      	bmi.n	80078ec <_printf_i+0x188>
 80078e6:	065f      	lsls	r7, r3, #25
 80078e8:	bf48      	it	mi
 80078ea:	b2ad      	uxthmi	r5, r5
 80078ec:	6031      	str	r1, [r6, #0]
 80078ee:	07d9      	lsls	r1, r3, #31
 80078f0:	bf44      	itt	mi
 80078f2:	f043 0320 	orrmi.w	r3, r3, #32
 80078f6:	6023      	strmi	r3, [r4, #0]
 80078f8:	b11d      	cbz	r5, 8007902 <_printf_i+0x19e>
 80078fa:	2310      	movs	r3, #16
 80078fc:	e7ac      	b.n	8007858 <_printf_i+0xf4>
 80078fe:	4827      	ldr	r0, [pc, #156]	@ (800799c <_printf_i+0x238>)
 8007900:	e7e9      	b.n	80078d6 <_printf_i+0x172>
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	f023 0320 	bic.w	r3, r3, #32
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	e7f6      	b.n	80078fa <_printf_i+0x196>
 800790c:	4616      	mov	r6, r2
 800790e:	e7bd      	b.n	800788c <_printf_i+0x128>
 8007910:	6833      	ldr	r3, [r6, #0]
 8007912:	6825      	ldr	r5, [r4, #0]
 8007914:	6961      	ldr	r1, [r4, #20]
 8007916:	1d18      	adds	r0, r3, #4
 8007918:	6030      	str	r0, [r6, #0]
 800791a:	062e      	lsls	r6, r5, #24
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	d501      	bpl.n	8007924 <_printf_i+0x1c0>
 8007920:	6019      	str	r1, [r3, #0]
 8007922:	e002      	b.n	800792a <_printf_i+0x1c6>
 8007924:	0668      	lsls	r0, r5, #25
 8007926:	d5fb      	bpl.n	8007920 <_printf_i+0x1bc>
 8007928:	8019      	strh	r1, [r3, #0]
 800792a:	2300      	movs	r3, #0
 800792c:	6123      	str	r3, [r4, #16]
 800792e:	4616      	mov	r6, r2
 8007930:	e7bc      	b.n	80078ac <_printf_i+0x148>
 8007932:	6833      	ldr	r3, [r6, #0]
 8007934:	1d1a      	adds	r2, r3, #4
 8007936:	6032      	str	r2, [r6, #0]
 8007938:	681e      	ldr	r6, [r3, #0]
 800793a:	6862      	ldr	r2, [r4, #4]
 800793c:	2100      	movs	r1, #0
 800793e:	4630      	mov	r0, r6
 8007940:	f7f8 fc46 	bl	80001d0 <memchr>
 8007944:	b108      	cbz	r0, 800794a <_printf_i+0x1e6>
 8007946:	1b80      	subs	r0, r0, r6
 8007948:	6060      	str	r0, [r4, #4]
 800794a:	6863      	ldr	r3, [r4, #4]
 800794c:	6123      	str	r3, [r4, #16]
 800794e:	2300      	movs	r3, #0
 8007950:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007954:	e7aa      	b.n	80078ac <_printf_i+0x148>
 8007956:	6923      	ldr	r3, [r4, #16]
 8007958:	4632      	mov	r2, r6
 800795a:	4649      	mov	r1, r9
 800795c:	4640      	mov	r0, r8
 800795e:	47d0      	blx	sl
 8007960:	3001      	adds	r0, #1
 8007962:	d0ad      	beq.n	80078c0 <_printf_i+0x15c>
 8007964:	6823      	ldr	r3, [r4, #0]
 8007966:	079b      	lsls	r3, r3, #30
 8007968:	d413      	bmi.n	8007992 <_printf_i+0x22e>
 800796a:	68e0      	ldr	r0, [r4, #12]
 800796c:	9b03      	ldr	r3, [sp, #12]
 800796e:	4298      	cmp	r0, r3
 8007970:	bfb8      	it	lt
 8007972:	4618      	movlt	r0, r3
 8007974:	e7a6      	b.n	80078c4 <_printf_i+0x160>
 8007976:	2301      	movs	r3, #1
 8007978:	4632      	mov	r2, r6
 800797a:	4649      	mov	r1, r9
 800797c:	4640      	mov	r0, r8
 800797e:	47d0      	blx	sl
 8007980:	3001      	adds	r0, #1
 8007982:	d09d      	beq.n	80078c0 <_printf_i+0x15c>
 8007984:	3501      	adds	r5, #1
 8007986:	68e3      	ldr	r3, [r4, #12]
 8007988:	9903      	ldr	r1, [sp, #12]
 800798a:	1a5b      	subs	r3, r3, r1
 800798c:	42ab      	cmp	r3, r5
 800798e:	dcf2      	bgt.n	8007976 <_printf_i+0x212>
 8007990:	e7eb      	b.n	800796a <_printf_i+0x206>
 8007992:	2500      	movs	r5, #0
 8007994:	f104 0619 	add.w	r6, r4, #25
 8007998:	e7f5      	b.n	8007986 <_printf_i+0x222>
 800799a:	bf00      	nop
 800799c:	0800a182 	.word	0x0800a182
 80079a0:	0800a193 	.word	0x0800a193

080079a4 <sniprintf>:
 80079a4:	b40c      	push	{r2, r3}
 80079a6:	b530      	push	{r4, r5, lr}
 80079a8:	4b17      	ldr	r3, [pc, #92]	@ (8007a08 <sniprintf+0x64>)
 80079aa:	1e0c      	subs	r4, r1, #0
 80079ac:	681d      	ldr	r5, [r3, #0]
 80079ae:	b09d      	sub	sp, #116	@ 0x74
 80079b0:	da08      	bge.n	80079c4 <sniprintf+0x20>
 80079b2:	238b      	movs	r3, #139	@ 0x8b
 80079b4:	602b      	str	r3, [r5, #0]
 80079b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079ba:	b01d      	add	sp, #116	@ 0x74
 80079bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079c0:	b002      	add	sp, #8
 80079c2:	4770      	bx	lr
 80079c4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80079c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80079cc:	bf14      	ite	ne
 80079ce:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80079d2:	4623      	moveq	r3, r4
 80079d4:	9304      	str	r3, [sp, #16]
 80079d6:	9307      	str	r3, [sp, #28]
 80079d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80079dc:	9002      	str	r0, [sp, #8]
 80079de:	9006      	str	r0, [sp, #24]
 80079e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80079e4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80079e6:	ab21      	add	r3, sp, #132	@ 0x84
 80079e8:	a902      	add	r1, sp, #8
 80079ea:	4628      	mov	r0, r5
 80079ec:	9301      	str	r3, [sp, #4]
 80079ee:	f000 ffbf 	bl	8008970 <_svfiprintf_r>
 80079f2:	1c43      	adds	r3, r0, #1
 80079f4:	bfbc      	itt	lt
 80079f6:	238b      	movlt	r3, #139	@ 0x8b
 80079f8:	602b      	strlt	r3, [r5, #0]
 80079fa:	2c00      	cmp	r4, #0
 80079fc:	d0dd      	beq.n	80079ba <sniprintf+0x16>
 80079fe:	9b02      	ldr	r3, [sp, #8]
 8007a00:	2200      	movs	r2, #0
 8007a02:	701a      	strb	r2, [r3, #0]
 8007a04:	e7d9      	b.n	80079ba <sniprintf+0x16>
 8007a06:	bf00      	nop
 8007a08:	20000018 	.word	0x20000018

08007a0c <std>:
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	b510      	push	{r4, lr}
 8007a10:	4604      	mov	r4, r0
 8007a12:	e9c0 3300 	strd	r3, r3, [r0]
 8007a16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a1a:	6083      	str	r3, [r0, #8]
 8007a1c:	8181      	strh	r1, [r0, #12]
 8007a1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a20:	81c2      	strh	r2, [r0, #14]
 8007a22:	6183      	str	r3, [r0, #24]
 8007a24:	4619      	mov	r1, r3
 8007a26:	2208      	movs	r2, #8
 8007a28:	305c      	adds	r0, #92	@ 0x5c
 8007a2a:	f000 f8b1 	bl	8007b90 <memset>
 8007a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a64 <std+0x58>)
 8007a30:	6263      	str	r3, [r4, #36]	@ 0x24
 8007a32:	4b0d      	ldr	r3, [pc, #52]	@ (8007a68 <std+0x5c>)
 8007a34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007a36:	4b0d      	ldr	r3, [pc, #52]	@ (8007a6c <std+0x60>)
 8007a38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007a70 <std+0x64>)
 8007a3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a74 <std+0x68>)
 8007a40:	6224      	str	r4, [r4, #32]
 8007a42:	429c      	cmp	r4, r3
 8007a44:	d006      	beq.n	8007a54 <std+0x48>
 8007a46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007a4a:	4294      	cmp	r4, r2
 8007a4c:	d002      	beq.n	8007a54 <std+0x48>
 8007a4e:	33d0      	adds	r3, #208	@ 0xd0
 8007a50:	429c      	cmp	r4, r3
 8007a52:	d105      	bne.n	8007a60 <std+0x54>
 8007a54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a5c:	f000 b8ce 	b.w	8007bfc <__retarget_lock_init_recursive>
 8007a60:	bd10      	pop	{r4, pc}
 8007a62:	bf00      	nop
 8007a64:	08009531 	.word	0x08009531
 8007a68:	08009553 	.word	0x08009553
 8007a6c:	0800958b 	.word	0x0800958b
 8007a70:	080095af 	.word	0x080095af
 8007a74:	2000097c 	.word	0x2000097c

08007a78 <stdio_exit_handler>:
 8007a78:	4a02      	ldr	r2, [pc, #8]	@ (8007a84 <stdio_exit_handler+0xc>)
 8007a7a:	4903      	ldr	r1, [pc, #12]	@ (8007a88 <stdio_exit_handler+0x10>)
 8007a7c:	4803      	ldr	r0, [pc, #12]	@ (8007a8c <stdio_exit_handler+0x14>)
 8007a7e:	f000 b869 	b.w	8007b54 <_fwalk_sglue>
 8007a82:	bf00      	nop
 8007a84:	2000000c 	.word	0x2000000c
 8007a88:	08008dc5 	.word	0x08008dc5
 8007a8c:	2000001c 	.word	0x2000001c

08007a90 <cleanup_stdio>:
 8007a90:	6841      	ldr	r1, [r0, #4]
 8007a92:	4b0c      	ldr	r3, [pc, #48]	@ (8007ac4 <cleanup_stdio+0x34>)
 8007a94:	4299      	cmp	r1, r3
 8007a96:	b510      	push	{r4, lr}
 8007a98:	4604      	mov	r4, r0
 8007a9a:	d001      	beq.n	8007aa0 <cleanup_stdio+0x10>
 8007a9c:	f001 f992 	bl	8008dc4 <_fflush_r>
 8007aa0:	68a1      	ldr	r1, [r4, #8]
 8007aa2:	4b09      	ldr	r3, [pc, #36]	@ (8007ac8 <cleanup_stdio+0x38>)
 8007aa4:	4299      	cmp	r1, r3
 8007aa6:	d002      	beq.n	8007aae <cleanup_stdio+0x1e>
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f001 f98b 	bl	8008dc4 <_fflush_r>
 8007aae:	68e1      	ldr	r1, [r4, #12]
 8007ab0:	4b06      	ldr	r3, [pc, #24]	@ (8007acc <cleanup_stdio+0x3c>)
 8007ab2:	4299      	cmp	r1, r3
 8007ab4:	d004      	beq.n	8007ac0 <cleanup_stdio+0x30>
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007abc:	f001 b982 	b.w	8008dc4 <_fflush_r>
 8007ac0:	bd10      	pop	{r4, pc}
 8007ac2:	bf00      	nop
 8007ac4:	2000097c 	.word	0x2000097c
 8007ac8:	200009e4 	.word	0x200009e4
 8007acc:	20000a4c 	.word	0x20000a4c

08007ad0 <global_stdio_init.part.0>:
 8007ad0:	b510      	push	{r4, lr}
 8007ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8007b00 <global_stdio_init.part.0+0x30>)
 8007ad4:	4c0b      	ldr	r4, [pc, #44]	@ (8007b04 <global_stdio_init.part.0+0x34>)
 8007ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8007b08 <global_stdio_init.part.0+0x38>)
 8007ad8:	601a      	str	r2, [r3, #0]
 8007ada:	4620      	mov	r0, r4
 8007adc:	2200      	movs	r2, #0
 8007ade:	2104      	movs	r1, #4
 8007ae0:	f7ff ff94 	bl	8007a0c <std>
 8007ae4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007ae8:	2201      	movs	r2, #1
 8007aea:	2109      	movs	r1, #9
 8007aec:	f7ff ff8e 	bl	8007a0c <std>
 8007af0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007af4:	2202      	movs	r2, #2
 8007af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007afa:	2112      	movs	r1, #18
 8007afc:	f7ff bf86 	b.w	8007a0c <std>
 8007b00:	20000ab4 	.word	0x20000ab4
 8007b04:	2000097c 	.word	0x2000097c
 8007b08:	08007a79 	.word	0x08007a79

08007b0c <__sfp_lock_acquire>:
 8007b0c:	4801      	ldr	r0, [pc, #4]	@ (8007b14 <__sfp_lock_acquire+0x8>)
 8007b0e:	f000 b876 	b.w	8007bfe <__retarget_lock_acquire_recursive>
 8007b12:	bf00      	nop
 8007b14:	20000ab9 	.word	0x20000ab9

08007b18 <__sfp_lock_release>:
 8007b18:	4801      	ldr	r0, [pc, #4]	@ (8007b20 <__sfp_lock_release+0x8>)
 8007b1a:	f000 b871 	b.w	8007c00 <__retarget_lock_release_recursive>
 8007b1e:	bf00      	nop
 8007b20:	20000ab9 	.word	0x20000ab9

08007b24 <__sinit>:
 8007b24:	b510      	push	{r4, lr}
 8007b26:	4604      	mov	r4, r0
 8007b28:	f7ff fff0 	bl	8007b0c <__sfp_lock_acquire>
 8007b2c:	6a23      	ldr	r3, [r4, #32]
 8007b2e:	b11b      	cbz	r3, 8007b38 <__sinit+0x14>
 8007b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b34:	f7ff bff0 	b.w	8007b18 <__sfp_lock_release>
 8007b38:	4b04      	ldr	r3, [pc, #16]	@ (8007b4c <__sinit+0x28>)
 8007b3a:	6223      	str	r3, [r4, #32]
 8007b3c:	4b04      	ldr	r3, [pc, #16]	@ (8007b50 <__sinit+0x2c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d1f5      	bne.n	8007b30 <__sinit+0xc>
 8007b44:	f7ff ffc4 	bl	8007ad0 <global_stdio_init.part.0>
 8007b48:	e7f2      	b.n	8007b30 <__sinit+0xc>
 8007b4a:	bf00      	nop
 8007b4c:	08007a91 	.word	0x08007a91
 8007b50:	20000ab4 	.word	0x20000ab4

08007b54 <_fwalk_sglue>:
 8007b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b58:	4607      	mov	r7, r0
 8007b5a:	4688      	mov	r8, r1
 8007b5c:	4614      	mov	r4, r2
 8007b5e:	2600      	movs	r6, #0
 8007b60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b64:	f1b9 0901 	subs.w	r9, r9, #1
 8007b68:	d505      	bpl.n	8007b76 <_fwalk_sglue+0x22>
 8007b6a:	6824      	ldr	r4, [r4, #0]
 8007b6c:	2c00      	cmp	r4, #0
 8007b6e:	d1f7      	bne.n	8007b60 <_fwalk_sglue+0xc>
 8007b70:	4630      	mov	r0, r6
 8007b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b76:	89ab      	ldrh	r3, [r5, #12]
 8007b78:	2b01      	cmp	r3, #1
 8007b7a:	d907      	bls.n	8007b8c <_fwalk_sglue+0x38>
 8007b7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b80:	3301      	adds	r3, #1
 8007b82:	d003      	beq.n	8007b8c <_fwalk_sglue+0x38>
 8007b84:	4629      	mov	r1, r5
 8007b86:	4638      	mov	r0, r7
 8007b88:	47c0      	blx	r8
 8007b8a:	4306      	orrs	r6, r0
 8007b8c:	3568      	adds	r5, #104	@ 0x68
 8007b8e:	e7e9      	b.n	8007b64 <_fwalk_sglue+0x10>

08007b90 <memset>:
 8007b90:	4402      	add	r2, r0
 8007b92:	4603      	mov	r3, r0
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d100      	bne.n	8007b9a <memset+0xa>
 8007b98:	4770      	bx	lr
 8007b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b9e:	e7f9      	b.n	8007b94 <memset+0x4>

08007ba0 <_localeconv_r>:
 8007ba0:	4800      	ldr	r0, [pc, #0]	@ (8007ba4 <_localeconv_r+0x4>)
 8007ba2:	4770      	bx	lr
 8007ba4:	20000158 	.word	0x20000158

08007ba8 <__errno>:
 8007ba8:	4b01      	ldr	r3, [pc, #4]	@ (8007bb0 <__errno+0x8>)
 8007baa:	6818      	ldr	r0, [r3, #0]
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	20000018 	.word	0x20000018

08007bb4 <__libc_init_array>:
 8007bb4:	b570      	push	{r4, r5, r6, lr}
 8007bb6:	4d0d      	ldr	r5, [pc, #52]	@ (8007bec <__libc_init_array+0x38>)
 8007bb8:	4c0d      	ldr	r4, [pc, #52]	@ (8007bf0 <__libc_init_array+0x3c>)
 8007bba:	1b64      	subs	r4, r4, r5
 8007bbc:	10a4      	asrs	r4, r4, #2
 8007bbe:	2600      	movs	r6, #0
 8007bc0:	42a6      	cmp	r6, r4
 8007bc2:	d109      	bne.n	8007bd8 <__libc_init_array+0x24>
 8007bc4:	4d0b      	ldr	r5, [pc, #44]	@ (8007bf4 <__libc_init_array+0x40>)
 8007bc6:	4c0c      	ldr	r4, [pc, #48]	@ (8007bf8 <__libc_init_array+0x44>)
 8007bc8:	f002 f8ee 	bl	8009da8 <_init>
 8007bcc:	1b64      	subs	r4, r4, r5
 8007bce:	10a4      	asrs	r4, r4, #2
 8007bd0:	2600      	movs	r6, #0
 8007bd2:	42a6      	cmp	r6, r4
 8007bd4:	d105      	bne.n	8007be2 <__libc_init_array+0x2e>
 8007bd6:	bd70      	pop	{r4, r5, r6, pc}
 8007bd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bdc:	4798      	blx	r3
 8007bde:	3601      	adds	r6, #1
 8007be0:	e7ee      	b.n	8007bc0 <__libc_init_array+0xc>
 8007be2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007be6:	4798      	blx	r3
 8007be8:	3601      	adds	r6, #1
 8007bea:	e7f2      	b.n	8007bd2 <__libc_init_array+0x1e>
 8007bec:	0800a4e8 	.word	0x0800a4e8
 8007bf0:	0800a4e8 	.word	0x0800a4e8
 8007bf4:	0800a4e8 	.word	0x0800a4e8
 8007bf8:	0800a4ec 	.word	0x0800a4ec

08007bfc <__retarget_lock_init_recursive>:
 8007bfc:	4770      	bx	lr

08007bfe <__retarget_lock_acquire_recursive>:
 8007bfe:	4770      	bx	lr

08007c00 <__retarget_lock_release_recursive>:
 8007c00:	4770      	bx	lr

08007c02 <memcpy>:
 8007c02:	440a      	add	r2, r1
 8007c04:	4291      	cmp	r1, r2
 8007c06:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007c0a:	d100      	bne.n	8007c0e <memcpy+0xc>
 8007c0c:	4770      	bx	lr
 8007c0e:	b510      	push	{r4, lr}
 8007c10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c18:	4291      	cmp	r1, r2
 8007c1a:	d1f9      	bne.n	8007c10 <memcpy+0xe>
 8007c1c:	bd10      	pop	{r4, pc}

08007c1e <quorem>:
 8007c1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c22:	6903      	ldr	r3, [r0, #16]
 8007c24:	690c      	ldr	r4, [r1, #16]
 8007c26:	42a3      	cmp	r3, r4
 8007c28:	4607      	mov	r7, r0
 8007c2a:	db7e      	blt.n	8007d2a <quorem+0x10c>
 8007c2c:	3c01      	subs	r4, #1
 8007c2e:	f101 0814 	add.w	r8, r1, #20
 8007c32:	00a3      	lsls	r3, r4, #2
 8007c34:	f100 0514 	add.w	r5, r0, #20
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c3e:	9301      	str	r3, [sp, #4]
 8007c40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c50:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c54:	d32e      	bcc.n	8007cb4 <quorem+0x96>
 8007c56:	f04f 0a00 	mov.w	sl, #0
 8007c5a:	46c4      	mov	ip, r8
 8007c5c:	46ae      	mov	lr, r5
 8007c5e:	46d3      	mov	fp, sl
 8007c60:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007c64:	b298      	uxth	r0, r3
 8007c66:	fb06 a000 	mla	r0, r6, r0, sl
 8007c6a:	0c02      	lsrs	r2, r0, #16
 8007c6c:	0c1b      	lsrs	r3, r3, #16
 8007c6e:	fb06 2303 	mla	r3, r6, r3, r2
 8007c72:	f8de 2000 	ldr.w	r2, [lr]
 8007c76:	b280      	uxth	r0, r0
 8007c78:	b292      	uxth	r2, r2
 8007c7a:	1a12      	subs	r2, r2, r0
 8007c7c:	445a      	add	r2, fp
 8007c7e:	f8de 0000 	ldr.w	r0, [lr]
 8007c82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007c8c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007c90:	b292      	uxth	r2, r2
 8007c92:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007c96:	45e1      	cmp	r9, ip
 8007c98:	f84e 2b04 	str.w	r2, [lr], #4
 8007c9c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007ca0:	d2de      	bcs.n	8007c60 <quorem+0x42>
 8007ca2:	9b00      	ldr	r3, [sp, #0]
 8007ca4:	58eb      	ldr	r3, [r5, r3]
 8007ca6:	b92b      	cbnz	r3, 8007cb4 <quorem+0x96>
 8007ca8:	9b01      	ldr	r3, [sp, #4]
 8007caa:	3b04      	subs	r3, #4
 8007cac:	429d      	cmp	r5, r3
 8007cae:	461a      	mov	r2, r3
 8007cb0:	d32f      	bcc.n	8007d12 <quorem+0xf4>
 8007cb2:	613c      	str	r4, [r7, #16]
 8007cb4:	4638      	mov	r0, r7
 8007cb6:	f001 fb33 	bl	8009320 <__mcmp>
 8007cba:	2800      	cmp	r0, #0
 8007cbc:	db25      	blt.n	8007d0a <quorem+0xec>
 8007cbe:	4629      	mov	r1, r5
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	f858 2b04 	ldr.w	r2, [r8], #4
 8007cc6:	f8d1 c000 	ldr.w	ip, [r1]
 8007cca:	fa1f fe82 	uxth.w	lr, r2
 8007cce:	fa1f f38c 	uxth.w	r3, ip
 8007cd2:	eba3 030e 	sub.w	r3, r3, lr
 8007cd6:	4403      	add	r3, r0
 8007cd8:	0c12      	lsrs	r2, r2, #16
 8007cda:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007cde:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ce8:	45c1      	cmp	r9, r8
 8007cea:	f841 3b04 	str.w	r3, [r1], #4
 8007cee:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007cf2:	d2e6      	bcs.n	8007cc2 <quorem+0xa4>
 8007cf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cfc:	b922      	cbnz	r2, 8007d08 <quorem+0xea>
 8007cfe:	3b04      	subs	r3, #4
 8007d00:	429d      	cmp	r5, r3
 8007d02:	461a      	mov	r2, r3
 8007d04:	d30b      	bcc.n	8007d1e <quorem+0x100>
 8007d06:	613c      	str	r4, [r7, #16]
 8007d08:	3601      	adds	r6, #1
 8007d0a:	4630      	mov	r0, r6
 8007d0c:	b003      	add	sp, #12
 8007d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d12:	6812      	ldr	r2, [r2, #0]
 8007d14:	3b04      	subs	r3, #4
 8007d16:	2a00      	cmp	r2, #0
 8007d18:	d1cb      	bne.n	8007cb2 <quorem+0x94>
 8007d1a:	3c01      	subs	r4, #1
 8007d1c:	e7c6      	b.n	8007cac <quorem+0x8e>
 8007d1e:	6812      	ldr	r2, [r2, #0]
 8007d20:	3b04      	subs	r3, #4
 8007d22:	2a00      	cmp	r2, #0
 8007d24:	d1ef      	bne.n	8007d06 <quorem+0xe8>
 8007d26:	3c01      	subs	r4, #1
 8007d28:	e7ea      	b.n	8007d00 <quorem+0xe2>
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	e7ee      	b.n	8007d0c <quorem+0xee>
	...

08007d30 <_dtoa_r>:
 8007d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d34:	69c7      	ldr	r7, [r0, #28]
 8007d36:	b099      	sub	sp, #100	@ 0x64
 8007d38:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007d3c:	ec55 4b10 	vmov	r4, r5, d0
 8007d40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007d42:	9109      	str	r1, [sp, #36]	@ 0x24
 8007d44:	4683      	mov	fp, r0
 8007d46:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d4a:	b97f      	cbnz	r7, 8007d6c <_dtoa_r+0x3c>
 8007d4c:	2010      	movs	r0, #16
 8007d4e:	f000 ff0b 	bl	8008b68 <malloc>
 8007d52:	4602      	mov	r2, r0
 8007d54:	f8cb 001c 	str.w	r0, [fp, #28]
 8007d58:	b920      	cbnz	r0, 8007d64 <_dtoa_r+0x34>
 8007d5a:	4ba7      	ldr	r3, [pc, #668]	@ (8007ff8 <_dtoa_r+0x2c8>)
 8007d5c:	21ef      	movs	r1, #239	@ 0xef
 8007d5e:	48a7      	ldr	r0, [pc, #668]	@ (8007ffc <_dtoa_r+0x2cc>)
 8007d60:	f001 fcc8 	bl	80096f4 <__assert_func>
 8007d64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007d68:	6007      	str	r7, [r0, #0]
 8007d6a:	60c7      	str	r7, [r0, #12]
 8007d6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d70:	6819      	ldr	r1, [r3, #0]
 8007d72:	b159      	cbz	r1, 8007d8c <_dtoa_r+0x5c>
 8007d74:	685a      	ldr	r2, [r3, #4]
 8007d76:	604a      	str	r2, [r1, #4]
 8007d78:	2301      	movs	r3, #1
 8007d7a:	4093      	lsls	r3, r2
 8007d7c:	608b      	str	r3, [r1, #8]
 8007d7e:	4658      	mov	r0, fp
 8007d80:	f001 f894 	bl	8008eac <_Bfree>
 8007d84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	1e2b      	subs	r3, r5, #0
 8007d8e:	bfb9      	ittee	lt
 8007d90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007d94:	9303      	strlt	r3, [sp, #12]
 8007d96:	2300      	movge	r3, #0
 8007d98:	6033      	strge	r3, [r6, #0]
 8007d9a:	9f03      	ldr	r7, [sp, #12]
 8007d9c:	4b98      	ldr	r3, [pc, #608]	@ (8008000 <_dtoa_r+0x2d0>)
 8007d9e:	bfbc      	itt	lt
 8007da0:	2201      	movlt	r2, #1
 8007da2:	6032      	strlt	r2, [r6, #0]
 8007da4:	43bb      	bics	r3, r7
 8007da6:	d112      	bne.n	8007dce <_dtoa_r+0x9e>
 8007da8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007daa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007dae:	6013      	str	r3, [r2, #0]
 8007db0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007db4:	4323      	orrs	r3, r4
 8007db6:	f000 854d 	beq.w	8008854 <_dtoa_r+0xb24>
 8007dba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007dbc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008014 <_dtoa_r+0x2e4>
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f000 854f 	beq.w	8008864 <_dtoa_r+0xb34>
 8007dc6:	f10a 0303 	add.w	r3, sl, #3
 8007dca:	f000 bd49 	b.w	8008860 <_dtoa_r+0xb30>
 8007dce:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	ec51 0b17 	vmov	r0, r1, d7
 8007dd8:	2300      	movs	r3, #0
 8007dda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007dde:	f7f8 fe7d 	bl	8000adc <__aeabi_dcmpeq>
 8007de2:	4680      	mov	r8, r0
 8007de4:	b158      	cbz	r0, 8007dfe <_dtoa_r+0xce>
 8007de6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007de8:	2301      	movs	r3, #1
 8007dea:	6013      	str	r3, [r2, #0]
 8007dec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007dee:	b113      	cbz	r3, 8007df6 <_dtoa_r+0xc6>
 8007df0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007df2:	4b84      	ldr	r3, [pc, #528]	@ (8008004 <_dtoa_r+0x2d4>)
 8007df4:	6013      	str	r3, [r2, #0]
 8007df6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008018 <_dtoa_r+0x2e8>
 8007dfa:	f000 bd33 	b.w	8008864 <_dtoa_r+0xb34>
 8007dfe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007e02:	aa16      	add	r2, sp, #88	@ 0x58
 8007e04:	a917      	add	r1, sp, #92	@ 0x5c
 8007e06:	4658      	mov	r0, fp
 8007e08:	f001 fb3a 	bl	8009480 <__d2b>
 8007e0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007e10:	4681      	mov	r9, r0
 8007e12:	2e00      	cmp	r6, #0
 8007e14:	d077      	beq.n	8007f06 <_dtoa_r+0x1d6>
 8007e16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e18:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007e1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e20:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007e28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007e2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007e30:	4619      	mov	r1, r3
 8007e32:	2200      	movs	r2, #0
 8007e34:	4b74      	ldr	r3, [pc, #464]	@ (8008008 <_dtoa_r+0x2d8>)
 8007e36:	f7f8 fa31 	bl	800029c <__aeabi_dsub>
 8007e3a:	a369      	add	r3, pc, #420	@ (adr r3, 8007fe0 <_dtoa_r+0x2b0>)
 8007e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e40:	f7f8 fbe4 	bl	800060c <__aeabi_dmul>
 8007e44:	a368      	add	r3, pc, #416	@ (adr r3, 8007fe8 <_dtoa_r+0x2b8>)
 8007e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e4a:	f7f8 fa29 	bl	80002a0 <__adddf3>
 8007e4e:	4604      	mov	r4, r0
 8007e50:	4630      	mov	r0, r6
 8007e52:	460d      	mov	r5, r1
 8007e54:	f7f8 fb70 	bl	8000538 <__aeabi_i2d>
 8007e58:	a365      	add	r3, pc, #404	@ (adr r3, 8007ff0 <_dtoa_r+0x2c0>)
 8007e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5e:	f7f8 fbd5 	bl	800060c <__aeabi_dmul>
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	4620      	mov	r0, r4
 8007e68:	4629      	mov	r1, r5
 8007e6a:	f7f8 fa19 	bl	80002a0 <__adddf3>
 8007e6e:	4604      	mov	r4, r0
 8007e70:	460d      	mov	r5, r1
 8007e72:	f7f8 fe7b 	bl	8000b6c <__aeabi_d2iz>
 8007e76:	2200      	movs	r2, #0
 8007e78:	4607      	mov	r7, r0
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	4620      	mov	r0, r4
 8007e7e:	4629      	mov	r1, r5
 8007e80:	f7f8 fe36 	bl	8000af0 <__aeabi_dcmplt>
 8007e84:	b140      	cbz	r0, 8007e98 <_dtoa_r+0x168>
 8007e86:	4638      	mov	r0, r7
 8007e88:	f7f8 fb56 	bl	8000538 <__aeabi_i2d>
 8007e8c:	4622      	mov	r2, r4
 8007e8e:	462b      	mov	r3, r5
 8007e90:	f7f8 fe24 	bl	8000adc <__aeabi_dcmpeq>
 8007e94:	b900      	cbnz	r0, 8007e98 <_dtoa_r+0x168>
 8007e96:	3f01      	subs	r7, #1
 8007e98:	2f16      	cmp	r7, #22
 8007e9a:	d851      	bhi.n	8007f40 <_dtoa_r+0x210>
 8007e9c:	4b5b      	ldr	r3, [pc, #364]	@ (800800c <_dtoa_r+0x2dc>)
 8007e9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007eaa:	f7f8 fe21 	bl	8000af0 <__aeabi_dcmplt>
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	d048      	beq.n	8007f44 <_dtoa_r+0x214>
 8007eb2:	3f01      	subs	r7, #1
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	9312      	str	r3, [sp, #72]	@ 0x48
 8007eb8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007eba:	1b9b      	subs	r3, r3, r6
 8007ebc:	1e5a      	subs	r2, r3, #1
 8007ebe:	bf44      	itt	mi
 8007ec0:	f1c3 0801 	rsbmi	r8, r3, #1
 8007ec4:	2300      	movmi	r3, #0
 8007ec6:	9208      	str	r2, [sp, #32]
 8007ec8:	bf54      	ite	pl
 8007eca:	f04f 0800 	movpl.w	r8, #0
 8007ece:	9308      	strmi	r3, [sp, #32]
 8007ed0:	2f00      	cmp	r7, #0
 8007ed2:	db39      	blt.n	8007f48 <_dtoa_r+0x218>
 8007ed4:	9b08      	ldr	r3, [sp, #32]
 8007ed6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007ed8:	443b      	add	r3, r7
 8007eda:	9308      	str	r3, [sp, #32]
 8007edc:	2300      	movs	r3, #0
 8007ede:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ee2:	2b09      	cmp	r3, #9
 8007ee4:	d864      	bhi.n	8007fb0 <_dtoa_r+0x280>
 8007ee6:	2b05      	cmp	r3, #5
 8007ee8:	bfc4      	itt	gt
 8007eea:	3b04      	subgt	r3, #4
 8007eec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ef0:	f1a3 0302 	sub.w	r3, r3, #2
 8007ef4:	bfcc      	ite	gt
 8007ef6:	2400      	movgt	r4, #0
 8007ef8:	2401      	movle	r4, #1
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d863      	bhi.n	8007fc6 <_dtoa_r+0x296>
 8007efe:	e8df f003 	tbb	[pc, r3]
 8007f02:	372a      	.short	0x372a
 8007f04:	5535      	.short	0x5535
 8007f06:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007f0a:	441e      	add	r6, r3
 8007f0c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007f10:	2b20      	cmp	r3, #32
 8007f12:	bfc1      	itttt	gt
 8007f14:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007f18:	409f      	lslgt	r7, r3
 8007f1a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007f1e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007f22:	bfd6      	itet	le
 8007f24:	f1c3 0320 	rsble	r3, r3, #32
 8007f28:	ea47 0003 	orrgt.w	r0, r7, r3
 8007f2c:	fa04 f003 	lslle.w	r0, r4, r3
 8007f30:	f7f8 faf2 	bl	8000518 <__aeabi_ui2d>
 8007f34:	2201      	movs	r2, #1
 8007f36:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007f3a:	3e01      	subs	r6, #1
 8007f3c:	9214      	str	r2, [sp, #80]	@ 0x50
 8007f3e:	e777      	b.n	8007e30 <_dtoa_r+0x100>
 8007f40:	2301      	movs	r3, #1
 8007f42:	e7b8      	b.n	8007eb6 <_dtoa_r+0x186>
 8007f44:	9012      	str	r0, [sp, #72]	@ 0x48
 8007f46:	e7b7      	b.n	8007eb8 <_dtoa_r+0x188>
 8007f48:	427b      	negs	r3, r7
 8007f4a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	eba8 0807 	sub.w	r8, r8, r7
 8007f52:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f54:	e7c4      	b.n	8007ee0 <_dtoa_r+0x1b0>
 8007f56:	2300      	movs	r3, #0
 8007f58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	dc35      	bgt.n	8007fcc <_dtoa_r+0x29c>
 8007f60:	2301      	movs	r3, #1
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	9307      	str	r3, [sp, #28]
 8007f66:	461a      	mov	r2, r3
 8007f68:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f6a:	e00b      	b.n	8007f84 <_dtoa_r+0x254>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e7f3      	b.n	8007f58 <_dtoa_r+0x228>
 8007f70:	2300      	movs	r3, #0
 8007f72:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f76:	18fb      	adds	r3, r7, r3
 8007f78:	9300      	str	r3, [sp, #0]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	9307      	str	r3, [sp, #28]
 8007f80:	bfb8      	it	lt
 8007f82:	2301      	movlt	r3, #1
 8007f84:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007f88:	2100      	movs	r1, #0
 8007f8a:	2204      	movs	r2, #4
 8007f8c:	f102 0514 	add.w	r5, r2, #20
 8007f90:	429d      	cmp	r5, r3
 8007f92:	d91f      	bls.n	8007fd4 <_dtoa_r+0x2a4>
 8007f94:	6041      	str	r1, [r0, #4]
 8007f96:	4658      	mov	r0, fp
 8007f98:	f000 ff48 	bl	8008e2c <_Balloc>
 8007f9c:	4682      	mov	sl, r0
 8007f9e:	2800      	cmp	r0, #0
 8007fa0:	d13c      	bne.n	800801c <_dtoa_r+0x2ec>
 8007fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8008010 <_dtoa_r+0x2e0>)
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	f240 11af 	movw	r1, #431	@ 0x1af
 8007faa:	e6d8      	b.n	8007d5e <_dtoa_r+0x2e>
 8007fac:	2301      	movs	r3, #1
 8007fae:	e7e0      	b.n	8007f72 <_dtoa_r+0x242>
 8007fb0:	2401      	movs	r4, #1
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fb6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007fb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007fbc:	9300      	str	r3, [sp, #0]
 8007fbe:	9307      	str	r3, [sp, #28]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	2312      	movs	r3, #18
 8007fc4:	e7d0      	b.n	8007f68 <_dtoa_r+0x238>
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fca:	e7f5      	b.n	8007fb8 <_dtoa_r+0x288>
 8007fcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fce:	9300      	str	r3, [sp, #0]
 8007fd0:	9307      	str	r3, [sp, #28]
 8007fd2:	e7d7      	b.n	8007f84 <_dtoa_r+0x254>
 8007fd4:	3101      	adds	r1, #1
 8007fd6:	0052      	lsls	r2, r2, #1
 8007fd8:	e7d8      	b.n	8007f8c <_dtoa_r+0x25c>
 8007fda:	bf00      	nop
 8007fdc:	f3af 8000 	nop.w
 8007fe0:	636f4361 	.word	0x636f4361
 8007fe4:	3fd287a7 	.word	0x3fd287a7
 8007fe8:	8b60c8b3 	.word	0x8b60c8b3
 8007fec:	3fc68a28 	.word	0x3fc68a28
 8007ff0:	509f79fb 	.word	0x509f79fb
 8007ff4:	3fd34413 	.word	0x3fd34413
 8007ff8:	0800a1b1 	.word	0x0800a1b1
 8007ffc:	0800a1c8 	.word	0x0800a1c8
 8008000:	7ff00000 	.word	0x7ff00000
 8008004:	0800a181 	.word	0x0800a181
 8008008:	3ff80000 	.word	0x3ff80000
 800800c:	0800a2d0 	.word	0x0800a2d0
 8008010:	0800a220 	.word	0x0800a220
 8008014:	0800a1ad 	.word	0x0800a1ad
 8008018:	0800a180 	.word	0x0800a180
 800801c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008020:	6018      	str	r0, [r3, #0]
 8008022:	9b07      	ldr	r3, [sp, #28]
 8008024:	2b0e      	cmp	r3, #14
 8008026:	f200 80a4 	bhi.w	8008172 <_dtoa_r+0x442>
 800802a:	2c00      	cmp	r4, #0
 800802c:	f000 80a1 	beq.w	8008172 <_dtoa_r+0x442>
 8008030:	2f00      	cmp	r7, #0
 8008032:	dd33      	ble.n	800809c <_dtoa_r+0x36c>
 8008034:	4bad      	ldr	r3, [pc, #692]	@ (80082ec <_dtoa_r+0x5bc>)
 8008036:	f007 020f 	and.w	r2, r7, #15
 800803a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800803e:	ed93 7b00 	vldr	d7, [r3]
 8008042:	05f8      	lsls	r0, r7, #23
 8008044:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008048:	ea4f 1427 	mov.w	r4, r7, asr #4
 800804c:	d516      	bpl.n	800807c <_dtoa_r+0x34c>
 800804e:	4ba8      	ldr	r3, [pc, #672]	@ (80082f0 <_dtoa_r+0x5c0>)
 8008050:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008054:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008058:	f7f8 fc02 	bl	8000860 <__aeabi_ddiv>
 800805c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008060:	f004 040f 	and.w	r4, r4, #15
 8008064:	2603      	movs	r6, #3
 8008066:	4da2      	ldr	r5, [pc, #648]	@ (80082f0 <_dtoa_r+0x5c0>)
 8008068:	b954      	cbnz	r4, 8008080 <_dtoa_r+0x350>
 800806a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800806e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008072:	f7f8 fbf5 	bl	8000860 <__aeabi_ddiv>
 8008076:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800807a:	e028      	b.n	80080ce <_dtoa_r+0x39e>
 800807c:	2602      	movs	r6, #2
 800807e:	e7f2      	b.n	8008066 <_dtoa_r+0x336>
 8008080:	07e1      	lsls	r1, r4, #31
 8008082:	d508      	bpl.n	8008096 <_dtoa_r+0x366>
 8008084:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008088:	e9d5 2300 	ldrd	r2, r3, [r5]
 800808c:	f7f8 fabe 	bl	800060c <__aeabi_dmul>
 8008090:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008094:	3601      	adds	r6, #1
 8008096:	1064      	asrs	r4, r4, #1
 8008098:	3508      	adds	r5, #8
 800809a:	e7e5      	b.n	8008068 <_dtoa_r+0x338>
 800809c:	f000 80d2 	beq.w	8008244 <_dtoa_r+0x514>
 80080a0:	427c      	negs	r4, r7
 80080a2:	4b92      	ldr	r3, [pc, #584]	@ (80082ec <_dtoa_r+0x5bc>)
 80080a4:	4d92      	ldr	r5, [pc, #584]	@ (80082f0 <_dtoa_r+0x5c0>)
 80080a6:	f004 020f 	and.w	r2, r4, #15
 80080aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80080b6:	f7f8 faa9 	bl	800060c <__aeabi_dmul>
 80080ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080be:	1124      	asrs	r4, r4, #4
 80080c0:	2300      	movs	r3, #0
 80080c2:	2602      	movs	r6, #2
 80080c4:	2c00      	cmp	r4, #0
 80080c6:	f040 80b2 	bne.w	800822e <_dtoa_r+0x4fe>
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d1d3      	bne.n	8008076 <_dtoa_r+0x346>
 80080ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80080d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	f000 80b7 	beq.w	8008248 <_dtoa_r+0x518>
 80080da:	4b86      	ldr	r3, [pc, #536]	@ (80082f4 <_dtoa_r+0x5c4>)
 80080dc:	2200      	movs	r2, #0
 80080de:	4620      	mov	r0, r4
 80080e0:	4629      	mov	r1, r5
 80080e2:	f7f8 fd05 	bl	8000af0 <__aeabi_dcmplt>
 80080e6:	2800      	cmp	r0, #0
 80080e8:	f000 80ae 	beq.w	8008248 <_dtoa_r+0x518>
 80080ec:	9b07      	ldr	r3, [sp, #28]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f000 80aa 	beq.w	8008248 <_dtoa_r+0x518>
 80080f4:	9b00      	ldr	r3, [sp, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	dd37      	ble.n	800816a <_dtoa_r+0x43a>
 80080fa:	1e7b      	subs	r3, r7, #1
 80080fc:	9304      	str	r3, [sp, #16]
 80080fe:	4620      	mov	r0, r4
 8008100:	4b7d      	ldr	r3, [pc, #500]	@ (80082f8 <_dtoa_r+0x5c8>)
 8008102:	2200      	movs	r2, #0
 8008104:	4629      	mov	r1, r5
 8008106:	f7f8 fa81 	bl	800060c <__aeabi_dmul>
 800810a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800810e:	9c00      	ldr	r4, [sp, #0]
 8008110:	3601      	adds	r6, #1
 8008112:	4630      	mov	r0, r6
 8008114:	f7f8 fa10 	bl	8000538 <__aeabi_i2d>
 8008118:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800811c:	f7f8 fa76 	bl	800060c <__aeabi_dmul>
 8008120:	4b76      	ldr	r3, [pc, #472]	@ (80082fc <_dtoa_r+0x5cc>)
 8008122:	2200      	movs	r2, #0
 8008124:	f7f8 f8bc 	bl	80002a0 <__adddf3>
 8008128:	4605      	mov	r5, r0
 800812a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800812e:	2c00      	cmp	r4, #0
 8008130:	f040 808d 	bne.w	800824e <_dtoa_r+0x51e>
 8008134:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008138:	4b71      	ldr	r3, [pc, #452]	@ (8008300 <_dtoa_r+0x5d0>)
 800813a:	2200      	movs	r2, #0
 800813c:	f7f8 f8ae 	bl	800029c <__aeabi_dsub>
 8008140:	4602      	mov	r2, r0
 8008142:	460b      	mov	r3, r1
 8008144:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008148:	462a      	mov	r2, r5
 800814a:	4633      	mov	r3, r6
 800814c:	f7f8 fcee 	bl	8000b2c <__aeabi_dcmpgt>
 8008150:	2800      	cmp	r0, #0
 8008152:	f040 828b 	bne.w	800866c <_dtoa_r+0x93c>
 8008156:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800815a:	462a      	mov	r2, r5
 800815c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008160:	f7f8 fcc6 	bl	8000af0 <__aeabi_dcmplt>
 8008164:	2800      	cmp	r0, #0
 8008166:	f040 8128 	bne.w	80083ba <_dtoa_r+0x68a>
 800816a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800816e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008172:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008174:	2b00      	cmp	r3, #0
 8008176:	f2c0 815a 	blt.w	800842e <_dtoa_r+0x6fe>
 800817a:	2f0e      	cmp	r7, #14
 800817c:	f300 8157 	bgt.w	800842e <_dtoa_r+0x6fe>
 8008180:	4b5a      	ldr	r3, [pc, #360]	@ (80082ec <_dtoa_r+0x5bc>)
 8008182:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008186:	ed93 7b00 	vldr	d7, [r3]
 800818a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800818c:	2b00      	cmp	r3, #0
 800818e:	ed8d 7b00 	vstr	d7, [sp]
 8008192:	da03      	bge.n	800819c <_dtoa_r+0x46c>
 8008194:	9b07      	ldr	r3, [sp, #28]
 8008196:	2b00      	cmp	r3, #0
 8008198:	f340 8101 	ble.w	800839e <_dtoa_r+0x66e>
 800819c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80081a0:	4656      	mov	r6, sl
 80081a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081a6:	4620      	mov	r0, r4
 80081a8:	4629      	mov	r1, r5
 80081aa:	f7f8 fb59 	bl	8000860 <__aeabi_ddiv>
 80081ae:	f7f8 fcdd 	bl	8000b6c <__aeabi_d2iz>
 80081b2:	4680      	mov	r8, r0
 80081b4:	f7f8 f9c0 	bl	8000538 <__aeabi_i2d>
 80081b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081bc:	f7f8 fa26 	bl	800060c <__aeabi_dmul>
 80081c0:	4602      	mov	r2, r0
 80081c2:	460b      	mov	r3, r1
 80081c4:	4620      	mov	r0, r4
 80081c6:	4629      	mov	r1, r5
 80081c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80081cc:	f7f8 f866 	bl	800029c <__aeabi_dsub>
 80081d0:	f806 4b01 	strb.w	r4, [r6], #1
 80081d4:	9d07      	ldr	r5, [sp, #28]
 80081d6:	eba6 040a 	sub.w	r4, r6, sl
 80081da:	42a5      	cmp	r5, r4
 80081dc:	4602      	mov	r2, r0
 80081de:	460b      	mov	r3, r1
 80081e0:	f040 8117 	bne.w	8008412 <_dtoa_r+0x6e2>
 80081e4:	f7f8 f85c 	bl	80002a0 <__adddf3>
 80081e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081ec:	4604      	mov	r4, r0
 80081ee:	460d      	mov	r5, r1
 80081f0:	f7f8 fc9c 	bl	8000b2c <__aeabi_dcmpgt>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	f040 80f9 	bne.w	80083ec <_dtoa_r+0x6bc>
 80081fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081fe:	4620      	mov	r0, r4
 8008200:	4629      	mov	r1, r5
 8008202:	f7f8 fc6b 	bl	8000adc <__aeabi_dcmpeq>
 8008206:	b118      	cbz	r0, 8008210 <_dtoa_r+0x4e0>
 8008208:	f018 0f01 	tst.w	r8, #1
 800820c:	f040 80ee 	bne.w	80083ec <_dtoa_r+0x6bc>
 8008210:	4649      	mov	r1, r9
 8008212:	4658      	mov	r0, fp
 8008214:	f000 fe4a 	bl	8008eac <_Bfree>
 8008218:	2300      	movs	r3, #0
 800821a:	7033      	strb	r3, [r6, #0]
 800821c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800821e:	3701      	adds	r7, #1
 8008220:	601f      	str	r7, [r3, #0]
 8008222:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 831d 	beq.w	8008864 <_dtoa_r+0xb34>
 800822a:	601e      	str	r6, [r3, #0]
 800822c:	e31a      	b.n	8008864 <_dtoa_r+0xb34>
 800822e:	07e2      	lsls	r2, r4, #31
 8008230:	d505      	bpl.n	800823e <_dtoa_r+0x50e>
 8008232:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008236:	f7f8 f9e9 	bl	800060c <__aeabi_dmul>
 800823a:	3601      	adds	r6, #1
 800823c:	2301      	movs	r3, #1
 800823e:	1064      	asrs	r4, r4, #1
 8008240:	3508      	adds	r5, #8
 8008242:	e73f      	b.n	80080c4 <_dtoa_r+0x394>
 8008244:	2602      	movs	r6, #2
 8008246:	e742      	b.n	80080ce <_dtoa_r+0x39e>
 8008248:	9c07      	ldr	r4, [sp, #28]
 800824a:	9704      	str	r7, [sp, #16]
 800824c:	e761      	b.n	8008112 <_dtoa_r+0x3e2>
 800824e:	4b27      	ldr	r3, [pc, #156]	@ (80082ec <_dtoa_r+0x5bc>)
 8008250:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008252:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008256:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800825a:	4454      	add	r4, sl
 800825c:	2900      	cmp	r1, #0
 800825e:	d053      	beq.n	8008308 <_dtoa_r+0x5d8>
 8008260:	4928      	ldr	r1, [pc, #160]	@ (8008304 <_dtoa_r+0x5d4>)
 8008262:	2000      	movs	r0, #0
 8008264:	f7f8 fafc 	bl	8000860 <__aeabi_ddiv>
 8008268:	4633      	mov	r3, r6
 800826a:	462a      	mov	r2, r5
 800826c:	f7f8 f816 	bl	800029c <__aeabi_dsub>
 8008270:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008274:	4656      	mov	r6, sl
 8008276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800827a:	f7f8 fc77 	bl	8000b6c <__aeabi_d2iz>
 800827e:	4605      	mov	r5, r0
 8008280:	f7f8 f95a 	bl	8000538 <__aeabi_i2d>
 8008284:	4602      	mov	r2, r0
 8008286:	460b      	mov	r3, r1
 8008288:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800828c:	f7f8 f806 	bl	800029c <__aeabi_dsub>
 8008290:	3530      	adds	r5, #48	@ 0x30
 8008292:	4602      	mov	r2, r0
 8008294:	460b      	mov	r3, r1
 8008296:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800829a:	f806 5b01 	strb.w	r5, [r6], #1
 800829e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082a2:	f7f8 fc25 	bl	8000af0 <__aeabi_dcmplt>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	d171      	bne.n	800838e <_dtoa_r+0x65e>
 80082aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082ae:	4911      	ldr	r1, [pc, #68]	@ (80082f4 <_dtoa_r+0x5c4>)
 80082b0:	2000      	movs	r0, #0
 80082b2:	f7f7 fff3 	bl	800029c <__aeabi_dsub>
 80082b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80082ba:	f7f8 fc19 	bl	8000af0 <__aeabi_dcmplt>
 80082be:	2800      	cmp	r0, #0
 80082c0:	f040 8095 	bne.w	80083ee <_dtoa_r+0x6be>
 80082c4:	42a6      	cmp	r6, r4
 80082c6:	f43f af50 	beq.w	800816a <_dtoa_r+0x43a>
 80082ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80082ce:	4b0a      	ldr	r3, [pc, #40]	@ (80082f8 <_dtoa_r+0x5c8>)
 80082d0:	2200      	movs	r2, #0
 80082d2:	f7f8 f99b 	bl	800060c <__aeabi_dmul>
 80082d6:	4b08      	ldr	r3, [pc, #32]	@ (80082f8 <_dtoa_r+0x5c8>)
 80082d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80082dc:	2200      	movs	r2, #0
 80082de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082e2:	f7f8 f993 	bl	800060c <__aeabi_dmul>
 80082e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082ea:	e7c4      	b.n	8008276 <_dtoa_r+0x546>
 80082ec:	0800a2d0 	.word	0x0800a2d0
 80082f0:	0800a2a8 	.word	0x0800a2a8
 80082f4:	3ff00000 	.word	0x3ff00000
 80082f8:	40240000 	.word	0x40240000
 80082fc:	401c0000 	.word	0x401c0000
 8008300:	40140000 	.word	0x40140000
 8008304:	3fe00000 	.word	0x3fe00000
 8008308:	4631      	mov	r1, r6
 800830a:	4628      	mov	r0, r5
 800830c:	f7f8 f97e 	bl	800060c <__aeabi_dmul>
 8008310:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008314:	9415      	str	r4, [sp, #84]	@ 0x54
 8008316:	4656      	mov	r6, sl
 8008318:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800831c:	f7f8 fc26 	bl	8000b6c <__aeabi_d2iz>
 8008320:	4605      	mov	r5, r0
 8008322:	f7f8 f909 	bl	8000538 <__aeabi_i2d>
 8008326:	4602      	mov	r2, r0
 8008328:	460b      	mov	r3, r1
 800832a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800832e:	f7f7 ffb5 	bl	800029c <__aeabi_dsub>
 8008332:	3530      	adds	r5, #48	@ 0x30
 8008334:	f806 5b01 	strb.w	r5, [r6], #1
 8008338:	4602      	mov	r2, r0
 800833a:	460b      	mov	r3, r1
 800833c:	42a6      	cmp	r6, r4
 800833e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008342:	f04f 0200 	mov.w	r2, #0
 8008346:	d124      	bne.n	8008392 <_dtoa_r+0x662>
 8008348:	4bac      	ldr	r3, [pc, #688]	@ (80085fc <_dtoa_r+0x8cc>)
 800834a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800834e:	f7f7 ffa7 	bl	80002a0 <__adddf3>
 8008352:	4602      	mov	r2, r0
 8008354:	460b      	mov	r3, r1
 8008356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800835a:	f7f8 fbe7 	bl	8000b2c <__aeabi_dcmpgt>
 800835e:	2800      	cmp	r0, #0
 8008360:	d145      	bne.n	80083ee <_dtoa_r+0x6be>
 8008362:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008366:	49a5      	ldr	r1, [pc, #660]	@ (80085fc <_dtoa_r+0x8cc>)
 8008368:	2000      	movs	r0, #0
 800836a:	f7f7 ff97 	bl	800029c <__aeabi_dsub>
 800836e:	4602      	mov	r2, r0
 8008370:	460b      	mov	r3, r1
 8008372:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008376:	f7f8 fbbb 	bl	8000af0 <__aeabi_dcmplt>
 800837a:	2800      	cmp	r0, #0
 800837c:	f43f aef5 	beq.w	800816a <_dtoa_r+0x43a>
 8008380:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008382:	1e73      	subs	r3, r6, #1
 8008384:	9315      	str	r3, [sp, #84]	@ 0x54
 8008386:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800838a:	2b30      	cmp	r3, #48	@ 0x30
 800838c:	d0f8      	beq.n	8008380 <_dtoa_r+0x650>
 800838e:	9f04      	ldr	r7, [sp, #16]
 8008390:	e73e      	b.n	8008210 <_dtoa_r+0x4e0>
 8008392:	4b9b      	ldr	r3, [pc, #620]	@ (8008600 <_dtoa_r+0x8d0>)
 8008394:	f7f8 f93a 	bl	800060c <__aeabi_dmul>
 8008398:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800839c:	e7bc      	b.n	8008318 <_dtoa_r+0x5e8>
 800839e:	d10c      	bne.n	80083ba <_dtoa_r+0x68a>
 80083a0:	4b98      	ldr	r3, [pc, #608]	@ (8008604 <_dtoa_r+0x8d4>)
 80083a2:	2200      	movs	r2, #0
 80083a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083a8:	f7f8 f930 	bl	800060c <__aeabi_dmul>
 80083ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083b0:	f7f8 fbb2 	bl	8000b18 <__aeabi_dcmpge>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	f000 8157 	beq.w	8008668 <_dtoa_r+0x938>
 80083ba:	2400      	movs	r4, #0
 80083bc:	4625      	mov	r5, r4
 80083be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80083c0:	43db      	mvns	r3, r3
 80083c2:	9304      	str	r3, [sp, #16]
 80083c4:	4656      	mov	r6, sl
 80083c6:	2700      	movs	r7, #0
 80083c8:	4621      	mov	r1, r4
 80083ca:	4658      	mov	r0, fp
 80083cc:	f000 fd6e 	bl	8008eac <_Bfree>
 80083d0:	2d00      	cmp	r5, #0
 80083d2:	d0dc      	beq.n	800838e <_dtoa_r+0x65e>
 80083d4:	b12f      	cbz	r7, 80083e2 <_dtoa_r+0x6b2>
 80083d6:	42af      	cmp	r7, r5
 80083d8:	d003      	beq.n	80083e2 <_dtoa_r+0x6b2>
 80083da:	4639      	mov	r1, r7
 80083dc:	4658      	mov	r0, fp
 80083de:	f000 fd65 	bl	8008eac <_Bfree>
 80083e2:	4629      	mov	r1, r5
 80083e4:	4658      	mov	r0, fp
 80083e6:	f000 fd61 	bl	8008eac <_Bfree>
 80083ea:	e7d0      	b.n	800838e <_dtoa_r+0x65e>
 80083ec:	9704      	str	r7, [sp, #16]
 80083ee:	4633      	mov	r3, r6
 80083f0:	461e      	mov	r6, r3
 80083f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083f6:	2a39      	cmp	r2, #57	@ 0x39
 80083f8:	d107      	bne.n	800840a <_dtoa_r+0x6da>
 80083fa:	459a      	cmp	sl, r3
 80083fc:	d1f8      	bne.n	80083f0 <_dtoa_r+0x6c0>
 80083fe:	9a04      	ldr	r2, [sp, #16]
 8008400:	3201      	adds	r2, #1
 8008402:	9204      	str	r2, [sp, #16]
 8008404:	2230      	movs	r2, #48	@ 0x30
 8008406:	f88a 2000 	strb.w	r2, [sl]
 800840a:	781a      	ldrb	r2, [r3, #0]
 800840c:	3201      	adds	r2, #1
 800840e:	701a      	strb	r2, [r3, #0]
 8008410:	e7bd      	b.n	800838e <_dtoa_r+0x65e>
 8008412:	4b7b      	ldr	r3, [pc, #492]	@ (8008600 <_dtoa_r+0x8d0>)
 8008414:	2200      	movs	r2, #0
 8008416:	f7f8 f8f9 	bl	800060c <__aeabi_dmul>
 800841a:	2200      	movs	r2, #0
 800841c:	2300      	movs	r3, #0
 800841e:	4604      	mov	r4, r0
 8008420:	460d      	mov	r5, r1
 8008422:	f7f8 fb5b 	bl	8000adc <__aeabi_dcmpeq>
 8008426:	2800      	cmp	r0, #0
 8008428:	f43f aebb 	beq.w	80081a2 <_dtoa_r+0x472>
 800842c:	e6f0      	b.n	8008210 <_dtoa_r+0x4e0>
 800842e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008430:	2a00      	cmp	r2, #0
 8008432:	f000 80db 	beq.w	80085ec <_dtoa_r+0x8bc>
 8008436:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008438:	2a01      	cmp	r2, #1
 800843a:	f300 80bf 	bgt.w	80085bc <_dtoa_r+0x88c>
 800843e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008440:	2a00      	cmp	r2, #0
 8008442:	f000 80b7 	beq.w	80085b4 <_dtoa_r+0x884>
 8008446:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800844a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800844c:	4646      	mov	r6, r8
 800844e:	9a08      	ldr	r2, [sp, #32]
 8008450:	2101      	movs	r1, #1
 8008452:	441a      	add	r2, r3
 8008454:	4658      	mov	r0, fp
 8008456:	4498      	add	r8, r3
 8008458:	9208      	str	r2, [sp, #32]
 800845a:	f000 fddb 	bl	8009014 <__i2b>
 800845e:	4605      	mov	r5, r0
 8008460:	b15e      	cbz	r6, 800847a <_dtoa_r+0x74a>
 8008462:	9b08      	ldr	r3, [sp, #32]
 8008464:	2b00      	cmp	r3, #0
 8008466:	dd08      	ble.n	800847a <_dtoa_r+0x74a>
 8008468:	42b3      	cmp	r3, r6
 800846a:	9a08      	ldr	r2, [sp, #32]
 800846c:	bfa8      	it	ge
 800846e:	4633      	movge	r3, r6
 8008470:	eba8 0803 	sub.w	r8, r8, r3
 8008474:	1af6      	subs	r6, r6, r3
 8008476:	1ad3      	subs	r3, r2, r3
 8008478:	9308      	str	r3, [sp, #32]
 800847a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800847c:	b1f3      	cbz	r3, 80084bc <_dtoa_r+0x78c>
 800847e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008480:	2b00      	cmp	r3, #0
 8008482:	f000 80b7 	beq.w	80085f4 <_dtoa_r+0x8c4>
 8008486:	b18c      	cbz	r4, 80084ac <_dtoa_r+0x77c>
 8008488:	4629      	mov	r1, r5
 800848a:	4622      	mov	r2, r4
 800848c:	4658      	mov	r0, fp
 800848e:	f000 fe81 	bl	8009194 <__pow5mult>
 8008492:	464a      	mov	r2, r9
 8008494:	4601      	mov	r1, r0
 8008496:	4605      	mov	r5, r0
 8008498:	4658      	mov	r0, fp
 800849a:	f000 fdd1 	bl	8009040 <__multiply>
 800849e:	4649      	mov	r1, r9
 80084a0:	9004      	str	r0, [sp, #16]
 80084a2:	4658      	mov	r0, fp
 80084a4:	f000 fd02 	bl	8008eac <_Bfree>
 80084a8:	9b04      	ldr	r3, [sp, #16]
 80084aa:	4699      	mov	r9, r3
 80084ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084ae:	1b1a      	subs	r2, r3, r4
 80084b0:	d004      	beq.n	80084bc <_dtoa_r+0x78c>
 80084b2:	4649      	mov	r1, r9
 80084b4:	4658      	mov	r0, fp
 80084b6:	f000 fe6d 	bl	8009194 <__pow5mult>
 80084ba:	4681      	mov	r9, r0
 80084bc:	2101      	movs	r1, #1
 80084be:	4658      	mov	r0, fp
 80084c0:	f000 fda8 	bl	8009014 <__i2b>
 80084c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084c6:	4604      	mov	r4, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	f000 81cf 	beq.w	800886c <_dtoa_r+0xb3c>
 80084ce:	461a      	mov	r2, r3
 80084d0:	4601      	mov	r1, r0
 80084d2:	4658      	mov	r0, fp
 80084d4:	f000 fe5e 	bl	8009194 <__pow5mult>
 80084d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084da:	2b01      	cmp	r3, #1
 80084dc:	4604      	mov	r4, r0
 80084de:	f300 8095 	bgt.w	800860c <_dtoa_r+0x8dc>
 80084e2:	9b02      	ldr	r3, [sp, #8]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f040 8087 	bne.w	80085f8 <_dtoa_r+0x8c8>
 80084ea:	9b03      	ldr	r3, [sp, #12]
 80084ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	f040 8089 	bne.w	8008608 <_dtoa_r+0x8d8>
 80084f6:	9b03      	ldr	r3, [sp, #12]
 80084f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80084fc:	0d1b      	lsrs	r3, r3, #20
 80084fe:	051b      	lsls	r3, r3, #20
 8008500:	b12b      	cbz	r3, 800850e <_dtoa_r+0x7de>
 8008502:	9b08      	ldr	r3, [sp, #32]
 8008504:	3301      	adds	r3, #1
 8008506:	9308      	str	r3, [sp, #32]
 8008508:	f108 0801 	add.w	r8, r8, #1
 800850c:	2301      	movs	r3, #1
 800850e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008510:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008512:	2b00      	cmp	r3, #0
 8008514:	f000 81b0 	beq.w	8008878 <_dtoa_r+0xb48>
 8008518:	6923      	ldr	r3, [r4, #16]
 800851a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800851e:	6918      	ldr	r0, [r3, #16]
 8008520:	f000 fd2c 	bl	8008f7c <__hi0bits>
 8008524:	f1c0 0020 	rsb	r0, r0, #32
 8008528:	9b08      	ldr	r3, [sp, #32]
 800852a:	4418      	add	r0, r3
 800852c:	f010 001f 	ands.w	r0, r0, #31
 8008530:	d077      	beq.n	8008622 <_dtoa_r+0x8f2>
 8008532:	f1c0 0320 	rsb	r3, r0, #32
 8008536:	2b04      	cmp	r3, #4
 8008538:	dd6b      	ble.n	8008612 <_dtoa_r+0x8e2>
 800853a:	9b08      	ldr	r3, [sp, #32]
 800853c:	f1c0 001c 	rsb	r0, r0, #28
 8008540:	4403      	add	r3, r0
 8008542:	4480      	add	r8, r0
 8008544:	4406      	add	r6, r0
 8008546:	9308      	str	r3, [sp, #32]
 8008548:	f1b8 0f00 	cmp.w	r8, #0
 800854c:	dd05      	ble.n	800855a <_dtoa_r+0x82a>
 800854e:	4649      	mov	r1, r9
 8008550:	4642      	mov	r2, r8
 8008552:	4658      	mov	r0, fp
 8008554:	f000 fe78 	bl	8009248 <__lshift>
 8008558:	4681      	mov	r9, r0
 800855a:	9b08      	ldr	r3, [sp, #32]
 800855c:	2b00      	cmp	r3, #0
 800855e:	dd05      	ble.n	800856c <_dtoa_r+0x83c>
 8008560:	4621      	mov	r1, r4
 8008562:	461a      	mov	r2, r3
 8008564:	4658      	mov	r0, fp
 8008566:	f000 fe6f 	bl	8009248 <__lshift>
 800856a:	4604      	mov	r4, r0
 800856c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800856e:	2b00      	cmp	r3, #0
 8008570:	d059      	beq.n	8008626 <_dtoa_r+0x8f6>
 8008572:	4621      	mov	r1, r4
 8008574:	4648      	mov	r0, r9
 8008576:	f000 fed3 	bl	8009320 <__mcmp>
 800857a:	2800      	cmp	r0, #0
 800857c:	da53      	bge.n	8008626 <_dtoa_r+0x8f6>
 800857e:	1e7b      	subs	r3, r7, #1
 8008580:	9304      	str	r3, [sp, #16]
 8008582:	4649      	mov	r1, r9
 8008584:	2300      	movs	r3, #0
 8008586:	220a      	movs	r2, #10
 8008588:	4658      	mov	r0, fp
 800858a:	f000 fcb1 	bl	8008ef0 <__multadd>
 800858e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008590:	4681      	mov	r9, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	f000 8172 	beq.w	800887c <_dtoa_r+0xb4c>
 8008598:	2300      	movs	r3, #0
 800859a:	4629      	mov	r1, r5
 800859c:	220a      	movs	r2, #10
 800859e:	4658      	mov	r0, fp
 80085a0:	f000 fca6 	bl	8008ef0 <__multadd>
 80085a4:	9b00      	ldr	r3, [sp, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	4605      	mov	r5, r0
 80085aa:	dc67      	bgt.n	800867c <_dtoa_r+0x94c>
 80085ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085ae:	2b02      	cmp	r3, #2
 80085b0:	dc41      	bgt.n	8008636 <_dtoa_r+0x906>
 80085b2:	e063      	b.n	800867c <_dtoa_r+0x94c>
 80085b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80085b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80085ba:	e746      	b.n	800844a <_dtoa_r+0x71a>
 80085bc:	9b07      	ldr	r3, [sp, #28]
 80085be:	1e5c      	subs	r4, r3, #1
 80085c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085c2:	42a3      	cmp	r3, r4
 80085c4:	bfbf      	itttt	lt
 80085c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80085c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80085ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80085cc:	1ae3      	sublt	r3, r4, r3
 80085ce:	bfb4      	ite	lt
 80085d0:	18d2      	addlt	r2, r2, r3
 80085d2:	1b1c      	subge	r4, r3, r4
 80085d4:	9b07      	ldr	r3, [sp, #28]
 80085d6:	bfbc      	itt	lt
 80085d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80085da:	2400      	movlt	r4, #0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	bfb5      	itete	lt
 80085e0:	eba8 0603 	sublt.w	r6, r8, r3
 80085e4:	9b07      	ldrge	r3, [sp, #28]
 80085e6:	2300      	movlt	r3, #0
 80085e8:	4646      	movge	r6, r8
 80085ea:	e730      	b.n	800844e <_dtoa_r+0x71e>
 80085ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80085ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80085f0:	4646      	mov	r6, r8
 80085f2:	e735      	b.n	8008460 <_dtoa_r+0x730>
 80085f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80085f6:	e75c      	b.n	80084b2 <_dtoa_r+0x782>
 80085f8:	2300      	movs	r3, #0
 80085fa:	e788      	b.n	800850e <_dtoa_r+0x7de>
 80085fc:	3fe00000 	.word	0x3fe00000
 8008600:	40240000 	.word	0x40240000
 8008604:	40140000 	.word	0x40140000
 8008608:	9b02      	ldr	r3, [sp, #8]
 800860a:	e780      	b.n	800850e <_dtoa_r+0x7de>
 800860c:	2300      	movs	r3, #0
 800860e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008610:	e782      	b.n	8008518 <_dtoa_r+0x7e8>
 8008612:	d099      	beq.n	8008548 <_dtoa_r+0x818>
 8008614:	9a08      	ldr	r2, [sp, #32]
 8008616:	331c      	adds	r3, #28
 8008618:	441a      	add	r2, r3
 800861a:	4498      	add	r8, r3
 800861c:	441e      	add	r6, r3
 800861e:	9208      	str	r2, [sp, #32]
 8008620:	e792      	b.n	8008548 <_dtoa_r+0x818>
 8008622:	4603      	mov	r3, r0
 8008624:	e7f6      	b.n	8008614 <_dtoa_r+0x8e4>
 8008626:	9b07      	ldr	r3, [sp, #28]
 8008628:	9704      	str	r7, [sp, #16]
 800862a:	2b00      	cmp	r3, #0
 800862c:	dc20      	bgt.n	8008670 <_dtoa_r+0x940>
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008632:	2b02      	cmp	r3, #2
 8008634:	dd1e      	ble.n	8008674 <_dtoa_r+0x944>
 8008636:	9b00      	ldr	r3, [sp, #0]
 8008638:	2b00      	cmp	r3, #0
 800863a:	f47f aec0 	bne.w	80083be <_dtoa_r+0x68e>
 800863e:	4621      	mov	r1, r4
 8008640:	2205      	movs	r2, #5
 8008642:	4658      	mov	r0, fp
 8008644:	f000 fc54 	bl	8008ef0 <__multadd>
 8008648:	4601      	mov	r1, r0
 800864a:	4604      	mov	r4, r0
 800864c:	4648      	mov	r0, r9
 800864e:	f000 fe67 	bl	8009320 <__mcmp>
 8008652:	2800      	cmp	r0, #0
 8008654:	f77f aeb3 	ble.w	80083be <_dtoa_r+0x68e>
 8008658:	4656      	mov	r6, sl
 800865a:	2331      	movs	r3, #49	@ 0x31
 800865c:	f806 3b01 	strb.w	r3, [r6], #1
 8008660:	9b04      	ldr	r3, [sp, #16]
 8008662:	3301      	adds	r3, #1
 8008664:	9304      	str	r3, [sp, #16]
 8008666:	e6ae      	b.n	80083c6 <_dtoa_r+0x696>
 8008668:	9c07      	ldr	r4, [sp, #28]
 800866a:	9704      	str	r7, [sp, #16]
 800866c:	4625      	mov	r5, r4
 800866e:	e7f3      	b.n	8008658 <_dtoa_r+0x928>
 8008670:	9b07      	ldr	r3, [sp, #28]
 8008672:	9300      	str	r3, [sp, #0]
 8008674:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008676:	2b00      	cmp	r3, #0
 8008678:	f000 8104 	beq.w	8008884 <_dtoa_r+0xb54>
 800867c:	2e00      	cmp	r6, #0
 800867e:	dd05      	ble.n	800868c <_dtoa_r+0x95c>
 8008680:	4629      	mov	r1, r5
 8008682:	4632      	mov	r2, r6
 8008684:	4658      	mov	r0, fp
 8008686:	f000 fddf 	bl	8009248 <__lshift>
 800868a:	4605      	mov	r5, r0
 800868c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800868e:	2b00      	cmp	r3, #0
 8008690:	d05a      	beq.n	8008748 <_dtoa_r+0xa18>
 8008692:	6869      	ldr	r1, [r5, #4]
 8008694:	4658      	mov	r0, fp
 8008696:	f000 fbc9 	bl	8008e2c <_Balloc>
 800869a:	4606      	mov	r6, r0
 800869c:	b928      	cbnz	r0, 80086aa <_dtoa_r+0x97a>
 800869e:	4b84      	ldr	r3, [pc, #528]	@ (80088b0 <_dtoa_r+0xb80>)
 80086a0:	4602      	mov	r2, r0
 80086a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80086a6:	f7ff bb5a 	b.w	8007d5e <_dtoa_r+0x2e>
 80086aa:	692a      	ldr	r2, [r5, #16]
 80086ac:	3202      	adds	r2, #2
 80086ae:	0092      	lsls	r2, r2, #2
 80086b0:	f105 010c 	add.w	r1, r5, #12
 80086b4:	300c      	adds	r0, #12
 80086b6:	f7ff faa4 	bl	8007c02 <memcpy>
 80086ba:	2201      	movs	r2, #1
 80086bc:	4631      	mov	r1, r6
 80086be:	4658      	mov	r0, fp
 80086c0:	f000 fdc2 	bl	8009248 <__lshift>
 80086c4:	f10a 0301 	add.w	r3, sl, #1
 80086c8:	9307      	str	r3, [sp, #28]
 80086ca:	9b00      	ldr	r3, [sp, #0]
 80086cc:	4453      	add	r3, sl
 80086ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086d0:	9b02      	ldr	r3, [sp, #8]
 80086d2:	f003 0301 	and.w	r3, r3, #1
 80086d6:	462f      	mov	r7, r5
 80086d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80086da:	4605      	mov	r5, r0
 80086dc:	9b07      	ldr	r3, [sp, #28]
 80086de:	4621      	mov	r1, r4
 80086e0:	3b01      	subs	r3, #1
 80086e2:	4648      	mov	r0, r9
 80086e4:	9300      	str	r3, [sp, #0]
 80086e6:	f7ff fa9a 	bl	8007c1e <quorem>
 80086ea:	4639      	mov	r1, r7
 80086ec:	9002      	str	r0, [sp, #8]
 80086ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80086f2:	4648      	mov	r0, r9
 80086f4:	f000 fe14 	bl	8009320 <__mcmp>
 80086f8:	462a      	mov	r2, r5
 80086fa:	9008      	str	r0, [sp, #32]
 80086fc:	4621      	mov	r1, r4
 80086fe:	4658      	mov	r0, fp
 8008700:	f000 fe2a 	bl	8009358 <__mdiff>
 8008704:	68c2      	ldr	r2, [r0, #12]
 8008706:	4606      	mov	r6, r0
 8008708:	bb02      	cbnz	r2, 800874c <_dtoa_r+0xa1c>
 800870a:	4601      	mov	r1, r0
 800870c:	4648      	mov	r0, r9
 800870e:	f000 fe07 	bl	8009320 <__mcmp>
 8008712:	4602      	mov	r2, r0
 8008714:	4631      	mov	r1, r6
 8008716:	4658      	mov	r0, fp
 8008718:	920e      	str	r2, [sp, #56]	@ 0x38
 800871a:	f000 fbc7 	bl	8008eac <_Bfree>
 800871e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008720:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008722:	9e07      	ldr	r6, [sp, #28]
 8008724:	ea43 0102 	orr.w	r1, r3, r2
 8008728:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800872a:	4319      	orrs	r1, r3
 800872c:	d110      	bne.n	8008750 <_dtoa_r+0xa20>
 800872e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008732:	d029      	beq.n	8008788 <_dtoa_r+0xa58>
 8008734:	9b08      	ldr	r3, [sp, #32]
 8008736:	2b00      	cmp	r3, #0
 8008738:	dd02      	ble.n	8008740 <_dtoa_r+0xa10>
 800873a:	9b02      	ldr	r3, [sp, #8]
 800873c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008740:	9b00      	ldr	r3, [sp, #0]
 8008742:	f883 8000 	strb.w	r8, [r3]
 8008746:	e63f      	b.n	80083c8 <_dtoa_r+0x698>
 8008748:	4628      	mov	r0, r5
 800874a:	e7bb      	b.n	80086c4 <_dtoa_r+0x994>
 800874c:	2201      	movs	r2, #1
 800874e:	e7e1      	b.n	8008714 <_dtoa_r+0x9e4>
 8008750:	9b08      	ldr	r3, [sp, #32]
 8008752:	2b00      	cmp	r3, #0
 8008754:	db04      	blt.n	8008760 <_dtoa_r+0xa30>
 8008756:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008758:	430b      	orrs	r3, r1
 800875a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800875c:	430b      	orrs	r3, r1
 800875e:	d120      	bne.n	80087a2 <_dtoa_r+0xa72>
 8008760:	2a00      	cmp	r2, #0
 8008762:	dded      	ble.n	8008740 <_dtoa_r+0xa10>
 8008764:	4649      	mov	r1, r9
 8008766:	2201      	movs	r2, #1
 8008768:	4658      	mov	r0, fp
 800876a:	f000 fd6d 	bl	8009248 <__lshift>
 800876e:	4621      	mov	r1, r4
 8008770:	4681      	mov	r9, r0
 8008772:	f000 fdd5 	bl	8009320 <__mcmp>
 8008776:	2800      	cmp	r0, #0
 8008778:	dc03      	bgt.n	8008782 <_dtoa_r+0xa52>
 800877a:	d1e1      	bne.n	8008740 <_dtoa_r+0xa10>
 800877c:	f018 0f01 	tst.w	r8, #1
 8008780:	d0de      	beq.n	8008740 <_dtoa_r+0xa10>
 8008782:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008786:	d1d8      	bne.n	800873a <_dtoa_r+0xa0a>
 8008788:	9a00      	ldr	r2, [sp, #0]
 800878a:	2339      	movs	r3, #57	@ 0x39
 800878c:	7013      	strb	r3, [r2, #0]
 800878e:	4633      	mov	r3, r6
 8008790:	461e      	mov	r6, r3
 8008792:	3b01      	subs	r3, #1
 8008794:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008798:	2a39      	cmp	r2, #57	@ 0x39
 800879a:	d052      	beq.n	8008842 <_dtoa_r+0xb12>
 800879c:	3201      	adds	r2, #1
 800879e:	701a      	strb	r2, [r3, #0]
 80087a0:	e612      	b.n	80083c8 <_dtoa_r+0x698>
 80087a2:	2a00      	cmp	r2, #0
 80087a4:	dd07      	ble.n	80087b6 <_dtoa_r+0xa86>
 80087a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80087aa:	d0ed      	beq.n	8008788 <_dtoa_r+0xa58>
 80087ac:	9a00      	ldr	r2, [sp, #0]
 80087ae:	f108 0301 	add.w	r3, r8, #1
 80087b2:	7013      	strb	r3, [r2, #0]
 80087b4:	e608      	b.n	80083c8 <_dtoa_r+0x698>
 80087b6:	9b07      	ldr	r3, [sp, #28]
 80087b8:	9a07      	ldr	r2, [sp, #28]
 80087ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 80087be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d028      	beq.n	8008816 <_dtoa_r+0xae6>
 80087c4:	4649      	mov	r1, r9
 80087c6:	2300      	movs	r3, #0
 80087c8:	220a      	movs	r2, #10
 80087ca:	4658      	mov	r0, fp
 80087cc:	f000 fb90 	bl	8008ef0 <__multadd>
 80087d0:	42af      	cmp	r7, r5
 80087d2:	4681      	mov	r9, r0
 80087d4:	f04f 0300 	mov.w	r3, #0
 80087d8:	f04f 020a 	mov.w	r2, #10
 80087dc:	4639      	mov	r1, r7
 80087de:	4658      	mov	r0, fp
 80087e0:	d107      	bne.n	80087f2 <_dtoa_r+0xac2>
 80087e2:	f000 fb85 	bl	8008ef0 <__multadd>
 80087e6:	4607      	mov	r7, r0
 80087e8:	4605      	mov	r5, r0
 80087ea:	9b07      	ldr	r3, [sp, #28]
 80087ec:	3301      	adds	r3, #1
 80087ee:	9307      	str	r3, [sp, #28]
 80087f0:	e774      	b.n	80086dc <_dtoa_r+0x9ac>
 80087f2:	f000 fb7d 	bl	8008ef0 <__multadd>
 80087f6:	4629      	mov	r1, r5
 80087f8:	4607      	mov	r7, r0
 80087fa:	2300      	movs	r3, #0
 80087fc:	220a      	movs	r2, #10
 80087fe:	4658      	mov	r0, fp
 8008800:	f000 fb76 	bl	8008ef0 <__multadd>
 8008804:	4605      	mov	r5, r0
 8008806:	e7f0      	b.n	80087ea <_dtoa_r+0xaba>
 8008808:	9b00      	ldr	r3, [sp, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	bfcc      	ite	gt
 800880e:	461e      	movgt	r6, r3
 8008810:	2601      	movle	r6, #1
 8008812:	4456      	add	r6, sl
 8008814:	2700      	movs	r7, #0
 8008816:	4649      	mov	r1, r9
 8008818:	2201      	movs	r2, #1
 800881a:	4658      	mov	r0, fp
 800881c:	f000 fd14 	bl	8009248 <__lshift>
 8008820:	4621      	mov	r1, r4
 8008822:	4681      	mov	r9, r0
 8008824:	f000 fd7c 	bl	8009320 <__mcmp>
 8008828:	2800      	cmp	r0, #0
 800882a:	dcb0      	bgt.n	800878e <_dtoa_r+0xa5e>
 800882c:	d102      	bne.n	8008834 <_dtoa_r+0xb04>
 800882e:	f018 0f01 	tst.w	r8, #1
 8008832:	d1ac      	bne.n	800878e <_dtoa_r+0xa5e>
 8008834:	4633      	mov	r3, r6
 8008836:	461e      	mov	r6, r3
 8008838:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800883c:	2a30      	cmp	r2, #48	@ 0x30
 800883e:	d0fa      	beq.n	8008836 <_dtoa_r+0xb06>
 8008840:	e5c2      	b.n	80083c8 <_dtoa_r+0x698>
 8008842:	459a      	cmp	sl, r3
 8008844:	d1a4      	bne.n	8008790 <_dtoa_r+0xa60>
 8008846:	9b04      	ldr	r3, [sp, #16]
 8008848:	3301      	adds	r3, #1
 800884a:	9304      	str	r3, [sp, #16]
 800884c:	2331      	movs	r3, #49	@ 0x31
 800884e:	f88a 3000 	strb.w	r3, [sl]
 8008852:	e5b9      	b.n	80083c8 <_dtoa_r+0x698>
 8008854:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008856:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80088b4 <_dtoa_r+0xb84>
 800885a:	b11b      	cbz	r3, 8008864 <_dtoa_r+0xb34>
 800885c:	f10a 0308 	add.w	r3, sl, #8
 8008860:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008862:	6013      	str	r3, [r2, #0]
 8008864:	4650      	mov	r0, sl
 8008866:	b019      	add	sp, #100	@ 0x64
 8008868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800886c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800886e:	2b01      	cmp	r3, #1
 8008870:	f77f ae37 	ble.w	80084e2 <_dtoa_r+0x7b2>
 8008874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008876:	930a      	str	r3, [sp, #40]	@ 0x28
 8008878:	2001      	movs	r0, #1
 800887a:	e655      	b.n	8008528 <_dtoa_r+0x7f8>
 800887c:	9b00      	ldr	r3, [sp, #0]
 800887e:	2b00      	cmp	r3, #0
 8008880:	f77f aed6 	ble.w	8008630 <_dtoa_r+0x900>
 8008884:	4656      	mov	r6, sl
 8008886:	4621      	mov	r1, r4
 8008888:	4648      	mov	r0, r9
 800888a:	f7ff f9c8 	bl	8007c1e <quorem>
 800888e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008892:	f806 8b01 	strb.w	r8, [r6], #1
 8008896:	9b00      	ldr	r3, [sp, #0]
 8008898:	eba6 020a 	sub.w	r2, r6, sl
 800889c:	4293      	cmp	r3, r2
 800889e:	ddb3      	ble.n	8008808 <_dtoa_r+0xad8>
 80088a0:	4649      	mov	r1, r9
 80088a2:	2300      	movs	r3, #0
 80088a4:	220a      	movs	r2, #10
 80088a6:	4658      	mov	r0, fp
 80088a8:	f000 fb22 	bl	8008ef0 <__multadd>
 80088ac:	4681      	mov	r9, r0
 80088ae:	e7ea      	b.n	8008886 <_dtoa_r+0xb56>
 80088b0:	0800a220 	.word	0x0800a220
 80088b4:	0800a1a4 	.word	0x0800a1a4

080088b8 <__ssputs_r>:
 80088b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088bc:	688e      	ldr	r6, [r1, #8]
 80088be:	461f      	mov	r7, r3
 80088c0:	42be      	cmp	r6, r7
 80088c2:	680b      	ldr	r3, [r1, #0]
 80088c4:	4682      	mov	sl, r0
 80088c6:	460c      	mov	r4, r1
 80088c8:	4690      	mov	r8, r2
 80088ca:	d82d      	bhi.n	8008928 <__ssputs_r+0x70>
 80088cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80088d4:	d026      	beq.n	8008924 <__ssputs_r+0x6c>
 80088d6:	6965      	ldr	r5, [r4, #20]
 80088d8:	6909      	ldr	r1, [r1, #16]
 80088da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80088de:	eba3 0901 	sub.w	r9, r3, r1
 80088e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088e6:	1c7b      	adds	r3, r7, #1
 80088e8:	444b      	add	r3, r9
 80088ea:	106d      	asrs	r5, r5, #1
 80088ec:	429d      	cmp	r5, r3
 80088ee:	bf38      	it	cc
 80088f0:	461d      	movcc	r5, r3
 80088f2:	0553      	lsls	r3, r2, #21
 80088f4:	d527      	bpl.n	8008946 <__ssputs_r+0x8e>
 80088f6:	4629      	mov	r1, r5
 80088f8:	f000 f960 	bl	8008bbc <_malloc_r>
 80088fc:	4606      	mov	r6, r0
 80088fe:	b360      	cbz	r0, 800895a <__ssputs_r+0xa2>
 8008900:	6921      	ldr	r1, [r4, #16]
 8008902:	464a      	mov	r2, r9
 8008904:	f7ff f97d 	bl	8007c02 <memcpy>
 8008908:	89a3      	ldrh	r3, [r4, #12]
 800890a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800890e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008912:	81a3      	strh	r3, [r4, #12]
 8008914:	6126      	str	r6, [r4, #16]
 8008916:	6165      	str	r5, [r4, #20]
 8008918:	444e      	add	r6, r9
 800891a:	eba5 0509 	sub.w	r5, r5, r9
 800891e:	6026      	str	r6, [r4, #0]
 8008920:	60a5      	str	r5, [r4, #8]
 8008922:	463e      	mov	r6, r7
 8008924:	42be      	cmp	r6, r7
 8008926:	d900      	bls.n	800892a <__ssputs_r+0x72>
 8008928:	463e      	mov	r6, r7
 800892a:	6820      	ldr	r0, [r4, #0]
 800892c:	4632      	mov	r2, r6
 800892e:	4641      	mov	r1, r8
 8008930:	f000 fe6f 	bl	8009612 <memmove>
 8008934:	68a3      	ldr	r3, [r4, #8]
 8008936:	1b9b      	subs	r3, r3, r6
 8008938:	60a3      	str	r3, [r4, #8]
 800893a:	6823      	ldr	r3, [r4, #0]
 800893c:	4433      	add	r3, r6
 800893e:	6023      	str	r3, [r4, #0]
 8008940:	2000      	movs	r0, #0
 8008942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008946:	462a      	mov	r2, r5
 8008948:	f000 fe35 	bl	80095b6 <_realloc_r>
 800894c:	4606      	mov	r6, r0
 800894e:	2800      	cmp	r0, #0
 8008950:	d1e0      	bne.n	8008914 <__ssputs_r+0x5c>
 8008952:	6921      	ldr	r1, [r4, #16]
 8008954:	4650      	mov	r0, sl
 8008956:	f000 feff 	bl	8009758 <_free_r>
 800895a:	230c      	movs	r3, #12
 800895c:	f8ca 3000 	str.w	r3, [sl]
 8008960:	89a3      	ldrh	r3, [r4, #12]
 8008962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008966:	81a3      	strh	r3, [r4, #12]
 8008968:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800896c:	e7e9      	b.n	8008942 <__ssputs_r+0x8a>
	...

08008970 <_svfiprintf_r>:
 8008970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008974:	4698      	mov	r8, r3
 8008976:	898b      	ldrh	r3, [r1, #12]
 8008978:	061b      	lsls	r3, r3, #24
 800897a:	b09d      	sub	sp, #116	@ 0x74
 800897c:	4607      	mov	r7, r0
 800897e:	460d      	mov	r5, r1
 8008980:	4614      	mov	r4, r2
 8008982:	d510      	bpl.n	80089a6 <_svfiprintf_r+0x36>
 8008984:	690b      	ldr	r3, [r1, #16]
 8008986:	b973      	cbnz	r3, 80089a6 <_svfiprintf_r+0x36>
 8008988:	2140      	movs	r1, #64	@ 0x40
 800898a:	f000 f917 	bl	8008bbc <_malloc_r>
 800898e:	6028      	str	r0, [r5, #0]
 8008990:	6128      	str	r0, [r5, #16]
 8008992:	b930      	cbnz	r0, 80089a2 <_svfiprintf_r+0x32>
 8008994:	230c      	movs	r3, #12
 8008996:	603b      	str	r3, [r7, #0]
 8008998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800899c:	b01d      	add	sp, #116	@ 0x74
 800899e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a2:	2340      	movs	r3, #64	@ 0x40
 80089a4:	616b      	str	r3, [r5, #20]
 80089a6:	2300      	movs	r3, #0
 80089a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80089aa:	2320      	movs	r3, #32
 80089ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80089b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80089b4:	2330      	movs	r3, #48	@ 0x30
 80089b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008b54 <_svfiprintf_r+0x1e4>
 80089ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80089be:	f04f 0901 	mov.w	r9, #1
 80089c2:	4623      	mov	r3, r4
 80089c4:	469a      	mov	sl, r3
 80089c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089ca:	b10a      	cbz	r2, 80089d0 <_svfiprintf_r+0x60>
 80089cc:	2a25      	cmp	r2, #37	@ 0x25
 80089ce:	d1f9      	bne.n	80089c4 <_svfiprintf_r+0x54>
 80089d0:	ebba 0b04 	subs.w	fp, sl, r4
 80089d4:	d00b      	beq.n	80089ee <_svfiprintf_r+0x7e>
 80089d6:	465b      	mov	r3, fp
 80089d8:	4622      	mov	r2, r4
 80089da:	4629      	mov	r1, r5
 80089dc:	4638      	mov	r0, r7
 80089de:	f7ff ff6b 	bl	80088b8 <__ssputs_r>
 80089e2:	3001      	adds	r0, #1
 80089e4:	f000 80a7 	beq.w	8008b36 <_svfiprintf_r+0x1c6>
 80089e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089ea:	445a      	add	r2, fp
 80089ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80089ee:	f89a 3000 	ldrb.w	r3, [sl]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	f000 809f 	beq.w	8008b36 <_svfiprintf_r+0x1c6>
 80089f8:	2300      	movs	r3, #0
 80089fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80089fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a02:	f10a 0a01 	add.w	sl, sl, #1
 8008a06:	9304      	str	r3, [sp, #16]
 8008a08:	9307      	str	r3, [sp, #28]
 8008a0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a10:	4654      	mov	r4, sl
 8008a12:	2205      	movs	r2, #5
 8008a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a18:	484e      	ldr	r0, [pc, #312]	@ (8008b54 <_svfiprintf_r+0x1e4>)
 8008a1a:	f7f7 fbd9 	bl	80001d0 <memchr>
 8008a1e:	9a04      	ldr	r2, [sp, #16]
 8008a20:	b9d8      	cbnz	r0, 8008a5a <_svfiprintf_r+0xea>
 8008a22:	06d0      	lsls	r0, r2, #27
 8008a24:	bf44      	itt	mi
 8008a26:	2320      	movmi	r3, #32
 8008a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a2c:	0711      	lsls	r1, r2, #28
 8008a2e:	bf44      	itt	mi
 8008a30:	232b      	movmi	r3, #43	@ 0x2b
 8008a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a36:	f89a 3000 	ldrb.w	r3, [sl]
 8008a3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a3c:	d015      	beq.n	8008a6a <_svfiprintf_r+0xfa>
 8008a3e:	9a07      	ldr	r2, [sp, #28]
 8008a40:	4654      	mov	r4, sl
 8008a42:	2000      	movs	r0, #0
 8008a44:	f04f 0c0a 	mov.w	ip, #10
 8008a48:	4621      	mov	r1, r4
 8008a4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a4e:	3b30      	subs	r3, #48	@ 0x30
 8008a50:	2b09      	cmp	r3, #9
 8008a52:	d94b      	bls.n	8008aec <_svfiprintf_r+0x17c>
 8008a54:	b1b0      	cbz	r0, 8008a84 <_svfiprintf_r+0x114>
 8008a56:	9207      	str	r2, [sp, #28]
 8008a58:	e014      	b.n	8008a84 <_svfiprintf_r+0x114>
 8008a5a:	eba0 0308 	sub.w	r3, r0, r8
 8008a5e:	fa09 f303 	lsl.w	r3, r9, r3
 8008a62:	4313      	orrs	r3, r2
 8008a64:	9304      	str	r3, [sp, #16]
 8008a66:	46a2      	mov	sl, r4
 8008a68:	e7d2      	b.n	8008a10 <_svfiprintf_r+0xa0>
 8008a6a:	9b03      	ldr	r3, [sp, #12]
 8008a6c:	1d19      	adds	r1, r3, #4
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	9103      	str	r1, [sp, #12]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	bfbb      	ittet	lt
 8008a76:	425b      	neglt	r3, r3
 8008a78:	f042 0202 	orrlt.w	r2, r2, #2
 8008a7c:	9307      	strge	r3, [sp, #28]
 8008a7e:	9307      	strlt	r3, [sp, #28]
 8008a80:	bfb8      	it	lt
 8008a82:	9204      	strlt	r2, [sp, #16]
 8008a84:	7823      	ldrb	r3, [r4, #0]
 8008a86:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a88:	d10a      	bne.n	8008aa0 <_svfiprintf_r+0x130>
 8008a8a:	7863      	ldrb	r3, [r4, #1]
 8008a8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a8e:	d132      	bne.n	8008af6 <_svfiprintf_r+0x186>
 8008a90:	9b03      	ldr	r3, [sp, #12]
 8008a92:	1d1a      	adds	r2, r3, #4
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	9203      	str	r2, [sp, #12]
 8008a98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a9c:	3402      	adds	r4, #2
 8008a9e:	9305      	str	r3, [sp, #20]
 8008aa0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008b64 <_svfiprintf_r+0x1f4>
 8008aa4:	7821      	ldrb	r1, [r4, #0]
 8008aa6:	2203      	movs	r2, #3
 8008aa8:	4650      	mov	r0, sl
 8008aaa:	f7f7 fb91 	bl	80001d0 <memchr>
 8008aae:	b138      	cbz	r0, 8008ac0 <_svfiprintf_r+0x150>
 8008ab0:	9b04      	ldr	r3, [sp, #16]
 8008ab2:	eba0 000a 	sub.w	r0, r0, sl
 8008ab6:	2240      	movs	r2, #64	@ 0x40
 8008ab8:	4082      	lsls	r2, r0
 8008aba:	4313      	orrs	r3, r2
 8008abc:	3401      	adds	r4, #1
 8008abe:	9304      	str	r3, [sp, #16]
 8008ac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ac4:	4824      	ldr	r0, [pc, #144]	@ (8008b58 <_svfiprintf_r+0x1e8>)
 8008ac6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008aca:	2206      	movs	r2, #6
 8008acc:	f7f7 fb80 	bl	80001d0 <memchr>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	d036      	beq.n	8008b42 <_svfiprintf_r+0x1d2>
 8008ad4:	4b21      	ldr	r3, [pc, #132]	@ (8008b5c <_svfiprintf_r+0x1ec>)
 8008ad6:	bb1b      	cbnz	r3, 8008b20 <_svfiprintf_r+0x1b0>
 8008ad8:	9b03      	ldr	r3, [sp, #12]
 8008ada:	3307      	adds	r3, #7
 8008adc:	f023 0307 	bic.w	r3, r3, #7
 8008ae0:	3308      	adds	r3, #8
 8008ae2:	9303      	str	r3, [sp, #12]
 8008ae4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ae6:	4433      	add	r3, r6
 8008ae8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008aea:	e76a      	b.n	80089c2 <_svfiprintf_r+0x52>
 8008aec:	fb0c 3202 	mla	r2, ip, r2, r3
 8008af0:	460c      	mov	r4, r1
 8008af2:	2001      	movs	r0, #1
 8008af4:	e7a8      	b.n	8008a48 <_svfiprintf_r+0xd8>
 8008af6:	2300      	movs	r3, #0
 8008af8:	3401      	adds	r4, #1
 8008afa:	9305      	str	r3, [sp, #20]
 8008afc:	4619      	mov	r1, r3
 8008afe:	f04f 0c0a 	mov.w	ip, #10
 8008b02:	4620      	mov	r0, r4
 8008b04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b08:	3a30      	subs	r2, #48	@ 0x30
 8008b0a:	2a09      	cmp	r2, #9
 8008b0c:	d903      	bls.n	8008b16 <_svfiprintf_r+0x1a6>
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d0c6      	beq.n	8008aa0 <_svfiprintf_r+0x130>
 8008b12:	9105      	str	r1, [sp, #20]
 8008b14:	e7c4      	b.n	8008aa0 <_svfiprintf_r+0x130>
 8008b16:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e7f0      	b.n	8008b02 <_svfiprintf_r+0x192>
 8008b20:	ab03      	add	r3, sp, #12
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	462a      	mov	r2, r5
 8008b26:	4b0e      	ldr	r3, [pc, #56]	@ (8008b60 <_svfiprintf_r+0x1f0>)
 8008b28:	a904      	add	r1, sp, #16
 8008b2a:	4638      	mov	r0, r7
 8008b2c:	f7fe fb82 	bl	8007234 <_printf_float>
 8008b30:	1c42      	adds	r2, r0, #1
 8008b32:	4606      	mov	r6, r0
 8008b34:	d1d6      	bne.n	8008ae4 <_svfiprintf_r+0x174>
 8008b36:	89ab      	ldrh	r3, [r5, #12]
 8008b38:	065b      	lsls	r3, r3, #25
 8008b3a:	f53f af2d 	bmi.w	8008998 <_svfiprintf_r+0x28>
 8008b3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b40:	e72c      	b.n	800899c <_svfiprintf_r+0x2c>
 8008b42:	ab03      	add	r3, sp, #12
 8008b44:	9300      	str	r3, [sp, #0]
 8008b46:	462a      	mov	r2, r5
 8008b48:	4b05      	ldr	r3, [pc, #20]	@ (8008b60 <_svfiprintf_r+0x1f0>)
 8008b4a:	a904      	add	r1, sp, #16
 8008b4c:	4638      	mov	r0, r7
 8008b4e:	f7fe fe09 	bl	8007764 <_printf_i>
 8008b52:	e7ed      	b.n	8008b30 <_svfiprintf_r+0x1c0>
 8008b54:	0800a231 	.word	0x0800a231
 8008b58:	0800a23b 	.word	0x0800a23b
 8008b5c:	08007235 	.word	0x08007235
 8008b60:	080088b9 	.word	0x080088b9
 8008b64:	0800a237 	.word	0x0800a237

08008b68 <malloc>:
 8008b68:	4b02      	ldr	r3, [pc, #8]	@ (8008b74 <malloc+0xc>)
 8008b6a:	4601      	mov	r1, r0
 8008b6c:	6818      	ldr	r0, [r3, #0]
 8008b6e:	f000 b825 	b.w	8008bbc <_malloc_r>
 8008b72:	bf00      	nop
 8008b74:	20000018 	.word	0x20000018

08008b78 <sbrk_aligned>:
 8008b78:	b570      	push	{r4, r5, r6, lr}
 8008b7a:	4e0f      	ldr	r6, [pc, #60]	@ (8008bb8 <sbrk_aligned+0x40>)
 8008b7c:	460c      	mov	r4, r1
 8008b7e:	6831      	ldr	r1, [r6, #0]
 8008b80:	4605      	mov	r5, r0
 8008b82:	b911      	cbnz	r1, 8008b8a <sbrk_aligned+0x12>
 8008b84:	f000 fd94 	bl	80096b0 <_sbrk_r>
 8008b88:	6030      	str	r0, [r6, #0]
 8008b8a:	4621      	mov	r1, r4
 8008b8c:	4628      	mov	r0, r5
 8008b8e:	f000 fd8f 	bl	80096b0 <_sbrk_r>
 8008b92:	1c43      	adds	r3, r0, #1
 8008b94:	d103      	bne.n	8008b9e <sbrk_aligned+0x26>
 8008b96:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008b9a:	4620      	mov	r0, r4
 8008b9c:	bd70      	pop	{r4, r5, r6, pc}
 8008b9e:	1cc4      	adds	r4, r0, #3
 8008ba0:	f024 0403 	bic.w	r4, r4, #3
 8008ba4:	42a0      	cmp	r0, r4
 8008ba6:	d0f8      	beq.n	8008b9a <sbrk_aligned+0x22>
 8008ba8:	1a21      	subs	r1, r4, r0
 8008baa:	4628      	mov	r0, r5
 8008bac:	f000 fd80 	bl	80096b0 <_sbrk_r>
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	d1f2      	bne.n	8008b9a <sbrk_aligned+0x22>
 8008bb4:	e7ef      	b.n	8008b96 <sbrk_aligned+0x1e>
 8008bb6:	bf00      	nop
 8008bb8:	20000abc 	.word	0x20000abc

08008bbc <_malloc_r>:
 8008bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bc0:	1ccd      	adds	r5, r1, #3
 8008bc2:	f025 0503 	bic.w	r5, r5, #3
 8008bc6:	3508      	adds	r5, #8
 8008bc8:	2d0c      	cmp	r5, #12
 8008bca:	bf38      	it	cc
 8008bcc:	250c      	movcc	r5, #12
 8008bce:	2d00      	cmp	r5, #0
 8008bd0:	4606      	mov	r6, r0
 8008bd2:	db01      	blt.n	8008bd8 <_malloc_r+0x1c>
 8008bd4:	42a9      	cmp	r1, r5
 8008bd6:	d904      	bls.n	8008be2 <_malloc_r+0x26>
 8008bd8:	230c      	movs	r3, #12
 8008bda:	6033      	str	r3, [r6, #0]
 8008bdc:	2000      	movs	r0, #0
 8008bde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008be2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008cb8 <_malloc_r+0xfc>
 8008be6:	f000 f915 	bl	8008e14 <__malloc_lock>
 8008bea:	f8d8 3000 	ldr.w	r3, [r8]
 8008bee:	461c      	mov	r4, r3
 8008bf0:	bb44      	cbnz	r4, 8008c44 <_malloc_r+0x88>
 8008bf2:	4629      	mov	r1, r5
 8008bf4:	4630      	mov	r0, r6
 8008bf6:	f7ff ffbf 	bl	8008b78 <sbrk_aligned>
 8008bfa:	1c43      	adds	r3, r0, #1
 8008bfc:	4604      	mov	r4, r0
 8008bfe:	d158      	bne.n	8008cb2 <_malloc_r+0xf6>
 8008c00:	f8d8 4000 	ldr.w	r4, [r8]
 8008c04:	4627      	mov	r7, r4
 8008c06:	2f00      	cmp	r7, #0
 8008c08:	d143      	bne.n	8008c92 <_malloc_r+0xd6>
 8008c0a:	2c00      	cmp	r4, #0
 8008c0c:	d04b      	beq.n	8008ca6 <_malloc_r+0xea>
 8008c0e:	6823      	ldr	r3, [r4, #0]
 8008c10:	4639      	mov	r1, r7
 8008c12:	4630      	mov	r0, r6
 8008c14:	eb04 0903 	add.w	r9, r4, r3
 8008c18:	f000 fd4a 	bl	80096b0 <_sbrk_r>
 8008c1c:	4581      	cmp	r9, r0
 8008c1e:	d142      	bne.n	8008ca6 <_malloc_r+0xea>
 8008c20:	6821      	ldr	r1, [r4, #0]
 8008c22:	1a6d      	subs	r5, r5, r1
 8008c24:	4629      	mov	r1, r5
 8008c26:	4630      	mov	r0, r6
 8008c28:	f7ff ffa6 	bl	8008b78 <sbrk_aligned>
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	d03a      	beq.n	8008ca6 <_malloc_r+0xea>
 8008c30:	6823      	ldr	r3, [r4, #0]
 8008c32:	442b      	add	r3, r5
 8008c34:	6023      	str	r3, [r4, #0]
 8008c36:	f8d8 3000 	ldr.w	r3, [r8]
 8008c3a:	685a      	ldr	r2, [r3, #4]
 8008c3c:	bb62      	cbnz	r2, 8008c98 <_malloc_r+0xdc>
 8008c3e:	f8c8 7000 	str.w	r7, [r8]
 8008c42:	e00f      	b.n	8008c64 <_malloc_r+0xa8>
 8008c44:	6822      	ldr	r2, [r4, #0]
 8008c46:	1b52      	subs	r2, r2, r5
 8008c48:	d420      	bmi.n	8008c8c <_malloc_r+0xd0>
 8008c4a:	2a0b      	cmp	r2, #11
 8008c4c:	d917      	bls.n	8008c7e <_malloc_r+0xc2>
 8008c4e:	1961      	adds	r1, r4, r5
 8008c50:	42a3      	cmp	r3, r4
 8008c52:	6025      	str	r5, [r4, #0]
 8008c54:	bf18      	it	ne
 8008c56:	6059      	strne	r1, [r3, #4]
 8008c58:	6863      	ldr	r3, [r4, #4]
 8008c5a:	bf08      	it	eq
 8008c5c:	f8c8 1000 	streq.w	r1, [r8]
 8008c60:	5162      	str	r2, [r4, r5]
 8008c62:	604b      	str	r3, [r1, #4]
 8008c64:	4630      	mov	r0, r6
 8008c66:	f000 f8db 	bl	8008e20 <__malloc_unlock>
 8008c6a:	f104 000b 	add.w	r0, r4, #11
 8008c6e:	1d23      	adds	r3, r4, #4
 8008c70:	f020 0007 	bic.w	r0, r0, #7
 8008c74:	1ac2      	subs	r2, r0, r3
 8008c76:	bf1c      	itt	ne
 8008c78:	1a1b      	subne	r3, r3, r0
 8008c7a:	50a3      	strne	r3, [r4, r2]
 8008c7c:	e7af      	b.n	8008bde <_malloc_r+0x22>
 8008c7e:	6862      	ldr	r2, [r4, #4]
 8008c80:	42a3      	cmp	r3, r4
 8008c82:	bf0c      	ite	eq
 8008c84:	f8c8 2000 	streq.w	r2, [r8]
 8008c88:	605a      	strne	r2, [r3, #4]
 8008c8a:	e7eb      	b.n	8008c64 <_malloc_r+0xa8>
 8008c8c:	4623      	mov	r3, r4
 8008c8e:	6864      	ldr	r4, [r4, #4]
 8008c90:	e7ae      	b.n	8008bf0 <_malloc_r+0x34>
 8008c92:	463c      	mov	r4, r7
 8008c94:	687f      	ldr	r7, [r7, #4]
 8008c96:	e7b6      	b.n	8008c06 <_malloc_r+0x4a>
 8008c98:	461a      	mov	r2, r3
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	42a3      	cmp	r3, r4
 8008c9e:	d1fb      	bne.n	8008c98 <_malloc_r+0xdc>
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	6053      	str	r3, [r2, #4]
 8008ca4:	e7de      	b.n	8008c64 <_malloc_r+0xa8>
 8008ca6:	230c      	movs	r3, #12
 8008ca8:	6033      	str	r3, [r6, #0]
 8008caa:	4630      	mov	r0, r6
 8008cac:	f000 f8b8 	bl	8008e20 <__malloc_unlock>
 8008cb0:	e794      	b.n	8008bdc <_malloc_r+0x20>
 8008cb2:	6005      	str	r5, [r0, #0]
 8008cb4:	e7d6      	b.n	8008c64 <_malloc_r+0xa8>
 8008cb6:	bf00      	nop
 8008cb8:	20000ac0 	.word	0x20000ac0

08008cbc <__sflush_r>:
 8008cbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc4:	0716      	lsls	r6, r2, #28
 8008cc6:	4605      	mov	r5, r0
 8008cc8:	460c      	mov	r4, r1
 8008cca:	d454      	bmi.n	8008d76 <__sflush_r+0xba>
 8008ccc:	684b      	ldr	r3, [r1, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	dc02      	bgt.n	8008cd8 <__sflush_r+0x1c>
 8008cd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	dd48      	ble.n	8008d6a <__sflush_r+0xae>
 8008cd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008cda:	2e00      	cmp	r6, #0
 8008cdc:	d045      	beq.n	8008d6a <__sflush_r+0xae>
 8008cde:	2300      	movs	r3, #0
 8008ce0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008ce4:	682f      	ldr	r7, [r5, #0]
 8008ce6:	6a21      	ldr	r1, [r4, #32]
 8008ce8:	602b      	str	r3, [r5, #0]
 8008cea:	d030      	beq.n	8008d4e <__sflush_r+0x92>
 8008cec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008cee:	89a3      	ldrh	r3, [r4, #12]
 8008cf0:	0759      	lsls	r1, r3, #29
 8008cf2:	d505      	bpl.n	8008d00 <__sflush_r+0x44>
 8008cf4:	6863      	ldr	r3, [r4, #4]
 8008cf6:	1ad2      	subs	r2, r2, r3
 8008cf8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008cfa:	b10b      	cbz	r3, 8008d00 <__sflush_r+0x44>
 8008cfc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008cfe:	1ad2      	subs	r2, r2, r3
 8008d00:	2300      	movs	r3, #0
 8008d02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d04:	6a21      	ldr	r1, [r4, #32]
 8008d06:	4628      	mov	r0, r5
 8008d08:	47b0      	blx	r6
 8008d0a:	1c43      	adds	r3, r0, #1
 8008d0c:	89a3      	ldrh	r3, [r4, #12]
 8008d0e:	d106      	bne.n	8008d1e <__sflush_r+0x62>
 8008d10:	6829      	ldr	r1, [r5, #0]
 8008d12:	291d      	cmp	r1, #29
 8008d14:	d82b      	bhi.n	8008d6e <__sflush_r+0xb2>
 8008d16:	4a2a      	ldr	r2, [pc, #168]	@ (8008dc0 <__sflush_r+0x104>)
 8008d18:	410a      	asrs	r2, r1
 8008d1a:	07d6      	lsls	r6, r2, #31
 8008d1c:	d427      	bmi.n	8008d6e <__sflush_r+0xb2>
 8008d1e:	2200      	movs	r2, #0
 8008d20:	6062      	str	r2, [r4, #4]
 8008d22:	04d9      	lsls	r1, r3, #19
 8008d24:	6922      	ldr	r2, [r4, #16]
 8008d26:	6022      	str	r2, [r4, #0]
 8008d28:	d504      	bpl.n	8008d34 <__sflush_r+0x78>
 8008d2a:	1c42      	adds	r2, r0, #1
 8008d2c:	d101      	bne.n	8008d32 <__sflush_r+0x76>
 8008d2e:	682b      	ldr	r3, [r5, #0]
 8008d30:	b903      	cbnz	r3, 8008d34 <__sflush_r+0x78>
 8008d32:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d34:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d36:	602f      	str	r7, [r5, #0]
 8008d38:	b1b9      	cbz	r1, 8008d6a <__sflush_r+0xae>
 8008d3a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d3e:	4299      	cmp	r1, r3
 8008d40:	d002      	beq.n	8008d48 <__sflush_r+0x8c>
 8008d42:	4628      	mov	r0, r5
 8008d44:	f000 fd08 	bl	8009758 <_free_r>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d4c:	e00d      	b.n	8008d6a <__sflush_r+0xae>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	4628      	mov	r0, r5
 8008d52:	47b0      	blx	r6
 8008d54:	4602      	mov	r2, r0
 8008d56:	1c50      	adds	r0, r2, #1
 8008d58:	d1c9      	bne.n	8008cee <__sflush_r+0x32>
 8008d5a:	682b      	ldr	r3, [r5, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d0c6      	beq.n	8008cee <__sflush_r+0x32>
 8008d60:	2b1d      	cmp	r3, #29
 8008d62:	d001      	beq.n	8008d68 <__sflush_r+0xac>
 8008d64:	2b16      	cmp	r3, #22
 8008d66:	d11e      	bne.n	8008da6 <__sflush_r+0xea>
 8008d68:	602f      	str	r7, [r5, #0]
 8008d6a:	2000      	movs	r0, #0
 8008d6c:	e022      	b.n	8008db4 <__sflush_r+0xf8>
 8008d6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d72:	b21b      	sxth	r3, r3
 8008d74:	e01b      	b.n	8008dae <__sflush_r+0xf2>
 8008d76:	690f      	ldr	r7, [r1, #16]
 8008d78:	2f00      	cmp	r7, #0
 8008d7a:	d0f6      	beq.n	8008d6a <__sflush_r+0xae>
 8008d7c:	0793      	lsls	r3, r2, #30
 8008d7e:	680e      	ldr	r6, [r1, #0]
 8008d80:	bf08      	it	eq
 8008d82:	694b      	ldreq	r3, [r1, #20]
 8008d84:	600f      	str	r7, [r1, #0]
 8008d86:	bf18      	it	ne
 8008d88:	2300      	movne	r3, #0
 8008d8a:	eba6 0807 	sub.w	r8, r6, r7
 8008d8e:	608b      	str	r3, [r1, #8]
 8008d90:	f1b8 0f00 	cmp.w	r8, #0
 8008d94:	dde9      	ble.n	8008d6a <__sflush_r+0xae>
 8008d96:	6a21      	ldr	r1, [r4, #32]
 8008d98:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008d9a:	4643      	mov	r3, r8
 8008d9c:	463a      	mov	r2, r7
 8008d9e:	4628      	mov	r0, r5
 8008da0:	47b0      	blx	r6
 8008da2:	2800      	cmp	r0, #0
 8008da4:	dc08      	bgt.n	8008db8 <__sflush_r+0xfc>
 8008da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008daa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dae:	81a3      	strh	r3, [r4, #12]
 8008db0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008db8:	4407      	add	r7, r0
 8008dba:	eba8 0800 	sub.w	r8, r8, r0
 8008dbe:	e7e7      	b.n	8008d90 <__sflush_r+0xd4>
 8008dc0:	dfbffffe 	.word	0xdfbffffe

08008dc4 <_fflush_r>:
 8008dc4:	b538      	push	{r3, r4, r5, lr}
 8008dc6:	690b      	ldr	r3, [r1, #16]
 8008dc8:	4605      	mov	r5, r0
 8008dca:	460c      	mov	r4, r1
 8008dcc:	b913      	cbnz	r3, 8008dd4 <_fflush_r+0x10>
 8008dce:	2500      	movs	r5, #0
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	bd38      	pop	{r3, r4, r5, pc}
 8008dd4:	b118      	cbz	r0, 8008dde <_fflush_r+0x1a>
 8008dd6:	6a03      	ldr	r3, [r0, #32]
 8008dd8:	b90b      	cbnz	r3, 8008dde <_fflush_r+0x1a>
 8008dda:	f7fe fea3 	bl	8007b24 <__sinit>
 8008dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d0f3      	beq.n	8008dce <_fflush_r+0xa>
 8008de6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008de8:	07d0      	lsls	r0, r2, #31
 8008dea:	d404      	bmi.n	8008df6 <_fflush_r+0x32>
 8008dec:	0599      	lsls	r1, r3, #22
 8008dee:	d402      	bmi.n	8008df6 <_fflush_r+0x32>
 8008df0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008df2:	f7fe ff04 	bl	8007bfe <__retarget_lock_acquire_recursive>
 8008df6:	4628      	mov	r0, r5
 8008df8:	4621      	mov	r1, r4
 8008dfa:	f7ff ff5f 	bl	8008cbc <__sflush_r>
 8008dfe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e00:	07da      	lsls	r2, r3, #31
 8008e02:	4605      	mov	r5, r0
 8008e04:	d4e4      	bmi.n	8008dd0 <_fflush_r+0xc>
 8008e06:	89a3      	ldrh	r3, [r4, #12]
 8008e08:	059b      	lsls	r3, r3, #22
 8008e0a:	d4e1      	bmi.n	8008dd0 <_fflush_r+0xc>
 8008e0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e0e:	f7fe fef7 	bl	8007c00 <__retarget_lock_release_recursive>
 8008e12:	e7dd      	b.n	8008dd0 <_fflush_r+0xc>

08008e14 <__malloc_lock>:
 8008e14:	4801      	ldr	r0, [pc, #4]	@ (8008e1c <__malloc_lock+0x8>)
 8008e16:	f7fe bef2 	b.w	8007bfe <__retarget_lock_acquire_recursive>
 8008e1a:	bf00      	nop
 8008e1c:	20000ab8 	.word	0x20000ab8

08008e20 <__malloc_unlock>:
 8008e20:	4801      	ldr	r0, [pc, #4]	@ (8008e28 <__malloc_unlock+0x8>)
 8008e22:	f7fe beed 	b.w	8007c00 <__retarget_lock_release_recursive>
 8008e26:	bf00      	nop
 8008e28:	20000ab8 	.word	0x20000ab8

08008e2c <_Balloc>:
 8008e2c:	b570      	push	{r4, r5, r6, lr}
 8008e2e:	69c6      	ldr	r6, [r0, #28]
 8008e30:	4604      	mov	r4, r0
 8008e32:	460d      	mov	r5, r1
 8008e34:	b976      	cbnz	r6, 8008e54 <_Balloc+0x28>
 8008e36:	2010      	movs	r0, #16
 8008e38:	f7ff fe96 	bl	8008b68 <malloc>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	61e0      	str	r0, [r4, #28]
 8008e40:	b920      	cbnz	r0, 8008e4c <_Balloc+0x20>
 8008e42:	4b18      	ldr	r3, [pc, #96]	@ (8008ea4 <_Balloc+0x78>)
 8008e44:	4818      	ldr	r0, [pc, #96]	@ (8008ea8 <_Balloc+0x7c>)
 8008e46:	216b      	movs	r1, #107	@ 0x6b
 8008e48:	f000 fc54 	bl	80096f4 <__assert_func>
 8008e4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e50:	6006      	str	r6, [r0, #0]
 8008e52:	60c6      	str	r6, [r0, #12]
 8008e54:	69e6      	ldr	r6, [r4, #28]
 8008e56:	68f3      	ldr	r3, [r6, #12]
 8008e58:	b183      	cbz	r3, 8008e7c <_Balloc+0x50>
 8008e5a:	69e3      	ldr	r3, [r4, #28]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e62:	b9b8      	cbnz	r0, 8008e94 <_Balloc+0x68>
 8008e64:	2101      	movs	r1, #1
 8008e66:	fa01 f605 	lsl.w	r6, r1, r5
 8008e6a:	1d72      	adds	r2, r6, #5
 8008e6c:	0092      	lsls	r2, r2, #2
 8008e6e:	4620      	mov	r0, r4
 8008e70:	f000 fc5e 	bl	8009730 <_calloc_r>
 8008e74:	b160      	cbz	r0, 8008e90 <_Balloc+0x64>
 8008e76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e7a:	e00e      	b.n	8008e9a <_Balloc+0x6e>
 8008e7c:	2221      	movs	r2, #33	@ 0x21
 8008e7e:	2104      	movs	r1, #4
 8008e80:	4620      	mov	r0, r4
 8008e82:	f000 fc55 	bl	8009730 <_calloc_r>
 8008e86:	69e3      	ldr	r3, [r4, #28]
 8008e88:	60f0      	str	r0, [r6, #12]
 8008e8a:	68db      	ldr	r3, [r3, #12]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1e4      	bne.n	8008e5a <_Balloc+0x2e>
 8008e90:	2000      	movs	r0, #0
 8008e92:	bd70      	pop	{r4, r5, r6, pc}
 8008e94:	6802      	ldr	r2, [r0, #0]
 8008e96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008ea0:	e7f7      	b.n	8008e92 <_Balloc+0x66>
 8008ea2:	bf00      	nop
 8008ea4:	0800a1b1 	.word	0x0800a1b1
 8008ea8:	0800a242 	.word	0x0800a242

08008eac <_Bfree>:
 8008eac:	b570      	push	{r4, r5, r6, lr}
 8008eae:	69c6      	ldr	r6, [r0, #28]
 8008eb0:	4605      	mov	r5, r0
 8008eb2:	460c      	mov	r4, r1
 8008eb4:	b976      	cbnz	r6, 8008ed4 <_Bfree+0x28>
 8008eb6:	2010      	movs	r0, #16
 8008eb8:	f7ff fe56 	bl	8008b68 <malloc>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	61e8      	str	r0, [r5, #28]
 8008ec0:	b920      	cbnz	r0, 8008ecc <_Bfree+0x20>
 8008ec2:	4b09      	ldr	r3, [pc, #36]	@ (8008ee8 <_Bfree+0x3c>)
 8008ec4:	4809      	ldr	r0, [pc, #36]	@ (8008eec <_Bfree+0x40>)
 8008ec6:	218f      	movs	r1, #143	@ 0x8f
 8008ec8:	f000 fc14 	bl	80096f4 <__assert_func>
 8008ecc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ed0:	6006      	str	r6, [r0, #0]
 8008ed2:	60c6      	str	r6, [r0, #12]
 8008ed4:	b13c      	cbz	r4, 8008ee6 <_Bfree+0x3a>
 8008ed6:	69eb      	ldr	r3, [r5, #28]
 8008ed8:	6862      	ldr	r2, [r4, #4]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ee0:	6021      	str	r1, [r4, #0]
 8008ee2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ee6:	bd70      	pop	{r4, r5, r6, pc}
 8008ee8:	0800a1b1 	.word	0x0800a1b1
 8008eec:	0800a242 	.word	0x0800a242

08008ef0 <__multadd>:
 8008ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef4:	690d      	ldr	r5, [r1, #16]
 8008ef6:	4607      	mov	r7, r0
 8008ef8:	460c      	mov	r4, r1
 8008efa:	461e      	mov	r6, r3
 8008efc:	f101 0c14 	add.w	ip, r1, #20
 8008f00:	2000      	movs	r0, #0
 8008f02:	f8dc 3000 	ldr.w	r3, [ip]
 8008f06:	b299      	uxth	r1, r3
 8008f08:	fb02 6101 	mla	r1, r2, r1, r6
 8008f0c:	0c1e      	lsrs	r6, r3, #16
 8008f0e:	0c0b      	lsrs	r3, r1, #16
 8008f10:	fb02 3306 	mla	r3, r2, r6, r3
 8008f14:	b289      	uxth	r1, r1
 8008f16:	3001      	adds	r0, #1
 8008f18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008f1c:	4285      	cmp	r5, r0
 8008f1e:	f84c 1b04 	str.w	r1, [ip], #4
 8008f22:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008f26:	dcec      	bgt.n	8008f02 <__multadd+0x12>
 8008f28:	b30e      	cbz	r6, 8008f6e <__multadd+0x7e>
 8008f2a:	68a3      	ldr	r3, [r4, #8]
 8008f2c:	42ab      	cmp	r3, r5
 8008f2e:	dc19      	bgt.n	8008f64 <__multadd+0x74>
 8008f30:	6861      	ldr	r1, [r4, #4]
 8008f32:	4638      	mov	r0, r7
 8008f34:	3101      	adds	r1, #1
 8008f36:	f7ff ff79 	bl	8008e2c <_Balloc>
 8008f3a:	4680      	mov	r8, r0
 8008f3c:	b928      	cbnz	r0, 8008f4a <__multadd+0x5a>
 8008f3e:	4602      	mov	r2, r0
 8008f40:	4b0c      	ldr	r3, [pc, #48]	@ (8008f74 <__multadd+0x84>)
 8008f42:	480d      	ldr	r0, [pc, #52]	@ (8008f78 <__multadd+0x88>)
 8008f44:	21ba      	movs	r1, #186	@ 0xba
 8008f46:	f000 fbd5 	bl	80096f4 <__assert_func>
 8008f4a:	6922      	ldr	r2, [r4, #16]
 8008f4c:	3202      	adds	r2, #2
 8008f4e:	f104 010c 	add.w	r1, r4, #12
 8008f52:	0092      	lsls	r2, r2, #2
 8008f54:	300c      	adds	r0, #12
 8008f56:	f7fe fe54 	bl	8007c02 <memcpy>
 8008f5a:	4621      	mov	r1, r4
 8008f5c:	4638      	mov	r0, r7
 8008f5e:	f7ff ffa5 	bl	8008eac <_Bfree>
 8008f62:	4644      	mov	r4, r8
 8008f64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f68:	3501      	adds	r5, #1
 8008f6a:	615e      	str	r6, [r3, #20]
 8008f6c:	6125      	str	r5, [r4, #16]
 8008f6e:	4620      	mov	r0, r4
 8008f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f74:	0800a220 	.word	0x0800a220
 8008f78:	0800a242 	.word	0x0800a242

08008f7c <__hi0bits>:
 8008f7c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008f80:	4603      	mov	r3, r0
 8008f82:	bf36      	itet	cc
 8008f84:	0403      	lslcc	r3, r0, #16
 8008f86:	2000      	movcs	r0, #0
 8008f88:	2010      	movcc	r0, #16
 8008f8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f8e:	bf3c      	itt	cc
 8008f90:	021b      	lslcc	r3, r3, #8
 8008f92:	3008      	addcc	r0, #8
 8008f94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f98:	bf3c      	itt	cc
 8008f9a:	011b      	lslcc	r3, r3, #4
 8008f9c:	3004      	addcc	r0, #4
 8008f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008fa2:	bf3c      	itt	cc
 8008fa4:	009b      	lslcc	r3, r3, #2
 8008fa6:	3002      	addcc	r0, #2
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	db05      	blt.n	8008fb8 <__hi0bits+0x3c>
 8008fac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008fb0:	f100 0001 	add.w	r0, r0, #1
 8008fb4:	bf08      	it	eq
 8008fb6:	2020      	moveq	r0, #32
 8008fb8:	4770      	bx	lr

08008fba <__lo0bits>:
 8008fba:	6803      	ldr	r3, [r0, #0]
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	f013 0007 	ands.w	r0, r3, #7
 8008fc2:	d00b      	beq.n	8008fdc <__lo0bits+0x22>
 8008fc4:	07d9      	lsls	r1, r3, #31
 8008fc6:	d421      	bmi.n	800900c <__lo0bits+0x52>
 8008fc8:	0798      	lsls	r0, r3, #30
 8008fca:	bf49      	itett	mi
 8008fcc:	085b      	lsrmi	r3, r3, #1
 8008fce:	089b      	lsrpl	r3, r3, #2
 8008fd0:	2001      	movmi	r0, #1
 8008fd2:	6013      	strmi	r3, [r2, #0]
 8008fd4:	bf5c      	itt	pl
 8008fd6:	6013      	strpl	r3, [r2, #0]
 8008fd8:	2002      	movpl	r0, #2
 8008fda:	4770      	bx	lr
 8008fdc:	b299      	uxth	r1, r3
 8008fde:	b909      	cbnz	r1, 8008fe4 <__lo0bits+0x2a>
 8008fe0:	0c1b      	lsrs	r3, r3, #16
 8008fe2:	2010      	movs	r0, #16
 8008fe4:	b2d9      	uxtb	r1, r3
 8008fe6:	b909      	cbnz	r1, 8008fec <__lo0bits+0x32>
 8008fe8:	3008      	adds	r0, #8
 8008fea:	0a1b      	lsrs	r3, r3, #8
 8008fec:	0719      	lsls	r1, r3, #28
 8008fee:	bf04      	itt	eq
 8008ff0:	091b      	lsreq	r3, r3, #4
 8008ff2:	3004      	addeq	r0, #4
 8008ff4:	0799      	lsls	r1, r3, #30
 8008ff6:	bf04      	itt	eq
 8008ff8:	089b      	lsreq	r3, r3, #2
 8008ffa:	3002      	addeq	r0, #2
 8008ffc:	07d9      	lsls	r1, r3, #31
 8008ffe:	d403      	bmi.n	8009008 <__lo0bits+0x4e>
 8009000:	085b      	lsrs	r3, r3, #1
 8009002:	f100 0001 	add.w	r0, r0, #1
 8009006:	d003      	beq.n	8009010 <__lo0bits+0x56>
 8009008:	6013      	str	r3, [r2, #0]
 800900a:	4770      	bx	lr
 800900c:	2000      	movs	r0, #0
 800900e:	4770      	bx	lr
 8009010:	2020      	movs	r0, #32
 8009012:	4770      	bx	lr

08009014 <__i2b>:
 8009014:	b510      	push	{r4, lr}
 8009016:	460c      	mov	r4, r1
 8009018:	2101      	movs	r1, #1
 800901a:	f7ff ff07 	bl	8008e2c <_Balloc>
 800901e:	4602      	mov	r2, r0
 8009020:	b928      	cbnz	r0, 800902e <__i2b+0x1a>
 8009022:	4b05      	ldr	r3, [pc, #20]	@ (8009038 <__i2b+0x24>)
 8009024:	4805      	ldr	r0, [pc, #20]	@ (800903c <__i2b+0x28>)
 8009026:	f240 1145 	movw	r1, #325	@ 0x145
 800902a:	f000 fb63 	bl	80096f4 <__assert_func>
 800902e:	2301      	movs	r3, #1
 8009030:	6144      	str	r4, [r0, #20]
 8009032:	6103      	str	r3, [r0, #16]
 8009034:	bd10      	pop	{r4, pc}
 8009036:	bf00      	nop
 8009038:	0800a220 	.word	0x0800a220
 800903c:	0800a242 	.word	0x0800a242

08009040 <__multiply>:
 8009040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009044:	4614      	mov	r4, r2
 8009046:	690a      	ldr	r2, [r1, #16]
 8009048:	6923      	ldr	r3, [r4, #16]
 800904a:	429a      	cmp	r2, r3
 800904c:	bfa8      	it	ge
 800904e:	4623      	movge	r3, r4
 8009050:	460f      	mov	r7, r1
 8009052:	bfa4      	itt	ge
 8009054:	460c      	movge	r4, r1
 8009056:	461f      	movge	r7, r3
 8009058:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800905c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009060:	68a3      	ldr	r3, [r4, #8]
 8009062:	6861      	ldr	r1, [r4, #4]
 8009064:	eb0a 0609 	add.w	r6, sl, r9
 8009068:	42b3      	cmp	r3, r6
 800906a:	b085      	sub	sp, #20
 800906c:	bfb8      	it	lt
 800906e:	3101      	addlt	r1, #1
 8009070:	f7ff fedc 	bl	8008e2c <_Balloc>
 8009074:	b930      	cbnz	r0, 8009084 <__multiply+0x44>
 8009076:	4602      	mov	r2, r0
 8009078:	4b44      	ldr	r3, [pc, #272]	@ (800918c <__multiply+0x14c>)
 800907a:	4845      	ldr	r0, [pc, #276]	@ (8009190 <__multiply+0x150>)
 800907c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009080:	f000 fb38 	bl	80096f4 <__assert_func>
 8009084:	f100 0514 	add.w	r5, r0, #20
 8009088:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800908c:	462b      	mov	r3, r5
 800908e:	2200      	movs	r2, #0
 8009090:	4543      	cmp	r3, r8
 8009092:	d321      	bcc.n	80090d8 <__multiply+0x98>
 8009094:	f107 0114 	add.w	r1, r7, #20
 8009098:	f104 0214 	add.w	r2, r4, #20
 800909c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80090a0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80090a4:	9302      	str	r3, [sp, #8]
 80090a6:	1b13      	subs	r3, r2, r4
 80090a8:	3b15      	subs	r3, #21
 80090aa:	f023 0303 	bic.w	r3, r3, #3
 80090ae:	3304      	adds	r3, #4
 80090b0:	f104 0715 	add.w	r7, r4, #21
 80090b4:	42ba      	cmp	r2, r7
 80090b6:	bf38      	it	cc
 80090b8:	2304      	movcc	r3, #4
 80090ba:	9301      	str	r3, [sp, #4]
 80090bc:	9b02      	ldr	r3, [sp, #8]
 80090be:	9103      	str	r1, [sp, #12]
 80090c0:	428b      	cmp	r3, r1
 80090c2:	d80c      	bhi.n	80090de <__multiply+0x9e>
 80090c4:	2e00      	cmp	r6, #0
 80090c6:	dd03      	ble.n	80090d0 <__multiply+0x90>
 80090c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d05b      	beq.n	8009188 <__multiply+0x148>
 80090d0:	6106      	str	r6, [r0, #16]
 80090d2:	b005      	add	sp, #20
 80090d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090d8:	f843 2b04 	str.w	r2, [r3], #4
 80090dc:	e7d8      	b.n	8009090 <__multiply+0x50>
 80090de:	f8b1 a000 	ldrh.w	sl, [r1]
 80090e2:	f1ba 0f00 	cmp.w	sl, #0
 80090e6:	d024      	beq.n	8009132 <__multiply+0xf2>
 80090e8:	f104 0e14 	add.w	lr, r4, #20
 80090ec:	46a9      	mov	r9, r5
 80090ee:	f04f 0c00 	mov.w	ip, #0
 80090f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80090f6:	f8d9 3000 	ldr.w	r3, [r9]
 80090fa:	fa1f fb87 	uxth.w	fp, r7
 80090fe:	b29b      	uxth	r3, r3
 8009100:	fb0a 330b 	mla	r3, sl, fp, r3
 8009104:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009108:	f8d9 7000 	ldr.w	r7, [r9]
 800910c:	4463      	add	r3, ip
 800910e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009112:	fb0a c70b 	mla	r7, sl, fp, ip
 8009116:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800911a:	b29b      	uxth	r3, r3
 800911c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009120:	4572      	cmp	r2, lr
 8009122:	f849 3b04 	str.w	r3, [r9], #4
 8009126:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800912a:	d8e2      	bhi.n	80090f2 <__multiply+0xb2>
 800912c:	9b01      	ldr	r3, [sp, #4]
 800912e:	f845 c003 	str.w	ip, [r5, r3]
 8009132:	9b03      	ldr	r3, [sp, #12]
 8009134:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009138:	3104      	adds	r1, #4
 800913a:	f1b9 0f00 	cmp.w	r9, #0
 800913e:	d021      	beq.n	8009184 <__multiply+0x144>
 8009140:	682b      	ldr	r3, [r5, #0]
 8009142:	f104 0c14 	add.w	ip, r4, #20
 8009146:	46ae      	mov	lr, r5
 8009148:	f04f 0a00 	mov.w	sl, #0
 800914c:	f8bc b000 	ldrh.w	fp, [ip]
 8009150:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009154:	fb09 770b 	mla	r7, r9, fp, r7
 8009158:	4457      	add	r7, sl
 800915a:	b29b      	uxth	r3, r3
 800915c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009160:	f84e 3b04 	str.w	r3, [lr], #4
 8009164:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009168:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800916c:	f8be 3000 	ldrh.w	r3, [lr]
 8009170:	fb09 330a 	mla	r3, r9, sl, r3
 8009174:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009178:	4562      	cmp	r2, ip
 800917a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800917e:	d8e5      	bhi.n	800914c <__multiply+0x10c>
 8009180:	9f01      	ldr	r7, [sp, #4]
 8009182:	51eb      	str	r3, [r5, r7]
 8009184:	3504      	adds	r5, #4
 8009186:	e799      	b.n	80090bc <__multiply+0x7c>
 8009188:	3e01      	subs	r6, #1
 800918a:	e79b      	b.n	80090c4 <__multiply+0x84>
 800918c:	0800a220 	.word	0x0800a220
 8009190:	0800a242 	.word	0x0800a242

08009194 <__pow5mult>:
 8009194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009198:	4615      	mov	r5, r2
 800919a:	f012 0203 	ands.w	r2, r2, #3
 800919e:	4607      	mov	r7, r0
 80091a0:	460e      	mov	r6, r1
 80091a2:	d007      	beq.n	80091b4 <__pow5mult+0x20>
 80091a4:	4c25      	ldr	r4, [pc, #148]	@ (800923c <__pow5mult+0xa8>)
 80091a6:	3a01      	subs	r2, #1
 80091a8:	2300      	movs	r3, #0
 80091aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80091ae:	f7ff fe9f 	bl	8008ef0 <__multadd>
 80091b2:	4606      	mov	r6, r0
 80091b4:	10ad      	asrs	r5, r5, #2
 80091b6:	d03d      	beq.n	8009234 <__pow5mult+0xa0>
 80091b8:	69fc      	ldr	r4, [r7, #28]
 80091ba:	b97c      	cbnz	r4, 80091dc <__pow5mult+0x48>
 80091bc:	2010      	movs	r0, #16
 80091be:	f7ff fcd3 	bl	8008b68 <malloc>
 80091c2:	4602      	mov	r2, r0
 80091c4:	61f8      	str	r0, [r7, #28]
 80091c6:	b928      	cbnz	r0, 80091d4 <__pow5mult+0x40>
 80091c8:	4b1d      	ldr	r3, [pc, #116]	@ (8009240 <__pow5mult+0xac>)
 80091ca:	481e      	ldr	r0, [pc, #120]	@ (8009244 <__pow5mult+0xb0>)
 80091cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80091d0:	f000 fa90 	bl	80096f4 <__assert_func>
 80091d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80091d8:	6004      	str	r4, [r0, #0]
 80091da:	60c4      	str	r4, [r0, #12]
 80091dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80091e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80091e4:	b94c      	cbnz	r4, 80091fa <__pow5mult+0x66>
 80091e6:	f240 2171 	movw	r1, #625	@ 0x271
 80091ea:	4638      	mov	r0, r7
 80091ec:	f7ff ff12 	bl	8009014 <__i2b>
 80091f0:	2300      	movs	r3, #0
 80091f2:	f8c8 0008 	str.w	r0, [r8, #8]
 80091f6:	4604      	mov	r4, r0
 80091f8:	6003      	str	r3, [r0, #0]
 80091fa:	f04f 0900 	mov.w	r9, #0
 80091fe:	07eb      	lsls	r3, r5, #31
 8009200:	d50a      	bpl.n	8009218 <__pow5mult+0x84>
 8009202:	4631      	mov	r1, r6
 8009204:	4622      	mov	r2, r4
 8009206:	4638      	mov	r0, r7
 8009208:	f7ff ff1a 	bl	8009040 <__multiply>
 800920c:	4631      	mov	r1, r6
 800920e:	4680      	mov	r8, r0
 8009210:	4638      	mov	r0, r7
 8009212:	f7ff fe4b 	bl	8008eac <_Bfree>
 8009216:	4646      	mov	r6, r8
 8009218:	106d      	asrs	r5, r5, #1
 800921a:	d00b      	beq.n	8009234 <__pow5mult+0xa0>
 800921c:	6820      	ldr	r0, [r4, #0]
 800921e:	b938      	cbnz	r0, 8009230 <__pow5mult+0x9c>
 8009220:	4622      	mov	r2, r4
 8009222:	4621      	mov	r1, r4
 8009224:	4638      	mov	r0, r7
 8009226:	f7ff ff0b 	bl	8009040 <__multiply>
 800922a:	6020      	str	r0, [r4, #0]
 800922c:	f8c0 9000 	str.w	r9, [r0]
 8009230:	4604      	mov	r4, r0
 8009232:	e7e4      	b.n	80091fe <__pow5mult+0x6a>
 8009234:	4630      	mov	r0, r6
 8009236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800923a:	bf00      	nop
 800923c:	0800a29c 	.word	0x0800a29c
 8009240:	0800a1b1 	.word	0x0800a1b1
 8009244:	0800a242 	.word	0x0800a242

08009248 <__lshift>:
 8009248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800924c:	460c      	mov	r4, r1
 800924e:	6849      	ldr	r1, [r1, #4]
 8009250:	6923      	ldr	r3, [r4, #16]
 8009252:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009256:	68a3      	ldr	r3, [r4, #8]
 8009258:	4607      	mov	r7, r0
 800925a:	4691      	mov	r9, r2
 800925c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009260:	f108 0601 	add.w	r6, r8, #1
 8009264:	42b3      	cmp	r3, r6
 8009266:	db0b      	blt.n	8009280 <__lshift+0x38>
 8009268:	4638      	mov	r0, r7
 800926a:	f7ff fddf 	bl	8008e2c <_Balloc>
 800926e:	4605      	mov	r5, r0
 8009270:	b948      	cbnz	r0, 8009286 <__lshift+0x3e>
 8009272:	4602      	mov	r2, r0
 8009274:	4b28      	ldr	r3, [pc, #160]	@ (8009318 <__lshift+0xd0>)
 8009276:	4829      	ldr	r0, [pc, #164]	@ (800931c <__lshift+0xd4>)
 8009278:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800927c:	f000 fa3a 	bl	80096f4 <__assert_func>
 8009280:	3101      	adds	r1, #1
 8009282:	005b      	lsls	r3, r3, #1
 8009284:	e7ee      	b.n	8009264 <__lshift+0x1c>
 8009286:	2300      	movs	r3, #0
 8009288:	f100 0114 	add.w	r1, r0, #20
 800928c:	f100 0210 	add.w	r2, r0, #16
 8009290:	4618      	mov	r0, r3
 8009292:	4553      	cmp	r3, sl
 8009294:	db33      	blt.n	80092fe <__lshift+0xb6>
 8009296:	6920      	ldr	r0, [r4, #16]
 8009298:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800929c:	f104 0314 	add.w	r3, r4, #20
 80092a0:	f019 091f 	ands.w	r9, r9, #31
 80092a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80092a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80092ac:	d02b      	beq.n	8009306 <__lshift+0xbe>
 80092ae:	f1c9 0e20 	rsb	lr, r9, #32
 80092b2:	468a      	mov	sl, r1
 80092b4:	2200      	movs	r2, #0
 80092b6:	6818      	ldr	r0, [r3, #0]
 80092b8:	fa00 f009 	lsl.w	r0, r0, r9
 80092bc:	4310      	orrs	r0, r2
 80092be:	f84a 0b04 	str.w	r0, [sl], #4
 80092c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80092c6:	459c      	cmp	ip, r3
 80092c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80092cc:	d8f3      	bhi.n	80092b6 <__lshift+0x6e>
 80092ce:	ebac 0304 	sub.w	r3, ip, r4
 80092d2:	3b15      	subs	r3, #21
 80092d4:	f023 0303 	bic.w	r3, r3, #3
 80092d8:	3304      	adds	r3, #4
 80092da:	f104 0015 	add.w	r0, r4, #21
 80092de:	4584      	cmp	ip, r0
 80092e0:	bf38      	it	cc
 80092e2:	2304      	movcc	r3, #4
 80092e4:	50ca      	str	r2, [r1, r3]
 80092e6:	b10a      	cbz	r2, 80092ec <__lshift+0xa4>
 80092e8:	f108 0602 	add.w	r6, r8, #2
 80092ec:	3e01      	subs	r6, #1
 80092ee:	4638      	mov	r0, r7
 80092f0:	612e      	str	r6, [r5, #16]
 80092f2:	4621      	mov	r1, r4
 80092f4:	f7ff fdda 	bl	8008eac <_Bfree>
 80092f8:	4628      	mov	r0, r5
 80092fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8009302:	3301      	adds	r3, #1
 8009304:	e7c5      	b.n	8009292 <__lshift+0x4a>
 8009306:	3904      	subs	r1, #4
 8009308:	f853 2b04 	ldr.w	r2, [r3], #4
 800930c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009310:	459c      	cmp	ip, r3
 8009312:	d8f9      	bhi.n	8009308 <__lshift+0xc0>
 8009314:	e7ea      	b.n	80092ec <__lshift+0xa4>
 8009316:	bf00      	nop
 8009318:	0800a220 	.word	0x0800a220
 800931c:	0800a242 	.word	0x0800a242

08009320 <__mcmp>:
 8009320:	690a      	ldr	r2, [r1, #16]
 8009322:	4603      	mov	r3, r0
 8009324:	6900      	ldr	r0, [r0, #16]
 8009326:	1a80      	subs	r0, r0, r2
 8009328:	b530      	push	{r4, r5, lr}
 800932a:	d10e      	bne.n	800934a <__mcmp+0x2a>
 800932c:	3314      	adds	r3, #20
 800932e:	3114      	adds	r1, #20
 8009330:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009334:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009338:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800933c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009340:	4295      	cmp	r5, r2
 8009342:	d003      	beq.n	800934c <__mcmp+0x2c>
 8009344:	d205      	bcs.n	8009352 <__mcmp+0x32>
 8009346:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800934a:	bd30      	pop	{r4, r5, pc}
 800934c:	42a3      	cmp	r3, r4
 800934e:	d3f3      	bcc.n	8009338 <__mcmp+0x18>
 8009350:	e7fb      	b.n	800934a <__mcmp+0x2a>
 8009352:	2001      	movs	r0, #1
 8009354:	e7f9      	b.n	800934a <__mcmp+0x2a>
	...

08009358 <__mdiff>:
 8009358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800935c:	4689      	mov	r9, r1
 800935e:	4606      	mov	r6, r0
 8009360:	4611      	mov	r1, r2
 8009362:	4648      	mov	r0, r9
 8009364:	4614      	mov	r4, r2
 8009366:	f7ff ffdb 	bl	8009320 <__mcmp>
 800936a:	1e05      	subs	r5, r0, #0
 800936c:	d112      	bne.n	8009394 <__mdiff+0x3c>
 800936e:	4629      	mov	r1, r5
 8009370:	4630      	mov	r0, r6
 8009372:	f7ff fd5b 	bl	8008e2c <_Balloc>
 8009376:	4602      	mov	r2, r0
 8009378:	b928      	cbnz	r0, 8009386 <__mdiff+0x2e>
 800937a:	4b3f      	ldr	r3, [pc, #252]	@ (8009478 <__mdiff+0x120>)
 800937c:	f240 2137 	movw	r1, #567	@ 0x237
 8009380:	483e      	ldr	r0, [pc, #248]	@ (800947c <__mdiff+0x124>)
 8009382:	f000 f9b7 	bl	80096f4 <__assert_func>
 8009386:	2301      	movs	r3, #1
 8009388:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800938c:	4610      	mov	r0, r2
 800938e:	b003      	add	sp, #12
 8009390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009394:	bfbc      	itt	lt
 8009396:	464b      	movlt	r3, r9
 8009398:	46a1      	movlt	r9, r4
 800939a:	4630      	mov	r0, r6
 800939c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80093a0:	bfba      	itte	lt
 80093a2:	461c      	movlt	r4, r3
 80093a4:	2501      	movlt	r5, #1
 80093a6:	2500      	movge	r5, #0
 80093a8:	f7ff fd40 	bl	8008e2c <_Balloc>
 80093ac:	4602      	mov	r2, r0
 80093ae:	b918      	cbnz	r0, 80093b8 <__mdiff+0x60>
 80093b0:	4b31      	ldr	r3, [pc, #196]	@ (8009478 <__mdiff+0x120>)
 80093b2:	f240 2145 	movw	r1, #581	@ 0x245
 80093b6:	e7e3      	b.n	8009380 <__mdiff+0x28>
 80093b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80093bc:	6926      	ldr	r6, [r4, #16]
 80093be:	60c5      	str	r5, [r0, #12]
 80093c0:	f109 0310 	add.w	r3, r9, #16
 80093c4:	f109 0514 	add.w	r5, r9, #20
 80093c8:	f104 0e14 	add.w	lr, r4, #20
 80093cc:	f100 0b14 	add.w	fp, r0, #20
 80093d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80093d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80093d8:	9301      	str	r3, [sp, #4]
 80093da:	46d9      	mov	r9, fp
 80093dc:	f04f 0c00 	mov.w	ip, #0
 80093e0:	9b01      	ldr	r3, [sp, #4]
 80093e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80093e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80093ea:	9301      	str	r3, [sp, #4]
 80093ec:	fa1f f38a 	uxth.w	r3, sl
 80093f0:	4619      	mov	r1, r3
 80093f2:	b283      	uxth	r3, r0
 80093f4:	1acb      	subs	r3, r1, r3
 80093f6:	0c00      	lsrs	r0, r0, #16
 80093f8:	4463      	add	r3, ip
 80093fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80093fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009402:	b29b      	uxth	r3, r3
 8009404:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009408:	4576      	cmp	r6, lr
 800940a:	f849 3b04 	str.w	r3, [r9], #4
 800940e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009412:	d8e5      	bhi.n	80093e0 <__mdiff+0x88>
 8009414:	1b33      	subs	r3, r6, r4
 8009416:	3b15      	subs	r3, #21
 8009418:	f023 0303 	bic.w	r3, r3, #3
 800941c:	3415      	adds	r4, #21
 800941e:	3304      	adds	r3, #4
 8009420:	42a6      	cmp	r6, r4
 8009422:	bf38      	it	cc
 8009424:	2304      	movcc	r3, #4
 8009426:	441d      	add	r5, r3
 8009428:	445b      	add	r3, fp
 800942a:	461e      	mov	r6, r3
 800942c:	462c      	mov	r4, r5
 800942e:	4544      	cmp	r4, r8
 8009430:	d30e      	bcc.n	8009450 <__mdiff+0xf8>
 8009432:	f108 0103 	add.w	r1, r8, #3
 8009436:	1b49      	subs	r1, r1, r5
 8009438:	f021 0103 	bic.w	r1, r1, #3
 800943c:	3d03      	subs	r5, #3
 800943e:	45a8      	cmp	r8, r5
 8009440:	bf38      	it	cc
 8009442:	2100      	movcc	r1, #0
 8009444:	440b      	add	r3, r1
 8009446:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800944a:	b191      	cbz	r1, 8009472 <__mdiff+0x11a>
 800944c:	6117      	str	r7, [r2, #16]
 800944e:	e79d      	b.n	800938c <__mdiff+0x34>
 8009450:	f854 1b04 	ldr.w	r1, [r4], #4
 8009454:	46e6      	mov	lr, ip
 8009456:	0c08      	lsrs	r0, r1, #16
 8009458:	fa1c fc81 	uxtah	ip, ip, r1
 800945c:	4471      	add	r1, lr
 800945e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009462:	b289      	uxth	r1, r1
 8009464:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009468:	f846 1b04 	str.w	r1, [r6], #4
 800946c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009470:	e7dd      	b.n	800942e <__mdiff+0xd6>
 8009472:	3f01      	subs	r7, #1
 8009474:	e7e7      	b.n	8009446 <__mdiff+0xee>
 8009476:	bf00      	nop
 8009478:	0800a220 	.word	0x0800a220
 800947c:	0800a242 	.word	0x0800a242

08009480 <__d2b>:
 8009480:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009484:	460f      	mov	r7, r1
 8009486:	2101      	movs	r1, #1
 8009488:	ec59 8b10 	vmov	r8, r9, d0
 800948c:	4616      	mov	r6, r2
 800948e:	f7ff fccd 	bl	8008e2c <_Balloc>
 8009492:	4604      	mov	r4, r0
 8009494:	b930      	cbnz	r0, 80094a4 <__d2b+0x24>
 8009496:	4602      	mov	r2, r0
 8009498:	4b23      	ldr	r3, [pc, #140]	@ (8009528 <__d2b+0xa8>)
 800949a:	4824      	ldr	r0, [pc, #144]	@ (800952c <__d2b+0xac>)
 800949c:	f240 310f 	movw	r1, #783	@ 0x30f
 80094a0:	f000 f928 	bl	80096f4 <__assert_func>
 80094a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80094a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094ac:	b10d      	cbz	r5, 80094b2 <__d2b+0x32>
 80094ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80094b2:	9301      	str	r3, [sp, #4]
 80094b4:	f1b8 0300 	subs.w	r3, r8, #0
 80094b8:	d023      	beq.n	8009502 <__d2b+0x82>
 80094ba:	4668      	mov	r0, sp
 80094bc:	9300      	str	r3, [sp, #0]
 80094be:	f7ff fd7c 	bl	8008fba <__lo0bits>
 80094c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80094c6:	b1d0      	cbz	r0, 80094fe <__d2b+0x7e>
 80094c8:	f1c0 0320 	rsb	r3, r0, #32
 80094cc:	fa02 f303 	lsl.w	r3, r2, r3
 80094d0:	430b      	orrs	r3, r1
 80094d2:	40c2      	lsrs	r2, r0
 80094d4:	6163      	str	r3, [r4, #20]
 80094d6:	9201      	str	r2, [sp, #4]
 80094d8:	9b01      	ldr	r3, [sp, #4]
 80094da:	61a3      	str	r3, [r4, #24]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	bf0c      	ite	eq
 80094e0:	2201      	moveq	r2, #1
 80094e2:	2202      	movne	r2, #2
 80094e4:	6122      	str	r2, [r4, #16]
 80094e6:	b1a5      	cbz	r5, 8009512 <__d2b+0x92>
 80094e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80094ec:	4405      	add	r5, r0
 80094ee:	603d      	str	r5, [r7, #0]
 80094f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80094f4:	6030      	str	r0, [r6, #0]
 80094f6:	4620      	mov	r0, r4
 80094f8:	b003      	add	sp, #12
 80094fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094fe:	6161      	str	r1, [r4, #20]
 8009500:	e7ea      	b.n	80094d8 <__d2b+0x58>
 8009502:	a801      	add	r0, sp, #4
 8009504:	f7ff fd59 	bl	8008fba <__lo0bits>
 8009508:	9b01      	ldr	r3, [sp, #4]
 800950a:	6163      	str	r3, [r4, #20]
 800950c:	3020      	adds	r0, #32
 800950e:	2201      	movs	r2, #1
 8009510:	e7e8      	b.n	80094e4 <__d2b+0x64>
 8009512:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009516:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800951a:	6038      	str	r0, [r7, #0]
 800951c:	6918      	ldr	r0, [r3, #16]
 800951e:	f7ff fd2d 	bl	8008f7c <__hi0bits>
 8009522:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009526:	e7e5      	b.n	80094f4 <__d2b+0x74>
 8009528:	0800a220 	.word	0x0800a220
 800952c:	0800a242 	.word	0x0800a242

08009530 <__sread>:
 8009530:	b510      	push	{r4, lr}
 8009532:	460c      	mov	r4, r1
 8009534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009538:	f000 f8a8 	bl	800968c <_read_r>
 800953c:	2800      	cmp	r0, #0
 800953e:	bfab      	itete	ge
 8009540:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009542:	89a3      	ldrhlt	r3, [r4, #12]
 8009544:	181b      	addge	r3, r3, r0
 8009546:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800954a:	bfac      	ite	ge
 800954c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800954e:	81a3      	strhlt	r3, [r4, #12]
 8009550:	bd10      	pop	{r4, pc}

08009552 <__swrite>:
 8009552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009556:	461f      	mov	r7, r3
 8009558:	898b      	ldrh	r3, [r1, #12]
 800955a:	05db      	lsls	r3, r3, #23
 800955c:	4605      	mov	r5, r0
 800955e:	460c      	mov	r4, r1
 8009560:	4616      	mov	r6, r2
 8009562:	d505      	bpl.n	8009570 <__swrite+0x1e>
 8009564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009568:	2302      	movs	r3, #2
 800956a:	2200      	movs	r2, #0
 800956c:	f000 f87c 	bl	8009668 <_lseek_r>
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009576:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800957a:	81a3      	strh	r3, [r4, #12]
 800957c:	4632      	mov	r2, r6
 800957e:	463b      	mov	r3, r7
 8009580:	4628      	mov	r0, r5
 8009582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009586:	f000 b8a3 	b.w	80096d0 <_write_r>

0800958a <__sseek>:
 800958a:	b510      	push	{r4, lr}
 800958c:	460c      	mov	r4, r1
 800958e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009592:	f000 f869 	bl	8009668 <_lseek_r>
 8009596:	1c43      	adds	r3, r0, #1
 8009598:	89a3      	ldrh	r3, [r4, #12]
 800959a:	bf15      	itete	ne
 800959c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800959e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80095a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80095a6:	81a3      	strheq	r3, [r4, #12]
 80095a8:	bf18      	it	ne
 80095aa:	81a3      	strhne	r3, [r4, #12]
 80095ac:	bd10      	pop	{r4, pc}

080095ae <__sclose>:
 80095ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095b2:	f000 b849 	b.w	8009648 <_close_r>

080095b6 <_realloc_r>:
 80095b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095ba:	4680      	mov	r8, r0
 80095bc:	4615      	mov	r5, r2
 80095be:	460c      	mov	r4, r1
 80095c0:	b921      	cbnz	r1, 80095cc <_realloc_r+0x16>
 80095c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095c6:	4611      	mov	r1, r2
 80095c8:	f7ff baf8 	b.w	8008bbc <_malloc_r>
 80095cc:	b92a      	cbnz	r2, 80095da <_realloc_r+0x24>
 80095ce:	f000 f8c3 	bl	8009758 <_free_r>
 80095d2:	2400      	movs	r4, #0
 80095d4:	4620      	mov	r0, r4
 80095d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095da:	f000 f919 	bl	8009810 <_malloc_usable_size_r>
 80095de:	4285      	cmp	r5, r0
 80095e0:	4606      	mov	r6, r0
 80095e2:	d802      	bhi.n	80095ea <_realloc_r+0x34>
 80095e4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80095e8:	d8f4      	bhi.n	80095d4 <_realloc_r+0x1e>
 80095ea:	4629      	mov	r1, r5
 80095ec:	4640      	mov	r0, r8
 80095ee:	f7ff fae5 	bl	8008bbc <_malloc_r>
 80095f2:	4607      	mov	r7, r0
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d0ec      	beq.n	80095d2 <_realloc_r+0x1c>
 80095f8:	42b5      	cmp	r5, r6
 80095fa:	462a      	mov	r2, r5
 80095fc:	4621      	mov	r1, r4
 80095fe:	bf28      	it	cs
 8009600:	4632      	movcs	r2, r6
 8009602:	f7fe fafe 	bl	8007c02 <memcpy>
 8009606:	4621      	mov	r1, r4
 8009608:	4640      	mov	r0, r8
 800960a:	f000 f8a5 	bl	8009758 <_free_r>
 800960e:	463c      	mov	r4, r7
 8009610:	e7e0      	b.n	80095d4 <_realloc_r+0x1e>

08009612 <memmove>:
 8009612:	4288      	cmp	r0, r1
 8009614:	b510      	push	{r4, lr}
 8009616:	eb01 0402 	add.w	r4, r1, r2
 800961a:	d902      	bls.n	8009622 <memmove+0x10>
 800961c:	4284      	cmp	r4, r0
 800961e:	4623      	mov	r3, r4
 8009620:	d807      	bhi.n	8009632 <memmove+0x20>
 8009622:	1e43      	subs	r3, r0, #1
 8009624:	42a1      	cmp	r1, r4
 8009626:	d008      	beq.n	800963a <memmove+0x28>
 8009628:	f811 2b01 	ldrb.w	r2, [r1], #1
 800962c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009630:	e7f8      	b.n	8009624 <memmove+0x12>
 8009632:	4402      	add	r2, r0
 8009634:	4601      	mov	r1, r0
 8009636:	428a      	cmp	r2, r1
 8009638:	d100      	bne.n	800963c <memmove+0x2a>
 800963a:	bd10      	pop	{r4, pc}
 800963c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009640:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009644:	e7f7      	b.n	8009636 <memmove+0x24>
	...

08009648 <_close_r>:
 8009648:	b538      	push	{r3, r4, r5, lr}
 800964a:	4d06      	ldr	r5, [pc, #24]	@ (8009664 <_close_r+0x1c>)
 800964c:	2300      	movs	r3, #0
 800964e:	4604      	mov	r4, r0
 8009650:	4608      	mov	r0, r1
 8009652:	602b      	str	r3, [r5, #0]
 8009654:	f7f9 f95b 	bl	800290e <_close>
 8009658:	1c43      	adds	r3, r0, #1
 800965a:	d102      	bne.n	8009662 <_close_r+0x1a>
 800965c:	682b      	ldr	r3, [r5, #0]
 800965e:	b103      	cbz	r3, 8009662 <_close_r+0x1a>
 8009660:	6023      	str	r3, [r4, #0]
 8009662:	bd38      	pop	{r3, r4, r5, pc}
 8009664:	20000ac4 	.word	0x20000ac4

08009668 <_lseek_r>:
 8009668:	b538      	push	{r3, r4, r5, lr}
 800966a:	4d07      	ldr	r5, [pc, #28]	@ (8009688 <_lseek_r+0x20>)
 800966c:	4604      	mov	r4, r0
 800966e:	4608      	mov	r0, r1
 8009670:	4611      	mov	r1, r2
 8009672:	2200      	movs	r2, #0
 8009674:	602a      	str	r2, [r5, #0]
 8009676:	461a      	mov	r2, r3
 8009678:	f7f9 f970 	bl	800295c <_lseek>
 800967c:	1c43      	adds	r3, r0, #1
 800967e:	d102      	bne.n	8009686 <_lseek_r+0x1e>
 8009680:	682b      	ldr	r3, [r5, #0]
 8009682:	b103      	cbz	r3, 8009686 <_lseek_r+0x1e>
 8009684:	6023      	str	r3, [r4, #0]
 8009686:	bd38      	pop	{r3, r4, r5, pc}
 8009688:	20000ac4 	.word	0x20000ac4

0800968c <_read_r>:
 800968c:	b538      	push	{r3, r4, r5, lr}
 800968e:	4d07      	ldr	r5, [pc, #28]	@ (80096ac <_read_r+0x20>)
 8009690:	4604      	mov	r4, r0
 8009692:	4608      	mov	r0, r1
 8009694:	4611      	mov	r1, r2
 8009696:	2200      	movs	r2, #0
 8009698:	602a      	str	r2, [r5, #0]
 800969a:	461a      	mov	r2, r3
 800969c:	f7f9 f8fe 	bl	800289c <_read>
 80096a0:	1c43      	adds	r3, r0, #1
 80096a2:	d102      	bne.n	80096aa <_read_r+0x1e>
 80096a4:	682b      	ldr	r3, [r5, #0]
 80096a6:	b103      	cbz	r3, 80096aa <_read_r+0x1e>
 80096a8:	6023      	str	r3, [r4, #0]
 80096aa:	bd38      	pop	{r3, r4, r5, pc}
 80096ac:	20000ac4 	.word	0x20000ac4

080096b0 <_sbrk_r>:
 80096b0:	b538      	push	{r3, r4, r5, lr}
 80096b2:	4d06      	ldr	r5, [pc, #24]	@ (80096cc <_sbrk_r+0x1c>)
 80096b4:	2300      	movs	r3, #0
 80096b6:	4604      	mov	r4, r0
 80096b8:	4608      	mov	r0, r1
 80096ba:	602b      	str	r3, [r5, #0]
 80096bc:	f7f9 f95c 	bl	8002978 <_sbrk>
 80096c0:	1c43      	adds	r3, r0, #1
 80096c2:	d102      	bne.n	80096ca <_sbrk_r+0x1a>
 80096c4:	682b      	ldr	r3, [r5, #0]
 80096c6:	b103      	cbz	r3, 80096ca <_sbrk_r+0x1a>
 80096c8:	6023      	str	r3, [r4, #0]
 80096ca:	bd38      	pop	{r3, r4, r5, pc}
 80096cc:	20000ac4 	.word	0x20000ac4

080096d0 <_write_r>:
 80096d0:	b538      	push	{r3, r4, r5, lr}
 80096d2:	4d07      	ldr	r5, [pc, #28]	@ (80096f0 <_write_r+0x20>)
 80096d4:	4604      	mov	r4, r0
 80096d6:	4608      	mov	r0, r1
 80096d8:	4611      	mov	r1, r2
 80096da:	2200      	movs	r2, #0
 80096dc:	602a      	str	r2, [r5, #0]
 80096de:	461a      	mov	r2, r3
 80096e0:	f7f9 f8f9 	bl	80028d6 <_write>
 80096e4:	1c43      	adds	r3, r0, #1
 80096e6:	d102      	bne.n	80096ee <_write_r+0x1e>
 80096e8:	682b      	ldr	r3, [r5, #0]
 80096ea:	b103      	cbz	r3, 80096ee <_write_r+0x1e>
 80096ec:	6023      	str	r3, [r4, #0]
 80096ee:	bd38      	pop	{r3, r4, r5, pc}
 80096f0:	20000ac4 	.word	0x20000ac4

080096f4 <__assert_func>:
 80096f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096f6:	4614      	mov	r4, r2
 80096f8:	461a      	mov	r2, r3
 80096fa:	4b09      	ldr	r3, [pc, #36]	@ (8009720 <__assert_func+0x2c>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4605      	mov	r5, r0
 8009700:	68d8      	ldr	r0, [r3, #12]
 8009702:	b954      	cbnz	r4, 800971a <__assert_func+0x26>
 8009704:	4b07      	ldr	r3, [pc, #28]	@ (8009724 <__assert_func+0x30>)
 8009706:	461c      	mov	r4, r3
 8009708:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800970c:	9100      	str	r1, [sp, #0]
 800970e:	462b      	mov	r3, r5
 8009710:	4905      	ldr	r1, [pc, #20]	@ (8009728 <__assert_func+0x34>)
 8009712:	f000 f885 	bl	8009820 <fiprintf>
 8009716:	f000 f8a2 	bl	800985e <abort>
 800971a:	4b04      	ldr	r3, [pc, #16]	@ (800972c <__assert_func+0x38>)
 800971c:	e7f4      	b.n	8009708 <__assert_func+0x14>
 800971e:	bf00      	nop
 8009720:	20000018 	.word	0x20000018
 8009724:	0800a4de 	.word	0x0800a4de
 8009728:	0800a4b0 	.word	0x0800a4b0
 800972c:	0800a4a3 	.word	0x0800a4a3

08009730 <_calloc_r>:
 8009730:	b570      	push	{r4, r5, r6, lr}
 8009732:	fba1 5402 	umull	r5, r4, r1, r2
 8009736:	b93c      	cbnz	r4, 8009748 <_calloc_r+0x18>
 8009738:	4629      	mov	r1, r5
 800973a:	f7ff fa3f 	bl	8008bbc <_malloc_r>
 800973e:	4606      	mov	r6, r0
 8009740:	b928      	cbnz	r0, 800974e <_calloc_r+0x1e>
 8009742:	2600      	movs	r6, #0
 8009744:	4630      	mov	r0, r6
 8009746:	bd70      	pop	{r4, r5, r6, pc}
 8009748:	220c      	movs	r2, #12
 800974a:	6002      	str	r2, [r0, #0]
 800974c:	e7f9      	b.n	8009742 <_calloc_r+0x12>
 800974e:	462a      	mov	r2, r5
 8009750:	4621      	mov	r1, r4
 8009752:	f7fe fa1d 	bl	8007b90 <memset>
 8009756:	e7f5      	b.n	8009744 <_calloc_r+0x14>

08009758 <_free_r>:
 8009758:	b538      	push	{r3, r4, r5, lr}
 800975a:	4605      	mov	r5, r0
 800975c:	2900      	cmp	r1, #0
 800975e:	d041      	beq.n	80097e4 <_free_r+0x8c>
 8009760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009764:	1f0c      	subs	r4, r1, #4
 8009766:	2b00      	cmp	r3, #0
 8009768:	bfb8      	it	lt
 800976a:	18e4      	addlt	r4, r4, r3
 800976c:	f7ff fb52 	bl	8008e14 <__malloc_lock>
 8009770:	4a1d      	ldr	r2, [pc, #116]	@ (80097e8 <_free_r+0x90>)
 8009772:	6813      	ldr	r3, [r2, #0]
 8009774:	b933      	cbnz	r3, 8009784 <_free_r+0x2c>
 8009776:	6063      	str	r3, [r4, #4]
 8009778:	6014      	str	r4, [r2, #0]
 800977a:	4628      	mov	r0, r5
 800977c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009780:	f7ff bb4e 	b.w	8008e20 <__malloc_unlock>
 8009784:	42a3      	cmp	r3, r4
 8009786:	d908      	bls.n	800979a <_free_r+0x42>
 8009788:	6820      	ldr	r0, [r4, #0]
 800978a:	1821      	adds	r1, r4, r0
 800978c:	428b      	cmp	r3, r1
 800978e:	bf01      	itttt	eq
 8009790:	6819      	ldreq	r1, [r3, #0]
 8009792:	685b      	ldreq	r3, [r3, #4]
 8009794:	1809      	addeq	r1, r1, r0
 8009796:	6021      	streq	r1, [r4, #0]
 8009798:	e7ed      	b.n	8009776 <_free_r+0x1e>
 800979a:	461a      	mov	r2, r3
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	b10b      	cbz	r3, 80097a4 <_free_r+0x4c>
 80097a0:	42a3      	cmp	r3, r4
 80097a2:	d9fa      	bls.n	800979a <_free_r+0x42>
 80097a4:	6811      	ldr	r1, [r2, #0]
 80097a6:	1850      	adds	r0, r2, r1
 80097a8:	42a0      	cmp	r0, r4
 80097aa:	d10b      	bne.n	80097c4 <_free_r+0x6c>
 80097ac:	6820      	ldr	r0, [r4, #0]
 80097ae:	4401      	add	r1, r0
 80097b0:	1850      	adds	r0, r2, r1
 80097b2:	4283      	cmp	r3, r0
 80097b4:	6011      	str	r1, [r2, #0]
 80097b6:	d1e0      	bne.n	800977a <_free_r+0x22>
 80097b8:	6818      	ldr	r0, [r3, #0]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	6053      	str	r3, [r2, #4]
 80097be:	4408      	add	r0, r1
 80097c0:	6010      	str	r0, [r2, #0]
 80097c2:	e7da      	b.n	800977a <_free_r+0x22>
 80097c4:	d902      	bls.n	80097cc <_free_r+0x74>
 80097c6:	230c      	movs	r3, #12
 80097c8:	602b      	str	r3, [r5, #0]
 80097ca:	e7d6      	b.n	800977a <_free_r+0x22>
 80097cc:	6820      	ldr	r0, [r4, #0]
 80097ce:	1821      	adds	r1, r4, r0
 80097d0:	428b      	cmp	r3, r1
 80097d2:	bf04      	itt	eq
 80097d4:	6819      	ldreq	r1, [r3, #0]
 80097d6:	685b      	ldreq	r3, [r3, #4]
 80097d8:	6063      	str	r3, [r4, #4]
 80097da:	bf04      	itt	eq
 80097dc:	1809      	addeq	r1, r1, r0
 80097de:	6021      	streq	r1, [r4, #0]
 80097e0:	6054      	str	r4, [r2, #4]
 80097e2:	e7ca      	b.n	800977a <_free_r+0x22>
 80097e4:	bd38      	pop	{r3, r4, r5, pc}
 80097e6:	bf00      	nop
 80097e8:	20000ac0 	.word	0x20000ac0

080097ec <__ascii_mbtowc>:
 80097ec:	b082      	sub	sp, #8
 80097ee:	b901      	cbnz	r1, 80097f2 <__ascii_mbtowc+0x6>
 80097f0:	a901      	add	r1, sp, #4
 80097f2:	b142      	cbz	r2, 8009806 <__ascii_mbtowc+0x1a>
 80097f4:	b14b      	cbz	r3, 800980a <__ascii_mbtowc+0x1e>
 80097f6:	7813      	ldrb	r3, [r2, #0]
 80097f8:	600b      	str	r3, [r1, #0]
 80097fa:	7812      	ldrb	r2, [r2, #0]
 80097fc:	1e10      	subs	r0, r2, #0
 80097fe:	bf18      	it	ne
 8009800:	2001      	movne	r0, #1
 8009802:	b002      	add	sp, #8
 8009804:	4770      	bx	lr
 8009806:	4610      	mov	r0, r2
 8009808:	e7fb      	b.n	8009802 <__ascii_mbtowc+0x16>
 800980a:	f06f 0001 	mvn.w	r0, #1
 800980e:	e7f8      	b.n	8009802 <__ascii_mbtowc+0x16>

08009810 <_malloc_usable_size_r>:
 8009810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009814:	1f18      	subs	r0, r3, #4
 8009816:	2b00      	cmp	r3, #0
 8009818:	bfbc      	itt	lt
 800981a:	580b      	ldrlt	r3, [r1, r0]
 800981c:	18c0      	addlt	r0, r0, r3
 800981e:	4770      	bx	lr

08009820 <fiprintf>:
 8009820:	b40e      	push	{r1, r2, r3}
 8009822:	b503      	push	{r0, r1, lr}
 8009824:	4601      	mov	r1, r0
 8009826:	ab03      	add	r3, sp, #12
 8009828:	4805      	ldr	r0, [pc, #20]	@ (8009840 <fiprintf+0x20>)
 800982a:	f853 2b04 	ldr.w	r2, [r3], #4
 800982e:	6800      	ldr	r0, [r0, #0]
 8009830:	9301      	str	r3, [sp, #4]
 8009832:	f000 f845 	bl	80098c0 <_vfiprintf_r>
 8009836:	b002      	add	sp, #8
 8009838:	f85d eb04 	ldr.w	lr, [sp], #4
 800983c:	b003      	add	sp, #12
 800983e:	4770      	bx	lr
 8009840:	20000018 	.word	0x20000018

08009844 <__ascii_wctomb>:
 8009844:	4603      	mov	r3, r0
 8009846:	4608      	mov	r0, r1
 8009848:	b141      	cbz	r1, 800985c <__ascii_wctomb+0x18>
 800984a:	2aff      	cmp	r2, #255	@ 0xff
 800984c:	d904      	bls.n	8009858 <__ascii_wctomb+0x14>
 800984e:	228a      	movs	r2, #138	@ 0x8a
 8009850:	601a      	str	r2, [r3, #0]
 8009852:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009856:	4770      	bx	lr
 8009858:	700a      	strb	r2, [r1, #0]
 800985a:	2001      	movs	r0, #1
 800985c:	4770      	bx	lr

0800985e <abort>:
 800985e:	b508      	push	{r3, lr}
 8009860:	2006      	movs	r0, #6
 8009862:	f000 fa85 	bl	8009d70 <raise>
 8009866:	2001      	movs	r0, #1
 8009868:	f7f9 f80d 	bl	8002886 <_exit>

0800986c <__sfputc_r>:
 800986c:	6893      	ldr	r3, [r2, #8]
 800986e:	3b01      	subs	r3, #1
 8009870:	2b00      	cmp	r3, #0
 8009872:	b410      	push	{r4}
 8009874:	6093      	str	r3, [r2, #8]
 8009876:	da08      	bge.n	800988a <__sfputc_r+0x1e>
 8009878:	6994      	ldr	r4, [r2, #24]
 800987a:	42a3      	cmp	r3, r4
 800987c:	db01      	blt.n	8009882 <__sfputc_r+0x16>
 800987e:	290a      	cmp	r1, #10
 8009880:	d103      	bne.n	800988a <__sfputc_r+0x1e>
 8009882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009886:	f000 b933 	b.w	8009af0 <__swbuf_r>
 800988a:	6813      	ldr	r3, [r2, #0]
 800988c:	1c58      	adds	r0, r3, #1
 800988e:	6010      	str	r0, [r2, #0]
 8009890:	7019      	strb	r1, [r3, #0]
 8009892:	4608      	mov	r0, r1
 8009894:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009898:	4770      	bx	lr

0800989a <__sfputs_r>:
 800989a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800989c:	4606      	mov	r6, r0
 800989e:	460f      	mov	r7, r1
 80098a0:	4614      	mov	r4, r2
 80098a2:	18d5      	adds	r5, r2, r3
 80098a4:	42ac      	cmp	r4, r5
 80098a6:	d101      	bne.n	80098ac <__sfputs_r+0x12>
 80098a8:	2000      	movs	r0, #0
 80098aa:	e007      	b.n	80098bc <__sfputs_r+0x22>
 80098ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098b0:	463a      	mov	r2, r7
 80098b2:	4630      	mov	r0, r6
 80098b4:	f7ff ffda 	bl	800986c <__sfputc_r>
 80098b8:	1c43      	adds	r3, r0, #1
 80098ba:	d1f3      	bne.n	80098a4 <__sfputs_r+0xa>
 80098bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098c0 <_vfiprintf_r>:
 80098c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c4:	460d      	mov	r5, r1
 80098c6:	b09d      	sub	sp, #116	@ 0x74
 80098c8:	4614      	mov	r4, r2
 80098ca:	4698      	mov	r8, r3
 80098cc:	4606      	mov	r6, r0
 80098ce:	b118      	cbz	r0, 80098d8 <_vfiprintf_r+0x18>
 80098d0:	6a03      	ldr	r3, [r0, #32]
 80098d2:	b90b      	cbnz	r3, 80098d8 <_vfiprintf_r+0x18>
 80098d4:	f7fe f926 	bl	8007b24 <__sinit>
 80098d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098da:	07d9      	lsls	r1, r3, #31
 80098dc:	d405      	bmi.n	80098ea <_vfiprintf_r+0x2a>
 80098de:	89ab      	ldrh	r3, [r5, #12]
 80098e0:	059a      	lsls	r2, r3, #22
 80098e2:	d402      	bmi.n	80098ea <_vfiprintf_r+0x2a>
 80098e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098e6:	f7fe f98a 	bl	8007bfe <__retarget_lock_acquire_recursive>
 80098ea:	89ab      	ldrh	r3, [r5, #12]
 80098ec:	071b      	lsls	r3, r3, #28
 80098ee:	d501      	bpl.n	80098f4 <_vfiprintf_r+0x34>
 80098f0:	692b      	ldr	r3, [r5, #16]
 80098f2:	b99b      	cbnz	r3, 800991c <_vfiprintf_r+0x5c>
 80098f4:	4629      	mov	r1, r5
 80098f6:	4630      	mov	r0, r6
 80098f8:	f000 f938 	bl	8009b6c <__swsetup_r>
 80098fc:	b170      	cbz	r0, 800991c <_vfiprintf_r+0x5c>
 80098fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009900:	07dc      	lsls	r4, r3, #31
 8009902:	d504      	bpl.n	800990e <_vfiprintf_r+0x4e>
 8009904:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009908:	b01d      	add	sp, #116	@ 0x74
 800990a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990e:	89ab      	ldrh	r3, [r5, #12]
 8009910:	0598      	lsls	r0, r3, #22
 8009912:	d4f7      	bmi.n	8009904 <_vfiprintf_r+0x44>
 8009914:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009916:	f7fe f973 	bl	8007c00 <__retarget_lock_release_recursive>
 800991a:	e7f3      	b.n	8009904 <_vfiprintf_r+0x44>
 800991c:	2300      	movs	r3, #0
 800991e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009920:	2320      	movs	r3, #32
 8009922:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009926:	f8cd 800c 	str.w	r8, [sp, #12]
 800992a:	2330      	movs	r3, #48	@ 0x30
 800992c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009adc <_vfiprintf_r+0x21c>
 8009930:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009934:	f04f 0901 	mov.w	r9, #1
 8009938:	4623      	mov	r3, r4
 800993a:	469a      	mov	sl, r3
 800993c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009940:	b10a      	cbz	r2, 8009946 <_vfiprintf_r+0x86>
 8009942:	2a25      	cmp	r2, #37	@ 0x25
 8009944:	d1f9      	bne.n	800993a <_vfiprintf_r+0x7a>
 8009946:	ebba 0b04 	subs.w	fp, sl, r4
 800994a:	d00b      	beq.n	8009964 <_vfiprintf_r+0xa4>
 800994c:	465b      	mov	r3, fp
 800994e:	4622      	mov	r2, r4
 8009950:	4629      	mov	r1, r5
 8009952:	4630      	mov	r0, r6
 8009954:	f7ff ffa1 	bl	800989a <__sfputs_r>
 8009958:	3001      	adds	r0, #1
 800995a:	f000 80a7 	beq.w	8009aac <_vfiprintf_r+0x1ec>
 800995e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009960:	445a      	add	r2, fp
 8009962:	9209      	str	r2, [sp, #36]	@ 0x24
 8009964:	f89a 3000 	ldrb.w	r3, [sl]
 8009968:	2b00      	cmp	r3, #0
 800996a:	f000 809f 	beq.w	8009aac <_vfiprintf_r+0x1ec>
 800996e:	2300      	movs	r3, #0
 8009970:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009974:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009978:	f10a 0a01 	add.w	sl, sl, #1
 800997c:	9304      	str	r3, [sp, #16]
 800997e:	9307      	str	r3, [sp, #28]
 8009980:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009984:	931a      	str	r3, [sp, #104]	@ 0x68
 8009986:	4654      	mov	r4, sl
 8009988:	2205      	movs	r2, #5
 800998a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800998e:	4853      	ldr	r0, [pc, #332]	@ (8009adc <_vfiprintf_r+0x21c>)
 8009990:	f7f6 fc1e 	bl	80001d0 <memchr>
 8009994:	9a04      	ldr	r2, [sp, #16]
 8009996:	b9d8      	cbnz	r0, 80099d0 <_vfiprintf_r+0x110>
 8009998:	06d1      	lsls	r1, r2, #27
 800999a:	bf44      	itt	mi
 800999c:	2320      	movmi	r3, #32
 800999e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099a2:	0713      	lsls	r3, r2, #28
 80099a4:	bf44      	itt	mi
 80099a6:	232b      	movmi	r3, #43	@ 0x2b
 80099a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099ac:	f89a 3000 	ldrb.w	r3, [sl]
 80099b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80099b2:	d015      	beq.n	80099e0 <_vfiprintf_r+0x120>
 80099b4:	9a07      	ldr	r2, [sp, #28]
 80099b6:	4654      	mov	r4, sl
 80099b8:	2000      	movs	r0, #0
 80099ba:	f04f 0c0a 	mov.w	ip, #10
 80099be:	4621      	mov	r1, r4
 80099c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099c4:	3b30      	subs	r3, #48	@ 0x30
 80099c6:	2b09      	cmp	r3, #9
 80099c8:	d94b      	bls.n	8009a62 <_vfiprintf_r+0x1a2>
 80099ca:	b1b0      	cbz	r0, 80099fa <_vfiprintf_r+0x13a>
 80099cc:	9207      	str	r2, [sp, #28]
 80099ce:	e014      	b.n	80099fa <_vfiprintf_r+0x13a>
 80099d0:	eba0 0308 	sub.w	r3, r0, r8
 80099d4:	fa09 f303 	lsl.w	r3, r9, r3
 80099d8:	4313      	orrs	r3, r2
 80099da:	9304      	str	r3, [sp, #16]
 80099dc:	46a2      	mov	sl, r4
 80099de:	e7d2      	b.n	8009986 <_vfiprintf_r+0xc6>
 80099e0:	9b03      	ldr	r3, [sp, #12]
 80099e2:	1d19      	adds	r1, r3, #4
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	9103      	str	r1, [sp, #12]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	bfbb      	ittet	lt
 80099ec:	425b      	neglt	r3, r3
 80099ee:	f042 0202 	orrlt.w	r2, r2, #2
 80099f2:	9307      	strge	r3, [sp, #28]
 80099f4:	9307      	strlt	r3, [sp, #28]
 80099f6:	bfb8      	it	lt
 80099f8:	9204      	strlt	r2, [sp, #16]
 80099fa:	7823      	ldrb	r3, [r4, #0]
 80099fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80099fe:	d10a      	bne.n	8009a16 <_vfiprintf_r+0x156>
 8009a00:	7863      	ldrb	r3, [r4, #1]
 8009a02:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a04:	d132      	bne.n	8009a6c <_vfiprintf_r+0x1ac>
 8009a06:	9b03      	ldr	r3, [sp, #12]
 8009a08:	1d1a      	adds	r2, r3, #4
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	9203      	str	r2, [sp, #12]
 8009a0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a12:	3402      	adds	r4, #2
 8009a14:	9305      	str	r3, [sp, #20]
 8009a16:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009aec <_vfiprintf_r+0x22c>
 8009a1a:	7821      	ldrb	r1, [r4, #0]
 8009a1c:	2203      	movs	r2, #3
 8009a1e:	4650      	mov	r0, sl
 8009a20:	f7f6 fbd6 	bl	80001d0 <memchr>
 8009a24:	b138      	cbz	r0, 8009a36 <_vfiprintf_r+0x176>
 8009a26:	9b04      	ldr	r3, [sp, #16]
 8009a28:	eba0 000a 	sub.w	r0, r0, sl
 8009a2c:	2240      	movs	r2, #64	@ 0x40
 8009a2e:	4082      	lsls	r2, r0
 8009a30:	4313      	orrs	r3, r2
 8009a32:	3401      	adds	r4, #1
 8009a34:	9304      	str	r3, [sp, #16]
 8009a36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a3a:	4829      	ldr	r0, [pc, #164]	@ (8009ae0 <_vfiprintf_r+0x220>)
 8009a3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a40:	2206      	movs	r2, #6
 8009a42:	f7f6 fbc5 	bl	80001d0 <memchr>
 8009a46:	2800      	cmp	r0, #0
 8009a48:	d03f      	beq.n	8009aca <_vfiprintf_r+0x20a>
 8009a4a:	4b26      	ldr	r3, [pc, #152]	@ (8009ae4 <_vfiprintf_r+0x224>)
 8009a4c:	bb1b      	cbnz	r3, 8009a96 <_vfiprintf_r+0x1d6>
 8009a4e:	9b03      	ldr	r3, [sp, #12]
 8009a50:	3307      	adds	r3, #7
 8009a52:	f023 0307 	bic.w	r3, r3, #7
 8009a56:	3308      	adds	r3, #8
 8009a58:	9303      	str	r3, [sp, #12]
 8009a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a5c:	443b      	add	r3, r7
 8009a5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a60:	e76a      	b.n	8009938 <_vfiprintf_r+0x78>
 8009a62:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a66:	460c      	mov	r4, r1
 8009a68:	2001      	movs	r0, #1
 8009a6a:	e7a8      	b.n	80099be <_vfiprintf_r+0xfe>
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	3401      	adds	r4, #1
 8009a70:	9305      	str	r3, [sp, #20]
 8009a72:	4619      	mov	r1, r3
 8009a74:	f04f 0c0a 	mov.w	ip, #10
 8009a78:	4620      	mov	r0, r4
 8009a7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a7e:	3a30      	subs	r2, #48	@ 0x30
 8009a80:	2a09      	cmp	r2, #9
 8009a82:	d903      	bls.n	8009a8c <_vfiprintf_r+0x1cc>
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d0c6      	beq.n	8009a16 <_vfiprintf_r+0x156>
 8009a88:	9105      	str	r1, [sp, #20]
 8009a8a:	e7c4      	b.n	8009a16 <_vfiprintf_r+0x156>
 8009a8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a90:	4604      	mov	r4, r0
 8009a92:	2301      	movs	r3, #1
 8009a94:	e7f0      	b.n	8009a78 <_vfiprintf_r+0x1b8>
 8009a96:	ab03      	add	r3, sp, #12
 8009a98:	9300      	str	r3, [sp, #0]
 8009a9a:	462a      	mov	r2, r5
 8009a9c:	4b12      	ldr	r3, [pc, #72]	@ (8009ae8 <_vfiprintf_r+0x228>)
 8009a9e:	a904      	add	r1, sp, #16
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	f7fd fbc7 	bl	8007234 <_printf_float>
 8009aa6:	4607      	mov	r7, r0
 8009aa8:	1c78      	adds	r0, r7, #1
 8009aaa:	d1d6      	bne.n	8009a5a <_vfiprintf_r+0x19a>
 8009aac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009aae:	07d9      	lsls	r1, r3, #31
 8009ab0:	d405      	bmi.n	8009abe <_vfiprintf_r+0x1fe>
 8009ab2:	89ab      	ldrh	r3, [r5, #12]
 8009ab4:	059a      	lsls	r2, r3, #22
 8009ab6:	d402      	bmi.n	8009abe <_vfiprintf_r+0x1fe>
 8009ab8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009aba:	f7fe f8a1 	bl	8007c00 <__retarget_lock_release_recursive>
 8009abe:	89ab      	ldrh	r3, [r5, #12]
 8009ac0:	065b      	lsls	r3, r3, #25
 8009ac2:	f53f af1f 	bmi.w	8009904 <_vfiprintf_r+0x44>
 8009ac6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ac8:	e71e      	b.n	8009908 <_vfiprintf_r+0x48>
 8009aca:	ab03      	add	r3, sp, #12
 8009acc:	9300      	str	r3, [sp, #0]
 8009ace:	462a      	mov	r2, r5
 8009ad0:	4b05      	ldr	r3, [pc, #20]	@ (8009ae8 <_vfiprintf_r+0x228>)
 8009ad2:	a904      	add	r1, sp, #16
 8009ad4:	4630      	mov	r0, r6
 8009ad6:	f7fd fe45 	bl	8007764 <_printf_i>
 8009ada:	e7e4      	b.n	8009aa6 <_vfiprintf_r+0x1e6>
 8009adc:	0800a231 	.word	0x0800a231
 8009ae0:	0800a23b 	.word	0x0800a23b
 8009ae4:	08007235 	.word	0x08007235
 8009ae8:	0800989b 	.word	0x0800989b
 8009aec:	0800a237 	.word	0x0800a237

08009af0 <__swbuf_r>:
 8009af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af2:	460e      	mov	r6, r1
 8009af4:	4614      	mov	r4, r2
 8009af6:	4605      	mov	r5, r0
 8009af8:	b118      	cbz	r0, 8009b02 <__swbuf_r+0x12>
 8009afa:	6a03      	ldr	r3, [r0, #32]
 8009afc:	b90b      	cbnz	r3, 8009b02 <__swbuf_r+0x12>
 8009afe:	f7fe f811 	bl	8007b24 <__sinit>
 8009b02:	69a3      	ldr	r3, [r4, #24]
 8009b04:	60a3      	str	r3, [r4, #8]
 8009b06:	89a3      	ldrh	r3, [r4, #12]
 8009b08:	071a      	lsls	r2, r3, #28
 8009b0a:	d501      	bpl.n	8009b10 <__swbuf_r+0x20>
 8009b0c:	6923      	ldr	r3, [r4, #16]
 8009b0e:	b943      	cbnz	r3, 8009b22 <__swbuf_r+0x32>
 8009b10:	4621      	mov	r1, r4
 8009b12:	4628      	mov	r0, r5
 8009b14:	f000 f82a 	bl	8009b6c <__swsetup_r>
 8009b18:	b118      	cbz	r0, 8009b22 <__swbuf_r+0x32>
 8009b1a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009b1e:	4638      	mov	r0, r7
 8009b20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b22:	6823      	ldr	r3, [r4, #0]
 8009b24:	6922      	ldr	r2, [r4, #16]
 8009b26:	1a98      	subs	r0, r3, r2
 8009b28:	6963      	ldr	r3, [r4, #20]
 8009b2a:	b2f6      	uxtb	r6, r6
 8009b2c:	4283      	cmp	r3, r0
 8009b2e:	4637      	mov	r7, r6
 8009b30:	dc05      	bgt.n	8009b3e <__swbuf_r+0x4e>
 8009b32:	4621      	mov	r1, r4
 8009b34:	4628      	mov	r0, r5
 8009b36:	f7ff f945 	bl	8008dc4 <_fflush_r>
 8009b3a:	2800      	cmp	r0, #0
 8009b3c:	d1ed      	bne.n	8009b1a <__swbuf_r+0x2a>
 8009b3e:	68a3      	ldr	r3, [r4, #8]
 8009b40:	3b01      	subs	r3, #1
 8009b42:	60a3      	str	r3, [r4, #8]
 8009b44:	6823      	ldr	r3, [r4, #0]
 8009b46:	1c5a      	adds	r2, r3, #1
 8009b48:	6022      	str	r2, [r4, #0]
 8009b4a:	701e      	strb	r6, [r3, #0]
 8009b4c:	6962      	ldr	r2, [r4, #20]
 8009b4e:	1c43      	adds	r3, r0, #1
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d004      	beq.n	8009b5e <__swbuf_r+0x6e>
 8009b54:	89a3      	ldrh	r3, [r4, #12]
 8009b56:	07db      	lsls	r3, r3, #31
 8009b58:	d5e1      	bpl.n	8009b1e <__swbuf_r+0x2e>
 8009b5a:	2e0a      	cmp	r6, #10
 8009b5c:	d1df      	bne.n	8009b1e <__swbuf_r+0x2e>
 8009b5e:	4621      	mov	r1, r4
 8009b60:	4628      	mov	r0, r5
 8009b62:	f7ff f92f 	bl	8008dc4 <_fflush_r>
 8009b66:	2800      	cmp	r0, #0
 8009b68:	d0d9      	beq.n	8009b1e <__swbuf_r+0x2e>
 8009b6a:	e7d6      	b.n	8009b1a <__swbuf_r+0x2a>

08009b6c <__swsetup_r>:
 8009b6c:	b538      	push	{r3, r4, r5, lr}
 8009b6e:	4b29      	ldr	r3, [pc, #164]	@ (8009c14 <__swsetup_r+0xa8>)
 8009b70:	4605      	mov	r5, r0
 8009b72:	6818      	ldr	r0, [r3, #0]
 8009b74:	460c      	mov	r4, r1
 8009b76:	b118      	cbz	r0, 8009b80 <__swsetup_r+0x14>
 8009b78:	6a03      	ldr	r3, [r0, #32]
 8009b7a:	b90b      	cbnz	r3, 8009b80 <__swsetup_r+0x14>
 8009b7c:	f7fd ffd2 	bl	8007b24 <__sinit>
 8009b80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b84:	0719      	lsls	r1, r3, #28
 8009b86:	d422      	bmi.n	8009bce <__swsetup_r+0x62>
 8009b88:	06da      	lsls	r2, r3, #27
 8009b8a:	d407      	bmi.n	8009b9c <__swsetup_r+0x30>
 8009b8c:	2209      	movs	r2, #9
 8009b8e:	602a      	str	r2, [r5, #0]
 8009b90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b94:	81a3      	strh	r3, [r4, #12]
 8009b96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b9a:	e033      	b.n	8009c04 <__swsetup_r+0x98>
 8009b9c:	0758      	lsls	r0, r3, #29
 8009b9e:	d512      	bpl.n	8009bc6 <__swsetup_r+0x5a>
 8009ba0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009ba2:	b141      	cbz	r1, 8009bb6 <__swsetup_r+0x4a>
 8009ba4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ba8:	4299      	cmp	r1, r3
 8009baa:	d002      	beq.n	8009bb2 <__swsetup_r+0x46>
 8009bac:	4628      	mov	r0, r5
 8009bae:	f7ff fdd3 	bl	8009758 <_free_r>
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	6363      	str	r3, [r4, #52]	@ 0x34
 8009bb6:	89a3      	ldrh	r3, [r4, #12]
 8009bb8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009bbc:	81a3      	strh	r3, [r4, #12]
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	6063      	str	r3, [r4, #4]
 8009bc2:	6923      	ldr	r3, [r4, #16]
 8009bc4:	6023      	str	r3, [r4, #0]
 8009bc6:	89a3      	ldrh	r3, [r4, #12]
 8009bc8:	f043 0308 	orr.w	r3, r3, #8
 8009bcc:	81a3      	strh	r3, [r4, #12]
 8009bce:	6923      	ldr	r3, [r4, #16]
 8009bd0:	b94b      	cbnz	r3, 8009be6 <__swsetup_r+0x7a>
 8009bd2:	89a3      	ldrh	r3, [r4, #12]
 8009bd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009bd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bdc:	d003      	beq.n	8009be6 <__swsetup_r+0x7a>
 8009bde:	4621      	mov	r1, r4
 8009be0:	4628      	mov	r0, r5
 8009be2:	f000 f83f 	bl	8009c64 <__smakebuf_r>
 8009be6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bea:	f013 0201 	ands.w	r2, r3, #1
 8009bee:	d00a      	beq.n	8009c06 <__swsetup_r+0x9a>
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	60a2      	str	r2, [r4, #8]
 8009bf4:	6962      	ldr	r2, [r4, #20]
 8009bf6:	4252      	negs	r2, r2
 8009bf8:	61a2      	str	r2, [r4, #24]
 8009bfa:	6922      	ldr	r2, [r4, #16]
 8009bfc:	b942      	cbnz	r2, 8009c10 <__swsetup_r+0xa4>
 8009bfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009c02:	d1c5      	bne.n	8009b90 <__swsetup_r+0x24>
 8009c04:	bd38      	pop	{r3, r4, r5, pc}
 8009c06:	0799      	lsls	r1, r3, #30
 8009c08:	bf58      	it	pl
 8009c0a:	6962      	ldrpl	r2, [r4, #20]
 8009c0c:	60a2      	str	r2, [r4, #8]
 8009c0e:	e7f4      	b.n	8009bfa <__swsetup_r+0x8e>
 8009c10:	2000      	movs	r0, #0
 8009c12:	e7f7      	b.n	8009c04 <__swsetup_r+0x98>
 8009c14:	20000018 	.word	0x20000018

08009c18 <__swhatbuf_r>:
 8009c18:	b570      	push	{r4, r5, r6, lr}
 8009c1a:	460c      	mov	r4, r1
 8009c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c20:	2900      	cmp	r1, #0
 8009c22:	b096      	sub	sp, #88	@ 0x58
 8009c24:	4615      	mov	r5, r2
 8009c26:	461e      	mov	r6, r3
 8009c28:	da0d      	bge.n	8009c46 <__swhatbuf_r+0x2e>
 8009c2a:	89a3      	ldrh	r3, [r4, #12]
 8009c2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009c30:	f04f 0100 	mov.w	r1, #0
 8009c34:	bf14      	ite	ne
 8009c36:	2340      	movne	r3, #64	@ 0x40
 8009c38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009c3c:	2000      	movs	r0, #0
 8009c3e:	6031      	str	r1, [r6, #0]
 8009c40:	602b      	str	r3, [r5, #0]
 8009c42:	b016      	add	sp, #88	@ 0x58
 8009c44:	bd70      	pop	{r4, r5, r6, pc}
 8009c46:	466a      	mov	r2, sp
 8009c48:	f000 f848 	bl	8009cdc <_fstat_r>
 8009c4c:	2800      	cmp	r0, #0
 8009c4e:	dbec      	blt.n	8009c2a <__swhatbuf_r+0x12>
 8009c50:	9901      	ldr	r1, [sp, #4]
 8009c52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009c56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009c5a:	4259      	negs	r1, r3
 8009c5c:	4159      	adcs	r1, r3
 8009c5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c62:	e7eb      	b.n	8009c3c <__swhatbuf_r+0x24>

08009c64 <__smakebuf_r>:
 8009c64:	898b      	ldrh	r3, [r1, #12]
 8009c66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c68:	079d      	lsls	r5, r3, #30
 8009c6a:	4606      	mov	r6, r0
 8009c6c:	460c      	mov	r4, r1
 8009c6e:	d507      	bpl.n	8009c80 <__smakebuf_r+0x1c>
 8009c70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009c74:	6023      	str	r3, [r4, #0]
 8009c76:	6123      	str	r3, [r4, #16]
 8009c78:	2301      	movs	r3, #1
 8009c7a:	6163      	str	r3, [r4, #20]
 8009c7c:	b003      	add	sp, #12
 8009c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c80:	ab01      	add	r3, sp, #4
 8009c82:	466a      	mov	r2, sp
 8009c84:	f7ff ffc8 	bl	8009c18 <__swhatbuf_r>
 8009c88:	9f00      	ldr	r7, [sp, #0]
 8009c8a:	4605      	mov	r5, r0
 8009c8c:	4639      	mov	r1, r7
 8009c8e:	4630      	mov	r0, r6
 8009c90:	f7fe ff94 	bl	8008bbc <_malloc_r>
 8009c94:	b948      	cbnz	r0, 8009caa <__smakebuf_r+0x46>
 8009c96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c9a:	059a      	lsls	r2, r3, #22
 8009c9c:	d4ee      	bmi.n	8009c7c <__smakebuf_r+0x18>
 8009c9e:	f023 0303 	bic.w	r3, r3, #3
 8009ca2:	f043 0302 	orr.w	r3, r3, #2
 8009ca6:	81a3      	strh	r3, [r4, #12]
 8009ca8:	e7e2      	b.n	8009c70 <__smakebuf_r+0xc>
 8009caa:	89a3      	ldrh	r3, [r4, #12]
 8009cac:	6020      	str	r0, [r4, #0]
 8009cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cb2:	81a3      	strh	r3, [r4, #12]
 8009cb4:	9b01      	ldr	r3, [sp, #4]
 8009cb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009cba:	b15b      	cbz	r3, 8009cd4 <__smakebuf_r+0x70>
 8009cbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cc0:	4630      	mov	r0, r6
 8009cc2:	f000 f81d 	bl	8009d00 <_isatty_r>
 8009cc6:	b128      	cbz	r0, 8009cd4 <__smakebuf_r+0x70>
 8009cc8:	89a3      	ldrh	r3, [r4, #12]
 8009cca:	f023 0303 	bic.w	r3, r3, #3
 8009cce:	f043 0301 	orr.w	r3, r3, #1
 8009cd2:	81a3      	strh	r3, [r4, #12]
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	431d      	orrs	r5, r3
 8009cd8:	81a5      	strh	r5, [r4, #12]
 8009cda:	e7cf      	b.n	8009c7c <__smakebuf_r+0x18>

08009cdc <_fstat_r>:
 8009cdc:	b538      	push	{r3, r4, r5, lr}
 8009cde:	4d07      	ldr	r5, [pc, #28]	@ (8009cfc <_fstat_r+0x20>)
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	4608      	mov	r0, r1
 8009ce6:	4611      	mov	r1, r2
 8009ce8:	602b      	str	r3, [r5, #0]
 8009cea:	f7f8 fe1c 	bl	8002926 <_fstat>
 8009cee:	1c43      	adds	r3, r0, #1
 8009cf0:	d102      	bne.n	8009cf8 <_fstat_r+0x1c>
 8009cf2:	682b      	ldr	r3, [r5, #0]
 8009cf4:	b103      	cbz	r3, 8009cf8 <_fstat_r+0x1c>
 8009cf6:	6023      	str	r3, [r4, #0]
 8009cf8:	bd38      	pop	{r3, r4, r5, pc}
 8009cfa:	bf00      	nop
 8009cfc:	20000ac4 	.word	0x20000ac4

08009d00 <_isatty_r>:
 8009d00:	b538      	push	{r3, r4, r5, lr}
 8009d02:	4d06      	ldr	r5, [pc, #24]	@ (8009d1c <_isatty_r+0x1c>)
 8009d04:	2300      	movs	r3, #0
 8009d06:	4604      	mov	r4, r0
 8009d08:	4608      	mov	r0, r1
 8009d0a:	602b      	str	r3, [r5, #0]
 8009d0c:	f7f8 fe1b 	bl	8002946 <_isatty>
 8009d10:	1c43      	adds	r3, r0, #1
 8009d12:	d102      	bne.n	8009d1a <_isatty_r+0x1a>
 8009d14:	682b      	ldr	r3, [r5, #0]
 8009d16:	b103      	cbz	r3, 8009d1a <_isatty_r+0x1a>
 8009d18:	6023      	str	r3, [r4, #0]
 8009d1a:	bd38      	pop	{r3, r4, r5, pc}
 8009d1c:	20000ac4 	.word	0x20000ac4

08009d20 <_raise_r>:
 8009d20:	291f      	cmp	r1, #31
 8009d22:	b538      	push	{r3, r4, r5, lr}
 8009d24:	4605      	mov	r5, r0
 8009d26:	460c      	mov	r4, r1
 8009d28:	d904      	bls.n	8009d34 <_raise_r+0x14>
 8009d2a:	2316      	movs	r3, #22
 8009d2c:	6003      	str	r3, [r0, #0]
 8009d2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d32:	bd38      	pop	{r3, r4, r5, pc}
 8009d34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009d36:	b112      	cbz	r2, 8009d3e <_raise_r+0x1e>
 8009d38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d3c:	b94b      	cbnz	r3, 8009d52 <_raise_r+0x32>
 8009d3e:	4628      	mov	r0, r5
 8009d40:	f000 f830 	bl	8009da4 <_getpid_r>
 8009d44:	4622      	mov	r2, r4
 8009d46:	4601      	mov	r1, r0
 8009d48:	4628      	mov	r0, r5
 8009d4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d4e:	f000 b817 	b.w	8009d80 <_kill_r>
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d00a      	beq.n	8009d6c <_raise_r+0x4c>
 8009d56:	1c59      	adds	r1, r3, #1
 8009d58:	d103      	bne.n	8009d62 <_raise_r+0x42>
 8009d5a:	2316      	movs	r3, #22
 8009d5c:	6003      	str	r3, [r0, #0]
 8009d5e:	2001      	movs	r0, #1
 8009d60:	e7e7      	b.n	8009d32 <_raise_r+0x12>
 8009d62:	2100      	movs	r1, #0
 8009d64:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009d68:	4620      	mov	r0, r4
 8009d6a:	4798      	blx	r3
 8009d6c:	2000      	movs	r0, #0
 8009d6e:	e7e0      	b.n	8009d32 <_raise_r+0x12>

08009d70 <raise>:
 8009d70:	4b02      	ldr	r3, [pc, #8]	@ (8009d7c <raise+0xc>)
 8009d72:	4601      	mov	r1, r0
 8009d74:	6818      	ldr	r0, [r3, #0]
 8009d76:	f7ff bfd3 	b.w	8009d20 <_raise_r>
 8009d7a:	bf00      	nop
 8009d7c:	20000018 	.word	0x20000018

08009d80 <_kill_r>:
 8009d80:	b538      	push	{r3, r4, r5, lr}
 8009d82:	4d07      	ldr	r5, [pc, #28]	@ (8009da0 <_kill_r+0x20>)
 8009d84:	2300      	movs	r3, #0
 8009d86:	4604      	mov	r4, r0
 8009d88:	4608      	mov	r0, r1
 8009d8a:	4611      	mov	r1, r2
 8009d8c:	602b      	str	r3, [r5, #0]
 8009d8e:	f7f8 fd6a 	bl	8002866 <_kill>
 8009d92:	1c43      	adds	r3, r0, #1
 8009d94:	d102      	bne.n	8009d9c <_kill_r+0x1c>
 8009d96:	682b      	ldr	r3, [r5, #0]
 8009d98:	b103      	cbz	r3, 8009d9c <_kill_r+0x1c>
 8009d9a:	6023      	str	r3, [r4, #0]
 8009d9c:	bd38      	pop	{r3, r4, r5, pc}
 8009d9e:	bf00      	nop
 8009da0:	20000ac4 	.word	0x20000ac4

08009da4 <_getpid_r>:
 8009da4:	f7f8 bd57 	b.w	8002856 <_getpid>

08009da8 <_init>:
 8009da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009daa:	bf00      	nop
 8009dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dae:	bc08      	pop	{r3}
 8009db0:	469e      	mov	lr, r3
 8009db2:	4770      	bx	lr

08009db4 <_fini>:
 8009db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009db6:	bf00      	nop
 8009db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009dba:	bc08      	pop	{r3}
 8009dbc:	469e      	mov	lr, r3
 8009dbe:	4770      	bx	lr
