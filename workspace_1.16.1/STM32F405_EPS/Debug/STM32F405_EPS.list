
STM32F405_EPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  0800a830  0800a830  0000b830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae58  0800ae58  0000c214  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae58  0800ae58  0000be58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae60  0800ae60  0000c214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae60  0800ae60  0000be60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ae64  0800ae64  0000be64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  0800ae68  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c214  2**0
                  CONTENTS
 10 .bss          000009dc  20000214  20000214  0000c214  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000bf0  20000bf0  0000c214  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c214  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001997e  00000000  00000000  0000c244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cec  00000000  00000000  00025bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d8  00000000  00000000  000298b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001101  00000000  00000000  0002ae88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024bd9  00000000  00000000  0002bf89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020684  00000000  00000000  00050b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4995  00000000  00000000  000711e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00145b7b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d2c  00000000  00000000  00145bc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0014c8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000214 	.word	0x20000214
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a818 	.word	0x0800a818

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000218 	.word	0x20000218
 80001cc:	0800a818 	.word	0x0800a818

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ede:	463b      	mov	r3, r7
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eea:	4b7c      	ldr	r3, [pc, #496]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000eec:	4a7c      	ldr	r2, [pc, #496]	@ (80010e0 <MX_ADC1_Init+0x208>)
 8000eee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ef0:	4b7a      	ldr	r3, [pc, #488]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef6:	4b79      	ldr	r3, [pc, #484]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000efc:	4b77      	ldr	r3, [pc, #476]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f02:	4b76      	ldr	r3, [pc, #472]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f08:	4b74      	ldr	r3, [pc, #464]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f10:	4b72      	ldr	r3, [pc, #456]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f16:	4b71      	ldr	r3, [pc, #452]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f18:	4a72      	ldr	r2, [pc, #456]	@ (80010e4 <MX_ADC1_Init+0x20c>)
 8000f1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1c:	4b6f      	ldr	r3, [pc, #444]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8000f22:	4b6e      	ldr	r3, [pc, #440]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f24:	220e      	movs	r2, #14
 8000f26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f28:	4b6c      	ldr	r3, [pc, #432]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f30:	4b6a      	ldr	r3, [pc, #424]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f36:	4869      	ldr	r0, [pc, #420]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f38:	f002 fa74 	bl	8003424 <HAL_ADC_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f42:	f001 fd23 	bl	800298c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f46:	2301      	movs	r3, #1
 8000f48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f4e:	2307      	movs	r3, #7
 8000f50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f52:	463b      	mov	r3, r7
 8000f54:	4619      	mov	r1, r3
 8000f56:	4861      	ldr	r0, [pc, #388]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f58:	f002 fce6 	bl	8003928 <HAL_ADC_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f62:	f001 fd13 	bl	800298c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f66:	2302      	movs	r3, #2
 8000f68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4619      	mov	r1, r3
 8000f72:	485a      	ldr	r0, [pc, #360]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f74:	f002 fcd8 	bl	8003928 <HAL_ADC_ConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f7e:	f001 fd05 	bl	800298c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f82:	2304      	movs	r3, #4
 8000f84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f86:	2303      	movs	r3, #3
 8000f88:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4853      	ldr	r0, [pc, #332]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f90:	f002 fcca 	bl	8003928 <HAL_ADC_ConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000f9a:	f001 fcf7 	bl	800298c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f9e:	2305      	movs	r3, #5
 8000fa0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	4619      	mov	r1, r3
 8000faa:	484c      	ldr	r0, [pc, #304]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000fac:	f002 fcbc 	bl	8003928 <HAL_ADC_ConfigChannel>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000fb6:	f001 fce9 	bl	800298c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fba:	2306      	movs	r3, #6
 8000fbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000fbe:	2305      	movs	r3, #5
 8000fc0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4845      	ldr	r0, [pc, #276]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000fc8:	f002 fcae 	bl	8003928 <HAL_ADC_ConfigChannel>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000fd2:	f001 fcdb 	bl	800298c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000fda:	2306      	movs	r3, #6
 8000fdc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fde:	463b      	mov	r3, r7
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	483e      	ldr	r0, [pc, #248]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000fe4:	f002 fca0 	bl	8003928 <HAL_ADC_ConfigChannel>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000fee:	f001 fccd 	bl	800298c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000ff6:	2307      	movs	r3, #7
 8000ff8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4837      	ldr	r0, [pc, #220]	@ (80010dc <MX_ADC1_Init+0x204>)
 8001000:	f002 fc92 	bl	8003928 <HAL_ADC_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 800100a:	f001 fcbf 	bl	800298c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800100e:	2309      	movs	r3, #9
 8001010:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001012:	2308      	movs	r3, #8
 8001014:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001016:	463b      	mov	r3, r7
 8001018:	4619      	mov	r1, r3
 800101a:	4830      	ldr	r0, [pc, #192]	@ (80010dc <MX_ADC1_Init+0x204>)
 800101c:	f002 fc84 	bl	8003928 <HAL_ADC_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8001026:	f001 fcb1 	bl	800298c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800102a:	230a      	movs	r3, #10
 800102c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800102e:	2309      	movs	r3, #9
 8001030:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001032:	463b      	mov	r3, r7
 8001034:	4619      	mov	r1, r3
 8001036:	4829      	ldr	r0, [pc, #164]	@ (80010dc <MX_ADC1_Init+0x204>)
 8001038:	f002 fc76 	bl	8003928 <HAL_ADC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8001042:	f001 fca3 	bl	800298c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001046:	230b      	movs	r3, #11
 8001048:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 800104a:	230a      	movs	r3, #10
 800104c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800104e:	463b      	mov	r3, r7
 8001050:	4619      	mov	r1, r3
 8001052:	4822      	ldr	r0, [pc, #136]	@ (80010dc <MX_ADC1_Init+0x204>)
 8001054:	f002 fc68 	bl	8003928 <HAL_ADC_ConfigChannel>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 800105e:	f001 fc95 	bl	800298c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001062:	230c      	movs	r3, #12
 8001064:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001066:	230b      	movs	r3, #11
 8001068:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	4619      	mov	r1, r3
 800106e:	481b      	ldr	r0, [pc, #108]	@ (80010dc <MX_ADC1_Init+0x204>)
 8001070:	f002 fc5a 	bl	8003928 <HAL_ADC_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0x1a6>
  {
    Error_Handler();
 800107a:	f001 fc87 	bl	800298c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800107e:	230d      	movs	r3, #13
 8001080:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001082:	230c      	movs	r3, #12
 8001084:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	4814      	ldr	r0, [pc, #80]	@ (80010dc <MX_ADC1_Init+0x204>)
 800108c:	f002 fc4c 	bl	8003928 <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0x1c2>
  {
    Error_Handler();
 8001096:	f001 fc79 	bl	800298c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800109a:	230e      	movs	r3, #14
 800109c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800109e:	230d      	movs	r3, #13
 80010a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	4619      	mov	r1, r3
 80010a6:	480d      	ldr	r0, [pc, #52]	@ (80010dc <MX_ADC1_Init+0x204>)
 80010a8:	f002 fc3e 	bl	8003928 <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0x1de>
  {
    Error_Handler();
 80010b2:	f001 fc6b 	bl	800298c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80010b6:	230f      	movs	r3, #15
 80010b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80010ba:	230e      	movs	r3, #14
 80010bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010be:	463b      	mov	r3, r7
 80010c0:	4619      	mov	r1, r3
 80010c2:	4806      	ldr	r0, [pc, #24]	@ (80010dc <MX_ADC1_Init+0x204>)
 80010c4:	f002 fc30 	bl	8003928 <HAL_ADC_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC1_Init+0x1fa>
  {
    Error_Handler();
 80010ce:	f001 fc5d 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000230 	.word	0x20000230
 80010e0:	40012000 	.word	0x40012000
 80010e4:	0f000001 	.word	0x0f000001

080010e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	@ 0x30
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a4d      	ldr	r2, [pc, #308]	@ (800123c <HAL_ADC_MspInit+0x154>)
 8001106:	4293      	cmp	r3, r2
 8001108:	f040 8094 	bne.w	8001234 <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
 8001110:	4b4b      	ldr	r3, [pc, #300]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 8001112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001114:	4a4a      	ldr	r2, [pc, #296]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 8001116:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800111a:	6453      	str	r3, [r2, #68]	@ 0x44
 800111c:	4b48      	ldr	r3, [pc, #288]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 800111e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	4b44      	ldr	r3, [pc, #272]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001130:	4a43      	ldr	r2, [pc, #268]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 8001132:	f043 0304 	orr.w	r3, r3, #4
 8001136:	6313      	str	r3, [r2, #48]	@ 0x30
 8001138:	4b41      	ldr	r3, [pc, #260]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	4b3d      	ldr	r3, [pc, #244]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114c:	4a3c      	ldr	r2, [pc, #240]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6313      	str	r3, [r2, #48]	@ 0x30
 8001154:	4b3a      	ldr	r3, [pc, #232]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	4b36      	ldr	r3, [pc, #216]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001168:	4a35      	ldr	r2, [pc, #212]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 800116a:	f043 0302 	orr.w	r3, r3, #2
 800116e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001170:	4b33      	ldr	r3, [pc, #204]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800117c:	233f      	movs	r3, #63	@ 0x3f
 800117e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001180:	2303      	movs	r3, #3
 8001182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	482d      	ldr	r0, [pc, #180]	@ (8001244 <HAL_ADC_MspInit+0x15c>)
 8001190:	f003 faf6 	bl	8004780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8001194:	23f6      	movs	r3, #246	@ 0xf6
 8001196:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001198:	2303      	movs	r3, #3
 800119a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	4828      	ldr	r0, [pc, #160]	@ (8001248 <HAL_ADC_MspInit+0x160>)
 80011a8:	f003 faea 	bl	8004780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011ac:	2303      	movs	r3, #3
 80011ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b0:	2303      	movs	r3, #3
 80011b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b8:	f107 031c 	add.w	r3, r7, #28
 80011bc:	4619      	mov	r1, r3
 80011be:	4823      	ldr	r0, [pc, #140]	@ (800124c <HAL_ADC_MspInit+0x164>)
 80011c0:	f003 fade 	bl	8004780 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011c4:	4b22      	ldr	r3, [pc, #136]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011c6:	4a23      	ldr	r2, [pc, #140]	@ (8001254 <HAL_ADC_MspInit+0x16c>)
 80011c8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011ca:	4b21      	ldr	r3, [pc, #132]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011ec:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011f2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011f4:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011fa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011fc:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011fe:	2200      	movs	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001202:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 8001204:	2200      	movs	r2, #0
 8001206:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001208:	4811      	ldr	r0, [pc, #68]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 800120a:	f002 ff49 	bl	80040a0 <HAL_DMA_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001214:	f001 fbba 	bl	800298c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a0d      	ldr	r2, [pc, #52]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 800121c:	639a      	str	r2, [r3, #56]	@ 0x38
 800121e:	4a0c      	ldr	r2, [pc, #48]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001224:	2200      	movs	r2, #0
 8001226:	2100      	movs	r1, #0
 8001228:	2012      	movs	r0, #18
 800122a:	f002 ff02 	bl	8004032 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800122e:	2012      	movs	r0, #18
 8001230:	f002 ff1b 	bl	800406a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001234:	bf00      	nop
 8001236:	3730      	adds	r7, #48	@ 0x30
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40012000 	.word	0x40012000
 8001240:	40023800 	.word	0x40023800
 8001244:	40020800 	.word	0x40020800
 8001248:	40020000 	.word	0x40020000
 800124c:	40020400 	.word	0x40020400
 8001250:	20000278 	.word	0x20000278
 8001254:	40026410 	.word	0x40026410

08001258 <BQ76905_WriteSubcommand>:
#include "bms.h"
#include "i2c.h"
#include "usart.h"

// Función para enviar un subcomando al BQ76905 (no requiere checksum)
HAL_StatusTypeDef BQ76905_WriteSubcommand(BQ76905_Device *bms, BQ76905_Registers subcmd) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af02      	add	r7, sp, #8
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	807b      	strh	r3, [r7, #2]
    uint8_t tx[3] = {BASE_SUBCOMMAND_ADDRESS, (uint8_t)(subcmd & 0xFF), (uint8_t)(subcmd >> 8)};
 8001264:	233e      	movs	r3, #62	@ 0x3e
 8001266:	733b      	strb	r3, [r7, #12]
 8001268:	887b      	ldrh	r3, [r7, #2]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	737b      	strb	r3, [r7, #13]
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	b29b      	uxth	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	73bb      	strb	r3, [r7, #14]
    return HAL_I2C_Master_Transmit(bms->hi2c, BQ76905_I2C_ADDR, tx, 3, HAL_MAX_DELAY);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	f107 020c 	add.w	r2, r7, #12
 8001280:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2303      	movs	r3, #3
 8001288:	2110      	movs	r1, #16
 800128a:	f003 fd73 	bl	8004d74 <HAL_I2C_Master_Transmit>
 800128e:	4603      	mov	r3, r0
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <BQ76905_WriteRegister>:


// Función para escribir en un registro (requiere checksum si es de memoria)
HAL_StatusTypeDef BQ76905_WriteRegister(BQ76905_Device *bms, BQ76905_Registers reg, uint8_t *data, uint8_t len) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b090      	sub	sp, #64	@ 0x40
 800129c:	af02      	add	r7, sp, #8
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	461a      	mov	r2, r3
 80012a4:	460b      	mov	r3, r1
 80012a6:	817b      	strh	r3, [r7, #10]
 80012a8:	4613      	mov	r3, r2
 80012aa:	727b      	strb	r3, [r7, #9]
    uint8_t tx[32];
    tx[0] = BASE_SUBCOMMAND_ADDRESS; // Dirección base
 80012ac:	233e      	movs	r3, #62	@ 0x3e
 80012ae:	753b      	strb	r3, [r7, #20]
    tx[1] = (uint8_t)(reg & 0xFF);  // LSB del registro
 80012b0:	897b      	ldrh	r3, [r7, #10]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	757b      	strb	r3, [r7, #21]
    tx[2] = (uint8_t)(reg >> 8);    // MSB del registro
 80012b6:	897b      	ldrh	r3, [r7, #10]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	75bb      	strb	r3, [r7, #22]

    // Copiar datos al buffer de transmisión
    memcpy(&tx[3], data, len);
 80012c0:	7a7a      	ldrb	r2, [r7, #9]
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	3303      	adds	r3, #3
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f007 f9d1 	bl	8008672 <memcpy>

    // Enviar datos al registro
    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(bms->hi2c, BQ76905_I2C_ADDR, tx, len + 3, HAL_MAX_DELAY);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6818      	ldr	r0, [r3, #0]
 80012d4:	7a7b      	ldrb	r3, [r7, #9]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	3303      	adds	r3, #3
 80012da:	b29b      	uxth	r3, r3
 80012dc:	f107 0214 	add.w	r2, r7, #20
 80012e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012e4:	9100      	str	r1, [sp, #0]
 80012e6:	2110      	movs	r1, #16
 80012e8:	f003 fd44 	bl	8004d74 <HAL_I2C_Master_Transmit>
 80012ec:	4603      	mov	r3, r0
 80012ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (ret != HAL_OK) return ret;
 80012f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d002      	beq.n	8001300 <BQ76905_WriteRegister+0x68>
 80012fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80012fe:	e006      	b.n	800130e <BQ76905_WriteRegister+0x76>

    // Si el registro pertenece a la memoria, escribir checksum
    return BQ76905_WriteChecksum(bms, reg, data, len);
 8001300:	7a7b      	ldrb	r3, [r7, #9]
 8001302:	8979      	ldrh	r1, [r7, #10]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f000 f805 	bl	8001316 <BQ76905_WriteChecksum>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3738      	adds	r7, #56	@ 0x38
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <BQ76905_WriteChecksum>:

// Función para calcular y escribir el checksum
HAL_StatusTypeDef BQ76905_WriteChecksum(BQ76905_Device *bms, BQ76905_Registers reg, uint8_t *data, uint8_t len) {
 8001316:	b580      	push	{r7, lr}
 8001318:	b088      	sub	sp, #32
 800131a:	af02      	add	r7, sp, #8
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	607a      	str	r2, [r7, #4]
 8001320:	461a      	mov	r2, r3
 8001322:	460b      	mov	r3, r1
 8001324:	817b      	strh	r3, [r7, #10]
 8001326:	4613      	mov	r3, r2
 8001328:	727b      	strb	r3, [r7, #9]
    uint8_t sum = (uint8_t)(reg & 0xFF) + (uint8_t)(reg >> 8);
 800132a:	897b      	ldrh	r3, [r7, #10]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	897b      	ldrh	r3, [r7, #10]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	b29b      	uxth	r3, r3
 8001334:	b2db      	uxtb	r3, r3
 8001336:	4413      	add	r3, r2
 8001338:	75fb      	strb	r3, [r7, #23]

    for (uint8_t i = 0; i < len; i++) {
 800133a:	2300      	movs	r3, #0
 800133c:	75bb      	strb	r3, [r7, #22]
 800133e:	e009      	b.n	8001354 <BQ76905_WriteChecksum+0x3e>
        sum += data[i];
 8001340:	7dbb      	ldrb	r3, [r7, #22]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	781a      	ldrb	r2, [r3, #0]
 8001348:	7dfb      	ldrb	r3, [r7, #23]
 800134a:	4413      	add	r3, r2
 800134c:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < len; i++) {
 800134e:	7dbb      	ldrb	r3, [r7, #22]
 8001350:	3301      	adds	r3, #1
 8001352:	75bb      	strb	r3, [r7, #22]
 8001354:	7dba      	ldrb	r2, [r7, #22]
 8001356:	7a7b      	ldrb	r3, [r7, #9]
 8001358:	429a      	cmp	r2, r3
 800135a:	d3f1      	bcc.n	8001340 <BQ76905_WriteChecksum+0x2a>
    }

    uint8_t chksum = ~sum;      // Invertimos el complemento a uno
 800135c:	7dfb      	ldrb	r3, [r7, #23]
 800135e:	43db      	mvns	r3, r3
 8001360:	757b      	strb	r3, [r7, #21]
    uint8_t lengthVal = len + 4;  // Longitud = datos + dirección + (checksum + longitud)
 8001362:	7a7b      	ldrb	r3, [r7, #9]
 8001364:	3304      	adds	r3, #4
 8001366:	753b      	strb	r3, [r7, #20]

    uint8_t tx[3] = {0x60, chksum, lengthVal};  // Dirección del checksum
 8001368:	2360      	movs	r3, #96	@ 0x60
 800136a:	743b      	strb	r3, [r7, #16]
 800136c:	7d7b      	ldrb	r3, [r7, #21]
 800136e:	747b      	strb	r3, [r7, #17]
 8001370:	7d3b      	ldrb	r3, [r7, #20]
 8001372:	74bb      	strb	r3, [r7, #18]
    return HAL_I2C_Master_Transmit(bms->hi2c, BQ76905_I2C_ADDR, tx, 3, HAL_MAX_DELAY);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	f107 0210 	add.w	r2, r7, #16
 800137c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2303      	movs	r3, #3
 8001384:	2110      	movs	r1, #16
 8001386:	f003 fcf5 	bl	8004d74 <HAL_I2C_Master_Transmit>
 800138a:	4603      	mov	r3, r0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <BQ76905_ReadRegister>:


// Función para leer un registro
HAL_StatusTypeDef BQ76905_ReadRegister(BQ76905_Device *bms, BQ76905_Registers reg, uint8_t *rxData, uint8_t len) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af02      	add	r7, sp, #8
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	461a      	mov	r2, r3
 80013a0:	460b      	mov	r3, r1
 80013a2:	817b      	strh	r3, [r7, #10]
 80013a4:	4613      	mov	r3, r2
 80013a6:	727b      	strb	r3, [r7, #9]
    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(bms->hi2c, BQ76905_I2C_ADDR, (uint8_t*)&reg, 1, HAL_MAX_DELAY);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6818      	ldr	r0, [r3, #0]
 80013ac:	f107 020a 	add.w	r2, r7, #10
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2301      	movs	r3, #1
 80013b8:	2110      	movs	r1, #16
 80013ba:	f003 fcdb 	bl	8004d74 <HAL_I2C_Master_Transmit>
 80013be:	4603      	mov	r3, r0
 80013c0:	75fb      	strb	r3, [r7, #23]
    if (ret != HAL_OK) return ret;
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <BQ76905_ReadRegister+0x38>
 80013c8:	7dfb      	ldrb	r3, [r7, #23]
 80013ca:	e00b      	b.n	80013e4 <BQ76905_ReadRegister+0x50>
    return HAL_I2C_Master_Receive(bms->hi2c, BQ76905_I2C_ADDR, rxData, len, HAL_MAX_DELAY);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6818      	ldr	r0, [r3, #0]
 80013d0:	7a7b      	ldrb	r3, [r7, #9]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013d8:	9200      	str	r2, [sp, #0]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	2110      	movs	r1, #16
 80013de:	f003 fdc7 	bl	8004f70 <HAL_I2C_Master_Receive>
 80013e2:	4603      	mov	r3, r0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <BQ76905_Configure>:


// Función para configurar el BQ76905
void BQ76905_Configure(BQ76905_Device *bms) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af02      	add	r7, sp, #8
 80013f2:	6078      	str	r0, [r7, #4]
    uint8_t data[3];

    // Entrar en modo CONFIG_UPDATE
    BQ76905_WriteSubcommand(bms, CONFIG_UPDATE);
 80013f4:	2190      	movs	r1, #144	@ 0x90
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ff2e 	bl	8001258 <BQ76905_WriteSubcommand>
    //Curr Gain config
    data[0] = 0x01;
 80013fc:	2301      	movs	r3, #1
 80013fe:	733b      	strb	r3, [r7, #12]
    data[1] = 0x00;
 8001400:	2300      	movs	r3, #0
 8001402:	737b      	strb	r3, [r7, #13]
    BQ76905_WriteRegister(bms, CURR_GAIN, data, 2);
 8001404:	f107 020c 	add.w	r2, r7, #12
 8001408:	2302      	movs	r3, #2
 800140a:	f249 0106 	movw	r1, #36870	@ 0x9006
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ff42 	bl	8001298 <BQ76905_WriteRegister>

    data[0] = 0x0D;
 8001414:	230d      	movs	r3, #13
 8001416:	733b      	strb	r3, [r7, #12]
    BQ76905_WriteRegister(bms, REGOUT_CONFIG, data, 1);
 8001418:	f107 020c 	add.w	r2, r7, #12
 800141c:	2301      	movs	r3, #1
 800141e:	f249 0115 	movw	r1, #36885	@ 0x9015
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ff38 	bl	8001298 <BQ76905_WriteRegister>

    // Configurar VCell Mode (2 celdas)
    data[0] = 0x02;
 8001428:	2302      	movs	r3, #2
 800142a:	733b      	strb	r3, [r7, #12]
    BQ76905_WriteRegister(bms, VCELL_MODE, data, 1);
 800142c:	f107 020c 	add.w	r2, r7, #12
 8001430:	2301      	movs	r3, #1
 8001432:	f249 011b 	movw	r1, #36891	@ 0x901b
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ff2e 	bl	8001298 <BQ76905_WriteRegister>

    data[0] = 0x00;
 800143c:	2300      	movs	r3, #0
 800143e:	733b      	strb	r3, [r7, #12]
    BQ76905_WriteRegister(bms, MIN_TEMP_THERESHOLD_CB, data, 1);
 8001440:	f107 020c 	add.w	r2, r7, #12
 8001444:	2301      	movs	r3, #1
 8001446:	f249 0121 	movw	r1, #36897	@ 0x9021
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ff24 	bl	8001298 <BQ76905_WriteRegister>
    data[0] = 0xFF;
 8001450:	23ff      	movs	r3, #255	@ 0xff
 8001452:	733b      	strb	r3, [r7, #12]
    BQ76905_WriteRegister(bms, MAX_TEMP_THERESHOLD_CB, data, 1);
 8001454:	f107 020c 	add.w	r2, r7, #12
 8001458:	2301      	movs	r3, #1
 800145a:	f249 0122 	movw	r1, #36898	@ 0x9022
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ff1a 	bl	8001298 <BQ76905_WriteRegister>

    // SIN PROTECCIONES, esto me puede estar molestando para abrir los mosfet
    data[0] = 0x00;
 8001464:	2300      	movs	r3, #0
 8001466:	733b      	strb	r3, [r7, #12]
    BQ76905_WriteRegister(bms, ENABLED_PROT_A, data, 1);
 8001468:	f107 020c 	add.w	r2, r7, #12
 800146c:	2301      	movs	r3, #1
 800146e:	f249 0124 	movw	r1, #36900	@ 0x9024
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff ff10 	bl	8001298 <BQ76905_WriteRegister>
    data[0] = 0x00;
 8001478:	2300      	movs	r3, #0
 800147a:	733b      	strb	r3, [r7, #12]
    BQ76905_WriteRegister(bms, ENABLED_PROT_B, data, 1);
 800147c:	f107 020c 	add.w	r2, r7, #12
 8001480:	2301      	movs	r3, #1
 8001482:	f249 0125 	movw	r1, #36901	@ 0x9025
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ff06 	bl	8001298 <BQ76905_WriteRegister>
    data[0] = 0x00;
 800148c:	2300      	movs	r3, #0
 800148e:	733b      	strb	r3, [r7, #12]
    BQ76905_WriteRegister(bms, DSG_FET_PROTECTIONS_A, data, 1);
 8001490:	f107 020c 	add.w	r2, r7, #12
 8001494:	2301      	movs	r3, #1
 8001496:	f249 0126 	movw	r1, #36902	@ 0x9026
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fefc 	bl	8001298 <BQ76905_WriteRegister>
    data[0] = 0x00;
 80014a0:	2300      	movs	r3, #0
 80014a2:	733b      	strb	r3, [r7, #12]
    BQ76905_WriteRegister(bms, CHG_FET_PROTECTIONS_A, data, 1);
 80014a4:	f107 020c 	add.w	r2, r7, #12
 80014a8:	2301      	movs	r3, #1
 80014aa:	f249 0127 	movw	r1, #36903	@ 0x9027
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f7ff fef2 	bl	8001298 <BQ76905_WriteRegister>
    data[0] = 0x00;
 80014b4:	2300      	movs	r3, #0
 80014b6:	733b      	strb	r3, [r7, #12]
    BQ76905_WriteRegister(bms, BOTH_FET_PROTECTIONS_A, data, 1);
 80014b8:	f107 020c 	add.w	r2, r7, #12
 80014bc:	2301      	movs	r3, #1
 80014be:	f249 0128 	movw	r1, #36904	@ 0x9028
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f7ff fee8 	bl	8001298 <BQ76905_WriteRegister>

    //Pongo la corriente que puede pasar por los diodos de los fet al maximo 32700 = 0xBC + 0x7F * 256
    data[0] = 0xBC;
 80014c8:	23bc      	movs	r3, #188	@ 0xbc
 80014ca:	733b      	strb	r3, [r7, #12]
    data[1] = 0x7F;
 80014cc:	237f      	movs	r3, #127	@ 0x7f
 80014ce:	737b      	strb	r3, [r7, #13]

    BQ76905_WriteRegister(bms, BODY_DIODE_THRESHOLD, data, 2);
 80014d0:	f107 020c 	add.w	r2, r7, #12
 80014d4:	2302      	movs	r3, #2
 80014d6:	f249 0129 	movw	r1, #36905	@ 0x9029
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	f7ff fedc 	bl	8001298 <BQ76905_WriteRegister>

    //LIMITES DE CORRIENTE
    data[0] = 62;
 80014e0:	233e      	movs	r3, #62	@ 0x3e
 80014e2:	733b      	strb	r3, [r7, #12]
    BQ76905_WriteRegister(bms, OVERCURRENT_CHARGE_THRESHOLD, data, 1);
 80014e4:	f107 020c 	add.w	r2, r7, #12
 80014e8:	2301      	movs	r3, #1
 80014ea:	f249 0136 	movw	r1, #36918	@ 0x9036
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff fed2 	bl	8001298 <BQ76905_WriteRegister>
    data[0] = 100;
 80014f4:	2364      	movs	r3, #100	@ 0x64
 80014f6:	733b      	strb	r3, [r7, #12]
    BQ76905_WriteRegister(bms, OVERCURRENT_DISCHARGE_1, data, 1);
 80014f8:	f107 020c 	add.w	r2, r7, #12
 80014fc:	2301      	movs	r3, #1
 80014fe:	f249 0138 	movw	r1, #36920	@ 0x9038
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff fec8 	bl	8001298 <BQ76905_WriteRegister>
    data[0] = 100;
 8001508:	2364      	movs	r3, #100	@ 0x64
 800150a:	733b      	strb	r3, [r7, #12]
    BQ76905_WriteRegister(bms, OVERCURRENT_DISCHARGE_2, data, 1);
 800150c:	f107 020c 	add.w	r2, r7, #12
 8001510:	2301      	movs	r3, #1
 8001512:	f249 013a 	movw	r1, #36922	@ 0x903a
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7ff febe 	bl	8001298 <BQ76905_WriteRegister>
    data[0] = 0xFF;
 800151c:	23ff      	movs	r3, #255	@ 0xff
 800151e:	733b      	strb	r3, [r7, #12]
    BQ76905_WriteRegister(bms, SHORT_CIRCUIT_DISCHARGE, data, 1);
 8001520:	f107 020c 	add.w	r2, r7, #12
 8001524:	2301      	movs	r3, #1
 8001526:	f249 013c 	movw	r1, #36924	@ 0x903c
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff feb4 	bl	8001298 <BQ76905_WriteRegister>

    //Limites de temperatura
    data[0] = 255;
 8001530:	23ff      	movs	r3, #255	@ 0xff
 8001532:	733b      	strb	r3, [r7, #12]
    BQ76905_WriteRegister(bms, OVERTEMP_CHARGE_THRESHOLD, data, 1);
 8001534:	f107 020c 	add.w	r2, r7, #12
 8001538:	2301      	movs	r3, #1
 800153a:	f249 0140 	movw	r1, #36928	@ 0x9040
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff feaa 	bl	8001298 <BQ76905_WriteRegister>
    data[0] = 255;
 8001544:	23ff      	movs	r3, #255	@ 0xff
 8001546:	733b      	strb	r3, [r7, #12]
    BQ76905_WriteRegister(bms, UNDERTEMP_CHARGE_THRESHOLD, data, 1);
 8001548:	f107 020c 	add.w	r2, r7, #12
 800154c:	2301      	movs	r3, #1
 800154e:	f249 0143 	movw	r1, #36931	@ 0x9043
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff fea0 	bl	8001298 <BQ76905_WriteRegister>
    data[0] = 255;
 8001558:	23ff      	movs	r3, #255	@ 0xff
 800155a:	733b      	strb	r3, [r7, #12]
    BQ76905_WriteRegister(bms, OVERTEMP_DISCHARGE_THRESHOLD, data, 1);
 800155c:	f107 020c 	add.w	r2, r7, #12
 8001560:	2301      	movs	r3, #1
 8001562:	f249 0146 	movw	r1, #36934	@ 0x9046
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff fe96 	bl	8001298 <BQ76905_WriteRegister>
    data[0] = 255;
 800156c:	23ff      	movs	r3, #255	@ 0xff
 800156e:	733b      	strb	r3, [r7, #12]
    BQ76905_WriteRegister(bms, UNDERTEMP_DISCHARGE_THRESHOLD, data, 1);
 8001570:	f107 020c 	add.w	r2, r7, #12
 8001574:	2301      	movs	r3, #1
 8001576:	f249 0149 	movw	r1, #36937	@ 0x9049
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff fe8c 	bl	8001298 <BQ76905_WriteRegister>
    data[0] = 255;
 8001580:	23ff      	movs	r3, #255	@ 0xff
 8001582:	733b      	strb	r3, [r7, #12]
    BQ76905_WriteRegister(bms, INTERNAL_OVERTEMP_THRESHOLD, data, 1);
 8001584:	f107 020c 	add.w	r2, r7, #12
 8001588:	2301      	movs	r3, #1
 800158a:	f249 014c 	movw	r1, #36940	@ 0x904c
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff fe82 	bl	8001298 <BQ76905_WriteRegister>



    // Salir de modo CONFIG_UPDATE
    BQ76905_WriteSubcommand(bms, CONFIG_EXIT);
 8001594:	2192      	movs	r1, #146	@ 0x92
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff fe5e 	bl	8001258 <BQ76905_WriteSubcommand>
	//----------------------------------------------------------------------------------------
	// 5) Habilitar FET_EN con subcomando 0x0022
	//----------------------------------------------------------------------------------------


	data[0] = 0x22;  // LSB
 800159c:	2322      	movs	r3, #34	@ 0x22
 800159e:	733b      	strb	r3, [r7, #12]
	data[1] = 0x00;  // MSB
 80015a0:	2300      	movs	r3, #0
 80015a2:	737b      	strb	r3, [r7, #13]
	BQ76905_WriteRegister(bms, FET_CONTROL, data, 2);
 80015a4:	f107 020c 	add.w	r2, r7, #12
 80015a8:	2302      	movs	r3, #2
 80015aa:	2168      	movs	r1, #104	@ 0x68
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff fe73 	bl	8001298 <BQ76905_WriteRegister>

	//----------------------------------------------------------------------------------------
	// (Opcional) 6) Forzar manualmente DSG_ON: Comando directo 0x68 => 1 byte con bit0=1
	//----------------------------------------------------------------------------------------

	data[0] = 0x68;   // FET Control
 80015b2:	2368      	movs	r3, #104	@ 0x68
 80015b4:	733b      	strb	r3, [r7, #12]
	data[1] = 0x03;   // 0b00000001 => DSG_ON=1
 80015b6:	2303      	movs	r3, #3
 80015b8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, 0x10, data, 2, 100);
 80015ba:	f107 020c 	add.w	r2, r7, #12
 80015be:	2364      	movs	r3, #100	@ 0x64
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	2302      	movs	r3, #2
 80015c4:	2110      	movs	r1, #16
 80015c6:	480b      	ldr	r0, [pc, #44]	@ (80015f4 <BQ76905_Configure+0x208>)
 80015c8:	f003 fbd4 	bl	8004d74 <HAL_I2C_Master_Transmit>

	data[0] = 0x66;  // Dirección de Alarm Enable
 80015cc:	2366      	movs	r3, #102	@ 0x66
 80015ce:	733b      	strb	r3, [r7, #12]
	data[1] = 0x60;  // LSB del valor 0x0060 (FULLSCAN, ADSCAN)
 80015d0:	2360      	movs	r3, #96	@ 0x60
 80015d2:	737b      	strb	r3, [r7, #13]
	data[2] = 0x00;  // MSB del valor 0x0060
 80015d4:	2300      	movs	r3, #0
 80015d6:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c1, 0x10, data, 3, 100);
 80015d8:	f107 020c 	add.w	r2, r7, #12
 80015dc:	2364      	movs	r3, #100	@ 0x64
 80015de:	9300      	str	r3, [sp, #0]
 80015e0:	2303      	movs	r3, #3
 80015e2:	2110      	movs	r1, #16
 80015e4:	4803      	ldr	r0, [pc, #12]	@ (80015f4 <BQ76905_Configure+0x208>)
 80015e6:	f003 fbc5 	bl	8004d74 <HAL_I2C_Master_Transmit>





}
 80015ea:	bf00      	nop
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	200002d8 	.word	0x200002d8

080015f8 <BQ76905_ReadData>:

// Función para leer datos desde el BQ76905
void BQ76905_ReadData(BQ76905_Device *bms) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
    uint8_t rx[6]; // Buffer temporal de lectura

    //  Leer voltaje de todas las celdas (hasta 5 celdas)
    for (uint8_t i = 0; i < MAX_CELLS; i++) {
 8001600:	2300      	movs	r3, #0
 8001602:	73fb      	strb	r3, [r7, #15]
 8001604:	e01b      	b.n	800163e <BQ76905_ReadData+0x46>
        BQ76905_ReadRegister(bms, CELL1_VOLTAGE + (i * 2), rx, 2);
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	330a      	adds	r3, #10
 800160a:	b29b      	uxth	r3, r3
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	b299      	uxth	r1, r3
 8001610:	f107 0208 	add.w	r2, r7, #8
 8001614:	2302      	movs	r3, #2
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff febc 	bl	8001394 <BQ76905_ReadRegister>
        bms->cell_voltages[i] = rx[0] | (rx[1] << 8);
 800161c:	7a3b      	ldrb	r3, [r7, #8]
 800161e:	b21a      	sxth	r2, r3
 8001620:	7a7b      	ldrb	r3, [r7, #9]
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	b21b      	sxth	r3, r3
 8001626:	4313      	orrs	r3, r2
 8001628:	b21a      	sxth	r2, r3
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	b291      	uxth	r1, r2
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	460a      	mov	r2, r1
 8001636:	809a      	strh	r2, [r3, #4]
    for (uint8_t i = 0; i < MAX_CELLS; i++) {
 8001638:	7bfb      	ldrb	r3, [r7, #15]
 800163a:	3301      	adds	r3, #1
 800163c:	73fb      	strb	r3, [r7, #15]
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	2b04      	cmp	r3, #4
 8001642:	d9e0      	bls.n	8001606 <BQ76905_ReadData+0xe>
    }

    //  Leer voltaje total del pack
    BQ76905_ReadRegister(bms, STACK_VOLTAGE, rx, 2);
 8001644:	f107 0208 	add.w	r2, r7, #8
 8001648:	2302      	movs	r3, #2
 800164a:	2126      	movs	r1, #38	@ 0x26
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7ff fea1 	bl	8001394 <BQ76905_ReadRegister>
    bms->stack_voltage = rx[0] | (rx[1] << 8);
 8001652:	7a3b      	ldrb	r3, [r7, #8]
 8001654:	b21a      	sxth	r2, r3
 8001656:	7a7b      	ldrb	r3, [r7, #9]
 8001658:	021b      	lsls	r3, r3, #8
 800165a:	b21b      	sxth	r3, r3
 800165c:	4313      	orrs	r3, r2
 800165e:	b21b      	sxth	r3, r3
 8001660:	b29a      	uxth	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	81da      	strh	r2, [r3, #14]

    //  Leer voltaje de referencia interna (1.8V)
    BQ76905_ReadRegister(bms, REG18_VOLTAGE, rx, 2);
 8001666:	f107 0208 	add.w	r2, r7, #8
 800166a:	2302      	movs	r3, #2
 800166c:	2122      	movs	r1, #34	@ 0x22
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff fe90 	bl	8001394 <BQ76905_ReadRegister>
    bms->reg18_voltage = rx[0] | (rx[1] << 8);
 8001674:	7a3b      	ldrb	r3, [r7, #8]
 8001676:	b21a      	sxth	r2, r3
 8001678:	7a7b      	ldrb	r3, [r7, #9]
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	b21b      	sxth	r3, r3
 800167e:	4313      	orrs	r3, r2
 8001680:	b21b      	sxth	r3, r3
 8001682:	b29a      	uxth	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	821a      	strh	r2, [r3, #16]

    //  Leer medición de referencia de tierra
    BQ76905_ReadRegister(bms, VSS_VOLTAGE, rx, 2);
 8001688:	f107 0208 	add.w	r2, r7, #8
 800168c:	2302      	movs	r3, #2
 800168e:	2124      	movs	r1, #36	@ 0x24
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fe7f 	bl	8001394 <BQ76905_ReadRegister>
    bms->vss_voltage = rx[0] | (rx[1] << 8);
 8001696:	7a3b      	ldrb	r3, [r7, #8]
 8001698:	b21a      	sxth	r2, r3
 800169a:	7a7b      	ldrb	r3, [r7, #9]
 800169c:	021b      	lsls	r3, r3, #8
 800169e:	b21b      	sxth	r3, r3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	825a      	strh	r2, [r3, #18]

    //  Leer temperatura interna
    BQ76905_ReadRegister(bms, INT_TEMPERATURE, rx, 2);
 80016aa:	f107 0208 	add.w	r2, r7, #8
 80016ae:	2302      	movs	r3, #2
 80016b0:	2128      	movs	r1, #40	@ 0x28
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f7ff fe6e 	bl	8001394 <BQ76905_ReadRegister>
    bms->internal_temperature = rx[0] | (rx[1] << 8);
 80016b8:	7a3b      	ldrb	r3, [r7, #8]
 80016ba:	b21a      	sxth	r2, r3
 80016bc:	7a7b      	ldrb	r3, [r7, #9]
 80016be:	021b      	lsls	r3, r3, #8
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	4313      	orrs	r3, r2
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	829a      	strh	r2, [r3, #20]

    //  Leer temperatura del sensor externo (TS)
    BQ76905_ReadRegister(bms, TS_MEASUREMENT, rx, 2);
 80016ca:	f107 0208 	add.w	r2, r7, #8
 80016ce:	2302      	movs	r3, #2
 80016d0:	212a      	movs	r1, #42	@ 0x2a
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff fe5e 	bl	8001394 <BQ76905_ReadRegister>
    bms->ts_measurement = rx[0] | (rx[1] << 8);
 80016d8:	7a3b      	ldrb	r3, [r7, #8]
 80016da:	b21a      	sxth	r2, r3
 80016dc:	7a7b      	ldrb	r3, [r7, #9]
 80016de:	021b      	lsls	r3, r3, #8
 80016e0:	b21b      	sxth	r3, r3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b21b      	sxth	r3, r3
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	82da      	strh	r2, [r3, #22]

    //  Leer medición de corriente cruda (32 bits)
    BQ76905_ReadRegister(bms, RAW_CURRENT, rx, 4);
 80016ec:	f107 0208 	add.w	r2, r7, #8
 80016f0:	2304      	movs	r3, #4
 80016f2:	2136      	movs	r1, #54	@ 0x36
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff fe4d 	bl	8001394 <BQ76905_ReadRegister>
    bms->raw_current = (int32_t)(rx[0] | (rx[1] << 8) | (rx[2] << 16) | (rx[3] << 24));
 80016fa:	7a3b      	ldrb	r3, [r7, #8]
 80016fc:	461a      	mov	r2, r3
 80016fe:	7a7b      	ldrb	r3, [r7, #9]
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	431a      	orrs	r2, r3
 8001704:	7abb      	ldrb	r3, [r7, #10]
 8001706:	041b      	lsls	r3, r3, #16
 8001708:	431a      	orrs	r2, r3
 800170a:	7afb      	ldrb	r3, [r7, #11]
 800170c:	061b      	lsls	r3, r3, #24
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	619a      	str	r2, [r3, #24]

    //  Leer corriente CC2 (16 bits)
    BQ76905_ReadRegister(bms, CURRENT_MEASUREMENT, rx, 2);
 8001714:	f107 0208 	add.w	r2, r7, #8
 8001718:	2302      	movs	r3, #2
 800171a:	213a      	movs	r1, #58	@ 0x3a
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	f7ff fe39 	bl	8001394 <BQ76905_ReadRegister>
    bms->current = (int16_t)(rx[0] | (rx[1] << 8));
 8001722:	7a3b      	ldrb	r3, [r7, #8]
 8001724:	b21a      	sxth	r2, r3
 8001726:	7a7b      	ldrb	r3, [r7, #9]
 8001728:	021b      	lsls	r3, r3, #8
 800172a:	b21b      	sxth	r3, r3
 800172c:	4313      	orrs	r3, r2
 800172e:	b21a      	sxth	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	839a      	strh	r2, [r3, #28]

    //  Leer corriente CC1 (16 bits)
    BQ76905_ReadRegister(bms, CC1_CURRENT_MEASUREMENT, rx, 2);
 8001734:	f107 0208 	add.w	r2, r7, #8
 8001738:	2302      	movs	r3, #2
 800173a:	213c      	movs	r1, #60	@ 0x3c
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f7ff fe29 	bl	8001394 <BQ76905_ReadRegister>
    bms->cc1_current = (int16_t)(rx[0] | (rx[1] << 8));
 8001742:	7a3b      	ldrb	r3, [r7, #8]
 8001744:	b21a      	sxth	r2, r3
 8001746:	7a7b      	ldrb	r3, [r7, #9]
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	b21b      	sxth	r3, r3
 800174c:	4313      	orrs	r3, r2
 800174e:	b21a      	sxth	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	83da      	strh	r2, [r3, #30]

    //  Leer estado de la batería
    BQ76905_ReadRegister(bms, BATTERY_STATUS, rx, 2);
 8001754:	f107 0208 	add.w	r2, r7, #8
 8001758:	2302      	movs	r3, #2
 800175a:	2112      	movs	r1, #18
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff fe19 	bl	8001394 <BQ76905_ReadRegister>
    bms->battery_status = rx[0] | (rx[1] << 8);
 8001762:	7a3b      	ldrb	r3, [r7, #8]
 8001764:	b25a      	sxtb	r2, r3
 8001766:	7a7b      	ldrb	r3, [r7, #9]
 8001768:	021b      	lsls	r3, r3, #8
 800176a:	b25b      	sxtb	r3, r3
 800176c:	4313      	orrs	r3, r2
 800176e:	b25b      	sxtb	r3, r3
 8001770:	b2da      	uxtb	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	f883 2020 	strb.w	r2, [r3, #32]

    //  Leer estado de alarmas y protecciones
    BQ76905_ReadRegister(bms, ALARM_STATUS, &bms->alarm_status, 1);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 800177e:	2301      	movs	r3, #1
 8001780:	2162      	movs	r1, #98	@ 0x62
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff fe06 	bl	8001394 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, ALARM_RAW_STATUS, &bms->alarm_raw_status, 1);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 800178e:	2301      	movs	r3, #1
 8001790:	2164      	movs	r1, #100	@ 0x64
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f7ff fdfe 	bl	8001394 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, ENABLED_PROT_A, &bms->enabled_protections, 1);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f103 0223 	add.w	r2, r3, #35	@ 0x23
 800179e:	2301      	movs	r3, #1
 80017a0:	f249 0124 	movw	r1, #36900	@ 0x9024
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff fdf5 	bl	8001394 <BQ76905_ReadRegister>

    //  Leer umbrales de protección por voltaje
    BQ76905_ReadRegister(bms, CELL_UNDERVOLTAGE_THRESHOLD, rx, 2);
 80017aa:	f107 0208 	add.w	r2, r7, #8
 80017ae:	2302      	movs	r3, #2
 80017b0:	f249 012e 	movw	r1, #36910	@ 0x902e
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f7ff fded 	bl	8001394 <BQ76905_ReadRegister>
    bms->cell_undervoltage_threshold = rx[0] | (rx[1] << 8);
 80017ba:	7a3b      	ldrb	r3, [r7, #8]
 80017bc:	b21a      	sxth	r2, r3
 80017be:	7a7b      	ldrb	r3, [r7, #9]
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	b21b      	sxth	r3, r3
 80017c4:	4313      	orrs	r3, r2
 80017c6:	b21b      	sxth	r3, r3
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	849a      	strh	r2, [r3, #36]	@ 0x24

    BQ76905_ReadRegister(bms, CELL_OVERVOLTAGE_THRESHOLD, rx, 2);
 80017ce:	f107 0208 	add.w	r2, r7, #8
 80017d2:	2302      	movs	r3, #2
 80017d4:	f249 0132 	movw	r1, #36914	@ 0x9032
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff fddb 	bl	8001394 <BQ76905_ReadRegister>
    bms->cell_overvoltage_threshold = rx[0] | (rx[1] << 8);
 80017de:	7a3b      	ldrb	r3, [r7, #8]
 80017e0:	b21a      	sxth	r2, r3
 80017e2:	7a7b      	ldrb	r3, [r7, #9]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	4313      	orrs	r3, r2
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	84da      	strh	r2, [r3, #38]	@ 0x26

    //  Leer protecciones de sobrecorriente y cortocircuito
    BQ76905_ReadRegister(bms, OVERCURRENT_CHARGE_THRESHOLD, &bms->overcurrent_charge_threshold, 1);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80017f8:	2301      	movs	r3, #1
 80017fa:	f249 0136 	movw	r1, #36918	@ 0x9036
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f7ff fdc8 	bl	8001394 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, OVERCURRENT_DISCHARGE_1, &bms->overcurrent_discharge_1, 1);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 800180a:	2301      	movs	r3, #1
 800180c:	f249 0138 	movw	r1, #36920	@ 0x9038
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff fdbf 	bl	8001394 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, OVERCURRENT_DISCHARGE_2, &bms->overcurrent_discharge_2, 1);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 800181c:	2301      	movs	r3, #1
 800181e:	f249 013a 	movw	r1, #36922	@ 0x903a
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff fdb6 	bl	8001394 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, SHORT_CIRCUIT_DISCHARGE, &bms->short_circuit_discharge, 1);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f103 022b 	add.w	r2, r3, #43	@ 0x2b
 800182e:	2301      	movs	r3, #1
 8001830:	f249 013c 	movw	r1, #36924	@ 0x903c
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff fdad 	bl	8001394 <BQ76905_ReadRegister>

    //  Leer protecciones de temperatura
    BQ76905_ReadRegister(bms, OVERTEMP_CHARGE_THRESHOLD, &bms->overtemp_charge_threshold, 1);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 8001840:	2301      	movs	r3, #1
 8001842:	f249 0140 	movw	r1, #36928	@ 0x9040
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff fda4 	bl	8001394 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, UNDERTEMP_CHARGE_THRESHOLD, &bms->undertemp_charge_threshold, 1);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 8001852:	2301      	movs	r3, #1
 8001854:	f249 0143 	movw	r1, #36931	@ 0x9043
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff fd9b 	bl	8001394 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, OVERTEMP_DISCHARGE_THRESHOLD, &bms->overtemp_discharge_threshold, 1);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 8001864:	2301      	movs	r3, #1
 8001866:	f249 0146 	movw	r1, #36934	@ 0x9046
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f7ff fd92 	bl	8001394 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, UNDERTEMP_DISCHARGE_THRESHOLD, &bms->undertemp_discharge_threshold, 1);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 8001876:	2301      	movs	r3, #1
 8001878:	f249 0149 	movw	r1, #36937	@ 0x9049
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff fd89 	bl	8001394 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, INTERNAL_OVERTEMP_THRESHOLD, &bms->internal_overtemp_threshold, 1);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8001888:	2301      	movs	r3, #1
 800188a:	f249 014c 	movw	r1, #36940	@ 0x904c
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff fd80 	bl	8001394 <BQ76905_ReadRegister>
}
 8001894:	bf00      	nop
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	0000      	movs	r0, r0
	...

080018a0 <sendBMSDataI2C>:

void sendBMSDataI2C(BQ76905_Device *bms) {
 80018a0:	b590      	push	{r4, r7, lr}
 80018a2:	b097      	sub	sp, #92	@ 0x5c
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	6078      	str	r0, [r7, #4]
    char buffer[BUFFER_SIZE];

    // 🟢 Encabezado
    snprintf(buffer, BUFFER_SIZE, "\n--- Datos del BMS ---\n");
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	4a0d      	ldr	r2, [pc, #52]	@ (80018e4 <sendBMSDataI2C+0x44>)
 80018ae:	2140      	movs	r1, #64	@ 0x40
 80018b0:	4618      	mov	r0, r3
 80018b2:	f006 fdaf 	bl	8008414 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe fcd8 	bl	8000270 <strlen>
 80018c0:	4603      	mov	r3, r0
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	f107 020c 	add.w	r2, r7, #12
 80018c8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018cc:	9100      	str	r1, [sp, #0]
 80018ce:	2110      	movs	r1, #16
 80018d0:	4805      	ldr	r0, [pc, #20]	@ (80018e8 <sendBMSDataI2C+0x48>)
 80018d2:	f003 fa4f 	bl	8004d74 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 80018d6:	200a      	movs	r0, #10
 80018d8:	f001 fd80 	bl	80033dc <HAL_Delay>

    // 🔹 Voltajes de celdas
    for (int i = 0; i < MAX_CELLS; i++) {
 80018dc:	2300      	movs	r3, #0
 80018de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018e0:	e034      	b.n	800194c <sendBMSDataI2C+0xac>
 80018e2:	bf00      	nop
 80018e4:	0800a830 	.word	0x0800a830
 80018e8:	2000032c 	.word	0x2000032c
        snprintf(buffer, BUFFER_SIZE, "Celda %d: %.3f V\n", i + 1, bms->cell_voltages[i] * 0.001);
 80018ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018ee:	1c5c      	adds	r4, r3, #1
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	4413      	add	r3, r2
 80018f8:	889b      	ldrh	r3, [r3, #4]
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7fe fe12 	bl	8000524 <__aeabi_i2d>
 8001900:	a3d3      	add	r3, pc, #844	@ (adr r3, 8001c50 <sendBMSDataI2C+0x3b0>)
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	f7fe fe77 	bl	80005f8 <__aeabi_dmul>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	f107 000c 	add.w	r0, r7, #12
 8001912:	e9cd 2300 	strd	r2, r3, [sp]
 8001916:	4623      	mov	r3, r4
 8001918:	4ad1      	ldr	r2, [pc, #836]	@ (8001c60 <sendBMSDataI2C+0x3c0>)
 800191a:	2140      	movs	r1, #64	@ 0x40
 800191c:	f006 fd7a 	bl	8008414 <sniprintf>
        HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	4618      	mov	r0, r3
 8001926:	f7fe fca3 	bl	8000270 <strlen>
 800192a:	4603      	mov	r3, r0
 800192c:	b29b      	uxth	r3, r3
 800192e:	f107 020c 	add.w	r2, r7, #12
 8001932:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001936:	9100      	str	r1, [sp, #0]
 8001938:	2110      	movs	r1, #16
 800193a:	48ca      	ldr	r0, [pc, #808]	@ (8001c64 <sendBMSDataI2C+0x3c4>)
 800193c:	f003 fa1a 	bl	8004d74 <HAL_I2C_Master_Transmit>
        HAL_Delay(10);
 8001940:	200a      	movs	r0, #10
 8001942:	f001 fd4b 	bl	80033dc <HAL_Delay>
    for (int i = 0; i < MAX_CELLS; i++) {
 8001946:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001948:	3301      	adds	r3, #1
 800194a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800194c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800194e:	2b04      	cmp	r3, #4
 8001950:	ddcc      	ble.n	80018ec <sendBMSDataI2C+0x4c>
    }

    // 🔹 Voltajes generales
    snprintf(buffer, BUFFER_SIZE, "Voltaje Pack: %.3f V\n", bms->stack_voltage * 0.001);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	89db      	ldrh	r3, [r3, #14]
 8001956:	4618      	mov	r0, r3
 8001958:	f7fe fde4 	bl	8000524 <__aeabi_i2d>
 800195c:	a3bc      	add	r3, pc, #752	@ (adr r3, 8001c50 <sendBMSDataI2C+0x3b0>)
 800195e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001962:	f7fe fe49 	bl	80005f8 <__aeabi_dmul>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	f107 000c 	add.w	r0, r7, #12
 800196e:	e9cd 2300 	strd	r2, r3, [sp]
 8001972:	4abd      	ldr	r2, [pc, #756]	@ (8001c68 <sendBMSDataI2C+0x3c8>)
 8001974:	2140      	movs	r1, #64	@ 0x40
 8001976:	f006 fd4d 	bl	8008414 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 800197a:	f107 030c 	add.w	r3, r7, #12
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fc76 	bl	8000270 <strlen>
 8001984:	4603      	mov	r3, r0
 8001986:	b29b      	uxth	r3, r3
 8001988:	f107 020c 	add.w	r2, r7, #12
 800198c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001990:	9100      	str	r1, [sp, #0]
 8001992:	2110      	movs	r1, #16
 8001994:	48b3      	ldr	r0, [pc, #716]	@ (8001c64 <sendBMSDataI2C+0x3c4>)
 8001996:	f003 f9ed 	bl	8004d74 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 800199a:	200a      	movs	r0, #10
 800199c:	f001 fd1e 	bl	80033dc <HAL_Delay>

    snprintf(buffer, BUFFER_SIZE, "Voltaje REG18: %.3f V\n", bms->reg18_voltage * 0.001);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	8a1b      	ldrh	r3, [r3, #16]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fdbd 	bl	8000524 <__aeabi_i2d>
 80019aa:	a3a9      	add	r3, pc, #676	@ (adr r3, 8001c50 <sendBMSDataI2C+0x3b0>)
 80019ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b0:	f7fe fe22 	bl	80005f8 <__aeabi_dmul>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	f107 000c 	add.w	r0, r7, #12
 80019bc:	e9cd 2300 	strd	r2, r3, [sp]
 80019c0:	4aaa      	ldr	r2, [pc, #680]	@ (8001c6c <sendBMSDataI2C+0x3cc>)
 80019c2:	2140      	movs	r1, #64	@ 0x40
 80019c4:	f006 fd26 	bl	8008414 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 80019c8:	f107 030c 	add.w	r3, r7, #12
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fc4f 	bl	8000270 <strlen>
 80019d2:	4603      	mov	r3, r0
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	f107 020c 	add.w	r2, r7, #12
 80019da:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019de:	9100      	str	r1, [sp, #0]
 80019e0:	2110      	movs	r1, #16
 80019e2:	48a0      	ldr	r0, [pc, #640]	@ (8001c64 <sendBMSDataI2C+0x3c4>)
 80019e4:	f003 f9c6 	bl	8004d74 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 80019e8:	200a      	movs	r0, #10
 80019ea:	f001 fcf7 	bl	80033dc <HAL_Delay>

    snprintf(buffer, BUFFER_SIZE, "Voltaje VSS: %.3f V\n", bms->vss_voltage * 0.001);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	8a5b      	ldrh	r3, [r3, #18]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fd96 	bl	8000524 <__aeabi_i2d>
 80019f8:	a395      	add	r3, pc, #596	@ (adr r3, 8001c50 <sendBMSDataI2C+0x3b0>)
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	f7fe fdfb 	bl	80005f8 <__aeabi_dmul>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	f107 000c 	add.w	r0, r7, #12
 8001a0a:	e9cd 2300 	strd	r2, r3, [sp]
 8001a0e:	4a98      	ldr	r2, [pc, #608]	@ (8001c70 <sendBMSDataI2C+0x3d0>)
 8001a10:	2140      	movs	r1, #64	@ 0x40
 8001a12:	f006 fcff 	bl	8008414 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001a16:	f107 030c 	add.w	r3, r7, #12
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7fe fc28 	bl	8000270 <strlen>
 8001a20:	4603      	mov	r3, r0
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	f107 020c 	add.w	r2, r7, #12
 8001a28:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a2c:	9100      	str	r1, [sp, #0]
 8001a2e:	2110      	movs	r1, #16
 8001a30:	488c      	ldr	r0, [pc, #560]	@ (8001c64 <sendBMSDataI2C+0x3c4>)
 8001a32:	f003 f99f 	bl	8004d74 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001a36:	200a      	movs	r0, #10
 8001a38:	f001 fcd0 	bl	80033dc <HAL_Delay>

    // 🔹 Temperaturas
    snprintf(buffer, BUFFER_SIZE, "Temp Interna: %.2f °C\n", bms->internal_temperature * 0.1);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7fe fd6e 	bl	8000524 <__aeabi_i2d>
 8001a48:	a383      	add	r3, pc, #524	@ (adr r3, 8001c58 <sendBMSDataI2C+0x3b8>)
 8001a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4e:	f7fe fdd3 	bl	80005f8 <__aeabi_dmul>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	f107 000c 	add.w	r0, r7, #12
 8001a5a:	e9cd 2300 	strd	r2, r3, [sp]
 8001a5e:	4a85      	ldr	r2, [pc, #532]	@ (8001c74 <sendBMSDataI2C+0x3d4>)
 8001a60:	2140      	movs	r1, #64	@ 0x40
 8001a62:	f006 fcd7 	bl	8008414 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7fe fc00 	bl	8000270 <strlen>
 8001a70:	4603      	mov	r3, r0
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	f107 020c 	add.w	r2, r7, #12
 8001a78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a7c:	9100      	str	r1, [sp, #0]
 8001a7e:	2110      	movs	r1, #16
 8001a80:	4878      	ldr	r0, [pc, #480]	@ (8001c64 <sendBMSDataI2C+0x3c4>)
 8001a82:	f003 f977 	bl	8004d74 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001a86:	200a      	movs	r0, #10
 8001a88:	f001 fca8 	bl	80033dc <HAL_Delay>

    snprintf(buffer, BUFFER_SIZE, "Temp Externa: %.2f °C\n", bms->ts_measurement * 0.1);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	8adb      	ldrh	r3, [r3, #22]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fd47 	bl	8000524 <__aeabi_i2d>
 8001a96:	a370      	add	r3, pc, #448	@ (adr r3, 8001c58 <sendBMSDataI2C+0x3b8>)
 8001a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9c:	f7fe fdac 	bl	80005f8 <__aeabi_dmul>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	f107 000c 	add.w	r0, r7, #12
 8001aa8:	e9cd 2300 	strd	r2, r3, [sp]
 8001aac:	4a72      	ldr	r2, [pc, #456]	@ (8001c78 <sendBMSDataI2C+0x3d8>)
 8001aae:	2140      	movs	r1, #64	@ 0x40
 8001ab0:	f006 fcb0 	bl	8008414 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001ab4:	f107 030c 	add.w	r3, r7, #12
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fbd9 	bl	8000270 <strlen>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	f107 020c 	add.w	r2, r7, #12
 8001ac6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001aca:	9100      	str	r1, [sp, #0]
 8001acc:	2110      	movs	r1, #16
 8001ace:	4865      	ldr	r0, [pc, #404]	@ (8001c64 <sendBMSDataI2C+0x3c4>)
 8001ad0:	f003 f950 	bl	8004d74 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001ad4:	200a      	movs	r0, #10
 8001ad6:	f001 fc81 	bl	80033dc <HAL_Delay>

    // 🔹 Corriente
    snprintf(buffer, BUFFER_SIZE, "Corriente Raw: %ld\n", (int32_t)bms->raw_current);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	f107 000c 	add.w	r0, r7, #12
 8001ae2:	4a66      	ldr	r2, [pc, #408]	@ (8001c7c <sendBMSDataI2C+0x3dc>)
 8001ae4:	2140      	movs	r1, #64	@ 0x40
 8001ae6:	f006 fc95 	bl	8008414 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001aea:	f107 030c 	add.w	r3, r7, #12
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7fe fbbe 	bl	8000270 <strlen>
 8001af4:	4603      	mov	r3, r0
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	f107 020c 	add.w	r2, r7, #12
 8001afc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b00:	9100      	str	r1, [sp, #0]
 8001b02:	2110      	movs	r1, #16
 8001b04:	4857      	ldr	r0, [pc, #348]	@ (8001c64 <sendBMSDataI2C+0x3c4>)
 8001b06:	f003 f935 	bl	8004d74 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001b0a:	200a      	movs	r0, #10
 8001b0c:	f001 fc66 	bl	80033dc <HAL_Delay>

    snprintf(buffer, BUFFER_SIZE, "Corriente CC2: %d mA\n", (int16_t)bms->current);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001b16:	f107 000c 	add.w	r0, r7, #12
 8001b1a:	4a59      	ldr	r2, [pc, #356]	@ (8001c80 <sendBMSDataI2C+0x3e0>)
 8001b1c:	2140      	movs	r1, #64	@ 0x40
 8001b1e:	f006 fc79 	bl	8008414 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001b22:	f107 030c 	add.w	r3, r7, #12
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fba2 	bl	8000270 <strlen>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	f107 020c 	add.w	r2, r7, #12
 8001b34:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b38:	9100      	str	r1, [sp, #0]
 8001b3a:	2110      	movs	r1, #16
 8001b3c:	4849      	ldr	r0, [pc, #292]	@ (8001c64 <sendBMSDataI2C+0x3c4>)
 8001b3e:	f003 f919 	bl	8004d74 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001b42:	200a      	movs	r0, #10
 8001b44:	f001 fc4a 	bl	80033dc <HAL_Delay>

    snprintf(buffer, BUFFER_SIZE, "Corriente CC1: %d mA\n", (int16_t)bms->cc1_current);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001b4e:	f107 000c 	add.w	r0, r7, #12
 8001b52:	4a4c      	ldr	r2, [pc, #304]	@ (8001c84 <sendBMSDataI2C+0x3e4>)
 8001b54:	2140      	movs	r1, #64	@ 0x40
 8001b56:	f006 fc5d 	bl	8008414 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001b5a:	f107 030c 	add.w	r3, r7, #12
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fb86 	bl	8000270 <strlen>
 8001b64:	4603      	mov	r3, r0
 8001b66:	b29b      	uxth	r3, r3
 8001b68:	f107 020c 	add.w	r2, r7, #12
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b70:	9100      	str	r1, [sp, #0]
 8001b72:	2110      	movs	r1, #16
 8001b74:	483b      	ldr	r0, [pc, #236]	@ (8001c64 <sendBMSDataI2C+0x3c4>)
 8001b76:	f003 f8fd 	bl	8004d74 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001b7a:	200a      	movs	r0, #10
 8001b7c:	f001 fc2e 	bl	80033dc <HAL_Delay>

    // 🔹 Estados y Protecciones
    snprintf(buffer, BUFFER_SIZE, "Estado Bateria: 0x%02X\n", bms->battery_status);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b86:	f107 000c 	add.w	r0, r7, #12
 8001b8a:	4a3f      	ldr	r2, [pc, #252]	@ (8001c88 <sendBMSDataI2C+0x3e8>)
 8001b8c:	2140      	movs	r1, #64	@ 0x40
 8001b8e:	f006 fc41 	bl	8008414 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7fe fb6a 	bl	8000270 <strlen>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	f107 020c 	add.w	r2, r7, #12
 8001ba4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ba8:	9100      	str	r1, [sp, #0]
 8001baa:	2110      	movs	r1, #16
 8001bac:	482d      	ldr	r0, [pc, #180]	@ (8001c64 <sendBMSDataI2C+0x3c4>)
 8001bae:	f003 f8e1 	bl	8004d74 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001bb2:	200a      	movs	r0, #10
 8001bb4:	f001 fc12 	bl	80033dc <HAL_Delay>

    snprintf(buffer, BUFFER_SIZE, "Alarmas Activas: 0x%02X\n", bms->alarm_status);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001bbe:	f107 000c 	add.w	r0, r7, #12
 8001bc2:	4a32      	ldr	r2, [pc, #200]	@ (8001c8c <sendBMSDataI2C+0x3ec>)
 8001bc4:	2140      	movs	r1, #64	@ 0x40
 8001bc6:	f006 fc25 	bl	8008414 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001bca:	f107 030c 	add.w	r3, r7, #12
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7fe fb4e 	bl	8000270 <strlen>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	f107 020c 	add.w	r2, r7, #12
 8001bdc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001be0:	9100      	str	r1, [sp, #0]
 8001be2:	2110      	movs	r1, #16
 8001be4:	481f      	ldr	r0, [pc, #124]	@ (8001c64 <sendBMSDataI2C+0x3c4>)
 8001be6:	f003 f8c5 	bl	8004d74 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001bea:	200a      	movs	r0, #10
 8001bec:	f001 fbf6 	bl	80033dc <HAL_Delay>

    snprintf(buffer, BUFFER_SIZE, "Protecciones Activas: 0x%02X\n", bms->enabled_protections);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001bf6:	f107 000c 	add.w	r0, r7, #12
 8001bfa:	4a25      	ldr	r2, [pc, #148]	@ (8001c90 <sendBMSDataI2C+0x3f0>)
 8001bfc:	2140      	movs	r1, #64	@ 0x40
 8001bfe:	f006 fc09 	bl	8008414 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001c02:	f107 030c 	add.w	r3, r7, #12
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fb32 	bl	8000270 <strlen>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	f107 020c 	add.w	r2, r7, #12
 8001c14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c18:	9100      	str	r1, [sp, #0]
 8001c1a:	2110      	movs	r1, #16
 8001c1c:	4811      	ldr	r0, [pc, #68]	@ (8001c64 <sendBMSDataI2C+0x3c4>)
 8001c1e:	f003 f8a9 	bl	8004d74 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001c22:	200a      	movs	r0, #10
 8001c24:	f001 fbda 	bl	80033dc <HAL_Delay>

    // 🔹 Configuración de Protección por Voltaje
    snprintf(buffer, BUFFER_SIZE, "Undervoltage Threshold: %.3f V\n", bms->cell_undervoltage_threshold * 0.001);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fc79 	bl	8000524 <__aeabi_i2d>
 8001c32:	a307      	add	r3, pc, #28	@ (adr r3, 8001c50 <sendBMSDataI2C+0x3b0>)
 8001c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c38:	f7fe fcde 	bl	80005f8 <__aeabi_dmul>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	f107 000c 	add.w	r0, r7, #12
 8001c44:	e9cd 2300 	strd	r2, r3, [sp]
 8001c48:	e024      	b.n	8001c94 <sendBMSDataI2C+0x3f4>
 8001c4a:	bf00      	nop
 8001c4c:	f3af 8000 	nop.w
 8001c50:	d2f1a9fc 	.word	0xd2f1a9fc
 8001c54:	3f50624d 	.word	0x3f50624d
 8001c58:	9999999a 	.word	0x9999999a
 8001c5c:	3fb99999 	.word	0x3fb99999
 8001c60:	0800a848 	.word	0x0800a848
 8001c64:	2000032c 	.word	0x2000032c
 8001c68:	0800a85c 	.word	0x0800a85c
 8001c6c:	0800a874 	.word	0x0800a874
 8001c70:	0800a88c 	.word	0x0800a88c
 8001c74:	0800a8a4 	.word	0x0800a8a4
 8001c78:	0800a8bc 	.word	0x0800a8bc
 8001c7c:	0800a8d4 	.word	0x0800a8d4
 8001c80:	0800a8e8 	.word	0x0800a8e8
 8001c84:	0800a900 	.word	0x0800a900
 8001c88:	0800a918 	.word	0x0800a918
 8001c8c:	0800a930 	.word	0x0800a930
 8001c90:	0800a94c 	.word	0x0800a94c
 8001c94:	4a86      	ldr	r2, [pc, #536]	@ (8001eb0 <sendBMSDataI2C+0x610>)
 8001c96:	2140      	movs	r1, #64	@ 0x40
 8001c98:	f006 fbbc 	bl	8008414 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001c9c:	f107 030c 	add.w	r3, r7, #12
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7fe fae5 	bl	8000270 <strlen>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	f107 020c 	add.w	r2, r7, #12
 8001cae:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001cb2:	9100      	str	r1, [sp, #0]
 8001cb4:	2110      	movs	r1, #16
 8001cb6:	487f      	ldr	r0, [pc, #508]	@ (8001eb4 <sendBMSDataI2C+0x614>)
 8001cb8:	f003 f85c 	bl	8004d74 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001cbc:	200a      	movs	r0, #10
 8001cbe:	f001 fb8d 	bl	80033dc <HAL_Delay>

    snprintf(buffer, BUFFER_SIZE, "Overvoltage Threshold: %.3f V\n", bms->cell_overvoltage_threshold * 0.001);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fc2c 	bl	8000524 <__aeabi_i2d>
 8001ccc:	a374      	add	r3, pc, #464	@ (adr r3, 8001ea0 <sendBMSDataI2C+0x600>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	f7fe fc91 	bl	80005f8 <__aeabi_dmul>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	f107 000c 	add.w	r0, r7, #12
 8001cde:	e9cd 2300 	strd	r2, r3, [sp]
 8001ce2:	4a75      	ldr	r2, [pc, #468]	@ (8001eb8 <sendBMSDataI2C+0x618>)
 8001ce4:	2140      	movs	r1, #64	@ 0x40
 8001ce6:	f006 fb95 	bl	8008414 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001cea:	f107 030c 	add.w	r3, r7, #12
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7fe fabe 	bl	8000270 <strlen>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	f107 020c 	add.w	r2, r7, #12
 8001cfc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d00:	9100      	str	r1, [sp, #0]
 8001d02:	2110      	movs	r1, #16
 8001d04:	486b      	ldr	r0, [pc, #428]	@ (8001eb4 <sendBMSDataI2C+0x614>)
 8001d06:	f003 f835 	bl	8004d74 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001d0a:	200a      	movs	r0, #10
 8001d0c:	f001 fb66 	bl	80033dc <HAL_Delay>

    // 🔹 Protección por Corriente
    snprintf(buffer, BUFFER_SIZE, "Overcurrent Charge threshold: %d mA\n", bms->overcurrent_charge_threshold * 10);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001d16:	461a      	mov	r2, r3
 8001d18:	4613      	mov	r3, r2
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	4413      	add	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	f107 000c 	add.w	r0, r7, #12
 8001d24:	4a65      	ldr	r2, [pc, #404]	@ (8001ebc <sendBMSDataI2C+0x61c>)
 8001d26:	2140      	movs	r1, #64	@ 0x40
 8001d28:	f006 fb74 	bl	8008414 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001d2c:	f107 030c 	add.w	r3, r7, #12
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7fe fa9d 	bl	8000270 <strlen>
 8001d36:	4603      	mov	r3, r0
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	f107 020c 	add.w	r2, r7, #12
 8001d3e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d42:	9100      	str	r1, [sp, #0]
 8001d44:	2110      	movs	r1, #16
 8001d46:	485b      	ldr	r0, [pc, #364]	@ (8001eb4 <sendBMSDataI2C+0x614>)
 8001d48:	f003 f814 	bl	8004d74 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001d4c:	200a      	movs	r0, #10
 8001d4e:	f001 fb45 	bl	80033dc <HAL_Delay>

    snprintf(buffer, BUFFER_SIZE, "Overcurrent Discharge 1: %d mA\n", bms->overcurrent_discharge_1 * 10);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001d58:	461a      	mov	r2, r3
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	f107 000c 	add.w	r0, r7, #12
 8001d66:	4a56      	ldr	r2, [pc, #344]	@ (8001ec0 <sendBMSDataI2C+0x620>)
 8001d68:	2140      	movs	r1, #64	@ 0x40
 8001d6a:	f006 fb53 	bl	8008414 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001d6e:	f107 030c 	add.w	r3, r7, #12
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fa7c 	bl	8000270 <strlen>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	f107 020c 	add.w	r2, r7, #12
 8001d80:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d84:	9100      	str	r1, [sp, #0]
 8001d86:	2110      	movs	r1, #16
 8001d88:	484a      	ldr	r0, [pc, #296]	@ (8001eb4 <sendBMSDataI2C+0x614>)
 8001d8a:	f002 fff3 	bl	8004d74 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001d8e:	200a      	movs	r0, #10
 8001d90:	f001 fb24 	bl	80033dc <HAL_Delay>

    snprintf(buffer, BUFFER_SIZE, "Overcurrent Discharge 2: %d mA\n", bms->overcurrent_discharge_2 * 10);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	f107 000c 	add.w	r0, r7, #12
 8001da8:	4a46      	ldr	r2, [pc, #280]	@ (8001ec4 <sendBMSDataI2C+0x624>)
 8001daa:	2140      	movs	r1, #64	@ 0x40
 8001dac:	f006 fb32 	bl	8008414 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001db0:	f107 030c 	add.w	r3, r7, #12
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7fe fa5b 	bl	8000270 <strlen>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	f107 020c 	add.w	r2, r7, #12
 8001dc2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001dc6:	9100      	str	r1, [sp, #0]
 8001dc8:	2110      	movs	r1, #16
 8001dca:	483a      	ldr	r0, [pc, #232]	@ (8001eb4 <sendBMSDataI2C+0x614>)
 8001dcc:	f002 ffd2 	bl	8004d74 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001dd0:	200a      	movs	r0, #10
 8001dd2:	f001 fb03 	bl	80033dc <HAL_Delay>

    snprintf(buffer, BUFFER_SIZE, "Short Circuit Discharge: %d mA\n", bms->short_circuit_discharge * 10);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001ddc:	461a      	mov	r2, r3
 8001dde:	4613      	mov	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4413      	add	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	f107 000c 	add.w	r0, r7, #12
 8001dea:	4a37      	ldr	r2, [pc, #220]	@ (8001ec8 <sendBMSDataI2C+0x628>)
 8001dec:	2140      	movs	r1, #64	@ 0x40
 8001dee:	f006 fb11 	bl	8008414 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fa3a 	bl	8000270 <strlen>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	f107 020c 	add.w	r2, r7, #12
 8001e04:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e08:	9100      	str	r1, [sp, #0]
 8001e0a:	2110      	movs	r1, #16
 8001e0c:	4829      	ldr	r0, [pc, #164]	@ (8001eb4 <sendBMSDataI2C+0x614>)
 8001e0e:	f002 ffb1 	bl	8004d74 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001e12:	200a      	movs	r0, #10
 8001e14:	f001 fae2 	bl	80033dc <HAL_Delay>

    // 🔹 Protección por Temperatura
    snprintf(buffer, BUFFER_SIZE, "Overtemp Charge: %.2f °C\n", bms->overtemp_charge_threshold * 0.1);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fb80 	bl	8000524 <__aeabi_i2d>
 8001e24:	a320      	add	r3, pc, #128	@ (adr r3, 8001ea8 <sendBMSDataI2C+0x608>)
 8001e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2a:	f7fe fbe5 	bl	80005f8 <__aeabi_dmul>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	f107 000c 	add.w	r0, r7, #12
 8001e36:	e9cd 2300 	strd	r2, r3, [sp]
 8001e3a:	4a24      	ldr	r2, [pc, #144]	@ (8001ecc <sendBMSDataI2C+0x62c>)
 8001e3c:	2140      	movs	r1, #64	@ 0x40
 8001e3e:	f006 fae9 	bl	8008414 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001e42:	f107 030c 	add.w	r3, r7, #12
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7fe fa12 	bl	8000270 <strlen>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	f107 020c 	add.w	r2, r7, #12
 8001e54:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e58:	9100      	str	r1, [sp, #0]
 8001e5a:	2110      	movs	r1, #16
 8001e5c:	4815      	ldr	r0, [pc, #84]	@ (8001eb4 <sendBMSDataI2C+0x614>)
 8001e5e:	f002 ff89 	bl	8004d74 <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001e62:	200a      	movs	r0, #10
 8001e64:	f001 faba 	bl	80033dc <HAL_Delay>

    // 🟢 Fin del mensaje
    snprintf(buffer, BUFFER_SIZE, "--------------------------\n");
 8001e68:	f107 030c 	add.w	r3, r7, #12
 8001e6c:	4a18      	ldr	r2, [pc, #96]	@ (8001ed0 <sendBMSDataI2C+0x630>)
 8001e6e:	2140      	movs	r1, #64	@ 0x40
 8001e70:	4618      	mov	r0, r3
 8001e72:	f006 facf 	bl	8008414 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe f9f8 	bl	8000270 <strlen>
 8001e80:	4603      	mov	r3, r0
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	f107 020c 	add.w	r2, r7, #12
 8001e88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e8c:	9100      	str	r1, [sp, #0]
 8001e8e:	2110      	movs	r1, #16
 8001e90:	4808      	ldr	r0, [pc, #32]	@ (8001eb4 <sendBMSDataI2C+0x614>)
 8001e92:	f002 ff6f 	bl	8004d74 <HAL_I2C_Master_Transmit>
}
 8001e96:	bf00      	nop
 8001e98:	3754      	adds	r7, #84	@ 0x54
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd90      	pop	{r4, r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001ea4:	3f50624d 	.word	0x3f50624d
 8001ea8:	9999999a 	.word	0x9999999a
 8001eac:	3fb99999 	.word	0x3fb99999
 8001eb0:	0800a96c 	.word	0x0800a96c
 8001eb4:	2000032c 	.word	0x2000032c
 8001eb8:	0800a98c 	.word	0x0800a98c
 8001ebc:	0800a9ac 	.word	0x0800a9ac
 8001ec0:	0800a9d4 	.word	0x0800a9d4
 8001ec4:	0800a9f4 	.word	0x0800a9f4
 8001ec8:	0800aa14 	.word	0x0800aa14
 8001ecc:	0800aa34 	.word	0x0800aa34
 8001ed0:	0800aa50 	.word	0x0800aa50

08001ed4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	607b      	str	r3, [r7, #4]
 8001ede:	4b0c      	ldr	r3, [pc, #48]	@ (8001f10 <MX_DMA_Init+0x3c>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	@ (8001f10 <MX_DMA_Init+0x3c>)
 8001ee4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eea:	4b09      	ldr	r3, [pc, #36]	@ (8001f10 <MX_DMA_Init+0x3c>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ef2:	607b      	str	r3, [r7, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	2100      	movs	r1, #0
 8001efa:	2038      	movs	r0, #56	@ 0x38
 8001efc:	f002 f899 	bl	8004032 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f00:	2038      	movs	r0, #56	@ 0x38
 8001f02:	f002 f8b2 	bl	800406a <HAL_NVIC_EnableIRQ>

}
 8001f06:	bf00      	nop
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800

08001f14 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b08a      	sub	sp, #40	@ 0x28
 8001f18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f1a:	f107 0314 	add.w	r3, r7, #20
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	605a      	str	r2, [r3, #4]
 8001f24:	609a      	str	r2, [r3, #8]
 8001f26:	60da      	str	r2, [r3, #12]
 8001f28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	4b59      	ldr	r3, [pc, #356]	@ (8002094 <MX_GPIO_Init+0x180>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f32:	4a58      	ldr	r2, [pc, #352]	@ (8002094 <MX_GPIO_Init+0x180>)
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f3a:	4b56      	ldr	r3, [pc, #344]	@ (8002094 <MX_GPIO_Init+0x180>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	f003 0304 	and.w	r3, r3, #4
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
 8001f4a:	4b52      	ldr	r3, [pc, #328]	@ (8002094 <MX_GPIO_Init+0x180>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	4a51      	ldr	r2, [pc, #324]	@ (8002094 <MX_GPIO_Init+0x180>)
 8001f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f56:	4b4f      	ldr	r3, [pc, #316]	@ (8002094 <MX_GPIO_Init+0x180>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f5e:	60fb      	str	r3, [r7, #12]
 8001f60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	4b4b      	ldr	r3, [pc, #300]	@ (8002094 <MX_GPIO_Init+0x180>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	4a4a      	ldr	r2, [pc, #296]	@ (8002094 <MX_GPIO_Init+0x180>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f72:	4b48      	ldr	r3, [pc, #288]	@ (8002094 <MX_GPIO_Init+0x180>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	4b44      	ldr	r3, [pc, #272]	@ (8002094 <MX_GPIO_Init+0x180>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f86:	4a43      	ldr	r2, [pc, #268]	@ (8002094 <MX_GPIO_Init+0x180>)
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f8e:	4b41      	ldr	r3, [pc, #260]	@ (8002094 <MX_GPIO_Init+0x180>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	603b      	str	r3, [r7, #0]
 8001f9e:	4b3d      	ldr	r3, [pc, #244]	@ (8002094 <MX_GPIO_Init+0x180>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	4a3c      	ldr	r2, [pc, #240]	@ (8002094 <MX_GPIO_Init+0x180>)
 8001fa4:	f043 0308 	orr.w	r3, r3, #8
 8001fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001faa:	4b3a      	ldr	r3, [pc, #232]	@ (8002094 <MX_GPIO_Init+0x180>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Enable5V_Pin|Enable3_3VBis_Pin|Enable3_3V_Pin|Enable5VBis_Pin
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f645 4104 	movw	r1, #23556	@ 0x5c04
 8001fbc:	4836      	ldr	r0, [pc, #216]	@ (8002098 <MX_GPIO_Init+0x184>)
 8001fbe:	f002 fd7b 	bl	8004ab8 <HAL_GPIO_WritePin>
                          |EnableCalefactor_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EnableBatOut_GPIO_Port, EnableBatOut_Pin, GPIO_PIN_RESET);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001fc8:	4834      	ldr	r0, [pc, #208]	@ (800209c <MX_GPIO_Init+0x188>)
 8001fca:	f002 fd75 	bl	8004ab8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC7 PC8 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 8001fce:	f24f 13c0 	movw	r3, #61888	@ 0xf1c0
 8001fd2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fdc:	f107 0314 	add.w	r3, r7, #20
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	482f      	ldr	r0, [pc, #188]	@ (80020a0 <MX_GPIO_Init+0x18c>)
 8001fe4:	f002 fbcc 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Enable5V_Pin|Enable3_3VBis_Pin|Enable3_3V_Pin|Enable5VBis_Pin
 8001fe8:	f645 4304 	movw	r3, #23556	@ 0x5c04
 8001fec:	617b      	str	r3, [r7, #20]
                          |EnableCalefactor_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	4619      	mov	r1, r3
 8002000:	4825      	ldr	r0, [pc, #148]	@ (8002098 <MX_GPIO_Init+0x184>)
 8002002:	f002 fbbd 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
 8002006:	f24a 0338 	movw	r3, #41016	@ 0xa038
 800200a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800200c:	2303      	movs	r3, #3
 800200e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	4619      	mov	r1, r3
 800201a:	481f      	ldr	r0, [pc, #124]	@ (8002098 <MX_GPIO_Init+0x184>)
 800201c:	f002 fbb0 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EnableBatOut_Pin;
 8002020:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002024:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002026:	2301      	movs	r3, #1
 8002028:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800202a:	2301      	movs	r3, #1
 800202c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EnableBatOut_GPIO_Port, &GPIO_InitStruct);
 8002032:	f107 0314 	add.w	r3, r7, #20
 8002036:	4619      	mov	r1, r3
 8002038:	4818      	ldr	r0, [pc, #96]	@ (800209c <MX_GPIO_Init+0x188>)
 800203a:	f002 fba1 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800203e:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8002042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002044:	2303      	movs	r3, #3
 8002046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204c:	f107 0314 	add.w	r3, r7, #20
 8002050:	4619      	mov	r1, r3
 8002052:	4812      	ldr	r0, [pc, #72]	@ (800209c <MX_GPIO_Init+0x188>)
 8002054:	f002 fb94 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002058:	2304      	movs	r3, #4
 800205a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800205c:	2303      	movs	r3, #3
 800205e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	4619      	mov	r1, r3
 800206a:	480e      	ldr	r0, [pc, #56]	@ (80020a4 <MX_GPIO_Init+0x190>)
 800206c:	f002 fb88 	bl	8004780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMS_Alert_Pin;
 8002070:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800207a:	2301      	movs	r3, #1
 800207c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BMS_Alert_GPIO_Port, &GPIO_InitStruct);
 800207e:	f107 0314 	add.w	r3, r7, #20
 8002082:	4619      	mov	r1, r3
 8002084:	4804      	ldr	r0, [pc, #16]	@ (8002098 <MX_GPIO_Init+0x184>)
 8002086:	f002 fb7b 	bl	8004780 <HAL_GPIO_Init>

}
 800208a:	bf00      	nop
 800208c:	3728      	adds	r7, #40	@ 0x28
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800
 8002098:	40020400 	.word	0x40020400
 800209c:	40020000 	.word	0x40020000
 80020a0:	40020800 	.word	0x40020800
 80020a4:	40020c00 	.word	0x40020c00

080020a8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020ac:	4b12      	ldr	r3, [pc, #72]	@ (80020f8 <MX_I2C1_Init+0x50>)
 80020ae:	4a13      	ldr	r2, [pc, #76]	@ (80020fc <MX_I2C1_Init+0x54>)
 80020b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80020b2:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <MX_I2C1_Init+0x50>)
 80020b4:	4a12      	ldr	r2, [pc, #72]	@ (8002100 <MX_I2C1_Init+0x58>)
 80020b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80020b8:	4b0f      	ldr	r3, [pc, #60]	@ (80020f8 <MX_I2C1_Init+0x50>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80020be:	4b0e      	ldr	r3, [pc, #56]	@ (80020f8 <MX_I2C1_Init+0x50>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020c4:	4b0c      	ldr	r3, [pc, #48]	@ (80020f8 <MX_I2C1_Init+0x50>)
 80020c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020cc:	4b0a      	ldr	r3, [pc, #40]	@ (80020f8 <MX_I2C1_Init+0x50>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020d2:	4b09      	ldr	r3, [pc, #36]	@ (80020f8 <MX_I2C1_Init+0x50>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020d8:	4b07      	ldr	r3, [pc, #28]	@ (80020f8 <MX_I2C1_Init+0x50>)
 80020da:	2200      	movs	r2, #0
 80020dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020de:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <MX_I2C1_Init+0x50>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020e4:	4804      	ldr	r0, [pc, #16]	@ (80020f8 <MX_I2C1_Init+0x50>)
 80020e6:	f002 fd01 	bl	8004aec <HAL_I2C_Init>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020f0:	f000 fc4c 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020f4:	bf00      	nop
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	200002d8 	.word	0x200002d8
 80020fc:	40005400 	.word	0x40005400
 8002100:	00061a80 	.word	0x00061a80

08002104 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002108:	4b12      	ldr	r3, [pc, #72]	@ (8002154 <MX_I2C3_Init+0x50>)
 800210a:	4a13      	ldr	r2, [pc, #76]	@ (8002158 <MX_I2C3_Init+0x54>)
 800210c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800210e:	4b11      	ldr	r3, [pc, #68]	@ (8002154 <MX_I2C3_Init+0x50>)
 8002110:	4a12      	ldr	r2, [pc, #72]	@ (800215c <MX_I2C3_Init+0x58>)
 8002112:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002114:	4b0f      	ldr	r3, [pc, #60]	@ (8002154 <MX_I2C3_Init+0x50>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800211a:	4b0e      	ldr	r3, [pc, #56]	@ (8002154 <MX_I2C3_Init+0x50>)
 800211c:	2200      	movs	r2, #0
 800211e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002120:	4b0c      	ldr	r3, [pc, #48]	@ (8002154 <MX_I2C3_Init+0x50>)
 8002122:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002126:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002128:	4b0a      	ldr	r3, [pc, #40]	@ (8002154 <MX_I2C3_Init+0x50>)
 800212a:	2200      	movs	r2, #0
 800212c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800212e:	4b09      	ldr	r3, [pc, #36]	@ (8002154 <MX_I2C3_Init+0x50>)
 8002130:	2200      	movs	r2, #0
 8002132:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002134:	4b07      	ldr	r3, [pc, #28]	@ (8002154 <MX_I2C3_Init+0x50>)
 8002136:	2200      	movs	r2, #0
 8002138:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800213a:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <MX_I2C3_Init+0x50>)
 800213c:	2200      	movs	r2, #0
 800213e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002140:	4804      	ldr	r0, [pc, #16]	@ (8002154 <MX_I2C3_Init+0x50>)
 8002142:	f002 fcd3 	bl	8004aec <HAL_I2C_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800214c:	f000 fc1e 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002150:	bf00      	nop
 8002152:	bd80      	pop	{r7, pc}
 8002154:	2000032c 	.word	0x2000032c
 8002158:	40005c00 	.word	0x40005c00
 800215c:	000186a0 	.word	0x000186a0

08002160 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08c      	sub	sp, #48	@ 0x30
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 031c 	add.w	r3, r7, #28
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a42      	ldr	r2, [pc, #264]	@ (8002288 <HAL_I2C_MspInit+0x128>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d12c      	bne.n	80021dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	4b41      	ldr	r3, [pc, #260]	@ (800228c <HAL_I2C_MspInit+0x12c>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	4a40      	ldr	r2, [pc, #256]	@ (800228c <HAL_I2C_MspInit+0x12c>)
 800218c:	f043 0302 	orr.w	r3, r3, #2
 8002190:	6313      	str	r3, [r2, #48]	@ 0x30
 8002192:	4b3e      	ldr	r3, [pc, #248]	@ (800228c <HAL_I2C_MspInit+0x12c>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	61bb      	str	r3, [r7, #24]
 800219c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_I2C_BMS_Pin|SDA_I2C_BMS_Pin;
 800219e:	23c0      	movs	r3, #192	@ 0xc0
 80021a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021a2:	2312      	movs	r3, #18
 80021a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021aa:	2303      	movs	r3, #3
 80021ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021ae:	2304      	movs	r3, #4
 80021b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b2:	f107 031c 	add.w	r3, r7, #28
 80021b6:	4619      	mov	r1, r3
 80021b8:	4835      	ldr	r0, [pc, #212]	@ (8002290 <HAL_I2C_MspInit+0x130>)
 80021ba:	f002 fae1 	bl	8004780 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
 80021c2:	4b32      	ldr	r3, [pc, #200]	@ (800228c <HAL_I2C_MspInit+0x12c>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c6:	4a31      	ldr	r2, [pc, #196]	@ (800228c <HAL_I2C_MspInit+0x12c>)
 80021c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ce:	4b2f      	ldr	r3, [pc, #188]	@ (800228c <HAL_I2C_MspInit+0x12c>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021d6:	617b      	str	r3, [r7, #20]
 80021d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80021da:	e050      	b.n	800227e <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a2c      	ldr	r2, [pc, #176]	@ (8002294 <HAL_I2C_MspInit+0x134>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d14b      	bne.n	800227e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	4b28      	ldr	r3, [pc, #160]	@ (800228c <HAL_I2C_MspInit+0x12c>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	4a27      	ldr	r2, [pc, #156]	@ (800228c <HAL_I2C_MspInit+0x12c>)
 80021f0:	f043 0304 	orr.w	r3, r3, #4
 80021f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f6:	4b25      	ldr	r3, [pc, #148]	@ (800228c <HAL_I2C_MspInit+0x12c>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	4b21      	ldr	r3, [pc, #132]	@ (800228c <HAL_I2C_MspInit+0x12c>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	4a20      	ldr	r2, [pc, #128]	@ (800228c <HAL_I2C_MspInit+0x12c>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6313      	str	r3, [r2, #48]	@ 0x30
 8002212:	4b1e      	ldr	r3, [pc, #120]	@ (800228c <HAL_I2C_MspInit+0x12c>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SDA_I2C_COM_Pin;
 800221e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002224:	2312      	movs	r3, #18
 8002226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002228:	2301      	movs	r3, #1
 800222a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222c:	2303      	movs	r3, #3
 800222e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002230:	2304      	movs	r3, #4
 8002232:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SDA_I2C_COM_GPIO_Port, &GPIO_InitStruct);
 8002234:	f107 031c 	add.w	r3, r7, #28
 8002238:	4619      	mov	r1, r3
 800223a:	4817      	ldr	r0, [pc, #92]	@ (8002298 <HAL_I2C_MspInit+0x138>)
 800223c:	f002 faa0 	bl	8004780 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCL_I2C_COM_Pin;
 8002240:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002246:	2312      	movs	r3, #18
 8002248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800224a:	2301      	movs	r3, #1
 800224c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224e:	2303      	movs	r3, #3
 8002250:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002252:	2304      	movs	r3, #4
 8002254:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SCL_I2C_COM_GPIO_Port, &GPIO_InitStruct);
 8002256:	f107 031c 	add.w	r3, r7, #28
 800225a:	4619      	mov	r1, r3
 800225c:	480f      	ldr	r0, [pc, #60]	@ (800229c <HAL_I2C_MspInit+0x13c>)
 800225e:	f002 fa8f 	bl	8004780 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	4b09      	ldr	r3, [pc, #36]	@ (800228c <HAL_I2C_MspInit+0x12c>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	4a08      	ldr	r2, [pc, #32]	@ (800228c <HAL_I2C_MspInit+0x12c>)
 800226c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002270:	6413      	str	r3, [r2, #64]	@ 0x40
 8002272:	4b06      	ldr	r3, [pc, #24]	@ (800228c <HAL_I2C_MspInit+0x12c>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
}
 800227e:	bf00      	nop
 8002280:	3730      	adds	r7, #48	@ 0x30
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40005400 	.word	0x40005400
 800228c:	40023800 	.word	0x40023800
 8002290:	40020400 	.word	0x40020400
 8002294:	40005c00 	.word	0x40005c00
 8002298:	40020800 	.word	0x40020800
 800229c:	40020000 	.word	0x40020000

080022a0 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 0 */

uint8_t convCompleted=0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
	convCompleted=1;
 80022a8:	4b04      	ldr	r3, [pc, #16]	@ (80022bc <HAL_ADC_ConvCpltCallback+0x1c>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	701a      	strb	r2, [r3, #0]
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr
 80022ba:	bf00      	nop
 80022bc:	20000494 	.word	0x20000494

080022c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80022c0:	b5b0      	push	{r4, r5, r7, lr}
 80022c2:	b0c2      	sub	sp, #264	@ 0x108
 80022c4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80022c6:	f001 f817 	bl	80032f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80022ca:	f000 faf7 	bl	80028bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80022ce:	f7ff fe21 	bl	8001f14 <MX_GPIO_Init>
  MX_DMA_Init();
 80022d2:	f7ff fdff 	bl	8001ed4 <MX_DMA_Init>
  MX_ADC1_Init();
 80022d6:	f7fe fdff 	bl	8000ed8 <MX_ADC1_Init>
  MX_I2C3_Init();
 80022da:	f7ff ff13 	bl	8002104 <MX_I2C3_Init>
  MX_TIM2_Init();
 80022de:	f000 fd1b 	bl	8002d18 <MX_TIM2_Init>
  MX_TIM4_Init();
 80022e2:	f000 fd71 	bl	8002dc8 <MX_TIM4_Init>
  MX_TIM5_Init();
 80022e6:	f000 fdc7 	bl	8002e78 <MX_TIM5_Init>
  MX_UART4_Init();
 80022ea:	f000 feef 	bl	80030cc <MX_UART4_Init>
  MX_USB_OTG_FS_PCD_Init();
 80022ee:	f000 ff5f 	bl	80031b0 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80022f2:	f7ff fed9 	bl	80020a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
   mpptX = MPPT_Create("Eje_x", &hadc1, ADC_CHANNEL_11, ADC_CHANNEL_10, &htim4, TIM_CHANNEL_4);
 80022f6:	4c6b      	ldr	r4, [pc, #428]	@ (80024a4 <main+0x1e4>)
 80022f8:	4638      	mov	r0, r7
 80022fa:	230c      	movs	r3, #12
 80022fc:	9302      	str	r3, [sp, #8]
 80022fe:	4b6a      	ldr	r3, [pc, #424]	@ (80024a8 <main+0x1e8>)
 8002300:	9301      	str	r3, [sp, #4]
 8002302:	230a      	movs	r3, #10
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	230b      	movs	r3, #11
 8002308:	4a68      	ldr	r2, [pc, #416]	@ (80024ac <main+0x1ec>)
 800230a:	4969      	ldr	r1, [pc, #420]	@ (80024b0 <main+0x1f0>)
 800230c:	f000 fb44 	bl	8002998 <MPPT_Create>
 8002310:	4625      	mov	r5, r4
 8002312:	463c      	mov	r4, r7
 8002314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002316:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002318:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800231a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800231c:	6823      	ldr	r3, [r4, #0]
 800231e:	602b      	str	r3, [r5, #0]
   mpptY = MPPT_Create("Eje_y", &hadc1, ADC_CHANNEL_13, ADC_CHANNEL_12, &htim2, TIM_CHANNEL_1);
 8002320:	4c64      	ldr	r4, [pc, #400]	@ (80024b4 <main+0x1f4>)
 8002322:	4638      	mov	r0, r7
 8002324:	2300      	movs	r3, #0
 8002326:	9302      	str	r3, [sp, #8]
 8002328:	4b63      	ldr	r3, [pc, #396]	@ (80024b8 <main+0x1f8>)
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	230c      	movs	r3, #12
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	230d      	movs	r3, #13
 8002332:	4a5e      	ldr	r2, [pc, #376]	@ (80024ac <main+0x1ec>)
 8002334:	4961      	ldr	r1, [pc, #388]	@ (80024bc <main+0x1fc>)
 8002336:	f000 fb2f 	bl	8002998 <MPPT_Create>
 800233a:	4625      	mov	r5, r4
 800233c:	463c      	mov	r4, r7
 800233e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002340:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002346:	6823      	ldr	r3, [r4, #0]
 8002348:	602b      	str	r3, [r5, #0]
   mpptZ = MPPT_Create("Eje_z", &hadc1, ADC_CHANNEL_2, ADC_CHANNEL_1, &htim5, TIM_CHANNEL_1);
 800234a:	4c5d      	ldr	r4, [pc, #372]	@ (80024c0 <main+0x200>)
 800234c:	4638      	mov	r0, r7
 800234e:	2300      	movs	r3, #0
 8002350:	9302      	str	r3, [sp, #8]
 8002352:	4b5c      	ldr	r3, [pc, #368]	@ (80024c4 <main+0x204>)
 8002354:	9301      	str	r3, [sp, #4]
 8002356:	2301      	movs	r3, #1
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	2302      	movs	r3, #2
 800235c:	4a53      	ldr	r2, [pc, #332]	@ (80024ac <main+0x1ec>)
 800235e:	495a      	ldr	r1, [pc, #360]	@ (80024c8 <main+0x208>)
 8002360:	f000 fb1a 	bl	8002998 <MPPT_Create>
 8002364:	4625      	mov	r5, r4
 8002366:	463c      	mov	r4, r7
 8002368:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800236a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800236c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800236e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002370:	6823      	ldr	r3, [r4, #0]
 8002372:	602b      	str	r3, [r5, #0]

//PDU Variables
   pdu_V5 = PDU_Create("V5", &hadc1, ADC_CHANNEL_14, ADC_CHANNEL_15, GPIOB, GPIO_PIN_2);
 8002374:	4c55      	ldr	r4, [pc, #340]	@ (80024cc <main+0x20c>)
 8002376:	4638      	mov	r0, r7
 8002378:	2304      	movs	r3, #4
 800237a:	9302      	str	r3, [sp, #8]
 800237c:	4b54      	ldr	r3, [pc, #336]	@ (80024d0 <main+0x210>)
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	230f      	movs	r3, #15
 8002382:	9300      	str	r3, [sp, #0]
 8002384:	230e      	movs	r3, #14
 8002386:	4a49      	ldr	r2, [pc, #292]	@ (80024ac <main+0x1ec>)
 8002388:	4952      	ldr	r1, [pc, #328]	@ (80024d4 <main+0x214>)
 800238a:	f000 fb49 	bl	8002a20 <PDU_Create>
 800238e:	4625      	mov	r5, r4
 8002390:	463c      	mov	r4, r7
 8002392:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002396:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800239a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   pdu_V5bis = PDU_Create("V5Bis", &hadc1, ADC_CHANNEL_5, ADC_CHANNEL_4, GPIOB, GPIO_PIN_12);
 800239e:	4c4e      	ldr	r4, [pc, #312]	@ (80024d8 <main+0x218>)
 80023a0:	4638      	mov	r0, r7
 80023a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023a6:	9302      	str	r3, [sp, #8]
 80023a8:	4b49      	ldr	r3, [pc, #292]	@ (80024d0 <main+0x210>)
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	2304      	movs	r3, #4
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2305      	movs	r3, #5
 80023b2:	4a3e      	ldr	r2, [pc, #248]	@ (80024ac <main+0x1ec>)
 80023b4:	4949      	ldr	r1, [pc, #292]	@ (80024dc <main+0x21c>)
 80023b6:	f000 fb33 	bl	8002a20 <PDU_Create>
 80023ba:	4625      	mov	r5, r4
 80023bc:	463c      	mov	r4, r7
 80023be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023c2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80023c6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   pdu_V3 = PDU_Create("V3", &hadc1, ADC_CHANNEL_6, ADC_CHANNEL_7, GPIOB, GPIO_PIN_11);
 80023ca:	4c45      	ldr	r4, [pc, #276]	@ (80024e0 <main+0x220>)
 80023cc:	4638      	mov	r0, r7
 80023ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80023d2:	9302      	str	r3, [sp, #8]
 80023d4:	4b3e      	ldr	r3, [pc, #248]	@ (80024d0 <main+0x210>)
 80023d6:	9301      	str	r3, [sp, #4]
 80023d8:	2307      	movs	r3, #7
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2306      	movs	r3, #6
 80023de:	4a33      	ldr	r2, [pc, #204]	@ (80024ac <main+0x1ec>)
 80023e0:	4940      	ldr	r1, [pc, #256]	@ (80024e4 <main+0x224>)
 80023e2:	f000 fb1d 	bl	8002a20 <PDU_Create>
 80023e6:	4625      	mov	r5, r4
 80023e8:	463c      	mov	r4, r7
 80023ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023ee:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80023f2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   pdu_V3bis = PDU_Create("V3Bis", &hadc1, ADC_CHANNEL_8, ADC_CHANNEL_9, GPIOB, GPIO_PIN_10);
 80023f6:	4c3c      	ldr	r4, [pc, #240]	@ (80024e8 <main+0x228>)
 80023f8:	4638      	mov	r0, r7
 80023fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80023fe:	9302      	str	r3, [sp, #8]
 8002400:	4b33      	ldr	r3, [pc, #204]	@ (80024d0 <main+0x210>)
 8002402:	9301      	str	r3, [sp, #4]
 8002404:	2309      	movs	r3, #9
 8002406:	9300      	str	r3, [sp, #0]
 8002408:	2308      	movs	r3, #8
 800240a:	4a28      	ldr	r2, [pc, #160]	@ (80024ac <main+0x1ec>)
 800240c:	4937      	ldr	r1, [pc, #220]	@ (80024ec <main+0x22c>)
 800240e:	f000 fb07 	bl	8002a20 <PDU_Create>
 8002412:	4625      	mov	r5, r4
 8002414:	463c      	mov	r4, r7
 8002416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002418:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800241a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800241e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   pdu_BatOut = PDU_Create("VBatOut", NULL, 0, 0, GPIOA, GPIO_PIN_9);
 8002422:	4c33      	ldr	r4, [pc, #204]	@ (80024f0 <main+0x230>)
 8002424:	4638      	mov	r0, r7
 8002426:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800242a:	9302      	str	r3, [sp, #8]
 800242c:	4b31      	ldr	r3, [pc, #196]	@ (80024f4 <main+0x234>)
 800242e:	9301      	str	r3, [sp, #4]
 8002430:	2300      	movs	r3, #0
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	2300      	movs	r3, #0
 8002436:	2200      	movs	r2, #0
 8002438:	492f      	ldr	r1, [pc, #188]	@ (80024f8 <main+0x238>)
 800243a:	f000 faf1 	bl	8002a20 <PDU_Create>
 800243e:	4625      	mov	r5, r4
 8002440:	463c      	mov	r4, r7
 8002442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002444:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002446:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800244a:	e885 0007 	stmia.w	r5, {r0, r1, r2}


  //HAL_TIM_PWM_Start(mpptZ.htim, mpptZ.tim_channel);
  HAL_TIM_PWM_Start(mpptY.htim, mpptY.tim_channel);
 800244e:	4b19      	ldr	r3, [pc, #100]	@ (80024b4 <main+0x1f4>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	4a18      	ldr	r2, [pc, #96]	@ (80024b4 <main+0x1f4>)
 8002454:	6912      	ldr	r2, [r2, #16]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f004 f939 	bl	80066d0 <HAL_TIM_PWM_Start>
  //HAL_TIM_PWM_Start(mpptX.htim, mpptX.tim_channel);
  //__HAL_TIM_SET_COMPARE(mpptX.htim, mpptX.tim_channel, mpptX.dutyCycle); //mpptX.htim->CCR4=255*0.5 (SI ES TIMER 4)
  __HAL_TIM_SET_COMPARE(mpptY.htim, mpptY.tim_channel, mpptY.dutyCycle); //mpptY.htim->CCR1=255*0.5 (SI ES TIMER 1)
 800245e:	4b15      	ldr	r3, [pc, #84]	@ (80024b4 <main+0x1f4>)
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d106      	bne.n	8002474 <main+0x1b4>
 8002466:	4b13      	ldr	r3, [pc, #76]	@ (80024b4 <main+0x1f4>)
 8002468:	7f1a      	ldrb	r2, [r3, #28]
 800246a:	4b12      	ldr	r3, [pc, #72]	@ (80024b4 <main+0x1f4>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	635a      	str	r2, [r3, #52]	@ 0x34
 8002472:	e04a      	b.n	800250a <main+0x24a>
 8002474:	4b0f      	ldr	r3, [pc, #60]	@ (80024b4 <main+0x1f4>)
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	2b04      	cmp	r3, #4
 800247a:	d107      	bne.n	800248c <main+0x1cc>
 800247c:	4b0d      	ldr	r3, [pc, #52]	@ (80024b4 <main+0x1f4>)
 800247e:	7f19      	ldrb	r1, [r3, #28]
 8002480:	4b0c      	ldr	r3, [pc, #48]	@ (80024b4 <main+0x1f4>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	460b      	mov	r3, r1
 8002488:	6393      	str	r3, [r2, #56]	@ 0x38
 800248a:	e03e      	b.n	800250a <main+0x24a>
 800248c:	4b09      	ldr	r3, [pc, #36]	@ (80024b4 <main+0x1f4>)
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	2b08      	cmp	r3, #8
 8002492:	d133      	bne.n	80024fc <main+0x23c>
 8002494:	4b07      	ldr	r3, [pc, #28]	@ (80024b4 <main+0x1f4>)
 8002496:	7f19      	ldrb	r1, [r3, #28]
 8002498:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <main+0x1f4>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	460b      	mov	r3, r1
 80024a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80024a2:	e032      	b.n	800250a <main+0x24a>
 80024a4:	20000380 	.word	0x20000380
 80024a8:	200004e4 	.word	0x200004e4
 80024ac:	20000230 	.word	0x20000230
 80024b0:	0800aa6c 	.word	0x0800aa6c
 80024b4:	200003a4 	.word	0x200003a4
 80024b8:	2000049c 	.word	0x2000049c
 80024bc:	0800aa74 	.word	0x0800aa74
 80024c0:	200003c8 	.word	0x200003c8
 80024c4:	2000052c 	.word	0x2000052c
 80024c8:	0800aa7c 	.word	0x0800aa7c
 80024cc:	200003ec 	.word	0x200003ec
 80024d0:	40020400 	.word	0x40020400
 80024d4:	0800aa84 	.word	0x0800aa84
 80024d8:	20000408 	.word	0x20000408
 80024dc:	0800aa88 	.word	0x0800aa88
 80024e0:	20000424 	.word	0x20000424
 80024e4:	0800aa90 	.word	0x0800aa90
 80024e8:	20000440 	.word	0x20000440
 80024ec:	0800aa94 	.word	0x0800aa94
 80024f0:	2000045c 	.word	0x2000045c
 80024f4:	40020000 	.word	0x40020000
 80024f8:	0800aa9c 	.word	0x0800aa9c
 80024fc:	4bbc      	ldr	r3, [pc, #752]	@ (80027f0 <main+0x530>)
 80024fe:	7f19      	ldrb	r1, [r3, #28]
 8002500:	4bbb      	ldr	r3, [pc, #748]	@ (80027f0 <main+0x530>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	460b      	mov	r3, r1
 8002508:	6413      	str	r3, [r2, #64]	@ 0x40
  //__HAL_TIM_SET_COMPARE(mpptZ.htim, mpptZ.tim_channel, mpptZ.dutyCycle); //mpptZ.htim->CCR1=255*0.5 (SI ES TIMER 1)

//Configuro las salidas

  enablePDU(&pdu_V3);
 800250a:	48ba      	ldr	r0, [pc, #744]	@ (80027f4 <main+0x534>)
 800250c:	f000 faaf 	bl	8002a6e <enablePDU>
  enablePDU(&pdu_V5bis);
 8002510:	48b9      	ldr	r0, [pc, #740]	@ (80027f8 <main+0x538>)
 8002512:	f000 faac 	bl	8002a6e <enablePDU>
  enablePDU(&pdu_BatOut);
 8002516:	48b9      	ldr	r0, [pc, #740]	@ (80027fc <main+0x53c>)
 8002518:	f000 faa9 	bl	8002a6e <enablePDU>

  BQ76905_Configure(&bms);
 800251c:	48b8      	ldr	r0, [pc, #736]	@ (8002800 <main+0x540>)
 800251e:	f7fe ff65 	bl	80013ec <BQ76905_Configure>

  HAL_ADC_Start_DMA(&hadc1,(uint32_t *) rawValues, 14);
 8002522:	220e      	movs	r2, #14
 8002524:	49b7      	ldr	r1, [pc, #732]	@ (8002804 <main+0x544>)
 8002526:	48b8      	ldr	r0, [pc, #736]	@ (8002808 <main+0x548>)
 8002528:	f001 f8d0 	bl	80036cc <HAL_ADC_Start_DMA>
  uint8_t counter = 0;
 800252c:	2300      	movs	r3, #0
 800252e:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	 //crear funcion para esto
		while(!convCompleted);
 8002532:	bf00      	nop
 8002534:	4bb5      	ldr	r3, [pc, #724]	@ (800280c <main+0x54c>)
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0fb      	beq.n	8002534 <main+0x274>
		mpptZ.current = (uint16_t)rawValues[0] * 0.606 * conversionFactor;
 800253c:	4bb1      	ldr	r3, [pc, #708]	@ (8002804 <main+0x544>)
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7fd ffef 	bl	8000524 <__aeabi_i2d>
 8002546:	a3a8      	add	r3, pc, #672	@ (adr r3, 80027e8 <main+0x528>)
 8002548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254c:	f7fe f854 	bl	80005f8 <__aeabi_dmul>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4610      	mov	r0, r2
 8002556:	4619      	mov	r1, r3
 8002558:	4bad      	ldr	r3, [pc, #692]	@ (8002810 <main+0x550>)
 800255a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800255e:	f7fe f84b 	bl	80005f8 <__aeabi_dmul>
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4610      	mov	r0, r2
 8002568:	4619      	mov	r1, r3
 800256a:	f7fe fb1d 	bl	8000ba8 <__aeabi_d2uiz>
 800256e:	4603      	mov	r3, r0
 8002570:	b29a      	uxth	r2, r3
 8002572:	4ba8      	ldr	r3, [pc, #672]	@ (8002814 <main+0x554>)
 8002574:	82da      	strh	r2, [r3, #22]
		mpptZ.voltage = (uint16_t)rawValues[1] * 2 * conversionFactor; //las tensiones se multiplican x2
 8002576:	4ba3      	ldr	r3, [pc, #652]	@ (8002804 <main+0x544>)
 8002578:	885b      	ldrh	r3, [r3, #2]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	4618      	mov	r0, r3
 800257e:	f7fd ffd1 	bl	8000524 <__aeabi_i2d>
 8002582:	4ba3      	ldr	r3, [pc, #652]	@ (8002810 <main+0x550>)
 8002584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002588:	f7fe f836 	bl	80005f8 <__aeabi_dmul>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
 8002590:	4610      	mov	r0, r2
 8002592:	4619      	mov	r1, r3
 8002594:	f7fe fb08 	bl	8000ba8 <__aeabi_d2uiz>
 8002598:	4603      	mov	r3, r0
 800259a:	b29a      	uxth	r2, r3
 800259c:	4b9d      	ldr	r3, [pc, #628]	@ (8002814 <main+0x554>)
 800259e:	829a      	strh	r2, [r3, #20]

		pdu_V5bis.current = (uint16_t) rawValues[2] * 0.606 * conversionFactor;
 80025a0:	4b98      	ldr	r3, [pc, #608]	@ (8002804 <main+0x544>)
 80025a2:	889b      	ldrh	r3, [r3, #4]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fd ffbd 	bl	8000524 <__aeabi_i2d>
 80025aa:	a38f      	add	r3, pc, #572	@ (adr r3, 80027e8 <main+0x528>)
 80025ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b0:	f7fe f822 	bl	80005f8 <__aeabi_dmul>
 80025b4:	4602      	mov	r2, r0
 80025b6:	460b      	mov	r3, r1
 80025b8:	4610      	mov	r0, r2
 80025ba:	4619      	mov	r1, r3
 80025bc:	4b94      	ldr	r3, [pc, #592]	@ (8002810 <main+0x550>)
 80025be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c2:	f7fe f819 	bl	80005f8 <__aeabi_dmul>
 80025c6:	4602      	mov	r2, r0
 80025c8:	460b      	mov	r3, r1
 80025ca:	4610      	mov	r0, r2
 80025cc:	4619      	mov	r1, r3
 80025ce:	f7fe faeb 	bl	8000ba8 <__aeabi_d2uiz>
 80025d2:	4603      	mov	r3, r0
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	4b88      	ldr	r3, [pc, #544]	@ (80027f8 <main+0x538>)
 80025d8:	81da      	strh	r2, [r3, #14]
		pdu_V5bis.voltage = (uint16_t) rawValues[3] * 2 * conversionFactor; //las tensiones se multiplican x2
 80025da:	4b8a      	ldr	r3, [pc, #552]	@ (8002804 <main+0x544>)
 80025dc:	88db      	ldrh	r3, [r3, #6]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fd ff9f 	bl	8000524 <__aeabi_i2d>
 80025e6:	4b8a      	ldr	r3, [pc, #552]	@ (8002810 <main+0x550>)
 80025e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ec:	f7fe f804 	bl	80005f8 <__aeabi_dmul>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4610      	mov	r0, r2
 80025f6:	4619      	mov	r1, r3
 80025f8:	f7fe fad6 	bl	8000ba8 <__aeabi_d2uiz>
 80025fc:	4603      	mov	r3, r0
 80025fe:	b29a      	uxth	r2, r3
 8002600:	4b7d      	ldr	r3, [pc, #500]	@ (80027f8 <main+0x538>)
 8002602:	819a      	strh	r2, [r3, #12]
		pdu_V3.voltage = (uint16_t)rawValues[4] * 2 * conversionFactor; //las tensiones se multiplican x2
 8002604:	4b7f      	ldr	r3, [pc, #508]	@ (8002804 <main+0x544>)
 8002606:	891b      	ldrh	r3, [r3, #8]
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	4618      	mov	r0, r3
 800260c:	f7fd ff8a 	bl	8000524 <__aeabi_i2d>
 8002610:	4b7f      	ldr	r3, [pc, #508]	@ (8002810 <main+0x550>)
 8002612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002616:	f7fd ffef 	bl	80005f8 <__aeabi_dmul>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4610      	mov	r0, r2
 8002620:	4619      	mov	r1, r3
 8002622:	f7fe fac1 	bl	8000ba8 <__aeabi_d2uiz>
 8002626:	4603      	mov	r3, r0
 8002628:	b29a      	uxth	r2, r3
 800262a:	4b72      	ldr	r3, [pc, #456]	@ (80027f4 <main+0x534>)
 800262c:	819a      	strh	r2, [r3, #12]
		pdu_V3.current = (uint16_t)rawValues[5] * 0.606 * conversionFactor;
 800262e:	4b75      	ldr	r3, [pc, #468]	@ (8002804 <main+0x544>)
 8002630:	895b      	ldrh	r3, [r3, #10]
 8002632:	4618      	mov	r0, r3
 8002634:	f7fd ff76 	bl	8000524 <__aeabi_i2d>
 8002638:	a36b      	add	r3, pc, #428	@ (adr r3, 80027e8 <main+0x528>)
 800263a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263e:	f7fd ffdb 	bl	80005f8 <__aeabi_dmul>
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	4610      	mov	r0, r2
 8002648:	4619      	mov	r1, r3
 800264a:	4b71      	ldr	r3, [pc, #452]	@ (8002810 <main+0x550>)
 800264c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002650:	f7fd ffd2 	bl	80005f8 <__aeabi_dmul>
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	f7fe faa4 	bl	8000ba8 <__aeabi_d2uiz>
 8002660:	4603      	mov	r3, r0
 8002662:	b29a      	uxth	r2, r3
 8002664:	4b63      	ldr	r3, [pc, #396]	@ (80027f4 <main+0x534>)
 8002666:	81da      	strh	r2, [r3, #14]
		pdu_V3bis.voltage = (uint16_t)rawValues[6] * 2 * conversionFactor;
 8002668:	4b66      	ldr	r3, [pc, #408]	@ (8002804 <main+0x544>)
 800266a:	899b      	ldrh	r3, [r3, #12]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4618      	mov	r0, r3
 8002670:	f7fd ff58 	bl	8000524 <__aeabi_i2d>
 8002674:	4b66      	ldr	r3, [pc, #408]	@ (8002810 <main+0x550>)
 8002676:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267a:	f7fd ffbd 	bl	80005f8 <__aeabi_dmul>
 800267e:	4602      	mov	r2, r0
 8002680:	460b      	mov	r3, r1
 8002682:	4610      	mov	r0, r2
 8002684:	4619      	mov	r1, r3
 8002686:	f7fe fa8f 	bl	8000ba8 <__aeabi_d2uiz>
 800268a:	4603      	mov	r3, r0
 800268c:	b29a      	uxth	r2, r3
 800268e:	4b62      	ldr	r3, [pc, #392]	@ (8002818 <main+0x558>)
 8002690:	819a      	strh	r2, [r3, #12]
		pdu_V3bis.current = (uint16_t)rawValues[7]* 0.606 * conversionFactor; //factor de multiplicacion de la corriente en entradas mppt (50 x 33mohm)^-1
 8002692:	4b5c      	ldr	r3, [pc, #368]	@ (8002804 <main+0x544>)
 8002694:	89db      	ldrh	r3, [r3, #14]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fd ff44 	bl	8000524 <__aeabi_i2d>
 800269c:	a352      	add	r3, pc, #328	@ (adr r3, 80027e8 <main+0x528>)
 800269e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a2:	f7fd ffa9 	bl	80005f8 <__aeabi_dmul>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4610      	mov	r0, r2
 80026ac:	4619      	mov	r1, r3
 80026ae:	4b58      	ldr	r3, [pc, #352]	@ (8002810 <main+0x550>)
 80026b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b4:	f7fd ffa0 	bl	80005f8 <__aeabi_dmul>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4610      	mov	r0, r2
 80026be:	4619      	mov	r1, r3
 80026c0:	f7fe fa72 	bl	8000ba8 <__aeabi_d2uiz>
 80026c4:	4603      	mov	r3, r0
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	4b53      	ldr	r3, [pc, #332]	@ (8002818 <main+0x558>)
 80026ca:	81da      	strh	r2, [r3, #14]

		mpptX.current = (uint16_t)rawValues[8] * 0.606 * conversionFactor;
 80026cc:	4b4d      	ldr	r3, [pc, #308]	@ (8002804 <main+0x544>)
 80026ce:	8a1b      	ldrh	r3, [r3, #16]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fd ff27 	bl	8000524 <__aeabi_i2d>
 80026d6:	a344      	add	r3, pc, #272	@ (adr r3, 80027e8 <main+0x528>)
 80026d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026dc:	f7fd ff8c 	bl	80005f8 <__aeabi_dmul>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4610      	mov	r0, r2
 80026e6:	4619      	mov	r1, r3
 80026e8:	4b49      	ldr	r3, [pc, #292]	@ (8002810 <main+0x550>)
 80026ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ee:	f7fd ff83 	bl	80005f8 <__aeabi_dmul>
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4610      	mov	r0, r2
 80026f8:	4619      	mov	r1, r3
 80026fa:	f7fe fa55 	bl	8000ba8 <__aeabi_d2uiz>
 80026fe:	4603      	mov	r3, r0
 8002700:	b29a      	uxth	r2, r3
 8002702:	4b46      	ldr	r3, [pc, #280]	@ (800281c <main+0x55c>)
 8002704:	82da      	strh	r2, [r3, #22]
		mpptX.voltage = (uint16_t)rawValues[9] * 2 * conversionFactor;
 8002706:	4b3f      	ldr	r3, [pc, #252]	@ (8002804 <main+0x544>)
 8002708:	8a5b      	ldrh	r3, [r3, #18]
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd ff09 	bl	8000524 <__aeabi_i2d>
 8002712:	4b3f      	ldr	r3, [pc, #252]	@ (8002810 <main+0x550>)
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	f7fd ff6e 	bl	80005f8 <__aeabi_dmul>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4610      	mov	r0, r2
 8002722:	4619      	mov	r1, r3
 8002724:	f7fe fa40 	bl	8000ba8 <__aeabi_d2uiz>
 8002728:	4603      	mov	r3, r0
 800272a:	b29a      	uxth	r2, r3
 800272c:	4b3b      	ldr	r3, [pc, #236]	@ (800281c <main+0x55c>)
 800272e:	829a      	strh	r2, [r3, #20]
		mpptY.current = (uint16_t) rawValues[10] * 0.606 * conversionFactor;//* 0.606 * conversionFactor;// * 0.606; //factor de multiplicacion de la corriente en entradas mppt (50 x 33mohm)^-1
 8002730:	4b34      	ldr	r3, [pc, #208]	@ (8002804 <main+0x544>)
 8002732:	8a9b      	ldrh	r3, [r3, #20]
 8002734:	4618      	mov	r0, r3
 8002736:	f7fd fef5 	bl	8000524 <__aeabi_i2d>
 800273a:	a32b      	add	r3, pc, #172	@ (adr r3, 80027e8 <main+0x528>)
 800273c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002740:	f7fd ff5a 	bl	80005f8 <__aeabi_dmul>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4610      	mov	r0, r2
 800274a:	4619      	mov	r1, r3
 800274c:	4b30      	ldr	r3, [pc, #192]	@ (8002810 <main+0x550>)
 800274e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002752:	f7fd ff51 	bl	80005f8 <__aeabi_dmul>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4610      	mov	r0, r2
 800275c:	4619      	mov	r1, r3
 800275e:	f7fe fa23 	bl	8000ba8 <__aeabi_d2uiz>
 8002762:	4603      	mov	r3, r0
 8002764:	b29a      	uxth	r2, r3
 8002766:	4b22      	ldr	r3, [pc, #136]	@ (80027f0 <main+0x530>)
 8002768:	82da      	strh	r2, [r3, #22]
		mpptY.voltage = (uint16_t) rawValues[11] * 2 * conversionFactor;
 800276a:	4b26      	ldr	r3, [pc, #152]	@ (8002804 <main+0x544>)
 800276c:	8adb      	ldrh	r3, [r3, #22]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	4618      	mov	r0, r3
 8002772:	f7fd fed7 	bl	8000524 <__aeabi_i2d>
 8002776:	4b26      	ldr	r3, [pc, #152]	@ (8002810 <main+0x550>)
 8002778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277c:	f7fd ff3c 	bl	80005f8 <__aeabi_dmul>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	f7fe fa0e 	bl	8000ba8 <__aeabi_d2uiz>
 800278c:	4603      	mov	r3, r0
 800278e:	b29a      	uxth	r2, r3
 8002790:	4b17      	ldr	r3, [pc, #92]	@ (80027f0 <main+0x530>)
 8002792:	829a      	strh	r2, [r3, #20]

		pdu_V5.voltage = (uint16_t) rawValues[12] * 2 * conversionFactor;
 8002794:	4b1b      	ldr	r3, [pc, #108]	@ (8002804 <main+0x544>)
 8002796:	8b1b      	ldrh	r3, [r3, #24]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4618      	mov	r0, r3
 800279c:	f7fd fec2 	bl	8000524 <__aeabi_i2d>
 80027a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002810 <main+0x550>)
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	f7fd ff27 	bl	80005f8 <__aeabi_dmul>
 80027aa:	4602      	mov	r2, r0
 80027ac:	460b      	mov	r3, r1
 80027ae:	4610      	mov	r0, r2
 80027b0:	4619      	mov	r1, r3
 80027b2:	f7fe f9f9 	bl	8000ba8 <__aeabi_d2uiz>
 80027b6:	4603      	mov	r3, r0
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	4b19      	ldr	r3, [pc, #100]	@ (8002820 <main+0x560>)
 80027bc:	819a      	strh	r2, [r3, #12]
		pdu_V5.current = (uint16_t) rawValues[13] * 0.606 * conversionFactor;
 80027be:	4b11      	ldr	r3, [pc, #68]	@ (8002804 <main+0x544>)
 80027c0:	8b5b      	ldrh	r3, [r3, #26]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd feae 	bl	8000524 <__aeabi_i2d>
 80027c8:	a307      	add	r3, pc, #28	@ (adr r3, 80027e8 <main+0x528>)
 80027ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ce:	f7fd ff13 	bl	80005f8 <__aeabi_dmul>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4610      	mov	r0, r2
 80027d8:	4619      	mov	r1, r3
 80027da:	4b0d      	ldr	r3, [pc, #52]	@ (8002810 <main+0x550>)
 80027dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e0:	e020      	b.n	8002824 <main+0x564>
 80027e2:	bf00      	nop
 80027e4:	f3af 8000 	nop.w
 80027e8:	1cac0831 	.word	0x1cac0831
 80027ec:	3fe3645a 	.word	0x3fe3645a
 80027f0:	200003a4 	.word	0x200003a4
 80027f4:	20000424 	.word	0x20000424
 80027f8:	20000408 	.word	0x20000408
 80027fc:	2000045c 	.word	0x2000045c
 8002800:	20000000 	.word	0x20000000
 8002804:	20000478 	.word	0x20000478
 8002808:	20000230 	.word	0x20000230
 800280c:	20000494 	.word	0x20000494
 8002810:	20000038 	.word	0x20000038
 8002814:	200003c8 	.word	0x200003c8
 8002818:	20000440 	.word	0x20000440
 800281c:	20000380 	.word	0x20000380
 8002820:	200003ec 	.word	0x200003ec
 8002824:	f7fd fee8 	bl	80005f8 <__aeabi_dmul>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4610      	mov	r0, r2
 800282e:	4619      	mov	r1, r3
 8002830:	f7fe f9ba 	bl	8000ba8 <__aeabi_d2uiz>
 8002834:	4603      	mov	r3, r0
 8002836:	b29a      	uxth	r2, r3
 8002838:	4b1b      	ldr	r3, [pc, #108]	@ (80028a8 <main+0x5e8>)
 800283a:	81da      	strh	r2, [r3, #14]
	  	//MPPT
        //updateMPPT(&mpptX);
        //updateMPPT(&mpptY);
        //updateMPPT(&mpptZ);

	if(counter == 2){
 800283c:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 8002840:	2b02      	cmp	r3, #2
 8002842:	d116      	bne.n	8002872 <main+0x5b2>
	    char buffer[STR_LEN];

	    snprintf(buffer, STR_LEN, "\n \n I LIKE THE WAY YOU WORKING \n");
 8002844:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002848:	4a18      	ldr	r2, [pc, #96]	@ (80028ac <main+0x5ec>)
 800284a:	21c8      	movs	r1, #200	@ 0xc8
 800284c:	4618      	mov	r0, r3
 800284e:	f005 fde1 	bl	8008414 <sniprintf>
	  	HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t *) buffer, strlen(buffer), HAL_MAX_DELAY);
 8002852:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002856:	4618      	mov	r0, r3
 8002858:	f7fd fd0a 	bl	8000270 <strlen>
 800285c:	4603      	mov	r3, r0
 800285e:	b29b      	uxth	r3, r3
 8002860:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8002864:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002868:	9100      	str	r1, [sp, #0]
 800286a:	2110      	movs	r1, #16
 800286c:	4810      	ldr	r0, [pc, #64]	@ (80028b0 <main+0x5f0>)
 800286e:	f002 fa81 	bl	8004d74 <HAL_I2C_Master_Transmit>
	    //printMPPTData(&mpptY);
	    //Z DATOS
	    //printMPPTData(&mpptZ);

	}
	counter++;
 8002872:	f897 30f7 	ldrb.w	r3, [r7, #247]	@ 0xf7
 8002876:	3301      	adds	r3, #1
 8002878:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
	counter = counter%3;
 800287c:	f897 20f7 	ldrb.w	r2, [r7, #247]	@ 0xf7
 8002880:	4b0c      	ldr	r3, [pc, #48]	@ (80028b4 <main+0x5f4>)
 8002882:	fba3 1302 	umull	r1, r3, r3, r2
 8002886:	0859      	lsrs	r1, r3, #1
 8002888:	460b      	mov	r3, r1
 800288a:	005b      	lsls	r3, r3, #1
 800288c:	440b      	add	r3, r1
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7



		//COMUNICACION BQ76905
        BQ76905_ReadData(&bms);
 8002894:	4808      	ldr	r0, [pc, #32]	@ (80028b8 <main+0x5f8>)
 8002896:	f7fe feaf 	bl	80015f8 <BQ76905_ReadData>
        sendBMSDataI2C(&bms);
 800289a:	4807      	ldr	r0, [pc, #28]	@ (80028b8 <main+0x5f8>)
 800289c:	f7ff f800 	bl	80018a0 <sendBMSDataI2C>

		//CALENTAMIENTO Y CONTROL DE TEMPERATURA //por ahora prendo un led para debuging
		//MODO BAJO CONSUMO
    	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
        //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
    	HAL_Delay(DELAY);
 80028a0:	20c8      	movs	r0, #200	@ 0xc8
 80028a2:	f000 fd9b 	bl	80033dc <HAL_Delay>
		while(!convCompleted);
 80028a6:	e644      	b.n	8002532 <main+0x272>
 80028a8:	200003ec 	.word	0x200003ec
 80028ac:	0800aaa4 	.word	0x0800aaa4
 80028b0:	2000032c 	.word	0x2000032c
 80028b4:	aaaaaaab 	.word	0xaaaaaaab
 80028b8:	20000000 	.word	0x20000000

080028bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b094      	sub	sp, #80	@ 0x50
 80028c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028c2:	f107 0320 	add.w	r3, r7, #32
 80028c6:	2230      	movs	r2, #48	@ 0x30
 80028c8:	2100      	movs	r1, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f005 fe98 	bl	8008600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028d0:	f107 030c 	add.w	r3, r7, #12
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80028e0:	2300      	movs	r3, #0
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	4b27      	ldr	r3, [pc, #156]	@ (8002984 <SystemClock_Config+0xc8>)
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	4a26      	ldr	r2, [pc, #152]	@ (8002984 <SystemClock_Config+0xc8>)
 80028ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80028f0:	4b24      	ldr	r3, [pc, #144]	@ (8002984 <SystemClock_Config+0xc8>)
 80028f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f8:	60bb      	str	r3, [r7, #8]
 80028fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028fc:	2300      	movs	r3, #0
 80028fe:	607b      	str	r3, [r7, #4]
 8002900:	4b21      	ldr	r3, [pc, #132]	@ (8002988 <SystemClock_Config+0xcc>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a20      	ldr	r2, [pc, #128]	@ (8002988 <SystemClock_Config+0xcc>)
 8002906:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b1e      	ldr	r3, [pc, #120]	@ (8002988 <SystemClock_Config+0xcc>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002914:	607b      	str	r3, [r7, #4]
 8002916:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002918:	2301      	movs	r3, #1
 800291a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800291c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002920:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002922:	2302      	movs	r3, #2
 8002924:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002926:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800292a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800292c:	2304      	movs	r3, #4
 800292e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002930:	2360      	movs	r3, #96	@ 0x60
 8002932:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8002934:	2306      	movs	r3, #6
 8002936:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002938:	2304      	movs	r3, #4
 800293a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800293c:	f107 0320 	add.w	r3, r7, #32
 8002940:	4618      	mov	r0, r3
 8002942:	f003 f9dd 	bl	8005d00 <HAL_RCC_OscConfig>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800294c:	f000 f81e 	bl	800298c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002950:	230f      	movs	r3, #15
 8002952:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002954:	2302      	movs	r3, #2
 8002956:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002958:	2380      	movs	r3, #128	@ 0x80
 800295a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800295c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002960:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002962:	2300      	movs	r3, #0
 8002964:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002966:	f107 030c 	add.w	r3, r7, #12
 800296a:	2100      	movs	r1, #0
 800296c:	4618      	mov	r0, r3
 800296e:	f003 fc3f 	bl	80061f0 <HAL_RCC_ClockConfig>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002978:	f000 f808 	bl	800298c <Error_Handler>
  }
}
 800297c:	bf00      	nop
 800297e:	3750      	adds	r7, #80	@ 0x50
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	40023800 	.word	0x40023800
 8002988:	40007000 	.word	0x40007000

0800298c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002990:	b672      	cpsid	i
}
 8002992:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002994:	bf00      	nop
 8002996:	e7fd      	b.n	8002994 <Error_Handler+0x8>

08002998 <MPPT_Create>:

#define MAX_DUTY htim2.Init.Period



MPPT_Channel MPPT_Create(char *label, ADC_HandleTypeDef *hadc, uint32_t v_channel, uint32_t i_channel, TIM_HandleTypeDef *htim, uint32_t tim_channel){
 8002998:	b5b0      	push	{r4, r5, r7, lr}
 800299a:	b08e      	sub	sp, #56	@ 0x38
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
 80029a4:	603b      	str	r3, [r7, #0]
    MPPT_Channel newMppt = {
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	617b      	str	r3, [r7, #20]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	61bb      	str	r3, [r7, #24]
 80029ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029b0:	61fb      	str	r3, [r7, #28]
 80029b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029b4:	623b      	str	r3, [r7, #32]
 80029b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ba:	2300      	movs	r3, #0
 80029bc:	853b      	strh	r3, [r7, #40]	@ 0x28
 80029be:	2300      	movs	r3, #0
 80029c0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80029c2:	2300      	movs	r3, #0
 80029c4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80029c6:	2300      	movs	r3, #0
 80029c8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        .tim_channel = tim_channel,
        .voltage = 0,
        .current = 0,
        .power = 0,
        .prevPower = 0,
        .dutyCycle = MAX_DUTY * 0.5,
 80029ca:	4b13      	ldr	r3, [pc, #76]	@ (8002a18 <MPPT_Create+0x80>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fd fd98 	bl	8000504 <__aeabi_ui2d>
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	4b10      	ldr	r3, [pc, #64]	@ (8002a1c <MPPT_Create+0x84>)
 80029da:	f7fd fe0d 	bl	80005f8 <__aeabi_dmul>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
    MPPT_Channel newMppt = {
 80029e2:	4610      	mov	r0, r2
 80029e4:	4619      	mov	r1, r3
 80029e6:	f7fe f8df 	bl	8000ba8 <__aeabi_d2uiz>
 80029ea:	4603      	mov	r3, r0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 80029f2:	2300      	movs	r3, #0
 80029f4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	637b      	str	r3, [r7, #52]	@ 0x34
        .ultimaVariacion = 0,
		.label = label
    };
	return newMppt;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	461d      	mov	r5, r3
 8002a00:	f107 0414 	add.w	r4, r7, #20
 8002a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a0c:	6823      	ldr	r3, [r4, #0]
 8002a0e:	602b      	str	r3, [r5, #0]
}
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	3738      	adds	r7, #56	@ 0x38
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bdb0      	pop	{r4, r5, r7, pc}
 8002a18:	2000049c 	.word	0x2000049c
 8002a1c:	3fe00000 	.word	0x3fe00000

08002a20 <PDU_Create>:

#define VOLTAGE_STM32 3.3
#define ADC_RESOLUTION 4095.0 	//2^12 - 1


PDU_Channel PDU_Create(char *label, ADC_HandleTypeDef *hadc, uint32_t v_channel, uint32_t i_channel, GPIO_TypeDef *gpio_port, uint16_t gpio_pin) {
 8002a20:	b4b0      	push	{r4, r5, r7}
 8002a22:	b08d      	sub	sp, #52	@ 0x34
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
 8002a2c:	603b      	str	r3, [r7, #0]
    PDU_Channel newPdu = {
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	617b      	str	r3, [r7, #20]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	843b      	strh	r3, [r7, #32]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a4a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8002a4e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        .current = 0,
        .label = label,
        .gpio_port = gpio_port,
        .gpio_pin = gpio_pin
    };
    return newPdu;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	461d      	mov	r5, r3
 8002a54:	f107 0414 	add.w	r4, r7, #20
 8002a58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a5c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8002a60:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	3734      	adds	r7, #52	@ 0x34
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bcb0      	pop	{r4, r5, r7}
 8002a6c:	4770      	bx	lr

08002a6e <enablePDU>:
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
}


// Habilitar la salida GPIO asociada a la fuente
void enablePDU(PDU_Channel *pdu) {
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(pdu->gpio_port, pdu->gpio_pin, GPIO_PIN_SET);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6958      	ldr	r0, [r3, #20]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	8b1b      	ldrh	r3, [r3, #24]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	4619      	mov	r1, r3
 8002a82:	f002 f819 	bl	8004ab8 <HAL_GPIO_WritePin>
}
 8002a86:	bf00      	nop
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
	...

08002a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	607b      	str	r3, [r7, #4]
 8002a9a:	4b10      	ldr	r3, [pc, #64]	@ (8002adc <HAL_MspInit+0x4c>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9e:	4a0f      	ldr	r2, [pc, #60]	@ (8002adc <HAL_MspInit+0x4c>)
 8002aa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aa6:	4b0d      	ldr	r3, [pc, #52]	@ (8002adc <HAL_MspInit+0x4c>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aae:	607b      	str	r3, [r7, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	4b09      	ldr	r3, [pc, #36]	@ (8002adc <HAL_MspInit+0x4c>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aba:	4a08      	ldr	r2, [pc, #32]	@ (8002adc <HAL_MspInit+0x4c>)
 8002abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ac0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ac2:	4b06      	ldr	r3, [pc, #24]	@ (8002adc <HAL_MspInit+0x4c>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aca:	603b      	str	r3, [r7, #0]
 8002acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800

08002ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ae4:	bf00      	nop
 8002ae6:	e7fd      	b.n	8002ae4 <NMI_Handler+0x4>

08002ae8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aec:	bf00      	nop
 8002aee:	e7fd      	b.n	8002aec <HardFault_Handler+0x4>

08002af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002af4:	bf00      	nop
 8002af6:	e7fd      	b.n	8002af4 <MemManage_Handler+0x4>

08002af8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002afc:	bf00      	nop
 8002afe:	e7fd      	b.n	8002afc <BusFault_Handler+0x4>

08002b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b04:	bf00      	nop
 8002b06:	e7fd      	b.n	8002b04 <UsageFault_Handler+0x4>

08002b08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b28:	bf00      	nop
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b36:	f000 fc31 	bl	800339c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002b44:	4802      	ldr	r0, [pc, #8]	@ (8002b50 <ADC_IRQHandler+0x10>)
 8002b46:	f000 fcb0 	bl	80034aa <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000230 	.word	0x20000230

08002b54 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002b58:	4802      	ldr	r0, [pc, #8]	@ (8002b64 <DMA2_Stream0_IRQHandler+0x10>)
 8002b5a:	f001 fba7 	bl	80042ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000278 	.word	0x20000278

08002b68 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return 1;
 8002b6c:	2301      	movs	r3, #1
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <_kill>:

int _kill(int pid, int sig)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b82:	f005 fd49 	bl	8008618 <__errno>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2216      	movs	r2, #22
 8002b8a:	601a      	str	r2, [r3, #0]
  return -1;
 8002b8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <_exit>:

void _exit (int status)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ba0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff ffe7 	bl	8002b78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002baa:	bf00      	nop
 8002bac:	e7fd      	b.n	8002baa <_exit+0x12>

08002bae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b086      	sub	sp, #24
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	60f8      	str	r0, [r7, #12]
 8002bb6:	60b9      	str	r1, [r7, #8]
 8002bb8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bba:	2300      	movs	r3, #0
 8002bbc:	617b      	str	r3, [r7, #20]
 8002bbe:	e00a      	b.n	8002bd6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002bc0:	f3af 8000 	nop.w
 8002bc4:	4601      	mov	r1, r0
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	60ba      	str	r2, [r7, #8]
 8002bcc:	b2ca      	uxtb	r2, r1
 8002bce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	dbf0      	blt.n	8002bc0 <_read+0x12>
  }

  return len;
 8002bde:	687b      	ldr	r3, [r7, #4]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	3718      	adds	r7, #24
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bd80      	pop	{r7, pc}

08002be8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	e009      	b.n	8002c0e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	60ba      	str	r2, [r7, #8]
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	617b      	str	r3, [r7, #20]
 8002c0e:	697a      	ldr	r2, [r7, #20]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	dbf1      	blt.n	8002bfa <_write+0x12>
  }
  return len;
 8002c16:	687b      	ldr	r3, [r7, #4]
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3718      	adds	r7, #24
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <_close>:

int _close(int file)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c48:	605a      	str	r2, [r3, #4]
  return 0;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <_isatty>:

int _isatty(int file)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c60:	2301      	movs	r3, #1
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b085      	sub	sp, #20
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	60b9      	str	r1, [r7, #8]
 8002c78:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c90:	4a14      	ldr	r2, [pc, #80]	@ (8002ce4 <_sbrk+0x5c>)
 8002c92:	4b15      	ldr	r3, [pc, #84]	@ (8002ce8 <_sbrk+0x60>)
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c9c:	4b13      	ldr	r3, [pc, #76]	@ (8002cec <_sbrk+0x64>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d102      	bne.n	8002caa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ca4:	4b11      	ldr	r3, [pc, #68]	@ (8002cec <_sbrk+0x64>)
 8002ca6:	4a12      	ldr	r2, [pc, #72]	@ (8002cf0 <_sbrk+0x68>)
 8002ca8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002caa:	4b10      	ldr	r3, [pc, #64]	@ (8002cec <_sbrk+0x64>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d207      	bcs.n	8002cc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cb8:	f005 fcae 	bl	8008618 <__errno>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	220c      	movs	r2, #12
 8002cc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002cc6:	e009      	b.n	8002cdc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cc8:	4b08      	ldr	r3, [pc, #32]	@ (8002cec <_sbrk+0x64>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cce:	4b07      	ldr	r3, [pc, #28]	@ (8002cec <_sbrk+0x64>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	4a05      	ldr	r2, [pc, #20]	@ (8002cec <_sbrk+0x64>)
 8002cd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cda:	68fb      	ldr	r3, [r7, #12]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20020000 	.word	0x20020000
 8002ce8:	00000400 	.word	0x00000400
 8002cec:	20000498 	.word	0x20000498
 8002cf0:	20000bf0 	.word	0x20000bf0

08002cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cf8:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <SystemInit+0x20>)
 8002cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cfe:	4a05      	ldr	r2, [pc, #20]	@ (8002d14 <SystemInit+0x20>)
 8002d00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d08:	bf00      	nop
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08a      	sub	sp, #40	@ 0x28
 8002d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d1e:	f107 0320 	add.w	r3, r7, #32
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d28:	1d3b      	adds	r3, r7, #4
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	60da      	str	r2, [r3, #12]
 8002d34:	611a      	str	r2, [r3, #16]
 8002d36:	615a      	str	r2, [r3, #20]
 8002d38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d3a:	4b22      	ldr	r3, [pc, #136]	@ (8002dc4 <MX_TIM2_Init+0xac>)
 8002d3c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002d40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002d42:	4b20      	ldr	r3, [pc, #128]	@ (8002dc4 <MX_TIM2_Init+0xac>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d48:	4b1e      	ldr	r3, [pc, #120]	@ (8002dc4 <MX_TIM2_Init+0xac>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 80;
 8002d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc4 <MX_TIM2_Init+0xac>)
 8002d50:	2250      	movs	r2, #80	@ 0x50
 8002d52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d54:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc4 <MX_TIM2_Init+0xac>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8002dc4 <MX_TIM2_Init+0xac>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002d60:	4818      	ldr	r0, [pc, #96]	@ (8002dc4 <MX_TIM2_Init+0xac>)
 8002d62:	f003 fc65 	bl	8006630 <HAL_TIM_PWM_Init>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002d6c:	f7ff fe0e 	bl	800298c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d70:	2300      	movs	r3, #0
 8002d72:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d74:	2300      	movs	r3, #0
 8002d76:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002d78:	f107 0320 	add.w	r3, r7, #32
 8002d7c:	4619      	mov	r1, r3
 8002d7e:	4811      	ldr	r0, [pc, #68]	@ (8002dc4 <MX_TIM2_Init+0xac>)
 8002d80:	f004 f8b2 	bl	8006ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8002d8a:	f7ff fdff 	bl	800298c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d8e:	2360      	movs	r3, #96	@ 0x60
 8002d90:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002d92:	2300      	movs	r3, #0
 8002d94:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002d9a:	2304      	movs	r3, #4
 8002d9c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d9e:	1d3b      	adds	r3, r7, #4
 8002da0:	2200      	movs	r2, #0
 8002da2:	4619      	mov	r1, r3
 8002da4:	4807      	ldr	r0, [pc, #28]	@ (8002dc4 <MX_TIM2_Init+0xac>)
 8002da6:	f003 fd5b 	bl	8006860 <HAL_TIM_PWM_ConfigChannel>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002db0:	f7ff fdec 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002db4:	4803      	ldr	r0, [pc, #12]	@ (8002dc4 <MX_TIM2_Init+0xac>)
 8002db6:	f000 f903 	bl	8002fc0 <HAL_TIM_MspPostInit>

}
 8002dba:	bf00      	nop
 8002dbc:	3728      	adds	r7, #40	@ 0x28
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	2000049c 	.word	0x2000049c

08002dc8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08a      	sub	sp, #40	@ 0x28
 8002dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dce:	f107 0320 	add.w	r3, r7, #32
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002dd8:	1d3b      	adds	r3, r7, #4
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]
 8002dde:	605a      	str	r2, [r3, #4]
 8002de0:	609a      	str	r2, [r3, #8]
 8002de2:	60da      	str	r2, [r3, #12]
 8002de4:	611a      	str	r2, [r3, #16]
 8002de6:	615a      	str	r2, [r3, #20]
 8002de8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002dea:	4b21      	ldr	r3, [pc, #132]	@ (8002e70 <MX_TIM4_Init+0xa8>)
 8002dec:	4a21      	ldr	r2, [pc, #132]	@ (8002e74 <MX_TIM4_Init+0xac>)
 8002dee:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8002df0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e70 <MX_TIM4_Init+0xa8>)
 8002df2:	2201      	movs	r2, #1
 8002df4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002df6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e70 <MX_TIM4_Init+0xa8>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 8002dfc:	4b1c      	ldr	r3, [pc, #112]	@ (8002e70 <MX_TIM4_Init+0xa8>)
 8002dfe:	22ff      	movs	r2, #255	@ 0xff
 8002e00:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e02:	4b1b      	ldr	r3, [pc, #108]	@ (8002e70 <MX_TIM4_Init+0xa8>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e08:	4b19      	ldr	r3, [pc, #100]	@ (8002e70 <MX_TIM4_Init+0xa8>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002e0e:	4818      	ldr	r0, [pc, #96]	@ (8002e70 <MX_TIM4_Init+0xa8>)
 8002e10:	f003 fc0e 	bl	8006630 <HAL_TIM_PWM_Init>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002e1a:	f7ff fdb7 	bl	800298c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e22:	2300      	movs	r3, #0
 8002e24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002e26:	f107 0320 	add.w	r3, r7, #32
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4810      	ldr	r0, [pc, #64]	@ (8002e70 <MX_TIM4_Init+0xa8>)
 8002e2e:	f004 f85b 	bl	8006ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8002e38:	f7ff fda8 	bl	800298c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e3c:	2360      	movs	r3, #96	@ 0x60
 8002e3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002e4c:	1d3b      	adds	r3, r7, #4
 8002e4e:	220c      	movs	r2, #12
 8002e50:	4619      	mov	r1, r3
 8002e52:	4807      	ldr	r0, [pc, #28]	@ (8002e70 <MX_TIM4_Init+0xa8>)
 8002e54:	f003 fd04 	bl	8006860 <HAL_TIM_PWM_ConfigChannel>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002e5e:	f7ff fd95 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002e62:	4803      	ldr	r0, [pc, #12]	@ (8002e70 <MX_TIM4_Init+0xa8>)
 8002e64:	f000 f8ac 	bl	8002fc0 <HAL_TIM_MspPostInit>

}
 8002e68:	bf00      	nop
 8002e6a:	3728      	adds	r7, #40	@ 0x28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	200004e4 	.word	0x200004e4
 8002e74:	40000800 	.word	0x40000800

08002e78 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b08a      	sub	sp, #40	@ 0x28
 8002e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e7e:	f107 0320 	add.w	r3, r7, #32
 8002e82:	2200      	movs	r2, #0
 8002e84:	601a      	str	r2, [r3, #0]
 8002e86:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e88:	1d3b      	adds	r3, r7, #4
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	605a      	str	r2, [r3, #4]
 8002e90:	609a      	str	r2, [r3, #8]
 8002e92:	60da      	str	r2, [r3, #12]
 8002e94:	611a      	str	r2, [r3, #16]
 8002e96:	615a      	str	r2, [r3, #20]
 8002e98:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002e9a:	4b21      	ldr	r3, [pc, #132]	@ (8002f20 <MX_TIM5_Init+0xa8>)
 8002e9c:	4a21      	ldr	r2, [pc, #132]	@ (8002f24 <MX_TIM5_Init+0xac>)
 8002e9e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8002f20 <MX_TIM5_Init+0xa8>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ea6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f20 <MX_TIM5_Init+0xa8>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 255;
 8002eac:	4b1c      	ldr	r3, [pc, #112]	@ (8002f20 <MX_TIM5_Init+0xa8>)
 8002eae:	22ff      	movs	r2, #255	@ 0xff
 8002eb0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f20 <MX_TIM5_Init+0xa8>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002eb8:	4b19      	ldr	r3, [pc, #100]	@ (8002f20 <MX_TIM5_Init+0xa8>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002ebe:	4818      	ldr	r0, [pc, #96]	@ (8002f20 <MX_TIM5_Init+0xa8>)
 8002ec0:	f003 fbb6 	bl	8006630 <HAL_TIM_PWM_Init>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8002eca:	f7ff fd5f 	bl	800298c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002ed6:	f107 0320 	add.w	r3, r7, #32
 8002eda:	4619      	mov	r1, r3
 8002edc:	4810      	ldr	r0, [pc, #64]	@ (8002f20 <MX_TIM5_Init+0xa8>)
 8002ede:	f004 f803 	bl	8006ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8002ee8:	f7ff fd50 	bl	800298c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002eec:	2360      	movs	r3, #96	@ 0x60
 8002eee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002ef8:	2304      	movs	r3, #4
 8002efa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002efc:	1d3b      	adds	r3, r7, #4
 8002efe:	220c      	movs	r2, #12
 8002f00:	4619      	mov	r1, r3
 8002f02:	4807      	ldr	r0, [pc, #28]	@ (8002f20 <MX_TIM5_Init+0xa8>)
 8002f04:	f003 fcac 	bl	8006860 <HAL_TIM_PWM_ConfigChannel>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8002f0e:	f7ff fd3d 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002f12:	4803      	ldr	r0, [pc, #12]	@ (8002f20 <MX_TIM5_Init+0xa8>)
 8002f14:	f000 f854 	bl	8002fc0 <HAL_TIM_MspPostInit>

}
 8002f18:	bf00      	nop
 8002f1a:	3728      	adds	r7, #40	@ 0x28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	2000052c 	.word	0x2000052c
 8002f24:	40000c00 	.word	0x40000c00

08002f28 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f38:	d10e      	bne.n	8002f58 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8002fb4 <HAL_TIM_PWM_MspInit+0x8c>)
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	4a1c      	ldr	r2, [pc, #112]	@ (8002fb4 <HAL_TIM_PWM_MspInit+0x8c>)
 8002f44:	f043 0301 	orr.w	r3, r3, #1
 8002f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb4 <HAL_TIM_PWM_MspInit+0x8c>)
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002f56:	e026      	b.n	8002fa6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM4)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a16      	ldr	r2, [pc, #88]	@ (8002fb8 <HAL_TIM_PWM_MspInit+0x90>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d10e      	bne.n	8002f80 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f62:	2300      	movs	r3, #0
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	4b13      	ldr	r3, [pc, #76]	@ (8002fb4 <HAL_TIM_PWM_MspInit+0x8c>)
 8002f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6a:	4a12      	ldr	r2, [pc, #72]	@ (8002fb4 <HAL_TIM_PWM_MspInit+0x8c>)
 8002f6c:	f043 0304 	orr.w	r3, r3, #4
 8002f70:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f72:	4b10      	ldr	r3, [pc, #64]	@ (8002fb4 <HAL_TIM_PWM_MspInit+0x8c>)
 8002f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	613b      	str	r3, [r7, #16]
 8002f7c:	693b      	ldr	r3, [r7, #16]
}
 8002f7e:	e012      	b.n	8002fa6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM5)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a0d      	ldr	r2, [pc, #52]	@ (8002fbc <HAL_TIM_PWM_MspInit+0x94>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d10d      	bne.n	8002fa6 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60fb      	str	r3, [r7, #12]
 8002f8e:	4b09      	ldr	r3, [pc, #36]	@ (8002fb4 <HAL_TIM_PWM_MspInit+0x8c>)
 8002f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f92:	4a08      	ldr	r2, [pc, #32]	@ (8002fb4 <HAL_TIM_PWM_MspInit+0x8c>)
 8002f94:	f043 0308 	orr.w	r3, r3, #8
 8002f98:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f9a:	4b06      	ldr	r3, [pc, #24]	@ (8002fb4 <HAL_TIM_PWM_MspInit+0x8c>)
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	60fb      	str	r3, [r7, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
}
 8002fa6:	bf00      	nop
 8002fa8:	371c      	adds	r7, #28
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	40000800 	.word	0x40000800
 8002fbc:	40000c00 	.word	0x40000c00

08002fc0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08a      	sub	sp, #40	@ 0x28
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc8:	f107 0314 	add.w	r3, r7, #20
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fe0:	d11e      	bne.n	8003020 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	4b34      	ldr	r3, [pc, #208]	@ (80030b8 <HAL_TIM_MspPostInit+0xf8>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	4a33      	ldr	r2, [pc, #204]	@ (80030b8 <HAL_TIM_MspPostInit+0xf8>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ff2:	4b31      	ldr	r3, [pc, #196]	@ (80030b8 <HAL_TIM_MspPostInit+0xf8>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	613b      	str	r3, [r7, #16]
 8002ffc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = MPPTYControl_Pin;
 8002ffe:	2301      	movs	r3, #1
 8003000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003002:	2302      	movs	r3, #2
 8003004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800300a:	2300      	movs	r3, #0
 800300c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800300e:	2301      	movs	r3, #1
 8003010:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPPTYControl_GPIO_Port, &GPIO_InitStruct);
 8003012:	f107 0314 	add.w	r3, r7, #20
 8003016:	4619      	mov	r1, r3
 8003018:	4828      	ldr	r0, [pc, #160]	@ (80030bc <HAL_TIM_MspPostInit+0xfc>)
 800301a:	f001 fbb1 	bl	8004780 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800301e:	e047      	b.n	80030b0 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a26      	ldr	r2, [pc, #152]	@ (80030c0 <HAL_TIM_MspPostInit+0x100>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d11f      	bne.n	800306a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
 800302e:	4b22      	ldr	r3, [pc, #136]	@ (80030b8 <HAL_TIM_MspPostInit+0xf8>)
 8003030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003032:	4a21      	ldr	r2, [pc, #132]	@ (80030b8 <HAL_TIM_MspPostInit+0xf8>)
 8003034:	f043 0302 	orr.w	r3, r3, #2
 8003038:	6313      	str	r3, [r2, #48]	@ 0x30
 800303a:	4b1f      	ldr	r3, [pc, #124]	@ (80030b8 <HAL_TIM_MspPostInit+0xf8>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	60fb      	str	r3, [r7, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MPPTXControl_Pin;
 8003046:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800304a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800304c:	2302      	movs	r3, #2
 800304e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003050:	2300      	movs	r3, #0
 8003052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003054:	2300      	movs	r3, #0
 8003056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003058:	2302      	movs	r3, #2
 800305a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPPTXControl_GPIO_Port, &GPIO_InitStruct);
 800305c:	f107 0314 	add.w	r3, r7, #20
 8003060:	4619      	mov	r1, r3
 8003062:	4818      	ldr	r0, [pc, #96]	@ (80030c4 <HAL_TIM_MspPostInit+0x104>)
 8003064:	f001 fb8c 	bl	8004780 <HAL_GPIO_Init>
}
 8003068:	e022      	b.n	80030b0 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM5)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a16      	ldr	r2, [pc, #88]	@ (80030c8 <HAL_TIM_MspPostInit+0x108>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d11d      	bne.n	80030b0 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003074:	2300      	movs	r3, #0
 8003076:	60bb      	str	r3, [r7, #8]
 8003078:	4b0f      	ldr	r3, [pc, #60]	@ (80030b8 <HAL_TIM_MspPostInit+0xf8>)
 800307a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307c:	4a0e      	ldr	r2, [pc, #56]	@ (80030b8 <HAL_TIM_MspPostInit+0xf8>)
 800307e:	f043 0301 	orr.w	r3, r3, #1
 8003082:	6313      	str	r3, [r2, #48]	@ 0x30
 8003084:	4b0c      	ldr	r3, [pc, #48]	@ (80030b8 <HAL_TIM_MspPostInit+0xf8>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	60bb      	str	r3, [r7, #8]
 800308e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MPPTZControl_Pin;
 8003090:	2308      	movs	r3, #8
 8003092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003094:	2302      	movs	r3, #2
 8003096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309c:	2300      	movs	r3, #0
 800309e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80030a0:	2302      	movs	r3, #2
 80030a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPPTZControl_GPIO_Port, &GPIO_InitStruct);
 80030a4:	f107 0314 	add.w	r3, r7, #20
 80030a8:	4619      	mov	r1, r3
 80030aa:	4804      	ldr	r0, [pc, #16]	@ (80030bc <HAL_TIM_MspPostInit+0xfc>)
 80030ac:	f001 fb68 	bl	8004780 <HAL_GPIO_Init>
}
 80030b0:	bf00      	nop
 80030b2:	3728      	adds	r7, #40	@ 0x28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40023800 	.word	0x40023800
 80030bc:	40020000 	.word	0x40020000
 80030c0:	40000800 	.word	0x40000800
 80030c4:	40020400 	.word	0x40020400
 80030c8:	40000c00 	.word	0x40000c00

080030cc <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80030d0:	4b11      	ldr	r3, [pc, #68]	@ (8003118 <MX_UART4_Init+0x4c>)
 80030d2:	4a12      	ldr	r2, [pc, #72]	@ (800311c <MX_UART4_Init+0x50>)
 80030d4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80030d6:	4b10      	ldr	r3, [pc, #64]	@ (8003118 <MX_UART4_Init+0x4c>)
 80030d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80030dc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80030de:	4b0e      	ldr	r3, [pc, #56]	@ (8003118 <MX_UART4_Init+0x4c>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80030e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003118 <MX_UART4_Init+0x4c>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80030ea:	4b0b      	ldr	r3, [pc, #44]	@ (8003118 <MX_UART4_Init+0x4c>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80030f0:	4b09      	ldr	r3, [pc, #36]	@ (8003118 <MX_UART4_Init+0x4c>)
 80030f2:	220c      	movs	r2, #12
 80030f4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80030f6:	4b08      	ldr	r3, [pc, #32]	@ (8003118 <MX_UART4_Init+0x4c>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80030fc:	4b06      	ldr	r3, [pc, #24]	@ (8003118 <MX_UART4_Init+0x4c>)
 80030fe:	2200      	movs	r2, #0
 8003100:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003102:	4805      	ldr	r0, [pc, #20]	@ (8003118 <MX_UART4_Init+0x4c>)
 8003104:	f003 ff6c 	bl	8006fe0 <HAL_UART_Init>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800310e:	f7ff fc3d 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000574 	.word	0x20000574
 800311c:	40004c00 	.word	0x40004c00

08003120 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b08a      	sub	sp, #40	@ 0x28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003128:	f107 0314 	add.w	r3, r7, #20
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	609a      	str	r2, [r3, #8]
 8003134:	60da      	str	r2, [r3, #12]
 8003136:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a19      	ldr	r2, [pc, #100]	@ (80031a4 <HAL_UART_MspInit+0x84>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d12c      	bne.n	800319c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003142:	2300      	movs	r3, #0
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	4b18      	ldr	r3, [pc, #96]	@ (80031a8 <HAL_UART_MspInit+0x88>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	4a17      	ldr	r2, [pc, #92]	@ (80031a8 <HAL_UART_MspInit+0x88>)
 800314c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003150:	6413      	str	r3, [r2, #64]	@ 0x40
 8003152:	4b15      	ldr	r3, [pc, #84]	@ (80031a8 <HAL_UART_MspInit+0x88>)
 8003154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003156:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800315a:	613b      	str	r3, [r7, #16]
 800315c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800315e:	2300      	movs	r3, #0
 8003160:	60fb      	str	r3, [r7, #12]
 8003162:	4b11      	ldr	r3, [pc, #68]	@ (80031a8 <HAL_UART_MspInit+0x88>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003166:	4a10      	ldr	r2, [pc, #64]	@ (80031a8 <HAL_UART_MspInit+0x88>)
 8003168:	f043 0304 	orr.w	r3, r3, #4
 800316c:	6313      	str	r3, [r2, #48]	@ 0x30
 800316e:	4b0e      	ldr	r3, [pc, #56]	@ (80031a8 <HAL_UART_MspInit+0x88>)
 8003170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 800317a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800317e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003180:	2302      	movs	r3, #2
 8003182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003184:	2301      	movs	r3, #1
 8003186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003188:	2303      	movs	r3, #3
 800318a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800318c:	2308      	movs	r3, #8
 800318e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003190:	f107 0314 	add.w	r3, r7, #20
 8003194:	4619      	mov	r1, r3
 8003196:	4805      	ldr	r0, [pc, #20]	@ (80031ac <HAL_UART_MspInit+0x8c>)
 8003198:	f001 faf2 	bl	8004780 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 800319c:	bf00      	nop
 800319e:	3728      	adds	r7, #40	@ 0x28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40004c00 	.word	0x40004c00
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40020800 	.word	0x40020800

080031b0 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80031b4:	4b14      	ldr	r3, [pc, #80]	@ (8003208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031b6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80031ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80031bc:	4b12      	ldr	r3, [pc, #72]	@ (8003208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031be:	2204      	movs	r2, #4
 80031c0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80031c2:	4b11      	ldr	r3, [pc, #68]	@ (8003208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031c4:	2202      	movs	r2, #2
 80031c6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80031c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80031ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031d0:	2202      	movs	r2, #2
 80031d2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80031d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80031da:	4b0b      	ldr	r3, [pc, #44]	@ (8003208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031dc:	2200      	movs	r2, #0
 80031de:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80031e0:	4b09      	ldr	r3, [pc, #36]	@ (8003208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80031e6:	4b08      	ldr	r3, [pc, #32]	@ (8003208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80031ec:	4b06      	ldr	r3, [pc, #24]	@ (8003208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80031f2:	4805      	ldr	r0, [pc, #20]	@ (8003208 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80031f4:	f002 fc74 	bl	8005ae0 <HAL_PCD_Init>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80031fe:	f7ff fbc5 	bl	800298c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003202:	bf00      	nop
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	200005bc 	.word	0x200005bc

0800320c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b08a      	sub	sp, #40	@ 0x28
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003214:	f107 0314 	add.w	r3, r7, #20
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	609a      	str	r2, [r3, #8]
 8003220:	60da      	str	r2, [r3, #12]
 8003222:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800322c:	d132      	bne.n	8003294 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800322e:	2300      	movs	r3, #0
 8003230:	613b      	str	r3, [r7, #16]
 8003232:	4b1a      	ldr	r3, [pc, #104]	@ (800329c <HAL_PCD_MspInit+0x90>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003236:	4a19      	ldr	r2, [pc, #100]	@ (800329c <HAL_PCD_MspInit+0x90>)
 8003238:	f043 0301 	orr.w	r3, r3, #1
 800323c:	6313      	str	r3, [r2, #48]	@ 0x30
 800323e:	4b17      	ldr	r3, [pc, #92]	@ (800329c <HAL_PCD_MspInit+0x90>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003242:	f003 0301 	and.w	r3, r3, #1
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800324a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800324e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003250:	2302      	movs	r3, #2
 8003252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003254:	2300      	movs	r3, #0
 8003256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003258:	2303      	movs	r3, #3
 800325a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800325c:	230a      	movs	r3, #10
 800325e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003260:	f107 0314 	add.w	r3, r7, #20
 8003264:	4619      	mov	r1, r3
 8003266:	480e      	ldr	r0, [pc, #56]	@ (80032a0 <HAL_PCD_MspInit+0x94>)
 8003268:	f001 fa8a 	bl	8004780 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800326c:	4b0b      	ldr	r3, [pc, #44]	@ (800329c <HAL_PCD_MspInit+0x90>)
 800326e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003270:	4a0a      	ldr	r2, [pc, #40]	@ (800329c <HAL_PCD_MspInit+0x90>)
 8003272:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003276:	6353      	str	r3, [r2, #52]	@ 0x34
 8003278:	2300      	movs	r3, #0
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	4b07      	ldr	r3, [pc, #28]	@ (800329c <HAL_PCD_MspInit+0x90>)
 800327e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003280:	4a06      	ldr	r2, [pc, #24]	@ (800329c <HAL_PCD_MspInit+0x90>)
 8003282:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003286:	6453      	str	r3, [r2, #68]	@ 0x44
 8003288:	4b04      	ldr	r3, [pc, #16]	@ (800329c <HAL_PCD_MspInit+0x90>)
 800328a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003290:	60fb      	str	r3, [r7, #12]
 8003292:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8003294:	bf00      	nop
 8003296:	3728      	adds	r7, #40	@ 0x28
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	40023800 	.word	0x40023800
 80032a0:	40020000 	.word	0x40020000

080032a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80032a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80032a8:	f7ff fd24 	bl	8002cf4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032ac:	480c      	ldr	r0, [pc, #48]	@ (80032e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032ae:	490d      	ldr	r1, [pc, #52]	@ (80032e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032b0:	4a0d      	ldr	r2, [pc, #52]	@ (80032e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032b4:	e002      	b.n	80032bc <LoopCopyDataInit>

080032b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ba:	3304      	adds	r3, #4

080032bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032c0:	d3f9      	bcc.n	80032b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032c2:	4a0a      	ldr	r2, [pc, #40]	@ (80032ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032c4:	4c0a      	ldr	r4, [pc, #40]	@ (80032f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80032c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032c8:	e001      	b.n	80032ce <LoopFillZerobss>

080032ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032cc:	3204      	adds	r2, #4

080032ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032d0:	d3fb      	bcc.n	80032ca <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80032d2:	f005 f9a7 	bl	8008624 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032d6:	f7fe fff3 	bl	80022c0 <main>
  bx  lr    
 80032da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80032dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032e4:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 80032e8:	0800ae68 	.word	0x0800ae68
  ldr r2, =_sbss
 80032ec:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 80032f0:	20000bf0 	.word	0x20000bf0

080032f4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032f4:	e7fe      	b.n	80032f4 <CAN1_RX0_IRQHandler>
	...

080032f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003338 <HAL_Init+0x40>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a0d      	ldr	r2, [pc, #52]	@ (8003338 <HAL_Init+0x40>)
 8003302:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003306:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003308:	4b0b      	ldr	r3, [pc, #44]	@ (8003338 <HAL_Init+0x40>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a0a      	ldr	r2, [pc, #40]	@ (8003338 <HAL_Init+0x40>)
 800330e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003312:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003314:	4b08      	ldr	r3, [pc, #32]	@ (8003338 <HAL_Init+0x40>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a07      	ldr	r2, [pc, #28]	@ (8003338 <HAL_Init+0x40>)
 800331a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800331e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003320:	2003      	movs	r0, #3
 8003322:	f000 fe7b 	bl	800401c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003326:	200f      	movs	r0, #15
 8003328:	f000 f808 	bl	800333c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800332c:	f7ff fbb0 	bl	8002a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40023c00 	.word	0x40023c00

0800333c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003344:	4b12      	ldr	r3, [pc, #72]	@ (8003390 <HAL_InitTick+0x54>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4b12      	ldr	r3, [pc, #72]	@ (8003394 <HAL_InitTick+0x58>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	4619      	mov	r1, r3
 800334e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003352:	fbb3 f3f1 	udiv	r3, r3, r1
 8003356:	fbb2 f3f3 	udiv	r3, r2, r3
 800335a:	4618      	mov	r0, r3
 800335c:	f000 fe93 	bl	8004086 <HAL_SYSTICK_Config>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e00e      	b.n	8003388 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b0f      	cmp	r3, #15
 800336e:	d80a      	bhi.n	8003386 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003370:	2200      	movs	r2, #0
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003378:	f000 fe5b 	bl	8004032 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800337c:	4a06      	ldr	r2, [pc, #24]	@ (8003398 <HAL_InitTick+0x5c>)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	e000      	b.n	8003388 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
}
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20000040 	.word	0x20000040
 8003394:	20000048 	.word	0x20000048
 8003398:	20000044 	.word	0x20000044

0800339c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033a0:	4b06      	ldr	r3, [pc, #24]	@ (80033bc <HAL_IncTick+0x20>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	461a      	mov	r2, r3
 80033a6:	4b06      	ldr	r3, [pc, #24]	@ (80033c0 <HAL_IncTick+0x24>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4413      	add	r3, r2
 80033ac:	4a04      	ldr	r2, [pc, #16]	@ (80033c0 <HAL_IncTick+0x24>)
 80033ae:	6013      	str	r3, [r2, #0]
}
 80033b0:	bf00      	nop
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20000048 	.word	0x20000048
 80033c0:	20000aa0 	.word	0x20000aa0

080033c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  return uwTick;
 80033c8:	4b03      	ldr	r3, [pc, #12]	@ (80033d8 <HAL_GetTick+0x14>)
 80033ca:	681b      	ldr	r3, [r3, #0]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	20000aa0 	.word	0x20000aa0

080033dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033e4:	f7ff ffee 	bl	80033c4 <HAL_GetTick>
 80033e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033f4:	d005      	beq.n	8003402 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003420 <HAL_Delay+0x44>)
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4413      	add	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003402:	bf00      	nop
 8003404:	f7ff ffde 	bl	80033c4 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	429a      	cmp	r2, r3
 8003412:	d8f7      	bhi.n	8003404 <HAL_Delay+0x28>
  {
  }
}
 8003414:	bf00      	nop
 8003416:	bf00      	nop
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20000048 	.word	0x20000048

08003424 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800342c:	2300      	movs	r3, #0
 800342e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e033      	b.n	80034a2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7fd fe50 	bl	80010e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	2b00      	cmp	r3, #0
 8003460:	d118      	bne.n	8003494 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003466:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800346a:	f023 0302 	bic.w	r3, r3, #2
 800346e:	f043 0202 	orr.w	r2, r3, #2
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f000 fb78 	bl	8003b6c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	f023 0303 	bic.w	r3, r3, #3
 800348a:	f043 0201 	orr.w	r2, r3, #1
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	641a      	str	r2, [r3, #64]	@ 0x40
 8003492:	e001      	b.n	8003498 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b086      	sub	sp, #24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	2300      	movs	r3, #0
 80034b8:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f003 0320 	and.w	r3, r3, #32
 80034d8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d049      	beq.n	8003574 <HAL_ADC_IRQHandler+0xca>
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d046      	beq.n	8003574 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ea:	f003 0310 	and.w	r3, r3, #16
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d105      	bne.n	80034fe <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003508:	2b00      	cmp	r3, #0
 800350a:	d12b      	bne.n	8003564 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003510:	2b00      	cmp	r3, #0
 8003512:	d127      	bne.n	8003564 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800351e:	2b00      	cmp	r3, #0
 8003520:	d006      	beq.n	8003530 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800352c:	2b00      	cmp	r3, #0
 800352e:	d119      	bne.n	8003564 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0220 	bic.w	r2, r2, #32
 800353e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003544:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003550:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d105      	bne.n	8003564 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800355c:	f043 0201 	orr.w	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7fe fe9b 	bl	80022a0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f06f 0212 	mvn.w	r2, #18
 8003572:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003582:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d057      	beq.n	800363a <HAL_ADC_IRQHandler+0x190>
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d054      	beq.n	800363a <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	2b00      	cmp	r3, #0
 800359a:	d105      	bne.n	80035a8 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d139      	bne.n	800362a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035bc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d006      	beq.n	80035d2 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d12b      	bne.n	800362a <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d124      	bne.n	800362a <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d11d      	bne.n	800362a <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d119      	bne.n	800362a <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003604:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d105      	bne.n	800362a <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003622:	f043 0201 	orr.w	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fc1c 	bl	8003e68 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f06f 020c 	mvn.w	r2, #12
 8003638:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003648:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d017      	beq.n	8003680 <HAL_ADC_IRQHandler+0x1d6>
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d014      	beq.n	8003680 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b01      	cmp	r3, #1
 8003662:	d10d      	bne.n	8003680 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003668:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f945 	bl	8003900 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f06f 0201 	mvn.w	r2, #1
 800367e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 0320 	and.w	r3, r3, #32
 8003686:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800368e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d015      	beq.n	80036c2 <HAL_ADC_IRQHandler+0x218>
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d012      	beq.n	80036c2 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a0:	f043 0202 	orr.w	r2, r3, #2
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0220 	mvn.w	r2, #32
 80036b0:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f000 f92e 	bl	8003914 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f06f 0220 	mvn.w	r2, #32
 80036c0:	601a      	str	r2, [r3, #0]
  }
}
 80036c2:	bf00      	nop
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_ADC_Start_DMA+0x1e>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e0e9      	b.n	80038be <HAL_ADC_Start_DMA+0x1f2>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f003 0301 	and.w	r3, r3, #1
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d018      	beq.n	8003732 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0201 	orr.w	r2, r2, #1
 800370e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003710:	4b6d      	ldr	r3, [pc, #436]	@ (80038c8 <HAL_ADC_Start_DMA+0x1fc>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a6d      	ldr	r2, [pc, #436]	@ (80038cc <HAL_ADC_Start_DMA+0x200>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	0c9a      	lsrs	r2, r3, #18
 800371c:	4613      	mov	r3, r2
 800371e:	005b      	lsls	r3, r3, #1
 8003720:	4413      	add	r3, r2
 8003722:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003724:	e002      	b.n	800372c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	3b01      	subs	r3, #1
 800372a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f9      	bne.n	8003726 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003740:	d107      	bne.n	8003752 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003750:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b01      	cmp	r3, #1
 800375e:	f040 80a1 	bne.w	80038a4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003766:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800376a:	f023 0301 	bic.w	r3, r3, #1
 800376e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003780:	2b00      	cmp	r3, #0
 8003782:	d007      	beq.n	8003794 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003788:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800378c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003798:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800379c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037a0:	d106      	bne.n	80037b0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037a6:	f023 0206 	bic.w	r2, r3, #6
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	645a      	str	r2, [r3, #68]	@ 0x44
 80037ae:	e002      	b.n	80037b6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80037be:	4b44      	ldr	r3, [pc, #272]	@ (80038d0 <HAL_ADC_Start_DMA+0x204>)
 80037c0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037c6:	4a43      	ldr	r2, [pc, #268]	@ (80038d4 <HAL_ADC_Start_DMA+0x208>)
 80037c8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ce:	4a42      	ldr	r2, [pc, #264]	@ (80038d8 <HAL_ADC_Start_DMA+0x20c>)
 80037d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d6:	4a41      	ldr	r2, [pc, #260]	@ (80038dc <HAL_ADC_Start_DMA+0x210>)
 80037d8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80037e2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685a      	ldr	r2, [r3, #4]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 80037f2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003802:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	334c      	adds	r3, #76	@ 0x4c
 800380e:	4619      	mov	r1, r3
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f000 fcf2 	bl	80041fc <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	2b00      	cmp	r3, #0
 8003822:	d12a      	bne.n	800387a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a2d      	ldr	r2, [pc, #180]	@ (80038e0 <HAL_ADC_Start_DMA+0x214>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d015      	beq.n	800385a <HAL_ADC_Start_DMA+0x18e>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a2c      	ldr	r2, [pc, #176]	@ (80038e4 <HAL_ADC_Start_DMA+0x218>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d105      	bne.n	8003844 <HAL_ADC_Start_DMA+0x178>
 8003838:	4b25      	ldr	r3, [pc, #148]	@ (80038d0 <HAL_ADC_Start_DMA+0x204>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f003 031f 	and.w	r3, r3, #31
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00a      	beq.n	800385a <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a27      	ldr	r2, [pc, #156]	@ (80038e8 <HAL_ADC_Start_DMA+0x21c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d136      	bne.n	80038bc <HAL_ADC_Start_DMA+0x1f0>
 800384e:	4b20      	ldr	r3, [pc, #128]	@ (80038d0 <HAL_ADC_Start_DMA+0x204>)
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	2b00      	cmp	r3, #0
 8003858:	d130      	bne.n	80038bc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d129      	bne.n	80038bc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003876:	609a      	str	r2, [r3, #8]
 8003878:	e020      	b.n	80038bc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a18      	ldr	r2, [pc, #96]	@ (80038e0 <HAL_ADC_Start_DMA+0x214>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d11b      	bne.n	80038bc <HAL_ADC_Start_DMA+0x1f0>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d114      	bne.n	80038bc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80038a0:	609a      	str	r2, [r3, #8]
 80038a2:	e00b      	b.n	80038bc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a8:	f043 0210 	orr.w	r2, r3, #16
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b4:	f043 0201 	orr.w	r2, r3, #1
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3718      	adds	r7, #24
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000040 	.word	0x20000040
 80038cc:	431bde83 	.word	0x431bde83
 80038d0:	40012300 	.word	0x40012300
 80038d4:	08003d65 	.word	0x08003d65
 80038d8:	08003e1f 	.word	0x08003e1f
 80038dc:	08003e3b 	.word	0x08003e3b
 80038e0:	40012000 	.word	0x40012000
 80038e4:	40012100 	.word	0x40012100
 80038e8:	40012200 	.word	0x40012200

080038ec <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr

08003900 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003932:	2300      	movs	r3, #0
 8003934:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_ADC_ConfigChannel+0x1c>
 8003940:	2302      	movs	r3, #2
 8003942:	e105      	b.n	8003b50 <HAL_ADC_ConfigChannel+0x228>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b09      	cmp	r3, #9
 8003952:	d925      	bls.n	80039a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68d9      	ldr	r1, [r3, #12]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	b29b      	uxth	r3, r3
 8003960:	461a      	mov	r2, r3
 8003962:	4613      	mov	r3, r2
 8003964:	005b      	lsls	r3, r3, #1
 8003966:	4413      	add	r3, r2
 8003968:	3b1e      	subs	r3, #30
 800396a:	2207      	movs	r2, #7
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	43da      	mvns	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	400a      	ands	r2, r1
 8003978:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68d9      	ldr	r1, [r3, #12]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	689a      	ldr	r2, [r3, #8]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	b29b      	uxth	r3, r3
 800398a:	4618      	mov	r0, r3
 800398c:	4603      	mov	r3, r0
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	4403      	add	r3, r0
 8003992:	3b1e      	subs	r3, #30
 8003994:	409a      	lsls	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	430a      	orrs	r2, r1
 800399c:	60da      	str	r2, [r3, #12]
 800399e:	e022      	b.n	80039e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6919      	ldr	r1, [r3, #16]
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	461a      	mov	r2, r3
 80039ae:	4613      	mov	r3, r2
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	4413      	add	r3, r2
 80039b4:	2207      	movs	r2, #7
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43da      	mvns	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	400a      	ands	r2, r1
 80039c2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6919      	ldr	r1, [r3, #16]
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	689a      	ldr	r2, [r3, #8]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	4618      	mov	r0, r3
 80039d6:	4603      	mov	r3, r0
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	4403      	add	r3, r0
 80039dc:	409a      	lsls	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b06      	cmp	r3, #6
 80039ec:	d824      	bhi.n	8003a38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	3b05      	subs	r3, #5
 8003a00:	221f      	movs	r2, #31
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	43da      	mvns	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	400a      	ands	r2, r1
 8003a0e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	3b05      	subs	r3, #5
 8003a2a:	fa00 f203 	lsl.w	r2, r0, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	430a      	orrs	r2, r1
 8003a34:	635a      	str	r2, [r3, #52]	@ 0x34
 8003a36:	e04c      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b0c      	cmp	r3, #12
 8003a3e:	d824      	bhi.n	8003a8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	3b23      	subs	r3, #35	@ 0x23
 8003a52:	221f      	movs	r2, #31
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43da      	mvns	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	400a      	ands	r2, r1
 8003a60:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	4618      	mov	r0, r3
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	3b23      	subs	r3, #35	@ 0x23
 8003a7c:	fa00 f203 	lsl.w	r2, r0, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a88:	e023      	b.n	8003ad2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	685a      	ldr	r2, [r3, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	3b41      	subs	r3, #65	@ 0x41
 8003a9c:	221f      	movs	r2, #31
 8003a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa2:	43da      	mvns	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	400a      	ands	r2, r1
 8003aaa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	4618      	mov	r0, r3
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	3b41      	subs	r3, #65	@ 0x41
 8003ac6:	fa00 f203 	lsl.w	r2, r0, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ad2:	4b22      	ldr	r3, [pc, #136]	@ (8003b5c <HAL_ADC_ConfigChannel+0x234>)
 8003ad4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a21      	ldr	r2, [pc, #132]	@ (8003b60 <HAL_ADC_ConfigChannel+0x238>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d109      	bne.n	8003af4 <HAL_ADC_ConfigChannel+0x1cc>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b12      	cmp	r3, #18
 8003ae6:	d105      	bne.n	8003af4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a19      	ldr	r2, [pc, #100]	@ (8003b60 <HAL_ADC_ConfigChannel+0x238>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d123      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x21e>
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b10      	cmp	r3, #16
 8003b04:	d003      	beq.n	8003b0e <HAL_ADC_ConfigChannel+0x1e6>
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b11      	cmp	r3, #17
 8003b0c:	d11b      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b10      	cmp	r3, #16
 8003b20:	d111      	bne.n	8003b46 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b22:	4b10      	ldr	r3, [pc, #64]	@ (8003b64 <HAL_ADC_ConfigChannel+0x23c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a10      	ldr	r2, [pc, #64]	@ (8003b68 <HAL_ADC_ConfigChannel+0x240>)
 8003b28:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2c:	0c9a      	lsrs	r2, r3, #18
 8003b2e:	4613      	mov	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4413      	add	r3, r2
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003b38:	e002      	b.n	8003b40 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d1f9      	bne.n	8003b3a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	3714      	adds	r7, #20
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	40012300 	.word	0x40012300
 8003b60:	40012000 	.word	0x40012000
 8003b64:	20000040 	.word	0x20000040
 8003b68:	431bde83 	.word	0x431bde83

08003b6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b74:	4b79      	ldr	r3, [pc, #484]	@ (8003d5c <ADC_Init+0x1f0>)
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ba0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6859      	ldr	r1, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	021a      	lsls	r2, r3, #8
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003bc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6859      	ldr	r1, [r3, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003be6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6899      	ldr	r1, [r3, #8]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68da      	ldr	r2, [r3, #12]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bfe:	4a58      	ldr	r2, [pc, #352]	@ (8003d60 <ADC_Init+0x1f4>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d022      	beq.n	8003c4a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6899      	ldr	r1, [r3, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689a      	ldr	r2, [r3, #8]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003c34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6899      	ldr	r1, [r3, #8]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	609a      	str	r2, [r3, #8]
 8003c48:	e00f      	b.n	8003c6a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003c58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003c68:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	689a      	ldr	r2, [r3, #8]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 0202 	bic.w	r2, r2, #2
 8003c78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6899      	ldr	r1, [r3, #8]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	7e1b      	ldrb	r3, [r3, #24]
 8003c84:	005a      	lsls	r2, r3, #1
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d01b      	beq.n	8003cd0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ca6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	685a      	ldr	r2, [r3, #4]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003cb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	6859      	ldr	r1, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	035a      	lsls	r2, r3, #13
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	605a      	str	r2, [r3, #4]
 8003cce:	e007      	b.n	8003ce0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cde:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003cee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	051a      	lsls	r2, r3, #20
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	430a      	orrs	r2, r1
 8003d04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003d14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6899      	ldr	r1, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003d22:	025a      	lsls	r2, r3, #9
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d3a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6899      	ldr	r1, [r3, #8]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	029a      	lsls	r2, r3, #10
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	609a      	str	r2, [r3, #8]
}
 8003d50:	bf00      	nop
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	40012300 	.word	0x40012300
 8003d60:	0f000001 	.word	0x0f000001

08003d64 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b084      	sub	sp, #16
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d70:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d76:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d13c      	bne.n	8003df8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d82:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d12b      	bne.n	8003df0 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d127      	bne.n	8003df0 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d006      	beq.n	8003dbc <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d119      	bne.n	8003df0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 0220 	bic.w	r2, r2, #32
 8003dca:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ddc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d105      	bne.n	8003df0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de8:	f043 0201 	orr.w	r2, r3, #1
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f7fe fa55 	bl	80022a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003df6:	e00e      	b.n	8003e16 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfc:	f003 0310 	and.w	r3, r3, #16
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d003      	beq.n	8003e0c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f7ff fd85 	bl	8003914 <HAL_ADC_ErrorCallback>
}
 8003e0a:	e004      	b.n	8003e16 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	4798      	blx	r3
}
 8003e16:	bf00      	nop
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b084      	sub	sp, #16
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2a:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f7ff fd5d 	bl	80038ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e32:	bf00      	nop
 8003e34:	3710      	adds	r7, #16
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b084      	sub	sp, #16
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e46:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2240      	movs	r2, #64	@ 0x40
 8003e4c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e52:	f043 0204 	orr.w	r2, r3, #4
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f7ff fd5a 	bl	8003914 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e60:	bf00      	nop
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f003 0307 	and.w	r3, r3, #7
 8003e8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e98:	4013      	ands	r3, r2
 8003e9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ea4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eae:	4a04      	ldr	r2, [pc, #16]	@ (8003ec0 <__NVIC_SetPriorityGrouping+0x44>)
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	60d3      	str	r3, [r2, #12]
}
 8003eb4:	bf00      	nop
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	e000ed00 	.word	0xe000ed00

08003ec4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ec8:	4b04      	ldr	r3, [pc, #16]	@ (8003edc <__NVIC_GetPriorityGrouping+0x18>)
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	0a1b      	lsrs	r3, r3, #8
 8003ece:	f003 0307 	and.w	r3, r3, #7
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	e000ed00 	.word	0xe000ed00

08003ee0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	db0b      	blt.n	8003f0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ef2:	79fb      	ldrb	r3, [r7, #7]
 8003ef4:	f003 021f 	and.w	r2, r3, #31
 8003ef8:	4907      	ldr	r1, [pc, #28]	@ (8003f18 <__NVIC_EnableIRQ+0x38>)
 8003efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	2001      	movs	r0, #1
 8003f02:	fa00 f202 	lsl.w	r2, r0, r2
 8003f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f0a:	bf00      	nop
 8003f0c:	370c      	adds	r7, #12
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	e000e100 	.word	0xe000e100

08003f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	6039      	str	r1, [r7, #0]
 8003f26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	db0a      	blt.n	8003f46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	490c      	ldr	r1, [pc, #48]	@ (8003f68 <__NVIC_SetPriority+0x4c>)
 8003f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3a:	0112      	lsls	r2, r2, #4
 8003f3c:	b2d2      	uxtb	r2, r2
 8003f3e:	440b      	add	r3, r1
 8003f40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f44:	e00a      	b.n	8003f5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	4908      	ldr	r1, [pc, #32]	@ (8003f6c <__NVIC_SetPriority+0x50>)
 8003f4c:	79fb      	ldrb	r3, [r7, #7]
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	3b04      	subs	r3, #4
 8003f54:	0112      	lsls	r2, r2, #4
 8003f56:	b2d2      	uxtb	r2, r2
 8003f58:	440b      	add	r3, r1
 8003f5a:	761a      	strb	r2, [r3, #24]
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	e000e100 	.word	0xe000e100
 8003f6c:	e000ed00 	.word	0xe000ed00

08003f70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b089      	sub	sp, #36	@ 0x24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	f1c3 0307 	rsb	r3, r3, #7
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	bf28      	it	cs
 8003f8e:	2304      	movcs	r3, #4
 8003f90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	3304      	adds	r3, #4
 8003f96:	2b06      	cmp	r3, #6
 8003f98:	d902      	bls.n	8003fa0 <NVIC_EncodePriority+0x30>
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	3b03      	subs	r3, #3
 8003f9e:	e000      	b.n	8003fa2 <NVIC_EncodePriority+0x32>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fa4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	fa02 f303 	lsl.w	r3, r2, r3
 8003fae:	43da      	mvns	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	401a      	ands	r2, r3
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fb8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc2:	43d9      	mvns	r1, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc8:	4313      	orrs	r3, r2
         );
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3724      	adds	r7, #36	@ 0x24
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
	...

08003fd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fe8:	d301      	bcc.n	8003fee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fea:	2301      	movs	r3, #1
 8003fec:	e00f      	b.n	800400e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fee:	4a0a      	ldr	r2, [pc, #40]	@ (8004018 <SysTick_Config+0x40>)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ff6:	210f      	movs	r1, #15
 8003ff8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003ffc:	f7ff ff8e 	bl	8003f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004000:	4b05      	ldr	r3, [pc, #20]	@ (8004018 <SysTick_Config+0x40>)
 8004002:	2200      	movs	r2, #0
 8004004:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004006:	4b04      	ldr	r3, [pc, #16]	@ (8004018 <SysTick_Config+0x40>)
 8004008:	2207      	movs	r2, #7
 800400a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	3708      	adds	r7, #8
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	e000e010 	.word	0xe000e010

0800401c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff ff29 	bl	8003e7c <__NVIC_SetPriorityGrouping>
}
 800402a:	bf00      	nop
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004032:	b580      	push	{r7, lr}
 8004034:	b086      	sub	sp, #24
 8004036:	af00      	add	r7, sp, #0
 8004038:	4603      	mov	r3, r0
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	607a      	str	r2, [r7, #4]
 800403e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004040:	2300      	movs	r3, #0
 8004042:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004044:	f7ff ff3e 	bl	8003ec4 <__NVIC_GetPriorityGrouping>
 8004048:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	68b9      	ldr	r1, [r7, #8]
 800404e:	6978      	ldr	r0, [r7, #20]
 8004050:	f7ff ff8e 	bl	8003f70 <NVIC_EncodePriority>
 8004054:	4602      	mov	r2, r0
 8004056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800405a:	4611      	mov	r1, r2
 800405c:	4618      	mov	r0, r3
 800405e:	f7ff ff5d 	bl	8003f1c <__NVIC_SetPriority>
}
 8004062:	bf00      	nop
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b082      	sub	sp, #8
 800406e:	af00      	add	r7, sp, #0
 8004070:	4603      	mov	r3, r0
 8004072:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004078:	4618      	mov	r0, r3
 800407a:	f7ff ff31 	bl	8003ee0 <__NVIC_EnableIRQ>
}
 800407e:	bf00      	nop
 8004080:	3708      	adds	r7, #8
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7ff ffa2 	bl	8003fd8 <SysTick_Config>
 8004094:	4603      	mov	r3, r0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3708      	adds	r7, #8
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
	...

080040a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040ac:	f7ff f98a 	bl	80033c4 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d101      	bne.n	80040bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e099      	b.n	80041f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0201 	bic.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040dc:	e00f      	b.n	80040fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040de:	f7ff f971 	bl	80033c4 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	2b05      	cmp	r3, #5
 80040ea:	d908      	bls.n	80040fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2220      	movs	r2, #32
 80040f0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2203      	movs	r2, #3
 80040f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e078      	b.n	80041f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0301 	and.w	r3, r3, #1
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1e8      	bne.n	80040de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	4b38      	ldr	r3, [pc, #224]	@ (80041f8 <HAL_DMA_Init+0x158>)
 8004118:	4013      	ands	r3, r2
 800411a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685a      	ldr	r2, [r3, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800412a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004136:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004142:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	4313      	orrs	r3, r2
 800414e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004154:	2b04      	cmp	r3, #4
 8004156:	d107      	bne.n	8004168 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004160:	4313      	orrs	r3, r2
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	4313      	orrs	r3, r2
 8004166:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f023 0307 	bic.w	r3, r3, #7
 800417e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	4313      	orrs	r3, r2
 8004188:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418e:	2b04      	cmp	r3, #4
 8004190:	d117      	bne.n	80041c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004196:	697a      	ldr	r2, [r7, #20]
 8004198:	4313      	orrs	r3, r2
 800419a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00e      	beq.n	80041c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 fa6f 	bl	8004688 <DMA_CheckFifoParam>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2240      	movs	r2, #64	@ 0x40
 80041b4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80041be:	2301      	movs	r3, #1
 80041c0:	e016      	b.n	80041f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 fa26 	bl	800461c <DMA_CalcBaseAndBitshift>
 80041d0:	4603      	mov	r3, r0
 80041d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041d8:	223f      	movs	r2, #63	@ 0x3f
 80041da:	409a      	lsls	r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3718      	adds	r7, #24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	f010803f 	.word	0xf010803f

080041fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b086      	sub	sp, #24
 8004200:	af00      	add	r7, sp, #0
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
 8004208:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004212:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_DMA_Start_IT+0x26>
 800421e:	2302      	movs	r3, #2
 8004220:	e040      	b.n	80042a4 <HAL_DMA_Start_IT+0xa8>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b01      	cmp	r3, #1
 8004234:	d12f      	bne.n	8004296 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2202      	movs	r2, #2
 800423a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	68b9      	ldr	r1, [r7, #8]
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f9b8 	bl	80045c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004254:	223f      	movs	r2, #63	@ 0x3f
 8004256:	409a      	lsls	r2, r3
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f042 0216 	orr.w	r2, r2, #22
 800426a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004270:	2b00      	cmp	r3, #0
 8004272:	d007      	beq.n	8004284 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f042 0208 	orr.w	r2, r2, #8
 8004282:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f042 0201 	orr.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	e005      	b.n	80042a2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800429e:	2302      	movs	r3, #2
 80042a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80042a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3718      	adds	r7, #24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80042b8:	4b8e      	ldr	r3, [pc, #568]	@ (80044f4 <HAL_DMA_IRQHandler+0x248>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a8e      	ldr	r2, [pc, #568]	@ (80044f8 <HAL_DMA_IRQHandler+0x24c>)
 80042be:	fba2 2303 	umull	r2, r3, r2, r3
 80042c2:	0a9b      	lsrs	r3, r3, #10
 80042c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042d6:	2208      	movs	r2, #8
 80042d8:	409a      	lsls	r2, r3
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	4013      	ands	r3, r2
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d01a      	beq.n	8004318 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0304 	and.w	r3, r3, #4
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d013      	beq.n	8004318 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0204 	bic.w	r2, r2, #4
 80042fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004304:	2208      	movs	r2, #8
 8004306:	409a      	lsls	r2, r3
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004310:	f043 0201 	orr.w	r2, r3, #1
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800431c:	2201      	movs	r2, #1
 800431e:	409a      	lsls	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	4013      	ands	r3, r2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d012      	beq.n	800434e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00b      	beq.n	800434e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800433a:	2201      	movs	r2, #1
 800433c:	409a      	lsls	r2, r3
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004346:	f043 0202 	orr.w	r2, r3, #2
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004352:	2204      	movs	r2, #4
 8004354:	409a      	lsls	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4013      	ands	r3, r2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d012      	beq.n	8004384 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00b      	beq.n	8004384 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004370:	2204      	movs	r2, #4
 8004372:	409a      	lsls	r2, r3
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800437c:	f043 0204 	orr.w	r2, r3, #4
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004388:	2210      	movs	r2, #16
 800438a:	409a      	lsls	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	4013      	ands	r3, r2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d043      	beq.n	800441c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0308 	and.w	r3, r3, #8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d03c      	beq.n	800441c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043a6:	2210      	movs	r2, #16
 80043a8:	409a      	lsls	r2, r3
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d018      	beq.n	80043ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d108      	bne.n	80043dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d024      	beq.n	800441c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	4798      	blx	r3
 80043da:	e01f      	b.n	800441c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d01b      	beq.n	800441c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	4798      	blx	r3
 80043ec:	e016      	b.n	800441c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d107      	bne.n	800440c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0208 	bic.w	r2, r2, #8
 800440a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004410:	2b00      	cmp	r3, #0
 8004412:	d003      	beq.n	800441c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004420:	2220      	movs	r2, #32
 8004422:	409a      	lsls	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	4013      	ands	r3, r2
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 808f 	beq.w	800454c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0310 	and.w	r3, r3, #16
 8004438:	2b00      	cmp	r3, #0
 800443a:	f000 8087 	beq.w	800454c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004442:	2220      	movs	r2, #32
 8004444:	409a      	lsls	r2, r3
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b05      	cmp	r3, #5
 8004454:	d136      	bne.n	80044c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f022 0216 	bic.w	r2, r2, #22
 8004464:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	695a      	ldr	r2, [r3, #20]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004474:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447a:	2b00      	cmp	r3, #0
 800447c:	d103      	bne.n	8004486 <HAL_DMA_IRQHandler+0x1da>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004482:	2b00      	cmp	r3, #0
 8004484:	d007      	beq.n	8004496 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0208 	bic.w	r2, r2, #8
 8004494:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800449a:	223f      	movs	r2, #63	@ 0x3f
 800449c:	409a      	lsls	r2, r3
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d07e      	beq.n	80045b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	4798      	blx	r3
        }
        return;
 80044c2:	e079      	b.n	80045b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d01d      	beq.n	800450e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d10d      	bne.n	80044fc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d031      	beq.n	800454c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	4798      	blx	r3
 80044f0:	e02c      	b.n	800454c <HAL_DMA_IRQHandler+0x2a0>
 80044f2:	bf00      	nop
 80044f4:	20000040 	.word	0x20000040
 80044f8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004500:	2b00      	cmp	r3, #0
 8004502:	d023      	beq.n	800454c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	4798      	blx	r3
 800450c:	e01e      	b.n	800454c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10f      	bne.n	800453c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0210 	bic.w	r2, r2, #16
 800452a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004550:	2b00      	cmp	r3, #0
 8004552:	d032      	beq.n	80045ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d022      	beq.n	80045a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2205      	movs	r2, #5
 8004564:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0201 	bic.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	3301      	adds	r3, #1
 800457c:	60bb      	str	r3, [r7, #8]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	429a      	cmp	r2, r3
 8004582:	d307      	bcc.n	8004594 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f2      	bne.n	8004578 <HAL_DMA_IRQHandler+0x2cc>
 8004592:	e000      	b.n	8004596 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004594:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d005      	beq.n	80045ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	4798      	blx	r3
 80045b6:	e000      	b.n	80045ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80045b8:	bf00      	nop
    }
  }
}
 80045ba:	3718      	adds	r7, #24
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80045dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	683a      	ldr	r2, [r7, #0]
 80045e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	2b40      	cmp	r3, #64	@ 0x40
 80045ec:	d108      	bne.n	8004600 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045fe:	e007      	b.n	8004610 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	60da      	str	r2, [r3, #12]
}
 8004610:	bf00      	nop
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	b2db      	uxtb	r3, r3
 800462a:	3b10      	subs	r3, #16
 800462c:	4a14      	ldr	r2, [pc, #80]	@ (8004680 <DMA_CalcBaseAndBitshift+0x64>)
 800462e:	fba2 2303 	umull	r2, r3, r2, r3
 8004632:	091b      	lsrs	r3, r3, #4
 8004634:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004636:	4a13      	ldr	r2, [pc, #76]	@ (8004684 <DMA_CalcBaseAndBitshift+0x68>)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	461a      	mov	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b03      	cmp	r3, #3
 8004648:	d909      	bls.n	800465e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004652:	f023 0303 	bic.w	r3, r3, #3
 8004656:	1d1a      	adds	r2, r3, #4
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	659a      	str	r2, [r3, #88]	@ 0x58
 800465c:	e007      	b.n	800466e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004666:	f023 0303 	bic.w	r3, r3, #3
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004672:	4618      	mov	r0, r3
 8004674:	3714      	adds	r7, #20
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	aaaaaaab 	.word	0xaaaaaaab
 8004684:	0800aae0 	.word	0x0800aae0

08004688 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004690:	2300      	movs	r3, #0
 8004692:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004698:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d11f      	bne.n	80046e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	d856      	bhi.n	8004756 <DMA_CheckFifoParam+0xce>
 80046a8:	a201      	add	r2, pc, #4	@ (adr r2, 80046b0 <DMA_CheckFifoParam+0x28>)
 80046aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ae:	bf00      	nop
 80046b0:	080046c1 	.word	0x080046c1
 80046b4:	080046d3 	.word	0x080046d3
 80046b8:	080046c1 	.word	0x080046c1
 80046bc:	08004757 	.word	0x08004757
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d046      	beq.n	800475a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046d0:	e043      	b.n	800475a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80046da:	d140      	bne.n	800475e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046e0:	e03d      	b.n	800475e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046ea:	d121      	bne.n	8004730 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d837      	bhi.n	8004762 <DMA_CheckFifoParam+0xda>
 80046f2:	a201      	add	r2, pc, #4	@ (adr r2, 80046f8 <DMA_CheckFifoParam+0x70>)
 80046f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f8:	08004709 	.word	0x08004709
 80046fc:	0800470f 	.word	0x0800470f
 8004700:	08004709 	.word	0x08004709
 8004704:	08004721 	.word	0x08004721
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	73fb      	strb	r3, [r7, #15]
      break;
 800470c:	e030      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004712:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d025      	beq.n	8004766 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800471e:	e022      	b.n	8004766 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004724:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004728:	d11f      	bne.n	800476a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800472e:	e01c      	b.n	800476a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b02      	cmp	r3, #2
 8004734:	d903      	bls.n	800473e <DMA_CheckFifoParam+0xb6>
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	2b03      	cmp	r3, #3
 800473a:	d003      	beq.n	8004744 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800473c:	e018      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	73fb      	strb	r3, [r7, #15]
      break;
 8004742:	e015      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004748:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d00e      	beq.n	800476e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
      break;
 8004754:	e00b      	b.n	800476e <DMA_CheckFifoParam+0xe6>
      break;
 8004756:	bf00      	nop
 8004758:	e00a      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
      break;
 800475a:	bf00      	nop
 800475c:	e008      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
      break;
 800475e:	bf00      	nop
 8004760:	e006      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
      break;
 8004762:	bf00      	nop
 8004764:	e004      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
      break;
 8004766:	bf00      	nop
 8004768:	e002      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
      break;   
 800476a:	bf00      	nop
 800476c:	e000      	b.n	8004770 <DMA_CheckFifoParam+0xe8>
      break;
 800476e:	bf00      	nop
    }
  } 
  
  return status; 
 8004770:	7bfb      	ldrb	r3, [r7, #15]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3714      	adds	r7, #20
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop

08004780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004780:	b480      	push	{r7}
 8004782:	b089      	sub	sp, #36	@ 0x24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800478e:	2300      	movs	r3, #0
 8004790:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004792:	2300      	movs	r3, #0
 8004794:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	e16b      	b.n	8004a74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800479c:	2201      	movs	r2, #1
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	fa02 f303 	lsl.w	r3, r2, r3
 80047a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	697a      	ldr	r2, [r7, #20]
 80047ac:	4013      	ands	r3, r2
 80047ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	f040 815a 	bne.w	8004a6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d005      	beq.n	80047d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047ce:	2b02      	cmp	r3, #2
 80047d0:	d130      	bne.n	8004834 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	2203      	movs	r2, #3
 80047de:	fa02 f303 	lsl.w	r3, r2, r3
 80047e2:	43db      	mvns	r3, r3
 80047e4:	69ba      	ldr	r2, [r7, #24]
 80047e6:	4013      	ands	r3, r2
 80047e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	68da      	ldr	r2, [r3, #12]
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	005b      	lsls	r3, r3, #1
 80047f2:	fa02 f303 	lsl.w	r3, r2, r3
 80047f6:	69ba      	ldr	r2, [r7, #24]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004808:	2201      	movs	r2, #1
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	fa02 f303 	lsl.w	r3, r2, r3
 8004810:	43db      	mvns	r3, r3
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	4013      	ands	r3, r2
 8004816:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	091b      	lsrs	r3, r3, #4
 800481e:	f003 0201 	and.w	r2, r3, #1
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	fa02 f303 	lsl.w	r3, r2, r3
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	4313      	orrs	r3, r2
 800482c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	69ba      	ldr	r2, [r7, #24]
 8004832:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	2b03      	cmp	r3, #3
 800483e:	d017      	beq.n	8004870 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	2203      	movs	r2, #3
 800484c:	fa02 f303 	lsl.w	r3, r2, r3
 8004850:	43db      	mvns	r3, r3
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	4013      	ands	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	fa02 f303 	lsl.w	r3, r2, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4313      	orrs	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f003 0303 	and.w	r3, r3, #3
 8004878:	2b02      	cmp	r3, #2
 800487a:	d123      	bne.n	80048c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	08da      	lsrs	r2, r3, #3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	3208      	adds	r2, #8
 8004884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004888:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	220f      	movs	r2, #15
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	43db      	mvns	r3, r3
 800489a:	69ba      	ldr	r2, [r7, #24]
 800489c:	4013      	ands	r3, r2
 800489e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	691a      	ldr	r2, [r3, #16]
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	f003 0307 	and.w	r3, r3, #7
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	69ba      	ldr	r2, [r7, #24]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	08da      	lsrs	r2, r3, #3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3208      	adds	r2, #8
 80048be:	69b9      	ldr	r1, [r7, #24]
 80048c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	2203      	movs	r2, #3
 80048d0:	fa02 f303 	lsl.w	r3, r2, r3
 80048d4:	43db      	mvns	r3, r3
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	4013      	ands	r3, r2
 80048da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f003 0203 	and.w	r2, r3, #3
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	005b      	lsls	r3, r3, #1
 80048e8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	69ba      	ldr	r2, [r7, #24]
 80048f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 80b4 	beq.w	8004a6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004906:	2300      	movs	r3, #0
 8004908:	60fb      	str	r3, [r7, #12]
 800490a:	4b60      	ldr	r3, [pc, #384]	@ (8004a8c <HAL_GPIO_Init+0x30c>)
 800490c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800490e:	4a5f      	ldr	r2, [pc, #380]	@ (8004a8c <HAL_GPIO_Init+0x30c>)
 8004910:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004914:	6453      	str	r3, [r2, #68]	@ 0x44
 8004916:	4b5d      	ldr	r3, [pc, #372]	@ (8004a8c <HAL_GPIO_Init+0x30c>)
 8004918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800491a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004922:	4a5b      	ldr	r2, [pc, #364]	@ (8004a90 <HAL_GPIO_Init+0x310>)
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	089b      	lsrs	r3, r3, #2
 8004928:	3302      	adds	r3, #2
 800492a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800492e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004930:	69fb      	ldr	r3, [r7, #28]
 8004932:	f003 0303 	and.w	r3, r3, #3
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	220f      	movs	r2, #15
 800493a:	fa02 f303 	lsl.w	r3, r2, r3
 800493e:	43db      	mvns	r3, r3
 8004940:	69ba      	ldr	r2, [r7, #24]
 8004942:	4013      	ands	r3, r2
 8004944:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a52      	ldr	r2, [pc, #328]	@ (8004a94 <HAL_GPIO_Init+0x314>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d02b      	beq.n	80049a6 <HAL_GPIO_Init+0x226>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a51      	ldr	r2, [pc, #324]	@ (8004a98 <HAL_GPIO_Init+0x318>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d025      	beq.n	80049a2 <HAL_GPIO_Init+0x222>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a50      	ldr	r2, [pc, #320]	@ (8004a9c <HAL_GPIO_Init+0x31c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d01f      	beq.n	800499e <HAL_GPIO_Init+0x21e>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a4f      	ldr	r2, [pc, #316]	@ (8004aa0 <HAL_GPIO_Init+0x320>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d019      	beq.n	800499a <HAL_GPIO_Init+0x21a>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a4e      	ldr	r2, [pc, #312]	@ (8004aa4 <HAL_GPIO_Init+0x324>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d013      	beq.n	8004996 <HAL_GPIO_Init+0x216>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a4d      	ldr	r2, [pc, #308]	@ (8004aa8 <HAL_GPIO_Init+0x328>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d00d      	beq.n	8004992 <HAL_GPIO_Init+0x212>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a4c      	ldr	r2, [pc, #304]	@ (8004aac <HAL_GPIO_Init+0x32c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d007      	beq.n	800498e <HAL_GPIO_Init+0x20e>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a4b      	ldr	r2, [pc, #300]	@ (8004ab0 <HAL_GPIO_Init+0x330>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d101      	bne.n	800498a <HAL_GPIO_Init+0x20a>
 8004986:	2307      	movs	r3, #7
 8004988:	e00e      	b.n	80049a8 <HAL_GPIO_Init+0x228>
 800498a:	2308      	movs	r3, #8
 800498c:	e00c      	b.n	80049a8 <HAL_GPIO_Init+0x228>
 800498e:	2306      	movs	r3, #6
 8004990:	e00a      	b.n	80049a8 <HAL_GPIO_Init+0x228>
 8004992:	2305      	movs	r3, #5
 8004994:	e008      	b.n	80049a8 <HAL_GPIO_Init+0x228>
 8004996:	2304      	movs	r3, #4
 8004998:	e006      	b.n	80049a8 <HAL_GPIO_Init+0x228>
 800499a:	2303      	movs	r3, #3
 800499c:	e004      	b.n	80049a8 <HAL_GPIO_Init+0x228>
 800499e:	2302      	movs	r3, #2
 80049a0:	e002      	b.n	80049a8 <HAL_GPIO_Init+0x228>
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <HAL_GPIO_Init+0x228>
 80049a6:	2300      	movs	r3, #0
 80049a8:	69fa      	ldr	r2, [r7, #28]
 80049aa:	f002 0203 	and.w	r2, r2, #3
 80049ae:	0092      	lsls	r2, r2, #2
 80049b0:	4093      	lsls	r3, r2
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049b8:	4935      	ldr	r1, [pc, #212]	@ (8004a90 <HAL_GPIO_Init+0x310>)
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	089b      	lsrs	r3, r3, #2
 80049be:	3302      	adds	r3, #2
 80049c0:	69ba      	ldr	r2, [r7, #24]
 80049c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049c6:	4b3b      	ldr	r3, [pc, #236]	@ (8004ab4 <HAL_GPIO_Init+0x334>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	43db      	mvns	r3, r3
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	4013      	ands	r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80049e2:	69ba      	ldr	r2, [r7, #24]
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049ea:	4a32      	ldr	r2, [pc, #200]	@ (8004ab4 <HAL_GPIO_Init+0x334>)
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049f0:	4b30      	ldr	r3, [pc, #192]	@ (8004ab4 <HAL_GPIO_Init+0x334>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	43db      	mvns	r3, r3
 80049fa:	69ba      	ldr	r2, [r7, #24]
 80049fc:	4013      	ands	r3, r2
 80049fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	4313      	orrs	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a14:	4a27      	ldr	r2, [pc, #156]	@ (8004ab4 <HAL_GPIO_Init+0x334>)
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004a1a:	4b26      	ldr	r3, [pc, #152]	@ (8004ab4 <HAL_GPIO_Init+0x334>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	43db      	mvns	r3, r3
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	4013      	ands	r3, r2
 8004a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8004ab4 <HAL_GPIO_Init+0x334>)
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a44:	4b1b      	ldr	r3, [pc, #108]	@ (8004ab4 <HAL_GPIO_Init+0x334>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	43db      	mvns	r3, r3
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	4013      	ands	r3, r2
 8004a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004a60:	69ba      	ldr	r2, [r7, #24]
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a68:	4a12      	ldr	r2, [pc, #72]	@ (8004ab4 <HAL_GPIO_Init+0x334>)
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	3301      	adds	r3, #1
 8004a72:	61fb      	str	r3, [r7, #28]
 8004a74:	69fb      	ldr	r3, [r7, #28]
 8004a76:	2b0f      	cmp	r3, #15
 8004a78:	f67f ae90 	bls.w	800479c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a7c:	bf00      	nop
 8004a7e:	bf00      	nop
 8004a80:	3724      	adds	r7, #36	@ 0x24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	40023800 	.word	0x40023800
 8004a90:	40013800 	.word	0x40013800
 8004a94:	40020000 	.word	0x40020000
 8004a98:	40020400 	.word	0x40020400
 8004a9c:	40020800 	.word	0x40020800
 8004aa0:	40020c00 	.word	0x40020c00
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	40021400 	.word	0x40021400
 8004aac:	40021800 	.word	0x40021800
 8004ab0:	40021c00 	.word	0x40021c00
 8004ab4:	40013c00 	.word	0x40013c00

08004ab8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	460b      	mov	r3, r1
 8004ac2:	807b      	strh	r3, [r7, #2]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ac8:	787b      	ldrb	r3, [r7, #1]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d003      	beq.n	8004ad6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ace:	887a      	ldrh	r2, [r7, #2]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ad4:	e003      	b.n	8004ade <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ad6:	887b      	ldrh	r3, [r7, #2]
 8004ad8:	041a      	lsls	r2, r3, #16
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	619a      	str	r2, [r3, #24]
}
 8004ade:	bf00      	nop
 8004ae0:	370c      	adds	r7, #12
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
	...

08004aec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b084      	sub	sp, #16
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d101      	bne.n	8004afe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e12b      	b.n	8004d56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d106      	bne.n	8004b18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7fd fb24 	bl	8002160 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2224      	movs	r2, #36	@ 0x24
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f022 0201 	bic.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004b3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004b4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b50:	f001 fd46 	bl	80065e0 <HAL_RCC_GetPCLK1Freq>
 8004b54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	4a81      	ldr	r2, [pc, #516]	@ (8004d60 <HAL_I2C_Init+0x274>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d807      	bhi.n	8004b70 <HAL_I2C_Init+0x84>
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4a80      	ldr	r2, [pc, #512]	@ (8004d64 <HAL_I2C_Init+0x278>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	bf94      	ite	ls
 8004b68:	2301      	movls	r3, #1
 8004b6a:	2300      	movhi	r3, #0
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	e006      	b.n	8004b7e <HAL_I2C_Init+0x92>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4a7d      	ldr	r2, [pc, #500]	@ (8004d68 <HAL_I2C_Init+0x27c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	bf94      	ite	ls
 8004b78:	2301      	movls	r3, #1
 8004b7a:	2300      	movhi	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e0e7      	b.n	8004d56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4a78      	ldr	r2, [pc, #480]	@ (8004d6c <HAL_I2C_Init+0x280>)
 8004b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8e:	0c9b      	lsrs	r3, r3, #18
 8004b90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68ba      	ldr	r2, [r7, #8]
 8004ba2:	430a      	orrs	r2, r1
 8004ba4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	4a6a      	ldr	r2, [pc, #424]	@ (8004d60 <HAL_I2C_Init+0x274>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d802      	bhi.n	8004bc0 <HAL_I2C_Init+0xd4>
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	e009      	b.n	8004bd4 <HAL_I2C_Init+0xe8>
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004bc6:	fb02 f303 	mul.w	r3, r2, r3
 8004bca:	4a69      	ldr	r2, [pc, #420]	@ (8004d70 <HAL_I2C_Init+0x284>)
 8004bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd0:	099b      	lsrs	r3, r3, #6
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	6812      	ldr	r2, [r2, #0]
 8004bd8:	430b      	orrs	r3, r1
 8004bda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004be6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	495c      	ldr	r1, [pc, #368]	@ (8004d60 <HAL_I2C_Init+0x274>)
 8004bf0:	428b      	cmp	r3, r1
 8004bf2:	d819      	bhi.n	8004c28 <HAL_I2C_Init+0x13c>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	1e59      	subs	r1, r3, #1
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	005b      	lsls	r3, r3, #1
 8004bfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c02:	1c59      	adds	r1, r3, #1
 8004c04:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004c08:	400b      	ands	r3, r1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d00a      	beq.n	8004c24 <HAL_I2C_Init+0x138>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	1e59      	subs	r1, r3, #1
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c22:	e051      	b.n	8004cc8 <HAL_I2C_Init+0x1dc>
 8004c24:	2304      	movs	r3, #4
 8004c26:	e04f      	b.n	8004cc8 <HAL_I2C_Init+0x1dc>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d111      	bne.n	8004c54 <HAL_I2C_Init+0x168>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	1e58      	subs	r0, r3, #1
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6859      	ldr	r1, [r3, #4]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	440b      	add	r3, r1
 8004c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c42:	3301      	adds	r3, #1
 8004c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	bf0c      	ite	eq
 8004c4c:	2301      	moveq	r3, #1
 8004c4e:	2300      	movne	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	e012      	b.n	8004c7a <HAL_I2C_Init+0x18e>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	1e58      	subs	r0, r3, #1
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6859      	ldr	r1, [r3, #4]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	440b      	add	r3, r1
 8004c62:	0099      	lsls	r1, r3, #2
 8004c64:	440b      	add	r3, r1
 8004c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	bf0c      	ite	eq
 8004c74:	2301      	moveq	r3, #1
 8004c76:	2300      	movne	r3, #0
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <HAL_I2C_Init+0x196>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e022      	b.n	8004cc8 <HAL_I2C_Init+0x1dc>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10e      	bne.n	8004ca8 <HAL_I2C_Init+0x1bc>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	1e58      	subs	r0, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6859      	ldr	r1, [r3, #4]
 8004c92:	460b      	mov	r3, r1
 8004c94:	005b      	lsls	r3, r3, #1
 8004c96:	440b      	add	r3, r1
 8004c98:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ca6:	e00f      	b.n	8004cc8 <HAL_I2C_Init+0x1dc>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	1e58      	subs	r0, r3, #1
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6859      	ldr	r1, [r3, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	0099      	lsls	r1, r3, #2
 8004cb8:	440b      	add	r3, r1
 8004cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004cc8:	6879      	ldr	r1, [r7, #4]
 8004cca:	6809      	ldr	r1, [r1, #0]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69da      	ldr	r2, [r3, #28]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6a1b      	ldr	r3, [r3, #32]
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004cf6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	6911      	ldr	r1, [r2, #16]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	68d2      	ldr	r2, [r2, #12]
 8004d02:	4311      	orrs	r1, r2
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	6812      	ldr	r2, [r2, #0]
 8004d08:	430b      	orrs	r3, r1
 8004d0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695a      	ldr	r2, [r3, #20]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 0201 	orr.w	r2, r2, #1
 8004d36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	000186a0 	.word	0x000186a0
 8004d64:	001e847f 	.word	0x001e847f
 8004d68:	003d08ff 	.word	0x003d08ff
 8004d6c:	431bde83 	.word	0x431bde83
 8004d70:	10624dd3 	.word	0x10624dd3

08004d74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b088      	sub	sp, #32
 8004d78:	af02      	add	r7, sp, #8
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	607a      	str	r2, [r7, #4]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	460b      	mov	r3, r1
 8004d82:	817b      	strh	r3, [r7, #10]
 8004d84:	4613      	mov	r3, r2
 8004d86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004d88:	f7fe fb1c 	bl	80033c4 <HAL_GetTick>
 8004d8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b20      	cmp	r3, #32
 8004d98:	f040 80e0 	bne.w	8004f5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	9300      	str	r3, [sp, #0]
 8004da0:	2319      	movs	r3, #25
 8004da2:	2201      	movs	r2, #1
 8004da4:	4970      	ldr	r1, [pc, #448]	@ (8004f68 <HAL_I2C_Master_Transmit+0x1f4>)
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 fc64 	bl	8005674 <I2C_WaitOnFlagUntilTimeout>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004db2:	2302      	movs	r3, #2
 8004db4:	e0d3      	b.n	8004f5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d101      	bne.n	8004dc4 <HAL_I2C_Master_Transmit+0x50>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	e0cc      	b.n	8004f5e <HAL_I2C_Master_Transmit+0x1ea>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d007      	beq.n	8004dea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f042 0201 	orr.w	r2, r2, #1
 8004de8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004df8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2221      	movs	r2, #33	@ 0x21
 8004dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2210      	movs	r2, #16
 8004e06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	893a      	ldrh	r2, [r7, #8]
 8004e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4a50      	ldr	r2, [pc, #320]	@ (8004f6c <HAL_I2C_Master_Transmit+0x1f8>)
 8004e2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004e2c:	8979      	ldrh	r1, [r7, #10]
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	6a3a      	ldr	r2, [r7, #32]
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 face 	bl	80053d4 <I2C_MasterRequestWrite>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e08d      	b.n	8004f5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e42:	2300      	movs	r3, #0
 8004e44:	613b      	str	r3, [r7, #16]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	613b      	str	r3, [r7, #16]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	699b      	ldr	r3, [r3, #24]
 8004e54:	613b      	str	r3, [r7, #16]
 8004e56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004e58:	e066      	b.n	8004f28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	6a39      	ldr	r1, [r7, #32]
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 fd22 	bl	80058a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d00d      	beq.n	8004e86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d107      	bne.n	8004e82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e06b      	b.n	8004f5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8a:	781a      	ldrb	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e96:	1c5a      	adds	r2, r3, #1
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	695b      	ldr	r3, [r3, #20]
 8004ebc:	f003 0304 	and.w	r3, r3, #4
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d11b      	bne.n	8004efc <HAL_I2C_Master_Transmit+0x188>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d017      	beq.n	8004efc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed0:	781a      	ldrb	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004efc:	697a      	ldr	r2, [r7, #20]
 8004efe:	6a39      	ldr	r1, [r7, #32]
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	f000 fd19 	bl	8005938 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f06:	4603      	mov	r3, r0
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00d      	beq.n	8004f28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f10:	2b04      	cmp	r3, #4
 8004f12:	d107      	bne.n	8004f24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e01a      	b.n	8004f5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d194      	bne.n	8004e5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2220      	movs	r2, #32
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	e000      	b.n	8004f5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004f5c:	2302      	movs	r3, #2
  }
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	00100002 	.word	0x00100002
 8004f6c:	ffff0000 	.word	0xffff0000

08004f70 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b08c      	sub	sp, #48	@ 0x30
 8004f74:	af02      	add	r7, sp, #8
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	607a      	str	r2, [r7, #4]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	817b      	strh	r3, [r7, #10]
 8004f80:	4613      	mov	r3, r2
 8004f82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004f84:	f7fe fa1e 	bl	80033c4 <HAL_GetTick>
 8004f88:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b20      	cmp	r3, #32
 8004f94:	f040 8217 	bne.w	80053c6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	2319      	movs	r3, #25
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	497c      	ldr	r1, [pc, #496]	@ (8005194 <HAL_I2C_Master_Receive+0x224>)
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 fb66 	bl	8005674 <I2C_WaitOnFlagUntilTimeout>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004fae:	2302      	movs	r3, #2
 8004fb0:	e20a      	b.n	80053c8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d101      	bne.n	8004fc0 <HAL_I2C_Master_Receive+0x50>
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	e203      	b.n	80053c8 <HAL_I2C_Master_Receive+0x458>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0301 	and.w	r3, r3, #1
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d007      	beq.n	8004fe6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0201 	orr.w	r2, r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ff4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2222      	movs	r2, #34	@ 0x22
 8004ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2210      	movs	r2, #16
 8005002:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	893a      	ldrh	r2, [r7, #8]
 8005016:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4a5c      	ldr	r2, [pc, #368]	@ (8005198 <HAL_I2C_Master_Receive+0x228>)
 8005026:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005028:	8979      	ldrh	r1, [r7, #10]
 800502a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 fa52 	bl	80054d8 <I2C_MasterRequestRead>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e1c4      	b.n	80053c8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005042:	2b00      	cmp	r3, #0
 8005044:	d113      	bne.n	800506e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005046:	2300      	movs	r3, #0
 8005048:	623b      	str	r3, [r7, #32]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	623b      	str	r3, [r7, #32]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	623b      	str	r3, [r7, #32]
 800505a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800506a:	601a      	str	r2, [r3, #0]
 800506c:	e198      	b.n	80053a0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005072:	2b01      	cmp	r3, #1
 8005074:	d11b      	bne.n	80050ae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005084:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005086:	2300      	movs	r3, #0
 8005088:	61fb      	str	r3, [r7, #28]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	695b      	ldr	r3, [r3, #20]
 8005090:	61fb      	str	r3, [r7, #28]
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	61fb      	str	r3, [r7, #28]
 800509a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	e178      	b.n	80053a0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d11b      	bne.n	80050ee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050d6:	2300      	movs	r3, #0
 80050d8:	61bb      	str	r3, [r7, #24]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	61bb      	str	r3, [r7, #24]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	e158      	b.n	80053a0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050fe:	2300      	movs	r3, #0
 8005100:	617b      	str	r3, [r7, #20]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	617b      	str	r3, [r7, #20]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	699b      	ldr	r3, [r3, #24]
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005114:	e144      	b.n	80053a0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800511a:	2b03      	cmp	r3, #3
 800511c:	f200 80f1 	bhi.w	8005302 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005124:	2b01      	cmp	r3, #1
 8005126:	d123      	bne.n	8005170 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005128:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800512a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f000 fc4b 	bl	80059c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e145      	b.n	80053c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	691a      	ldr	r2, [r3, #16]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005158:	3b01      	subs	r3, #1
 800515a:	b29a      	uxth	r2, r3
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005164:	b29b      	uxth	r3, r3
 8005166:	3b01      	subs	r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800516e:	e117      	b.n	80053a0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005174:	2b02      	cmp	r3, #2
 8005176:	d14e      	bne.n	8005216 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517a:	9300      	str	r3, [sp, #0]
 800517c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517e:	2200      	movs	r2, #0
 8005180:	4906      	ldr	r1, [pc, #24]	@ (800519c <HAL_I2C_Master_Receive+0x22c>)
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f000 fa76 	bl	8005674 <I2C_WaitOnFlagUntilTimeout>
 8005188:	4603      	mov	r3, r0
 800518a:	2b00      	cmp	r3, #0
 800518c:	d008      	beq.n	80051a0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e11a      	b.n	80053c8 <HAL_I2C_Master_Receive+0x458>
 8005192:	bf00      	nop
 8005194:	00100002 	.word	0x00100002
 8005198:	ffff0000 	.word	0xffff0000
 800519c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691a      	ldr	r2, [r3, #16]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051cc:	3b01      	subs	r3, #1
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d8:	b29b      	uxth	r3, r3
 80051da:	3b01      	subs	r3, #1
 80051dc:	b29a      	uxth	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	691a      	ldr	r2, [r3, #16]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051ec:	b2d2      	uxtb	r2, r2
 80051ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f4:	1c5a      	adds	r2, r3, #1
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005214:	e0c4      	b.n	80053a0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005218:	9300      	str	r3, [sp, #0]
 800521a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521c:	2200      	movs	r2, #0
 800521e:	496c      	ldr	r1, [pc, #432]	@ (80053d0 <HAL_I2C_Master_Receive+0x460>)
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 fa27 	bl	8005674 <I2C_WaitOnFlagUntilTimeout>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	d001      	beq.n	8005230 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e0cb      	b.n	80053c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800523e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	691a      	ldr	r2, [r3, #16]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005252:	1c5a      	adds	r2, r3, #1
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005268:	b29b      	uxth	r3, r3
 800526a:	3b01      	subs	r3, #1
 800526c:	b29a      	uxth	r2, r3
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005274:	9300      	str	r3, [sp, #0]
 8005276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005278:	2200      	movs	r2, #0
 800527a:	4955      	ldr	r1, [pc, #340]	@ (80053d0 <HAL_I2C_Master_Receive+0x460>)
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f000 f9f9 	bl	8005674 <I2C_WaitOnFlagUntilTimeout>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d001      	beq.n	800528c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e09d      	b.n	80053c8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800529a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	691a      	ldr	r2, [r3, #16]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052b8:	3b01      	subs	r3, #1
 80052ba:	b29a      	uxth	r2, r3
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	3b01      	subs	r3, #1
 80052c8:	b29a      	uxth	r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e0:	1c5a      	adds	r2, r3, #1
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f6:	b29b      	uxth	r3, r3
 80052f8:	3b01      	subs	r3, #1
 80052fa:	b29a      	uxth	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005300:	e04e      	b.n	80053a0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005302:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005304:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f000 fb5e 	bl	80059c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e058      	b.n	80053c8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	691a      	ldr	r2, [r3, #16]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005320:	b2d2      	uxtb	r2, r2
 8005322:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005328:	1c5a      	adds	r2, r3, #1
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005332:	3b01      	subs	r3, #1
 8005334:	b29a      	uxth	r2, r3
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800533e:	b29b      	uxth	r3, r3
 8005340:	3b01      	subs	r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	2b04      	cmp	r3, #4
 8005354:	d124      	bne.n	80053a0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800535a:	2b03      	cmp	r3, #3
 800535c:	d107      	bne.n	800536e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800536c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	691a      	ldr	r2, [r3, #16]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005378:	b2d2      	uxtb	r2, r2
 800537a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005380:	1c5a      	adds	r2, r3, #1
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800538a:	3b01      	subs	r3, #1
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005396:	b29b      	uxth	r3, r3
 8005398:	3b01      	subs	r3, #1
 800539a:	b29a      	uxth	r2, r3
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f47f aeb6 	bne.w	8005116 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	e000      	b.n	80053c8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80053c6:	2302      	movs	r3, #2
  }
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3728      	adds	r7, #40	@ 0x28
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	00010004 	.word	0x00010004

080053d4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b088      	sub	sp, #32
 80053d8:	af02      	add	r7, sp, #8
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	607a      	str	r2, [r7, #4]
 80053de:	603b      	str	r3, [r7, #0]
 80053e0:	460b      	mov	r3, r1
 80053e2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d006      	beq.n	80053fe <I2C_MasterRequestWrite+0x2a>
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d003      	beq.n	80053fe <I2C_MasterRequestWrite+0x2a>
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80053fc:	d108      	bne.n	8005410 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681a      	ldr	r2, [r3, #0]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	e00b      	b.n	8005428 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005414:	2b12      	cmp	r3, #18
 8005416:	d107      	bne.n	8005428 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005426:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	9300      	str	r3, [sp, #0]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f000 f91d 	bl	8005674 <I2C_WaitOnFlagUntilTimeout>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00d      	beq.n	800545c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800544a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800544e:	d103      	bne.n	8005458 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005456:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e035      	b.n	80054c8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005464:	d108      	bne.n	8005478 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005466:	897b      	ldrh	r3, [r7, #10]
 8005468:	b2db      	uxtb	r3, r3
 800546a:	461a      	mov	r2, r3
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005474:	611a      	str	r2, [r3, #16]
 8005476:	e01b      	b.n	80054b0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005478:	897b      	ldrh	r3, [r7, #10]
 800547a:	11db      	asrs	r3, r3, #7
 800547c:	b2db      	uxtb	r3, r3
 800547e:	f003 0306 	and.w	r3, r3, #6
 8005482:	b2db      	uxtb	r3, r3
 8005484:	f063 030f 	orn	r3, r3, #15
 8005488:	b2da      	uxtb	r2, r3
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	490e      	ldr	r1, [pc, #56]	@ (80054d0 <I2C_MasterRequestWrite+0xfc>)
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 f966 	bl	8005768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e010      	b.n	80054c8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054a6:	897b      	ldrh	r3, [r7, #10]
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	4907      	ldr	r1, [pc, #28]	@ (80054d4 <I2C_MasterRequestWrite+0x100>)
 80054b6:	68f8      	ldr	r0, [r7, #12]
 80054b8:	f000 f956 	bl	8005768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e000      	b.n	80054c8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3718      	adds	r7, #24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	00010008 	.word	0x00010008
 80054d4:	00010002 	.word	0x00010002

080054d8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b088      	sub	sp, #32
 80054dc:	af02      	add	r7, sp, #8
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	607a      	str	r2, [r7, #4]
 80054e2:	603b      	str	r3, [r7, #0]
 80054e4:	460b      	mov	r3, r1
 80054e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ec:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80054fc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2b08      	cmp	r3, #8
 8005502:	d006      	beq.n	8005512 <I2C_MasterRequestRead+0x3a>
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	2b01      	cmp	r3, #1
 8005508:	d003      	beq.n	8005512 <I2C_MasterRequestRead+0x3a>
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005510:	d108      	bne.n	8005524 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005520:	601a      	str	r2, [r3, #0]
 8005522:	e00b      	b.n	800553c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005528:	2b11      	cmp	r3, #17
 800552a:	d107      	bne.n	800553c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800553a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	9300      	str	r3, [sp, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 f893 	bl	8005674 <I2C_WaitOnFlagUntilTimeout>
 800554e:	4603      	mov	r3, r0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00d      	beq.n	8005570 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800555e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005562:	d103      	bne.n	800556c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800556a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e079      	b.n	8005664 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005578:	d108      	bne.n	800558c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800557a:	897b      	ldrh	r3, [r7, #10]
 800557c:	b2db      	uxtb	r3, r3
 800557e:	f043 0301 	orr.w	r3, r3, #1
 8005582:	b2da      	uxtb	r2, r3
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	611a      	str	r2, [r3, #16]
 800558a:	e05f      	b.n	800564c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800558c:	897b      	ldrh	r3, [r7, #10]
 800558e:	11db      	asrs	r3, r3, #7
 8005590:	b2db      	uxtb	r3, r3
 8005592:	f003 0306 	and.w	r3, r3, #6
 8005596:	b2db      	uxtb	r3, r3
 8005598:	f063 030f 	orn	r3, r3, #15
 800559c:	b2da      	uxtb	r2, r3
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	4930      	ldr	r1, [pc, #192]	@ (800566c <I2C_MasterRequestRead+0x194>)
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f000 f8dc 	bl	8005768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e054      	b.n	8005664 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80055ba:	897b      	ldrh	r3, [r7, #10]
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	687a      	ldr	r2, [r7, #4]
 80055c8:	4929      	ldr	r1, [pc, #164]	@ (8005670 <I2C_MasterRequestRead+0x198>)
 80055ca:	68f8      	ldr	r0, [r7, #12]
 80055cc:	f000 f8cc 	bl	8005768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e044      	b.n	8005664 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055da:	2300      	movs	r3, #0
 80055dc:	613b      	str	r3, [r7, #16]
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	695b      	ldr	r3, [r3, #20]
 80055e4:	613b      	str	r3, [r7, #16]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	613b      	str	r3, [r7, #16]
 80055ee:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055fe:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	9300      	str	r3, [sp, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800560c:	68f8      	ldr	r0, [r7, #12]
 800560e:	f000 f831 	bl	8005674 <I2C_WaitOnFlagUntilTimeout>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00d      	beq.n	8005634 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005626:	d103      	bne.n	8005630 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800562e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e017      	b.n	8005664 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005634:	897b      	ldrh	r3, [r7, #10]
 8005636:	11db      	asrs	r3, r3, #7
 8005638:	b2db      	uxtb	r3, r3
 800563a:	f003 0306 	and.w	r3, r3, #6
 800563e:	b2db      	uxtb	r3, r3
 8005640:	f063 030e 	orn	r3, r3, #14
 8005644:	b2da      	uxtb	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	4907      	ldr	r1, [pc, #28]	@ (8005670 <I2C_MasterRequestRead+0x198>)
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f000 f888 	bl	8005768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e000      	b.n	8005664 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3718      	adds	r7, #24
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	00010008 	.word	0x00010008
 8005670:	00010002 	.word	0x00010002

08005674 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	60f8      	str	r0, [r7, #12]
 800567c:	60b9      	str	r1, [r7, #8]
 800567e:	603b      	str	r3, [r7, #0]
 8005680:	4613      	mov	r3, r2
 8005682:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005684:	e048      	b.n	8005718 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800568c:	d044      	beq.n	8005718 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800568e:	f7fd fe99 	bl	80033c4 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	429a      	cmp	r2, r3
 800569c:	d302      	bcc.n	80056a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d139      	bne.n	8005718 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	0c1b      	lsrs	r3, r3, #16
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d10d      	bne.n	80056ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	43da      	mvns	r2, r3
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	4013      	ands	r3, r2
 80056ba:	b29b      	uxth	r3, r3
 80056bc:	2b00      	cmp	r3, #0
 80056be:	bf0c      	ite	eq
 80056c0:	2301      	moveq	r3, #1
 80056c2:	2300      	movne	r3, #0
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	461a      	mov	r2, r3
 80056c8:	e00c      	b.n	80056e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	43da      	mvns	r2, r3
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	4013      	ands	r3, r2
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	bf0c      	ite	eq
 80056dc:	2301      	moveq	r3, #1
 80056de:	2300      	movne	r3, #0
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	461a      	mov	r2, r3
 80056e4:	79fb      	ldrb	r3, [r7, #7]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d116      	bne.n	8005718 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005704:	f043 0220 	orr.w	r2, r3, #32
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e023      	b.n	8005760 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	0c1b      	lsrs	r3, r3, #16
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b01      	cmp	r3, #1
 8005720:	d10d      	bne.n	800573e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	43da      	mvns	r2, r3
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	4013      	ands	r3, r2
 800572e:	b29b      	uxth	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	bf0c      	ite	eq
 8005734:	2301      	moveq	r3, #1
 8005736:	2300      	movne	r3, #0
 8005738:	b2db      	uxtb	r3, r3
 800573a:	461a      	mov	r2, r3
 800573c:	e00c      	b.n	8005758 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	43da      	mvns	r2, r3
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	4013      	ands	r3, r2
 800574a:	b29b      	uxth	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	bf0c      	ite	eq
 8005750:	2301      	moveq	r3, #1
 8005752:	2300      	movne	r3, #0
 8005754:	b2db      	uxtb	r3, r3
 8005756:	461a      	mov	r2, r3
 8005758:	79fb      	ldrb	r3, [r7, #7]
 800575a:	429a      	cmp	r2, r3
 800575c:	d093      	beq.n	8005686 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3710      	adds	r7, #16
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005776:	e071      	b.n	800585c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005786:	d123      	bne.n	80057d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005796:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2220      	movs	r2, #32
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057bc:	f043 0204 	orr.w	r2, r3, #4
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2200      	movs	r2, #0
 80057c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e067      	b.n	80058a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057d6:	d041      	beq.n	800585c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057d8:	f7fd fdf4 	bl	80033c4 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	687a      	ldr	r2, [r7, #4]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d302      	bcc.n	80057ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d136      	bne.n	800585c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	0c1b      	lsrs	r3, r3, #16
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d10c      	bne.n	8005812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	43da      	mvns	r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4013      	ands	r3, r2
 8005804:	b29b      	uxth	r3, r3
 8005806:	2b00      	cmp	r3, #0
 8005808:	bf14      	ite	ne
 800580a:	2301      	movne	r3, #1
 800580c:	2300      	moveq	r3, #0
 800580e:	b2db      	uxtb	r3, r3
 8005810:	e00b      	b.n	800582a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	43da      	mvns	r2, r3
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	4013      	ands	r3, r2
 800581e:	b29b      	uxth	r3, r3
 8005820:	2b00      	cmp	r3, #0
 8005822:	bf14      	ite	ne
 8005824:	2301      	movne	r3, #1
 8005826:	2300      	moveq	r3, #0
 8005828:	b2db      	uxtb	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d016      	beq.n	800585c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2200      	movs	r2, #0
 8005832:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2220      	movs	r2, #32
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005848:	f043 0220 	orr.w	r2, r3, #32
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e021      	b.n	80058a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	0c1b      	lsrs	r3, r3, #16
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b01      	cmp	r3, #1
 8005864:	d10c      	bne.n	8005880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	695b      	ldr	r3, [r3, #20]
 800586c:	43da      	mvns	r2, r3
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	4013      	ands	r3, r2
 8005872:	b29b      	uxth	r3, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	bf14      	ite	ne
 8005878:	2301      	movne	r3, #1
 800587a:	2300      	moveq	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	e00b      	b.n	8005898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	699b      	ldr	r3, [r3, #24]
 8005886:	43da      	mvns	r2, r3
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	4013      	ands	r3, r2
 800588c:	b29b      	uxth	r3, r3
 800588e:	2b00      	cmp	r3, #0
 8005890:	bf14      	ite	ne
 8005892:	2301      	movne	r3, #1
 8005894:	2300      	moveq	r3, #0
 8005896:	b2db      	uxtb	r3, r3
 8005898:	2b00      	cmp	r3, #0
 800589a:	f47f af6d 	bne.w	8005778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058b4:	e034      	b.n	8005920 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 f8e3 	bl	8005a82 <I2C_IsAcknowledgeFailed>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e034      	b.n	8005930 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058cc:	d028      	beq.n	8005920 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ce:	f7fd fd79 	bl	80033c4 <HAL_GetTick>
 80058d2:	4602      	mov	r2, r0
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d302      	bcc.n	80058e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d11d      	bne.n	8005920 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ee:	2b80      	cmp	r3, #128	@ 0x80
 80058f0:	d016      	beq.n	8005920 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800590c:	f043 0220 	orr.w	r2, r3, #32
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e007      	b.n	8005930 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800592a:	2b80      	cmp	r3, #128	@ 0x80
 800592c:	d1c3      	bne.n	80058b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3710      	adds	r7, #16
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005944:	e034      	b.n	80059b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005946:	68f8      	ldr	r0, [r7, #12]
 8005948:	f000 f89b 	bl	8005a82 <I2C_IsAcknowledgeFailed>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e034      	b.n	80059c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800595c:	d028      	beq.n	80059b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800595e:	f7fd fd31 	bl	80033c4 <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	429a      	cmp	r2, r3
 800596c:	d302      	bcc.n	8005974 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d11d      	bne.n	80059b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	f003 0304 	and.w	r3, r3, #4
 800597e:	2b04      	cmp	r3, #4
 8005980:	d016      	beq.n	80059b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2220      	movs	r2, #32
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599c:	f043 0220 	orr.w	r2, r3, #32
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e007      	b.n	80059c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	f003 0304 	and.w	r3, r3, #4
 80059ba:	2b04      	cmp	r3, #4
 80059bc:	d1c3      	bne.n	8005946 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b084      	sub	sp, #16
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80059d4:	e049      	b.n	8005a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	2b10      	cmp	r3, #16
 80059e2:	d119      	bne.n	8005a18 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f06f 0210 	mvn.w	r2, #16
 80059ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e030      	b.n	8005a7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a18:	f7fd fcd4 	bl	80033c4 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d302      	bcc.n	8005a2e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d11d      	bne.n	8005a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a38:	2b40      	cmp	r3, #64	@ 0x40
 8005a3a:	d016      	beq.n	8005a6a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a56:	f043 0220 	orr.w	r2, r3, #32
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e007      	b.n	8005a7a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a74:	2b40      	cmp	r3, #64	@ 0x40
 8005a76:	d1ae      	bne.n	80059d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b083      	sub	sp, #12
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a98:	d11b      	bne.n	8005ad2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005aa2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005abe:	f043 0204 	orr.w	r2, r3, #4
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e000      	b.n	8005ad4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af02      	add	r7, sp, #8
 8005ae6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e101      	b.n	8005cf6 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d106      	bne.n	8005b12 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7fd fb7d 	bl	800320c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2203      	movs	r2, #3
 8005b16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b20:	d102      	bne.n	8005b28 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f001 fd7f 	bl	8007630 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6818      	ldr	r0, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	7c1a      	ldrb	r2, [r3, #16]
 8005b3a:	f88d 2000 	strb.w	r2, [sp]
 8005b3e:	3304      	adds	r3, #4
 8005b40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b42:	f001 fd11 	bl	8007568 <USB_CoreInit>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d005      	beq.n	8005b58 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2202      	movs	r2, #2
 8005b50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e0ce      	b.n	8005cf6 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2100      	movs	r1, #0
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f001 fd77 	bl	8007652 <USB_SetCurrentMode>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d005      	beq.n	8005b76 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e0bf      	b.n	8005cf6 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b76:	2300      	movs	r3, #0
 8005b78:	73fb      	strb	r3, [r7, #15]
 8005b7a:	e04a      	b.n	8005c12 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005b7c:	7bfa      	ldrb	r2, [r7, #15]
 8005b7e:	6879      	ldr	r1, [r7, #4]
 8005b80:	4613      	mov	r3, r2
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	4413      	add	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	440b      	add	r3, r1
 8005b8a:	3315      	adds	r3, #21
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b90:	7bfa      	ldrb	r2, [r7, #15]
 8005b92:	6879      	ldr	r1, [r7, #4]
 8005b94:	4613      	mov	r3, r2
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	4413      	add	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	440b      	add	r3, r1
 8005b9e:	3314      	adds	r3, #20
 8005ba0:	7bfa      	ldrb	r2, [r7, #15]
 8005ba2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005ba4:	7bfa      	ldrb	r2, [r7, #15]
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	b298      	uxth	r0, r3
 8005baa:	6879      	ldr	r1, [r7, #4]
 8005bac:	4613      	mov	r3, r2
 8005bae:	00db      	lsls	r3, r3, #3
 8005bb0:	4413      	add	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	440b      	add	r3, r1
 8005bb6:	332e      	adds	r3, #46	@ 0x2e
 8005bb8:	4602      	mov	r2, r0
 8005bba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005bbc:	7bfa      	ldrb	r2, [r7, #15]
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	4613      	mov	r3, r2
 8005bc2:	00db      	lsls	r3, r3, #3
 8005bc4:	4413      	add	r3, r2
 8005bc6:	009b      	lsls	r3, r3, #2
 8005bc8:	440b      	add	r3, r1
 8005bca:	3318      	adds	r3, #24
 8005bcc:	2200      	movs	r2, #0
 8005bce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005bd0:	7bfa      	ldrb	r2, [r7, #15]
 8005bd2:	6879      	ldr	r1, [r7, #4]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	4413      	add	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	440b      	add	r3, r1
 8005bde:	331c      	adds	r3, #28
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005be4:	7bfa      	ldrb	r2, [r7, #15]
 8005be6:	6879      	ldr	r1, [r7, #4]
 8005be8:	4613      	mov	r3, r2
 8005bea:	00db      	lsls	r3, r3, #3
 8005bec:	4413      	add	r3, r2
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	440b      	add	r3, r1
 8005bf2:	3320      	adds	r3, #32
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005bf8:	7bfa      	ldrb	r2, [r7, #15]
 8005bfa:	6879      	ldr	r1, [r7, #4]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	4413      	add	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	440b      	add	r3, r1
 8005c06:	3324      	adds	r3, #36	@ 0x24
 8005c08:	2200      	movs	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	73fb      	strb	r3, [r7, #15]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	791b      	ldrb	r3, [r3, #4]
 8005c16:	7bfa      	ldrb	r2, [r7, #15]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d3af      	bcc.n	8005b7c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	73fb      	strb	r3, [r7, #15]
 8005c20:	e044      	b.n	8005cac <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c22:	7bfa      	ldrb	r2, [r7, #15]
 8005c24:	6879      	ldr	r1, [r7, #4]
 8005c26:	4613      	mov	r3, r2
 8005c28:	00db      	lsls	r3, r3, #3
 8005c2a:	4413      	add	r3, r2
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	440b      	add	r3, r1
 8005c30:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005c34:	2200      	movs	r2, #0
 8005c36:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005c38:	7bfa      	ldrb	r2, [r7, #15]
 8005c3a:	6879      	ldr	r1, [r7, #4]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	00db      	lsls	r3, r3, #3
 8005c40:	4413      	add	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	440b      	add	r3, r1
 8005c46:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005c4a:	7bfa      	ldrb	r2, [r7, #15]
 8005c4c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005c4e:	7bfa      	ldrb	r2, [r7, #15]
 8005c50:	6879      	ldr	r1, [r7, #4]
 8005c52:	4613      	mov	r3, r2
 8005c54:	00db      	lsls	r3, r3, #3
 8005c56:	4413      	add	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	440b      	add	r3, r1
 8005c5c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005c60:	2200      	movs	r2, #0
 8005c62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005c64:	7bfa      	ldrb	r2, [r7, #15]
 8005c66:	6879      	ldr	r1, [r7, #4]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	4413      	add	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	440b      	add	r3, r1
 8005c72:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005c76:	2200      	movs	r2, #0
 8005c78:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005c7a:	7bfa      	ldrb	r2, [r7, #15]
 8005c7c:	6879      	ldr	r1, [r7, #4]
 8005c7e:	4613      	mov	r3, r2
 8005c80:	00db      	lsls	r3, r3, #3
 8005c82:	4413      	add	r3, r2
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	440b      	add	r3, r1
 8005c88:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c90:	7bfa      	ldrb	r2, [r7, #15]
 8005c92:	6879      	ldr	r1, [r7, #4]
 8005c94:	4613      	mov	r3, r2
 8005c96:	00db      	lsls	r3, r3, #3
 8005c98:	4413      	add	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	440b      	add	r3, r1
 8005c9e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	73fb      	strb	r3, [r7, #15]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	791b      	ldrb	r3, [r3, #4]
 8005cb0:	7bfa      	ldrb	r2, [r7, #15]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d3b5      	bcc.n	8005c22 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6818      	ldr	r0, [r3, #0]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	7c1a      	ldrb	r2, [r3, #16]
 8005cbe:	f88d 2000 	strb.w	r2, [sp]
 8005cc2:	3304      	adds	r3, #4
 8005cc4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005cc6:	f001 fd11 	bl	80076ec <USB_DevInit>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d005      	beq.n	8005cdc <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2202      	movs	r2, #2
 8005cd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e00c      	b.n	8005cf6 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f001 fed9 	bl	8007aa6 <USB_DevDisconnect>

  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
	...

08005d00 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b086      	sub	sp, #24
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e267      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d075      	beq.n	8005e0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d1e:	4b88      	ldr	r3, [pc, #544]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f003 030c 	and.w	r3, r3, #12
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d00c      	beq.n	8005d44 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d2a:	4b85      	ldr	r3, [pc, #532]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005d32:	2b08      	cmp	r3, #8
 8005d34:	d112      	bne.n	8005d5c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005d36:	4b82      	ldr	r3, [pc, #520]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005d3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005d42:	d10b      	bne.n	8005d5c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d44:	4b7e      	ldr	r3, [pc, #504]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d05b      	beq.n	8005e08 <HAL_RCC_OscConfig+0x108>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d157      	bne.n	8005e08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e242      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d64:	d106      	bne.n	8005d74 <HAL_RCC_OscConfig+0x74>
 8005d66:	4b76      	ldr	r3, [pc, #472]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a75      	ldr	r2, [pc, #468]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d70:	6013      	str	r3, [r2, #0]
 8005d72:	e01d      	b.n	8005db0 <HAL_RCC_OscConfig+0xb0>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d7c:	d10c      	bne.n	8005d98 <HAL_RCC_OscConfig+0x98>
 8005d7e:	4b70      	ldr	r3, [pc, #448]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a6f      	ldr	r2, [pc, #444]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005d84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d88:	6013      	str	r3, [r2, #0]
 8005d8a:	4b6d      	ldr	r3, [pc, #436]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a6c      	ldr	r2, [pc, #432]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005d90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	e00b      	b.n	8005db0 <HAL_RCC_OscConfig+0xb0>
 8005d98:	4b69      	ldr	r3, [pc, #420]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a68      	ldr	r2, [pc, #416]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005d9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005da2:	6013      	str	r3, [r2, #0]
 8005da4:	4b66      	ldr	r3, [pc, #408]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a65      	ldr	r2, [pc, #404]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005daa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005dae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d013      	beq.n	8005de0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005db8:	f7fd fb04 	bl	80033c4 <HAL_GetTick>
 8005dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dbe:	e008      	b.n	8005dd2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005dc0:	f7fd fb00 	bl	80033c4 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	2b64      	cmp	r3, #100	@ 0x64
 8005dcc:	d901      	bls.n	8005dd2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e207      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dd2:	4b5b      	ldr	r3, [pc, #364]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0f0      	beq.n	8005dc0 <HAL_RCC_OscConfig+0xc0>
 8005dde:	e014      	b.n	8005e0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005de0:	f7fd faf0 	bl	80033c4 <HAL_GetTick>
 8005de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005de6:	e008      	b.n	8005dfa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005de8:	f7fd faec 	bl	80033c4 <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	2b64      	cmp	r3, #100	@ 0x64
 8005df4:	d901      	bls.n	8005dfa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e1f3      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dfa:	4b51      	ldr	r3, [pc, #324]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1f0      	bne.n	8005de8 <HAL_RCC_OscConfig+0xe8>
 8005e06:	e000      	b.n	8005e0a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d063      	beq.n	8005ede <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e16:	4b4a      	ldr	r3, [pc, #296]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f003 030c 	and.w	r3, r3, #12
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00b      	beq.n	8005e3a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e22:	4b47      	ldr	r3, [pc, #284]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e2a:	2b08      	cmp	r3, #8
 8005e2c:	d11c      	bne.n	8005e68 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e2e:	4b44      	ldr	r3, [pc, #272]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d116      	bne.n	8005e68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e3a:	4b41      	ldr	r3, [pc, #260]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f003 0302 	and.w	r3, r3, #2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d005      	beq.n	8005e52 <HAL_RCC_OscConfig+0x152>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d001      	beq.n	8005e52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e1c7      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e52:	4b3b      	ldr	r3, [pc, #236]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	00db      	lsls	r3, r3, #3
 8005e60:	4937      	ldr	r1, [pc, #220]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005e62:	4313      	orrs	r3, r2
 8005e64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e66:	e03a      	b.n	8005ede <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d020      	beq.n	8005eb2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e70:	4b34      	ldr	r3, [pc, #208]	@ (8005f44 <HAL_RCC_OscConfig+0x244>)
 8005e72:	2201      	movs	r2, #1
 8005e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e76:	f7fd faa5 	bl	80033c4 <HAL_GetTick>
 8005e7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e7c:	e008      	b.n	8005e90 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e7e:	f7fd faa1 	bl	80033c4 <HAL_GetTick>
 8005e82:	4602      	mov	r2, r0
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	1ad3      	subs	r3, r2, r3
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d901      	bls.n	8005e90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	e1a8      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e90:	4b2b      	ldr	r3, [pc, #172]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d0f0      	beq.n	8005e7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e9c:	4b28      	ldr	r3, [pc, #160]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	4925      	ldr	r1, [pc, #148]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	600b      	str	r3, [r1, #0]
 8005eb0:	e015      	b.n	8005ede <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005eb2:	4b24      	ldr	r3, [pc, #144]	@ (8005f44 <HAL_RCC_OscConfig+0x244>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eb8:	f7fd fa84 	bl	80033c4 <HAL_GetTick>
 8005ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ebe:	e008      	b.n	8005ed2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ec0:	f7fd fa80 	bl	80033c4 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d901      	bls.n	8005ed2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	e187      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1f0      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0308 	and.w	r3, r3, #8
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d036      	beq.n	8005f58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	695b      	ldr	r3, [r3, #20]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d016      	beq.n	8005f20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ef2:	4b15      	ldr	r3, [pc, #84]	@ (8005f48 <HAL_RCC_OscConfig+0x248>)
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef8:	f7fd fa64 	bl	80033c4 <HAL_GetTick>
 8005efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005efe:	e008      	b.n	8005f12 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f00:	f7fd fa60 	bl	80033c4 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	d901      	bls.n	8005f12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005f0e:	2303      	movs	r3, #3
 8005f10:	e167      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f12:	4b0b      	ldr	r3, [pc, #44]	@ (8005f40 <HAL_RCC_OscConfig+0x240>)
 8005f14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d0f0      	beq.n	8005f00 <HAL_RCC_OscConfig+0x200>
 8005f1e:	e01b      	b.n	8005f58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f20:	4b09      	ldr	r3, [pc, #36]	@ (8005f48 <HAL_RCC_OscConfig+0x248>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f26:	f7fd fa4d 	bl	80033c4 <HAL_GetTick>
 8005f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f2c:	e00e      	b.n	8005f4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f2e:	f7fd fa49 	bl	80033c4 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	2b02      	cmp	r3, #2
 8005f3a:	d907      	bls.n	8005f4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e150      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
 8005f40:	40023800 	.word	0x40023800
 8005f44:	42470000 	.word	0x42470000
 8005f48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f4c:	4b88      	ldr	r3, [pc, #544]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8005f4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f50:	f003 0302 	and.w	r3, r3, #2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1ea      	bne.n	8005f2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0304 	and.w	r3, r3, #4
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8097 	beq.w	8006094 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f66:	2300      	movs	r3, #0
 8005f68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f6a:	4b81      	ldr	r3, [pc, #516]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d10f      	bne.n	8005f96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f76:	2300      	movs	r3, #0
 8005f78:	60bb      	str	r3, [r7, #8]
 8005f7a:	4b7d      	ldr	r3, [pc, #500]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7e:	4a7c      	ldr	r2, [pc, #496]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8005f80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f84:	6413      	str	r3, [r2, #64]	@ 0x40
 8005f86:	4b7a      	ldr	r3, [pc, #488]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8005f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f8e:	60bb      	str	r3, [r7, #8]
 8005f90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f92:	2301      	movs	r3, #1
 8005f94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f96:	4b77      	ldr	r3, [pc, #476]	@ (8006174 <HAL_RCC_OscConfig+0x474>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d118      	bne.n	8005fd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fa2:	4b74      	ldr	r3, [pc, #464]	@ (8006174 <HAL_RCC_OscConfig+0x474>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a73      	ldr	r2, [pc, #460]	@ (8006174 <HAL_RCC_OscConfig+0x474>)
 8005fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fae:	f7fd fa09 	bl	80033c4 <HAL_GetTick>
 8005fb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fb4:	e008      	b.n	8005fc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fb6:	f7fd fa05 	bl	80033c4 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	2b02      	cmp	r3, #2
 8005fc2:	d901      	bls.n	8005fc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e10c      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fc8:	4b6a      	ldr	r3, [pc, #424]	@ (8006174 <HAL_RCC_OscConfig+0x474>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d0f0      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d106      	bne.n	8005fea <HAL_RCC_OscConfig+0x2ea>
 8005fdc:	4b64      	ldr	r3, [pc, #400]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8005fde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fe0:	4a63      	ldr	r2, [pc, #396]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8005fe2:	f043 0301 	orr.w	r3, r3, #1
 8005fe6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005fe8:	e01c      	b.n	8006024 <HAL_RCC_OscConfig+0x324>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	2b05      	cmp	r3, #5
 8005ff0:	d10c      	bne.n	800600c <HAL_RCC_OscConfig+0x30c>
 8005ff2:	4b5f      	ldr	r3, [pc, #380]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8005ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ff6:	4a5e      	ldr	r2, [pc, #376]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8005ff8:	f043 0304 	orr.w	r3, r3, #4
 8005ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ffe:	4b5c      	ldr	r3, [pc, #368]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8006000:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006002:	4a5b      	ldr	r2, [pc, #364]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8006004:	f043 0301 	orr.w	r3, r3, #1
 8006008:	6713      	str	r3, [r2, #112]	@ 0x70
 800600a:	e00b      	b.n	8006024 <HAL_RCC_OscConfig+0x324>
 800600c:	4b58      	ldr	r3, [pc, #352]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 800600e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006010:	4a57      	ldr	r2, [pc, #348]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8006012:	f023 0301 	bic.w	r3, r3, #1
 8006016:	6713      	str	r3, [r2, #112]	@ 0x70
 8006018:	4b55      	ldr	r3, [pc, #340]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 800601a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800601c:	4a54      	ldr	r2, [pc, #336]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 800601e:	f023 0304 	bic.w	r3, r3, #4
 8006022:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d015      	beq.n	8006058 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800602c:	f7fd f9ca 	bl	80033c4 <HAL_GetTick>
 8006030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006032:	e00a      	b.n	800604a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006034:	f7fd f9c6 	bl	80033c4 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006042:	4293      	cmp	r3, r2
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e0cb      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800604a:	4b49      	ldr	r3, [pc, #292]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 800604c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d0ee      	beq.n	8006034 <HAL_RCC_OscConfig+0x334>
 8006056:	e014      	b.n	8006082 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006058:	f7fd f9b4 	bl	80033c4 <HAL_GetTick>
 800605c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800605e:	e00a      	b.n	8006076 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006060:	f7fd f9b0 	bl	80033c4 <HAL_GetTick>
 8006064:	4602      	mov	r2, r0
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800606e:	4293      	cmp	r3, r2
 8006070:	d901      	bls.n	8006076 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006072:	2303      	movs	r3, #3
 8006074:	e0b5      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006076:	4b3e      	ldr	r3, [pc, #248]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8006078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1ee      	bne.n	8006060 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006082:	7dfb      	ldrb	r3, [r7, #23]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d105      	bne.n	8006094 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006088:	4b39      	ldr	r3, [pc, #228]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 800608a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608c:	4a38      	ldr	r2, [pc, #224]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 800608e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006092:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	699b      	ldr	r3, [r3, #24]
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 80a1 	beq.w	80061e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800609e:	4b34      	ldr	r3, [pc, #208]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f003 030c 	and.w	r3, r3, #12
 80060a6:	2b08      	cmp	r3, #8
 80060a8:	d05c      	beq.n	8006164 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	2b02      	cmp	r3, #2
 80060b0:	d141      	bne.n	8006136 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060b2:	4b31      	ldr	r3, [pc, #196]	@ (8006178 <HAL_RCC_OscConfig+0x478>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b8:	f7fd f984 	bl	80033c4 <HAL_GetTick>
 80060bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060be:	e008      	b.n	80060d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060c0:	f7fd f980 	bl	80033c4 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e087      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060d2:	4b27      	ldr	r3, [pc, #156]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1f0      	bne.n	80060c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	69da      	ldr	r2, [r3, #28]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6a1b      	ldr	r3, [r3, #32]
 80060e6:	431a      	orrs	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ec:	019b      	lsls	r3, r3, #6
 80060ee:	431a      	orrs	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f4:	085b      	lsrs	r3, r3, #1
 80060f6:	3b01      	subs	r3, #1
 80060f8:	041b      	lsls	r3, r3, #16
 80060fa:	431a      	orrs	r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006100:	061b      	lsls	r3, r3, #24
 8006102:	491b      	ldr	r1, [pc, #108]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8006104:	4313      	orrs	r3, r2
 8006106:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006108:	4b1b      	ldr	r3, [pc, #108]	@ (8006178 <HAL_RCC_OscConfig+0x478>)
 800610a:	2201      	movs	r2, #1
 800610c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800610e:	f7fd f959 	bl	80033c4 <HAL_GetTick>
 8006112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006114:	e008      	b.n	8006128 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006116:	f7fd f955 	bl	80033c4 <HAL_GetTick>
 800611a:	4602      	mov	r2, r0
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	1ad3      	subs	r3, r2, r3
 8006120:	2b02      	cmp	r3, #2
 8006122:	d901      	bls.n	8006128 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006124:	2303      	movs	r3, #3
 8006126:	e05c      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006128:	4b11      	ldr	r3, [pc, #68]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006130:	2b00      	cmp	r3, #0
 8006132:	d0f0      	beq.n	8006116 <HAL_RCC_OscConfig+0x416>
 8006134:	e054      	b.n	80061e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006136:	4b10      	ldr	r3, [pc, #64]	@ (8006178 <HAL_RCC_OscConfig+0x478>)
 8006138:	2200      	movs	r2, #0
 800613a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800613c:	f7fd f942 	bl	80033c4 <HAL_GetTick>
 8006140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006142:	e008      	b.n	8006156 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006144:	f7fd f93e 	bl	80033c4 <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	2b02      	cmp	r3, #2
 8006150:	d901      	bls.n	8006156 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e045      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006156:	4b06      	ldr	r3, [pc, #24]	@ (8006170 <HAL_RCC_OscConfig+0x470>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1f0      	bne.n	8006144 <HAL_RCC_OscConfig+0x444>
 8006162:	e03d      	b.n	80061e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	2b01      	cmp	r3, #1
 800616a:	d107      	bne.n	800617c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e038      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
 8006170:	40023800 	.word	0x40023800
 8006174:	40007000 	.word	0x40007000
 8006178:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800617c:	4b1b      	ldr	r3, [pc, #108]	@ (80061ec <HAL_RCC_OscConfig+0x4ec>)
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d028      	beq.n	80061dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006194:	429a      	cmp	r2, r3
 8006196:	d121      	bne.n	80061dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d11a      	bne.n	80061dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80061ac:	4013      	ands	r3, r2
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80061b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d111      	bne.n	80061dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c2:	085b      	lsrs	r3, r3, #1
 80061c4:	3b01      	subs	r3, #1
 80061c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d107      	bne.n	80061dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80061d8:	429a      	cmp	r2, r3
 80061da:	d001      	beq.n	80061e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80061dc:	2301      	movs	r3, #1
 80061de:	e000      	b.n	80061e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3718      	adds	r7, #24
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	40023800 	.word	0x40023800

080061f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d101      	bne.n	8006204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e0cc      	b.n	800639e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006204:	4b68      	ldr	r3, [pc, #416]	@ (80063a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 0307 	and.w	r3, r3, #7
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	429a      	cmp	r2, r3
 8006210:	d90c      	bls.n	800622c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006212:	4b65      	ldr	r3, [pc, #404]	@ (80063a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	b2d2      	uxtb	r2, r2
 8006218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800621a:	4b63      	ldr	r3, [pc, #396]	@ (80063a8 <HAL_RCC_ClockConfig+0x1b8>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0307 	and.w	r3, r3, #7
 8006222:	683a      	ldr	r2, [r7, #0]
 8006224:	429a      	cmp	r2, r3
 8006226:	d001      	beq.n	800622c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006228:	2301      	movs	r3, #1
 800622a:	e0b8      	b.n	800639e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0302 	and.w	r3, r3, #2
 8006234:	2b00      	cmp	r3, #0
 8006236:	d020      	beq.n	800627a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0304 	and.w	r3, r3, #4
 8006240:	2b00      	cmp	r3, #0
 8006242:	d005      	beq.n	8006250 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006244:	4b59      	ldr	r3, [pc, #356]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	4a58      	ldr	r2, [pc, #352]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 800624a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800624e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0308 	and.w	r3, r3, #8
 8006258:	2b00      	cmp	r3, #0
 800625a:	d005      	beq.n	8006268 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800625c:	4b53      	ldr	r3, [pc, #332]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 800625e:	689b      	ldr	r3, [r3, #8]
 8006260:	4a52      	ldr	r2, [pc, #328]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 8006262:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006266:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006268:	4b50      	ldr	r3, [pc, #320]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	494d      	ldr	r1, [pc, #308]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 8006276:	4313      	orrs	r3, r2
 8006278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d044      	beq.n	8006310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	2b01      	cmp	r3, #1
 800628c:	d107      	bne.n	800629e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800628e:	4b47      	ldr	r3, [pc, #284]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d119      	bne.n	80062ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	e07f      	b.n	800639e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	2b02      	cmp	r3, #2
 80062a4:	d003      	beq.n	80062ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80062aa:	2b03      	cmp	r3, #3
 80062ac:	d107      	bne.n	80062be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062ae:	4b3f      	ldr	r3, [pc, #252]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d109      	bne.n	80062ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e06f      	b.n	800639e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062be:	4b3b      	ldr	r3, [pc, #236]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0302 	and.w	r3, r3, #2
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e067      	b.n	800639e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062ce:	4b37      	ldr	r3, [pc, #220]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	f023 0203 	bic.w	r2, r3, #3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	4934      	ldr	r1, [pc, #208]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 80062dc:	4313      	orrs	r3, r2
 80062de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80062e0:	f7fd f870 	bl	80033c4 <HAL_GetTick>
 80062e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062e6:	e00a      	b.n	80062fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062e8:	f7fd f86c 	bl	80033c4 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d901      	bls.n	80062fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e04f      	b.n	800639e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062fe:	4b2b      	ldr	r3, [pc, #172]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f003 020c 	and.w	r2, r3, #12
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	429a      	cmp	r2, r3
 800630e:	d1eb      	bne.n	80062e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006310:	4b25      	ldr	r3, [pc, #148]	@ (80063a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0307 	and.w	r3, r3, #7
 8006318:	683a      	ldr	r2, [r7, #0]
 800631a:	429a      	cmp	r2, r3
 800631c:	d20c      	bcs.n	8006338 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800631e:	4b22      	ldr	r3, [pc, #136]	@ (80063a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	b2d2      	uxtb	r2, r2
 8006324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006326:	4b20      	ldr	r3, [pc, #128]	@ (80063a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f003 0307 	and.w	r3, r3, #7
 800632e:	683a      	ldr	r2, [r7, #0]
 8006330:	429a      	cmp	r2, r3
 8006332:	d001      	beq.n	8006338 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	e032      	b.n	800639e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 0304 	and.w	r3, r3, #4
 8006340:	2b00      	cmp	r3, #0
 8006342:	d008      	beq.n	8006356 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006344:	4b19      	ldr	r3, [pc, #100]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	4916      	ldr	r1, [pc, #88]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 8006352:	4313      	orrs	r3, r2
 8006354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f003 0308 	and.w	r3, r3, #8
 800635e:	2b00      	cmp	r3, #0
 8006360:	d009      	beq.n	8006376 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006362:	4b12      	ldr	r3, [pc, #72]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	490e      	ldr	r1, [pc, #56]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 8006372:	4313      	orrs	r3, r2
 8006374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006376:	f000 f821 	bl	80063bc <HAL_RCC_GetSysClockFreq>
 800637a:	4602      	mov	r2, r0
 800637c:	4b0b      	ldr	r3, [pc, #44]	@ (80063ac <HAL_RCC_ClockConfig+0x1bc>)
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	091b      	lsrs	r3, r3, #4
 8006382:	f003 030f 	and.w	r3, r3, #15
 8006386:	490a      	ldr	r1, [pc, #40]	@ (80063b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006388:	5ccb      	ldrb	r3, [r1, r3]
 800638a:	fa22 f303 	lsr.w	r3, r2, r3
 800638e:	4a09      	ldr	r2, [pc, #36]	@ (80063b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006392:	4b09      	ldr	r3, [pc, #36]	@ (80063b8 <HAL_RCC_ClockConfig+0x1c8>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4618      	mov	r0, r3
 8006398:	f7fc ffd0 	bl	800333c <HAL_InitTick>

  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
 80063a6:	bf00      	nop
 80063a8:	40023c00 	.word	0x40023c00
 80063ac:	40023800 	.word	0x40023800
 80063b0:	0800aac8 	.word	0x0800aac8
 80063b4:	20000040 	.word	0x20000040
 80063b8:	20000044 	.word	0x20000044

080063bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063c0:	b094      	sub	sp, #80	@ 0x50
 80063c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80063c8:	2300      	movs	r3, #0
 80063ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80063d0:	2300      	movs	r3, #0
 80063d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80063d4:	4b79      	ldr	r3, [pc, #484]	@ (80065bc <HAL_RCC_GetSysClockFreq+0x200>)
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f003 030c 	and.w	r3, r3, #12
 80063dc:	2b08      	cmp	r3, #8
 80063de:	d00d      	beq.n	80063fc <HAL_RCC_GetSysClockFreq+0x40>
 80063e0:	2b08      	cmp	r3, #8
 80063e2:	f200 80e1 	bhi.w	80065a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <HAL_RCC_GetSysClockFreq+0x34>
 80063ea:	2b04      	cmp	r3, #4
 80063ec:	d003      	beq.n	80063f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80063ee:	e0db      	b.n	80065a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063f0:	4b73      	ldr	r3, [pc, #460]	@ (80065c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80063f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063f4:	e0db      	b.n	80065ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063f6:	4b73      	ldr	r3, [pc, #460]	@ (80065c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80063f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80063fa:	e0d8      	b.n	80065ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063fc:	4b6f      	ldr	r3, [pc, #444]	@ (80065bc <HAL_RCC_GetSysClockFreq+0x200>)
 80063fe:	685b      	ldr	r3, [r3, #4]
 8006400:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006404:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006406:	4b6d      	ldr	r3, [pc, #436]	@ (80065bc <HAL_RCC_GetSysClockFreq+0x200>)
 8006408:	685b      	ldr	r3, [r3, #4]
 800640a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d063      	beq.n	80064da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006412:	4b6a      	ldr	r3, [pc, #424]	@ (80065bc <HAL_RCC_GetSysClockFreq+0x200>)
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	099b      	lsrs	r3, r3, #6
 8006418:	2200      	movs	r2, #0
 800641a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800641c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800641e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006424:	633b      	str	r3, [r7, #48]	@ 0x30
 8006426:	2300      	movs	r3, #0
 8006428:	637b      	str	r3, [r7, #52]	@ 0x34
 800642a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800642e:	4622      	mov	r2, r4
 8006430:	462b      	mov	r3, r5
 8006432:	f04f 0000 	mov.w	r0, #0
 8006436:	f04f 0100 	mov.w	r1, #0
 800643a:	0159      	lsls	r1, r3, #5
 800643c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006440:	0150      	lsls	r0, r2, #5
 8006442:	4602      	mov	r2, r0
 8006444:	460b      	mov	r3, r1
 8006446:	4621      	mov	r1, r4
 8006448:	1a51      	subs	r1, r2, r1
 800644a:	6139      	str	r1, [r7, #16]
 800644c:	4629      	mov	r1, r5
 800644e:	eb63 0301 	sbc.w	r3, r3, r1
 8006452:	617b      	str	r3, [r7, #20]
 8006454:	f04f 0200 	mov.w	r2, #0
 8006458:	f04f 0300 	mov.w	r3, #0
 800645c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006460:	4659      	mov	r1, fp
 8006462:	018b      	lsls	r3, r1, #6
 8006464:	4651      	mov	r1, sl
 8006466:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800646a:	4651      	mov	r1, sl
 800646c:	018a      	lsls	r2, r1, #6
 800646e:	4651      	mov	r1, sl
 8006470:	ebb2 0801 	subs.w	r8, r2, r1
 8006474:	4659      	mov	r1, fp
 8006476:	eb63 0901 	sbc.w	r9, r3, r1
 800647a:	f04f 0200 	mov.w	r2, #0
 800647e:	f04f 0300 	mov.w	r3, #0
 8006482:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006486:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800648a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800648e:	4690      	mov	r8, r2
 8006490:	4699      	mov	r9, r3
 8006492:	4623      	mov	r3, r4
 8006494:	eb18 0303 	adds.w	r3, r8, r3
 8006498:	60bb      	str	r3, [r7, #8]
 800649a:	462b      	mov	r3, r5
 800649c:	eb49 0303 	adc.w	r3, r9, r3
 80064a0:	60fb      	str	r3, [r7, #12]
 80064a2:	f04f 0200 	mov.w	r2, #0
 80064a6:	f04f 0300 	mov.w	r3, #0
 80064aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80064ae:	4629      	mov	r1, r5
 80064b0:	024b      	lsls	r3, r1, #9
 80064b2:	4621      	mov	r1, r4
 80064b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80064b8:	4621      	mov	r1, r4
 80064ba:	024a      	lsls	r2, r1, #9
 80064bc:	4610      	mov	r0, r2
 80064be:	4619      	mov	r1, r3
 80064c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064c2:	2200      	movs	r2, #0
 80064c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80064cc:	f7fa fb8c 	bl	8000be8 <__aeabi_uldivmod>
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	4613      	mov	r3, r2
 80064d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80064d8:	e058      	b.n	800658c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064da:	4b38      	ldr	r3, [pc, #224]	@ (80065bc <HAL_RCC_GetSysClockFreq+0x200>)
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	099b      	lsrs	r3, r3, #6
 80064e0:	2200      	movs	r2, #0
 80064e2:	4618      	mov	r0, r3
 80064e4:	4611      	mov	r1, r2
 80064e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80064ea:	623b      	str	r3, [r7, #32]
 80064ec:	2300      	movs	r3, #0
 80064ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80064f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80064f4:	4642      	mov	r2, r8
 80064f6:	464b      	mov	r3, r9
 80064f8:	f04f 0000 	mov.w	r0, #0
 80064fc:	f04f 0100 	mov.w	r1, #0
 8006500:	0159      	lsls	r1, r3, #5
 8006502:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006506:	0150      	lsls	r0, r2, #5
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	4641      	mov	r1, r8
 800650e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006512:	4649      	mov	r1, r9
 8006514:	eb63 0b01 	sbc.w	fp, r3, r1
 8006518:	f04f 0200 	mov.w	r2, #0
 800651c:	f04f 0300 	mov.w	r3, #0
 8006520:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006524:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006528:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800652c:	ebb2 040a 	subs.w	r4, r2, sl
 8006530:	eb63 050b 	sbc.w	r5, r3, fp
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	f04f 0300 	mov.w	r3, #0
 800653c:	00eb      	lsls	r3, r5, #3
 800653e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006542:	00e2      	lsls	r2, r4, #3
 8006544:	4614      	mov	r4, r2
 8006546:	461d      	mov	r5, r3
 8006548:	4643      	mov	r3, r8
 800654a:	18e3      	adds	r3, r4, r3
 800654c:	603b      	str	r3, [r7, #0]
 800654e:	464b      	mov	r3, r9
 8006550:	eb45 0303 	adc.w	r3, r5, r3
 8006554:	607b      	str	r3, [r7, #4]
 8006556:	f04f 0200 	mov.w	r2, #0
 800655a:	f04f 0300 	mov.w	r3, #0
 800655e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006562:	4629      	mov	r1, r5
 8006564:	028b      	lsls	r3, r1, #10
 8006566:	4621      	mov	r1, r4
 8006568:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800656c:	4621      	mov	r1, r4
 800656e:	028a      	lsls	r2, r1, #10
 8006570:	4610      	mov	r0, r2
 8006572:	4619      	mov	r1, r3
 8006574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006576:	2200      	movs	r2, #0
 8006578:	61bb      	str	r3, [r7, #24]
 800657a:	61fa      	str	r2, [r7, #28]
 800657c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006580:	f7fa fb32 	bl	8000be8 <__aeabi_uldivmod>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	4613      	mov	r3, r2
 800658a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800658c:	4b0b      	ldr	r3, [pc, #44]	@ (80065bc <HAL_RCC_GetSysClockFreq+0x200>)
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	0c1b      	lsrs	r3, r3, #16
 8006592:	f003 0303 	and.w	r3, r3, #3
 8006596:	3301      	adds	r3, #1
 8006598:	005b      	lsls	r3, r3, #1
 800659a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800659c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800659e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065a6:	e002      	b.n	80065ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80065a8:	4b05      	ldr	r3, [pc, #20]	@ (80065c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80065aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80065ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80065ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3750      	adds	r7, #80	@ 0x50
 80065b4:	46bd      	mov	sp, r7
 80065b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065ba:	bf00      	nop
 80065bc:	40023800 	.word	0x40023800
 80065c0:	00f42400 	.word	0x00f42400
 80065c4:	007a1200 	.word	0x007a1200

080065c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065c8:	b480      	push	{r7}
 80065ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065cc:	4b03      	ldr	r3, [pc, #12]	@ (80065dc <HAL_RCC_GetHCLKFreq+0x14>)
 80065ce:	681b      	ldr	r3, [r3, #0]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	46bd      	mov	sp, r7
 80065d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d8:	4770      	bx	lr
 80065da:	bf00      	nop
 80065dc:	20000040 	.word	0x20000040

080065e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80065e4:	f7ff fff0 	bl	80065c8 <HAL_RCC_GetHCLKFreq>
 80065e8:	4602      	mov	r2, r0
 80065ea:	4b05      	ldr	r3, [pc, #20]	@ (8006600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	0a9b      	lsrs	r3, r3, #10
 80065f0:	f003 0307 	and.w	r3, r3, #7
 80065f4:	4903      	ldr	r1, [pc, #12]	@ (8006604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065f6:	5ccb      	ldrb	r3, [r1, r3]
 80065f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	40023800 	.word	0x40023800
 8006604:	0800aad8 	.word	0x0800aad8

08006608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800660c:	f7ff ffdc 	bl	80065c8 <HAL_RCC_GetHCLKFreq>
 8006610:	4602      	mov	r2, r0
 8006612:	4b05      	ldr	r3, [pc, #20]	@ (8006628 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	0b5b      	lsrs	r3, r3, #13
 8006618:	f003 0307 	and.w	r3, r3, #7
 800661c:	4903      	ldr	r1, [pc, #12]	@ (800662c <HAL_RCC_GetPCLK2Freq+0x24>)
 800661e:	5ccb      	ldrb	r3, [r1, r3]
 8006620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006624:	4618      	mov	r0, r3
 8006626:	bd80      	pop	{r7, pc}
 8006628:	40023800 	.word	0x40023800
 800662c:	0800aad8 	.word	0x0800aad8

08006630 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e041      	b.n	80066c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d106      	bne.n	800665c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7fc fc66 	bl	8002f28 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2202      	movs	r2, #2
 8006660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3304      	adds	r3, #4
 800666c:	4619      	mov	r1, r3
 800666e:	4610      	mov	r0, r2
 8006670:	f000 f9b8 	bl	80069e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2201      	movs	r2, #1
 8006698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
	...

080066d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
 80066d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d109      	bne.n	80066f4 <HAL_TIM_PWM_Start+0x24>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	bf14      	ite	ne
 80066ec:	2301      	movne	r3, #1
 80066ee:	2300      	moveq	r3, #0
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	e022      	b.n	800673a <HAL_TIM_PWM_Start+0x6a>
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	2b04      	cmp	r3, #4
 80066f8:	d109      	bne.n	800670e <HAL_TIM_PWM_Start+0x3e>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b01      	cmp	r3, #1
 8006704:	bf14      	ite	ne
 8006706:	2301      	movne	r3, #1
 8006708:	2300      	moveq	r3, #0
 800670a:	b2db      	uxtb	r3, r3
 800670c:	e015      	b.n	800673a <HAL_TIM_PWM_Start+0x6a>
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2b08      	cmp	r3, #8
 8006712:	d109      	bne.n	8006728 <HAL_TIM_PWM_Start+0x58>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800671a:	b2db      	uxtb	r3, r3
 800671c:	2b01      	cmp	r3, #1
 800671e:	bf14      	ite	ne
 8006720:	2301      	movne	r3, #1
 8006722:	2300      	moveq	r3, #0
 8006724:	b2db      	uxtb	r3, r3
 8006726:	e008      	b.n	800673a <HAL_TIM_PWM_Start+0x6a>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b01      	cmp	r3, #1
 8006732:	bf14      	ite	ne
 8006734:	2301      	movne	r3, #1
 8006736:	2300      	moveq	r3, #0
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e07c      	b.n	800683c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d104      	bne.n	8006752 <HAL_TIM_PWM_Start+0x82>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2202      	movs	r2, #2
 800674c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006750:	e013      	b.n	800677a <HAL_TIM_PWM_Start+0xaa>
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2b04      	cmp	r3, #4
 8006756:	d104      	bne.n	8006762 <HAL_TIM_PWM_Start+0x92>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006760:	e00b      	b.n	800677a <HAL_TIM_PWM_Start+0xaa>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b08      	cmp	r3, #8
 8006766:	d104      	bne.n	8006772 <HAL_TIM_PWM_Start+0xa2>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006770:	e003      	b.n	800677a <HAL_TIM_PWM_Start+0xaa>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2202      	movs	r2, #2
 8006776:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2201      	movs	r2, #1
 8006780:	6839      	ldr	r1, [r7, #0]
 8006782:	4618      	mov	r0, r3
 8006784:	f000 fb8a 	bl	8006e9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a2d      	ldr	r2, [pc, #180]	@ (8006844 <HAL_TIM_PWM_Start+0x174>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d004      	beq.n	800679c <HAL_TIM_PWM_Start+0xcc>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a2c      	ldr	r2, [pc, #176]	@ (8006848 <HAL_TIM_PWM_Start+0x178>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d101      	bne.n	80067a0 <HAL_TIM_PWM_Start+0xd0>
 800679c:	2301      	movs	r3, #1
 800679e:	e000      	b.n	80067a2 <HAL_TIM_PWM_Start+0xd2>
 80067a0:	2300      	movs	r3, #0
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d007      	beq.n	80067b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80067b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a22      	ldr	r2, [pc, #136]	@ (8006844 <HAL_TIM_PWM_Start+0x174>)
 80067bc:	4293      	cmp	r3, r2
 80067be:	d022      	beq.n	8006806 <HAL_TIM_PWM_Start+0x136>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067c8:	d01d      	beq.n	8006806 <HAL_TIM_PWM_Start+0x136>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	4a1f      	ldr	r2, [pc, #124]	@ (800684c <HAL_TIM_PWM_Start+0x17c>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d018      	beq.n	8006806 <HAL_TIM_PWM_Start+0x136>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006850 <HAL_TIM_PWM_Start+0x180>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d013      	beq.n	8006806 <HAL_TIM_PWM_Start+0x136>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a1c      	ldr	r2, [pc, #112]	@ (8006854 <HAL_TIM_PWM_Start+0x184>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d00e      	beq.n	8006806 <HAL_TIM_PWM_Start+0x136>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a16      	ldr	r2, [pc, #88]	@ (8006848 <HAL_TIM_PWM_Start+0x178>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d009      	beq.n	8006806 <HAL_TIM_PWM_Start+0x136>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a18      	ldr	r2, [pc, #96]	@ (8006858 <HAL_TIM_PWM_Start+0x188>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d004      	beq.n	8006806 <HAL_TIM_PWM_Start+0x136>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a16      	ldr	r2, [pc, #88]	@ (800685c <HAL_TIM_PWM_Start+0x18c>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d111      	bne.n	800682a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	f003 0307 	and.w	r3, r3, #7
 8006810:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2b06      	cmp	r3, #6
 8006816:	d010      	beq.n	800683a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f042 0201 	orr.w	r2, r2, #1
 8006826:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006828:	e007      	b.n	800683a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f042 0201 	orr.w	r2, r2, #1
 8006838:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3710      	adds	r7, #16
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	40010000 	.word	0x40010000
 8006848:	40010400 	.word	0x40010400
 800684c:	40000400 	.word	0x40000400
 8006850:	40000800 	.word	0x40000800
 8006854:	40000c00 	.word	0x40000c00
 8006858:	40014000 	.word	0x40014000
 800685c:	40001800 	.word	0x40001800

08006860 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800686c:	2300      	movs	r3, #0
 800686e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006876:	2b01      	cmp	r3, #1
 8006878:	d101      	bne.n	800687e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800687a:	2302      	movs	r3, #2
 800687c:	e0ae      	b.n	80069dc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2b0c      	cmp	r3, #12
 800688a:	f200 809f 	bhi.w	80069cc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800688e:	a201      	add	r2, pc, #4	@ (adr r2, 8006894 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006894:	080068c9 	.word	0x080068c9
 8006898:	080069cd 	.word	0x080069cd
 800689c:	080069cd 	.word	0x080069cd
 80068a0:	080069cd 	.word	0x080069cd
 80068a4:	08006909 	.word	0x08006909
 80068a8:	080069cd 	.word	0x080069cd
 80068ac:	080069cd 	.word	0x080069cd
 80068b0:	080069cd 	.word	0x080069cd
 80068b4:	0800694b 	.word	0x0800694b
 80068b8:	080069cd 	.word	0x080069cd
 80068bc:	080069cd 	.word	0x080069cd
 80068c0:	080069cd 	.word	0x080069cd
 80068c4:	0800698b 	.word	0x0800698b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68b9      	ldr	r1, [r7, #8]
 80068ce:	4618      	mov	r0, r3
 80068d0:	f000 f934 	bl	8006b3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	699a      	ldr	r2, [r3, #24]
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f042 0208 	orr.w	r2, r2, #8
 80068e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	699a      	ldr	r2, [r3, #24]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f022 0204 	bic.w	r2, r2, #4
 80068f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6999      	ldr	r1, [r3, #24]
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	691a      	ldr	r2, [r3, #16]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	430a      	orrs	r2, r1
 8006904:	619a      	str	r2, [r3, #24]
      break;
 8006906:	e064      	b.n	80069d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68b9      	ldr	r1, [r7, #8]
 800690e:	4618      	mov	r0, r3
 8006910:	f000 f984 	bl	8006c1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	699a      	ldr	r2, [r3, #24]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006922:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	699a      	ldr	r2, [r3, #24]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006932:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6999      	ldr	r1, [r3, #24]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	021a      	lsls	r2, r3, #8
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	430a      	orrs	r2, r1
 8006946:	619a      	str	r2, [r3, #24]
      break;
 8006948:	e043      	b.n	80069d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	68b9      	ldr	r1, [r7, #8]
 8006950:	4618      	mov	r0, r3
 8006952:	f000 f9d9 	bl	8006d08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	69da      	ldr	r2, [r3, #28]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f042 0208 	orr.w	r2, r2, #8
 8006964:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	69da      	ldr	r2, [r3, #28]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 0204 	bic.w	r2, r2, #4
 8006974:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	69d9      	ldr	r1, [r3, #28]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	691a      	ldr	r2, [r3, #16]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	61da      	str	r2, [r3, #28]
      break;
 8006988:	e023      	b.n	80069d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	68b9      	ldr	r1, [r7, #8]
 8006990:	4618      	mov	r0, r3
 8006992:	f000 fa2d 	bl	8006df0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	69da      	ldr	r2, [r3, #28]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80069a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	69da      	ldr	r2, [r3, #28]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80069b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	69d9      	ldr	r1, [r3, #28]
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	021a      	lsls	r2, r3, #8
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	61da      	str	r2, [r3, #28]
      break;
 80069ca:	e002      	b.n	80069d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	75fb      	strb	r3, [r7, #23]
      break;
 80069d0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80069da:	7dfb      	ldrb	r3, [r7, #23]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3718      	adds	r7, #24
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a46      	ldr	r2, [pc, #280]	@ (8006b10 <TIM_Base_SetConfig+0x12c>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d013      	beq.n	8006a24 <TIM_Base_SetConfig+0x40>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a02:	d00f      	beq.n	8006a24 <TIM_Base_SetConfig+0x40>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a43      	ldr	r2, [pc, #268]	@ (8006b14 <TIM_Base_SetConfig+0x130>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d00b      	beq.n	8006a24 <TIM_Base_SetConfig+0x40>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	4a42      	ldr	r2, [pc, #264]	@ (8006b18 <TIM_Base_SetConfig+0x134>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d007      	beq.n	8006a24 <TIM_Base_SetConfig+0x40>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	4a41      	ldr	r2, [pc, #260]	@ (8006b1c <TIM_Base_SetConfig+0x138>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d003      	beq.n	8006a24 <TIM_Base_SetConfig+0x40>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a40      	ldr	r2, [pc, #256]	@ (8006b20 <TIM_Base_SetConfig+0x13c>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d108      	bne.n	8006a36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	4313      	orrs	r3, r2
 8006a34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	4a35      	ldr	r2, [pc, #212]	@ (8006b10 <TIM_Base_SetConfig+0x12c>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d02b      	beq.n	8006a96 <TIM_Base_SetConfig+0xb2>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a44:	d027      	beq.n	8006a96 <TIM_Base_SetConfig+0xb2>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	4a32      	ldr	r2, [pc, #200]	@ (8006b14 <TIM_Base_SetConfig+0x130>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d023      	beq.n	8006a96 <TIM_Base_SetConfig+0xb2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	4a31      	ldr	r2, [pc, #196]	@ (8006b18 <TIM_Base_SetConfig+0x134>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d01f      	beq.n	8006a96 <TIM_Base_SetConfig+0xb2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a30      	ldr	r2, [pc, #192]	@ (8006b1c <TIM_Base_SetConfig+0x138>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d01b      	beq.n	8006a96 <TIM_Base_SetConfig+0xb2>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a2f      	ldr	r2, [pc, #188]	@ (8006b20 <TIM_Base_SetConfig+0x13c>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d017      	beq.n	8006a96 <TIM_Base_SetConfig+0xb2>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a2e      	ldr	r2, [pc, #184]	@ (8006b24 <TIM_Base_SetConfig+0x140>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d013      	beq.n	8006a96 <TIM_Base_SetConfig+0xb2>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a2d      	ldr	r2, [pc, #180]	@ (8006b28 <TIM_Base_SetConfig+0x144>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d00f      	beq.n	8006a96 <TIM_Base_SetConfig+0xb2>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a2c      	ldr	r2, [pc, #176]	@ (8006b2c <TIM_Base_SetConfig+0x148>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d00b      	beq.n	8006a96 <TIM_Base_SetConfig+0xb2>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a2b      	ldr	r2, [pc, #172]	@ (8006b30 <TIM_Base_SetConfig+0x14c>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d007      	beq.n	8006a96 <TIM_Base_SetConfig+0xb2>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a2a      	ldr	r2, [pc, #168]	@ (8006b34 <TIM_Base_SetConfig+0x150>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d003      	beq.n	8006a96 <TIM_Base_SetConfig+0xb2>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a29      	ldr	r2, [pc, #164]	@ (8006b38 <TIM_Base_SetConfig+0x154>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d108      	bne.n	8006aa8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	695b      	ldr	r3, [r3, #20]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	689a      	ldr	r2, [r3, #8]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	4a10      	ldr	r2, [pc, #64]	@ (8006b10 <TIM_Base_SetConfig+0x12c>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d003      	beq.n	8006adc <TIM_Base_SetConfig+0xf8>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	4a12      	ldr	r2, [pc, #72]	@ (8006b20 <TIM_Base_SetConfig+0x13c>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d103      	bne.n	8006ae4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	691a      	ldr	r2, [r3, #16]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d105      	bne.n	8006b02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	f023 0201 	bic.w	r2, r3, #1
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	611a      	str	r2, [r3, #16]
  }
}
 8006b02:	bf00      	nop
 8006b04:	3714      	adds	r7, #20
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	40010000 	.word	0x40010000
 8006b14:	40000400 	.word	0x40000400
 8006b18:	40000800 	.word	0x40000800
 8006b1c:	40000c00 	.word	0x40000c00
 8006b20:	40010400 	.word	0x40010400
 8006b24:	40014000 	.word	0x40014000
 8006b28:	40014400 	.word	0x40014400
 8006b2c:	40014800 	.word	0x40014800
 8006b30:	40001800 	.word	0x40001800
 8006b34:	40001c00 	.word	0x40001c00
 8006b38:	40002000 	.word	0x40002000

08006b3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a1b      	ldr	r3, [r3, #32]
 8006b4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a1b      	ldr	r3, [r3, #32]
 8006b50:	f023 0201 	bic.w	r2, r3, #1
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f023 0303 	bic.w	r3, r3, #3
 8006b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	68fa      	ldr	r2, [r7, #12]
 8006b7a:	4313      	orrs	r3, r2
 8006b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f023 0302 	bic.w	r3, r3, #2
 8006b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	697a      	ldr	r2, [r7, #20]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a20      	ldr	r2, [pc, #128]	@ (8006c14 <TIM_OC1_SetConfig+0xd8>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d003      	beq.n	8006ba0 <TIM_OC1_SetConfig+0x64>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a1f      	ldr	r2, [pc, #124]	@ (8006c18 <TIM_OC1_SetConfig+0xdc>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d10c      	bne.n	8006bba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f023 0308 	bic.w	r3, r3, #8
 8006ba6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f023 0304 	bic.w	r3, r3, #4
 8006bb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a15      	ldr	r2, [pc, #84]	@ (8006c14 <TIM_OC1_SetConfig+0xd8>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d003      	beq.n	8006bca <TIM_OC1_SetConfig+0x8e>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a14      	ldr	r2, [pc, #80]	@ (8006c18 <TIM_OC1_SetConfig+0xdc>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d111      	bne.n	8006bee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	693a      	ldr	r2, [r7, #16]
 8006be0:	4313      	orrs	r3, r2
 8006be2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	685a      	ldr	r2, [r3, #4]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	621a      	str	r2, [r3, #32]
}
 8006c08:	bf00      	nop
 8006c0a:	371c      	adds	r7, #28
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr
 8006c14:	40010000 	.word	0x40010000
 8006c18:	40010400 	.word	0x40010400

08006c1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b087      	sub	sp, #28
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6a1b      	ldr	r3, [r3, #32]
 8006c30:	f023 0210 	bic.w	r2, r3, #16
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	699b      	ldr	r3, [r3, #24]
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	021b      	lsls	r3, r3, #8
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f023 0320 	bic.w	r3, r3, #32
 8006c66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	011b      	lsls	r3, r3, #4
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a22      	ldr	r2, [pc, #136]	@ (8006d00 <TIM_OC2_SetConfig+0xe4>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d003      	beq.n	8006c84 <TIM_OC2_SetConfig+0x68>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a21      	ldr	r2, [pc, #132]	@ (8006d04 <TIM_OC2_SetConfig+0xe8>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d10d      	bne.n	8006ca0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	011b      	lsls	r3, r3, #4
 8006c92:	697a      	ldr	r2, [r7, #20]
 8006c94:	4313      	orrs	r3, r2
 8006c96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a17      	ldr	r2, [pc, #92]	@ (8006d00 <TIM_OC2_SetConfig+0xe4>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d003      	beq.n	8006cb0 <TIM_OC2_SetConfig+0x94>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a16      	ldr	r2, [pc, #88]	@ (8006d04 <TIM_OC2_SetConfig+0xe8>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d113      	bne.n	8006cd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006cb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	695b      	ldr	r3, [r3, #20]
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	693a      	ldr	r2, [r7, #16]
 8006cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	697a      	ldr	r2, [r7, #20]
 8006cf0:	621a      	str	r2, [r3, #32]
}
 8006cf2:	bf00      	nop
 8006cf4:	371c      	adds	r7, #28
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr
 8006cfe:	bf00      	nop
 8006d00:	40010000 	.word	0x40010000
 8006d04:	40010400 	.word	0x40010400

08006d08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b087      	sub	sp, #28
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6a1b      	ldr	r3, [r3, #32]
 8006d1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	69db      	ldr	r3, [r3, #28]
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f023 0303 	bic.w	r3, r3, #3
 8006d3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	021b      	lsls	r3, r3, #8
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a21      	ldr	r2, [pc, #132]	@ (8006de8 <TIM_OC3_SetConfig+0xe0>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d003      	beq.n	8006d6e <TIM_OC3_SetConfig+0x66>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a20      	ldr	r2, [pc, #128]	@ (8006dec <TIM_OC3_SetConfig+0xe4>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d10d      	bne.n	8006d8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	021b      	lsls	r3, r3, #8
 8006d7c:	697a      	ldr	r2, [r7, #20]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006d88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	4a16      	ldr	r2, [pc, #88]	@ (8006de8 <TIM_OC3_SetConfig+0xe0>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d003      	beq.n	8006d9a <TIM_OC3_SetConfig+0x92>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	4a15      	ldr	r2, [pc, #84]	@ (8006dec <TIM_OC3_SetConfig+0xe4>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d113      	bne.n	8006dc2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	695b      	ldr	r3, [r3, #20]
 8006dae:	011b      	lsls	r3, r3, #4
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	011b      	lsls	r3, r3, #4
 8006dbc:	693a      	ldr	r2, [r7, #16]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	693a      	ldr	r2, [r7, #16]
 8006dc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	685a      	ldr	r2, [r3, #4]
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	697a      	ldr	r2, [r7, #20]
 8006dda:	621a      	str	r2, [r3, #32]
}
 8006ddc:	bf00      	nop
 8006dde:	371c      	adds	r7, #28
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr
 8006de8:	40010000 	.word	0x40010000
 8006dec:	40010400 	.word	0x40010400

08006df0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006df0:	b480      	push	{r7}
 8006df2:	b087      	sub	sp, #28
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a1b      	ldr	r3, [r3, #32]
 8006e04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	021b      	lsls	r3, r3, #8
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	031b      	lsls	r3, r3, #12
 8006e42:	693a      	ldr	r2, [r7, #16]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a12      	ldr	r2, [pc, #72]	@ (8006e94 <TIM_OC4_SetConfig+0xa4>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d003      	beq.n	8006e58 <TIM_OC4_SetConfig+0x68>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a11      	ldr	r2, [pc, #68]	@ (8006e98 <TIM_OC4_SetConfig+0xa8>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d109      	bne.n	8006e6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	695b      	ldr	r3, [r3, #20]
 8006e64:	019b      	lsls	r3, r3, #6
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	697a      	ldr	r2, [r7, #20]
 8006e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	685a      	ldr	r2, [r3, #4]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	621a      	str	r2, [r3, #32]
}
 8006e86:	bf00      	nop
 8006e88:	371c      	adds	r7, #28
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	40010000 	.word	0x40010000
 8006e98:	40010400 	.word	0x40010400

08006e9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	f003 031f 	and.w	r3, r3, #31
 8006eae:	2201      	movs	r2, #1
 8006eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6a1a      	ldr	r2, [r3, #32]
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	43db      	mvns	r3, r3
 8006ebe:	401a      	ands	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6a1a      	ldr	r2, [r3, #32]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	f003 031f 	and.w	r3, r3, #31
 8006ece:	6879      	ldr	r1, [r7, #4]
 8006ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	621a      	str	r2, [r3, #32]
}
 8006eda:	bf00      	nop
 8006edc:	371c      	adds	r7, #28
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
	...

08006ee8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d101      	bne.n	8006f00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006efc:	2302      	movs	r3, #2
 8006efe:	e05a      	b.n	8006fb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a21      	ldr	r2, [pc, #132]	@ (8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d022      	beq.n	8006f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f4c:	d01d      	beq.n	8006f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a1d      	ldr	r2, [pc, #116]	@ (8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d018      	beq.n	8006f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a1b      	ldr	r2, [pc, #108]	@ (8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d013      	beq.n	8006f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a1a      	ldr	r2, [pc, #104]	@ (8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d00e      	beq.n	8006f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a18      	ldr	r2, [pc, #96]	@ (8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d009      	beq.n	8006f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a17      	ldr	r2, [pc, #92]	@ (8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d004      	beq.n	8006f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a15      	ldr	r2, [pc, #84]	@ (8006fdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d10c      	bne.n	8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3714      	adds	r7, #20
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	40010000 	.word	0x40010000
 8006fc8:	40000400 	.word	0x40000400
 8006fcc:	40000800 	.word	0x40000800
 8006fd0:	40000c00 	.word	0x40000c00
 8006fd4:	40010400 	.word	0x40010400
 8006fd8:	40014000 	.word	0x40014000
 8006fdc:	40001800 	.word	0x40001800

08006fe0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b082      	sub	sp, #8
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d101      	bne.n	8006ff2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e042      	b.n	8007078 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d106      	bne.n	800700c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f7fc f88a 	bl	8003120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2224      	movs	r2, #36	@ 0x24
 8007010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68da      	ldr	r2, [r3, #12]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007022:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f82b 	bl	8007080 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	691a      	ldr	r2, [r3, #16]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007038:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	695a      	ldr	r2, [r3, #20]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007048:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68da      	ldr	r2, [r3, #12]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007058:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2220      	movs	r2, #32
 8007064:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2220      	movs	r2, #32
 800706c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007080:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007084:	b0c0      	sub	sp, #256	@ 0x100
 8007086:	af00      	add	r7, sp, #0
 8007088:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800708c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800709c:	68d9      	ldr	r1, [r3, #12]
 800709e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070a2:	681a      	ldr	r2, [r3, #0]
 80070a4:	ea40 0301 	orr.w	r3, r0, r1
 80070a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ae:	689a      	ldr	r2, [r3, #8]
 80070b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	431a      	orrs	r2, r3
 80070b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070bc:	695b      	ldr	r3, [r3, #20]
 80070be:	431a      	orrs	r2, r3
 80070c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070c4:	69db      	ldr	r3, [r3, #28]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80070cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80070d8:	f021 010c 	bic.w	r1, r1, #12
 80070dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070e0:	681a      	ldr	r2, [r3, #0]
 80070e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80070e6:	430b      	orrs	r3, r1
 80070e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80070ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80070f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070fa:	6999      	ldr	r1, [r3, #24]
 80070fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007100:	681a      	ldr	r2, [r3, #0]
 8007102:	ea40 0301 	orr.w	r3, r0, r1
 8007106:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	4b8f      	ldr	r3, [pc, #572]	@ (800734c <UART_SetConfig+0x2cc>)
 8007110:	429a      	cmp	r2, r3
 8007112:	d005      	beq.n	8007120 <UART_SetConfig+0xa0>
 8007114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	4b8d      	ldr	r3, [pc, #564]	@ (8007350 <UART_SetConfig+0x2d0>)
 800711c:	429a      	cmp	r2, r3
 800711e:	d104      	bne.n	800712a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007120:	f7ff fa72 	bl	8006608 <HAL_RCC_GetPCLK2Freq>
 8007124:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007128:	e003      	b.n	8007132 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800712a:	f7ff fa59 	bl	80065e0 <HAL_RCC_GetPCLK1Freq>
 800712e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007136:	69db      	ldr	r3, [r3, #28]
 8007138:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800713c:	f040 810c 	bne.w	8007358 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007140:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007144:	2200      	movs	r2, #0
 8007146:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800714a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800714e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007152:	4622      	mov	r2, r4
 8007154:	462b      	mov	r3, r5
 8007156:	1891      	adds	r1, r2, r2
 8007158:	65b9      	str	r1, [r7, #88]	@ 0x58
 800715a:	415b      	adcs	r3, r3
 800715c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800715e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007162:	4621      	mov	r1, r4
 8007164:	eb12 0801 	adds.w	r8, r2, r1
 8007168:	4629      	mov	r1, r5
 800716a:	eb43 0901 	adc.w	r9, r3, r1
 800716e:	f04f 0200 	mov.w	r2, #0
 8007172:	f04f 0300 	mov.w	r3, #0
 8007176:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800717a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800717e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007182:	4690      	mov	r8, r2
 8007184:	4699      	mov	r9, r3
 8007186:	4623      	mov	r3, r4
 8007188:	eb18 0303 	adds.w	r3, r8, r3
 800718c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007190:	462b      	mov	r3, r5
 8007192:	eb49 0303 	adc.w	r3, r9, r3
 8007196:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800719a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	2200      	movs	r2, #0
 80071a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80071a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80071aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80071ae:	460b      	mov	r3, r1
 80071b0:	18db      	adds	r3, r3, r3
 80071b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80071b4:	4613      	mov	r3, r2
 80071b6:	eb42 0303 	adc.w	r3, r2, r3
 80071ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80071bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80071c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80071c4:	f7f9 fd10 	bl	8000be8 <__aeabi_uldivmod>
 80071c8:	4602      	mov	r2, r0
 80071ca:	460b      	mov	r3, r1
 80071cc:	4b61      	ldr	r3, [pc, #388]	@ (8007354 <UART_SetConfig+0x2d4>)
 80071ce:	fba3 2302 	umull	r2, r3, r3, r2
 80071d2:	095b      	lsrs	r3, r3, #5
 80071d4:	011c      	lsls	r4, r3, #4
 80071d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071da:	2200      	movs	r2, #0
 80071dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80071e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80071e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80071e8:	4642      	mov	r2, r8
 80071ea:	464b      	mov	r3, r9
 80071ec:	1891      	adds	r1, r2, r2
 80071ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80071f0:	415b      	adcs	r3, r3
 80071f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80071f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80071f8:	4641      	mov	r1, r8
 80071fa:	eb12 0a01 	adds.w	sl, r2, r1
 80071fe:	4649      	mov	r1, r9
 8007200:	eb43 0b01 	adc.w	fp, r3, r1
 8007204:	f04f 0200 	mov.w	r2, #0
 8007208:	f04f 0300 	mov.w	r3, #0
 800720c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007210:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007214:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007218:	4692      	mov	sl, r2
 800721a:	469b      	mov	fp, r3
 800721c:	4643      	mov	r3, r8
 800721e:	eb1a 0303 	adds.w	r3, sl, r3
 8007222:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007226:	464b      	mov	r3, r9
 8007228:	eb4b 0303 	adc.w	r3, fp, r3
 800722c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800723c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007240:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007244:	460b      	mov	r3, r1
 8007246:	18db      	adds	r3, r3, r3
 8007248:	643b      	str	r3, [r7, #64]	@ 0x40
 800724a:	4613      	mov	r3, r2
 800724c:	eb42 0303 	adc.w	r3, r2, r3
 8007250:	647b      	str	r3, [r7, #68]	@ 0x44
 8007252:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007256:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800725a:	f7f9 fcc5 	bl	8000be8 <__aeabi_uldivmod>
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	4611      	mov	r1, r2
 8007264:	4b3b      	ldr	r3, [pc, #236]	@ (8007354 <UART_SetConfig+0x2d4>)
 8007266:	fba3 2301 	umull	r2, r3, r3, r1
 800726a:	095b      	lsrs	r3, r3, #5
 800726c:	2264      	movs	r2, #100	@ 0x64
 800726e:	fb02 f303 	mul.w	r3, r2, r3
 8007272:	1acb      	subs	r3, r1, r3
 8007274:	00db      	lsls	r3, r3, #3
 8007276:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800727a:	4b36      	ldr	r3, [pc, #216]	@ (8007354 <UART_SetConfig+0x2d4>)
 800727c:	fba3 2302 	umull	r2, r3, r3, r2
 8007280:	095b      	lsrs	r3, r3, #5
 8007282:	005b      	lsls	r3, r3, #1
 8007284:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007288:	441c      	add	r4, r3
 800728a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800728e:	2200      	movs	r2, #0
 8007290:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007294:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007298:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800729c:	4642      	mov	r2, r8
 800729e:	464b      	mov	r3, r9
 80072a0:	1891      	adds	r1, r2, r2
 80072a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80072a4:	415b      	adcs	r3, r3
 80072a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80072ac:	4641      	mov	r1, r8
 80072ae:	1851      	adds	r1, r2, r1
 80072b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80072b2:	4649      	mov	r1, r9
 80072b4:	414b      	adcs	r3, r1
 80072b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80072b8:	f04f 0200 	mov.w	r2, #0
 80072bc:	f04f 0300 	mov.w	r3, #0
 80072c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80072c4:	4659      	mov	r1, fp
 80072c6:	00cb      	lsls	r3, r1, #3
 80072c8:	4651      	mov	r1, sl
 80072ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072ce:	4651      	mov	r1, sl
 80072d0:	00ca      	lsls	r2, r1, #3
 80072d2:	4610      	mov	r0, r2
 80072d4:	4619      	mov	r1, r3
 80072d6:	4603      	mov	r3, r0
 80072d8:	4642      	mov	r2, r8
 80072da:	189b      	adds	r3, r3, r2
 80072dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80072e0:	464b      	mov	r3, r9
 80072e2:	460a      	mov	r2, r1
 80072e4:	eb42 0303 	adc.w	r3, r2, r3
 80072e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80072ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80072f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80072fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007300:	460b      	mov	r3, r1
 8007302:	18db      	adds	r3, r3, r3
 8007304:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007306:	4613      	mov	r3, r2
 8007308:	eb42 0303 	adc.w	r3, r2, r3
 800730c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800730e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007312:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007316:	f7f9 fc67 	bl	8000be8 <__aeabi_uldivmod>
 800731a:	4602      	mov	r2, r0
 800731c:	460b      	mov	r3, r1
 800731e:	4b0d      	ldr	r3, [pc, #52]	@ (8007354 <UART_SetConfig+0x2d4>)
 8007320:	fba3 1302 	umull	r1, r3, r3, r2
 8007324:	095b      	lsrs	r3, r3, #5
 8007326:	2164      	movs	r1, #100	@ 0x64
 8007328:	fb01 f303 	mul.w	r3, r1, r3
 800732c:	1ad3      	subs	r3, r2, r3
 800732e:	00db      	lsls	r3, r3, #3
 8007330:	3332      	adds	r3, #50	@ 0x32
 8007332:	4a08      	ldr	r2, [pc, #32]	@ (8007354 <UART_SetConfig+0x2d4>)
 8007334:	fba2 2303 	umull	r2, r3, r2, r3
 8007338:	095b      	lsrs	r3, r3, #5
 800733a:	f003 0207 	and.w	r2, r3, #7
 800733e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4422      	add	r2, r4
 8007346:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007348:	e106      	b.n	8007558 <UART_SetConfig+0x4d8>
 800734a:	bf00      	nop
 800734c:	40011000 	.word	0x40011000
 8007350:	40011400 	.word	0x40011400
 8007354:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007358:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800735c:	2200      	movs	r2, #0
 800735e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007362:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007366:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800736a:	4642      	mov	r2, r8
 800736c:	464b      	mov	r3, r9
 800736e:	1891      	adds	r1, r2, r2
 8007370:	6239      	str	r1, [r7, #32]
 8007372:	415b      	adcs	r3, r3
 8007374:	627b      	str	r3, [r7, #36]	@ 0x24
 8007376:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800737a:	4641      	mov	r1, r8
 800737c:	1854      	adds	r4, r2, r1
 800737e:	4649      	mov	r1, r9
 8007380:	eb43 0501 	adc.w	r5, r3, r1
 8007384:	f04f 0200 	mov.w	r2, #0
 8007388:	f04f 0300 	mov.w	r3, #0
 800738c:	00eb      	lsls	r3, r5, #3
 800738e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007392:	00e2      	lsls	r2, r4, #3
 8007394:	4614      	mov	r4, r2
 8007396:	461d      	mov	r5, r3
 8007398:	4643      	mov	r3, r8
 800739a:	18e3      	adds	r3, r4, r3
 800739c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073a0:	464b      	mov	r3, r9
 80073a2:	eb45 0303 	adc.w	r3, r5, r3
 80073a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80073b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80073ba:	f04f 0200 	mov.w	r2, #0
 80073be:	f04f 0300 	mov.w	r3, #0
 80073c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80073c6:	4629      	mov	r1, r5
 80073c8:	008b      	lsls	r3, r1, #2
 80073ca:	4621      	mov	r1, r4
 80073cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073d0:	4621      	mov	r1, r4
 80073d2:	008a      	lsls	r2, r1, #2
 80073d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80073d8:	f7f9 fc06 	bl	8000be8 <__aeabi_uldivmod>
 80073dc:	4602      	mov	r2, r0
 80073de:	460b      	mov	r3, r1
 80073e0:	4b60      	ldr	r3, [pc, #384]	@ (8007564 <UART_SetConfig+0x4e4>)
 80073e2:	fba3 2302 	umull	r2, r3, r3, r2
 80073e6:	095b      	lsrs	r3, r3, #5
 80073e8:	011c      	lsls	r4, r3, #4
 80073ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073ee:	2200      	movs	r2, #0
 80073f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80073f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80073f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80073fc:	4642      	mov	r2, r8
 80073fe:	464b      	mov	r3, r9
 8007400:	1891      	adds	r1, r2, r2
 8007402:	61b9      	str	r1, [r7, #24]
 8007404:	415b      	adcs	r3, r3
 8007406:	61fb      	str	r3, [r7, #28]
 8007408:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800740c:	4641      	mov	r1, r8
 800740e:	1851      	adds	r1, r2, r1
 8007410:	6139      	str	r1, [r7, #16]
 8007412:	4649      	mov	r1, r9
 8007414:	414b      	adcs	r3, r1
 8007416:	617b      	str	r3, [r7, #20]
 8007418:	f04f 0200 	mov.w	r2, #0
 800741c:	f04f 0300 	mov.w	r3, #0
 8007420:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007424:	4659      	mov	r1, fp
 8007426:	00cb      	lsls	r3, r1, #3
 8007428:	4651      	mov	r1, sl
 800742a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800742e:	4651      	mov	r1, sl
 8007430:	00ca      	lsls	r2, r1, #3
 8007432:	4610      	mov	r0, r2
 8007434:	4619      	mov	r1, r3
 8007436:	4603      	mov	r3, r0
 8007438:	4642      	mov	r2, r8
 800743a:	189b      	adds	r3, r3, r2
 800743c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007440:	464b      	mov	r3, r9
 8007442:	460a      	mov	r2, r1
 8007444:	eb42 0303 	adc.w	r3, r2, r3
 8007448:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800744c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007456:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007458:	f04f 0200 	mov.w	r2, #0
 800745c:	f04f 0300 	mov.w	r3, #0
 8007460:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007464:	4649      	mov	r1, r9
 8007466:	008b      	lsls	r3, r1, #2
 8007468:	4641      	mov	r1, r8
 800746a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800746e:	4641      	mov	r1, r8
 8007470:	008a      	lsls	r2, r1, #2
 8007472:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007476:	f7f9 fbb7 	bl	8000be8 <__aeabi_uldivmod>
 800747a:	4602      	mov	r2, r0
 800747c:	460b      	mov	r3, r1
 800747e:	4611      	mov	r1, r2
 8007480:	4b38      	ldr	r3, [pc, #224]	@ (8007564 <UART_SetConfig+0x4e4>)
 8007482:	fba3 2301 	umull	r2, r3, r3, r1
 8007486:	095b      	lsrs	r3, r3, #5
 8007488:	2264      	movs	r2, #100	@ 0x64
 800748a:	fb02 f303 	mul.w	r3, r2, r3
 800748e:	1acb      	subs	r3, r1, r3
 8007490:	011b      	lsls	r3, r3, #4
 8007492:	3332      	adds	r3, #50	@ 0x32
 8007494:	4a33      	ldr	r2, [pc, #204]	@ (8007564 <UART_SetConfig+0x4e4>)
 8007496:	fba2 2303 	umull	r2, r3, r2, r3
 800749a:	095b      	lsrs	r3, r3, #5
 800749c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80074a0:	441c      	add	r4, r3
 80074a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074a6:	2200      	movs	r2, #0
 80074a8:	673b      	str	r3, [r7, #112]	@ 0x70
 80074aa:	677a      	str	r2, [r7, #116]	@ 0x74
 80074ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80074b0:	4642      	mov	r2, r8
 80074b2:	464b      	mov	r3, r9
 80074b4:	1891      	adds	r1, r2, r2
 80074b6:	60b9      	str	r1, [r7, #8]
 80074b8:	415b      	adcs	r3, r3
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074c0:	4641      	mov	r1, r8
 80074c2:	1851      	adds	r1, r2, r1
 80074c4:	6039      	str	r1, [r7, #0]
 80074c6:	4649      	mov	r1, r9
 80074c8:	414b      	adcs	r3, r1
 80074ca:	607b      	str	r3, [r7, #4]
 80074cc:	f04f 0200 	mov.w	r2, #0
 80074d0:	f04f 0300 	mov.w	r3, #0
 80074d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80074d8:	4659      	mov	r1, fp
 80074da:	00cb      	lsls	r3, r1, #3
 80074dc:	4651      	mov	r1, sl
 80074de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074e2:	4651      	mov	r1, sl
 80074e4:	00ca      	lsls	r2, r1, #3
 80074e6:	4610      	mov	r0, r2
 80074e8:	4619      	mov	r1, r3
 80074ea:	4603      	mov	r3, r0
 80074ec:	4642      	mov	r2, r8
 80074ee:	189b      	adds	r3, r3, r2
 80074f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80074f2:	464b      	mov	r3, r9
 80074f4:	460a      	mov	r2, r1
 80074f6:	eb42 0303 	adc.w	r3, r2, r3
 80074fa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80074fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	2200      	movs	r2, #0
 8007504:	663b      	str	r3, [r7, #96]	@ 0x60
 8007506:	667a      	str	r2, [r7, #100]	@ 0x64
 8007508:	f04f 0200 	mov.w	r2, #0
 800750c:	f04f 0300 	mov.w	r3, #0
 8007510:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007514:	4649      	mov	r1, r9
 8007516:	008b      	lsls	r3, r1, #2
 8007518:	4641      	mov	r1, r8
 800751a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800751e:	4641      	mov	r1, r8
 8007520:	008a      	lsls	r2, r1, #2
 8007522:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007526:	f7f9 fb5f 	bl	8000be8 <__aeabi_uldivmod>
 800752a:	4602      	mov	r2, r0
 800752c:	460b      	mov	r3, r1
 800752e:	4b0d      	ldr	r3, [pc, #52]	@ (8007564 <UART_SetConfig+0x4e4>)
 8007530:	fba3 1302 	umull	r1, r3, r3, r2
 8007534:	095b      	lsrs	r3, r3, #5
 8007536:	2164      	movs	r1, #100	@ 0x64
 8007538:	fb01 f303 	mul.w	r3, r1, r3
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	011b      	lsls	r3, r3, #4
 8007540:	3332      	adds	r3, #50	@ 0x32
 8007542:	4a08      	ldr	r2, [pc, #32]	@ (8007564 <UART_SetConfig+0x4e4>)
 8007544:	fba2 2303 	umull	r2, r3, r2, r3
 8007548:	095b      	lsrs	r3, r3, #5
 800754a:	f003 020f 	and.w	r2, r3, #15
 800754e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4422      	add	r2, r4
 8007556:	609a      	str	r2, [r3, #8]
}
 8007558:	bf00      	nop
 800755a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800755e:	46bd      	mov	sp, r7
 8007560:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007564:	51eb851f 	.word	0x51eb851f

08007568 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007568:	b084      	sub	sp, #16
 800756a:	b580      	push	{r7, lr}
 800756c:	b084      	sub	sp, #16
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	f107 001c 	add.w	r0, r7, #28
 8007576:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800757a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800757e:	2b01      	cmp	r3, #1
 8007580:	d123      	bne.n	80075ca <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007586:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007596:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	68db      	ldr	r3, [r3, #12]
 80075a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80075aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d105      	bne.n	80075be <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	68db      	ldr	r3, [r3, #12]
 80075b6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 faa0 	bl	8007b04 <USB_CoreReset>
 80075c4:	4603      	mov	r3, r0
 80075c6:	73fb      	strb	r3, [r7, #15]
 80075c8:	e01b      	b.n	8007602 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 fa94 	bl	8007b04 <USB_CoreReset>
 80075dc:	4603      	mov	r3, r0
 80075de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80075e0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d106      	bne.n	80075f6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80075f4:	e005      	b.n	8007602 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007602:	7fbb      	ldrb	r3, [r7, #30]
 8007604:	2b01      	cmp	r3, #1
 8007606:	d10b      	bne.n	8007620 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f043 0206 	orr.w	r2, r3, #6
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f043 0220 	orr.w	r2, r3, #32
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007620:	7bfb      	ldrb	r3, [r7, #15]
}
 8007622:	4618      	mov	r0, r3
 8007624:	3710      	adds	r7, #16
 8007626:	46bd      	mov	sp, r7
 8007628:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800762c:	b004      	add	sp, #16
 800762e:	4770      	bx	lr

08007630 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f023 0201 	bic.w	r2, r3, #1
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b084      	sub	sp, #16
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
 800765a:	460b      	mov	r3, r1
 800765c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800765e:	2300      	movs	r3, #0
 8007660:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800766e:	78fb      	ldrb	r3, [r7, #3]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d115      	bne.n	80076a0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007680:	200a      	movs	r0, #10
 8007682:	f7fb feab 	bl	80033dc <HAL_Delay>
      ms += 10U;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	330a      	adds	r3, #10
 800768a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 fa2b 	bl	8007ae8 <USB_GetMode>
 8007692:	4603      	mov	r3, r0
 8007694:	2b01      	cmp	r3, #1
 8007696:	d01e      	beq.n	80076d6 <USB_SetCurrentMode+0x84>
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2bc7      	cmp	r3, #199	@ 0xc7
 800769c:	d9f0      	bls.n	8007680 <USB_SetCurrentMode+0x2e>
 800769e:	e01a      	b.n	80076d6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80076a0:	78fb      	ldrb	r3, [r7, #3]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d115      	bne.n	80076d2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80076b2:	200a      	movs	r0, #10
 80076b4:	f7fb fe92 	bl	80033dc <HAL_Delay>
      ms += 10U;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	330a      	adds	r3, #10
 80076bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 fa12 	bl	8007ae8 <USB_GetMode>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d005      	beq.n	80076d6 <USB_SetCurrentMode+0x84>
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2bc7      	cmp	r3, #199	@ 0xc7
 80076ce:	d9f0      	bls.n	80076b2 <USB_SetCurrentMode+0x60>
 80076d0:	e001      	b.n	80076d6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e005      	b.n	80076e2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2bc8      	cmp	r3, #200	@ 0xc8
 80076da:	d101      	bne.n	80076e0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e000      	b.n	80076e2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80076e0:	2300      	movs	r3, #0
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
	...

080076ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076ec:	b084      	sub	sp, #16
 80076ee:	b580      	push	{r7, lr}
 80076f0:	b086      	sub	sp, #24
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	6078      	str	r0, [r7, #4]
 80076f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80076fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80076fe:	2300      	movs	r3, #0
 8007700:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007706:	2300      	movs	r3, #0
 8007708:	613b      	str	r3, [r7, #16]
 800770a:	e009      	b.n	8007720 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	3340      	adds	r3, #64	@ 0x40
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	4413      	add	r3, r2
 8007716:	2200      	movs	r2, #0
 8007718:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	3301      	adds	r3, #1
 800771e:	613b      	str	r3, [r7, #16]
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	2b0e      	cmp	r3, #14
 8007724:	d9f2      	bls.n	800770c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007726:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800772a:	2b00      	cmp	r3, #0
 800772c:	d11c      	bne.n	8007768 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	68fa      	ldr	r2, [r7, #12]
 8007738:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800773c:	f043 0302 	orr.w	r3, r3, #2
 8007740:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007746:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007752:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800775e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	639a      	str	r2, [r3, #56]	@ 0x38
 8007766:	e00b      	b.n	8007780 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800776c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007778:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007786:	461a      	mov	r2, r3
 8007788:	2300      	movs	r3, #0
 800778a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800778c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007790:	2b01      	cmp	r3, #1
 8007792:	d10d      	bne.n	80077b0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007794:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007798:	2b00      	cmp	r3, #0
 800779a:	d104      	bne.n	80077a6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800779c:	2100      	movs	r1, #0
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f968 	bl	8007a74 <USB_SetDevSpeed>
 80077a4:	e008      	b.n	80077b8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80077a6:	2101      	movs	r1, #1
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f963 	bl	8007a74 <USB_SetDevSpeed>
 80077ae:	e003      	b.n	80077b8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80077b0:	2103      	movs	r1, #3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f95e 	bl	8007a74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80077b8:	2110      	movs	r1, #16
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	f000 f8fa 	bl	80079b4 <USB_FlushTxFifo>
 80077c0:	4603      	mov	r3, r0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d001      	beq.n	80077ca <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 f924 	bl	8007a18 <USB_FlushRxFifo>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077e0:	461a      	mov	r2, r3
 80077e2:	2300      	movs	r3, #0
 80077e4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ec:	461a      	mov	r2, r3
 80077ee:	2300      	movs	r3, #0
 80077f0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077f8:	461a      	mov	r2, r3
 80077fa:	2300      	movs	r3, #0
 80077fc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077fe:	2300      	movs	r3, #0
 8007800:	613b      	str	r3, [r7, #16]
 8007802:	e043      	b.n	800788c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	4413      	add	r3, r2
 800780c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007816:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800781a:	d118      	bne.n	800784e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d10a      	bne.n	8007838 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	015a      	lsls	r2, r3, #5
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	4413      	add	r3, r2
 800782a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800782e:	461a      	mov	r2, r3
 8007830:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007834:	6013      	str	r3, [r2, #0]
 8007836:	e013      	b.n	8007860 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	015a      	lsls	r2, r3, #5
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	4413      	add	r3, r2
 8007840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007844:	461a      	mov	r2, r3
 8007846:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800784a:	6013      	str	r3, [r2, #0]
 800784c:	e008      	b.n	8007860 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	015a      	lsls	r2, r3, #5
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	4413      	add	r3, r2
 8007856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800785a:	461a      	mov	r2, r3
 800785c:	2300      	movs	r3, #0
 800785e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	4413      	add	r3, r2
 8007868:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800786c:	461a      	mov	r2, r3
 800786e:	2300      	movs	r3, #0
 8007870:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	015a      	lsls	r2, r3, #5
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	4413      	add	r3, r2
 800787a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800787e:	461a      	mov	r2, r3
 8007880:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007884:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	3301      	adds	r3, #1
 800788a:	613b      	str	r3, [r7, #16]
 800788c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007890:	461a      	mov	r2, r3
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	4293      	cmp	r3, r2
 8007896:	d3b5      	bcc.n	8007804 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007898:	2300      	movs	r3, #0
 800789a:	613b      	str	r3, [r7, #16]
 800789c:	e043      	b.n	8007926 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	015a      	lsls	r2, r3, #5
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	4413      	add	r3, r2
 80078a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078b4:	d118      	bne.n	80078e8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d10a      	bne.n	80078d2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078c8:	461a      	mov	r2, r3
 80078ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80078ce:	6013      	str	r3, [r2, #0]
 80078d0:	e013      	b.n	80078fa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	015a      	lsls	r2, r3, #5
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	4413      	add	r3, r2
 80078da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078de:	461a      	mov	r2, r3
 80078e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80078e4:	6013      	str	r3, [r2, #0]
 80078e6:	e008      	b.n	80078fa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80078e8:	693b      	ldr	r3, [r7, #16]
 80078ea:	015a      	lsls	r2, r3, #5
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078f4:	461a      	mov	r2, r3
 80078f6:	2300      	movs	r3, #0
 80078f8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	015a      	lsls	r2, r3, #5
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	4413      	add	r3, r2
 8007902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007906:	461a      	mov	r2, r3
 8007908:	2300      	movs	r3, #0
 800790a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	015a      	lsls	r2, r3, #5
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	4413      	add	r3, r2
 8007914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007918:	461a      	mov	r2, r3
 800791a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800791e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	3301      	adds	r3, #1
 8007924:	613b      	str	r3, [r7, #16]
 8007926:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800792a:	461a      	mov	r2, r3
 800792c:	693b      	ldr	r3, [r7, #16]
 800792e:	4293      	cmp	r3, r2
 8007930:	d3b5      	bcc.n	800789e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	68fa      	ldr	r2, [r7, #12]
 800793c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007940:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007944:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007952:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007954:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007958:	2b00      	cmp	r3, #0
 800795a:	d105      	bne.n	8007968 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	f043 0210 	orr.w	r2, r3, #16
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	699a      	ldr	r2, [r3, #24]
 800796c:	4b10      	ldr	r3, [pc, #64]	@ (80079b0 <USB_DevInit+0x2c4>)
 800796e:	4313      	orrs	r3, r2
 8007970:	687a      	ldr	r2, [r7, #4]
 8007972:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007974:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007978:	2b00      	cmp	r3, #0
 800797a:	d005      	beq.n	8007988 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	f043 0208 	orr.w	r2, r3, #8
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007988:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800798c:	2b01      	cmp	r3, #1
 800798e:	d107      	bne.n	80079a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007998:	f043 0304 	orr.w	r3, r3, #4
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80079a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3718      	adds	r7, #24
 80079a6:	46bd      	mov	sp, r7
 80079a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80079ac:	b004      	add	sp, #16
 80079ae:	4770      	bx	lr
 80079b0:	803c3800 	.word	0x803c3800

080079b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	3301      	adds	r3, #1
 80079c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079ce:	d901      	bls.n	80079d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80079d0:	2303      	movs	r3, #3
 80079d2:	e01b      	b.n	8007a0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	daf2      	bge.n	80079c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80079dc:	2300      	movs	r3, #0
 80079de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	019b      	lsls	r3, r3, #6
 80079e4:	f043 0220 	orr.w	r2, r3, #32
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	3301      	adds	r3, #1
 80079f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079f8:	d901      	bls.n	80079fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80079fa:	2303      	movs	r3, #3
 80079fc:	e006      	b.n	8007a0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	f003 0320 	and.w	r3, r3, #32
 8007a06:	2b20      	cmp	r3, #32
 8007a08:	d0f0      	beq.n	80079ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3714      	adds	r7, #20
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b085      	sub	sp, #20
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007a20:	2300      	movs	r3, #0
 8007a22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	3301      	adds	r3, #1
 8007a28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a30:	d901      	bls.n	8007a36 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007a32:	2303      	movs	r3, #3
 8007a34:	e018      	b.n	8007a68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	daf2      	bge.n	8007a24 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2210      	movs	r2, #16
 8007a46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	3301      	adds	r3, #1
 8007a4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007a54:	d901      	bls.n	8007a5a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e006      	b.n	8007a68 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	f003 0310 	and.w	r3, r3, #16
 8007a62:	2b10      	cmp	r3, #16
 8007a64:	d0f0      	beq.n	8007a48 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007a66:	2300      	movs	r3, #0
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3714      	adds	r7, #20
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a8a:	681a      	ldr	r2, [r3, #0]
 8007a8c:	78fb      	ldrb	r3, [r7, #3]
 8007a8e:	68f9      	ldr	r1, [r7, #12]
 8007a90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a94:	4313      	orrs	r3, r2
 8007a96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3714      	adds	r7, #20
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa4:	4770      	bx	lr

08007aa6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007aa6:	b480      	push	{r7}
 8007aa8:	b085      	sub	sp, #20
 8007aaa:	af00      	add	r7, sp, #0
 8007aac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007ac0:	f023 0303 	bic.w	r3, r3, #3
 8007ac4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007acc:	685b      	ldr	r3, [r3, #4]
 8007ace:	68fa      	ldr	r2, [r7, #12]
 8007ad0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ad4:	f043 0302 	orr.w	r3, r3, #2
 8007ad8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3714      	adds	r7, #20
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	695b      	ldr	r3, [r3, #20]
 8007af4:	f003 0301 	and.w	r3, r3, #1
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr

08007b04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	3301      	adds	r3, #1
 8007b14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b1c:	d901      	bls.n	8007b22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007b1e:	2303      	movs	r3, #3
 8007b20:	e01b      	b.n	8007b5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	daf2      	bge.n	8007b10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	691b      	ldr	r3, [r3, #16]
 8007b32:	f043 0201 	orr.w	r2, r3, #1
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007b46:	d901      	bls.n	8007b4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007b48:	2303      	movs	r3, #3
 8007b4a:	e006      	b.n	8007b5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	f003 0301 	and.w	r3, r3, #1
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d0f0      	beq.n	8007b3a <USB_CoreReset+0x36>

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3714      	adds	r7, #20
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr

08007b66 <__cvt>:
 8007b66:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b6a:	ec57 6b10 	vmov	r6, r7, d0
 8007b6e:	2f00      	cmp	r7, #0
 8007b70:	460c      	mov	r4, r1
 8007b72:	4619      	mov	r1, r3
 8007b74:	463b      	mov	r3, r7
 8007b76:	bfbb      	ittet	lt
 8007b78:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007b7c:	461f      	movlt	r7, r3
 8007b7e:	2300      	movge	r3, #0
 8007b80:	232d      	movlt	r3, #45	@ 0x2d
 8007b82:	700b      	strb	r3, [r1, #0]
 8007b84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b86:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007b8a:	4691      	mov	r9, r2
 8007b8c:	f023 0820 	bic.w	r8, r3, #32
 8007b90:	bfbc      	itt	lt
 8007b92:	4632      	movlt	r2, r6
 8007b94:	4616      	movlt	r6, r2
 8007b96:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007b9a:	d005      	beq.n	8007ba8 <__cvt+0x42>
 8007b9c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007ba0:	d100      	bne.n	8007ba4 <__cvt+0x3e>
 8007ba2:	3401      	adds	r4, #1
 8007ba4:	2102      	movs	r1, #2
 8007ba6:	e000      	b.n	8007baa <__cvt+0x44>
 8007ba8:	2103      	movs	r1, #3
 8007baa:	ab03      	add	r3, sp, #12
 8007bac:	9301      	str	r3, [sp, #4]
 8007bae:	ab02      	add	r3, sp, #8
 8007bb0:	9300      	str	r3, [sp, #0]
 8007bb2:	ec47 6b10 	vmov	d0, r6, r7
 8007bb6:	4653      	mov	r3, sl
 8007bb8:	4622      	mov	r2, r4
 8007bba:	f000 fdf1 	bl	80087a0 <_dtoa_r>
 8007bbe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007bc2:	4605      	mov	r5, r0
 8007bc4:	d119      	bne.n	8007bfa <__cvt+0x94>
 8007bc6:	f019 0f01 	tst.w	r9, #1
 8007bca:	d00e      	beq.n	8007bea <__cvt+0x84>
 8007bcc:	eb00 0904 	add.w	r9, r0, r4
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	4639      	mov	r1, r7
 8007bd8:	f7f8 ff76 	bl	8000ac8 <__aeabi_dcmpeq>
 8007bdc:	b108      	cbz	r0, 8007be2 <__cvt+0x7c>
 8007bde:	f8cd 900c 	str.w	r9, [sp, #12]
 8007be2:	2230      	movs	r2, #48	@ 0x30
 8007be4:	9b03      	ldr	r3, [sp, #12]
 8007be6:	454b      	cmp	r3, r9
 8007be8:	d31e      	bcc.n	8007c28 <__cvt+0xc2>
 8007bea:	9b03      	ldr	r3, [sp, #12]
 8007bec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007bee:	1b5b      	subs	r3, r3, r5
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	6013      	str	r3, [r2, #0]
 8007bf4:	b004      	add	sp, #16
 8007bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bfa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007bfe:	eb00 0904 	add.w	r9, r0, r4
 8007c02:	d1e5      	bne.n	8007bd0 <__cvt+0x6a>
 8007c04:	7803      	ldrb	r3, [r0, #0]
 8007c06:	2b30      	cmp	r3, #48	@ 0x30
 8007c08:	d10a      	bne.n	8007c20 <__cvt+0xba>
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	4630      	mov	r0, r6
 8007c10:	4639      	mov	r1, r7
 8007c12:	f7f8 ff59 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c16:	b918      	cbnz	r0, 8007c20 <__cvt+0xba>
 8007c18:	f1c4 0401 	rsb	r4, r4, #1
 8007c1c:	f8ca 4000 	str.w	r4, [sl]
 8007c20:	f8da 3000 	ldr.w	r3, [sl]
 8007c24:	4499      	add	r9, r3
 8007c26:	e7d3      	b.n	8007bd0 <__cvt+0x6a>
 8007c28:	1c59      	adds	r1, r3, #1
 8007c2a:	9103      	str	r1, [sp, #12]
 8007c2c:	701a      	strb	r2, [r3, #0]
 8007c2e:	e7d9      	b.n	8007be4 <__cvt+0x7e>

08007c30 <__exponent>:
 8007c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c32:	2900      	cmp	r1, #0
 8007c34:	bfba      	itte	lt
 8007c36:	4249      	neglt	r1, r1
 8007c38:	232d      	movlt	r3, #45	@ 0x2d
 8007c3a:	232b      	movge	r3, #43	@ 0x2b
 8007c3c:	2909      	cmp	r1, #9
 8007c3e:	7002      	strb	r2, [r0, #0]
 8007c40:	7043      	strb	r3, [r0, #1]
 8007c42:	dd29      	ble.n	8007c98 <__exponent+0x68>
 8007c44:	f10d 0307 	add.w	r3, sp, #7
 8007c48:	461d      	mov	r5, r3
 8007c4a:	270a      	movs	r7, #10
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	fbb1 f6f7 	udiv	r6, r1, r7
 8007c52:	fb07 1416 	mls	r4, r7, r6, r1
 8007c56:	3430      	adds	r4, #48	@ 0x30
 8007c58:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007c5c:	460c      	mov	r4, r1
 8007c5e:	2c63      	cmp	r4, #99	@ 0x63
 8007c60:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007c64:	4631      	mov	r1, r6
 8007c66:	dcf1      	bgt.n	8007c4c <__exponent+0x1c>
 8007c68:	3130      	adds	r1, #48	@ 0x30
 8007c6a:	1e94      	subs	r4, r2, #2
 8007c6c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007c70:	1c41      	adds	r1, r0, #1
 8007c72:	4623      	mov	r3, r4
 8007c74:	42ab      	cmp	r3, r5
 8007c76:	d30a      	bcc.n	8007c8e <__exponent+0x5e>
 8007c78:	f10d 0309 	add.w	r3, sp, #9
 8007c7c:	1a9b      	subs	r3, r3, r2
 8007c7e:	42ac      	cmp	r4, r5
 8007c80:	bf88      	it	hi
 8007c82:	2300      	movhi	r3, #0
 8007c84:	3302      	adds	r3, #2
 8007c86:	4403      	add	r3, r0
 8007c88:	1a18      	subs	r0, r3, r0
 8007c8a:	b003      	add	sp, #12
 8007c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c8e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007c92:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007c96:	e7ed      	b.n	8007c74 <__exponent+0x44>
 8007c98:	2330      	movs	r3, #48	@ 0x30
 8007c9a:	3130      	adds	r1, #48	@ 0x30
 8007c9c:	7083      	strb	r3, [r0, #2]
 8007c9e:	70c1      	strb	r1, [r0, #3]
 8007ca0:	1d03      	adds	r3, r0, #4
 8007ca2:	e7f1      	b.n	8007c88 <__exponent+0x58>

08007ca4 <_printf_float>:
 8007ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca8:	b08d      	sub	sp, #52	@ 0x34
 8007caa:	460c      	mov	r4, r1
 8007cac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007cb0:	4616      	mov	r6, r2
 8007cb2:	461f      	mov	r7, r3
 8007cb4:	4605      	mov	r5, r0
 8007cb6:	f000 fcab 	bl	8008610 <_localeconv_r>
 8007cba:	6803      	ldr	r3, [r0, #0]
 8007cbc:	9304      	str	r3, [sp, #16]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7f8 fad6 	bl	8000270 <strlen>
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cc8:	f8d8 3000 	ldr.w	r3, [r8]
 8007ccc:	9005      	str	r0, [sp, #20]
 8007cce:	3307      	adds	r3, #7
 8007cd0:	f023 0307 	bic.w	r3, r3, #7
 8007cd4:	f103 0208 	add.w	r2, r3, #8
 8007cd8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007cdc:	f8d4 b000 	ldr.w	fp, [r4]
 8007ce0:	f8c8 2000 	str.w	r2, [r8]
 8007ce4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ce8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007cec:	9307      	str	r3, [sp, #28]
 8007cee:	f8cd 8018 	str.w	r8, [sp, #24]
 8007cf2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007cf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007cfa:	4b9c      	ldr	r3, [pc, #624]	@ (8007f6c <_printf_float+0x2c8>)
 8007cfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d00:	f7f8 ff14 	bl	8000b2c <__aeabi_dcmpun>
 8007d04:	bb70      	cbnz	r0, 8007d64 <_printf_float+0xc0>
 8007d06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007d0a:	4b98      	ldr	r3, [pc, #608]	@ (8007f6c <_printf_float+0x2c8>)
 8007d0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d10:	f7f8 feee 	bl	8000af0 <__aeabi_dcmple>
 8007d14:	bb30      	cbnz	r0, 8007d64 <_printf_float+0xc0>
 8007d16:	2200      	movs	r2, #0
 8007d18:	2300      	movs	r3, #0
 8007d1a:	4640      	mov	r0, r8
 8007d1c:	4649      	mov	r1, r9
 8007d1e:	f7f8 fedd 	bl	8000adc <__aeabi_dcmplt>
 8007d22:	b110      	cbz	r0, 8007d2a <_printf_float+0x86>
 8007d24:	232d      	movs	r3, #45	@ 0x2d
 8007d26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d2a:	4a91      	ldr	r2, [pc, #580]	@ (8007f70 <_printf_float+0x2cc>)
 8007d2c:	4b91      	ldr	r3, [pc, #580]	@ (8007f74 <_printf_float+0x2d0>)
 8007d2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007d32:	bf94      	ite	ls
 8007d34:	4690      	movls	r8, r2
 8007d36:	4698      	movhi	r8, r3
 8007d38:	2303      	movs	r3, #3
 8007d3a:	6123      	str	r3, [r4, #16]
 8007d3c:	f02b 0304 	bic.w	r3, fp, #4
 8007d40:	6023      	str	r3, [r4, #0]
 8007d42:	f04f 0900 	mov.w	r9, #0
 8007d46:	9700      	str	r7, [sp, #0]
 8007d48:	4633      	mov	r3, r6
 8007d4a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007d4c:	4621      	mov	r1, r4
 8007d4e:	4628      	mov	r0, r5
 8007d50:	f000 f9d2 	bl	80080f8 <_printf_common>
 8007d54:	3001      	adds	r0, #1
 8007d56:	f040 808d 	bne.w	8007e74 <_printf_float+0x1d0>
 8007d5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d5e:	b00d      	add	sp, #52	@ 0x34
 8007d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d64:	4642      	mov	r2, r8
 8007d66:	464b      	mov	r3, r9
 8007d68:	4640      	mov	r0, r8
 8007d6a:	4649      	mov	r1, r9
 8007d6c:	f7f8 fede 	bl	8000b2c <__aeabi_dcmpun>
 8007d70:	b140      	cbz	r0, 8007d84 <_printf_float+0xe0>
 8007d72:	464b      	mov	r3, r9
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	bfbc      	itt	lt
 8007d78:	232d      	movlt	r3, #45	@ 0x2d
 8007d7a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007d7e:	4a7e      	ldr	r2, [pc, #504]	@ (8007f78 <_printf_float+0x2d4>)
 8007d80:	4b7e      	ldr	r3, [pc, #504]	@ (8007f7c <_printf_float+0x2d8>)
 8007d82:	e7d4      	b.n	8007d2e <_printf_float+0x8a>
 8007d84:	6863      	ldr	r3, [r4, #4]
 8007d86:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007d8a:	9206      	str	r2, [sp, #24]
 8007d8c:	1c5a      	adds	r2, r3, #1
 8007d8e:	d13b      	bne.n	8007e08 <_printf_float+0x164>
 8007d90:	2306      	movs	r3, #6
 8007d92:	6063      	str	r3, [r4, #4]
 8007d94:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007d98:	2300      	movs	r3, #0
 8007d9a:	6022      	str	r2, [r4, #0]
 8007d9c:	9303      	str	r3, [sp, #12]
 8007d9e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007da0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007da4:	ab09      	add	r3, sp, #36	@ 0x24
 8007da6:	9300      	str	r3, [sp, #0]
 8007da8:	6861      	ldr	r1, [r4, #4]
 8007daa:	ec49 8b10 	vmov	d0, r8, r9
 8007dae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007db2:	4628      	mov	r0, r5
 8007db4:	f7ff fed7 	bl	8007b66 <__cvt>
 8007db8:	9b06      	ldr	r3, [sp, #24]
 8007dba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007dbc:	2b47      	cmp	r3, #71	@ 0x47
 8007dbe:	4680      	mov	r8, r0
 8007dc0:	d129      	bne.n	8007e16 <_printf_float+0x172>
 8007dc2:	1cc8      	adds	r0, r1, #3
 8007dc4:	db02      	blt.n	8007dcc <_printf_float+0x128>
 8007dc6:	6863      	ldr	r3, [r4, #4]
 8007dc8:	4299      	cmp	r1, r3
 8007dca:	dd41      	ble.n	8007e50 <_printf_float+0x1ac>
 8007dcc:	f1aa 0a02 	sub.w	sl, sl, #2
 8007dd0:	fa5f fa8a 	uxtb.w	sl, sl
 8007dd4:	3901      	subs	r1, #1
 8007dd6:	4652      	mov	r2, sl
 8007dd8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007ddc:	9109      	str	r1, [sp, #36]	@ 0x24
 8007dde:	f7ff ff27 	bl	8007c30 <__exponent>
 8007de2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007de4:	1813      	adds	r3, r2, r0
 8007de6:	2a01      	cmp	r2, #1
 8007de8:	4681      	mov	r9, r0
 8007dea:	6123      	str	r3, [r4, #16]
 8007dec:	dc02      	bgt.n	8007df4 <_printf_float+0x150>
 8007dee:	6822      	ldr	r2, [r4, #0]
 8007df0:	07d2      	lsls	r2, r2, #31
 8007df2:	d501      	bpl.n	8007df8 <_printf_float+0x154>
 8007df4:	3301      	adds	r3, #1
 8007df6:	6123      	str	r3, [r4, #16]
 8007df8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d0a2      	beq.n	8007d46 <_printf_float+0xa2>
 8007e00:	232d      	movs	r3, #45	@ 0x2d
 8007e02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e06:	e79e      	b.n	8007d46 <_printf_float+0xa2>
 8007e08:	9a06      	ldr	r2, [sp, #24]
 8007e0a:	2a47      	cmp	r2, #71	@ 0x47
 8007e0c:	d1c2      	bne.n	8007d94 <_printf_float+0xf0>
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1c0      	bne.n	8007d94 <_printf_float+0xf0>
 8007e12:	2301      	movs	r3, #1
 8007e14:	e7bd      	b.n	8007d92 <_printf_float+0xee>
 8007e16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007e1a:	d9db      	bls.n	8007dd4 <_printf_float+0x130>
 8007e1c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007e20:	d118      	bne.n	8007e54 <_printf_float+0x1b0>
 8007e22:	2900      	cmp	r1, #0
 8007e24:	6863      	ldr	r3, [r4, #4]
 8007e26:	dd0b      	ble.n	8007e40 <_printf_float+0x19c>
 8007e28:	6121      	str	r1, [r4, #16]
 8007e2a:	b913      	cbnz	r3, 8007e32 <_printf_float+0x18e>
 8007e2c:	6822      	ldr	r2, [r4, #0]
 8007e2e:	07d0      	lsls	r0, r2, #31
 8007e30:	d502      	bpl.n	8007e38 <_printf_float+0x194>
 8007e32:	3301      	adds	r3, #1
 8007e34:	440b      	add	r3, r1
 8007e36:	6123      	str	r3, [r4, #16]
 8007e38:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007e3a:	f04f 0900 	mov.w	r9, #0
 8007e3e:	e7db      	b.n	8007df8 <_printf_float+0x154>
 8007e40:	b913      	cbnz	r3, 8007e48 <_printf_float+0x1a4>
 8007e42:	6822      	ldr	r2, [r4, #0]
 8007e44:	07d2      	lsls	r2, r2, #31
 8007e46:	d501      	bpl.n	8007e4c <_printf_float+0x1a8>
 8007e48:	3302      	adds	r3, #2
 8007e4a:	e7f4      	b.n	8007e36 <_printf_float+0x192>
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	e7f2      	b.n	8007e36 <_printf_float+0x192>
 8007e50:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007e54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e56:	4299      	cmp	r1, r3
 8007e58:	db05      	blt.n	8007e66 <_printf_float+0x1c2>
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	6121      	str	r1, [r4, #16]
 8007e5e:	07d8      	lsls	r0, r3, #31
 8007e60:	d5ea      	bpl.n	8007e38 <_printf_float+0x194>
 8007e62:	1c4b      	adds	r3, r1, #1
 8007e64:	e7e7      	b.n	8007e36 <_printf_float+0x192>
 8007e66:	2900      	cmp	r1, #0
 8007e68:	bfd4      	ite	le
 8007e6a:	f1c1 0202 	rsble	r2, r1, #2
 8007e6e:	2201      	movgt	r2, #1
 8007e70:	4413      	add	r3, r2
 8007e72:	e7e0      	b.n	8007e36 <_printf_float+0x192>
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	055a      	lsls	r2, r3, #21
 8007e78:	d407      	bmi.n	8007e8a <_printf_float+0x1e6>
 8007e7a:	6923      	ldr	r3, [r4, #16]
 8007e7c:	4642      	mov	r2, r8
 8007e7e:	4631      	mov	r1, r6
 8007e80:	4628      	mov	r0, r5
 8007e82:	47b8      	blx	r7
 8007e84:	3001      	adds	r0, #1
 8007e86:	d12b      	bne.n	8007ee0 <_printf_float+0x23c>
 8007e88:	e767      	b.n	8007d5a <_printf_float+0xb6>
 8007e8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007e8e:	f240 80dd 	bls.w	800804c <_printf_float+0x3a8>
 8007e92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007e96:	2200      	movs	r2, #0
 8007e98:	2300      	movs	r3, #0
 8007e9a:	f7f8 fe15 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	d033      	beq.n	8007f0a <_printf_float+0x266>
 8007ea2:	4a37      	ldr	r2, [pc, #220]	@ (8007f80 <_printf_float+0x2dc>)
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	4631      	mov	r1, r6
 8007ea8:	4628      	mov	r0, r5
 8007eaa:	47b8      	blx	r7
 8007eac:	3001      	adds	r0, #1
 8007eae:	f43f af54 	beq.w	8007d5a <_printf_float+0xb6>
 8007eb2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007eb6:	4543      	cmp	r3, r8
 8007eb8:	db02      	blt.n	8007ec0 <_printf_float+0x21c>
 8007eba:	6823      	ldr	r3, [r4, #0]
 8007ebc:	07d8      	lsls	r0, r3, #31
 8007ebe:	d50f      	bpl.n	8007ee0 <_printf_float+0x23c>
 8007ec0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ec4:	4631      	mov	r1, r6
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	47b8      	blx	r7
 8007eca:	3001      	adds	r0, #1
 8007ecc:	f43f af45 	beq.w	8007d5a <_printf_float+0xb6>
 8007ed0:	f04f 0900 	mov.w	r9, #0
 8007ed4:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007ed8:	f104 0a1a 	add.w	sl, r4, #26
 8007edc:	45c8      	cmp	r8, r9
 8007ede:	dc09      	bgt.n	8007ef4 <_printf_float+0x250>
 8007ee0:	6823      	ldr	r3, [r4, #0]
 8007ee2:	079b      	lsls	r3, r3, #30
 8007ee4:	f100 8103 	bmi.w	80080ee <_printf_float+0x44a>
 8007ee8:	68e0      	ldr	r0, [r4, #12]
 8007eea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007eec:	4298      	cmp	r0, r3
 8007eee:	bfb8      	it	lt
 8007ef0:	4618      	movlt	r0, r3
 8007ef2:	e734      	b.n	8007d5e <_printf_float+0xba>
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	4652      	mov	r2, sl
 8007ef8:	4631      	mov	r1, r6
 8007efa:	4628      	mov	r0, r5
 8007efc:	47b8      	blx	r7
 8007efe:	3001      	adds	r0, #1
 8007f00:	f43f af2b 	beq.w	8007d5a <_printf_float+0xb6>
 8007f04:	f109 0901 	add.w	r9, r9, #1
 8007f08:	e7e8      	b.n	8007edc <_printf_float+0x238>
 8007f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	dc39      	bgt.n	8007f84 <_printf_float+0x2e0>
 8007f10:	4a1b      	ldr	r2, [pc, #108]	@ (8007f80 <_printf_float+0x2dc>)
 8007f12:	2301      	movs	r3, #1
 8007f14:	4631      	mov	r1, r6
 8007f16:	4628      	mov	r0, r5
 8007f18:	47b8      	blx	r7
 8007f1a:	3001      	adds	r0, #1
 8007f1c:	f43f af1d 	beq.w	8007d5a <_printf_float+0xb6>
 8007f20:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007f24:	ea59 0303 	orrs.w	r3, r9, r3
 8007f28:	d102      	bne.n	8007f30 <_printf_float+0x28c>
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	07d9      	lsls	r1, r3, #31
 8007f2e:	d5d7      	bpl.n	8007ee0 <_printf_float+0x23c>
 8007f30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f34:	4631      	mov	r1, r6
 8007f36:	4628      	mov	r0, r5
 8007f38:	47b8      	blx	r7
 8007f3a:	3001      	adds	r0, #1
 8007f3c:	f43f af0d 	beq.w	8007d5a <_printf_float+0xb6>
 8007f40:	f04f 0a00 	mov.w	sl, #0
 8007f44:	f104 0b1a 	add.w	fp, r4, #26
 8007f48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f4a:	425b      	negs	r3, r3
 8007f4c:	4553      	cmp	r3, sl
 8007f4e:	dc01      	bgt.n	8007f54 <_printf_float+0x2b0>
 8007f50:	464b      	mov	r3, r9
 8007f52:	e793      	b.n	8007e7c <_printf_float+0x1d8>
 8007f54:	2301      	movs	r3, #1
 8007f56:	465a      	mov	r2, fp
 8007f58:	4631      	mov	r1, r6
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	47b8      	blx	r7
 8007f5e:	3001      	adds	r0, #1
 8007f60:	f43f aefb 	beq.w	8007d5a <_printf_float+0xb6>
 8007f64:	f10a 0a01 	add.w	sl, sl, #1
 8007f68:	e7ee      	b.n	8007f48 <_printf_float+0x2a4>
 8007f6a:	bf00      	nop
 8007f6c:	7fefffff 	.word	0x7fefffff
 8007f70:	0800aae8 	.word	0x0800aae8
 8007f74:	0800aaec 	.word	0x0800aaec
 8007f78:	0800aaf0 	.word	0x0800aaf0
 8007f7c:	0800aaf4 	.word	0x0800aaf4
 8007f80:	0800aaf8 	.word	0x0800aaf8
 8007f84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007f86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007f8a:	4553      	cmp	r3, sl
 8007f8c:	bfa8      	it	ge
 8007f8e:	4653      	movge	r3, sl
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	4699      	mov	r9, r3
 8007f94:	dc36      	bgt.n	8008004 <_printf_float+0x360>
 8007f96:	f04f 0b00 	mov.w	fp, #0
 8007f9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f9e:	f104 021a 	add.w	r2, r4, #26
 8007fa2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007fa4:	9306      	str	r3, [sp, #24]
 8007fa6:	eba3 0309 	sub.w	r3, r3, r9
 8007faa:	455b      	cmp	r3, fp
 8007fac:	dc31      	bgt.n	8008012 <_printf_float+0x36e>
 8007fae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fb0:	459a      	cmp	sl, r3
 8007fb2:	dc3a      	bgt.n	800802a <_printf_float+0x386>
 8007fb4:	6823      	ldr	r3, [r4, #0]
 8007fb6:	07da      	lsls	r2, r3, #31
 8007fb8:	d437      	bmi.n	800802a <_printf_float+0x386>
 8007fba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fbc:	ebaa 0903 	sub.w	r9, sl, r3
 8007fc0:	9b06      	ldr	r3, [sp, #24]
 8007fc2:	ebaa 0303 	sub.w	r3, sl, r3
 8007fc6:	4599      	cmp	r9, r3
 8007fc8:	bfa8      	it	ge
 8007fca:	4699      	movge	r9, r3
 8007fcc:	f1b9 0f00 	cmp.w	r9, #0
 8007fd0:	dc33      	bgt.n	800803a <_printf_float+0x396>
 8007fd2:	f04f 0800 	mov.w	r8, #0
 8007fd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007fda:	f104 0b1a 	add.w	fp, r4, #26
 8007fde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007fe0:	ebaa 0303 	sub.w	r3, sl, r3
 8007fe4:	eba3 0309 	sub.w	r3, r3, r9
 8007fe8:	4543      	cmp	r3, r8
 8007fea:	f77f af79 	ble.w	8007ee0 <_printf_float+0x23c>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	465a      	mov	r2, fp
 8007ff2:	4631      	mov	r1, r6
 8007ff4:	4628      	mov	r0, r5
 8007ff6:	47b8      	blx	r7
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	f43f aeae 	beq.w	8007d5a <_printf_float+0xb6>
 8007ffe:	f108 0801 	add.w	r8, r8, #1
 8008002:	e7ec      	b.n	8007fde <_printf_float+0x33a>
 8008004:	4642      	mov	r2, r8
 8008006:	4631      	mov	r1, r6
 8008008:	4628      	mov	r0, r5
 800800a:	47b8      	blx	r7
 800800c:	3001      	adds	r0, #1
 800800e:	d1c2      	bne.n	8007f96 <_printf_float+0x2f2>
 8008010:	e6a3      	b.n	8007d5a <_printf_float+0xb6>
 8008012:	2301      	movs	r3, #1
 8008014:	4631      	mov	r1, r6
 8008016:	4628      	mov	r0, r5
 8008018:	9206      	str	r2, [sp, #24]
 800801a:	47b8      	blx	r7
 800801c:	3001      	adds	r0, #1
 800801e:	f43f ae9c 	beq.w	8007d5a <_printf_float+0xb6>
 8008022:	9a06      	ldr	r2, [sp, #24]
 8008024:	f10b 0b01 	add.w	fp, fp, #1
 8008028:	e7bb      	b.n	8007fa2 <_printf_float+0x2fe>
 800802a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800802e:	4631      	mov	r1, r6
 8008030:	4628      	mov	r0, r5
 8008032:	47b8      	blx	r7
 8008034:	3001      	adds	r0, #1
 8008036:	d1c0      	bne.n	8007fba <_printf_float+0x316>
 8008038:	e68f      	b.n	8007d5a <_printf_float+0xb6>
 800803a:	9a06      	ldr	r2, [sp, #24]
 800803c:	464b      	mov	r3, r9
 800803e:	4442      	add	r2, r8
 8008040:	4631      	mov	r1, r6
 8008042:	4628      	mov	r0, r5
 8008044:	47b8      	blx	r7
 8008046:	3001      	adds	r0, #1
 8008048:	d1c3      	bne.n	8007fd2 <_printf_float+0x32e>
 800804a:	e686      	b.n	8007d5a <_printf_float+0xb6>
 800804c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008050:	f1ba 0f01 	cmp.w	sl, #1
 8008054:	dc01      	bgt.n	800805a <_printf_float+0x3b6>
 8008056:	07db      	lsls	r3, r3, #31
 8008058:	d536      	bpl.n	80080c8 <_printf_float+0x424>
 800805a:	2301      	movs	r3, #1
 800805c:	4642      	mov	r2, r8
 800805e:	4631      	mov	r1, r6
 8008060:	4628      	mov	r0, r5
 8008062:	47b8      	blx	r7
 8008064:	3001      	adds	r0, #1
 8008066:	f43f ae78 	beq.w	8007d5a <_printf_float+0xb6>
 800806a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800806e:	4631      	mov	r1, r6
 8008070:	4628      	mov	r0, r5
 8008072:	47b8      	blx	r7
 8008074:	3001      	adds	r0, #1
 8008076:	f43f ae70 	beq.w	8007d5a <_printf_float+0xb6>
 800807a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800807e:	2200      	movs	r2, #0
 8008080:	2300      	movs	r3, #0
 8008082:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008086:	f7f8 fd1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800808a:	b9c0      	cbnz	r0, 80080be <_printf_float+0x41a>
 800808c:	4653      	mov	r3, sl
 800808e:	f108 0201 	add.w	r2, r8, #1
 8008092:	4631      	mov	r1, r6
 8008094:	4628      	mov	r0, r5
 8008096:	47b8      	blx	r7
 8008098:	3001      	adds	r0, #1
 800809a:	d10c      	bne.n	80080b6 <_printf_float+0x412>
 800809c:	e65d      	b.n	8007d5a <_printf_float+0xb6>
 800809e:	2301      	movs	r3, #1
 80080a0:	465a      	mov	r2, fp
 80080a2:	4631      	mov	r1, r6
 80080a4:	4628      	mov	r0, r5
 80080a6:	47b8      	blx	r7
 80080a8:	3001      	adds	r0, #1
 80080aa:	f43f ae56 	beq.w	8007d5a <_printf_float+0xb6>
 80080ae:	f108 0801 	add.w	r8, r8, #1
 80080b2:	45d0      	cmp	r8, sl
 80080b4:	dbf3      	blt.n	800809e <_printf_float+0x3fa>
 80080b6:	464b      	mov	r3, r9
 80080b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80080bc:	e6df      	b.n	8007e7e <_printf_float+0x1da>
 80080be:	f04f 0800 	mov.w	r8, #0
 80080c2:	f104 0b1a 	add.w	fp, r4, #26
 80080c6:	e7f4      	b.n	80080b2 <_printf_float+0x40e>
 80080c8:	2301      	movs	r3, #1
 80080ca:	4642      	mov	r2, r8
 80080cc:	e7e1      	b.n	8008092 <_printf_float+0x3ee>
 80080ce:	2301      	movs	r3, #1
 80080d0:	464a      	mov	r2, r9
 80080d2:	4631      	mov	r1, r6
 80080d4:	4628      	mov	r0, r5
 80080d6:	47b8      	blx	r7
 80080d8:	3001      	adds	r0, #1
 80080da:	f43f ae3e 	beq.w	8007d5a <_printf_float+0xb6>
 80080de:	f108 0801 	add.w	r8, r8, #1
 80080e2:	68e3      	ldr	r3, [r4, #12]
 80080e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80080e6:	1a5b      	subs	r3, r3, r1
 80080e8:	4543      	cmp	r3, r8
 80080ea:	dcf0      	bgt.n	80080ce <_printf_float+0x42a>
 80080ec:	e6fc      	b.n	8007ee8 <_printf_float+0x244>
 80080ee:	f04f 0800 	mov.w	r8, #0
 80080f2:	f104 0919 	add.w	r9, r4, #25
 80080f6:	e7f4      	b.n	80080e2 <_printf_float+0x43e>

080080f8 <_printf_common>:
 80080f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080fc:	4616      	mov	r6, r2
 80080fe:	4698      	mov	r8, r3
 8008100:	688a      	ldr	r2, [r1, #8]
 8008102:	690b      	ldr	r3, [r1, #16]
 8008104:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008108:	4293      	cmp	r3, r2
 800810a:	bfb8      	it	lt
 800810c:	4613      	movlt	r3, r2
 800810e:	6033      	str	r3, [r6, #0]
 8008110:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008114:	4607      	mov	r7, r0
 8008116:	460c      	mov	r4, r1
 8008118:	b10a      	cbz	r2, 800811e <_printf_common+0x26>
 800811a:	3301      	adds	r3, #1
 800811c:	6033      	str	r3, [r6, #0]
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	0699      	lsls	r1, r3, #26
 8008122:	bf42      	ittt	mi
 8008124:	6833      	ldrmi	r3, [r6, #0]
 8008126:	3302      	addmi	r3, #2
 8008128:	6033      	strmi	r3, [r6, #0]
 800812a:	6825      	ldr	r5, [r4, #0]
 800812c:	f015 0506 	ands.w	r5, r5, #6
 8008130:	d106      	bne.n	8008140 <_printf_common+0x48>
 8008132:	f104 0a19 	add.w	sl, r4, #25
 8008136:	68e3      	ldr	r3, [r4, #12]
 8008138:	6832      	ldr	r2, [r6, #0]
 800813a:	1a9b      	subs	r3, r3, r2
 800813c:	42ab      	cmp	r3, r5
 800813e:	dc26      	bgt.n	800818e <_printf_common+0x96>
 8008140:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008144:	6822      	ldr	r2, [r4, #0]
 8008146:	3b00      	subs	r3, #0
 8008148:	bf18      	it	ne
 800814a:	2301      	movne	r3, #1
 800814c:	0692      	lsls	r2, r2, #26
 800814e:	d42b      	bmi.n	80081a8 <_printf_common+0xb0>
 8008150:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008154:	4641      	mov	r1, r8
 8008156:	4638      	mov	r0, r7
 8008158:	47c8      	blx	r9
 800815a:	3001      	adds	r0, #1
 800815c:	d01e      	beq.n	800819c <_printf_common+0xa4>
 800815e:	6823      	ldr	r3, [r4, #0]
 8008160:	6922      	ldr	r2, [r4, #16]
 8008162:	f003 0306 	and.w	r3, r3, #6
 8008166:	2b04      	cmp	r3, #4
 8008168:	bf02      	ittt	eq
 800816a:	68e5      	ldreq	r5, [r4, #12]
 800816c:	6833      	ldreq	r3, [r6, #0]
 800816e:	1aed      	subeq	r5, r5, r3
 8008170:	68a3      	ldr	r3, [r4, #8]
 8008172:	bf0c      	ite	eq
 8008174:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008178:	2500      	movne	r5, #0
 800817a:	4293      	cmp	r3, r2
 800817c:	bfc4      	itt	gt
 800817e:	1a9b      	subgt	r3, r3, r2
 8008180:	18ed      	addgt	r5, r5, r3
 8008182:	2600      	movs	r6, #0
 8008184:	341a      	adds	r4, #26
 8008186:	42b5      	cmp	r5, r6
 8008188:	d11a      	bne.n	80081c0 <_printf_common+0xc8>
 800818a:	2000      	movs	r0, #0
 800818c:	e008      	b.n	80081a0 <_printf_common+0xa8>
 800818e:	2301      	movs	r3, #1
 8008190:	4652      	mov	r2, sl
 8008192:	4641      	mov	r1, r8
 8008194:	4638      	mov	r0, r7
 8008196:	47c8      	blx	r9
 8008198:	3001      	adds	r0, #1
 800819a:	d103      	bne.n	80081a4 <_printf_common+0xac>
 800819c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a4:	3501      	adds	r5, #1
 80081a6:	e7c6      	b.n	8008136 <_printf_common+0x3e>
 80081a8:	18e1      	adds	r1, r4, r3
 80081aa:	1c5a      	adds	r2, r3, #1
 80081ac:	2030      	movs	r0, #48	@ 0x30
 80081ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80081b2:	4422      	add	r2, r4
 80081b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80081b8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80081bc:	3302      	adds	r3, #2
 80081be:	e7c7      	b.n	8008150 <_printf_common+0x58>
 80081c0:	2301      	movs	r3, #1
 80081c2:	4622      	mov	r2, r4
 80081c4:	4641      	mov	r1, r8
 80081c6:	4638      	mov	r0, r7
 80081c8:	47c8      	blx	r9
 80081ca:	3001      	adds	r0, #1
 80081cc:	d0e6      	beq.n	800819c <_printf_common+0xa4>
 80081ce:	3601      	adds	r6, #1
 80081d0:	e7d9      	b.n	8008186 <_printf_common+0x8e>
	...

080081d4 <_printf_i>:
 80081d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081d8:	7e0f      	ldrb	r7, [r1, #24]
 80081da:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80081dc:	2f78      	cmp	r7, #120	@ 0x78
 80081de:	4691      	mov	r9, r2
 80081e0:	4680      	mov	r8, r0
 80081e2:	460c      	mov	r4, r1
 80081e4:	469a      	mov	sl, r3
 80081e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80081ea:	d807      	bhi.n	80081fc <_printf_i+0x28>
 80081ec:	2f62      	cmp	r7, #98	@ 0x62
 80081ee:	d80a      	bhi.n	8008206 <_printf_i+0x32>
 80081f0:	2f00      	cmp	r7, #0
 80081f2:	f000 80d2 	beq.w	800839a <_printf_i+0x1c6>
 80081f6:	2f58      	cmp	r7, #88	@ 0x58
 80081f8:	f000 80b9 	beq.w	800836e <_printf_i+0x19a>
 80081fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008200:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008204:	e03a      	b.n	800827c <_printf_i+0xa8>
 8008206:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800820a:	2b15      	cmp	r3, #21
 800820c:	d8f6      	bhi.n	80081fc <_printf_i+0x28>
 800820e:	a101      	add	r1, pc, #4	@ (adr r1, 8008214 <_printf_i+0x40>)
 8008210:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008214:	0800826d 	.word	0x0800826d
 8008218:	08008281 	.word	0x08008281
 800821c:	080081fd 	.word	0x080081fd
 8008220:	080081fd 	.word	0x080081fd
 8008224:	080081fd 	.word	0x080081fd
 8008228:	080081fd 	.word	0x080081fd
 800822c:	08008281 	.word	0x08008281
 8008230:	080081fd 	.word	0x080081fd
 8008234:	080081fd 	.word	0x080081fd
 8008238:	080081fd 	.word	0x080081fd
 800823c:	080081fd 	.word	0x080081fd
 8008240:	08008381 	.word	0x08008381
 8008244:	080082ab 	.word	0x080082ab
 8008248:	0800833b 	.word	0x0800833b
 800824c:	080081fd 	.word	0x080081fd
 8008250:	080081fd 	.word	0x080081fd
 8008254:	080083a3 	.word	0x080083a3
 8008258:	080081fd 	.word	0x080081fd
 800825c:	080082ab 	.word	0x080082ab
 8008260:	080081fd 	.word	0x080081fd
 8008264:	080081fd 	.word	0x080081fd
 8008268:	08008343 	.word	0x08008343
 800826c:	6833      	ldr	r3, [r6, #0]
 800826e:	1d1a      	adds	r2, r3, #4
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	6032      	str	r2, [r6, #0]
 8008274:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008278:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800827c:	2301      	movs	r3, #1
 800827e:	e09d      	b.n	80083bc <_printf_i+0x1e8>
 8008280:	6833      	ldr	r3, [r6, #0]
 8008282:	6820      	ldr	r0, [r4, #0]
 8008284:	1d19      	adds	r1, r3, #4
 8008286:	6031      	str	r1, [r6, #0]
 8008288:	0606      	lsls	r6, r0, #24
 800828a:	d501      	bpl.n	8008290 <_printf_i+0xbc>
 800828c:	681d      	ldr	r5, [r3, #0]
 800828e:	e003      	b.n	8008298 <_printf_i+0xc4>
 8008290:	0645      	lsls	r5, r0, #25
 8008292:	d5fb      	bpl.n	800828c <_printf_i+0xb8>
 8008294:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008298:	2d00      	cmp	r5, #0
 800829a:	da03      	bge.n	80082a4 <_printf_i+0xd0>
 800829c:	232d      	movs	r3, #45	@ 0x2d
 800829e:	426d      	negs	r5, r5
 80082a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082a4:	4859      	ldr	r0, [pc, #356]	@ (800840c <_printf_i+0x238>)
 80082a6:	230a      	movs	r3, #10
 80082a8:	e011      	b.n	80082ce <_printf_i+0xfa>
 80082aa:	6821      	ldr	r1, [r4, #0]
 80082ac:	6833      	ldr	r3, [r6, #0]
 80082ae:	0608      	lsls	r0, r1, #24
 80082b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80082b4:	d402      	bmi.n	80082bc <_printf_i+0xe8>
 80082b6:	0649      	lsls	r1, r1, #25
 80082b8:	bf48      	it	mi
 80082ba:	b2ad      	uxthmi	r5, r5
 80082bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80082be:	4853      	ldr	r0, [pc, #332]	@ (800840c <_printf_i+0x238>)
 80082c0:	6033      	str	r3, [r6, #0]
 80082c2:	bf14      	ite	ne
 80082c4:	230a      	movne	r3, #10
 80082c6:	2308      	moveq	r3, #8
 80082c8:	2100      	movs	r1, #0
 80082ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80082ce:	6866      	ldr	r6, [r4, #4]
 80082d0:	60a6      	str	r6, [r4, #8]
 80082d2:	2e00      	cmp	r6, #0
 80082d4:	bfa2      	ittt	ge
 80082d6:	6821      	ldrge	r1, [r4, #0]
 80082d8:	f021 0104 	bicge.w	r1, r1, #4
 80082dc:	6021      	strge	r1, [r4, #0]
 80082de:	b90d      	cbnz	r5, 80082e4 <_printf_i+0x110>
 80082e0:	2e00      	cmp	r6, #0
 80082e2:	d04b      	beq.n	800837c <_printf_i+0x1a8>
 80082e4:	4616      	mov	r6, r2
 80082e6:	fbb5 f1f3 	udiv	r1, r5, r3
 80082ea:	fb03 5711 	mls	r7, r3, r1, r5
 80082ee:	5dc7      	ldrb	r7, [r0, r7]
 80082f0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80082f4:	462f      	mov	r7, r5
 80082f6:	42bb      	cmp	r3, r7
 80082f8:	460d      	mov	r5, r1
 80082fa:	d9f4      	bls.n	80082e6 <_printf_i+0x112>
 80082fc:	2b08      	cmp	r3, #8
 80082fe:	d10b      	bne.n	8008318 <_printf_i+0x144>
 8008300:	6823      	ldr	r3, [r4, #0]
 8008302:	07df      	lsls	r7, r3, #31
 8008304:	d508      	bpl.n	8008318 <_printf_i+0x144>
 8008306:	6923      	ldr	r3, [r4, #16]
 8008308:	6861      	ldr	r1, [r4, #4]
 800830a:	4299      	cmp	r1, r3
 800830c:	bfde      	ittt	le
 800830e:	2330      	movle	r3, #48	@ 0x30
 8008310:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008314:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008318:	1b92      	subs	r2, r2, r6
 800831a:	6122      	str	r2, [r4, #16]
 800831c:	f8cd a000 	str.w	sl, [sp]
 8008320:	464b      	mov	r3, r9
 8008322:	aa03      	add	r2, sp, #12
 8008324:	4621      	mov	r1, r4
 8008326:	4640      	mov	r0, r8
 8008328:	f7ff fee6 	bl	80080f8 <_printf_common>
 800832c:	3001      	adds	r0, #1
 800832e:	d14a      	bne.n	80083c6 <_printf_i+0x1f2>
 8008330:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008334:	b004      	add	sp, #16
 8008336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800833a:	6823      	ldr	r3, [r4, #0]
 800833c:	f043 0320 	orr.w	r3, r3, #32
 8008340:	6023      	str	r3, [r4, #0]
 8008342:	4833      	ldr	r0, [pc, #204]	@ (8008410 <_printf_i+0x23c>)
 8008344:	2778      	movs	r7, #120	@ 0x78
 8008346:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800834a:	6823      	ldr	r3, [r4, #0]
 800834c:	6831      	ldr	r1, [r6, #0]
 800834e:	061f      	lsls	r7, r3, #24
 8008350:	f851 5b04 	ldr.w	r5, [r1], #4
 8008354:	d402      	bmi.n	800835c <_printf_i+0x188>
 8008356:	065f      	lsls	r7, r3, #25
 8008358:	bf48      	it	mi
 800835a:	b2ad      	uxthmi	r5, r5
 800835c:	6031      	str	r1, [r6, #0]
 800835e:	07d9      	lsls	r1, r3, #31
 8008360:	bf44      	itt	mi
 8008362:	f043 0320 	orrmi.w	r3, r3, #32
 8008366:	6023      	strmi	r3, [r4, #0]
 8008368:	b11d      	cbz	r5, 8008372 <_printf_i+0x19e>
 800836a:	2310      	movs	r3, #16
 800836c:	e7ac      	b.n	80082c8 <_printf_i+0xf4>
 800836e:	4827      	ldr	r0, [pc, #156]	@ (800840c <_printf_i+0x238>)
 8008370:	e7e9      	b.n	8008346 <_printf_i+0x172>
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	f023 0320 	bic.w	r3, r3, #32
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	e7f6      	b.n	800836a <_printf_i+0x196>
 800837c:	4616      	mov	r6, r2
 800837e:	e7bd      	b.n	80082fc <_printf_i+0x128>
 8008380:	6833      	ldr	r3, [r6, #0]
 8008382:	6825      	ldr	r5, [r4, #0]
 8008384:	6961      	ldr	r1, [r4, #20]
 8008386:	1d18      	adds	r0, r3, #4
 8008388:	6030      	str	r0, [r6, #0]
 800838a:	062e      	lsls	r6, r5, #24
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	d501      	bpl.n	8008394 <_printf_i+0x1c0>
 8008390:	6019      	str	r1, [r3, #0]
 8008392:	e002      	b.n	800839a <_printf_i+0x1c6>
 8008394:	0668      	lsls	r0, r5, #25
 8008396:	d5fb      	bpl.n	8008390 <_printf_i+0x1bc>
 8008398:	8019      	strh	r1, [r3, #0]
 800839a:	2300      	movs	r3, #0
 800839c:	6123      	str	r3, [r4, #16]
 800839e:	4616      	mov	r6, r2
 80083a0:	e7bc      	b.n	800831c <_printf_i+0x148>
 80083a2:	6833      	ldr	r3, [r6, #0]
 80083a4:	1d1a      	adds	r2, r3, #4
 80083a6:	6032      	str	r2, [r6, #0]
 80083a8:	681e      	ldr	r6, [r3, #0]
 80083aa:	6862      	ldr	r2, [r4, #4]
 80083ac:	2100      	movs	r1, #0
 80083ae:	4630      	mov	r0, r6
 80083b0:	f7f7 ff0e 	bl	80001d0 <memchr>
 80083b4:	b108      	cbz	r0, 80083ba <_printf_i+0x1e6>
 80083b6:	1b80      	subs	r0, r0, r6
 80083b8:	6060      	str	r0, [r4, #4]
 80083ba:	6863      	ldr	r3, [r4, #4]
 80083bc:	6123      	str	r3, [r4, #16]
 80083be:	2300      	movs	r3, #0
 80083c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80083c4:	e7aa      	b.n	800831c <_printf_i+0x148>
 80083c6:	6923      	ldr	r3, [r4, #16]
 80083c8:	4632      	mov	r2, r6
 80083ca:	4649      	mov	r1, r9
 80083cc:	4640      	mov	r0, r8
 80083ce:	47d0      	blx	sl
 80083d0:	3001      	adds	r0, #1
 80083d2:	d0ad      	beq.n	8008330 <_printf_i+0x15c>
 80083d4:	6823      	ldr	r3, [r4, #0]
 80083d6:	079b      	lsls	r3, r3, #30
 80083d8:	d413      	bmi.n	8008402 <_printf_i+0x22e>
 80083da:	68e0      	ldr	r0, [r4, #12]
 80083dc:	9b03      	ldr	r3, [sp, #12]
 80083de:	4298      	cmp	r0, r3
 80083e0:	bfb8      	it	lt
 80083e2:	4618      	movlt	r0, r3
 80083e4:	e7a6      	b.n	8008334 <_printf_i+0x160>
 80083e6:	2301      	movs	r3, #1
 80083e8:	4632      	mov	r2, r6
 80083ea:	4649      	mov	r1, r9
 80083ec:	4640      	mov	r0, r8
 80083ee:	47d0      	blx	sl
 80083f0:	3001      	adds	r0, #1
 80083f2:	d09d      	beq.n	8008330 <_printf_i+0x15c>
 80083f4:	3501      	adds	r5, #1
 80083f6:	68e3      	ldr	r3, [r4, #12]
 80083f8:	9903      	ldr	r1, [sp, #12]
 80083fa:	1a5b      	subs	r3, r3, r1
 80083fc:	42ab      	cmp	r3, r5
 80083fe:	dcf2      	bgt.n	80083e6 <_printf_i+0x212>
 8008400:	e7eb      	b.n	80083da <_printf_i+0x206>
 8008402:	2500      	movs	r5, #0
 8008404:	f104 0619 	add.w	r6, r4, #25
 8008408:	e7f5      	b.n	80083f6 <_printf_i+0x222>
 800840a:	bf00      	nop
 800840c:	0800aafa 	.word	0x0800aafa
 8008410:	0800ab0b 	.word	0x0800ab0b

08008414 <sniprintf>:
 8008414:	b40c      	push	{r2, r3}
 8008416:	b530      	push	{r4, r5, lr}
 8008418:	4b17      	ldr	r3, [pc, #92]	@ (8008478 <sniprintf+0x64>)
 800841a:	1e0c      	subs	r4, r1, #0
 800841c:	681d      	ldr	r5, [r3, #0]
 800841e:	b09d      	sub	sp, #116	@ 0x74
 8008420:	da08      	bge.n	8008434 <sniprintf+0x20>
 8008422:	238b      	movs	r3, #139	@ 0x8b
 8008424:	602b      	str	r3, [r5, #0]
 8008426:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800842a:	b01d      	add	sp, #116	@ 0x74
 800842c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008430:	b002      	add	sp, #8
 8008432:	4770      	bx	lr
 8008434:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008438:	f8ad 3014 	strh.w	r3, [sp, #20]
 800843c:	bf14      	ite	ne
 800843e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8008442:	4623      	moveq	r3, r4
 8008444:	9304      	str	r3, [sp, #16]
 8008446:	9307      	str	r3, [sp, #28]
 8008448:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800844c:	9002      	str	r0, [sp, #8]
 800844e:	9006      	str	r0, [sp, #24]
 8008450:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008454:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008456:	ab21      	add	r3, sp, #132	@ 0x84
 8008458:	a902      	add	r1, sp, #8
 800845a:	4628      	mov	r0, r5
 800845c:	9301      	str	r3, [sp, #4]
 800845e:	f000 ffbf 	bl	80093e0 <_svfiprintf_r>
 8008462:	1c43      	adds	r3, r0, #1
 8008464:	bfbc      	itt	lt
 8008466:	238b      	movlt	r3, #139	@ 0x8b
 8008468:	602b      	strlt	r3, [r5, #0]
 800846a:	2c00      	cmp	r4, #0
 800846c:	d0dd      	beq.n	800842a <sniprintf+0x16>
 800846e:	9b02      	ldr	r3, [sp, #8]
 8008470:	2200      	movs	r2, #0
 8008472:	701a      	strb	r2, [r3, #0]
 8008474:	e7d9      	b.n	800842a <sniprintf+0x16>
 8008476:	bf00      	nop
 8008478:	20000058 	.word	0x20000058

0800847c <std>:
 800847c:	2300      	movs	r3, #0
 800847e:	b510      	push	{r4, lr}
 8008480:	4604      	mov	r4, r0
 8008482:	e9c0 3300 	strd	r3, r3, [r0]
 8008486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800848a:	6083      	str	r3, [r0, #8]
 800848c:	8181      	strh	r1, [r0, #12]
 800848e:	6643      	str	r3, [r0, #100]	@ 0x64
 8008490:	81c2      	strh	r2, [r0, #14]
 8008492:	6183      	str	r3, [r0, #24]
 8008494:	4619      	mov	r1, r3
 8008496:	2208      	movs	r2, #8
 8008498:	305c      	adds	r0, #92	@ 0x5c
 800849a:	f000 f8b1 	bl	8008600 <memset>
 800849e:	4b0d      	ldr	r3, [pc, #52]	@ (80084d4 <std+0x58>)
 80084a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80084a2:	4b0d      	ldr	r3, [pc, #52]	@ (80084d8 <std+0x5c>)
 80084a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80084a6:	4b0d      	ldr	r3, [pc, #52]	@ (80084dc <std+0x60>)
 80084a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80084aa:	4b0d      	ldr	r3, [pc, #52]	@ (80084e0 <std+0x64>)
 80084ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80084ae:	4b0d      	ldr	r3, [pc, #52]	@ (80084e4 <std+0x68>)
 80084b0:	6224      	str	r4, [r4, #32]
 80084b2:	429c      	cmp	r4, r3
 80084b4:	d006      	beq.n	80084c4 <std+0x48>
 80084b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80084ba:	4294      	cmp	r4, r2
 80084bc:	d002      	beq.n	80084c4 <std+0x48>
 80084be:	33d0      	adds	r3, #208	@ 0xd0
 80084c0:	429c      	cmp	r4, r3
 80084c2:	d105      	bne.n	80084d0 <std+0x54>
 80084c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80084c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084cc:	f000 b8ce 	b.w	800866c <__retarget_lock_init_recursive>
 80084d0:	bd10      	pop	{r4, pc}
 80084d2:	bf00      	nop
 80084d4:	08009fa1 	.word	0x08009fa1
 80084d8:	08009fc3 	.word	0x08009fc3
 80084dc:	08009ffb 	.word	0x08009ffb
 80084e0:	0800a01f 	.word	0x0800a01f
 80084e4:	20000aa4 	.word	0x20000aa4

080084e8 <stdio_exit_handler>:
 80084e8:	4a02      	ldr	r2, [pc, #8]	@ (80084f4 <stdio_exit_handler+0xc>)
 80084ea:	4903      	ldr	r1, [pc, #12]	@ (80084f8 <stdio_exit_handler+0x10>)
 80084ec:	4803      	ldr	r0, [pc, #12]	@ (80084fc <stdio_exit_handler+0x14>)
 80084ee:	f000 b869 	b.w	80085c4 <_fwalk_sglue>
 80084f2:	bf00      	nop
 80084f4:	2000004c 	.word	0x2000004c
 80084f8:	08009835 	.word	0x08009835
 80084fc:	2000005c 	.word	0x2000005c

08008500 <cleanup_stdio>:
 8008500:	6841      	ldr	r1, [r0, #4]
 8008502:	4b0c      	ldr	r3, [pc, #48]	@ (8008534 <cleanup_stdio+0x34>)
 8008504:	4299      	cmp	r1, r3
 8008506:	b510      	push	{r4, lr}
 8008508:	4604      	mov	r4, r0
 800850a:	d001      	beq.n	8008510 <cleanup_stdio+0x10>
 800850c:	f001 f992 	bl	8009834 <_fflush_r>
 8008510:	68a1      	ldr	r1, [r4, #8]
 8008512:	4b09      	ldr	r3, [pc, #36]	@ (8008538 <cleanup_stdio+0x38>)
 8008514:	4299      	cmp	r1, r3
 8008516:	d002      	beq.n	800851e <cleanup_stdio+0x1e>
 8008518:	4620      	mov	r0, r4
 800851a:	f001 f98b 	bl	8009834 <_fflush_r>
 800851e:	68e1      	ldr	r1, [r4, #12]
 8008520:	4b06      	ldr	r3, [pc, #24]	@ (800853c <cleanup_stdio+0x3c>)
 8008522:	4299      	cmp	r1, r3
 8008524:	d004      	beq.n	8008530 <cleanup_stdio+0x30>
 8008526:	4620      	mov	r0, r4
 8008528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800852c:	f001 b982 	b.w	8009834 <_fflush_r>
 8008530:	bd10      	pop	{r4, pc}
 8008532:	bf00      	nop
 8008534:	20000aa4 	.word	0x20000aa4
 8008538:	20000b0c 	.word	0x20000b0c
 800853c:	20000b74 	.word	0x20000b74

08008540 <global_stdio_init.part.0>:
 8008540:	b510      	push	{r4, lr}
 8008542:	4b0b      	ldr	r3, [pc, #44]	@ (8008570 <global_stdio_init.part.0+0x30>)
 8008544:	4c0b      	ldr	r4, [pc, #44]	@ (8008574 <global_stdio_init.part.0+0x34>)
 8008546:	4a0c      	ldr	r2, [pc, #48]	@ (8008578 <global_stdio_init.part.0+0x38>)
 8008548:	601a      	str	r2, [r3, #0]
 800854a:	4620      	mov	r0, r4
 800854c:	2200      	movs	r2, #0
 800854e:	2104      	movs	r1, #4
 8008550:	f7ff ff94 	bl	800847c <std>
 8008554:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008558:	2201      	movs	r2, #1
 800855a:	2109      	movs	r1, #9
 800855c:	f7ff ff8e 	bl	800847c <std>
 8008560:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008564:	2202      	movs	r2, #2
 8008566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800856a:	2112      	movs	r1, #18
 800856c:	f7ff bf86 	b.w	800847c <std>
 8008570:	20000bdc 	.word	0x20000bdc
 8008574:	20000aa4 	.word	0x20000aa4
 8008578:	080084e9 	.word	0x080084e9

0800857c <__sfp_lock_acquire>:
 800857c:	4801      	ldr	r0, [pc, #4]	@ (8008584 <__sfp_lock_acquire+0x8>)
 800857e:	f000 b876 	b.w	800866e <__retarget_lock_acquire_recursive>
 8008582:	bf00      	nop
 8008584:	20000be1 	.word	0x20000be1

08008588 <__sfp_lock_release>:
 8008588:	4801      	ldr	r0, [pc, #4]	@ (8008590 <__sfp_lock_release+0x8>)
 800858a:	f000 b871 	b.w	8008670 <__retarget_lock_release_recursive>
 800858e:	bf00      	nop
 8008590:	20000be1 	.word	0x20000be1

08008594 <__sinit>:
 8008594:	b510      	push	{r4, lr}
 8008596:	4604      	mov	r4, r0
 8008598:	f7ff fff0 	bl	800857c <__sfp_lock_acquire>
 800859c:	6a23      	ldr	r3, [r4, #32]
 800859e:	b11b      	cbz	r3, 80085a8 <__sinit+0x14>
 80085a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085a4:	f7ff bff0 	b.w	8008588 <__sfp_lock_release>
 80085a8:	4b04      	ldr	r3, [pc, #16]	@ (80085bc <__sinit+0x28>)
 80085aa:	6223      	str	r3, [r4, #32]
 80085ac:	4b04      	ldr	r3, [pc, #16]	@ (80085c0 <__sinit+0x2c>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d1f5      	bne.n	80085a0 <__sinit+0xc>
 80085b4:	f7ff ffc4 	bl	8008540 <global_stdio_init.part.0>
 80085b8:	e7f2      	b.n	80085a0 <__sinit+0xc>
 80085ba:	bf00      	nop
 80085bc:	08008501 	.word	0x08008501
 80085c0:	20000bdc 	.word	0x20000bdc

080085c4 <_fwalk_sglue>:
 80085c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085c8:	4607      	mov	r7, r0
 80085ca:	4688      	mov	r8, r1
 80085cc:	4614      	mov	r4, r2
 80085ce:	2600      	movs	r6, #0
 80085d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80085d4:	f1b9 0901 	subs.w	r9, r9, #1
 80085d8:	d505      	bpl.n	80085e6 <_fwalk_sglue+0x22>
 80085da:	6824      	ldr	r4, [r4, #0]
 80085dc:	2c00      	cmp	r4, #0
 80085de:	d1f7      	bne.n	80085d0 <_fwalk_sglue+0xc>
 80085e0:	4630      	mov	r0, r6
 80085e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085e6:	89ab      	ldrh	r3, [r5, #12]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d907      	bls.n	80085fc <_fwalk_sglue+0x38>
 80085ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80085f0:	3301      	adds	r3, #1
 80085f2:	d003      	beq.n	80085fc <_fwalk_sglue+0x38>
 80085f4:	4629      	mov	r1, r5
 80085f6:	4638      	mov	r0, r7
 80085f8:	47c0      	blx	r8
 80085fa:	4306      	orrs	r6, r0
 80085fc:	3568      	adds	r5, #104	@ 0x68
 80085fe:	e7e9      	b.n	80085d4 <_fwalk_sglue+0x10>

08008600 <memset>:
 8008600:	4402      	add	r2, r0
 8008602:	4603      	mov	r3, r0
 8008604:	4293      	cmp	r3, r2
 8008606:	d100      	bne.n	800860a <memset+0xa>
 8008608:	4770      	bx	lr
 800860a:	f803 1b01 	strb.w	r1, [r3], #1
 800860e:	e7f9      	b.n	8008604 <memset+0x4>

08008610 <_localeconv_r>:
 8008610:	4800      	ldr	r0, [pc, #0]	@ (8008614 <_localeconv_r+0x4>)
 8008612:	4770      	bx	lr
 8008614:	20000198 	.word	0x20000198

08008618 <__errno>:
 8008618:	4b01      	ldr	r3, [pc, #4]	@ (8008620 <__errno+0x8>)
 800861a:	6818      	ldr	r0, [r3, #0]
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	20000058 	.word	0x20000058

08008624 <__libc_init_array>:
 8008624:	b570      	push	{r4, r5, r6, lr}
 8008626:	4d0d      	ldr	r5, [pc, #52]	@ (800865c <__libc_init_array+0x38>)
 8008628:	4c0d      	ldr	r4, [pc, #52]	@ (8008660 <__libc_init_array+0x3c>)
 800862a:	1b64      	subs	r4, r4, r5
 800862c:	10a4      	asrs	r4, r4, #2
 800862e:	2600      	movs	r6, #0
 8008630:	42a6      	cmp	r6, r4
 8008632:	d109      	bne.n	8008648 <__libc_init_array+0x24>
 8008634:	4d0b      	ldr	r5, [pc, #44]	@ (8008664 <__libc_init_array+0x40>)
 8008636:	4c0c      	ldr	r4, [pc, #48]	@ (8008668 <__libc_init_array+0x44>)
 8008638:	f002 f8ee 	bl	800a818 <_init>
 800863c:	1b64      	subs	r4, r4, r5
 800863e:	10a4      	asrs	r4, r4, #2
 8008640:	2600      	movs	r6, #0
 8008642:	42a6      	cmp	r6, r4
 8008644:	d105      	bne.n	8008652 <__libc_init_array+0x2e>
 8008646:	bd70      	pop	{r4, r5, r6, pc}
 8008648:	f855 3b04 	ldr.w	r3, [r5], #4
 800864c:	4798      	blx	r3
 800864e:	3601      	adds	r6, #1
 8008650:	e7ee      	b.n	8008630 <__libc_init_array+0xc>
 8008652:	f855 3b04 	ldr.w	r3, [r5], #4
 8008656:	4798      	blx	r3
 8008658:	3601      	adds	r6, #1
 800865a:	e7f2      	b.n	8008642 <__libc_init_array+0x1e>
 800865c:	0800ae60 	.word	0x0800ae60
 8008660:	0800ae60 	.word	0x0800ae60
 8008664:	0800ae60 	.word	0x0800ae60
 8008668:	0800ae64 	.word	0x0800ae64

0800866c <__retarget_lock_init_recursive>:
 800866c:	4770      	bx	lr

0800866e <__retarget_lock_acquire_recursive>:
 800866e:	4770      	bx	lr

08008670 <__retarget_lock_release_recursive>:
 8008670:	4770      	bx	lr

08008672 <memcpy>:
 8008672:	440a      	add	r2, r1
 8008674:	4291      	cmp	r1, r2
 8008676:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800867a:	d100      	bne.n	800867e <memcpy+0xc>
 800867c:	4770      	bx	lr
 800867e:	b510      	push	{r4, lr}
 8008680:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008684:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008688:	4291      	cmp	r1, r2
 800868a:	d1f9      	bne.n	8008680 <memcpy+0xe>
 800868c:	bd10      	pop	{r4, pc}

0800868e <quorem>:
 800868e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008692:	6903      	ldr	r3, [r0, #16]
 8008694:	690c      	ldr	r4, [r1, #16]
 8008696:	42a3      	cmp	r3, r4
 8008698:	4607      	mov	r7, r0
 800869a:	db7e      	blt.n	800879a <quorem+0x10c>
 800869c:	3c01      	subs	r4, #1
 800869e:	f101 0814 	add.w	r8, r1, #20
 80086a2:	00a3      	lsls	r3, r4, #2
 80086a4:	f100 0514 	add.w	r5, r0, #20
 80086a8:	9300      	str	r3, [sp, #0]
 80086aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80086ae:	9301      	str	r3, [sp, #4]
 80086b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80086b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80086b8:	3301      	adds	r3, #1
 80086ba:	429a      	cmp	r2, r3
 80086bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80086c0:	fbb2 f6f3 	udiv	r6, r2, r3
 80086c4:	d32e      	bcc.n	8008724 <quorem+0x96>
 80086c6:	f04f 0a00 	mov.w	sl, #0
 80086ca:	46c4      	mov	ip, r8
 80086cc:	46ae      	mov	lr, r5
 80086ce:	46d3      	mov	fp, sl
 80086d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80086d4:	b298      	uxth	r0, r3
 80086d6:	fb06 a000 	mla	r0, r6, r0, sl
 80086da:	0c02      	lsrs	r2, r0, #16
 80086dc:	0c1b      	lsrs	r3, r3, #16
 80086de:	fb06 2303 	mla	r3, r6, r3, r2
 80086e2:	f8de 2000 	ldr.w	r2, [lr]
 80086e6:	b280      	uxth	r0, r0
 80086e8:	b292      	uxth	r2, r2
 80086ea:	1a12      	subs	r2, r2, r0
 80086ec:	445a      	add	r2, fp
 80086ee:	f8de 0000 	ldr.w	r0, [lr]
 80086f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80086fc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008700:	b292      	uxth	r2, r2
 8008702:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008706:	45e1      	cmp	r9, ip
 8008708:	f84e 2b04 	str.w	r2, [lr], #4
 800870c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008710:	d2de      	bcs.n	80086d0 <quorem+0x42>
 8008712:	9b00      	ldr	r3, [sp, #0]
 8008714:	58eb      	ldr	r3, [r5, r3]
 8008716:	b92b      	cbnz	r3, 8008724 <quorem+0x96>
 8008718:	9b01      	ldr	r3, [sp, #4]
 800871a:	3b04      	subs	r3, #4
 800871c:	429d      	cmp	r5, r3
 800871e:	461a      	mov	r2, r3
 8008720:	d32f      	bcc.n	8008782 <quorem+0xf4>
 8008722:	613c      	str	r4, [r7, #16]
 8008724:	4638      	mov	r0, r7
 8008726:	f001 fb33 	bl	8009d90 <__mcmp>
 800872a:	2800      	cmp	r0, #0
 800872c:	db25      	blt.n	800877a <quorem+0xec>
 800872e:	4629      	mov	r1, r5
 8008730:	2000      	movs	r0, #0
 8008732:	f858 2b04 	ldr.w	r2, [r8], #4
 8008736:	f8d1 c000 	ldr.w	ip, [r1]
 800873a:	fa1f fe82 	uxth.w	lr, r2
 800873e:	fa1f f38c 	uxth.w	r3, ip
 8008742:	eba3 030e 	sub.w	r3, r3, lr
 8008746:	4403      	add	r3, r0
 8008748:	0c12      	lsrs	r2, r2, #16
 800874a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800874e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008752:	b29b      	uxth	r3, r3
 8008754:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008758:	45c1      	cmp	r9, r8
 800875a:	f841 3b04 	str.w	r3, [r1], #4
 800875e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008762:	d2e6      	bcs.n	8008732 <quorem+0xa4>
 8008764:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008768:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800876c:	b922      	cbnz	r2, 8008778 <quorem+0xea>
 800876e:	3b04      	subs	r3, #4
 8008770:	429d      	cmp	r5, r3
 8008772:	461a      	mov	r2, r3
 8008774:	d30b      	bcc.n	800878e <quorem+0x100>
 8008776:	613c      	str	r4, [r7, #16]
 8008778:	3601      	adds	r6, #1
 800877a:	4630      	mov	r0, r6
 800877c:	b003      	add	sp, #12
 800877e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008782:	6812      	ldr	r2, [r2, #0]
 8008784:	3b04      	subs	r3, #4
 8008786:	2a00      	cmp	r2, #0
 8008788:	d1cb      	bne.n	8008722 <quorem+0x94>
 800878a:	3c01      	subs	r4, #1
 800878c:	e7c6      	b.n	800871c <quorem+0x8e>
 800878e:	6812      	ldr	r2, [r2, #0]
 8008790:	3b04      	subs	r3, #4
 8008792:	2a00      	cmp	r2, #0
 8008794:	d1ef      	bne.n	8008776 <quorem+0xe8>
 8008796:	3c01      	subs	r4, #1
 8008798:	e7ea      	b.n	8008770 <quorem+0xe2>
 800879a:	2000      	movs	r0, #0
 800879c:	e7ee      	b.n	800877c <quorem+0xee>
	...

080087a0 <_dtoa_r>:
 80087a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087a4:	69c7      	ldr	r7, [r0, #28]
 80087a6:	b099      	sub	sp, #100	@ 0x64
 80087a8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80087ac:	ec55 4b10 	vmov	r4, r5, d0
 80087b0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80087b2:	9109      	str	r1, [sp, #36]	@ 0x24
 80087b4:	4683      	mov	fp, r0
 80087b6:	920e      	str	r2, [sp, #56]	@ 0x38
 80087b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80087ba:	b97f      	cbnz	r7, 80087dc <_dtoa_r+0x3c>
 80087bc:	2010      	movs	r0, #16
 80087be:	f000 ff0b 	bl	80095d8 <malloc>
 80087c2:	4602      	mov	r2, r0
 80087c4:	f8cb 001c 	str.w	r0, [fp, #28]
 80087c8:	b920      	cbnz	r0, 80087d4 <_dtoa_r+0x34>
 80087ca:	4ba7      	ldr	r3, [pc, #668]	@ (8008a68 <_dtoa_r+0x2c8>)
 80087cc:	21ef      	movs	r1, #239	@ 0xef
 80087ce:	48a7      	ldr	r0, [pc, #668]	@ (8008a6c <_dtoa_r+0x2cc>)
 80087d0:	f001 fcc8 	bl	800a164 <__assert_func>
 80087d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80087d8:	6007      	str	r7, [r0, #0]
 80087da:	60c7      	str	r7, [r0, #12]
 80087dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80087e0:	6819      	ldr	r1, [r3, #0]
 80087e2:	b159      	cbz	r1, 80087fc <_dtoa_r+0x5c>
 80087e4:	685a      	ldr	r2, [r3, #4]
 80087e6:	604a      	str	r2, [r1, #4]
 80087e8:	2301      	movs	r3, #1
 80087ea:	4093      	lsls	r3, r2
 80087ec:	608b      	str	r3, [r1, #8]
 80087ee:	4658      	mov	r0, fp
 80087f0:	f001 f894 	bl	800991c <_Bfree>
 80087f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80087f8:	2200      	movs	r2, #0
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	1e2b      	subs	r3, r5, #0
 80087fe:	bfb9      	ittee	lt
 8008800:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008804:	9303      	strlt	r3, [sp, #12]
 8008806:	2300      	movge	r3, #0
 8008808:	6033      	strge	r3, [r6, #0]
 800880a:	9f03      	ldr	r7, [sp, #12]
 800880c:	4b98      	ldr	r3, [pc, #608]	@ (8008a70 <_dtoa_r+0x2d0>)
 800880e:	bfbc      	itt	lt
 8008810:	2201      	movlt	r2, #1
 8008812:	6032      	strlt	r2, [r6, #0]
 8008814:	43bb      	bics	r3, r7
 8008816:	d112      	bne.n	800883e <_dtoa_r+0x9e>
 8008818:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800881a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800881e:	6013      	str	r3, [r2, #0]
 8008820:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008824:	4323      	orrs	r3, r4
 8008826:	f000 854d 	beq.w	80092c4 <_dtoa_r+0xb24>
 800882a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800882c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008a84 <_dtoa_r+0x2e4>
 8008830:	2b00      	cmp	r3, #0
 8008832:	f000 854f 	beq.w	80092d4 <_dtoa_r+0xb34>
 8008836:	f10a 0303 	add.w	r3, sl, #3
 800883a:	f000 bd49 	b.w	80092d0 <_dtoa_r+0xb30>
 800883e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008842:	2200      	movs	r2, #0
 8008844:	ec51 0b17 	vmov	r0, r1, d7
 8008848:	2300      	movs	r3, #0
 800884a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800884e:	f7f8 f93b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008852:	4680      	mov	r8, r0
 8008854:	b158      	cbz	r0, 800886e <_dtoa_r+0xce>
 8008856:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008858:	2301      	movs	r3, #1
 800885a:	6013      	str	r3, [r2, #0]
 800885c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800885e:	b113      	cbz	r3, 8008866 <_dtoa_r+0xc6>
 8008860:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008862:	4b84      	ldr	r3, [pc, #528]	@ (8008a74 <_dtoa_r+0x2d4>)
 8008864:	6013      	str	r3, [r2, #0]
 8008866:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008a88 <_dtoa_r+0x2e8>
 800886a:	f000 bd33 	b.w	80092d4 <_dtoa_r+0xb34>
 800886e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008872:	aa16      	add	r2, sp, #88	@ 0x58
 8008874:	a917      	add	r1, sp, #92	@ 0x5c
 8008876:	4658      	mov	r0, fp
 8008878:	f001 fb3a 	bl	8009ef0 <__d2b>
 800887c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008880:	4681      	mov	r9, r0
 8008882:	2e00      	cmp	r6, #0
 8008884:	d077      	beq.n	8008976 <_dtoa_r+0x1d6>
 8008886:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008888:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800888c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008890:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008894:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008898:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800889c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80088a0:	4619      	mov	r1, r3
 80088a2:	2200      	movs	r2, #0
 80088a4:	4b74      	ldr	r3, [pc, #464]	@ (8008a78 <_dtoa_r+0x2d8>)
 80088a6:	f7f7 fcef 	bl	8000288 <__aeabi_dsub>
 80088aa:	a369      	add	r3, pc, #420	@ (adr r3, 8008a50 <_dtoa_r+0x2b0>)
 80088ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088b0:	f7f7 fea2 	bl	80005f8 <__aeabi_dmul>
 80088b4:	a368      	add	r3, pc, #416	@ (adr r3, 8008a58 <_dtoa_r+0x2b8>)
 80088b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ba:	f7f7 fce7 	bl	800028c <__adddf3>
 80088be:	4604      	mov	r4, r0
 80088c0:	4630      	mov	r0, r6
 80088c2:	460d      	mov	r5, r1
 80088c4:	f7f7 fe2e 	bl	8000524 <__aeabi_i2d>
 80088c8:	a365      	add	r3, pc, #404	@ (adr r3, 8008a60 <_dtoa_r+0x2c0>)
 80088ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ce:	f7f7 fe93 	bl	80005f8 <__aeabi_dmul>
 80088d2:	4602      	mov	r2, r0
 80088d4:	460b      	mov	r3, r1
 80088d6:	4620      	mov	r0, r4
 80088d8:	4629      	mov	r1, r5
 80088da:	f7f7 fcd7 	bl	800028c <__adddf3>
 80088de:	4604      	mov	r4, r0
 80088e0:	460d      	mov	r5, r1
 80088e2:	f7f8 f939 	bl	8000b58 <__aeabi_d2iz>
 80088e6:	2200      	movs	r2, #0
 80088e8:	4607      	mov	r7, r0
 80088ea:	2300      	movs	r3, #0
 80088ec:	4620      	mov	r0, r4
 80088ee:	4629      	mov	r1, r5
 80088f0:	f7f8 f8f4 	bl	8000adc <__aeabi_dcmplt>
 80088f4:	b140      	cbz	r0, 8008908 <_dtoa_r+0x168>
 80088f6:	4638      	mov	r0, r7
 80088f8:	f7f7 fe14 	bl	8000524 <__aeabi_i2d>
 80088fc:	4622      	mov	r2, r4
 80088fe:	462b      	mov	r3, r5
 8008900:	f7f8 f8e2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008904:	b900      	cbnz	r0, 8008908 <_dtoa_r+0x168>
 8008906:	3f01      	subs	r7, #1
 8008908:	2f16      	cmp	r7, #22
 800890a:	d851      	bhi.n	80089b0 <_dtoa_r+0x210>
 800890c:	4b5b      	ldr	r3, [pc, #364]	@ (8008a7c <_dtoa_r+0x2dc>)
 800890e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008916:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800891a:	f7f8 f8df 	bl	8000adc <__aeabi_dcmplt>
 800891e:	2800      	cmp	r0, #0
 8008920:	d048      	beq.n	80089b4 <_dtoa_r+0x214>
 8008922:	3f01      	subs	r7, #1
 8008924:	2300      	movs	r3, #0
 8008926:	9312      	str	r3, [sp, #72]	@ 0x48
 8008928:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800892a:	1b9b      	subs	r3, r3, r6
 800892c:	1e5a      	subs	r2, r3, #1
 800892e:	bf44      	itt	mi
 8008930:	f1c3 0801 	rsbmi	r8, r3, #1
 8008934:	2300      	movmi	r3, #0
 8008936:	9208      	str	r2, [sp, #32]
 8008938:	bf54      	ite	pl
 800893a:	f04f 0800 	movpl.w	r8, #0
 800893e:	9308      	strmi	r3, [sp, #32]
 8008940:	2f00      	cmp	r7, #0
 8008942:	db39      	blt.n	80089b8 <_dtoa_r+0x218>
 8008944:	9b08      	ldr	r3, [sp, #32]
 8008946:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008948:	443b      	add	r3, r7
 800894a:	9308      	str	r3, [sp, #32]
 800894c:	2300      	movs	r3, #0
 800894e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008952:	2b09      	cmp	r3, #9
 8008954:	d864      	bhi.n	8008a20 <_dtoa_r+0x280>
 8008956:	2b05      	cmp	r3, #5
 8008958:	bfc4      	itt	gt
 800895a:	3b04      	subgt	r3, #4
 800895c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800895e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008960:	f1a3 0302 	sub.w	r3, r3, #2
 8008964:	bfcc      	ite	gt
 8008966:	2400      	movgt	r4, #0
 8008968:	2401      	movle	r4, #1
 800896a:	2b03      	cmp	r3, #3
 800896c:	d863      	bhi.n	8008a36 <_dtoa_r+0x296>
 800896e:	e8df f003 	tbb	[pc, r3]
 8008972:	372a      	.short	0x372a
 8008974:	5535      	.short	0x5535
 8008976:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800897a:	441e      	add	r6, r3
 800897c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008980:	2b20      	cmp	r3, #32
 8008982:	bfc1      	itttt	gt
 8008984:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008988:	409f      	lslgt	r7, r3
 800898a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800898e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008992:	bfd6      	itet	le
 8008994:	f1c3 0320 	rsble	r3, r3, #32
 8008998:	ea47 0003 	orrgt.w	r0, r7, r3
 800899c:	fa04 f003 	lslle.w	r0, r4, r3
 80089a0:	f7f7 fdb0 	bl	8000504 <__aeabi_ui2d>
 80089a4:	2201      	movs	r2, #1
 80089a6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80089aa:	3e01      	subs	r6, #1
 80089ac:	9214      	str	r2, [sp, #80]	@ 0x50
 80089ae:	e777      	b.n	80088a0 <_dtoa_r+0x100>
 80089b0:	2301      	movs	r3, #1
 80089b2:	e7b8      	b.n	8008926 <_dtoa_r+0x186>
 80089b4:	9012      	str	r0, [sp, #72]	@ 0x48
 80089b6:	e7b7      	b.n	8008928 <_dtoa_r+0x188>
 80089b8:	427b      	negs	r3, r7
 80089ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80089bc:	2300      	movs	r3, #0
 80089be:	eba8 0807 	sub.w	r8, r8, r7
 80089c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80089c4:	e7c4      	b.n	8008950 <_dtoa_r+0x1b0>
 80089c6:	2300      	movs	r3, #0
 80089c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	dc35      	bgt.n	8008a3c <_dtoa_r+0x29c>
 80089d0:	2301      	movs	r3, #1
 80089d2:	9300      	str	r3, [sp, #0]
 80089d4:	9307      	str	r3, [sp, #28]
 80089d6:	461a      	mov	r2, r3
 80089d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80089da:	e00b      	b.n	80089f4 <_dtoa_r+0x254>
 80089dc:	2301      	movs	r3, #1
 80089de:	e7f3      	b.n	80089c8 <_dtoa_r+0x228>
 80089e0:	2300      	movs	r3, #0
 80089e2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80089e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089e6:	18fb      	adds	r3, r7, r3
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	3301      	adds	r3, #1
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	9307      	str	r3, [sp, #28]
 80089f0:	bfb8      	it	lt
 80089f2:	2301      	movlt	r3, #1
 80089f4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80089f8:	2100      	movs	r1, #0
 80089fa:	2204      	movs	r2, #4
 80089fc:	f102 0514 	add.w	r5, r2, #20
 8008a00:	429d      	cmp	r5, r3
 8008a02:	d91f      	bls.n	8008a44 <_dtoa_r+0x2a4>
 8008a04:	6041      	str	r1, [r0, #4]
 8008a06:	4658      	mov	r0, fp
 8008a08:	f000 ff48 	bl	800989c <_Balloc>
 8008a0c:	4682      	mov	sl, r0
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	d13c      	bne.n	8008a8c <_dtoa_r+0x2ec>
 8008a12:	4b1b      	ldr	r3, [pc, #108]	@ (8008a80 <_dtoa_r+0x2e0>)
 8008a14:	4602      	mov	r2, r0
 8008a16:	f240 11af 	movw	r1, #431	@ 0x1af
 8008a1a:	e6d8      	b.n	80087ce <_dtoa_r+0x2e>
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e7e0      	b.n	80089e2 <_dtoa_r+0x242>
 8008a20:	2401      	movs	r4, #1
 8008a22:	2300      	movs	r3, #0
 8008a24:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a26:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008a28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	9307      	str	r3, [sp, #28]
 8008a30:	2200      	movs	r2, #0
 8008a32:	2312      	movs	r3, #18
 8008a34:	e7d0      	b.n	80089d8 <_dtoa_r+0x238>
 8008a36:	2301      	movs	r3, #1
 8008a38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a3a:	e7f5      	b.n	8008a28 <_dtoa_r+0x288>
 8008a3c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	9307      	str	r3, [sp, #28]
 8008a42:	e7d7      	b.n	80089f4 <_dtoa_r+0x254>
 8008a44:	3101      	adds	r1, #1
 8008a46:	0052      	lsls	r2, r2, #1
 8008a48:	e7d8      	b.n	80089fc <_dtoa_r+0x25c>
 8008a4a:	bf00      	nop
 8008a4c:	f3af 8000 	nop.w
 8008a50:	636f4361 	.word	0x636f4361
 8008a54:	3fd287a7 	.word	0x3fd287a7
 8008a58:	8b60c8b3 	.word	0x8b60c8b3
 8008a5c:	3fc68a28 	.word	0x3fc68a28
 8008a60:	509f79fb 	.word	0x509f79fb
 8008a64:	3fd34413 	.word	0x3fd34413
 8008a68:	0800ab29 	.word	0x0800ab29
 8008a6c:	0800ab40 	.word	0x0800ab40
 8008a70:	7ff00000 	.word	0x7ff00000
 8008a74:	0800aaf9 	.word	0x0800aaf9
 8008a78:	3ff80000 	.word	0x3ff80000
 8008a7c:	0800ac48 	.word	0x0800ac48
 8008a80:	0800ab98 	.word	0x0800ab98
 8008a84:	0800ab25 	.word	0x0800ab25
 8008a88:	0800aaf8 	.word	0x0800aaf8
 8008a8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008a90:	6018      	str	r0, [r3, #0]
 8008a92:	9b07      	ldr	r3, [sp, #28]
 8008a94:	2b0e      	cmp	r3, #14
 8008a96:	f200 80a4 	bhi.w	8008be2 <_dtoa_r+0x442>
 8008a9a:	2c00      	cmp	r4, #0
 8008a9c:	f000 80a1 	beq.w	8008be2 <_dtoa_r+0x442>
 8008aa0:	2f00      	cmp	r7, #0
 8008aa2:	dd33      	ble.n	8008b0c <_dtoa_r+0x36c>
 8008aa4:	4bad      	ldr	r3, [pc, #692]	@ (8008d5c <_dtoa_r+0x5bc>)
 8008aa6:	f007 020f 	and.w	r2, r7, #15
 8008aaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008aae:	ed93 7b00 	vldr	d7, [r3]
 8008ab2:	05f8      	lsls	r0, r7, #23
 8008ab4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008ab8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008abc:	d516      	bpl.n	8008aec <_dtoa_r+0x34c>
 8008abe:	4ba8      	ldr	r3, [pc, #672]	@ (8008d60 <_dtoa_r+0x5c0>)
 8008ac0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ac4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ac8:	f7f7 fec0 	bl	800084c <__aeabi_ddiv>
 8008acc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ad0:	f004 040f 	and.w	r4, r4, #15
 8008ad4:	2603      	movs	r6, #3
 8008ad6:	4da2      	ldr	r5, [pc, #648]	@ (8008d60 <_dtoa_r+0x5c0>)
 8008ad8:	b954      	cbnz	r4, 8008af0 <_dtoa_r+0x350>
 8008ada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ade:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ae2:	f7f7 feb3 	bl	800084c <__aeabi_ddiv>
 8008ae6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008aea:	e028      	b.n	8008b3e <_dtoa_r+0x39e>
 8008aec:	2602      	movs	r6, #2
 8008aee:	e7f2      	b.n	8008ad6 <_dtoa_r+0x336>
 8008af0:	07e1      	lsls	r1, r4, #31
 8008af2:	d508      	bpl.n	8008b06 <_dtoa_r+0x366>
 8008af4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008af8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008afc:	f7f7 fd7c 	bl	80005f8 <__aeabi_dmul>
 8008b00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b04:	3601      	adds	r6, #1
 8008b06:	1064      	asrs	r4, r4, #1
 8008b08:	3508      	adds	r5, #8
 8008b0a:	e7e5      	b.n	8008ad8 <_dtoa_r+0x338>
 8008b0c:	f000 80d2 	beq.w	8008cb4 <_dtoa_r+0x514>
 8008b10:	427c      	negs	r4, r7
 8008b12:	4b92      	ldr	r3, [pc, #584]	@ (8008d5c <_dtoa_r+0x5bc>)
 8008b14:	4d92      	ldr	r5, [pc, #584]	@ (8008d60 <_dtoa_r+0x5c0>)
 8008b16:	f004 020f 	and.w	r2, r4, #15
 8008b1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b26:	f7f7 fd67 	bl	80005f8 <__aeabi_dmul>
 8008b2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b2e:	1124      	asrs	r4, r4, #4
 8008b30:	2300      	movs	r3, #0
 8008b32:	2602      	movs	r6, #2
 8008b34:	2c00      	cmp	r4, #0
 8008b36:	f040 80b2 	bne.w	8008c9e <_dtoa_r+0x4fe>
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d1d3      	bne.n	8008ae6 <_dtoa_r+0x346>
 8008b3e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008b40:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f000 80b7 	beq.w	8008cb8 <_dtoa_r+0x518>
 8008b4a:	4b86      	ldr	r3, [pc, #536]	@ (8008d64 <_dtoa_r+0x5c4>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	4620      	mov	r0, r4
 8008b50:	4629      	mov	r1, r5
 8008b52:	f7f7 ffc3 	bl	8000adc <__aeabi_dcmplt>
 8008b56:	2800      	cmp	r0, #0
 8008b58:	f000 80ae 	beq.w	8008cb8 <_dtoa_r+0x518>
 8008b5c:	9b07      	ldr	r3, [sp, #28]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f000 80aa 	beq.w	8008cb8 <_dtoa_r+0x518>
 8008b64:	9b00      	ldr	r3, [sp, #0]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	dd37      	ble.n	8008bda <_dtoa_r+0x43a>
 8008b6a:	1e7b      	subs	r3, r7, #1
 8008b6c:	9304      	str	r3, [sp, #16]
 8008b6e:	4620      	mov	r0, r4
 8008b70:	4b7d      	ldr	r3, [pc, #500]	@ (8008d68 <_dtoa_r+0x5c8>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	4629      	mov	r1, r5
 8008b76:	f7f7 fd3f 	bl	80005f8 <__aeabi_dmul>
 8008b7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b7e:	9c00      	ldr	r4, [sp, #0]
 8008b80:	3601      	adds	r6, #1
 8008b82:	4630      	mov	r0, r6
 8008b84:	f7f7 fcce 	bl	8000524 <__aeabi_i2d>
 8008b88:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b8c:	f7f7 fd34 	bl	80005f8 <__aeabi_dmul>
 8008b90:	4b76      	ldr	r3, [pc, #472]	@ (8008d6c <_dtoa_r+0x5cc>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	f7f7 fb7a 	bl	800028c <__adddf3>
 8008b98:	4605      	mov	r5, r0
 8008b9a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008b9e:	2c00      	cmp	r4, #0
 8008ba0:	f040 808d 	bne.w	8008cbe <_dtoa_r+0x51e>
 8008ba4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ba8:	4b71      	ldr	r3, [pc, #452]	@ (8008d70 <_dtoa_r+0x5d0>)
 8008baa:	2200      	movs	r2, #0
 8008bac:	f7f7 fb6c 	bl	8000288 <__aeabi_dsub>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008bb8:	462a      	mov	r2, r5
 8008bba:	4633      	mov	r3, r6
 8008bbc:	f7f7 ffac 	bl	8000b18 <__aeabi_dcmpgt>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	f040 828b 	bne.w	80090dc <_dtoa_r+0x93c>
 8008bc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bca:	462a      	mov	r2, r5
 8008bcc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008bd0:	f7f7 ff84 	bl	8000adc <__aeabi_dcmplt>
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	f040 8128 	bne.w	8008e2a <_dtoa_r+0x68a>
 8008bda:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008bde:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008be2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f2c0 815a 	blt.w	8008e9e <_dtoa_r+0x6fe>
 8008bea:	2f0e      	cmp	r7, #14
 8008bec:	f300 8157 	bgt.w	8008e9e <_dtoa_r+0x6fe>
 8008bf0:	4b5a      	ldr	r3, [pc, #360]	@ (8008d5c <_dtoa_r+0x5bc>)
 8008bf2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008bf6:	ed93 7b00 	vldr	d7, [r3]
 8008bfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	ed8d 7b00 	vstr	d7, [sp]
 8008c02:	da03      	bge.n	8008c0c <_dtoa_r+0x46c>
 8008c04:	9b07      	ldr	r3, [sp, #28]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f340 8101 	ble.w	8008e0e <_dtoa_r+0x66e>
 8008c0c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008c10:	4656      	mov	r6, sl
 8008c12:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c16:	4620      	mov	r0, r4
 8008c18:	4629      	mov	r1, r5
 8008c1a:	f7f7 fe17 	bl	800084c <__aeabi_ddiv>
 8008c1e:	f7f7 ff9b 	bl	8000b58 <__aeabi_d2iz>
 8008c22:	4680      	mov	r8, r0
 8008c24:	f7f7 fc7e 	bl	8000524 <__aeabi_i2d>
 8008c28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c2c:	f7f7 fce4 	bl	80005f8 <__aeabi_dmul>
 8008c30:	4602      	mov	r2, r0
 8008c32:	460b      	mov	r3, r1
 8008c34:	4620      	mov	r0, r4
 8008c36:	4629      	mov	r1, r5
 8008c38:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008c3c:	f7f7 fb24 	bl	8000288 <__aeabi_dsub>
 8008c40:	f806 4b01 	strb.w	r4, [r6], #1
 8008c44:	9d07      	ldr	r5, [sp, #28]
 8008c46:	eba6 040a 	sub.w	r4, r6, sl
 8008c4a:	42a5      	cmp	r5, r4
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	460b      	mov	r3, r1
 8008c50:	f040 8117 	bne.w	8008e82 <_dtoa_r+0x6e2>
 8008c54:	f7f7 fb1a 	bl	800028c <__adddf3>
 8008c58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	460d      	mov	r5, r1
 8008c60:	f7f7 ff5a 	bl	8000b18 <__aeabi_dcmpgt>
 8008c64:	2800      	cmp	r0, #0
 8008c66:	f040 80f9 	bne.w	8008e5c <_dtoa_r+0x6bc>
 8008c6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c6e:	4620      	mov	r0, r4
 8008c70:	4629      	mov	r1, r5
 8008c72:	f7f7 ff29 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c76:	b118      	cbz	r0, 8008c80 <_dtoa_r+0x4e0>
 8008c78:	f018 0f01 	tst.w	r8, #1
 8008c7c:	f040 80ee 	bne.w	8008e5c <_dtoa_r+0x6bc>
 8008c80:	4649      	mov	r1, r9
 8008c82:	4658      	mov	r0, fp
 8008c84:	f000 fe4a 	bl	800991c <_Bfree>
 8008c88:	2300      	movs	r3, #0
 8008c8a:	7033      	strb	r3, [r6, #0]
 8008c8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008c8e:	3701      	adds	r7, #1
 8008c90:	601f      	str	r7, [r3, #0]
 8008c92:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f000 831d 	beq.w	80092d4 <_dtoa_r+0xb34>
 8008c9a:	601e      	str	r6, [r3, #0]
 8008c9c:	e31a      	b.n	80092d4 <_dtoa_r+0xb34>
 8008c9e:	07e2      	lsls	r2, r4, #31
 8008ca0:	d505      	bpl.n	8008cae <_dtoa_r+0x50e>
 8008ca2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ca6:	f7f7 fca7 	bl	80005f8 <__aeabi_dmul>
 8008caa:	3601      	adds	r6, #1
 8008cac:	2301      	movs	r3, #1
 8008cae:	1064      	asrs	r4, r4, #1
 8008cb0:	3508      	adds	r5, #8
 8008cb2:	e73f      	b.n	8008b34 <_dtoa_r+0x394>
 8008cb4:	2602      	movs	r6, #2
 8008cb6:	e742      	b.n	8008b3e <_dtoa_r+0x39e>
 8008cb8:	9c07      	ldr	r4, [sp, #28]
 8008cba:	9704      	str	r7, [sp, #16]
 8008cbc:	e761      	b.n	8008b82 <_dtoa_r+0x3e2>
 8008cbe:	4b27      	ldr	r3, [pc, #156]	@ (8008d5c <_dtoa_r+0x5bc>)
 8008cc0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008cc2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008cc6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008cca:	4454      	add	r4, sl
 8008ccc:	2900      	cmp	r1, #0
 8008cce:	d053      	beq.n	8008d78 <_dtoa_r+0x5d8>
 8008cd0:	4928      	ldr	r1, [pc, #160]	@ (8008d74 <_dtoa_r+0x5d4>)
 8008cd2:	2000      	movs	r0, #0
 8008cd4:	f7f7 fdba 	bl	800084c <__aeabi_ddiv>
 8008cd8:	4633      	mov	r3, r6
 8008cda:	462a      	mov	r2, r5
 8008cdc:	f7f7 fad4 	bl	8000288 <__aeabi_dsub>
 8008ce0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008ce4:	4656      	mov	r6, sl
 8008ce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cea:	f7f7 ff35 	bl	8000b58 <__aeabi_d2iz>
 8008cee:	4605      	mov	r5, r0
 8008cf0:	f7f7 fc18 	bl	8000524 <__aeabi_i2d>
 8008cf4:	4602      	mov	r2, r0
 8008cf6:	460b      	mov	r3, r1
 8008cf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cfc:	f7f7 fac4 	bl	8000288 <__aeabi_dsub>
 8008d00:	3530      	adds	r5, #48	@ 0x30
 8008d02:	4602      	mov	r2, r0
 8008d04:	460b      	mov	r3, r1
 8008d06:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008d0a:	f806 5b01 	strb.w	r5, [r6], #1
 8008d0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008d12:	f7f7 fee3 	bl	8000adc <__aeabi_dcmplt>
 8008d16:	2800      	cmp	r0, #0
 8008d18:	d171      	bne.n	8008dfe <_dtoa_r+0x65e>
 8008d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d1e:	4911      	ldr	r1, [pc, #68]	@ (8008d64 <_dtoa_r+0x5c4>)
 8008d20:	2000      	movs	r0, #0
 8008d22:	f7f7 fab1 	bl	8000288 <__aeabi_dsub>
 8008d26:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008d2a:	f7f7 fed7 	bl	8000adc <__aeabi_dcmplt>
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	f040 8095 	bne.w	8008e5e <_dtoa_r+0x6be>
 8008d34:	42a6      	cmp	r6, r4
 8008d36:	f43f af50 	beq.w	8008bda <_dtoa_r+0x43a>
 8008d3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8008d68 <_dtoa_r+0x5c8>)
 8008d40:	2200      	movs	r2, #0
 8008d42:	f7f7 fc59 	bl	80005f8 <__aeabi_dmul>
 8008d46:	4b08      	ldr	r3, [pc, #32]	@ (8008d68 <_dtoa_r+0x5c8>)
 8008d48:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d52:	f7f7 fc51 	bl	80005f8 <__aeabi_dmul>
 8008d56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d5a:	e7c4      	b.n	8008ce6 <_dtoa_r+0x546>
 8008d5c:	0800ac48 	.word	0x0800ac48
 8008d60:	0800ac20 	.word	0x0800ac20
 8008d64:	3ff00000 	.word	0x3ff00000
 8008d68:	40240000 	.word	0x40240000
 8008d6c:	401c0000 	.word	0x401c0000
 8008d70:	40140000 	.word	0x40140000
 8008d74:	3fe00000 	.word	0x3fe00000
 8008d78:	4631      	mov	r1, r6
 8008d7a:	4628      	mov	r0, r5
 8008d7c:	f7f7 fc3c 	bl	80005f8 <__aeabi_dmul>
 8008d80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008d84:	9415      	str	r4, [sp, #84]	@ 0x54
 8008d86:	4656      	mov	r6, sl
 8008d88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d8c:	f7f7 fee4 	bl	8000b58 <__aeabi_d2iz>
 8008d90:	4605      	mov	r5, r0
 8008d92:	f7f7 fbc7 	bl	8000524 <__aeabi_i2d>
 8008d96:	4602      	mov	r2, r0
 8008d98:	460b      	mov	r3, r1
 8008d9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d9e:	f7f7 fa73 	bl	8000288 <__aeabi_dsub>
 8008da2:	3530      	adds	r5, #48	@ 0x30
 8008da4:	f806 5b01 	strb.w	r5, [r6], #1
 8008da8:	4602      	mov	r2, r0
 8008daa:	460b      	mov	r3, r1
 8008dac:	42a6      	cmp	r6, r4
 8008dae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008db2:	f04f 0200 	mov.w	r2, #0
 8008db6:	d124      	bne.n	8008e02 <_dtoa_r+0x662>
 8008db8:	4bac      	ldr	r3, [pc, #688]	@ (800906c <_dtoa_r+0x8cc>)
 8008dba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008dbe:	f7f7 fa65 	bl	800028c <__adddf3>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dca:	f7f7 fea5 	bl	8000b18 <__aeabi_dcmpgt>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d145      	bne.n	8008e5e <_dtoa_r+0x6be>
 8008dd2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008dd6:	49a5      	ldr	r1, [pc, #660]	@ (800906c <_dtoa_r+0x8cc>)
 8008dd8:	2000      	movs	r0, #0
 8008dda:	f7f7 fa55 	bl	8000288 <__aeabi_dsub>
 8008dde:	4602      	mov	r2, r0
 8008de0:	460b      	mov	r3, r1
 8008de2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008de6:	f7f7 fe79 	bl	8000adc <__aeabi_dcmplt>
 8008dea:	2800      	cmp	r0, #0
 8008dec:	f43f aef5 	beq.w	8008bda <_dtoa_r+0x43a>
 8008df0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008df2:	1e73      	subs	r3, r6, #1
 8008df4:	9315      	str	r3, [sp, #84]	@ 0x54
 8008df6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008dfa:	2b30      	cmp	r3, #48	@ 0x30
 8008dfc:	d0f8      	beq.n	8008df0 <_dtoa_r+0x650>
 8008dfe:	9f04      	ldr	r7, [sp, #16]
 8008e00:	e73e      	b.n	8008c80 <_dtoa_r+0x4e0>
 8008e02:	4b9b      	ldr	r3, [pc, #620]	@ (8009070 <_dtoa_r+0x8d0>)
 8008e04:	f7f7 fbf8 	bl	80005f8 <__aeabi_dmul>
 8008e08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e0c:	e7bc      	b.n	8008d88 <_dtoa_r+0x5e8>
 8008e0e:	d10c      	bne.n	8008e2a <_dtoa_r+0x68a>
 8008e10:	4b98      	ldr	r3, [pc, #608]	@ (8009074 <_dtoa_r+0x8d4>)
 8008e12:	2200      	movs	r2, #0
 8008e14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008e18:	f7f7 fbee 	bl	80005f8 <__aeabi_dmul>
 8008e1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e20:	f7f7 fe70 	bl	8000b04 <__aeabi_dcmpge>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	f000 8157 	beq.w	80090d8 <_dtoa_r+0x938>
 8008e2a:	2400      	movs	r4, #0
 8008e2c:	4625      	mov	r5, r4
 8008e2e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e30:	43db      	mvns	r3, r3
 8008e32:	9304      	str	r3, [sp, #16]
 8008e34:	4656      	mov	r6, sl
 8008e36:	2700      	movs	r7, #0
 8008e38:	4621      	mov	r1, r4
 8008e3a:	4658      	mov	r0, fp
 8008e3c:	f000 fd6e 	bl	800991c <_Bfree>
 8008e40:	2d00      	cmp	r5, #0
 8008e42:	d0dc      	beq.n	8008dfe <_dtoa_r+0x65e>
 8008e44:	b12f      	cbz	r7, 8008e52 <_dtoa_r+0x6b2>
 8008e46:	42af      	cmp	r7, r5
 8008e48:	d003      	beq.n	8008e52 <_dtoa_r+0x6b2>
 8008e4a:	4639      	mov	r1, r7
 8008e4c:	4658      	mov	r0, fp
 8008e4e:	f000 fd65 	bl	800991c <_Bfree>
 8008e52:	4629      	mov	r1, r5
 8008e54:	4658      	mov	r0, fp
 8008e56:	f000 fd61 	bl	800991c <_Bfree>
 8008e5a:	e7d0      	b.n	8008dfe <_dtoa_r+0x65e>
 8008e5c:	9704      	str	r7, [sp, #16]
 8008e5e:	4633      	mov	r3, r6
 8008e60:	461e      	mov	r6, r3
 8008e62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e66:	2a39      	cmp	r2, #57	@ 0x39
 8008e68:	d107      	bne.n	8008e7a <_dtoa_r+0x6da>
 8008e6a:	459a      	cmp	sl, r3
 8008e6c:	d1f8      	bne.n	8008e60 <_dtoa_r+0x6c0>
 8008e6e:	9a04      	ldr	r2, [sp, #16]
 8008e70:	3201      	adds	r2, #1
 8008e72:	9204      	str	r2, [sp, #16]
 8008e74:	2230      	movs	r2, #48	@ 0x30
 8008e76:	f88a 2000 	strb.w	r2, [sl]
 8008e7a:	781a      	ldrb	r2, [r3, #0]
 8008e7c:	3201      	adds	r2, #1
 8008e7e:	701a      	strb	r2, [r3, #0]
 8008e80:	e7bd      	b.n	8008dfe <_dtoa_r+0x65e>
 8008e82:	4b7b      	ldr	r3, [pc, #492]	@ (8009070 <_dtoa_r+0x8d0>)
 8008e84:	2200      	movs	r2, #0
 8008e86:	f7f7 fbb7 	bl	80005f8 <__aeabi_dmul>
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	4604      	mov	r4, r0
 8008e90:	460d      	mov	r5, r1
 8008e92:	f7f7 fe19 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e96:	2800      	cmp	r0, #0
 8008e98:	f43f aebb 	beq.w	8008c12 <_dtoa_r+0x472>
 8008e9c:	e6f0      	b.n	8008c80 <_dtoa_r+0x4e0>
 8008e9e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008ea0:	2a00      	cmp	r2, #0
 8008ea2:	f000 80db 	beq.w	800905c <_dtoa_r+0x8bc>
 8008ea6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ea8:	2a01      	cmp	r2, #1
 8008eaa:	f300 80bf 	bgt.w	800902c <_dtoa_r+0x88c>
 8008eae:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008eb0:	2a00      	cmp	r2, #0
 8008eb2:	f000 80b7 	beq.w	8009024 <_dtoa_r+0x884>
 8008eb6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008eba:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008ebc:	4646      	mov	r6, r8
 8008ebe:	9a08      	ldr	r2, [sp, #32]
 8008ec0:	2101      	movs	r1, #1
 8008ec2:	441a      	add	r2, r3
 8008ec4:	4658      	mov	r0, fp
 8008ec6:	4498      	add	r8, r3
 8008ec8:	9208      	str	r2, [sp, #32]
 8008eca:	f000 fddb 	bl	8009a84 <__i2b>
 8008ece:	4605      	mov	r5, r0
 8008ed0:	b15e      	cbz	r6, 8008eea <_dtoa_r+0x74a>
 8008ed2:	9b08      	ldr	r3, [sp, #32]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	dd08      	ble.n	8008eea <_dtoa_r+0x74a>
 8008ed8:	42b3      	cmp	r3, r6
 8008eda:	9a08      	ldr	r2, [sp, #32]
 8008edc:	bfa8      	it	ge
 8008ede:	4633      	movge	r3, r6
 8008ee0:	eba8 0803 	sub.w	r8, r8, r3
 8008ee4:	1af6      	subs	r6, r6, r3
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	9308      	str	r3, [sp, #32]
 8008eea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008eec:	b1f3      	cbz	r3, 8008f2c <_dtoa_r+0x78c>
 8008eee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f000 80b7 	beq.w	8009064 <_dtoa_r+0x8c4>
 8008ef6:	b18c      	cbz	r4, 8008f1c <_dtoa_r+0x77c>
 8008ef8:	4629      	mov	r1, r5
 8008efa:	4622      	mov	r2, r4
 8008efc:	4658      	mov	r0, fp
 8008efe:	f000 fe81 	bl	8009c04 <__pow5mult>
 8008f02:	464a      	mov	r2, r9
 8008f04:	4601      	mov	r1, r0
 8008f06:	4605      	mov	r5, r0
 8008f08:	4658      	mov	r0, fp
 8008f0a:	f000 fdd1 	bl	8009ab0 <__multiply>
 8008f0e:	4649      	mov	r1, r9
 8008f10:	9004      	str	r0, [sp, #16]
 8008f12:	4658      	mov	r0, fp
 8008f14:	f000 fd02 	bl	800991c <_Bfree>
 8008f18:	9b04      	ldr	r3, [sp, #16]
 8008f1a:	4699      	mov	r9, r3
 8008f1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f1e:	1b1a      	subs	r2, r3, r4
 8008f20:	d004      	beq.n	8008f2c <_dtoa_r+0x78c>
 8008f22:	4649      	mov	r1, r9
 8008f24:	4658      	mov	r0, fp
 8008f26:	f000 fe6d 	bl	8009c04 <__pow5mult>
 8008f2a:	4681      	mov	r9, r0
 8008f2c:	2101      	movs	r1, #1
 8008f2e:	4658      	mov	r0, fp
 8008f30:	f000 fda8 	bl	8009a84 <__i2b>
 8008f34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f36:	4604      	mov	r4, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	f000 81cf 	beq.w	80092dc <_dtoa_r+0xb3c>
 8008f3e:	461a      	mov	r2, r3
 8008f40:	4601      	mov	r1, r0
 8008f42:	4658      	mov	r0, fp
 8008f44:	f000 fe5e 	bl	8009c04 <__pow5mult>
 8008f48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	4604      	mov	r4, r0
 8008f4e:	f300 8095 	bgt.w	800907c <_dtoa_r+0x8dc>
 8008f52:	9b02      	ldr	r3, [sp, #8]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f040 8087 	bne.w	8009068 <_dtoa_r+0x8c8>
 8008f5a:	9b03      	ldr	r3, [sp, #12]
 8008f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	f040 8089 	bne.w	8009078 <_dtoa_r+0x8d8>
 8008f66:	9b03      	ldr	r3, [sp, #12]
 8008f68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008f6c:	0d1b      	lsrs	r3, r3, #20
 8008f6e:	051b      	lsls	r3, r3, #20
 8008f70:	b12b      	cbz	r3, 8008f7e <_dtoa_r+0x7de>
 8008f72:	9b08      	ldr	r3, [sp, #32]
 8008f74:	3301      	adds	r3, #1
 8008f76:	9308      	str	r3, [sp, #32]
 8008f78:	f108 0801 	add.w	r8, r8, #1
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	f000 81b0 	beq.w	80092e8 <_dtoa_r+0xb48>
 8008f88:	6923      	ldr	r3, [r4, #16]
 8008f8a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f8e:	6918      	ldr	r0, [r3, #16]
 8008f90:	f000 fd2c 	bl	80099ec <__hi0bits>
 8008f94:	f1c0 0020 	rsb	r0, r0, #32
 8008f98:	9b08      	ldr	r3, [sp, #32]
 8008f9a:	4418      	add	r0, r3
 8008f9c:	f010 001f 	ands.w	r0, r0, #31
 8008fa0:	d077      	beq.n	8009092 <_dtoa_r+0x8f2>
 8008fa2:	f1c0 0320 	rsb	r3, r0, #32
 8008fa6:	2b04      	cmp	r3, #4
 8008fa8:	dd6b      	ble.n	8009082 <_dtoa_r+0x8e2>
 8008faa:	9b08      	ldr	r3, [sp, #32]
 8008fac:	f1c0 001c 	rsb	r0, r0, #28
 8008fb0:	4403      	add	r3, r0
 8008fb2:	4480      	add	r8, r0
 8008fb4:	4406      	add	r6, r0
 8008fb6:	9308      	str	r3, [sp, #32]
 8008fb8:	f1b8 0f00 	cmp.w	r8, #0
 8008fbc:	dd05      	ble.n	8008fca <_dtoa_r+0x82a>
 8008fbe:	4649      	mov	r1, r9
 8008fc0:	4642      	mov	r2, r8
 8008fc2:	4658      	mov	r0, fp
 8008fc4:	f000 fe78 	bl	8009cb8 <__lshift>
 8008fc8:	4681      	mov	r9, r0
 8008fca:	9b08      	ldr	r3, [sp, #32]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	dd05      	ble.n	8008fdc <_dtoa_r+0x83c>
 8008fd0:	4621      	mov	r1, r4
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	4658      	mov	r0, fp
 8008fd6:	f000 fe6f 	bl	8009cb8 <__lshift>
 8008fda:	4604      	mov	r4, r0
 8008fdc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d059      	beq.n	8009096 <_dtoa_r+0x8f6>
 8008fe2:	4621      	mov	r1, r4
 8008fe4:	4648      	mov	r0, r9
 8008fe6:	f000 fed3 	bl	8009d90 <__mcmp>
 8008fea:	2800      	cmp	r0, #0
 8008fec:	da53      	bge.n	8009096 <_dtoa_r+0x8f6>
 8008fee:	1e7b      	subs	r3, r7, #1
 8008ff0:	9304      	str	r3, [sp, #16]
 8008ff2:	4649      	mov	r1, r9
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	220a      	movs	r2, #10
 8008ff8:	4658      	mov	r0, fp
 8008ffa:	f000 fcb1 	bl	8009960 <__multadd>
 8008ffe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009000:	4681      	mov	r9, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	f000 8172 	beq.w	80092ec <_dtoa_r+0xb4c>
 8009008:	2300      	movs	r3, #0
 800900a:	4629      	mov	r1, r5
 800900c:	220a      	movs	r2, #10
 800900e:	4658      	mov	r0, fp
 8009010:	f000 fca6 	bl	8009960 <__multadd>
 8009014:	9b00      	ldr	r3, [sp, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	4605      	mov	r5, r0
 800901a:	dc67      	bgt.n	80090ec <_dtoa_r+0x94c>
 800901c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800901e:	2b02      	cmp	r3, #2
 8009020:	dc41      	bgt.n	80090a6 <_dtoa_r+0x906>
 8009022:	e063      	b.n	80090ec <_dtoa_r+0x94c>
 8009024:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009026:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800902a:	e746      	b.n	8008eba <_dtoa_r+0x71a>
 800902c:	9b07      	ldr	r3, [sp, #28]
 800902e:	1e5c      	subs	r4, r3, #1
 8009030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009032:	42a3      	cmp	r3, r4
 8009034:	bfbf      	itttt	lt
 8009036:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009038:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800903a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800903c:	1ae3      	sublt	r3, r4, r3
 800903e:	bfb4      	ite	lt
 8009040:	18d2      	addlt	r2, r2, r3
 8009042:	1b1c      	subge	r4, r3, r4
 8009044:	9b07      	ldr	r3, [sp, #28]
 8009046:	bfbc      	itt	lt
 8009048:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800904a:	2400      	movlt	r4, #0
 800904c:	2b00      	cmp	r3, #0
 800904e:	bfb5      	itete	lt
 8009050:	eba8 0603 	sublt.w	r6, r8, r3
 8009054:	9b07      	ldrge	r3, [sp, #28]
 8009056:	2300      	movlt	r3, #0
 8009058:	4646      	movge	r6, r8
 800905a:	e730      	b.n	8008ebe <_dtoa_r+0x71e>
 800905c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800905e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009060:	4646      	mov	r6, r8
 8009062:	e735      	b.n	8008ed0 <_dtoa_r+0x730>
 8009064:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009066:	e75c      	b.n	8008f22 <_dtoa_r+0x782>
 8009068:	2300      	movs	r3, #0
 800906a:	e788      	b.n	8008f7e <_dtoa_r+0x7de>
 800906c:	3fe00000 	.word	0x3fe00000
 8009070:	40240000 	.word	0x40240000
 8009074:	40140000 	.word	0x40140000
 8009078:	9b02      	ldr	r3, [sp, #8]
 800907a:	e780      	b.n	8008f7e <_dtoa_r+0x7de>
 800907c:	2300      	movs	r3, #0
 800907e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009080:	e782      	b.n	8008f88 <_dtoa_r+0x7e8>
 8009082:	d099      	beq.n	8008fb8 <_dtoa_r+0x818>
 8009084:	9a08      	ldr	r2, [sp, #32]
 8009086:	331c      	adds	r3, #28
 8009088:	441a      	add	r2, r3
 800908a:	4498      	add	r8, r3
 800908c:	441e      	add	r6, r3
 800908e:	9208      	str	r2, [sp, #32]
 8009090:	e792      	b.n	8008fb8 <_dtoa_r+0x818>
 8009092:	4603      	mov	r3, r0
 8009094:	e7f6      	b.n	8009084 <_dtoa_r+0x8e4>
 8009096:	9b07      	ldr	r3, [sp, #28]
 8009098:	9704      	str	r7, [sp, #16]
 800909a:	2b00      	cmp	r3, #0
 800909c:	dc20      	bgt.n	80090e0 <_dtoa_r+0x940>
 800909e:	9300      	str	r3, [sp, #0]
 80090a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	dd1e      	ble.n	80090e4 <_dtoa_r+0x944>
 80090a6:	9b00      	ldr	r3, [sp, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f47f aec0 	bne.w	8008e2e <_dtoa_r+0x68e>
 80090ae:	4621      	mov	r1, r4
 80090b0:	2205      	movs	r2, #5
 80090b2:	4658      	mov	r0, fp
 80090b4:	f000 fc54 	bl	8009960 <__multadd>
 80090b8:	4601      	mov	r1, r0
 80090ba:	4604      	mov	r4, r0
 80090bc:	4648      	mov	r0, r9
 80090be:	f000 fe67 	bl	8009d90 <__mcmp>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	f77f aeb3 	ble.w	8008e2e <_dtoa_r+0x68e>
 80090c8:	4656      	mov	r6, sl
 80090ca:	2331      	movs	r3, #49	@ 0x31
 80090cc:	f806 3b01 	strb.w	r3, [r6], #1
 80090d0:	9b04      	ldr	r3, [sp, #16]
 80090d2:	3301      	adds	r3, #1
 80090d4:	9304      	str	r3, [sp, #16]
 80090d6:	e6ae      	b.n	8008e36 <_dtoa_r+0x696>
 80090d8:	9c07      	ldr	r4, [sp, #28]
 80090da:	9704      	str	r7, [sp, #16]
 80090dc:	4625      	mov	r5, r4
 80090de:	e7f3      	b.n	80090c8 <_dtoa_r+0x928>
 80090e0:	9b07      	ldr	r3, [sp, #28]
 80090e2:	9300      	str	r3, [sp, #0]
 80090e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f000 8104 	beq.w	80092f4 <_dtoa_r+0xb54>
 80090ec:	2e00      	cmp	r6, #0
 80090ee:	dd05      	ble.n	80090fc <_dtoa_r+0x95c>
 80090f0:	4629      	mov	r1, r5
 80090f2:	4632      	mov	r2, r6
 80090f4:	4658      	mov	r0, fp
 80090f6:	f000 fddf 	bl	8009cb8 <__lshift>
 80090fa:	4605      	mov	r5, r0
 80090fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d05a      	beq.n	80091b8 <_dtoa_r+0xa18>
 8009102:	6869      	ldr	r1, [r5, #4]
 8009104:	4658      	mov	r0, fp
 8009106:	f000 fbc9 	bl	800989c <_Balloc>
 800910a:	4606      	mov	r6, r0
 800910c:	b928      	cbnz	r0, 800911a <_dtoa_r+0x97a>
 800910e:	4b84      	ldr	r3, [pc, #528]	@ (8009320 <_dtoa_r+0xb80>)
 8009110:	4602      	mov	r2, r0
 8009112:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009116:	f7ff bb5a 	b.w	80087ce <_dtoa_r+0x2e>
 800911a:	692a      	ldr	r2, [r5, #16]
 800911c:	3202      	adds	r2, #2
 800911e:	0092      	lsls	r2, r2, #2
 8009120:	f105 010c 	add.w	r1, r5, #12
 8009124:	300c      	adds	r0, #12
 8009126:	f7ff faa4 	bl	8008672 <memcpy>
 800912a:	2201      	movs	r2, #1
 800912c:	4631      	mov	r1, r6
 800912e:	4658      	mov	r0, fp
 8009130:	f000 fdc2 	bl	8009cb8 <__lshift>
 8009134:	f10a 0301 	add.w	r3, sl, #1
 8009138:	9307      	str	r3, [sp, #28]
 800913a:	9b00      	ldr	r3, [sp, #0]
 800913c:	4453      	add	r3, sl
 800913e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009140:	9b02      	ldr	r3, [sp, #8]
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	462f      	mov	r7, r5
 8009148:	930a      	str	r3, [sp, #40]	@ 0x28
 800914a:	4605      	mov	r5, r0
 800914c:	9b07      	ldr	r3, [sp, #28]
 800914e:	4621      	mov	r1, r4
 8009150:	3b01      	subs	r3, #1
 8009152:	4648      	mov	r0, r9
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	f7ff fa9a 	bl	800868e <quorem>
 800915a:	4639      	mov	r1, r7
 800915c:	9002      	str	r0, [sp, #8]
 800915e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009162:	4648      	mov	r0, r9
 8009164:	f000 fe14 	bl	8009d90 <__mcmp>
 8009168:	462a      	mov	r2, r5
 800916a:	9008      	str	r0, [sp, #32]
 800916c:	4621      	mov	r1, r4
 800916e:	4658      	mov	r0, fp
 8009170:	f000 fe2a 	bl	8009dc8 <__mdiff>
 8009174:	68c2      	ldr	r2, [r0, #12]
 8009176:	4606      	mov	r6, r0
 8009178:	bb02      	cbnz	r2, 80091bc <_dtoa_r+0xa1c>
 800917a:	4601      	mov	r1, r0
 800917c:	4648      	mov	r0, r9
 800917e:	f000 fe07 	bl	8009d90 <__mcmp>
 8009182:	4602      	mov	r2, r0
 8009184:	4631      	mov	r1, r6
 8009186:	4658      	mov	r0, fp
 8009188:	920e      	str	r2, [sp, #56]	@ 0x38
 800918a:	f000 fbc7 	bl	800991c <_Bfree>
 800918e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009190:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009192:	9e07      	ldr	r6, [sp, #28]
 8009194:	ea43 0102 	orr.w	r1, r3, r2
 8009198:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800919a:	4319      	orrs	r1, r3
 800919c:	d110      	bne.n	80091c0 <_dtoa_r+0xa20>
 800919e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80091a2:	d029      	beq.n	80091f8 <_dtoa_r+0xa58>
 80091a4:	9b08      	ldr	r3, [sp, #32]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	dd02      	ble.n	80091b0 <_dtoa_r+0xa10>
 80091aa:	9b02      	ldr	r3, [sp, #8]
 80091ac:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80091b0:	9b00      	ldr	r3, [sp, #0]
 80091b2:	f883 8000 	strb.w	r8, [r3]
 80091b6:	e63f      	b.n	8008e38 <_dtoa_r+0x698>
 80091b8:	4628      	mov	r0, r5
 80091ba:	e7bb      	b.n	8009134 <_dtoa_r+0x994>
 80091bc:	2201      	movs	r2, #1
 80091be:	e7e1      	b.n	8009184 <_dtoa_r+0x9e4>
 80091c0:	9b08      	ldr	r3, [sp, #32]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	db04      	blt.n	80091d0 <_dtoa_r+0xa30>
 80091c6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80091c8:	430b      	orrs	r3, r1
 80091ca:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80091cc:	430b      	orrs	r3, r1
 80091ce:	d120      	bne.n	8009212 <_dtoa_r+0xa72>
 80091d0:	2a00      	cmp	r2, #0
 80091d2:	dded      	ble.n	80091b0 <_dtoa_r+0xa10>
 80091d4:	4649      	mov	r1, r9
 80091d6:	2201      	movs	r2, #1
 80091d8:	4658      	mov	r0, fp
 80091da:	f000 fd6d 	bl	8009cb8 <__lshift>
 80091de:	4621      	mov	r1, r4
 80091e0:	4681      	mov	r9, r0
 80091e2:	f000 fdd5 	bl	8009d90 <__mcmp>
 80091e6:	2800      	cmp	r0, #0
 80091e8:	dc03      	bgt.n	80091f2 <_dtoa_r+0xa52>
 80091ea:	d1e1      	bne.n	80091b0 <_dtoa_r+0xa10>
 80091ec:	f018 0f01 	tst.w	r8, #1
 80091f0:	d0de      	beq.n	80091b0 <_dtoa_r+0xa10>
 80091f2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80091f6:	d1d8      	bne.n	80091aa <_dtoa_r+0xa0a>
 80091f8:	9a00      	ldr	r2, [sp, #0]
 80091fa:	2339      	movs	r3, #57	@ 0x39
 80091fc:	7013      	strb	r3, [r2, #0]
 80091fe:	4633      	mov	r3, r6
 8009200:	461e      	mov	r6, r3
 8009202:	3b01      	subs	r3, #1
 8009204:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009208:	2a39      	cmp	r2, #57	@ 0x39
 800920a:	d052      	beq.n	80092b2 <_dtoa_r+0xb12>
 800920c:	3201      	adds	r2, #1
 800920e:	701a      	strb	r2, [r3, #0]
 8009210:	e612      	b.n	8008e38 <_dtoa_r+0x698>
 8009212:	2a00      	cmp	r2, #0
 8009214:	dd07      	ble.n	8009226 <_dtoa_r+0xa86>
 8009216:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800921a:	d0ed      	beq.n	80091f8 <_dtoa_r+0xa58>
 800921c:	9a00      	ldr	r2, [sp, #0]
 800921e:	f108 0301 	add.w	r3, r8, #1
 8009222:	7013      	strb	r3, [r2, #0]
 8009224:	e608      	b.n	8008e38 <_dtoa_r+0x698>
 8009226:	9b07      	ldr	r3, [sp, #28]
 8009228:	9a07      	ldr	r2, [sp, #28]
 800922a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800922e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009230:	4293      	cmp	r3, r2
 8009232:	d028      	beq.n	8009286 <_dtoa_r+0xae6>
 8009234:	4649      	mov	r1, r9
 8009236:	2300      	movs	r3, #0
 8009238:	220a      	movs	r2, #10
 800923a:	4658      	mov	r0, fp
 800923c:	f000 fb90 	bl	8009960 <__multadd>
 8009240:	42af      	cmp	r7, r5
 8009242:	4681      	mov	r9, r0
 8009244:	f04f 0300 	mov.w	r3, #0
 8009248:	f04f 020a 	mov.w	r2, #10
 800924c:	4639      	mov	r1, r7
 800924e:	4658      	mov	r0, fp
 8009250:	d107      	bne.n	8009262 <_dtoa_r+0xac2>
 8009252:	f000 fb85 	bl	8009960 <__multadd>
 8009256:	4607      	mov	r7, r0
 8009258:	4605      	mov	r5, r0
 800925a:	9b07      	ldr	r3, [sp, #28]
 800925c:	3301      	adds	r3, #1
 800925e:	9307      	str	r3, [sp, #28]
 8009260:	e774      	b.n	800914c <_dtoa_r+0x9ac>
 8009262:	f000 fb7d 	bl	8009960 <__multadd>
 8009266:	4629      	mov	r1, r5
 8009268:	4607      	mov	r7, r0
 800926a:	2300      	movs	r3, #0
 800926c:	220a      	movs	r2, #10
 800926e:	4658      	mov	r0, fp
 8009270:	f000 fb76 	bl	8009960 <__multadd>
 8009274:	4605      	mov	r5, r0
 8009276:	e7f0      	b.n	800925a <_dtoa_r+0xaba>
 8009278:	9b00      	ldr	r3, [sp, #0]
 800927a:	2b00      	cmp	r3, #0
 800927c:	bfcc      	ite	gt
 800927e:	461e      	movgt	r6, r3
 8009280:	2601      	movle	r6, #1
 8009282:	4456      	add	r6, sl
 8009284:	2700      	movs	r7, #0
 8009286:	4649      	mov	r1, r9
 8009288:	2201      	movs	r2, #1
 800928a:	4658      	mov	r0, fp
 800928c:	f000 fd14 	bl	8009cb8 <__lshift>
 8009290:	4621      	mov	r1, r4
 8009292:	4681      	mov	r9, r0
 8009294:	f000 fd7c 	bl	8009d90 <__mcmp>
 8009298:	2800      	cmp	r0, #0
 800929a:	dcb0      	bgt.n	80091fe <_dtoa_r+0xa5e>
 800929c:	d102      	bne.n	80092a4 <_dtoa_r+0xb04>
 800929e:	f018 0f01 	tst.w	r8, #1
 80092a2:	d1ac      	bne.n	80091fe <_dtoa_r+0xa5e>
 80092a4:	4633      	mov	r3, r6
 80092a6:	461e      	mov	r6, r3
 80092a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092ac:	2a30      	cmp	r2, #48	@ 0x30
 80092ae:	d0fa      	beq.n	80092a6 <_dtoa_r+0xb06>
 80092b0:	e5c2      	b.n	8008e38 <_dtoa_r+0x698>
 80092b2:	459a      	cmp	sl, r3
 80092b4:	d1a4      	bne.n	8009200 <_dtoa_r+0xa60>
 80092b6:	9b04      	ldr	r3, [sp, #16]
 80092b8:	3301      	adds	r3, #1
 80092ba:	9304      	str	r3, [sp, #16]
 80092bc:	2331      	movs	r3, #49	@ 0x31
 80092be:	f88a 3000 	strb.w	r3, [sl]
 80092c2:	e5b9      	b.n	8008e38 <_dtoa_r+0x698>
 80092c4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80092c6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009324 <_dtoa_r+0xb84>
 80092ca:	b11b      	cbz	r3, 80092d4 <_dtoa_r+0xb34>
 80092cc:	f10a 0308 	add.w	r3, sl, #8
 80092d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80092d2:	6013      	str	r3, [r2, #0]
 80092d4:	4650      	mov	r0, sl
 80092d6:	b019      	add	sp, #100	@ 0x64
 80092d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092de:	2b01      	cmp	r3, #1
 80092e0:	f77f ae37 	ble.w	8008f52 <_dtoa_r+0x7b2>
 80092e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80092e8:	2001      	movs	r0, #1
 80092ea:	e655      	b.n	8008f98 <_dtoa_r+0x7f8>
 80092ec:	9b00      	ldr	r3, [sp, #0]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	f77f aed6 	ble.w	80090a0 <_dtoa_r+0x900>
 80092f4:	4656      	mov	r6, sl
 80092f6:	4621      	mov	r1, r4
 80092f8:	4648      	mov	r0, r9
 80092fa:	f7ff f9c8 	bl	800868e <quorem>
 80092fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009302:	f806 8b01 	strb.w	r8, [r6], #1
 8009306:	9b00      	ldr	r3, [sp, #0]
 8009308:	eba6 020a 	sub.w	r2, r6, sl
 800930c:	4293      	cmp	r3, r2
 800930e:	ddb3      	ble.n	8009278 <_dtoa_r+0xad8>
 8009310:	4649      	mov	r1, r9
 8009312:	2300      	movs	r3, #0
 8009314:	220a      	movs	r2, #10
 8009316:	4658      	mov	r0, fp
 8009318:	f000 fb22 	bl	8009960 <__multadd>
 800931c:	4681      	mov	r9, r0
 800931e:	e7ea      	b.n	80092f6 <_dtoa_r+0xb56>
 8009320:	0800ab98 	.word	0x0800ab98
 8009324:	0800ab1c 	.word	0x0800ab1c

08009328 <__ssputs_r>:
 8009328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800932c:	688e      	ldr	r6, [r1, #8]
 800932e:	461f      	mov	r7, r3
 8009330:	42be      	cmp	r6, r7
 8009332:	680b      	ldr	r3, [r1, #0]
 8009334:	4682      	mov	sl, r0
 8009336:	460c      	mov	r4, r1
 8009338:	4690      	mov	r8, r2
 800933a:	d82d      	bhi.n	8009398 <__ssputs_r+0x70>
 800933c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009340:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009344:	d026      	beq.n	8009394 <__ssputs_r+0x6c>
 8009346:	6965      	ldr	r5, [r4, #20]
 8009348:	6909      	ldr	r1, [r1, #16]
 800934a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800934e:	eba3 0901 	sub.w	r9, r3, r1
 8009352:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009356:	1c7b      	adds	r3, r7, #1
 8009358:	444b      	add	r3, r9
 800935a:	106d      	asrs	r5, r5, #1
 800935c:	429d      	cmp	r5, r3
 800935e:	bf38      	it	cc
 8009360:	461d      	movcc	r5, r3
 8009362:	0553      	lsls	r3, r2, #21
 8009364:	d527      	bpl.n	80093b6 <__ssputs_r+0x8e>
 8009366:	4629      	mov	r1, r5
 8009368:	f000 f960 	bl	800962c <_malloc_r>
 800936c:	4606      	mov	r6, r0
 800936e:	b360      	cbz	r0, 80093ca <__ssputs_r+0xa2>
 8009370:	6921      	ldr	r1, [r4, #16]
 8009372:	464a      	mov	r2, r9
 8009374:	f7ff f97d 	bl	8008672 <memcpy>
 8009378:	89a3      	ldrh	r3, [r4, #12]
 800937a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800937e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009382:	81a3      	strh	r3, [r4, #12]
 8009384:	6126      	str	r6, [r4, #16]
 8009386:	6165      	str	r5, [r4, #20]
 8009388:	444e      	add	r6, r9
 800938a:	eba5 0509 	sub.w	r5, r5, r9
 800938e:	6026      	str	r6, [r4, #0]
 8009390:	60a5      	str	r5, [r4, #8]
 8009392:	463e      	mov	r6, r7
 8009394:	42be      	cmp	r6, r7
 8009396:	d900      	bls.n	800939a <__ssputs_r+0x72>
 8009398:	463e      	mov	r6, r7
 800939a:	6820      	ldr	r0, [r4, #0]
 800939c:	4632      	mov	r2, r6
 800939e:	4641      	mov	r1, r8
 80093a0:	f000 fe6f 	bl	800a082 <memmove>
 80093a4:	68a3      	ldr	r3, [r4, #8]
 80093a6:	1b9b      	subs	r3, r3, r6
 80093a8:	60a3      	str	r3, [r4, #8]
 80093aa:	6823      	ldr	r3, [r4, #0]
 80093ac:	4433      	add	r3, r6
 80093ae:	6023      	str	r3, [r4, #0]
 80093b0:	2000      	movs	r0, #0
 80093b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b6:	462a      	mov	r2, r5
 80093b8:	f000 fe35 	bl	800a026 <_realloc_r>
 80093bc:	4606      	mov	r6, r0
 80093be:	2800      	cmp	r0, #0
 80093c0:	d1e0      	bne.n	8009384 <__ssputs_r+0x5c>
 80093c2:	6921      	ldr	r1, [r4, #16]
 80093c4:	4650      	mov	r0, sl
 80093c6:	f000 feff 	bl	800a1c8 <_free_r>
 80093ca:	230c      	movs	r3, #12
 80093cc:	f8ca 3000 	str.w	r3, [sl]
 80093d0:	89a3      	ldrh	r3, [r4, #12]
 80093d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093d6:	81a3      	strh	r3, [r4, #12]
 80093d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093dc:	e7e9      	b.n	80093b2 <__ssputs_r+0x8a>
	...

080093e0 <_svfiprintf_r>:
 80093e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e4:	4698      	mov	r8, r3
 80093e6:	898b      	ldrh	r3, [r1, #12]
 80093e8:	061b      	lsls	r3, r3, #24
 80093ea:	b09d      	sub	sp, #116	@ 0x74
 80093ec:	4607      	mov	r7, r0
 80093ee:	460d      	mov	r5, r1
 80093f0:	4614      	mov	r4, r2
 80093f2:	d510      	bpl.n	8009416 <_svfiprintf_r+0x36>
 80093f4:	690b      	ldr	r3, [r1, #16]
 80093f6:	b973      	cbnz	r3, 8009416 <_svfiprintf_r+0x36>
 80093f8:	2140      	movs	r1, #64	@ 0x40
 80093fa:	f000 f917 	bl	800962c <_malloc_r>
 80093fe:	6028      	str	r0, [r5, #0]
 8009400:	6128      	str	r0, [r5, #16]
 8009402:	b930      	cbnz	r0, 8009412 <_svfiprintf_r+0x32>
 8009404:	230c      	movs	r3, #12
 8009406:	603b      	str	r3, [r7, #0]
 8009408:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800940c:	b01d      	add	sp, #116	@ 0x74
 800940e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009412:	2340      	movs	r3, #64	@ 0x40
 8009414:	616b      	str	r3, [r5, #20]
 8009416:	2300      	movs	r3, #0
 8009418:	9309      	str	r3, [sp, #36]	@ 0x24
 800941a:	2320      	movs	r3, #32
 800941c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009420:	f8cd 800c 	str.w	r8, [sp, #12]
 8009424:	2330      	movs	r3, #48	@ 0x30
 8009426:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80095c4 <_svfiprintf_r+0x1e4>
 800942a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800942e:	f04f 0901 	mov.w	r9, #1
 8009432:	4623      	mov	r3, r4
 8009434:	469a      	mov	sl, r3
 8009436:	f813 2b01 	ldrb.w	r2, [r3], #1
 800943a:	b10a      	cbz	r2, 8009440 <_svfiprintf_r+0x60>
 800943c:	2a25      	cmp	r2, #37	@ 0x25
 800943e:	d1f9      	bne.n	8009434 <_svfiprintf_r+0x54>
 8009440:	ebba 0b04 	subs.w	fp, sl, r4
 8009444:	d00b      	beq.n	800945e <_svfiprintf_r+0x7e>
 8009446:	465b      	mov	r3, fp
 8009448:	4622      	mov	r2, r4
 800944a:	4629      	mov	r1, r5
 800944c:	4638      	mov	r0, r7
 800944e:	f7ff ff6b 	bl	8009328 <__ssputs_r>
 8009452:	3001      	adds	r0, #1
 8009454:	f000 80a7 	beq.w	80095a6 <_svfiprintf_r+0x1c6>
 8009458:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800945a:	445a      	add	r2, fp
 800945c:	9209      	str	r2, [sp, #36]	@ 0x24
 800945e:	f89a 3000 	ldrb.w	r3, [sl]
 8009462:	2b00      	cmp	r3, #0
 8009464:	f000 809f 	beq.w	80095a6 <_svfiprintf_r+0x1c6>
 8009468:	2300      	movs	r3, #0
 800946a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800946e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009472:	f10a 0a01 	add.w	sl, sl, #1
 8009476:	9304      	str	r3, [sp, #16]
 8009478:	9307      	str	r3, [sp, #28]
 800947a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800947e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009480:	4654      	mov	r4, sl
 8009482:	2205      	movs	r2, #5
 8009484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009488:	484e      	ldr	r0, [pc, #312]	@ (80095c4 <_svfiprintf_r+0x1e4>)
 800948a:	f7f6 fea1 	bl	80001d0 <memchr>
 800948e:	9a04      	ldr	r2, [sp, #16]
 8009490:	b9d8      	cbnz	r0, 80094ca <_svfiprintf_r+0xea>
 8009492:	06d0      	lsls	r0, r2, #27
 8009494:	bf44      	itt	mi
 8009496:	2320      	movmi	r3, #32
 8009498:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800949c:	0711      	lsls	r1, r2, #28
 800949e:	bf44      	itt	mi
 80094a0:	232b      	movmi	r3, #43	@ 0x2b
 80094a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80094a6:	f89a 3000 	ldrb.w	r3, [sl]
 80094aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80094ac:	d015      	beq.n	80094da <_svfiprintf_r+0xfa>
 80094ae:	9a07      	ldr	r2, [sp, #28]
 80094b0:	4654      	mov	r4, sl
 80094b2:	2000      	movs	r0, #0
 80094b4:	f04f 0c0a 	mov.w	ip, #10
 80094b8:	4621      	mov	r1, r4
 80094ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094be:	3b30      	subs	r3, #48	@ 0x30
 80094c0:	2b09      	cmp	r3, #9
 80094c2:	d94b      	bls.n	800955c <_svfiprintf_r+0x17c>
 80094c4:	b1b0      	cbz	r0, 80094f4 <_svfiprintf_r+0x114>
 80094c6:	9207      	str	r2, [sp, #28]
 80094c8:	e014      	b.n	80094f4 <_svfiprintf_r+0x114>
 80094ca:	eba0 0308 	sub.w	r3, r0, r8
 80094ce:	fa09 f303 	lsl.w	r3, r9, r3
 80094d2:	4313      	orrs	r3, r2
 80094d4:	9304      	str	r3, [sp, #16]
 80094d6:	46a2      	mov	sl, r4
 80094d8:	e7d2      	b.n	8009480 <_svfiprintf_r+0xa0>
 80094da:	9b03      	ldr	r3, [sp, #12]
 80094dc:	1d19      	adds	r1, r3, #4
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	9103      	str	r1, [sp, #12]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	bfbb      	ittet	lt
 80094e6:	425b      	neglt	r3, r3
 80094e8:	f042 0202 	orrlt.w	r2, r2, #2
 80094ec:	9307      	strge	r3, [sp, #28]
 80094ee:	9307      	strlt	r3, [sp, #28]
 80094f0:	bfb8      	it	lt
 80094f2:	9204      	strlt	r2, [sp, #16]
 80094f4:	7823      	ldrb	r3, [r4, #0]
 80094f6:	2b2e      	cmp	r3, #46	@ 0x2e
 80094f8:	d10a      	bne.n	8009510 <_svfiprintf_r+0x130>
 80094fa:	7863      	ldrb	r3, [r4, #1]
 80094fc:	2b2a      	cmp	r3, #42	@ 0x2a
 80094fe:	d132      	bne.n	8009566 <_svfiprintf_r+0x186>
 8009500:	9b03      	ldr	r3, [sp, #12]
 8009502:	1d1a      	adds	r2, r3, #4
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	9203      	str	r2, [sp, #12]
 8009508:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800950c:	3402      	adds	r4, #2
 800950e:	9305      	str	r3, [sp, #20]
 8009510:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80095d4 <_svfiprintf_r+0x1f4>
 8009514:	7821      	ldrb	r1, [r4, #0]
 8009516:	2203      	movs	r2, #3
 8009518:	4650      	mov	r0, sl
 800951a:	f7f6 fe59 	bl	80001d0 <memchr>
 800951e:	b138      	cbz	r0, 8009530 <_svfiprintf_r+0x150>
 8009520:	9b04      	ldr	r3, [sp, #16]
 8009522:	eba0 000a 	sub.w	r0, r0, sl
 8009526:	2240      	movs	r2, #64	@ 0x40
 8009528:	4082      	lsls	r2, r0
 800952a:	4313      	orrs	r3, r2
 800952c:	3401      	adds	r4, #1
 800952e:	9304      	str	r3, [sp, #16]
 8009530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009534:	4824      	ldr	r0, [pc, #144]	@ (80095c8 <_svfiprintf_r+0x1e8>)
 8009536:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800953a:	2206      	movs	r2, #6
 800953c:	f7f6 fe48 	bl	80001d0 <memchr>
 8009540:	2800      	cmp	r0, #0
 8009542:	d036      	beq.n	80095b2 <_svfiprintf_r+0x1d2>
 8009544:	4b21      	ldr	r3, [pc, #132]	@ (80095cc <_svfiprintf_r+0x1ec>)
 8009546:	bb1b      	cbnz	r3, 8009590 <_svfiprintf_r+0x1b0>
 8009548:	9b03      	ldr	r3, [sp, #12]
 800954a:	3307      	adds	r3, #7
 800954c:	f023 0307 	bic.w	r3, r3, #7
 8009550:	3308      	adds	r3, #8
 8009552:	9303      	str	r3, [sp, #12]
 8009554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009556:	4433      	add	r3, r6
 8009558:	9309      	str	r3, [sp, #36]	@ 0x24
 800955a:	e76a      	b.n	8009432 <_svfiprintf_r+0x52>
 800955c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009560:	460c      	mov	r4, r1
 8009562:	2001      	movs	r0, #1
 8009564:	e7a8      	b.n	80094b8 <_svfiprintf_r+0xd8>
 8009566:	2300      	movs	r3, #0
 8009568:	3401      	adds	r4, #1
 800956a:	9305      	str	r3, [sp, #20]
 800956c:	4619      	mov	r1, r3
 800956e:	f04f 0c0a 	mov.w	ip, #10
 8009572:	4620      	mov	r0, r4
 8009574:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009578:	3a30      	subs	r2, #48	@ 0x30
 800957a:	2a09      	cmp	r2, #9
 800957c:	d903      	bls.n	8009586 <_svfiprintf_r+0x1a6>
 800957e:	2b00      	cmp	r3, #0
 8009580:	d0c6      	beq.n	8009510 <_svfiprintf_r+0x130>
 8009582:	9105      	str	r1, [sp, #20]
 8009584:	e7c4      	b.n	8009510 <_svfiprintf_r+0x130>
 8009586:	fb0c 2101 	mla	r1, ip, r1, r2
 800958a:	4604      	mov	r4, r0
 800958c:	2301      	movs	r3, #1
 800958e:	e7f0      	b.n	8009572 <_svfiprintf_r+0x192>
 8009590:	ab03      	add	r3, sp, #12
 8009592:	9300      	str	r3, [sp, #0]
 8009594:	462a      	mov	r2, r5
 8009596:	4b0e      	ldr	r3, [pc, #56]	@ (80095d0 <_svfiprintf_r+0x1f0>)
 8009598:	a904      	add	r1, sp, #16
 800959a:	4638      	mov	r0, r7
 800959c:	f7fe fb82 	bl	8007ca4 <_printf_float>
 80095a0:	1c42      	adds	r2, r0, #1
 80095a2:	4606      	mov	r6, r0
 80095a4:	d1d6      	bne.n	8009554 <_svfiprintf_r+0x174>
 80095a6:	89ab      	ldrh	r3, [r5, #12]
 80095a8:	065b      	lsls	r3, r3, #25
 80095aa:	f53f af2d 	bmi.w	8009408 <_svfiprintf_r+0x28>
 80095ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80095b0:	e72c      	b.n	800940c <_svfiprintf_r+0x2c>
 80095b2:	ab03      	add	r3, sp, #12
 80095b4:	9300      	str	r3, [sp, #0]
 80095b6:	462a      	mov	r2, r5
 80095b8:	4b05      	ldr	r3, [pc, #20]	@ (80095d0 <_svfiprintf_r+0x1f0>)
 80095ba:	a904      	add	r1, sp, #16
 80095bc:	4638      	mov	r0, r7
 80095be:	f7fe fe09 	bl	80081d4 <_printf_i>
 80095c2:	e7ed      	b.n	80095a0 <_svfiprintf_r+0x1c0>
 80095c4:	0800aba9 	.word	0x0800aba9
 80095c8:	0800abb3 	.word	0x0800abb3
 80095cc:	08007ca5 	.word	0x08007ca5
 80095d0:	08009329 	.word	0x08009329
 80095d4:	0800abaf 	.word	0x0800abaf

080095d8 <malloc>:
 80095d8:	4b02      	ldr	r3, [pc, #8]	@ (80095e4 <malloc+0xc>)
 80095da:	4601      	mov	r1, r0
 80095dc:	6818      	ldr	r0, [r3, #0]
 80095de:	f000 b825 	b.w	800962c <_malloc_r>
 80095e2:	bf00      	nop
 80095e4:	20000058 	.word	0x20000058

080095e8 <sbrk_aligned>:
 80095e8:	b570      	push	{r4, r5, r6, lr}
 80095ea:	4e0f      	ldr	r6, [pc, #60]	@ (8009628 <sbrk_aligned+0x40>)
 80095ec:	460c      	mov	r4, r1
 80095ee:	6831      	ldr	r1, [r6, #0]
 80095f0:	4605      	mov	r5, r0
 80095f2:	b911      	cbnz	r1, 80095fa <sbrk_aligned+0x12>
 80095f4:	f000 fd94 	bl	800a120 <_sbrk_r>
 80095f8:	6030      	str	r0, [r6, #0]
 80095fa:	4621      	mov	r1, r4
 80095fc:	4628      	mov	r0, r5
 80095fe:	f000 fd8f 	bl	800a120 <_sbrk_r>
 8009602:	1c43      	adds	r3, r0, #1
 8009604:	d103      	bne.n	800960e <sbrk_aligned+0x26>
 8009606:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800960a:	4620      	mov	r0, r4
 800960c:	bd70      	pop	{r4, r5, r6, pc}
 800960e:	1cc4      	adds	r4, r0, #3
 8009610:	f024 0403 	bic.w	r4, r4, #3
 8009614:	42a0      	cmp	r0, r4
 8009616:	d0f8      	beq.n	800960a <sbrk_aligned+0x22>
 8009618:	1a21      	subs	r1, r4, r0
 800961a:	4628      	mov	r0, r5
 800961c:	f000 fd80 	bl	800a120 <_sbrk_r>
 8009620:	3001      	adds	r0, #1
 8009622:	d1f2      	bne.n	800960a <sbrk_aligned+0x22>
 8009624:	e7ef      	b.n	8009606 <sbrk_aligned+0x1e>
 8009626:	bf00      	nop
 8009628:	20000be4 	.word	0x20000be4

0800962c <_malloc_r>:
 800962c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009630:	1ccd      	adds	r5, r1, #3
 8009632:	f025 0503 	bic.w	r5, r5, #3
 8009636:	3508      	adds	r5, #8
 8009638:	2d0c      	cmp	r5, #12
 800963a:	bf38      	it	cc
 800963c:	250c      	movcc	r5, #12
 800963e:	2d00      	cmp	r5, #0
 8009640:	4606      	mov	r6, r0
 8009642:	db01      	blt.n	8009648 <_malloc_r+0x1c>
 8009644:	42a9      	cmp	r1, r5
 8009646:	d904      	bls.n	8009652 <_malloc_r+0x26>
 8009648:	230c      	movs	r3, #12
 800964a:	6033      	str	r3, [r6, #0]
 800964c:	2000      	movs	r0, #0
 800964e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009652:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009728 <_malloc_r+0xfc>
 8009656:	f000 f915 	bl	8009884 <__malloc_lock>
 800965a:	f8d8 3000 	ldr.w	r3, [r8]
 800965e:	461c      	mov	r4, r3
 8009660:	bb44      	cbnz	r4, 80096b4 <_malloc_r+0x88>
 8009662:	4629      	mov	r1, r5
 8009664:	4630      	mov	r0, r6
 8009666:	f7ff ffbf 	bl	80095e8 <sbrk_aligned>
 800966a:	1c43      	adds	r3, r0, #1
 800966c:	4604      	mov	r4, r0
 800966e:	d158      	bne.n	8009722 <_malloc_r+0xf6>
 8009670:	f8d8 4000 	ldr.w	r4, [r8]
 8009674:	4627      	mov	r7, r4
 8009676:	2f00      	cmp	r7, #0
 8009678:	d143      	bne.n	8009702 <_malloc_r+0xd6>
 800967a:	2c00      	cmp	r4, #0
 800967c:	d04b      	beq.n	8009716 <_malloc_r+0xea>
 800967e:	6823      	ldr	r3, [r4, #0]
 8009680:	4639      	mov	r1, r7
 8009682:	4630      	mov	r0, r6
 8009684:	eb04 0903 	add.w	r9, r4, r3
 8009688:	f000 fd4a 	bl	800a120 <_sbrk_r>
 800968c:	4581      	cmp	r9, r0
 800968e:	d142      	bne.n	8009716 <_malloc_r+0xea>
 8009690:	6821      	ldr	r1, [r4, #0]
 8009692:	1a6d      	subs	r5, r5, r1
 8009694:	4629      	mov	r1, r5
 8009696:	4630      	mov	r0, r6
 8009698:	f7ff ffa6 	bl	80095e8 <sbrk_aligned>
 800969c:	3001      	adds	r0, #1
 800969e:	d03a      	beq.n	8009716 <_malloc_r+0xea>
 80096a0:	6823      	ldr	r3, [r4, #0]
 80096a2:	442b      	add	r3, r5
 80096a4:	6023      	str	r3, [r4, #0]
 80096a6:	f8d8 3000 	ldr.w	r3, [r8]
 80096aa:	685a      	ldr	r2, [r3, #4]
 80096ac:	bb62      	cbnz	r2, 8009708 <_malloc_r+0xdc>
 80096ae:	f8c8 7000 	str.w	r7, [r8]
 80096b2:	e00f      	b.n	80096d4 <_malloc_r+0xa8>
 80096b4:	6822      	ldr	r2, [r4, #0]
 80096b6:	1b52      	subs	r2, r2, r5
 80096b8:	d420      	bmi.n	80096fc <_malloc_r+0xd0>
 80096ba:	2a0b      	cmp	r2, #11
 80096bc:	d917      	bls.n	80096ee <_malloc_r+0xc2>
 80096be:	1961      	adds	r1, r4, r5
 80096c0:	42a3      	cmp	r3, r4
 80096c2:	6025      	str	r5, [r4, #0]
 80096c4:	bf18      	it	ne
 80096c6:	6059      	strne	r1, [r3, #4]
 80096c8:	6863      	ldr	r3, [r4, #4]
 80096ca:	bf08      	it	eq
 80096cc:	f8c8 1000 	streq.w	r1, [r8]
 80096d0:	5162      	str	r2, [r4, r5]
 80096d2:	604b      	str	r3, [r1, #4]
 80096d4:	4630      	mov	r0, r6
 80096d6:	f000 f8db 	bl	8009890 <__malloc_unlock>
 80096da:	f104 000b 	add.w	r0, r4, #11
 80096de:	1d23      	adds	r3, r4, #4
 80096e0:	f020 0007 	bic.w	r0, r0, #7
 80096e4:	1ac2      	subs	r2, r0, r3
 80096e6:	bf1c      	itt	ne
 80096e8:	1a1b      	subne	r3, r3, r0
 80096ea:	50a3      	strne	r3, [r4, r2]
 80096ec:	e7af      	b.n	800964e <_malloc_r+0x22>
 80096ee:	6862      	ldr	r2, [r4, #4]
 80096f0:	42a3      	cmp	r3, r4
 80096f2:	bf0c      	ite	eq
 80096f4:	f8c8 2000 	streq.w	r2, [r8]
 80096f8:	605a      	strne	r2, [r3, #4]
 80096fa:	e7eb      	b.n	80096d4 <_malloc_r+0xa8>
 80096fc:	4623      	mov	r3, r4
 80096fe:	6864      	ldr	r4, [r4, #4]
 8009700:	e7ae      	b.n	8009660 <_malloc_r+0x34>
 8009702:	463c      	mov	r4, r7
 8009704:	687f      	ldr	r7, [r7, #4]
 8009706:	e7b6      	b.n	8009676 <_malloc_r+0x4a>
 8009708:	461a      	mov	r2, r3
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	42a3      	cmp	r3, r4
 800970e:	d1fb      	bne.n	8009708 <_malloc_r+0xdc>
 8009710:	2300      	movs	r3, #0
 8009712:	6053      	str	r3, [r2, #4]
 8009714:	e7de      	b.n	80096d4 <_malloc_r+0xa8>
 8009716:	230c      	movs	r3, #12
 8009718:	6033      	str	r3, [r6, #0]
 800971a:	4630      	mov	r0, r6
 800971c:	f000 f8b8 	bl	8009890 <__malloc_unlock>
 8009720:	e794      	b.n	800964c <_malloc_r+0x20>
 8009722:	6005      	str	r5, [r0, #0]
 8009724:	e7d6      	b.n	80096d4 <_malloc_r+0xa8>
 8009726:	bf00      	nop
 8009728:	20000be8 	.word	0x20000be8

0800972c <__sflush_r>:
 800972c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009734:	0716      	lsls	r6, r2, #28
 8009736:	4605      	mov	r5, r0
 8009738:	460c      	mov	r4, r1
 800973a:	d454      	bmi.n	80097e6 <__sflush_r+0xba>
 800973c:	684b      	ldr	r3, [r1, #4]
 800973e:	2b00      	cmp	r3, #0
 8009740:	dc02      	bgt.n	8009748 <__sflush_r+0x1c>
 8009742:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009744:	2b00      	cmp	r3, #0
 8009746:	dd48      	ble.n	80097da <__sflush_r+0xae>
 8009748:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800974a:	2e00      	cmp	r6, #0
 800974c:	d045      	beq.n	80097da <__sflush_r+0xae>
 800974e:	2300      	movs	r3, #0
 8009750:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009754:	682f      	ldr	r7, [r5, #0]
 8009756:	6a21      	ldr	r1, [r4, #32]
 8009758:	602b      	str	r3, [r5, #0]
 800975a:	d030      	beq.n	80097be <__sflush_r+0x92>
 800975c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800975e:	89a3      	ldrh	r3, [r4, #12]
 8009760:	0759      	lsls	r1, r3, #29
 8009762:	d505      	bpl.n	8009770 <__sflush_r+0x44>
 8009764:	6863      	ldr	r3, [r4, #4]
 8009766:	1ad2      	subs	r2, r2, r3
 8009768:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800976a:	b10b      	cbz	r3, 8009770 <__sflush_r+0x44>
 800976c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800976e:	1ad2      	subs	r2, r2, r3
 8009770:	2300      	movs	r3, #0
 8009772:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009774:	6a21      	ldr	r1, [r4, #32]
 8009776:	4628      	mov	r0, r5
 8009778:	47b0      	blx	r6
 800977a:	1c43      	adds	r3, r0, #1
 800977c:	89a3      	ldrh	r3, [r4, #12]
 800977e:	d106      	bne.n	800978e <__sflush_r+0x62>
 8009780:	6829      	ldr	r1, [r5, #0]
 8009782:	291d      	cmp	r1, #29
 8009784:	d82b      	bhi.n	80097de <__sflush_r+0xb2>
 8009786:	4a2a      	ldr	r2, [pc, #168]	@ (8009830 <__sflush_r+0x104>)
 8009788:	410a      	asrs	r2, r1
 800978a:	07d6      	lsls	r6, r2, #31
 800978c:	d427      	bmi.n	80097de <__sflush_r+0xb2>
 800978e:	2200      	movs	r2, #0
 8009790:	6062      	str	r2, [r4, #4]
 8009792:	04d9      	lsls	r1, r3, #19
 8009794:	6922      	ldr	r2, [r4, #16]
 8009796:	6022      	str	r2, [r4, #0]
 8009798:	d504      	bpl.n	80097a4 <__sflush_r+0x78>
 800979a:	1c42      	adds	r2, r0, #1
 800979c:	d101      	bne.n	80097a2 <__sflush_r+0x76>
 800979e:	682b      	ldr	r3, [r5, #0]
 80097a0:	b903      	cbnz	r3, 80097a4 <__sflush_r+0x78>
 80097a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80097a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097a6:	602f      	str	r7, [r5, #0]
 80097a8:	b1b9      	cbz	r1, 80097da <__sflush_r+0xae>
 80097aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097ae:	4299      	cmp	r1, r3
 80097b0:	d002      	beq.n	80097b8 <__sflush_r+0x8c>
 80097b2:	4628      	mov	r0, r5
 80097b4:	f000 fd08 	bl	800a1c8 <_free_r>
 80097b8:	2300      	movs	r3, #0
 80097ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80097bc:	e00d      	b.n	80097da <__sflush_r+0xae>
 80097be:	2301      	movs	r3, #1
 80097c0:	4628      	mov	r0, r5
 80097c2:	47b0      	blx	r6
 80097c4:	4602      	mov	r2, r0
 80097c6:	1c50      	adds	r0, r2, #1
 80097c8:	d1c9      	bne.n	800975e <__sflush_r+0x32>
 80097ca:	682b      	ldr	r3, [r5, #0]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d0c6      	beq.n	800975e <__sflush_r+0x32>
 80097d0:	2b1d      	cmp	r3, #29
 80097d2:	d001      	beq.n	80097d8 <__sflush_r+0xac>
 80097d4:	2b16      	cmp	r3, #22
 80097d6:	d11e      	bne.n	8009816 <__sflush_r+0xea>
 80097d8:	602f      	str	r7, [r5, #0]
 80097da:	2000      	movs	r0, #0
 80097dc:	e022      	b.n	8009824 <__sflush_r+0xf8>
 80097de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097e2:	b21b      	sxth	r3, r3
 80097e4:	e01b      	b.n	800981e <__sflush_r+0xf2>
 80097e6:	690f      	ldr	r7, [r1, #16]
 80097e8:	2f00      	cmp	r7, #0
 80097ea:	d0f6      	beq.n	80097da <__sflush_r+0xae>
 80097ec:	0793      	lsls	r3, r2, #30
 80097ee:	680e      	ldr	r6, [r1, #0]
 80097f0:	bf08      	it	eq
 80097f2:	694b      	ldreq	r3, [r1, #20]
 80097f4:	600f      	str	r7, [r1, #0]
 80097f6:	bf18      	it	ne
 80097f8:	2300      	movne	r3, #0
 80097fa:	eba6 0807 	sub.w	r8, r6, r7
 80097fe:	608b      	str	r3, [r1, #8]
 8009800:	f1b8 0f00 	cmp.w	r8, #0
 8009804:	dde9      	ble.n	80097da <__sflush_r+0xae>
 8009806:	6a21      	ldr	r1, [r4, #32]
 8009808:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800980a:	4643      	mov	r3, r8
 800980c:	463a      	mov	r2, r7
 800980e:	4628      	mov	r0, r5
 8009810:	47b0      	blx	r6
 8009812:	2800      	cmp	r0, #0
 8009814:	dc08      	bgt.n	8009828 <__sflush_r+0xfc>
 8009816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800981a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800981e:	81a3      	strh	r3, [r4, #12]
 8009820:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009828:	4407      	add	r7, r0
 800982a:	eba8 0800 	sub.w	r8, r8, r0
 800982e:	e7e7      	b.n	8009800 <__sflush_r+0xd4>
 8009830:	dfbffffe 	.word	0xdfbffffe

08009834 <_fflush_r>:
 8009834:	b538      	push	{r3, r4, r5, lr}
 8009836:	690b      	ldr	r3, [r1, #16]
 8009838:	4605      	mov	r5, r0
 800983a:	460c      	mov	r4, r1
 800983c:	b913      	cbnz	r3, 8009844 <_fflush_r+0x10>
 800983e:	2500      	movs	r5, #0
 8009840:	4628      	mov	r0, r5
 8009842:	bd38      	pop	{r3, r4, r5, pc}
 8009844:	b118      	cbz	r0, 800984e <_fflush_r+0x1a>
 8009846:	6a03      	ldr	r3, [r0, #32]
 8009848:	b90b      	cbnz	r3, 800984e <_fflush_r+0x1a>
 800984a:	f7fe fea3 	bl	8008594 <__sinit>
 800984e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d0f3      	beq.n	800983e <_fflush_r+0xa>
 8009856:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009858:	07d0      	lsls	r0, r2, #31
 800985a:	d404      	bmi.n	8009866 <_fflush_r+0x32>
 800985c:	0599      	lsls	r1, r3, #22
 800985e:	d402      	bmi.n	8009866 <_fflush_r+0x32>
 8009860:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009862:	f7fe ff04 	bl	800866e <__retarget_lock_acquire_recursive>
 8009866:	4628      	mov	r0, r5
 8009868:	4621      	mov	r1, r4
 800986a:	f7ff ff5f 	bl	800972c <__sflush_r>
 800986e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009870:	07da      	lsls	r2, r3, #31
 8009872:	4605      	mov	r5, r0
 8009874:	d4e4      	bmi.n	8009840 <_fflush_r+0xc>
 8009876:	89a3      	ldrh	r3, [r4, #12]
 8009878:	059b      	lsls	r3, r3, #22
 800987a:	d4e1      	bmi.n	8009840 <_fflush_r+0xc>
 800987c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800987e:	f7fe fef7 	bl	8008670 <__retarget_lock_release_recursive>
 8009882:	e7dd      	b.n	8009840 <_fflush_r+0xc>

08009884 <__malloc_lock>:
 8009884:	4801      	ldr	r0, [pc, #4]	@ (800988c <__malloc_lock+0x8>)
 8009886:	f7fe bef2 	b.w	800866e <__retarget_lock_acquire_recursive>
 800988a:	bf00      	nop
 800988c:	20000be0 	.word	0x20000be0

08009890 <__malloc_unlock>:
 8009890:	4801      	ldr	r0, [pc, #4]	@ (8009898 <__malloc_unlock+0x8>)
 8009892:	f7fe beed 	b.w	8008670 <__retarget_lock_release_recursive>
 8009896:	bf00      	nop
 8009898:	20000be0 	.word	0x20000be0

0800989c <_Balloc>:
 800989c:	b570      	push	{r4, r5, r6, lr}
 800989e:	69c6      	ldr	r6, [r0, #28]
 80098a0:	4604      	mov	r4, r0
 80098a2:	460d      	mov	r5, r1
 80098a4:	b976      	cbnz	r6, 80098c4 <_Balloc+0x28>
 80098a6:	2010      	movs	r0, #16
 80098a8:	f7ff fe96 	bl	80095d8 <malloc>
 80098ac:	4602      	mov	r2, r0
 80098ae:	61e0      	str	r0, [r4, #28]
 80098b0:	b920      	cbnz	r0, 80098bc <_Balloc+0x20>
 80098b2:	4b18      	ldr	r3, [pc, #96]	@ (8009914 <_Balloc+0x78>)
 80098b4:	4818      	ldr	r0, [pc, #96]	@ (8009918 <_Balloc+0x7c>)
 80098b6:	216b      	movs	r1, #107	@ 0x6b
 80098b8:	f000 fc54 	bl	800a164 <__assert_func>
 80098bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80098c0:	6006      	str	r6, [r0, #0]
 80098c2:	60c6      	str	r6, [r0, #12]
 80098c4:	69e6      	ldr	r6, [r4, #28]
 80098c6:	68f3      	ldr	r3, [r6, #12]
 80098c8:	b183      	cbz	r3, 80098ec <_Balloc+0x50>
 80098ca:	69e3      	ldr	r3, [r4, #28]
 80098cc:	68db      	ldr	r3, [r3, #12]
 80098ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80098d2:	b9b8      	cbnz	r0, 8009904 <_Balloc+0x68>
 80098d4:	2101      	movs	r1, #1
 80098d6:	fa01 f605 	lsl.w	r6, r1, r5
 80098da:	1d72      	adds	r2, r6, #5
 80098dc:	0092      	lsls	r2, r2, #2
 80098de:	4620      	mov	r0, r4
 80098e0:	f000 fc5e 	bl	800a1a0 <_calloc_r>
 80098e4:	b160      	cbz	r0, 8009900 <_Balloc+0x64>
 80098e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80098ea:	e00e      	b.n	800990a <_Balloc+0x6e>
 80098ec:	2221      	movs	r2, #33	@ 0x21
 80098ee:	2104      	movs	r1, #4
 80098f0:	4620      	mov	r0, r4
 80098f2:	f000 fc55 	bl	800a1a0 <_calloc_r>
 80098f6:	69e3      	ldr	r3, [r4, #28]
 80098f8:	60f0      	str	r0, [r6, #12]
 80098fa:	68db      	ldr	r3, [r3, #12]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d1e4      	bne.n	80098ca <_Balloc+0x2e>
 8009900:	2000      	movs	r0, #0
 8009902:	bd70      	pop	{r4, r5, r6, pc}
 8009904:	6802      	ldr	r2, [r0, #0]
 8009906:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800990a:	2300      	movs	r3, #0
 800990c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009910:	e7f7      	b.n	8009902 <_Balloc+0x66>
 8009912:	bf00      	nop
 8009914:	0800ab29 	.word	0x0800ab29
 8009918:	0800abba 	.word	0x0800abba

0800991c <_Bfree>:
 800991c:	b570      	push	{r4, r5, r6, lr}
 800991e:	69c6      	ldr	r6, [r0, #28]
 8009920:	4605      	mov	r5, r0
 8009922:	460c      	mov	r4, r1
 8009924:	b976      	cbnz	r6, 8009944 <_Bfree+0x28>
 8009926:	2010      	movs	r0, #16
 8009928:	f7ff fe56 	bl	80095d8 <malloc>
 800992c:	4602      	mov	r2, r0
 800992e:	61e8      	str	r0, [r5, #28]
 8009930:	b920      	cbnz	r0, 800993c <_Bfree+0x20>
 8009932:	4b09      	ldr	r3, [pc, #36]	@ (8009958 <_Bfree+0x3c>)
 8009934:	4809      	ldr	r0, [pc, #36]	@ (800995c <_Bfree+0x40>)
 8009936:	218f      	movs	r1, #143	@ 0x8f
 8009938:	f000 fc14 	bl	800a164 <__assert_func>
 800993c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009940:	6006      	str	r6, [r0, #0]
 8009942:	60c6      	str	r6, [r0, #12]
 8009944:	b13c      	cbz	r4, 8009956 <_Bfree+0x3a>
 8009946:	69eb      	ldr	r3, [r5, #28]
 8009948:	6862      	ldr	r2, [r4, #4]
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009950:	6021      	str	r1, [r4, #0]
 8009952:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009956:	bd70      	pop	{r4, r5, r6, pc}
 8009958:	0800ab29 	.word	0x0800ab29
 800995c:	0800abba 	.word	0x0800abba

08009960 <__multadd>:
 8009960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009964:	690d      	ldr	r5, [r1, #16]
 8009966:	4607      	mov	r7, r0
 8009968:	460c      	mov	r4, r1
 800996a:	461e      	mov	r6, r3
 800996c:	f101 0c14 	add.w	ip, r1, #20
 8009970:	2000      	movs	r0, #0
 8009972:	f8dc 3000 	ldr.w	r3, [ip]
 8009976:	b299      	uxth	r1, r3
 8009978:	fb02 6101 	mla	r1, r2, r1, r6
 800997c:	0c1e      	lsrs	r6, r3, #16
 800997e:	0c0b      	lsrs	r3, r1, #16
 8009980:	fb02 3306 	mla	r3, r2, r6, r3
 8009984:	b289      	uxth	r1, r1
 8009986:	3001      	adds	r0, #1
 8009988:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800998c:	4285      	cmp	r5, r0
 800998e:	f84c 1b04 	str.w	r1, [ip], #4
 8009992:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009996:	dcec      	bgt.n	8009972 <__multadd+0x12>
 8009998:	b30e      	cbz	r6, 80099de <__multadd+0x7e>
 800999a:	68a3      	ldr	r3, [r4, #8]
 800999c:	42ab      	cmp	r3, r5
 800999e:	dc19      	bgt.n	80099d4 <__multadd+0x74>
 80099a0:	6861      	ldr	r1, [r4, #4]
 80099a2:	4638      	mov	r0, r7
 80099a4:	3101      	adds	r1, #1
 80099a6:	f7ff ff79 	bl	800989c <_Balloc>
 80099aa:	4680      	mov	r8, r0
 80099ac:	b928      	cbnz	r0, 80099ba <__multadd+0x5a>
 80099ae:	4602      	mov	r2, r0
 80099b0:	4b0c      	ldr	r3, [pc, #48]	@ (80099e4 <__multadd+0x84>)
 80099b2:	480d      	ldr	r0, [pc, #52]	@ (80099e8 <__multadd+0x88>)
 80099b4:	21ba      	movs	r1, #186	@ 0xba
 80099b6:	f000 fbd5 	bl	800a164 <__assert_func>
 80099ba:	6922      	ldr	r2, [r4, #16]
 80099bc:	3202      	adds	r2, #2
 80099be:	f104 010c 	add.w	r1, r4, #12
 80099c2:	0092      	lsls	r2, r2, #2
 80099c4:	300c      	adds	r0, #12
 80099c6:	f7fe fe54 	bl	8008672 <memcpy>
 80099ca:	4621      	mov	r1, r4
 80099cc:	4638      	mov	r0, r7
 80099ce:	f7ff ffa5 	bl	800991c <_Bfree>
 80099d2:	4644      	mov	r4, r8
 80099d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80099d8:	3501      	adds	r5, #1
 80099da:	615e      	str	r6, [r3, #20]
 80099dc:	6125      	str	r5, [r4, #16]
 80099de:	4620      	mov	r0, r4
 80099e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099e4:	0800ab98 	.word	0x0800ab98
 80099e8:	0800abba 	.word	0x0800abba

080099ec <__hi0bits>:
 80099ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80099f0:	4603      	mov	r3, r0
 80099f2:	bf36      	itet	cc
 80099f4:	0403      	lslcc	r3, r0, #16
 80099f6:	2000      	movcs	r0, #0
 80099f8:	2010      	movcc	r0, #16
 80099fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80099fe:	bf3c      	itt	cc
 8009a00:	021b      	lslcc	r3, r3, #8
 8009a02:	3008      	addcc	r0, #8
 8009a04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a08:	bf3c      	itt	cc
 8009a0a:	011b      	lslcc	r3, r3, #4
 8009a0c:	3004      	addcc	r0, #4
 8009a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a12:	bf3c      	itt	cc
 8009a14:	009b      	lslcc	r3, r3, #2
 8009a16:	3002      	addcc	r0, #2
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	db05      	blt.n	8009a28 <__hi0bits+0x3c>
 8009a1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009a20:	f100 0001 	add.w	r0, r0, #1
 8009a24:	bf08      	it	eq
 8009a26:	2020      	moveq	r0, #32
 8009a28:	4770      	bx	lr

08009a2a <__lo0bits>:
 8009a2a:	6803      	ldr	r3, [r0, #0]
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	f013 0007 	ands.w	r0, r3, #7
 8009a32:	d00b      	beq.n	8009a4c <__lo0bits+0x22>
 8009a34:	07d9      	lsls	r1, r3, #31
 8009a36:	d421      	bmi.n	8009a7c <__lo0bits+0x52>
 8009a38:	0798      	lsls	r0, r3, #30
 8009a3a:	bf49      	itett	mi
 8009a3c:	085b      	lsrmi	r3, r3, #1
 8009a3e:	089b      	lsrpl	r3, r3, #2
 8009a40:	2001      	movmi	r0, #1
 8009a42:	6013      	strmi	r3, [r2, #0]
 8009a44:	bf5c      	itt	pl
 8009a46:	6013      	strpl	r3, [r2, #0]
 8009a48:	2002      	movpl	r0, #2
 8009a4a:	4770      	bx	lr
 8009a4c:	b299      	uxth	r1, r3
 8009a4e:	b909      	cbnz	r1, 8009a54 <__lo0bits+0x2a>
 8009a50:	0c1b      	lsrs	r3, r3, #16
 8009a52:	2010      	movs	r0, #16
 8009a54:	b2d9      	uxtb	r1, r3
 8009a56:	b909      	cbnz	r1, 8009a5c <__lo0bits+0x32>
 8009a58:	3008      	adds	r0, #8
 8009a5a:	0a1b      	lsrs	r3, r3, #8
 8009a5c:	0719      	lsls	r1, r3, #28
 8009a5e:	bf04      	itt	eq
 8009a60:	091b      	lsreq	r3, r3, #4
 8009a62:	3004      	addeq	r0, #4
 8009a64:	0799      	lsls	r1, r3, #30
 8009a66:	bf04      	itt	eq
 8009a68:	089b      	lsreq	r3, r3, #2
 8009a6a:	3002      	addeq	r0, #2
 8009a6c:	07d9      	lsls	r1, r3, #31
 8009a6e:	d403      	bmi.n	8009a78 <__lo0bits+0x4e>
 8009a70:	085b      	lsrs	r3, r3, #1
 8009a72:	f100 0001 	add.w	r0, r0, #1
 8009a76:	d003      	beq.n	8009a80 <__lo0bits+0x56>
 8009a78:	6013      	str	r3, [r2, #0]
 8009a7a:	4770      	bx	lr
 8009a7c:	2000      	movs	r0, #0
 8009a7e:	4770      	bx	lr
 8009a80:	2020      	movs	r0, #32
 8009a82:	4770      	bx	lr

08009a84 <__i2b>:
 8009a84:	b510      	push	{r4, lr}
 8009a86:	460c      	mov	r4, r1
 8009a88:	2101      	movs	r1, #1
 8009a8a:	f7ff ff07 	bl	800989c <_Balloc>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	b928      	cbnz	r0, 8009a9e <__i2b+0x1a>
 8009a92:	4b05      	ldr	r3, [pc, #20]	@ (8009aa8 <__i2b+0x24>)
 8009a94:	4805      	ldr	r0, [pc, #20]	@ (8009aac <__i2b+0x28>)
 8009a96:	f240 1145 	movw	r1, #325	@ 0x145
 8009a9a:	f000 fb63 	bl	800a164 <__assert_func>
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	6144      	str	r4, [r0, #20]
 8009aa2:	6103      	str	r3, [r0, #16]
 8009aa4:	bd10      	pop	{r4, pc}
 8009aa6:	bf00      	nop
 8009aa8:	0800ab98 	.word	0x0800ab98
 8009aac:	0800abba 	.word	0x0800abba

08009ab0 <__multiply>:
 8009ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ab4:	4614      	mov	r4, r2
 8009ab6:	690a      	ldr	r2, [r1, #16]
 8009ab8:	6923      	ldr	r3, [r4, #16]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	bfa8      	it	ge
 8009abe:	4623      	movge	r3, r4
 8009ac0:	460f      	mov	r7, r1
 8009ac2:	bfa4      	itt	ge
 8009ac4:	460c      	movge	r4, r1
 8009ac6:	461f      	movge	r7, r3
 8009ac8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009acc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009ad0:	68a3      	ldr	r3, [r4, #8]
 8009ad2:	6861      	ldr	r1, [r4, #4]
 8009ad4:	eb0a 0609 	add.w	r6, sl, r9
 8009ad8:	42b3      	cmp	r3, r6
 8009ada:	b085      	sub	sp, #20
 8009adc:	bfb8      	it	lt
 8009ade:	3101      	addlt	r1, #1
 8009ae0:	f7ff fedc 	bl	800989c <_Balloc>
 8009ae4:	b930      	cbnz	r0, 8009af4 <__multiply+0x44>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	4b44      	ldr	r3, [pc, #272]	@ (8009bfc <__multiply+0x14c>)
 8009aea:	4845      	ldr	r0, [pc, #276]	@ (8009c00 <__multiply+0x150>)
 8009aec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009af0:	f000 fb38 	bl	800a164 <__assert_func>
 8009af4:	f100 0514 	add.w	r5, r0, #20
 8009af8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009afc:	462b      	mov	r3, r5
 8009afe:	2200      	movs	r2, #0
 8009b00:	4543      	cmp	r3, r8
 8009b02:	d321      	bcc.n	8009b48 <__multiply+0x98>
 8009b04:	f107 0114 	add.w	r1, r7, #20
 8009b08:	f104 0214 	add.w	r2, r4, #20
 8009b0c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009b10:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009b14:	9302      	str	r3, [sp, #8]
 8009b16:	1b13      	subs	r3, r2, r4
 8009b18:	3b15      	subs	r3, #21
 8009b1a:	f023 0303 	bic.w	r3, r3, #3
 8009b1e:	3304      	adds	r3, #4
 8009b20:	f104 0715 	add.w	r7, r4, #21
 8009b24:	42ba      	cmp	r2, r7
 8009b26:	bf38      	it	cc
 8009b28:	2304      	movcc	r3, #4
 8009b2a:	9301      	str	r3, [sp, #4]
 8009b2c:	9b02      	ldr	r3, [sp, #8]
 8009b2e:	9103      	str	r1, [sp, #12]
 8009b30:	428b      	cmp	r3, r1
 8009b32:	d80c      	bhi.n	8009b4e <__multiply+0x9e>
 8009b34:	2e00      	cmp	r6, #0
 8009b36:	dd03      	ble.n	8009b40 <__multiply+0x90>
 8009b38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d05b      	beq.n	8009bf8 <__multiply+0x148>
 8009b40:	6106      	str	r6, [r0, #16]
 8009b42:	b005      	add	sp, #20
 8009b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b48:	f843 2b04 	str.w	r2, [r3], #4
 8009b4c:	e7d8      	b.n	8009b00 <__multiply+0x50>
 8009b4e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009b52:	f1ba 0f00 	cmp.w	sl, #0
 8009b56:	d024      	beq.n	8009ba2 <__multiply+0xf2>
 8009b58:	f104 0e14 	add.w	lr, r4, #20
 8009b5c:	46a9      	mov	r9, r5
 8009b5e:	f04f 0c00 	mov.w	ip, #0
 8009b62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009b66:	f8d9 3000 	ldr.w	r3, [r9]
 8009b6a:	fa1f fb87 	uxth.w	fp, r7
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	fb0a 330b 	mla	r3, sl, fp, r3
 8009b74:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009b78:	f8d9 7000 	ldr.w	r7, [r9]
 8009b7c:	4463      	add	r3, ip
 8009b7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009b82:	fb0a c70b 	mla	r7, sl, fp, ip
 8009b86:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009b90:	4572      	cmp	r2, lr
 8009b92:	f849 3b04 	str.w	r3, [r9], #4
 8009b96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009b9a:	d8e2      	bhi.n	8009b62 <__multiply+0xb2>
 8009b9c:	9b01      	ldr	r3, [sp, #4]
 8009b9e:	f845 c003 	str.w	ip, [r5, r3]
 8009ba2:	9b03      	ldr	r3, [sp, #12]
 8009ba4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009ba8:	3104      	adds	r1, #4
 8009baa:	f1b9 0f00 	cmp.w	r9, #0
 8009bae:	d021      	beq.n	8009bf4 <__multiply+0x144>
 8009bb0:	682b      	ldr	r3, [r5, #0]
 8009bb2:	f104 0c14 	add.w	ip, r4, #20
 8009bb6:	46ae      	mov	lr, r5
 8009bb8:	f04f 0a00 	mov.w	sl, #0
 8009bbc:	f8bc b000 	ldrh.w	fp, [ip]
 8009bc0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009bc4:	fb09 770b 	mla	r7, r9, fp, r7
 8009bc8:	4457      	add	r7, sl
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009bd0:	f84e 3b04 	str.w	r3, [lr], #4
 8009bd4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009bd8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009bdc:	f8be 3000 	ldrh.w	r3, [lr]
 8009be0:	fb09 330a 	mla	r3, r9, sl, r3
 8009be4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009be8:	4562      	cmp	r2, ip
 8009bea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009bee:	d8e5      	bhi.n	8009bbc <__multiply+0x10c>
 8009bf0:	9f01      	ldr	r7, [sp, #4]
 8009bf2:	51eb      	str	r3, [r5, r7]
 8009bf4:	3504      	adds	r5, #4
 8009bf6:	e799      	b.n	8009b2c <__multiply+0x7c>
 8009bf8:	3e01      	subs	r6, #1
 8009bfa:	e79b      	b.n	8009b34 <__multiply+0x84>
 8009bfc:	0800ab98 	.word	0x0800ab98
 8009c00:	0800abba 	.word	0x0800abba

08009c04 <__pow5mult>:
 8009c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c08:	4615      	mov	r5, r2
 8009c0a:	f012 0203 	ands.w	r2, r2, #3
 8009c0e:	4607      	mov	r7, r0
 8009c10:	460e      	mov	r6, r1
 8009c12:	d007      	beq.n	8009c24 <__pow5mult+0x20>
 8009c14:	4c25      	ldr	r4, [pc, #148]	@ (8009cac <__pow5mult+0xa8>)
 8009c16:	3a01      	subs	r2, #1
 8009c18:	2300      	movs	r3, #0
 8009c1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c1e:	f7ff fe9f 	bl	8009960 <__multadd>
 8009c22:	4606      	mov	r6, r0
 8009c24:	10ad      	asrs	r5, r5, #2
 8009c26:	d03d      	beq.n	8009ca4 <__pow5mult+0xa0>
 8009c28:	69fc      	ldr	r4, [r7, #28]
 8009c2a:	b97c      	cbnz	r4, 8009c4c <__pow5mult+0x48>
 8009c2c:	2010      	movs	r0, #16
 8009c2e:	f7ff fcd3 	bl	80095d8 <malloc>
 8009c32:	4602      	mov	r2, r0
 8009c34:	61f8      	str	r0, [r7, #28]
 8009c36:	b928      	cbnz	r0, 8009c44 <__pow5mult+0x40>
 8009c38:	4b1d      	ldr	r3, [pc, #116]	@ (8009cb0 <__pow5mult+0xac>)
 8009c3a:	481e      	ldr	r0, [pc, #120]	@ (8009cb4 <__pow5mult+0xb0>)
 8009c3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009c40:	f000 fa90 	bl	800a164 <__assert_func>
 8009c44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c48:	6004      	str	r4, [r0, #0]
 8009c4a:	60c4      	str	r4, [r0, #12]
 8009c4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009c50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009c54:	b94c      	cbnz	r4, 8009c6a <__pow5mult+0x66>
 8009c56:	f240 2171 	movw	r1, #625	@ 0x271
 8009c5a:	4638      	mov	r0, r7
 8009c5c:	f7ff ff12 	bl	8009a84 <__i2b>
 8009c60:	2300      	movs	r3, #0
 8009c62:	f8c8 0008 	str.w	r0, [r8, #8]
 8009c66:	4604      	mov	r4, r0
 8009c68:	6003      	str	r3, [r0, #0]
 8009c6a:	f04f 0900 	mov.w	r9, #0
 8009c6e:	07eb      	lsls	r3, r5, #31
 8009c70:	d50a      	bpl.n	8009c88 <__pow5mult+0x84>
 8009c72:	4631      	mov	r1, r6
 8009c74:	4622      	mov	r2, r4
 8009c76:	4638      	mov	r0, r7
 8009c78:	f7ff ff1a 	bl	8009ab0 <__multiply>
 8009c7c:	4631      	mov	r1, r6
 8009c7e:	4680      	mov	r8, r0
 8009c80:	4638      	mov	r0, r7
 8009c82:	f7ff fe4b 	bl	800991c <_Bfree>
 8009c86:	4646      	mov	r6, r8
 8009c88:	106d      	asrs	r5, r5, #1
 8009c8a:	d00b      	beq.n	8009ca4 <__pow5mult+0xa0>
 8009c8c:	6820      	ldr	r0, [r4, #0]
 8009c8e:	b938      	cbnz	r0, 8009ca0 <__pow5mult+0x9c>
 8009c90:	4622      	mov	r2, r4
 8009c92:	4621      	mov	r1, r4
 8009c94:	4638      	mov	r0, r7
 8009c96:	f7ff ff0b 	bl	8009ab0 <__multiply>
 8009c9a:	6020      	str	r0, [r4, #0]
 8009c9c:	f8c0 9000 	str.w	r9, [r0]
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	e7e4      	b.n	8009c6e <__pow5mult+0x6a>
 8009ca4:	4630      	mov	r0, r6
 8009ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009caa:	bf00      	nop
 8009cac:	0800ac14 	.word	0x0800ac14
 8009cb0:	0800ab29 	.word	0x0800ab29
 8009cb4:	0800abba 	.word	0x0800abba

08009cb8 <__lshift>:
 8009cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cbc:	460c      	mov	r4, r1
 8009cbe:	6849      	ldr	r1, [r1, #4]
 8009cc0:	6923      	ldr	r3, [r4, #16]
 8009cc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009cc6:	68a3      	ldr	r3, [r4, #8]
 8009cc8:	4607      	mov	r7, r0
 8009cca:	4691      	mov	r9, r2
 8009ccc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009cd0:	f108 0601 	add.w	r6, r8, #1
 8009cd4:	42b3      	cmp	r3, r6
 8009cd6:	db0b      	blt.n	8009cf0 <__lshift+0x38>
 8009cd8:	4638      	mov	r0, r7
 8009cda:	f7ff fddf 	bl	800989c <_Balloc>
 8009cde:	4605      	mov	r5, r0
 8009ce0:	b948      	cbnz	r0, 8009cf6 <__lshift+0x3e>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	4b28      	ldr	r3, [pc, #160]	@ (8009d88 <__lshift+0xd0>)
 8009ce6:	4829      	ldr	r0, [pc, #164]	@ (8009d8c <__lshift+0xd4>)
 8009ce8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009cec:	f000 fa3a 	bl	800a164 <__assert_func>
 8009cf0:	3101      	adds	r1, #1
 8009cf2:	005b      	lsls	r3, r3, #1
 8009cf4:	e7ee      	b.n	8009cd4 <__lshift+0x1c>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	f100 0114 	add.w	r1, r0, #20
 8009cfc:	f100 0210 	add.w	r2, r0, #16
 8009d00:	4618      	mov	r0, r3
 8009d02:	4553      	cmp	r3, sl
 8009d04:	db33      	blt.n	8009d6e <__lshift+0xb6>
 8009d06:	6920      	ldr	r0, [r4, #16]
 8009d08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d0c:	f104 0314 	add.w	r3, r4, #20
 8009d10:	f019 091f 	ands.w	r9, r9, #31
 8009d14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d1c:	d02b      	beq.n	8009d76 <__lshift+0xbe>
 8009d1e:	f1c9 0e20 	rsb	lr, r9, #32
 8009d22:	468a      	mov	sl, r1
 8009d24:	2200      	movs	r2, #0
 8009d26:	6818      	ldr	r0, [r3, #0]
 8009d28:	fa00 f009 	lsl.w	r0, r0, r9
 8009d2c:	4310      	orrs	r0, r2
 8009d2e:	f84a 0b04 	str.w	r0, [sl], #4
 8009d32:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d36:	459c      	cmp	ip, r3
 8009d38:	fa22 f20e 	lsr.w	r2, r2, lr
 8009d3c:	d8f3      	bhi.n	8009d26 <__lshift+0x6e>
 8009d3e:	ebac 0304 	sub.w	r3, ip, r4
 8009d42:	3b15      	subs	r3, #21
 8009d44:	f023 0303 	bic.w	r3, r3, #3
 8009d48:	3304      	adds	r3, #4
 8009d4a:	f104 0015 	add.w	r0, r4, #21
 8009d4e:	4584      	cmp	ip, r0
 8009d50:	bf38      	it	cc
 8009d52:	2304      	movcc	r3, #4
 8009d54:	50ca      	str	r2, [r1, r3]
 8009d56:	b10a      	cbz	r2, 8009d5c <__lshift+0xa4>
 8009d58:	f108 0602 	add.w	r6, r8, #2
 8009d5c:	3e01      	subs	r6, #1
 8009d5e:	4638      	mov	r0, r7
 8009d60:	612e      	str	r6, [r5, #16]
 8009d62:	4621      	mov	r1, r4
 8009d64:	f7ff fdda 	bl	800991c <_Bfree>
 8009d68:	4628      	mov	r0, r5
 8009d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009d72:	3301      	adds	r3, #1
 8009d74:	e7c5      	b.n	8009d02 <__lshift+0x4a>
 8009d76:	3904      	subs	r1, #4
 8009d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009d80:	459c      	cmp	ip, r3
 8009d82:	d8f9      	bhi.n	8009d78 <__lshift+0xc0>
 8009d84:	e7ea      	b.n	8009d5c <__lshift+0xa4>
 8009d86:	bf00      	nop
 8009d88:	0800ab98 	.word	0x0800ab98
 8009d8c:	0800abba 	.word	0x0800abba

08009d90 <__mcmp>:
 8009d90:	690a      	ldr	r2, [r1, #16]
 8009d92:	4603      	mov	r3, r0
 8009d94:	6900      	ldr	r0, [r0, #16]
 8009d96:	1a80      	subs	r0, r0, r2
 8009d98:	b530      	push	{r4, r5, lr}
 8009d9a:	d10e      	bne.n	8009dba <__mcmp+0x2a>
 8009d9c:	3314      	adds	r3, #20
 8009d9e:	3114      	adds	r1, #20
 8009da0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009da4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009da8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009dac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009db0:	4295      	cmp	r5, r2
 8009db2:	d003      	beq.n	8009dbc <__mcmp+0x2c>
 8009db4:	d205      	bcs.n	8009dc2 <__mcmp+0x32>
 8009db6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009dba:	bd30      	pop	{r4, r5, pc}
 8009dbc:	42a3      	cmp	r3, r4
 8009dbe:	d3f3      	bcc.n	8009da8 <__mcmp+0x18>
 8009dc0:	e7fb      	b.n	8009dba <__mcmp+0x2a>
 8009dc2:	2001      	movs	r0, #1
 8009dc4:	e7f9      	b.n	8009dba <__mcmp+0x2a>
	...

08009dc8 <__mdiff>:
 8009dc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dcc:	4689      	mov	r9, r1
 8009dce:	4606      	mov	r6, r0
 8009dd0:	4611      	mov	r1, r2
 8009dd2:	4648      	mov	r0, r9
 8009dd4:	4614      	mov	r4, r2
 8009dd6:	f7ff ffdb 	bl	8009d90 <__mcmp>
 8009dda:	1e05      	subs	r5, r0, #0
 8009ddc:	d112      	bne.n	8009e04 <__mdiff+0x3c>
 8009dde:	4629      	mov	r1, r5
 8009de0:	4630      	mov	r0, r6
 8009de2:	f7ff fd5b 	bl	800989c <_Balloc>
 8009de6:	4602      	mov	r2, r0
 8009de8:	b928      	cbnz	r0, 8009df6 <__mdiff+0x2e>
 8009dea:	4b3f      	ldr	r3, [pc, #252]	@ (8009ee8 <__mdiff+0x120>)
 8009dec:	f240 2137 	movw	r1, #567	@ 0x237
 8009df0:	483e      	ldr	r0, [pc, #248]	@ (8009eec <__mdiff+0x124>)
 8009df2:	f000 f9b7 	bl	800a164 <__assert_func>
 8009df6:	2301      	movs	r3, #1
 8009df8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009dfc:	4610      	mov	r0, r2
 8009dfe:	b003      	add	sp, #12
 8009e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e04:	bfbc      	itt	lt
 8009e06:	464b      	movlt	r3, r9
 8009e08:	46a1      	movlt	r9, r4
 8009e0a:	4630      	mov	r0, r6
 8009e0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009e10:	bfba      	itte	lt
 8009e12:	461c      	movlt	r4, r3
 8009e14:	2501      	movlt	r5, #1
 8009e16:	2500      	movge	r5, #0
 8009e18:	f7ff fd40 	bl	800989c <_Balloc>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	b918      	cbnz	r0, 8009e28 <__mdiff+0x60>
 8009e20:	4b31      	ldr	r3, [pc, #196]	@ (8009ee8 <__mdiff+0x120>)
 8009e22:	f240 2145 	movw	r1, #581	@ 0x245
 8009e26:	e7e3      	b.n	8009df0 <__mdiff+0x28>
 8009e28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009e2c:	6926      	ldr	r6, [r4, #16]
 8009e2e:	60c5      	str	r5, [r0, #12]
 8009e30:	f109 0310 	add.w	r3, r9, #16
 8009e34:	f109 0514 	add.w	r5, r9, #20
 8009e38:	f104 0e14 	add.w	lr, r4, #20
 8009e3c:	f100 0b14 	add.w	fp, r0, #20
 8009e40:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009e44:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009e48:	9301      	str	r3, [sp, #4]
 8009e4a:	46d9      	mov	r9, fp
 8009e4c:	f04f 0c00 	mov.w	ip, #0
 8009e50:	9b01      	ldr	r3, [sp, #4]
 8009e52:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009e56:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009e5a:	9301      	str	r3, [sp, #4]
 8009e5c:	fa1f f38a 	uxth.w	r3, sl
 8009e60:	4619      	mov	r1, r3
 8009e62:	b283      	uxth	r3, r0
 8009e64:	1acb      	subs	r3, r1, r3
 8009e66:	0c00      	lsrs	r0, r0, #16
 8009e68:	4463      	add	r3, ip
 8009e6a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009e6e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009e78:	4576      	cmp	r6, lr
 8009e7a:	f849 3b04 	str.w	r3, [r9], #4
 8009e7e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009e82:	d8e5      	bhi.n	8009e50 <__mdiff+0x88>
 8009e84:	1b33      	subs	r3, r6, r4
 8009e86:	3b15      	subs	r3, #21
 8009e88:	f023 0303 	bic.w	r3, r3, #3
 8009e8c:	3415      	adds	r4, #21
 8009e8e:	3304      	adds	r3, #4
 8009e90:	42a6      	cmp	r6, r4
 8009e92:	bf38      	it	cc
 8009e94:	2304      	movcc	r3, #4
 8009e96:	441d      	add	r5, r3
 8009e98:	445b      	add	r3, fp
 8009e9a:	461e      	mov	r6, r3
 8009e9c:	462c      	mov	r4, r5
 8009e9e:	4544      	cmp	r4, r8
 8009ea0:	d30e      	bcc.n	8009ec0 <__mdiff+0xf8>
 8009ea2:	f108 0103 	add.w	r1, r8, #3
 8009ea6:	1b49      	subs	r1, r1, r5
 8009ea8:	f021 0103 	bic.w	r1, r1, #3
 8009eac:	3d03      	subs	r5, #3
 8009eae:	45a8      	cmp	r8, r5
 8009eb0:	bf38      	it	cc
 8009eb2:	2100      	movcc	r1, #0
 8009eb4:	440b      	add	r3, r1
 8009eb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009eba:	b191      	cbz	r1, 8009ee2 <__mdiff+0x11a>
 8009ebc:	6117      	str	r7, [r2, #16]
 8009ebe:	e79d      	b.n	8009dfc <__mdiff+0x34>
 8009ec0:	f854 1b04 	ldr.w	r1, [r4], #4
 8009ec4:	46e6      	mov	lr, ip
 8009ec6:	0c08      	lsrs	r0, r1, #16
 8009ec8:	fa1c fc81 	uxtah	ip, ip, r1
 8009ecc:	4471      	add	r1, lr
 8009ece:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009ed2:	b289      	uxth	r1, r1
 8009ed4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009ed8:	f846 1b04 	str.w	r1, [r6], #4
 8009edc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ee0:	e7dd      	b.n	8009e9e <__mdiff+0xd6>
 8009ee2:	3f01      	subs	r7, #1
 8009ee4:	e7e7      	b.n	8009eb6 <__mdiff+0xee>
 8009ee6:	bf00      	nop
 8009ee8:	0800ab98 	.word	0x0800ab98
 8009eec:	0800abba 	.word	0x0800abba

08009ef0 <__d2b>:
 8009ef0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009ef4:	460f      	mov	r7, r1
 8009ef6:	2101      	movs	r1, #1
 8009ef8:	ec59 8b10 	vmov	r8, r9, d0
 8009efc:	4616      	mov	r6, r2
 8009efe:	f7ff fccd 	bl	800989c <_Balloc>
 8009f02:	4604      	mov	r4, r0
 8009f04:	b930      	cbnz	r0, 8009f14 <__d2b+0x24>
 8009f06:	4602      	mov	r2, r0
 8009f08:	4b23      	ldr	r3, [pc, #140]	@ (8009f98 <__d2b+0xa8>)
 8009f0a:	4824      	ldr	r0, [pc, #144]	@ (8009f9c <__d2b+0xac>)
 8009f0c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009f10:	f000 f928 	bl	800a164 <__assert_func>
 8009f14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009f18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f1c:	b10d      	cbz	r5, 8009f22 <__d2b+0x32>
 8009f1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009f22:	9301      	str	r3, [sp, #4]
 8009f24:	f1b8 0300 	subs.w	r3, r8, #0
 8009f28:	d023      	beq.n	8009f72 <__d2b+0x82>
 8009f2a:	4668      	mov	r0, sp
 8009f2c:	9300      	str	r3, [sp, #0]
 8009f2e:	f7ff fd7c 	bl	8009a2a <__lo0bits>
 8009f32:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009f36:	b1d0      	cbz	r0, 8009f6e <__d2b+0x7e>
 8009f38:	f1c0 0320 	rsb	r3, r0, #32
 8009f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f40:	430b      	orrs	r3, r1
 8009f42:	40c2      	lsrs	r2, r0
 8009f44:	6163      	str	r3, [r4, #20]
 8009f46:	9201      	str	r2, [sp, #4]
 8009f48:	9b01      	ldr	r3, [sp, #4]
 8009f4a:	61a3      	str	r3, [r4, #24]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	bf0c      	ite	eq
 8009f50:	2201      	moveq	r2, #1
 8009f52:	2202      	movne	r2, #2
 8009f54:	6122      	str	r2, [r4, #16]
 8009f56:	b1a5      	cbz	r5, 8009f82 <__d2b+0x92>
 8009f58:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009f5c:	4405      	add	r5, r0
 8009f5e:	603d      	str	r5, [r7, #0]
 8009f60:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009f64:	6030      	str	r0, [r6, #0]
 8009f66:	4620      	mov	r0, r4
 8009f68:	b003      	add	sp, #12
 8009f6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f6e:	6161      	str	r1, [r4, #20]
 8009f70:	e7ea      	b.n	8009f48 <__d2b+0x58>
 8009f72:	a801      	add	r0, sp, #4
 8009f74:	f7ff fd59 	bl	8009a2a <__lo0bits>
 8009f78:	9b01      	ldr	r3, [sp, #4]
 8009f7a:	6163      	str	r3, [r4, #20]
 8009f7c:	3020      	adds	r0, #32
 8009f7e:	2201      	movs	r2, #1
 8009f80:	e7e8      	b.n	8009f54 <__d2b+0x64>
 8009f82:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009f86:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009f8a:	6038      	str	r0, [r7, #0]
 8009f8c:	6918      	ldr	r0, [r3, #16]
 8009f8e:	f7ff fd2d 	bl	80099ec <__hi0bits>
 8009f92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009f96:	e7e5      	b.n	8009f64 <__d2b+0x74>
 8009f98:	0800ab98 	.word	0x0800ab98
 8009f9c:	0800abba 	.word	0x0800abba

08009fa0 <__sread>:
 8009fa0:	b510      	push	{r4, lr}
 8009fa2:	460c      	mov	r4, r1
 8009fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fa8:	f000 f8a8 	bl	800a0fc <_read_r>
 8009fac:	2800      	cmp	r0, #0
 8009fae:	bfab      	itete	ge
 8009fb0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009fb2:	89a3      	ldrhlt	r3, [r4, #12]
 8009fb4:	181b      	addge	r3, r3, r0
 8009fb6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009fba:	bfac      	ite	ge
 8009fbc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009fbe:	81a3      	strhlt	r3, [r4, #12]
 8009fc0:	bd10      	pop	{r4, pc}

08009fc2 <__swrite>:
 8009fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fc6:	461f      	mov	r7, r3
 8009fc8:	898b      	ldrh	r3, [r1, #12]
 8009fca:	05db      	lsls	r3, r3, #23
 8009fcc:	4605      	mov	r5, r0
 8009fce:	460c      	mov	r4, r1
 8009fd0:	4616      	mov	r6, r2
 8009fd2:	d505      	bpl.n	8009fe0 <__swrite+0x1e>
 8009fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fd8:	2302      	movs	r3, #2
 8009fda:	2200      	movs	r2, #0
 8009fdc:	f000 f87c 	bl	800a0d8 <_lseek_r>
 8009fe0:	89a3      	ldrh	r3, [r4, #12]
 8009fe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fe6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009fea:	81a3      	strh	r3, [r4, #12]
 8009fec:	4632      	mov	r2, r6
 8009fee:	463b      	mov	r3, r7
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ff6:	f000 b8a3 	b.w	800a140 <_write_r>

08009ffa <__sseek>:
 8009ffa:	b510      	push	{r4, lr}
 8009ffc:	460c      	mov	r4, r1
 8009ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a002:	f000 f869 	bl	800a0d8 <_lseek_r>
 800a006:	1c43      	adds	r3, r0, #1
 800a008:	89a3      	ldrh	r3, [r4, #12]
 800a00a:	bf15      	itete	ne
 800a00c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a00e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a012:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a016:	81a3      	strheq	r3, [r4, #12]
 800a018:	bf18      	it	ne
 800a01a:	81a3      	strhne	r3, [r4, #12]
 800a01c:	bd10      	pop	{r4, pc}

0800a01e <__sclose>:
 800a01e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a022:	f000 b849 	b.w	800a0b8 <_close_r>

0800a026 <_realloc_r>:
 800a026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a02a:	4680      	mov	r8, r0
 800a02c:	4615      	mov	r5, r2
 800a02e:	460c      	mov	r4, r1
 800a030:	b921      	cbnz	r1, 800a03c <_realloc_r+0x16>
 800a032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a036:	4611      	mov	r1, r2
 800a038:	f7ff baf8 	b.w	800962c <_malloc_r>
 800a03c:	b92a      	cbnz	r2, 800a04a <_realloc_r+0x24>
 800a03e:	f000 f8c3 	bl	800a1c8 <_free_r>
 800a042:	2400      	movs	r4, #0
 800a044:	4620      	mov	r0, r4
 800a046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a04a:	f000 f919 	bl	800a280 <_malloc_usable_size_r>
 800a04e:	4285      	cmp	r5, r0
 800a050:	4606      	mov	r6, r0
 800a052:	d802      	bhi.n	800a05a <_realloc_r+0x34>
 800a054:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a058:	d8f4      	bhi.n	800a044 <_realloc_r+0x1e>
 800a05a:	4629      	mov	r1, r5
 800a05c:	4640      	mov	r0, r8
 800a05e:	f7ff fae5 	bl	800962c <_malloc_r>
 800a062:	4607      	mov	r7, r0
 800a064:	2800      	cmp	r0, #0
 800a066:	d0ec      	beq.n	800a042 <_realloc_r+0x1c>
 800a068:	42b5      	cmp	r5, r6
 800a06a:	462a      	mov	r2, r5
 800a06c:	4621      	mov	r1, r4
 800a06e:	bf28      	it	cs
 800a070:	4632      	movcs	r2, r6
 800a072:	f7fe fafe 	bl	8008672 <memcpy>
 800a076:	4621      	mov	r1, r4
 800a078:	4640      	mov	r0, r8
 800a07a:	f000 f8a5 	bl	800a1c8 <_free_r>
 800a07e:	463c      	mov	r4, r7
 800a080:	e7e0      	b.n	800a044 <_realloc_r+0x1e>

0800a082 <memmove>:
 800a082:	4288      	cmp	r0, r1
 800a084:	b510      	push	{r4, lr}
 800a086:	eb01 0402 	add.w	r4, r1, r2
 800a08a:	d902      	bls.n	800a092 <memmove+0x10>
 800a08c:	4284      	cmp	r4, r0
 800a08e:	4623      	mov	r3, r4
 800a090:	d807      	bhi.n	800a0a2 <memmove+0x20>
 800a092:	1e43      	subs	r3, r0, #1
 800a094:	42a1      	cmp	r1, r4
 800a096:	d008      	beq.n	800a0aa <memmove+0x28>
 800a098:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a09c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0a0:	e7f8      	b.n	800a094 <memmove+0x12>
 800a0a2:	4402      	add	r2, r0
 800a0a4:	4601      	mov	r1, r0
 800a0a6:	428a      	cmp	r2, r1
 800a0a8:	d100      	bne.n	800a0ac <memmove+0x2a>
 800a0aa:	bd10      	pop	{r4, pc}
 800a0ac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0b0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0b4:	e7f7      	b.n	800a0a6 <memmove+0x24>
	...

0800a0b8 <_close_r>:
 800a0b8:	b538      	push	{r3, r4, r5, lr}
 800a0ba:	4d06      	ldr	r5, [pc, #24]	@ (800a0d4 <_close_r+0x1c>)
 800a0bc:	2300      	movs	r3, #0
 800a0be:	4604      	mov	r4, r0
 800a0c0:	4608      	mov	r0, r1
 800a0c2:	602b      	str	r3, [r5, #0]
 800a0c4:	f7f8 fdac 	bl	8002c20 <_close>
 800a0c8:	1c43      	adds	r3, r0, #1
 800a0ca:	d102      	bne.n	800a0d2 <_close_r+0x1a>
 800a0cc:	682b      	ldr	r3, [r5, #0]
 800a0ce:	b103      	cbz	r3, 800a0d2 <_close_r+0x1a>
 800a0d0:	6023      	str	r3, [r4, #0]
 800a0d2:	bd38      	pop	{r3, r4, r5, pc}
 800a0d4:	20000bec 	.word	0x20000bec

0800a0d8 <_lseek_r>:
 800a0d8:	b538      	push	{r3, r4, r5, lr}
 800a0da:	4d07      	ldr	r5, [pc, #28]	@ (800a0f8 <_lseek_r+0x20>)
 800a0dc:	4604      	mov	r4, r0
 800a0de:	4608      	mov	r0, r1
 800a0e0:	4611      	mov	r1, r2
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	602a      	str	r2, [r5, #0]
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	f7f8 fdc1 	bl	8002c6e <_lseek>
 800a0ec:	1c43      	adds	r3, r0, #1
 800a0ee:	d102      	bne.n	800a0f6 <_lseek_r+0x1e>
 800a0f0:	682b      	ldr	r3, [r5, #0]
 800a0f2:	b103      	cbz	r3, 800a0f6 <_lseek_r+0x1e>
 800a0f4:	6023      	str	r3, [r4, #0]
 800a0f6:	bd38      	pop	{r3, r4, r5, pc}
 800a0f8:	20000bec 	.word	0x20000bec

0800a0fc <_read_r>:
 800a0fc:	b538      	push	{r3, r4, r5, lr}
 800a0fe:	4d07      	ldr	r5, [pc, #28]	@ (800a11c <_read_r+0x20>)
 800a100:	4604      	mov	r4, r0
 800a102:	4608      	mov	r0, r1
 800a104:	4611      	mov	r1, r2
 800a106:	2200      	movs	r2, #0
 800a108:	602a      	str	r2, [r5, #0]
 800a10a:	461a      	mov	r2, r3
 800a10c:	f7f8 fd4f 	bl	8002bae <_read>
 800a110:	1c43      	adds	r3, r0, #1
 800a112:	d102      	bne.n	800a11a <_read_r+0x1e>
 800a114:	682b      	ldr	r3, [r5, #0]
 800a116:	b103      	cbz	r3, 800a11a <_read_r+0x1e>
 800a118:	6023      	str	r3, [r4, #0]
 800a11a:	bd38      	pop	{r3, r4, r5, pc}
 800a11c:	20000bec 	.word	0x20000bec

0800a120 <_sbrk_r>:
 800a120:	b538      	push	{r3, r4, r5, lr}
 800a122:	4d06      	ldr	r5, [pc, #24]	@ (800a13c <_sbrk_r+0x1c>)
 800a124:	2300      	movs	r3, #0
 800a126:	4604      	mov	r4, r0
 800a128:	4608      	mov	r0, r1
 800a12a:	602b      	str	r3, [r5, #0]
 800a12c:	f7f8 fdac 	bl	8002c88 <_sbrk>
 800a130:	1c43      	adds	r3, r0, #1
 800a132:	d102      	bne.n	800a13a <_sbrk_r+0x1a>
 800a134:	682b      	ldr	r3, [r5, #0]
 800a136:	b103      	cbz	r3, 800a13a <_sbrk_r+0x1a>
 800a138:	6023      	str	r3, [r4, #0]
 800a13a:	bd38      	pop	{r3, r4, r5, pc}
 800a13c:	20000bec 	.word	0x20000bec

0800a140 <_write_r>:
 800a140:	b538      	push	{r3, r4, r5, lr}
 800a142:	4d07      	ldr	r5, [pc, #28]	@ (800a160 <_write_r+0x20>)
 800a144:	4604      	mov	r4, r0
 800a146:	4608      	mov	r0, r1
 800a148:	4611      	mov	r1, r2
 800a14a:	2200      	movs	r2, #0
 800a14c:	602a      	str	r2, [r5, #0]
 800a14e:	461a      	mov	r2, r3
 800a150:	f7f8 fd4a 	bl	8002be8 <_write>
 800a154:	1c43      	adds	r3, r0, #1
 800a156:	d102      	bne.n	800a15e <_write_r+0x1e>
 800a158:	682b      	ldr	r3, [r5, #0]
 800a15a:	b103      	cbz	r3, 800a15e <_write_r+0x1e>
 800a15c:	6023      	str	r3, [r4, #0]
 800a15e:	bd38      	pop	{r3, r4, r5, pc}
 800a160:	20000bec 	.word	0x20000bec

0800a164 <__assert_func>:
 800a164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a166:	4614      	mov	r4, r2
 800a168:	461a      	mov	r2, r3
 800a16a:	4b09      	ldr	r3, [pc, #36]	@ (800a190 <__assert_func+0x2c>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	4605      	mov	r5, r0
 800a170:	68d8      	ldr	r0, [r3, #12]
 800a172:	b954      	cbnz	r4, 800a18a <__assert_func+0x26>
 800a174:	4b07      	ldr	r3, [pc, #28]	@ (800a194 <__assert_func+0x30>)
 800a176:	461c      	mov	r4, r3
 800a178:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a17c:	9100      	str	r1, [sp, #0]
 800a17e:	462b      	mov	r3, r5
 800a180:	4905      	ldr	r1, [pc, #20]	@ (800a198 <__assert_func+0x34>)
 800a182:	f000 f885 	bl	800a290 <fiprintf>
 800a186:	f000 f8a2 	bl	800a2ce <abort>
 800a18a:	4b04      	ldr	r3, [pc, #16]	@ (800a19c <__assert_func+0x38>)
 800a18c:	e7f4      	b.n	800a178 <__assert_func+0x14>
 800a18e:	bf00      	nop
 800a190:	20000058 	.word	0x20000058
 800a194:	0800ae56 	.word	0x0800ae56
 800a198:	0800ae28 	.word	0x0800ae28
 800a19c:	0800ae1b 	.word	0x0800ae1b

0800a1a0 <_calloc_r>:
 800a1a0:	b570      	push	{r4, r5, r6, lr}
 800a1a2:	fba1 5402 	umull	r5, r4, r1, r2
 800a1a6:	b93c      	cbnz	r4, 800a1b8 <_calloc_r+0x18>
 800a1a8:	4629      	mov	r1, r5
 800a1aa:	f7ff fa3f 	bl	800962c <_malloc_r>
 800a1ae:	4606      	mov	r6, r0
 800a1b0:	b928      	cbnz	r0, 800a1be <_calloc_r+0x1e>
 800a1b2:	2600      	movs	r6, #0
 800a1b4:	4630      	mov	r0, r6
 800a1b6:	bd70      	pop	{r4, r5, r6, pc}
 800a1b8:	220c      	movs	r2, #12
 800a1ba:	6002      	str	r2, [r0, #0]
 800a1bc:	e7f9      	b.n	800a1b2 <_calloc_r+0x12>
 800a1be:	462a      	mov	r2, r5
 800a1c0:	4621      	mov	r1, r4
 800a1c2:	f7fe fa1d 	bl	8008600 <memset>
 800a1c6:	e7f5      	b.n	800a1b4 <_calloc_r+0x14>

0800a1c8 <_free_r>:
 800a1c8:	b538      	push	{r3, r4, r5, lr}
 800a1ca:	4605      	mov	r5, r0
 800a1cc:	2900      	cmp	r1, #0
 800a1ce:	d041      	beq.n	800a254 <_free_r+0x8c>
 800a1d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1d4:	1f0c      	subs	r4, r1, #4
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	bfb8      	it	lt
 800a1da:	18e4      	addlt	r4, r4, r3
 800a1dc:	f7ff fb52 	bl	8009884 <__malloc_lock>
 800a1e0:	4a1d      	ldr	r2, [pc, #116]	@ (800a258 <_free_r+0x90>)
 800a1e2:	6813      	ldr	r3, [r2, #0]
 800a1e4:	b933      	cbnz	r3, 800a1f4 <_free_r+0x2c>
 800a1e6:	6063      	str	r3, [r4, #4]
 800a1e8:	6014      	str	r4, [r2, #0]
 800a1ea:	4628      	mov	r0, r5
 800a1ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1f0:	f7ff bb4e 	b.w	8009890 <__malloc_unlock>
 800a1f4:	42a3      	cmp	r3, r4
 800a1f6:	d908      	bls.n	800a20a <_free_r+0x42>
 800a1f8:	6820      	ldr	r0, [r4, #0]
 800a1fa:	1821      	adds	r1, r4, r0
 800a1fc:	428b      	cmp	r3, r1
 800a1fe:	bf01      	itttt	eq
 800a200:	6819      	ldreq	r1, [r3, #0]
 800a202:	685b      	ldreq	r3, [r3, #4]
 800a204:	1809      	addeq	r1, r1, r0
 800a206:	6021      	streq	r1, [r4, #0]
 800a208:	e7ed      	b.n	800a1e6 <_free_r+0x1e>
 800a20a:	461a      	mov	r2, r3
 800a20c:	685b      	ldr	r3, [r3, #4]
 800a20e:	b10b      	cbz	r3, 800a214 <_free_r+0x4c>
 800a210:	42a3      	cmp	r3, r4
 800a212:	d9fa      	bls.n	800a20a <_free_r+0x42>
 800a214:	6811      	ldr	r1, [r2, #0]
 800a216:	1850      	adds	r0, r2, r1
 800a218:	42a0      	cmp	r0, r4
 800a21a:	d10b      	bne.n	800a234 <_free_r+0x6c>
 800a21c:	6820      	ldr	r0, [r4, #0]
 800a21e:	4401      	add	r1, r0
 800a220:	1850      	adds	r0, r2, r1
 800a222:	4283      	cmp	r3, r0
 800a224:	6011      	str	r1, [r2, #0]
 800a226:	d1e0      	bne.n	800a1ea <_free_r+0x22>
 800a228:	6818      	ldr	r0, [r3, #0]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	6053      	str	r3, [r2, #4]
 800a22e:	4408      	add	r0, r1
 800a230:	6010      	str	r0, [r2, #0]
 800a232:	e7da      	b.n	800a1ea <_free_r+0x22>
 800a234:	d902      	bls.n	800a23c <_free_r+0x74>
 800a236:	230c      	movs	r3, #12
 800a238:	602b      	str	r3, [r5, #0]
 800a23a:	e7d6      	b.n	800a1ea <_free_r+0x22>
 800a23c:	6820      	ldr	r0, [r4, #0]
 800a23e:	1821      	adds	r1, r4, r0
 800a240:	428b      	cmp	r3, r1
 800a242:	bf04      	itt	eq
 800a244:	6819      	ldreq	r1, [r3, #0]
 800a246:	685b      	ldreq	r3, [r3, #4]
 800a248:	6063      	str	r3, [r4, #4]
 800a24a:	bf04      	itt	eq
 800a24c:	1809      	addeq	r1, r1, r0
 800a24e:	6021      	streq	r1, [r4, #0]
 800a250:	6054      	str	r4, [r2, #4]
 800a252:	e7ca      	b.n	800a1ea <_free_r+0x22>
 800a254:	bd38      	pop	{r3, r4, r5, pc}
 800a256:	bf00      	nop
 800a258:	20000be8 	.word	0x20000be8

0800a25c <__ascii_mbtowc>:
 800a25c:	b082      	sub	sp, #8
 800a25e:	b901      	cbnz	r1, 800a262 <__ascii_mbtowc+0x6>
 800a260:	a901      	add	r1, sp, #4
 800a262:	b142      	cbz	r2, 800a276 <__ascii_mbtowc+0x1a>
 800a264:	b14b      	cbz	r3, 800a27a <__ascii_mbtowc+0x1e>
 800a266:	7813      	ldrb	r3, [r2, #0]
 800a268:	600b      	str	r3, [r1, #0]
 800a26a:	7812      	ldrb	r2, [r2, #0]
 800a26c:	1e10      	subs	r0, r2, #0
 800a26e:	bf18      	it	ne
 800a270:	2001      	movne	r0, #1
 800a272:	b002      	add	sp, #8
 800a274:	4770      	bx	lr
 800a276:	4610      	mov	r0, r2
 800a278:	e7fb      	b.n	800a272 <__ascii_mbtowc+0x16>
 800a27a:	f06f 0001 	mvn.w	r0, #1
 800a27e:	e7f8      	b.n	800a272 <__ascii_mbtowc+0x16>

0800a280 <_malloc_usable_size_r>:
 800a280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a284:	1f18      	subs	r0, r3, #4
 800a286:	2b00      	cmp	r3, #0
 800a288:	bfbc      	itt	lt
 800a28a:	580b      	ldrlt	r3, [r1, r0]
 800a28c:	18c0      	addlt	r0, r0, r3
 800a28e:	4770      	bx	lr

0800a290 <fiprintf>:
 800a290:	b40e      	push	{r1, r2, r3}
 800a292:	b503      	push	{r0, r1, lr}
 800a294:	4601      	mov	r1, r0
 800a296:	ab03      	add	r3, sp, #12
 800a298:	4805      	ldr	r0, [pc, #20]	@ (800a2b0 <fiprintf+0x20>)
 800a29a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a29e:	6800      	ldr	r0, [r0, #0]
 800a2a0:	9301      	str	r3, [sp, #4]
 800a2a2:	f000 f845 	bl	800a330 <_vfiprintf_r>
 800a2a6:	b002      	add	sp, #8
 800a2a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2ac:	b003      	add	sp, #12
 800a2ae:	4770      	bx	lr
 800a2b0:	20000058 	.word	0x20000058

0800a2b4 <__ascii_wctomb>:
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	4608      	mov	r0, r1
 800a2b8:	b141      	cbz	r1, 800a2cc <__ascii_wctomb+0x18>
 800a2ba:	2aff      	cmp	r2, #255	@ 0xff
 800a2bc:	d904      	bls.n	800a2c8 <__ascii_wctomb+0x14>
 800a2be:	228a      	movs	r2, #138	@ 0x8a
 800a2c0:	601a      	str	r2, [r3, #0]
 800a2c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2c6:	4770      	bx	lr
 800a2c8:	700a      	strb	r2, [r1, #0]
 800a2ca:	2001      	movs	r0, #1
 800a2cc:	4770      	bx	lr

0800a2ce <abort>:
 800a2ce:	b508      	push	{r3, lr}
 800a2d0:	2006      	movs	r0, #6
 800a2d2:	f000 fa85 	bl	800a7e0 <raise>
 800a2d6:	2001      	movs	r0, #1
 800a2d8:	f7f8 fc5e 	bl	8002b98 <_exit>

0800a2dc <__sfputc_r>:
 800a2dc:	6893      	ldr	r3, [r2, #8]
 800a2de:	3b01      	subs	r3, #1
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	b410      	push	{r4}
 800a2e4:	6093      	str	r3, [r2, #8]
 800a2e6:	da08      	bge.n	800a2fa <__sfputc_r+0x1e>
 800a2e8:	6994      	ldr	r4, [r2, #24]
 800a2ea:	42a3      	cmp	r3, r4
 800a2ec:	db01      	blt.n	800a2f2 <__sfputc_r+0x16>
 800a2ee:	290a      	cmp	r1, #10
 800a2f0:	d103      	bne.n	800a2fa <__sfputc_r+0x1e>
 800a2f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2f6:	f000 b933 	b.w	800a560 <__swbuf_r>
 800a2fa:	6813      	ldr	r3, [r2, #0]
 800a2fc:	1c58      	adds	r0, r3, #1
 800a2fe:	6010      	str	r0, [r2, #0]
 800a300:	7019      	strb	r1, [r3, #0]
 800a302:	4608      	mov	r0, r1
 800a304:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a308:	4770      	bx	lr

0800a30a <__sfputs_r>:
 800a30a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30c:	4606      	mov	r6, r0
 800a30e:	460f      	mov	r7, r1
 800a310:	4614      	mov	r4, r2
 800a312:	18d5      	adds	r5, r2, r3
 800a314:	42ac      	cmp	r4, r5
 800a316:	d101      	bne.n	800a31c <__sfputs_r+0x12>
 800a318:	2000      	movs	r0, #0
 800a31a:	e007      	b.n	800a32c <__sfputs_r+0x22>
 800a31c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a320:	463a      	mov	r2, r7
 800a322:	4630      	mov	r0, r6
 800a324:	f7ff ffda 	bl	800a2dc <__sfputc_r>
 800a328:	1c43      	adds	r3, r0, #1
 800a32a:	d1f3      	bne.n	800a314 <__sfputs_r+0xa>
 800a32c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a330 <_vfiprintf_r>:
 800a330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a334:	460d      	mov	r5, r1
 800a336:	b09d      	sub	sp, #116	@ 0x74
 800a338:	4614      	mov	r4, r2
 800a33a:	4698      	mov	r8, r3
 800a33c:	4606      	mov	r6, r0
 800a33e:	b118      	cbz	r0, 800a348 <_vfiprintf_r+0x18>
 800a340:	6a03      	ldr	r3, [r0, #32]
 800a342:	b90b      	cbnz	r3, 800a348 <_vfiprintf_r+0x18>
 800a344:	f7fe f926 	bl	8008594 <__sinit>
 800a348:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a34a:	07d9      	lsls	r1, r3, #31
 800a34c:	d405      	bmi.n	800a35a <_vfiprintf_r+0x2a>
 800a34e:	89ab      	ldrh	r3, [r5, #12]
 800a350:	059a      	lsls	r2, r3, #22
 800a352:	d402      	bmi.n	800a35a <_vfiprintf_r+0x2a>
 800a354:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a356:	f7fe f98a 	bl	800866e <__retarget_lock_acquire_recursive>
 800a35a:	89ab      	ldrh	r3, [r5, #12]
 800a35c:	071b      	lsls	r3, r3, #28
 800a35e:	d501      	bpl.n	800a364 <_vfiprintf_r+0x34>
 800a360:	692b      	ldr	r3, [r5, #16]
 800a362:	b99b      	cbnz	r3, 800a38c <_vfiprintf_r+0x5c>
 800a364:	4629      	mov	r1, r5
 800a366:	4630      	mov	r0, r6
 800a368:	f000 f938 	bl	800a5dc <__swsetup_r>
 800a36c:	b170      	cbz	r0, 800a38c <_vfiprintf_r+0x5c>
 800a36e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a370:	07dc      	lsls	r4, r3, #31
 800a372:	d504      	bpl.n	800a37e <_vfiprintf_r+0x4e>
 800a374:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a378:	b01d      	add	sp, #116	@ 0x74
 800a37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a37e:	89ab      	ldrh	r3, [r5, #12]
 800a380:	0598      	lsls	r0, r3, #22
 800a382:	d4f7      	bmi.n	800a374 <_vfiprintf_r+0x44>
 800a384:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a386:	f7fe f973 	bl	8008670 <__retarget_lock_release_recursive>
 800a38a:	e7f3      	b.n	800a374 <_vfiprintf_r+0x44>
 800a38c:	2300      	movs	r3, #0
 800a38e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a390:	2320      	movs	r3, #32
 800a392:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a396:	f8cd 800c 	str.w	r8, [sp, #12]
 800a39a:	2330      	movs	r3, #48	@ 0x30
 800a39c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a54c <_vfiprintf_r+0x21c>
 800a3a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a3a4:	f04f 0901 	mov.w	r9, #1
 800a3a8:	4623      	mov	r3, r4
 800a3aa:	469a      	mov	sl, r3
 800a3ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3b0:	b10a      	cbz	r2, 800a3b6 <_vfiprintf_r+0x86>
 800a3b2:	2a25      	cmp	r2, #37	@ 0x25
 800a3b4:	d1f9      	bne.n	800a3aa <_vfiprintf_r+0x7a>
 800a3b6:	ebba 0b04 	subs.w	fp, sl, r4
 800a3ba:	d00b      	beq.n	800a3d4 <_vfiprintf_r+0xa4>
 800a3bc:	465b      	mov	r3, fp
 800a3be:	4622      	mov	r2, r4
 800a3c0:	4629      	mov	r1, r5
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	f7ff ffa1 	bl	800a30a <__sfputs_r>
 800a3c8:	3001      	adds	r0, #1
 800a3ca:	f000 80a7 	beq.w	800a51c <_vfiprintf_r+0x1ec>
 800a3ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3d0:	445a      	add	r2, fp
 800a3d2:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f000 809f 	beq.w	800a51c <_vfiprintf_r+0x1ec>
 800a3de:	2300      	movs	r3, #0
 800a3e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a3e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3e8:	f10a 0a01 	add.w	sl, sl, #1
 800a3ec:	9304      	str	r3, [sp, #16]
 800a3ee:	9307      	str	r3, [sp, #28]
 800a3f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a3f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a3f6:	4654      	mov	r4, sl
 800a3f8:	2205      	movs	r2, #5
 800a3fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3fe:	4853      	ldr	r0, [pc, #332]	@ (800a54c <_vfiprintf_r+0x21c>)
 800a400:	f7f5 fee6 	bl	80001d0 <memchr>
 800a404:	9a04      	ldr	r2, [sp, #16]
 800a406:	b9d8      	cbnz	r0, 800a440 <_vfiprintf_r+0x110>
 800a408:	06d1      	lsls	r1, r2, #27
 800a40a:	bf44      	itt	mi
 800a40c:	2320      	movmi	r3, #32
 800a40e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a412:	0713      	lsls	r3, r2, #28
 800a414:	bf44      	itt	mi
 800a416:	232b      	movmi	r3, #43	@ 0x2b
 800a418:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a41c:	f89a 3000 	ldrb.w	r3, [sl]
 800a420:	2b2a      	cmp	r3, #42	@ 0x2a
 800a422:	d015      	beq.n	800a450 <_vfiprintf_r+0x120>
 800a424:	9a07      	ldr	r2, [sp, #28]
 800a426:	4654      	mov	r4, sl
 800a428:	2000      	movs	r0, #0
 800a42a:	f04f 0c0a 	mov.w	ip, #10
 800a42e:	4621      	mov	r1, r4
 800a430:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a434:	3b30      	subs	r3, #48	@ 0x30
 800a436:	2b09      	cmp	r3, #9
 800a438:	d94b      	bls.n	800a4d2 <_vfiprintf_r+0x1a2>
 800a43a:	b1b0      	cbz	r0, 800a46a <_vfiprintf_r+0x13a>
 800a43c:	9207      	str	r2, [sp, #28]
 800a43e:	e014      	b.n	800a46a <_vfiprintf_r+0x13a>
 800a440:	eba0 0308 	sub.w	r3, r0, r8
 800a444:	fa09 f303 	lsl.w	r3, r9, r3
 800a448:	4313      	orrs	r3, r2
 800a44a:	9304      	str	r3, [sp, #16]
 800a44c:	46a2      	mov	sl, r4
 800a44e:	e7d2      	b.n	800a3f6 <_vfiprintf_r+0xc6>
 800a450:	9b03      	ldr	r3, [sp, #12]
 800a452:	1d19      	adds	r1, r3, #4
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	9103      	str	r1, [sp, #12]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	bfbb      	ittet	lt
 800a45c:	425b      	neglt	r3, r3
 800a45e:	f042 0202 	orrlt.w	r2, r2, #2
 800a462:	9307      	strge	r3, [sp, #28]
 800a464:	9307      	strlt	r3, [sp, #28]
 800a466:	bfb8      	it	lt
 800a468:	9204      	strlt	r2, [sp, #16]
 800a46a:	7823      	ldrb	r3, [r4, #0]
 800a46c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a46e:	d10a      	bne.n	800a486 <_vfiprintf_r+0x156>
 800a470:	7863      	ldrb	r3, [r4, #1]
 800a472:	2b2a      	cmp	r3, #42	@ 0x2a
 800a474:	d132      	bne.n	800a4dc <_vfiprintf_r+0x1ac>
 800a476:	9b03      	ldr	r3, [sp, #12]
 800a478:	1d1a      	adds	r2, r3, #4
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	9203      	str	r2, [sp, #12]
 800a47e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a482:	3402      	adds	r4, #2
 800a484:	9305      	str	r3, [sp, #20]
 800a486:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a55c <_vfiprintf_r+0x22c>
 800a48a:	7821      	ldrb	r1, [r4, #0]
 800a48c:	2203      	movs	r2, #3
 800a48e:	4650      	mov	r0, sl
 800a490:	f7f5 fe9e 	bl	80001d0 <memchr>
 800a494:	b138      	cbz	r0, 800a4a6 <_vfiprintf_r+0x176>
 800a496:	9b04      	ldr	r3, [sp, #16]
 800a498:	eba0 000a 	sub.w	r0, r0, sl
 800a49c:	2240      	movs	r2, #64	@ 0x40
 800a49e:	4082      	lsls	r2, r0
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	3401      	adds	r4, #1
 800a4a4:	9304      	str	r3, [sp, #16]
 800a4a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4aa:	4829      	ldr	r0, [pc, #164]	@ (800a550 <_vfiprintf_r+0x220>)
 800a4ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a4b0:	2206      	movs	r2, #6
 800a4b2:	f7f5 fe8d 	bl	80001d0 <memchr>
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	d03f      	beq.n	800a53a <_vfiprintf_r+0x20a>
 800a4ba:	4b26      	ldr	r3, [pc, #152]	@ (800a554 <_vfiprintf_r+0x224>)
 800a4bc:	bb1b      	cbnz	r3, 800a506 <_vfiprintf_r+0x1d6>
 800a4be:	9b03      	ldr	r3, [sp, #12]
 800a4c0:	3307      	adds	r3, #7
 800a4c2:	f023 0307 	bic.w	r3, r3, #7
 800a4c6:	3308      	adds	r3, #8
 800a4c8:	9303      	str	r3, [sp, #12]
 800a4ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4cc:	443b      	add	r3, r7
 800a4ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4d0:	e76a      	b.n	800a3a8 <_vfiprintf_r+0x78>
 800a4d2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4d6:	460c      	mov	r4, r1
 800a4d8:	2001      	movs	r0, #1
 800a4da:	e7a8      	b.n	800a42e <_vfiprintf_r+0xfe>
 800a4dc:	2300      	movs	r3, #0
 800a4de:	3401      	adds	r4, #1
 800a4e0:	9305      	str	r3, [sp, #20]
 800a4e2:	4619      	mov	r1, r3
 800a4e4:	f04f 0c0a 	mov.w	ip, #10
 800a4e8:	4620      	mov	r0, r4
 800a4ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4ee:	3a30      	subs	r2, #48	@ 0x30
 800a4f0:	2a09      	cmp	r2, #9
 800a4f2:	d903      	bls.n	800a4fc <_vfiprintf_r+0x1cc>
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d0c6      	beq.n	800a486 <_vfiprintf_r+0x156>
 800a4f8:	9105      	str	r1, [sp, #20]
 800a4fa:	e7c4      	b.n	800a486 <_vfiprintf_r+0x156>
 800a4fc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a500:	4604      	mov	r4, r0
 800a502:	2301      	movs	r3, #1
 800a504:	e7f0      	b.n	800a4e8 <_vfiprintf_r+0x1b8>
 800a506:	ab03      	add	r3, sp, #12
 800a508:	9300      	str	r3, [sp, #0]
 800a50a:	462a      	mov	r2, r5
 800a50c:	4b12      	ldr	r3, [pc, #72]	@ (800a558 <_vfiprintf_r+0x228>)
 800a50e:	a904      	add	r1, sp, #16
 800a510:	4630      	mov	r0, r6
 800a512:	f7fd fbc7 	bl	8007ca4 <_printf_float>
 800a516:	4607      	mov	r7, r0
 800a518:	1c78      	adds	r0, r7, #1
 800a51a:	d1d6      	bne.n	800a4ca <_vfiprintf_r+0x19a>
 800a51c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a51e:	07d9      	lsls	r1, r3, #31
 800a520:	d405      	bmi.n	800a52e <_vfiprintf_r+0x1fe>
 800a522:	89ab      	ldrh	r3, [r5, #12]
 800a524:	059a      	lsls	r2, r3, #22
 800a526:	d402      	bmi.n	800a52e <_vfiprintf_r+0x1fe>
 800a528:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a52a:	f7fe f8a1 	bl	8008670 <__retarget_lock_release_recursive>
 800a52e:	89ab      	ldrh	r3, [r5, #12]
 800a530:	065b      	lsls	r3, r3, #25
 800a532:	f53f af1f 	bmi.w	800a374 <_vfiprintf_r+0x44>
 800a536:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a538:	e71e      	b.n	800a378 <_vfiprintf_r+0x48>
 800a53a:	ab03      	add	r3, sp, #12
 800a53c:	9300      	str	r3, [sp, #0]
 800a53e:	462a      	mov	r2, r5
 800a540:	4b05      	ldr	r3, [pc, #20]	@ (800a558 <_vfiprintf_r+0x228>)
 800a542:	a904      	add	r1, sp, #16
 800a544:	4630      	mov	r0, r6
 800a546:	f7fd fe45 	bl	80081d4 <_printf_i>
 800a54a:	e7e4      	b.n	800a516 <_vfiprintf_r+0x1e6>
 800a54c:	0800aba9 	.word	0x0800aba9
 800a550:	0800abb3 	.word	0x0800abb3
 800a554:	08007ca5 	.word	0x08007ca5
 800a558:	0800a30b 	.word	0x0800a30b
 800a55c:	0800abaf 	.word	0x0800abaf

0800a560 <__swbuf_r>:
 800a560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a562:	460e      	mov	r6, r1
 800a564:	4614      	mov	r4, r2
 800a566:	4605      	mov	r5, r0
 800a568:	b118      	cbz	r0, 800a572 <__swbuf_r+0x12>
 800a56a:	6a03      	ldr	r3, [r0, #32]
 800a56c:	b90b      	cbnz	r3, 800a572 <__swbuf_r+0x12>
 800a56e:	f7fe f811 	bl	8008594 <__sinit>
 800a572:	69a3      	ldr	r3, [r4, #24]
 800a574:	60a3      	str	r3, [r4, #8]
 800a576:	89a3      	ldrh	r3, [r4, #12]
 800a578:	071a      	lsls	r2, r3, #28
 800a57a:	d501      	bpl.n	800a580 <__swbuf_r+0x20>
 800a57c:	6923      	ldr	r3, [r4, #16]
 800a57e:	b943      	cbnz	r3, 800a592 <__swbuf_r+0x32>
 800a580:	4621      	mov	r1, r4
 800a582:	4628      	mov	r0, r5
 800a584:	f000 f82a 	bl	800a5dc <__swsetup_r>
 800a588:	b118      	cbz	r0, 800a592 <__swbuf_r+0x32>
 800a58a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a58e:	4638      	mov	r0, r7
 800a590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a592:	6823      	ldr	r3, [r4, #0]
 800a594:	6922      	ldr	r2, [r4, #16]
 800a596:	1a98      	subs	r0, r3, r2
 800a598:	6963      	ldr	r3, [r4, #20]
 800a59a:	b2f6      	uxtb	r6, r6
 800a59c:	4283      	cmp	r3, r0
 800a59e:	4637      	mov	r7, r6
 800a5a0:	dc05      	bgt.n	800a5ae <__swbuf_r+0x4e>
 800a5a2:	4621      	mov	r1, r4
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	f7ff f945 	bl	8009834 <_fflush_r>
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	d1ed      	bne.n	800a58a <__swbuf_r+0x2a>
 800a5ae:	68a3      	ldr	r3, [r4, #8]
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	60a3      	str	r3, [r4, #8]
 800a5b4:	6823      	ldr	r3, [r4, #0]
 800a5b6:	1c5a      	adds	r2, r3, #1
 800a5b8:	6022      	str	r2, [r4, #0]
 800a5ba:	701e      	strb	r6, [r3, #0]
 800a5bc:	6962      	ldr	r2, [r4, #20]
 800a5be:	1c43      	adds	r3, r0, #1
 800a5c0:	429a      	cmp	r2, r3
 800a5c2:	d004      	beq.n	800a5ce <__swbuf_r+0x6e>
 800a5c4:	89a3      	ldrh	r3, [r4, #12]
 800a5c6:	07db      	lsls	r3, r3, #31
 800a5c8:	d5e1      	bpl.n	800a58e <__swbuf_r+0x2e>
 800a5ca:	2e0a      	cmp	r6, #10
 800a5cc:	d1df      	bne.n	800a58e <__swbuf_r+0x2e>
 800a5ce:	4621      	mov	r1, r4
 800a5d0:	4628      	mov	r0, r5
 800a5d2:	f7ff f92f 	bl	8009834 <_fflush_r>
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	d0d9      	beq.n	800a58e <__swbuf_r+0x2e>
 800a5da:	e7d6      	b.n	800a58a <__swbuf_r+0x2a>

0800a5dc <__swsetup_r>:
 800a5dc:	b538      	push	{r3, r4, r5, lr}
 800a5de:	4b29      	ldr	r3, [pc, #164]	@ (800a684 <__swsetup_r+0xa8>)
 800a5e0:	4605      	mov	r5, r0
 800a5e2:	6818      	ldr	r0, [r3, #0]
 800a5e4:	460c      	mov	r4, r1
 800a5e6:	b118      	cbz	r0, 800a5f0 <__swsetup_r+0x14>
 800a5e8:	6a03      	ldr	r3, [r0, #32]
 800a5ea:	b90b      	cbnz	r3, 800a5f0 <__swsetup_r+0x14>
 800a5ec:	f7fd ffd2 	bl	8008594 <__sinit>
 800a5f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5f4:	0719      	lsls	r1, r3, #28
 800a5f6:	d422      	bmi.n	800a63e <__swsetup_r+0x62>
 800a5f8:	06da      	lsls	r2, r3, #27
 800a5fa:	d407      	bmi.n	800a60c <__swsetup_r+0x30>
 800a5fc:	2209      	movs	r2, #9
 800a5fe:	602a      	str	r2, [r5, #0]
 800a600:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a604:	81a3      	strh	r3, [r4, #12]
 800a606:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a60a:	e033      	b.n	800a674 <__swsetup_r+0x98>
 800a60c:	0758      	lsls	r0, r3, #29
 800a60e:	d512      	bpl.n	800a636 <__swsetup_r+0x5a>
 800a610:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a612:	b141      	cbz	r1, 800a626 <__swsetup_r+0x4a>
 800a614:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a618:	4299      	cmp	r1, r3
 800a61a:	d002      	beq.n	800a622 <__swsetup_r+0x46>
 800a61c:	4628      	mov	r0, r5
 800a61e:	f7ff fdd3 	bl	800a1c8 <_free_r>
 800a622:	2300      	movs	r3, #0
 800a624:	6363      	str	r3, [r4, #52]	@ 0x34
 800a626:	89a3      	ldrh	r3, [r4, #12]
 800a628:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a62c:	81a3      	strh	r3, [r4, #12]
 800a62e:	2300      	movs	r3, #0
 800a630:	6063      	str	r3, [r4, #4]
 800a632:	6923      	ldr	r3, [r4, #16]
 800a634:	6023      	str	r3, [r4, #0]
 800a636:	89a3      	ldrh	r3, [r4, #12]
 800a638:	f043 0308 	orr.w	r3, r3, #8
 800a63c:	81a3      	strh	r3, [r4, #12]
 800a63e:	6923      	ldr	r3, [r4, #16]
 800a640:	b94b      	cbnz	r3, 800a656 <__swsetup_r+0x7a>
 800a642:	89a3      	ldrh	r3, [r4, #12]
 800a644:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a64c:	d003      	beq.n	800a656 <__swsetup_r+0x7a>
 800a64e:	4621      	mov	r1, r4
 800a650:	4628      	mov	r0, r5
 800a652:	f000 f83f 	bl	800a6d4 <__smakebuf_r>
 800a656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a65a:	f013 0201 	ands.w	r2, r3, #1
 800a65e:	d00a      	beq.n	800a676 <__swsetup_r+0x9a>
 800a660:	2200      	movs	r2, #0
 800a662:	60a2      	str	r2, [r4, #8]
 800a664:	6962      	ldr	r2, [r4, #20]
 800a666:	4252      	negs	r2, r2
 800a668:	61a2      	str	r2, [r4, #24]
 800a66a:	6922      	ldr	r2, [r4, #16]
 800a66c:	b942      	cbnz	r2, 800a680 <__swsetup_r+0xa4>
 800a66e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a672:	d1c5      	bne.n	800a600 <__swsetup_r+0x24>
 800a674:	bd38      	pop	{r3, r4, r5, pc}
 800a676:	0799      	lsls	r1, r3, #30
 800a678:	bf58      	it	pl
 800a67a:	6962      	ldrpl	r2, [r4, #20]
 800a67c:	60a2      	str	r2, [r4, #8]
 800a67e:	e7f4      	b.n	800a66a <__swsetup_r+0x8e>
 800a680:	2000      	movs	r0, #0
 800a682:	e7f7      	b.n	800a674 <__swsetup_r+0x98>
 800a684:	20000058 	.word	0x20000058

0800a688 <__swhatbuf_r>:
 800a688:	b570      	push	{r4, r5, r6, lr}
 800a68a:	460c      	mov	r4, r1
 800a68c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a690:	2900      	cmp	r1, #0
 800a692:	b096      	sub	sp, #88	@ 0x58
 800a694:	4615      	mov	r5, r2
 800a696:	461e      	mov	r6, r3
 800a698:	da0d      	bge.n	800a6b6 <__swhatbuf_r+0x2e>
 800a69a:	89a3      	ldrh	r3, [r4, #12]
 800a69c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a6a0:	f04f 0100 	mov.w	r1, #0
 800a6a4:	bf14      	ite	ne
 800a6a6:	2340      	movne	r3, #64	@ 0x40
 800a6a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a6ac:	2000      	movs	r0, #0
 800a6ae:	6031      	str	r1, [r6, #0]
 800a6b0:	602b      	str	r3, [r5, #0]
 800a6b2:	b016      	add	sp, #88	@ 0x58
 800a6b4:	bd70      	pop	{r4, r5, r6, pc}
 800a6b6:	466a      	mov	r2, sp
 800a6b8:	f000 f848 	bl	800a74c <_fstat_r>
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	dbec      	blt.n	800a69a <__swhatbuf_r+0x12>
 800a6c0:	9901      	ldr	r1, [sp, #4]
 800a6c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a6c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a6ca:	4259      	negs	r1, r3
 800a6cc:	4159      	adcs	r1, r3
 800a6ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a6d2:	e7eb      	b.n	800a6ac <__swhatbuf_r+0x24>

0800a6d4 <__smakebuf_r>:
 800a6d4:	898b      	ldrh	r3, [r1, #12]
 800a6d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a6d8:	079d      	lsls	r5, r3, #30
 800a6da:	4606      	mov	r6, r0
 800a6dc:	460c      	mov	r4, r1
 800a6de:	d507      	bpl.n	800a6f0 <__smakebuf_r+0x1c>
 800a6e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a6e4:	6023      	str	r3, [r4, #0]
 800a6e6:	6123      	str	r3, [r4, #16]
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	6163      	str	r3, [r4, #20]
 800a6ec:	b003      	add	sp, #12
 800a6ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6f0:	ab01      	add	r3, sp, #4
 800a6f2:	466a      	mov	r2, sp
 800a6f4:	f7ff ffc8 	bl	800a688 <__swhatbuf_r>
 800a6f8:	9f00      	ldr	r7, [sp, #0]
 800a6fa:	4605      	mov	r5, r0
 800a6fc:	4639      	mov	r1, r7
 800a6fe:	4630      	mov	r0, r6
 800a700:	f7fe ff94 	bl	800962c <_malloc_r>
 800a704:	b948      	cbnz	r0, 800a71a <__smakebuf_r+0x46>
 800a706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a70a:	059a      	lsls	r2, r3, #22
 800a70c:	d4ee      	bmi.n	800a6ec <__smakebuf_r+0x18>
 800a70e:	f023 0303 	bic.w	r3, r3, #3
 800a712:	f043 0302 	orr.w	r3, r3, #2
 800a716:	81a3      	strh	r3, [r4, #12]
 800a718:	e7e2      	b.n	800a6e0 <__smakebuf_r+0xc>
 800a71a:	89a3      	ldrh	r3, [r4, #12]
 800a71c:	6020      	str	r0, [r4, #0]
 800a71e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a722:	81a3      	strh	r3, [r4, #12]
 800a724:	9b01      	ldr	r3, [sp, #4]
 800a726:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a72a:	b15b      	cbz	r3, 800a744 <__smakebuf_r+0x70>
 800a72c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a730:	4630      	mov	r0, r6
 800a732:	f000 f81d 	bl	800a770 <_isatty_r>
 800a736:	b128      	cbz	r0, 800a744 <__smakebuf_r+0x70>
 800a738:	89a3      	ldrh	r3, [r4, #12]
 800a73a:	f023 0303 	bic.w	r3, r3, #3
 800a73e:	f043 0301 	orr.w	r3, r3, #1
 800a742:	81a3      	strh	r3, [r4, #12]
 800a744:	89a3      	ldrh	r3, [r4, #12]
 800a746:	431d      	orrs	r5, r3
 800a748:	81a5      	strh	r5, [r4, #12]
 800a74a:	e7cf      	b.n	800a6ec <__smakebuf_r+0x18>

0800a74c <_fstat_r>:
 800a74c:	b538      	push	{r3, r4, r5, lr}
 800a74e:	4d07      	ldr	r5, [pc, #28]	@ (800a76c <_fstat_r+0x20>)
 800a750:	2300      	movs	r3, #0
 800a752:	4604      	mov	r4, r0
 800a754:	4608      	mov	r0, r1
 800a756:	4611      	mov	r1, r2
 800a758:	602b      	str	r3, [r5, #0]
 800a75a:	f7f8 fa6d 	bl	8002c38 <_fstat>
 800a75e:	1c43      	adds	r3, r0, #1
 800a760:	d102      	bne.n	800a768 <_fstat_r+0x1c>
 800a762:	682b      	ldr	r3, [r5, #0]
 800a764:	b103      	cbz	r3, 800a768 <_fstat_r+0x1c>
 800a766:	6023      	str	r3, [r4, #0]
 800a768:	bd38      	pop	{r3, r4, r5, pc}
 800a76a:	bf00      	nop
 800a76c:	20000bec 	.word	0x20000bec

0800a770 <_isatty_r>:
 800a770:	b538      	push	{r3, r4, r5, lr}
 800a772:	4d06      	ldr	r5, [pc, #24]	@ (800a78c <_isatty_r+0x1c>)
 800a774:	2300      	movs	r3, #0
 800a776:	4604      	mov	r4, r0
 800a778:	4608      	mov	r0, r1
 800a77a:	602b      	str	r3, [r5, #0]
 800a77c:	f7f8 fa6c 	bl	8002c58 <_isatty>
 800a780:	1c43      	adds	r3, r0, #1
 800a782:	d102      	bne.n	800a78a <_isatty_r+0x1a>
 800a784:	682b      	ldr	r3, [r5, #0]
 800a786:	b103      	cbz	r3, 800a78a <_isatty_r+0x1a>
 800a788:	6023      	str	r3, [r4, #0]
 800a78a:	bd38      	pop	{r3, r4, r5, pc}
 800a78c:	20000bec 	.word	0x20000bec

0800a790 <_raise_r>:
 800a790:	291f      	cmp	r1, #31
 800a792:	b538      	push	{r3, r4, r5, lr}
 800a794:	4605      	mov	r5, r0
 800a796:	460c      	mov	r4, r1
 800a798:	d904      	bls.n	800a7a4 <_raise_r+0x14>
 800a79a:	2316      	movs	r3, #22
 800a79c:	6003      	str	r3, [r0, #0]
 800a79e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7a2:	bd38      	pop	{r3, r4, r5, pc}
 800a7a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a7a6:	b112      	cbz	r2, 800a7ae <_raise_r+0x1e>
 800a7a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7ac:	b94b      	cbnz	r3, 800a7c2 <_raise_r+0x32>
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	f000 f830 	bl	800a814 <_getpid_r>
 800a7b4:	4622      	mov	r2, r4
 800a7b6:	4601      	mov	r1, r0
 800a7b8:	4628      	mov	r0, r5
 800a7ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7be:	f000 b817 	b.w	800a7f0 <_kill_r>
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d00a      	beq.n	800a7dc <_raise_r+0x4c>
 800a7c6:	1c59      	adds	r1, r3, #1
 800a7c8:	d103      	bne.n	800a7d2 <_raise_r+0x42>
 800a7ca:	2316      	movs	r3, #22
 800a7cc:	6003      	str	r3, [r0, #0]
 800a7ce:	2001      	movs	r0, #1
 800a7d0:	e7e7      	b.n	800a7a2 <_raise_r+0x12>
 800a7d2:	2100      	movs	r1, #0
 800a7d4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a7d8:	4620      	mov	r0, r4
 800a7da:	4798      	blx	r3
 800a7dc:	2000      	movs	r0, #0
 800a7de:	e7e0      	b.n	800a7a2 <_raise_r+0x12>

0800a7e0 <raise>:
 800a7e0:	4b02      	ldr	r3, [pc, #8]	@ (800a7ec <raise+0xc>)
 800a7e2:	4601      	mov	r1, r0
 800a7e4:	6818      	ldr	r0, [r3, #0]
 800a7e6:	f7ff bfd3 	b.w	800a790 <_raise_r>
 800a7ea:	bf00      	nop
 800a7ec:	20000058 	.word	0x20000058

0800a7f0 <_kill_r>:
 800a7f0:	b538      	push	{r3, r4, r5, lr}
 800a7f2:	4d07      	ldr	r5, [pc, #28]	@ (800a810 <_kill_r+0x20>)
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	4604      	mov	r4, r0
 800a7f8:	4608      	mov	r0, r1
 800a7fa:	4611      	mov	r1, r2
 800a7fc:	602b      	str	r3, [r5, #0]
 800a7fe:	f7f8 f9bb 	bl	8002b78 <_kill>
 800a802:	1c43      	adds	r3, r0, #1
 800a804:	d102      	bne.n	800a80c <_kill_r+0x1c>
 800a806:	682b      	ldr	r3, [r5, #0]
 800a808:	b103      	cbz	r3, 800a80c <_kill_r+0x1c>
 800a80a:	6023      	str	r3, [r4, #0]
 800a80c:	bd38      	pop	{r3, r4, r5, pc}
 800a80e:	bf00      	nop
 800a810:	20000bec 	.word	0x20000bec

0800a814 <_getpid_r>:
 800a814:	f7f8 b9a8 	b.w	8002b68 <_getpid>

0800a818 <_init>:
 800a818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81a:	bf00      	nop
 800a81c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a81e:	bc08      	pop	{r3}
 800a820:	469e      	mov	lr, r3
 800a822:	4770      	bx	lr

0800a824 <_fini>:
 800a824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a826:	bf00      	nop
 800a828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a82a:	bc08      	pop	{r3}
 800a82c:	469e      	mov	lr, r3
 800a82e:	4770      	bx	lr
