
STM32F405_EPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cde4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800cf78  0800cf78  0000df78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3d8  0800d3d8  0000f2d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d3d8  0800d3d8  0000e3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3e0  0800d3e0  0000f2d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3e0  0800d3e0  0000e3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d3e4  0800d3e4  0000e3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d0  20000000  0800d3e8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f2d0  2**0
                  CONTENTS
 10 .bss          00002044  200002d0  200002d0  0000f2d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20002314  20002314  0000f2d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f2d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a27c  00000000  00000000  0000f300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b19  00000000  00000000  0002957c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001798  00000000  00000000  0002d098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001260  00000000  00000000  0002e830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e62  00000000  00000000  0002fa90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f77b  00000000  00000000  000548f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5c88  00000000  00000000  0007406d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00149cf5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007618  00000000  00000000  00149d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00151350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cf5c 	.word	0x0800cf5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	0800cf5c 	.word	0x0800cf5c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <readADC>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t readADC(ADC_HandleTypeDef *hadc, uint32_t channel) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b086      	sub	sp, #24
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = { 0 };
 8000ee2:	f107 0308 	add.w	r3, r7, #8
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
 8000eea:	605a      	str	r2, [r3, #4]
 8000eec:	609a      	str	r2, [r3, #8]
 8000eee:	60da      	str	r2, [r3, #12]

    // Configurar el canal que se desea leer
    sConfig.Channel = channel;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 0x00000001U; // Reemplazado con el valor correcto
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = 0x00000000U; // Reemplazado con el valor correcto
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]

    if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK) {
 8000efc:	f107 0308 	add.w	r3, r7, #8
 8000f00:	4619      	mov	r1, r3
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f001 fc1e 	bl	8002744 <HAL_ADC_ConfigChannel>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <readADC+0x3a>
        Error_Handler(); // Maneja errores de configuración
 8000f0e:	f000 fdbb 	bl	8001a88 <Error_Handler>
    }

    // Inicia la conversión del ADC
    HAL_ADC_Start(hadc);
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f001 faac 	bl	8002470 <HAL_ADC_Start>

    // Espera hasta que la conversión termine
    if (HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY) == HAL_OK) {
 8000f18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f001 fb79 	bl	8002614 <HAL_ADC_PollForConversion>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d113      	bne.n	8000f50 <readADC+0x78>
        // Retorna el valor convertido
        return HAL_ADC_GetValue(hadc) * (3.3 / 4095.0);
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	f001 fbfe 	bl	800272a <HAL_ADC_GetValue>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fae7 	bl	8000504 <__aeabi_ui2d>
 8000f36:	a30a      	add	r3, pc, #40	@ (adr r3, 8000f60 <readADC+0x88>)
 8000f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3c:	f7ff fb5c 	bl	80005f8 <__aeabi_dmul>
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4610      	mov	r0, r2
 8000f46:	4619      	mov	r1, r3
 8000f48:	f7ff fe2e 	bl	8000ba8 <__aeabi_d2uiz>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	e000      	b.n	8000f52 <readADC+0x7a>
    }

    return 0; // Retorna 0 en caso de error
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	f3af 8000 	nop.w
 8000f60:	e734d9b4 	.word	0xe734d9b4
 8000f64:	3f4a680c 	.word	0x3f4a680c

08000f68 <mppt>:


void mppt(int *dutyCycle, float *power, float *prevPower) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
	const int deltaDuty = 10;    // Incremento o decremento del Duty Cycle
 8000f74:	230a      	movs	r3, #10
 8000f76:	617b      	str	r3, [r7, #20]
	if (*power > *prevPower) {
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	ed93 7a00 	vldr	s14, [r3]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	edd3 7a00 	vldr	s15, [r3]
 8000f84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f8c:	dd0a      	ble.n	8000fa4 <mppt+0x3c>
		if (*dutyCycle < 255)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f94:	dc10      	bgt.n	8000fb8 <mppt+0x50>
			*dutyCycle += deltaDuty; // Si la potencia ha aumentado, continuar ajustando en la misma dirección
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	441a      	add	r2, r3
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	e009      	b.n	8000fb8 <mppt+0x50>
	} else {
		if (*dutyCycle > 0)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	dd05      	ble.n	8000fb8 <mppt+0x50>
			*dutyCycle -= deltaDuty; // Si la potencia ha disminuido, invertir la dirección del ajuste
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	1ad2      	subs	r2, r2, r3
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	601a      	str	r2, [r3, #0]
	}

	if (*dutyCycle < 0)
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	da02      	bge.n	8000fc6 <mppt+0x5e>
		*dutyCycle = 0; // Asegurar que el Duty Cycle esté dentro de los límites permitidos (0-255)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
	if (*dutyCycle > 255)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2bff      	cmp	r3, #255	@ 0xff
 8000fcc:	dd02      	ble.n	8000fd4 <mppt+0x6c>
		*dutyCycle = 255;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	22ff      	movs	r2, #255	@ 0xff
 8000fd2:	601a      	str	r2, [r3, #0]

	*prevPower = *power; // Actualizar `prevPower` con el valor actual de `power`
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	601a      	str	r2, [r3, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	371c      	adds	r7, #28
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000fec:	b09e      	sub	sp, #120	@ 0x78
 8000fee:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff0:	f001 f964 	bl	80022bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff4:	f000 f9e6 	bl	80013c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff8:	f000 fcd8 	bl	80019ac <MX_GPIO_Init>
  MX_ADC1_Init();
 8000ffc:	f000 fa4c 	bl	8001498 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001000:	f000 fa9c 	bl	800153c <MX_ADC2_Init>
  MX_ADC3_Init();
 8001004:	f000 faec 	bl	80015e0 <MX_ADC3_Init>
  MX_I2C1_Init();
 8001008:	f000 fb3c 	bl	8001684 <MX_I2C1_Init>
  MX_I2C3_Init();
 800100c:	f000 fb68 	bl	80016e0 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001010:	f000 fb94 	bl	800173c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001014:	f000 fbec 	bl	80017f0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001018:	f000 fc44 	bl	80018a4 <MX_TIM5_Init>
  MX_UART4_Init();
 800101c:	f000 fc9c 	bl	8001958 <MX_UART4_Init>
  MX_USB_DEVICE_Init();
 8001020:	f008 fc62 	bl	80098e8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001024:	2100      	movs	r1, #0
 8001026:	48c4      	ldr	r0, [pc, #784]	@ (8001338 <main+0x350>)
 8001028:	f004 f8f0 	bl	800520c <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800102c:	210c      	movs	r1, #12
 800102e:	48c3      	ldr	r0, [pc, #780]	@ (800133c <main+0x354>)
 8001030:	f004 f8ec 	bl	800520c <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8001034:	210c      	movs	r1, #12
 8001036:	48c2      	ldr	r0, [pc, #776]	@ (8001340 <main+0x358>)
 8001038:	f004 f8e8 	bl	800520c <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  	//MPPT
		VX_in = readADC(&hadc2, ADC_CHANNEL_11);
 800103c:	210b      	movs	r1, #11
 800103e:	48c1      	ldr	r0, [pc, #772]	@ (8001344 <main+0x35c>)
 8001040:	f7ff ff4a 	bl	8000ed8 <readADC>
 8001044:	ee07 0a90 	vmov	s15, r0
 8001048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800104c:	4bbe      	ldr	r3, [pc, #760]	@ (8001348 <main+0x360>)
 800104e:	edc3 7a00 	vstr	s15, [r3]
		IX_in = readADC(&hadc2, ADC_CHANNEL_10);
 8001052:	210a      	movs	r1, #10
 8001054:	48bb      	ldr	r0, [pc, #748]	@ (8001344 <main+0x35c>)
 8001056:	f7ff ff3f 	bl	8000ed8 <readADC>
 800105a:	ee07 0a90 	vmov	s15, r0
 800105e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001062:	4bba      	ldr	r3, [pc, #744]	@ (800134c <main+0x364>)
 8001064:	edc3 7a00 	vstr	s15, [r3]
		powerX = VX_in * IX_in;
 8001068:	4bb7      	ldr	r3, [pc, #732]	@ (8001348 <main+0x360>)
 800106a:	ed93 7a00 	vldr	s14, [r3]
 800106e:	4bb7      	ldr	r3, [pc, #732]	@ (800134c <main+0x364>)
 8001070:	edd3 7a00 	vldr	s15, [r3]
 8001074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001078:	4bb5      	ldr	r3, [pc, #724]	@ (8001350 <main+0x368>)
 800107a:	edc3 7a00 	vstr	s15, [r3]

		VY_in = readADC(&hadc1, ADC_CHANNEL_13);
 800107e:	210d      	movs	r1, #13
 8001080:	48b4      	ldr	r0, [pc, #720]	@ (8001354 <main+0x36c>)
 8001082:	f7ff ff29 	bl	8000ed8 <readADC>
 8001086:	ee07 0a90 	vmov	s15, r0
 800108a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800108e:	4bb2      	ldr	r3, [pc, #712]	@ (8001358 <main+0x370>)
 8001090:	edc3 7a00 	vstr	s15, [r3]
		IY_in = readADC(&hadc1, ADC_CHANNEL_12);
 8001094:	210c      	movs	r1, #12
 8001096:	48af      	ldr	r0, [pc, #700]	@ (8001354 <main+0x36c>)
 8001098:	f7ff ff1e 	bl	8000ed8 <readADC>
 800109c:	ee07 0a90 	vmov	s15, r0
 80010a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a4:	4bad      	ldr	r3, [pc, #692]	@ (800135c <main+0x374>)
 80010a6:	edc3 7a00 	vstr	s15, [r3]
		powerY = VY_in * IY_in;
 80010aa:	4bab      	ldr	r3, [pc, #684]	@ (8001358 <main+0x370>)
 80010ac:	ed93 7a00 	vldr	s14, [r3]
 80010b0:	4baa      	ldr	r3, [pc, #680]	@ (800135c <main+0x374>)
 80010b2:	edd3 7a00 	vldr	s15, [r3]
 80010b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010ba:	4ba9      	ldr	r3, [pc, #676]	@ (8001360 <main+0x378>)
 80010bc:	edc3 7a00 	vstr	s15, [r3]

		VZ_in = readADC(&hadc3, ADC_CHANNEL_2);
 80010c0:	2102      	movs	r1, #2
 80010c2:	48a8      	ldr	r0, [pc, #672]	@ (8001364 <main+0x37c>)
 80010c4:	f7ff ff08 	bl	8000ed8 <readADC>
 80010c8:	ee07 0a90 	vmov	s15, r0
 80010cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010d0:	4ba5      	ldr	r3, [pc, #660]	@ (8001368 <main+0x380>)
 80010d2:	edc3 7a00 	vstr	s15, [r3]
		IZ_in = readADC(&hadc3, ADC_CHANNEL_1);
 80010d6:	2101      	movs	r1, #1
 80010d8:	48a2      	ldr	r0, [pc, #648]	@ (8001364 <main+0x37c>)
 80010da:	f7ff fefd 	bl	8000ed8 <readADC>
 80010de:	ee07 0a90 	vmov	s15, r0
 80010e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010e6:	4ba1      	ldr	r3, [pc, #644]	@ (800136c <main+0x384>)
 80010e8:	edc3 7a00 	vstr	s15, [r3]
		powerZ = VZ_in * IZ_in;
 80010ec:	4b9e      	ldr	r3, [pc, #632]	@ (8001368 <main+0x380>)
 80010ee:	ed93 7a00 	vldr	s14, [r3]
 80010f2:	4b9e      	ldr	r3, [pc, #632]	@ (800136c <main+0x384>)
 80010f4:	edd3 7a00 	vldr	s15, [r3]
 80010f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010fc:	4b9c      	ldr	r3, [pc, #624]	@ (8001370 <main+0x388>)
 80010fe:	edc3 7a00 	vstr	s15, [r3]


		mppt(&dutyCycleX, &powerX, &prevPowerX);
 8001102:	4a9c      	ldr	r2, [pc, #624]	@ (8001374 <main+0x38c>)
 8001104:	4992      	ldr	r1, [pc, #584]	@ (8001350 <main+0x368>)
 8001106:	489c      	ldr	r0, [pc, #624]	@ (8001378 <main+0x390>)
 8001108:	f7ff ff2e 	bl	8000f68 <mppt>
		mppt(&dutyCycleY, &powerY, &prevPowerY);
 800110c:	4a9b      	ldr	r2, [pc, #620]	@ (800137c <main+0x394>)
 800110e:	4994      	ldr	r1, [pc, #592]	@ (8001360 <main+0x378>)
 8001110:	489b      	ldr	r0, [pc, #620]	@ (8001380 <main+0x398>)
 8001112:	f7ff ff29 	bl	8000f68 <mppt>
		mppt(&dutyCycleZ, &powerZ, &prevPowerZ);
 8001116:	4a9b      	ldr	r2, [pc, #620]	@ (8001384 <main+0x39c>)
 8001118:	4995      	ldr	r1, [pc, #596]	@ (8001370 <main+0x388>)
 800111a:	489b      	ldr	r0, [pc, #620]	@ (8001388 <main+0x3a0>)
 800111c:	f7ff ff24 	bl	8000f68 <mppt>

		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, dutyCycleX);
 8001120:	4b95      	ldr	r3, [pc, #596]	@ (8001378 <main+0x390>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b84      	ldr	r3, [pc, #528]	@ (8001338 <main+0x350>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, dutyCycleY);
 800112a:	4b95      	ldr	r3, [pc, #596]	@ (8001380 <main+0x398>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	4b83      	ldr	r3, [pc, #524]	@ (800133c <main+0x354>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	641a      	str	r2, [r3, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, dutyCycleZ);
 8001134:	4b94      	ldr	r3, [pc, #592]	@ (8001388 <main+0x3a0>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b81      	ldr	r3, [pc, #516]	@ (8001340 <main+0x358>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	641a      	str	r2, [r3, #64]	@ 0x40


		// Imprimir datos al puerto serie
		char buffer[100];
		sprintf(buffer, "VX_in: %.2f V, IX_in: %.2f A, PowerX: %.2f W\n", VX_in, IX_in, powerX); // @suppress("Float formatting support")
 800113e:	4b82      	ldr	r3, [pc, #520]	@ (8001348 <main+0x360>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fa00 	bl	8000548 <__aeabi_f2d>
 8001148:	4680      	mov	r8, r0
 800114a:	4689      	mov	r9, r1
 800114c:	4b7f      	ldr	r3, [pc, #508]	@ (800134c <main+0x364>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff f9f9 	bl	8000548 <__aeabi_f2d>
 8001156:	4604      	mov	r4, r0
 8001158:	460d      	mov	r5, r1
 800115a:	4b7d      	ldr	r3, [pc, #500]	@ (8001350 <main+0x368>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f9f2 	bl	8000548 <__aeabi_f2d>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	1d38      	adds	r0, r7, #4
 800116a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800116e:	e9cd 4500 	strd	r4, r5, [sp]
 8001172:	4642      	mov	r2, r8
 8001174:	464b      	mov	r3, r9
 8001176:	4985      	ldr	r1, [pc, #532]	@ (800138c <main+0x3a4>)
 8001178:	f009 fd02 	bl	800ab80 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 800117c:	1d3b      	adds	r3, r7, #4
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f876 	bl	8000270 <strlen>
 8001184:	4603      	mov	r3, r0
 8001186:	b29a      	uxth	r2, r3
 8001188:	1d39      	adds	r1, r7, #4
 800118a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800118e:	4880      	ldr	r0, [pc, #512]	@ (8001390 <main+0x3a8>)
 8001190:	f004 fd14 	bl	8005bbc <HAL_UART_Transmit>
		sprintf(buffer, "VY_in: %.2f V, IY_in: %.2f A, PowerY: %.2f W\n", VY_in, IY_in, powerY);
 8001194:	4b70      	ldr	r3, [pc, #448]	@ (8001358 <main+0x370>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9d5 	bl	8000548 <__aeabi_f2d>
 800119e:	4680      	mov	r8, r0
 80011a0:	4689      	mov	r9, r1
 80011a2:	4b6e      	ldr	r3, [pc, #440]	@ (800135c <main+0x374>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff f9ce 	bl	8000548 <__aeabi_f2d>
 80011ac:	4604      	mov	r4, r0
 80011ae:	460d      	mov	r5, r1
 80011b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001360 <main+0x378>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f9c7 	bl	8000548 <__aeabi_f2d>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	1d38      	adds	r0, r7, #4
 80011c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80011c4:	e9cd 4500 	strd	r4, r5, [sp]
 80011c8:	4642      	mov	r2, r8
 80011ca:	464b      	mov	r3, r9
 80011cc:	4971      	ldr	r1, [pc, #452]	@ (8001394 <main+0x3ac>)
 80011ce:	f009 fcd7 	bl	800ab80 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f84b 	bl	8000270 <strlen>
 80011da:	4603      	mov	r3, r0
 80011dc:	b29a      	uxth	r2, r3
 80011de:	1d39      	adds	r1, r7, #4
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011e4:	486a      	ldr	r0, [pc, #424]	@ (8001390 <main+0x3a8>)
 80011e6:	f004 fce9 	bl	8005bbc <HAL_UART_Transmit>
		sprintf(buffer, "VZ_in: %.2f V, IZ_in: %.2f A, PowerZ: %.2f W\n", VZ_in, IZ_in, powerZ);
 80011ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001368 <main+0x380>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff f9aa 	bl	8000548 <__aeabi_f2d>
 80011f4:	4680      	mov	r8, r0
 80011f6:	4689      	mov	r9, r1
 80011f8:	4b5c      	ldr	r3, [pc, #368]	@ (800136c <main+0x384>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f9a3 	bl	8000548 <__aeabi_f2d>
 8001202:	4604      	mov	r4, r0
 8001204:	460d      	mov	r5, r1
 8001206:	4b5a      	ldr	r3, [pc, #360]	@ (8001370 <main+0x388>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f99c 	bl	8000548 <__aeabi_f2d>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	1d38      	adds	r0, r7, #4
 8001216:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800121a:	e9cd 4500 	strd	r4, r5, [sp]
 800121e:	4642      	mov	r2, r8
 8001220:	464b      	mov	r3, r9
 8001222:	495d      	ldr	r1, [pc, #372]	@ (8001398 <main+0x3b0>)
 8001224:	f009 fcac 	bl	800ab80 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	4618      	mov	r0, r3
 800122c:	f7ff f820 	bl	8000270 <strlen>
 8001230:	4603      	mov	r3, r0
 8001232:	b29a      	uxth	r2, r3
 8001234:	1d39      	adds	r1, r7, #4
 8001236:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800123a:	4855      	ldr	r0, [pc, #340]	@ (8001390 <main+0x3a8>)
 800123c:	f004 fcbe 	bl	8005bbc <HAL_UART_Transmit>

		//PDU
		V5 = readADC(&hadc2, ADC_CHANNEL_11);
 8001240:	210b      	movs	r1, #11
 8001242:	4840      	ldr	r0, [pc, #256]	@ (8001344 <main+0x35c>)
 8001244:	f7ff fe48 	bl	8000ed8 <readADC>
 8001248:	ee07 0a90 	vmov	s15, r0
 800124c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001250:	4b52      	ldr	r3, [pc, #328]	@ (800139c <main+0x3b4>)
 8001252:	edc3 7a00 	vstr	s15, [r3]
		I5 = readADC(&hadc2, ADC_CHANNEL_10);
 8001256:	210a      	movs	r1, #10
 8001258:	483a      	ldr	r0, [pc, #232]	@ (8001344 <main+0x35c>)
 800125a:	f7ff fe3d 	bl	8000ed8 <readADC>
 800125e:	ee07 0a90 	vmov	s15, r0
 8001262:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001266:	4b4e      	ldr	r3, [pc, #312]	@ (80013a0 <main+0x3b8>)
 8001268:	edc3 7a00 	vstr	s15, [r3]

		V5bis = readADC(&hadc2, ADC_CHANNEL_11);
 800126c:	210b      	movs	r1, #11
 800126e:	4835      	ldr	r0, [pc, #212]	@ (8001344 <main+0x35c>)
 8001270:	f7ff fe32 	bl	8000ed8 <readADC>
 8001274:	ee07 0a90 	vmov	s15, r0
 8001278:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800127c:	4b49      	ldr	r3, [pc, #292]	@ (80013a4 <main+0x3bc>)
 800127e:	edc3 7a00 	vstr	s15, [r3]
		I5bis = readADC(&hadc2, ADC_CHANNEL_10);
 8001282:	210a      	movs	r1, #10
 8001284:	482f      	ldr	r0, [pc, #188]	@ (8001344 <main+0x35c>)
 8001286:	f7ff fe27 	bl	8000ed8 <readADC>
 800128a:	ee07 0a90 	vmov	s15, r0
 800128e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001292:	4b45      	ldr	r3, [pc, #276]	@ (80013a8 <main+0x3c0>)
 8001294:	edc3 7a00 	vstr	s15, [r3]

		V3 = readADC(&hadc2, ADC_CHANNEL_11);
 8001298:	210b      	movs	r1, #11
 800129a:	482a      	ldr	r0, [pc, #168]	@ (8001344 <main+0x35c>)
 800129c:	f7ff fe1c 	bl	8000ed8 <readADC>
 80012a0:	ee07 0a90 	vmov	s15, r0
 80012a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012a8:	4b40      	ldr	r3, [pc, #256]	@ (80013ac <main+0x3c4>)
 80012aa:	edc3 7a00 	vstr	s15, [r3]
		I3 = readADC(&hadc2, ADC_CHANNEL_10);
 80012ae:	210a      	movs	r1, #10
 80012b0:	4824      	ldr	r0, [pc, #144]	@ (8001344 <main+0x35c>)
 80012b2:	f7ff fe11 	bl	8000ed8 <readADC>
 80012b6:	ee07 0a90 	vmov	s15, r0
 80012ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012be:	4b3c      	ldr	r3, [pc, #240]	@ (80013b0 <main+0x3c8>)
 80012c0:	edc3 7a00 	vstr	s15, [r3]

		V3bis = readADC(&hadc2, ADC_CHANNEL_11);
 80012c4:	210b      	movs	r1, #11
 80012c6:	481f      	ldr	r0, [pc, #124]	@ (8001344 <main+0x35c>)
 80012c8:	f7ff fe06 	bl	8000ed8 <readADC>
 80012cc:	ee07 0a90 	vmov	s15, r0
 80012d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012d4:	4b37      	ldr	r3, [pc, #220]	@ (80013b4 <main+0x3cc>)
 80012d6:	edc3 7a00 	vstr	s15, [r3]
		I3bis = readADC(&hadc2, ADC_CHANNEL_10);
 80012da:	210a      	movs	r1, #10
 80012dc:	4819      	ldr	r0, [pc, #100]	@ (8001344 <main+0x35c>)
 80012de:	f7ff fdfb 	bl	8000ed8 <readADC>
 80012e2:	ee07 0a90 	vmov	s15, r0
 80012e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012ea:	4b33      	ldr	r3, [pc, #204]	@ (80013b8 <main+0x3d0>)
 80012ec:	edc3 7a00 	vstr	s15, [r3]

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); 	//5V
 80012f0:	2201      	movs	r2, #1
 80012f2:	2104      	movs	r1, #4
 80012f4:	4831      	ldr	r0, [pc, #196]	@ (80013bc <main+0x3d4>)
 80012f6:	f001 fef1 	bl	80030dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_RESET);	//3.3V BIS
 80012fa:	2200      	movs	r2, #0
 80012fc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001300:	482e      	ldr	r0, [pc, #184]	@ (80013bc <main+0x3d4>)
 8001302:	f001 feeb 	bl	80030dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_RESET);	//3.3V
 8001306:	2200      	movs	r2, #0
 8001308:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800130c:	482b      	ldr	r0, [pc, #172]	@ (80013bc <main+0x3d4>)
 800130e:	f001 fee5 	bl	80030dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);	//5V BIS
 8001312:	2200      	movs	r2, #0
 8001314:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001318:	4828      	ldr	r0, [pc, #160]	@ (80013bc <main+0x3d4>)
 800131a:	f001 fedf 	bl	80030dc <HAL_GPIO_WritePin>

		//COMUNICACION BQ76905

		//CALENTAMIENTO Y CONTROL DE TEMPERATURA

		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);	// CALEFACTOR
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001324:	4825      	ldr	r0, [pc, #148]	@ (80013bc <main+0x3d4>)
 8001326:	f001 fed9 	bl	80030dc <HAL_GPIO_WritePin>

		//MODO BAJO CONSUMO

		//ALMACENAMIENTO EN FLASH DE VARIBLES

		HAL_Delay(500);
 800132a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800132e:	f001 f837 	bl	80023a0 <HAL_Delay>
  {
 8001332:	bf00      	nop
 8001334:	e044      	b.n	80013c0 <main+0x3d8>
 8001336:	bf00      	nop
 8001338:	2000046c 	.word	0x2000046c
 800133c:	200004b4 	.word	0x200004b4
 8001340:	200004fc 	.word	0x200004fc
 8001344:	20000334 	.word	0x20000334
 8001348:	2000058c 	.word	0x2000058c
 800134c:	20000598 	.word	0x20000598
 8001350:	200005a4 	.word	0x200005a4
 8001354:	200002ec 	.word	0x200002ec
 8001358:	20000590 	.word	0x20000590
 800135c:	2000059c 	.word	0x2000059c
 8001360:	200005a8 	.word	0x200005a8
 8001364:	2000037c 	.word	0x2000037c
 8001368:	20000594 	.word	0x20000594
 800136c:	200005a0 	.word	0x200005a0
 8001370:	200005ac 	.word	0x200005ac
 8001374:	200005b0 	.word	0x200005b0
 8001378:	20000000 	.word	0x20000000
 800137c:	200005b4 	.word	0x200005b4
 8001380:	20000004 	.word	0x20000004
 8001384:	200005b8 	.word	0x200005b8
 8001388:	20000008 	.word	0x20000008
 800138c:	0800cf78 	.word	0x0800cf78
 8001390:	20000544 	.word	0x20000544
 8001394:	0800cfa8 	.word	0x0800cfa8
 8001398:	0800cfd8 	.word	0x0800cfd8
 800139c:	200005bc 	.word	0x200005bc
 80013a0:	200005c0 	.word	0x200005c0
 80013a4:	200005c4 	.word	0x200005c4
 80013a8:	200005c8 	.word	0x200005c8
 80013ac:	200005cc 	.word	0x200005cc
 80013b0:	200005d0 	.word	0x200005d0
 80013b4:	200005d4 	.word	0x200005d4
 80013b8:	200005d8 	.word	0x200005d8
 80013bc:	40020400 	.word	0x40020400
 80013c0:	e63c      	b.n	800103c <main+0x54>
 80013c2:	bf00      	nop

080013c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b094      	sub	sp, #80	@ 0x50
 80013c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ca:	f107 0320 	add.w	r3, r7, #32
 80013ce:	2230      	movs	r2, #48	@ 0x30
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f009 fcb6 	bl	800ad44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	4b28      	ldr	r3, [pc, #160]	@ (8001490 <SystemClock_Config+0xcc>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f0:	4a27      	ldr	r2, [pc, #156]	@ (8001490 <SystemClock_Config+0xcc>)
 80013f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80013f8:	4b25      	ldr	r3, [pc, #148]	@ (8001490 <SystemClock_Config+0xcc>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
 8001408:	4b22      	ldr	r3, [pc, #136]	@ (8001494 <SystemClock_Config+0xd0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a21      	ldr	r2, [pc, #132]	@ (8001494 <SystemClock_Config+0xd0>)
 800140e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001412:	6013      	str	r3, [r2, #0]
 8001414:	4b1f      	ldr	r3, [pc, #124]	@ (8001494 <SystemClock_Config+0xd0>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001420:	2301      	movs	r3, #1
 8001422:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001424:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001428:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800142a:	2302      	movs	r3, #2
 800142c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800142e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001432:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001434:	2304      	movs	r3, #4
 8001436:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001438:	23a8      	movs	r3, #168	@ 0xa8
 800143a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800143c:	2302      	movs	r3, #2
 800143e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001440:	2307      	movs	r3, #7
 8001442:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001444:	f107 0320 	add.w	r3, r7, #32
 8001448:	4618      	mov	r0, r3
 800144a:	f003 f9f7 	bl	800483c <HAL_RCC_OscConfig>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001454:	f000 fb18 	bl	8001a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001458:	230f      	movs	r3, #15
 800145a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145c:	2302      	movs	r3, #2
 800145e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001464:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001468:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800146a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800146e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001470:	f107 030c 	add.w	r3, r7, #12
 8001474:	2105      	movs	r1, #5
 8001476:	4618      	mov	r0, r3
 8001478:	f003 fc58 	bl	8004d2c <HAL_RCC_ClockConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001482:	f000 fb01 	bl	8001a88 <Error_Handler>
  }
}
 8001486:	bf00      	nop
 8001488:	3750      	adds	r7, #80	@ 0x50
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800
 8001494:	40007000 	.word	0x40007000

08001498 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800149e:	463b      	mov	r3, r7
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014aa:	4b21      	ldr	r3, [pc, #132]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014ac:	4a21      	ldr	r2, [pc, #132]	@ (8001534 <MX_ADC1_Init+0x9c>)
 80014ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80014b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014be:	4b1c      	ldr	r3, [pc, #112]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014ca:	4b19      	ldr	r3, [pc, #100]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014d2:	4b17      	ldr	r3, [pc, #92]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d8:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014da:	4a17      	ldr	r2, [pc, #92]	@ (8001538 <MX_ADC1_Init+0xa0>)
 80014dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014de:	4b14      	ldr	r3, [pc, #80]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014e4:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014ea:	4b11      	ldr	r3, [pc, #68]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014f4:	2201      	movs	r2, #1
 80014f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014f8:	480d      	ldr	r0, [pc, #52]	@ (8001530 <MX_ADC1_Init+0x98>)
 80014fa:	f000 ff75 	bl	80023e8 <HAL_ADC_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001504:	f000 fac0 	bl	8001a88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001508:	2304      	movs	r3, #4
 800150a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800150c:	2301      	movs	r3, #1
 800150e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001510:	2300      	movs	r3, #0
 8001512:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001514:	463b      	mov	r3, r7
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	@ (8001530 <MX_ADC1_Init+0x98>)
 800151a:	f001 f913 	bl	8002744 <HAL_ADC_ConfigChannel>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001524:	f000 fab0 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	200002ec 	.word	0x200002ec
 8001534:	40012000 	.word	0x40012000
 8001538:	0f000001 	.word	0x0f000001

0800153c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001542:	463b      	mov	r3, r7
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800154e:	4b21      	ldr	r3, [pc, #132]	@ (80015d4 <MX_ADC2_Init+0x98>)
 8001550:	4a21      	ldr	r2, [pc, #132]	@ (80015d8 <MX_ADC2_Init+0x9c>)
 8001552:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001554:	4b1f      	ldr	r3, [pc, #124]	@ (80015d4 <MX_ADC2_Init+0x98>)
 8001556:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800155a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800155c:	4b1d      	ldr	r3, [pc, #116]	@ (80015d4 <MX_ADC2_Init+0x98>)
 800155e:	2200      	movs	r2, #0
 8001560:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001562:	4b1c      	ldr	r3, [pc, #112]	@ (80015d4 <MX_ADC2_Init+0x98>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001568:	4b1a      	ldr	r3, [pc, #104]	@ (80015d4 <MX_ADC2_Init+0x98>)
 800156a:	2200      	movs	r2, #0
 800156c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800156e:	4b19      	ldr	r3, [pc, #100]	@ (80015d4 <MX_ADC2_Init+0x98>)
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001576:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <MX_ADC2_Init+0x98>)
 8001578:	2200      	movs	r2, #0
 800157a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800157c:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <MX_ADC2_Init+0x98>)
 800157e:	4a17      	ldr	r2, [pc, #92]	@ (80015dc <MX_ADC2_Init+0xa0>)
 8001580:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001582:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <MX_ADC2_Init+0x98>)
 8001584:	2200      	movs	r2, #0
 8001586:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001588:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <MX_ADC2_Init+0x98>)
 800158a:	2201      	movs	r2, #1
 800158c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800158e:	4b11      	ldr	r3, [pc, #68]	@ (80015d4 <MX_ADC2_Init+0x98>)
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001596:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <MX_ADC2_Init+0x98>)
 8001598:	2201      	movs	r2, #1
 800159a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800159c:	480d      	ldr	r0, [pc, #52]	@ (80015d4 <MX_ADC2_Init+0x98>)
 800159e:	f000 ff23 	bl	80023e8 <HAL_ADC_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80015a8:	f000 fa6e 	bl	8001a88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80015ac:	2306      	movs	r3, #6
 80015ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015b0:	2301      	movs	r3, #1
 80015b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80015b8:	463b      	mov	r3, r7
 80015ba:	4619      	mov	r1, r3
 80015bc:	4805      	ldr	r0, [pc, #20]	@ (80015d4 <MX_ADC2_Init+0x98>)
 80015be:	f001 f8c1 	bl	8002744 <HAL_ADC_ConfigChannel>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80015c8:	f000 fa5e 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000334 	.word	0x20000334
 80015d8:	40012100 	.word	0x40012100
 80015dc:	0f000001 	.word	0x0f000001

080015e0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015e6:	463b      	mov	r3, r7
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80015f2:	4b21      	ldr	r3, [pc, #132]	@ (8001678 <MX_ADC3_Init+0x98>)
 80015f4:	4a21      	ldr	r2, [pc, #132]	@ (800167c <MX_ADC3_Init+0x9c>)
 80015f6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001678 <MX_ADC3_Init+0x98>)
 80015fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015fe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001600:	4b1d      	ldr	r3, [pc, #116]	@ (8001678 <MX_ADC3_Init+0x98>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001606:	4b1c      	ldr	r3, [pc, #112]	@ (8001678 <MX_ADC3_Init+0x98>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800160c:	4b1a      	ldr	r3, [pc, #104]	@ (8001678 <MX_ADC3_Init+0x98>)
 800160e:	2200      	movs	r2, #0
 8001610:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001612:	4b19      	ldr	r3, [pc, #100]	@ (8001678 <MX_ADC3_Init+0x98>)
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800161a:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <MX_ADC3_Init+0x98>)
 800161c:	2200      	movs	r2, #0
 800161e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001620:	4b15      	ldr	r3, [pc, #84]	@ (8001678 <MX_ADC3_Init+0x98>)
 8001622:	4a17      	ldr	r2, [pc, #92]	@ (8001680 <MX_ADC3_Init+0xa0>)
 8001624:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001626:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <MX_ADC3_Init+0x98>)
 8001628:	2200      	movs	r2, #0
 800162a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800162c:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <MX_ADC3_Init+0x98>)
 800162e:	2201      	movs	r2, #1
 8001630:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001632:	4b11      	ldr	r3, [pc, #68]	@ (8001678 <MX_ADC3_Init+0x98>)
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800163a:	4b0f      	ldr	r3, [pc, #60]	@ (8001678 <MX_ADC3_Init+0x98>)
 800163c:	2201      	movs	r2, #1
 800163e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001640:	480d      	ldr	r0, [pc, #52]	@ (8001678 <MX_ADC3_Init+0x98>)
 8001642:	f000 fed1 	bl	80023e8 <HAL_ADC_Init>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800164c:	f000 fa1c 	bl	8001a88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001650:	2301      	movs	r3, #1
 8001652:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001654:	2301      	movs	r3, #1
 8001656:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001658:	2300      	movs	r3, #0
 800165a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800165c:	463b      	mov	r3, r7
 800165e:	4619      	mov	r1, r3
 8001660:	4805      	ldr	r0, [pc, #20]	@ (8001678 <MX_ADC3_Init+0x98>)
 8001662:	f001 f86f 	bl	8002744 <HAL_ADC_ConfigChannel>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800166c:	f000 fa0c 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	2000037c 	.word	0x2000037c
 800167c:	40012200 	.word	0x40012200
 8001680:	0f000001 	.word	0x0f000001

08001684 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001688:	4b12      	ldr	r3, [pc, #72]	@ (80016d4 <MX_I2C1_Init+0x50>)
 800168a:	4a13      	ldr	r2, [pc, #76]	@ (80016d8 <MX_I2C1_Init+0x54>)
 800168c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800168e:	4b11      	ldr	r3, [pc, #68]	@ (80016d4 <MX_I2C1_Init+0x50>)
 8001690:	4a12      	ldr	r2, [pc, #72]	@ (80016dc <MX_I2C1_Init+0x58>)
 8001692:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001694:	4b0f      	ldr	r3, [pc, #60]	@ (80016d4 <MX_I2C1_Init+0x50>)
 8001696:	2200      	movs	r2, #0
 8001698:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800169a:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <MX_I2C1_Init+0x50>)
 800169c:	2200      	movs	r2, #0
 800169e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a0:	4b0c      	ldr	r3, [pc, #48]	@ (80016d4 <MX_I2C1_Init+0x50>)
 80016a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a8:	4b0a      	ldr	r3, [pc, #40]	@ (80016d4 <MX_I2C1_Init+0x50>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016ae:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <MX_I2C1_Init+0x50>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016b4:	4b07      	ldr	r3, [pc, #28]	@ (80016d4 <MX_I2C1_Init+0x50>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016ba:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <MX_I2C1_Init+0x50>)
 80016bc:	2200      	movs	r2, #0
 80016be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016c0:	4804      	ldr	r0, [pc, #16]	@ (80016d4 <MX_I2C1_Init+0x50>)
 80016c2:	f001 fd25 	bl	8003110 <HAL_I2C_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80016cc:	f000 f9dc 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200003c4 	.word	0x200003c4
 80016d8:	40005400 	.word	0x40005400
 80016dc:	000186a0 	.word	0x000186a0

080016e0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80016e4:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <MX_I2C3_Init+0x50>)
 80016e6:	4a13      	ldr	r2, [pc, #76]	@ (8001734 <MX_I2C3_Init+0x54>)
 80016e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80016ea:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <MX_I2C3_Init+0x50>)
 80016ec:	4a12      	ldr	r2, [pc, #72]	@ (8001738 <MX_I2C3_Init+0x58>)
 80016ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <MX_I2C3_Init+0x50>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80016f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001730 <MX_I2C3_Init+0x50>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001730 <MX_I2C3_Init+0x50>)
 80016fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001702:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001704:	4b0a      	ldr	r3, [pc, #40]	@ (8001730 <MX_I2C3_Init+0x50>)
 8001706:	2200      	movs	r2, #0
 8001708:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800170a:	4b09      	ldr	r3, [pc, #36]	@ (8001730 <MX_I2C3_Init+0x50>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001710:	4b07      	ldr	r3, [pc, #28]	@ (8001730 <MX_I2C3_Init+0x50>)
 8001712:	2200      	movs	r2, #0
 8001714:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001716:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <MX_I2C3_Init+0x50>)
 8001718:	2200      	movs	r2, #0
 800171a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800171c:	4804      	ldr	r0, [pc, #16]	@ (8001730 <MX_I2C3_Init+0x50>)
 800171e:	f001 fcf7 	bl	8003110 <HAL_I2C_Init>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001728:	f000 f9ae 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800172c:	bf00      	nop
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000418 	.word	0x20000418
 8001734:	40005c00 	.word	0x40005c00
 8001738:	000186a0 	.word	0x000186a0

0800173c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	@ 0x28
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001742:	f107 0320 	add.w	r3, r7, #32
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800174c:	1d3b      	adds	r3, r7, #4
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
 8001754:	609a      	str	r2, [r3, #8]
 8001756:	60da      	str	r2, [r3, #12]
 8001758:	611a      	str	r2, [r3, #16]
 800175a:	615a      	str	r2, [r3, #20]
 800175c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800175e:	4b23      	ldr	r3, [pc, #140]	@ (80017ec <MX_TIM2_Init+0xb0>)
 8001760:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001764:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8001766:	4b21      	ldr	r3, [pc, #132]	@ (80017ec <MX_TIM2_Init+0xb0>)
 8001768:	f240 12a3 	movw	r2, #419	@ 0x1a3
 800176c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800176e:	4b1f      	ldr	r3, [pc, #124]	@ (80017ec <MX_TIM2_Init+0xb0>)
 8001770:	2200      	movs	r2, #0
 8001772:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001774:	4b1d      	ldr	r3, [pc, #116]	@ (80017ec <MX_TIM2_Init+0xb0>)
 8001776:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800177a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177c:	4b1b      	ldr	r3, [pc, #108]	@ (80017ec <MX_TIM2_Init+0xb0>)
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001782:	4b1a      	ldr	r3, [pc, #104]	@ (80017ec <MX_TIM2_Init+0xb0>)
 8001784:	2200      	movs	r2, #0
 8001786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001788:	4818      	ldr	r0, [pc, #96]	@ (80017ec <MX_TIM2_Init+0xb0>)
 800178a:	f003 fcef 	bl	800516c <HAL_TIM_PWM_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001794:	f000 f978 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001798:	2300      	movs	r3, #0
 800179a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017a0:	f107 0320 	add.w	r3, r7, #32
 80017a4:	4619      	mov	r1, r3
 80017a6:	4811      	ldr	r0, [pc, #68]	@ (80017ec <MX_TIM2_Init+0xb0>)
 80017a8:	f004 f93c 	bl	8005a24 <HAL_TIMEx_MasterConfigSynchronization>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80017b2:	f000 f969 	bl	8001a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b6:	2360      	movs	r3, #96	@ 0x60
 80017b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	2200      	movs	r2, #0
 80017ca:	4619      	mov	r1, r3
 80017cc:	4807      	ldr	r0, [pc, #28]	@ (80017ec <MX_TIM2_Init+0xb0>)
 80017ce:	f003 fde5 	bl	800539c <HAL_TIM_PWM_ConfigChannel>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80017d8:	f000 f956 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017dc:	4803      	ldr	r0, [pc, #12]	@ (80017ec <MX_TIM2_Init+0xb0>)
 80017de:	f000 fb63 	bl	8001ea8 <HAL_TIM_MspPostInit>

}
 80017e2:	bf00      	nop
 80017e4:	3728      	adds	r7, #40	@ 0x28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	2000046c 	.word	0x2000046c

080017f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08a      	sub	sp, #40	@ 0x28
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f6:	f107 0320 	add.w	r3, r7, #32
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001800:	1d3b      	adds	r3, r7, #4
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
 8001808:	609a      	str	r2, [r3, #8]
 800180a:	60da      	str	r2, [r3, #12]
 800180c:	611a      	str	r2, [r3, #16]
 800180e:	615a      	str	r2, [r3, #20]
 8001810:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001812:	4b22      	ldr	r3, [pc, #136]	@ (800189c <MX_TIM4_Init+0xac>)
 8001814:	4a22      	ldr	r2, [pc, #136]	@ (80018a0 <MX_TIM4_Init+0xb0>)
 8001816:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 420-1;
 8001818:	4b20      	ldr	r3, [pc, #128]	@ (800189c <MX_TIM4_Init+0xac>)
 800181a:	f240 12a3 	movw	r2, #419	@ 0x1a3
 800181e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001820:	4b1e      	ldr	r3, [pc, #120]	@ (800189c <MX_TIM4_Init+0xac>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001826:	4b1d      	ldr	r3, [pc, #116]	@ (800189c <MX_TIM4_Init+0xac>)
 8001828:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800182c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182e:	4b1b      	ldr	r3, [pc, #108]	@ (800189c <MX_TIM4_Init+0xac>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001834:	4b19      	ldr	r3, [pc, #100]	@ (800189c <MX_TIM4_Init+0xac>)
 8001836:	2200      	movs	r2, #0
 8001838:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800183a:	4818      	ldr	r0, [pc, #96]	@ (800189c <MX_TIM4_Init+0xac>)
 800183c:	f003 fc96 	bl	800516c <HAL_TIM_PWM_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001846:	f000 f91f 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800184a:	2300      	movs	r3, #0
 800184c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001852:	f107 0320 	add.w	r3, r7, #32
 8001856:	4619      	mov	r1, r3
 8001858:	4810      	ldr	r0, [pc, #64]	@ (800189c <MX_TIM4_Init+0xac>)
 800185a:	f004 f8e3 	bl	8005a24 <HAL_TIMEx_MasterConfigSynchronization>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001864:	f000 f910 	bl	8001a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001868:	2360      	movs	r3, #96	@ 0x60
 800186a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001870:	2300      	movs	r3, #0
 8001872:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	220c      	movs	r2, #12
 800187c:	4619      	mov	r1, r3
 800187e:	4807      	ldr	r0, [pc, #28]	@ (800189c <MX_TIM4_Init+0xac>)
 8001880:	f003 fd8c 	bl	800539c <HAL_TIM_PWM_ConfigChannel>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800188a:	f000 f8fd 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800188e:	4803      	ldr	r0, [pc, #12]	@ (800189c <MX_TIM4_Init+0xac>)
 8001890:	f000 fb0a 	bl	8001ea8 <HAL_TIM_MspPostInit>

}
 8001894:	bf00      	nop
 8001896:	3728      	adds	r7, #40	@ 0x28
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	200004b4 	.word	0x200004b4
 80018a0:	40000800 	.word	0x40000800

080018a4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	@ 0x28
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018aa:	f107 0320 	add.w	r3, r7, #32
 80018ae:	2200      	movs	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	611a      	str	r2, [r3, #16]
 80018c2:	615a      	str	r2, [r3, #20]
 80018c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80018c6:	4b22      	ldr	r3, [pc, #136]	@ (8001950 <MX_TIM5_Init+0xac>)
 80018c8:	4a22      	ldr	r2, [pc, #136]	@ (8001954 <MX_TIM5_Init+0xb0>)
 80018ca:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 420-1;
 80018cc:	4b20      	ldr	r3, [pc, #128]	@ (8001950 <MX_TIM5_Init+0xac>)
 80018ce:	f240 12a3 	movw	r2, #419	@ 0x1a3
 80018d2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001950 <MX_TIM5_Init+0xac>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80018da:	4b1d      	ldr	r3, [pc, #116]	@ (8001950 <MX_TIM5_Init+0xac>)
 80018dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018e0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001950 <MX_TIM5_Init+0xac>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e8:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <MX_TIM5_Init+0xac>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80018ee:	4818      	ldr	r0, [pc, #96]	@ (8001950 <MX_TIM5_Init+0xac>)
 80018f0:	f003 fc3c 	bl	800516c <HAL_TIM_PWM_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80018fa:	f000 f8c5 	bl	8001a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001906:	f107 0320 	add.w	r3, r7, #32
 800190a:	4619      	mov	r1, r3
 800190c:	4810      	ldr	r0, [pc, #64]	@ (8001950 <MX_TIM5_Init+0xac>)
 800190e:	f004 f889 	bl	8005a24 <HAL_TIMEx_MasterConfigSynchronization>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001918:	f000 f8b6 	bl	8001a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800191c:	2360      	movs	r3, #96	@ 0x60
 800191e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001924:	2300      	movs	r3, #0
 8001926:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	220c      	movs	r2, #12
 8001930:	4619      	mov	r1, r3
 8001932:	4807      	ldr	r0, [pc, #28]	@ (8001950 <MX_TIM5_Init+0xac>)
 8001934:	f003 fd32 	bl	800539c <HAL_TIM_PWM_ConfigChannel>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 800193e:	f000 f8a3 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001942:	4803      	ldr	r0, [pc, #12]	@ (8001950 <MX_TIM5_Init+0xac>)
 8001944:	f000 fab0 	bl	8001ea8 <HAL_TIM_MspPostInit>

}
 8001948:	bf00      	nop
 800194a:	3728      	adds	r7, #40	@ 0x28
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200004fc 	.word	0x200004fc
 8001954:	40000c00 	.word	0x40000c00

08001958 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <MX_UART4_Init+0x4c>)
 800195e:	4a12      	ldr	r2, [pc, #72]	@ (80019a8 <MX_UART4_Init+0x50>)
 8001960:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001962:	4b10      	ldr	r3, [pc, #64]	@ (80019a4 <MX_UART4_Init+0x4c>)
 8001964:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001968:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800196a:	4b0e      	ldr	r3, [pc, #56]	@ (80019a4 <MX_UART4_Init+0x4c>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001970:	4b0c      	ldr	r3, [pc, #48]	@ (80019a4 <MX_UART4_Init+0x4c>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001976:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <MX_UART4_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800197c:	4b09      	ldr	r3, [pc, #36]	@ (80019a4 <MX_UART4_Init+0x4c>)
 800197e:	220c      	movs	r2, #12
 8001980:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001982:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <MX_UART4_Init+0x4c>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <MX_UART4_Init+0x4c>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800198e:	4805      	ldr	r0, [pc, #20]	@ (80019a4 <MX_UART4_Init+0x4c>)
 8001990:	f004 f8c4 	bl	8005b1c <HAL_UART_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800199a:	f000 f875 	bl	8001a88 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000544 	.word	0x20000544
 80019a8:	40004c00 	.word	0x40004c00

080019ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	@ 0x28
 80019b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	60da      	str	r2, [r3, #12]
 80019c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001a80 <MX_GPIO_Init+0xd4>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	4a2d      	ldr	r2, [pc, #180]	@ (8001a80 <MX_GPIO_Init+0xd4>)
 80019cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001a80 <MX_GPIO_Init+0xd4>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b27      	ldr	r3, [pc, #156]	@ (8001a80 <MX_GPIO_Init+0xd4>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	4a26      	ldr	r2, [pc, #152]	@ (8001a80 <MX_GPIO_Init+0xd4>)
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ee:	4b24      	ldr	r3, [pc, #144]	@ (8001a80 <MX_GPIO_Init+0xd4>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60bb      	str	r3, [r7, #8]
 80019fe:	4b20      	ldr	r3, [pc, #128]	@ (8001a80 <MX_GPIO_Init+0xd4>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	4a1f      	ldr	r2, [pc, #124]	@ (8001a80 <MX_GPIO_Init+0xd4>)
 8001a04:	f043 0301 	orr.w	r3, r3, #1
 8001a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a80 <MX_GPIO_Init+0xd4>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	4b19      	ldr	r3, [pc, #100]	@ (8001a80 <MX_GPIO_Init+0xd4>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	4a18      	ldr	r2, [pc, #96]	@ (8001a80 <MX_GPIO_Init+0xd4>)
 8001a20:	f043 0302 	orr.w	r3, r3, #2
 8001a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a26:	4b16      	ldr	r3, [pc, #88]	@ (8001a80 <MX_GPIO_Init+0xd4>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	607b      	str	r3, [r7, #4]
 8001a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Enable5V_Pin|Enable3_3VBis_Pin|Enable3_3V_Pin|Enable5VBis_Pin
 8001a32:	2200      	movs	r2, #0
 8001a34:	f645 4104 	movw	r1, #23556	@ 0x5c04
 8001a38:	4812      	ldr	r0, [pc, #72]	@ (8001a84 <MX_GPIO_Init+0xd8>)
 8001a3a:	f001 fb4f 	bl	80030dc <HAL_GPIO_WritePin>
                          |EnableCalefactor_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Enable5V_Pin Enable3_3VBis_Pin Enable3_3V_Pin Enable5VBis_Pin
                           EnableCalefactor_Pin */
  GPIO_InitStruct.Pin = Enable5V_Pin|Enable3_3VBis_Pin|Enable3_3V_Pin|Enable5VBis_Pin
 8001a3e:	f645 4304 	movw	r3, #23556	@ 0x5c04
 8001a42:	617b      	str	r3, [r7, #20]
                          |EnableCalefactor_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a44:	2301      	movs	r3, #1
 8001a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	4619      	mov	r1, r3
 8001a56:	480b      	ldr	r0, [pc, #44]	@ (8001a84 <MX_GPIO_Init+0xd8>)
 8001a58:	f001 f9a4 	bl	8002da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BMS_Alert_Pin */
  GPIO_InitStruct.Pin = BMS_Alert_Pin;
 8001a5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BMS_Alert_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4804      	ldr	r0, [pc, #16]	@ (8001a84 <MX_GPIO_Init+0xd8>)
 8001a72:	f001 f997 	bl	8002da4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a76:	bf00      	nop
 8001a78:	3728      	adds	r7, #40	@ 0x28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020400 	.word	0x40020400

08001a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a8c:	b672      	cpsid	i
}
 8001a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <Error_Handler+0x8>

08001a94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	4b10      	ldr	r3, [pc, #64]	@ (8001ae0 <HAL_MspInit+0x4c>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aa2:	4a0f      	ldr	r2, [pc, #60]	@ (8001ae0 <HAL_MspInit+0x4c>)
 8001aa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8001ae0 <HAL_MspInit+0x4c>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <HAL_MspInit+0x4c>)
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	4a08      	ldr	r2, [pc, #32]	@ (8001ae0 <HAL_MspInit+0x4c>)
 8001ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ac6:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <HAL_MspInit+0x4c>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800

08001ae4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b090      	sub	sp, #64	@ 0x40
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a6c      	ldr	r2, [pc, #432]	@ (8001cb4 <HAL_ADC_MspInit+0x1d0>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d142      	bne.n	8001b8c <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b0a:	4b6b      	ldr	r3, [pc, #428]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0e:	4a6a      	ldr	r2, [pc, #424]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001b10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b16:	4b68      	ldr	r3, [pc, #416]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b22:	2300      	movs	r3, #0
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b26:	4b64      	ldr	r3, [pc, #400]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	4a63      	ldr	r2, [pc, #396]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001b2c:	f043 0304 	orr.w	r3, r3, #4
 8001b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b32:	4b61      	ldr	r3, [pc, #388]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
 8001b42:	4b5d      	ldr	r3, [pc, #372]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	4a5c      	ldr	r2, [pc, #368]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001b48:	f043 0301 	orr.w	r3, r3, #1
 8001b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4e:	4b5a      	ldr	r3, [pc, #360]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	f003 0301 	and.w	r3, r3, #1
 8001b56:	623b      	str	r3, [r7, #32]
 8001b58:	6a3b      	ldr	r3, [r7, #32]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = CurrYMPPT_Pin|VoltYMPPT_Pin|Volt5V_Pin|Curr5V_Pin;
 8001b5a:	233c      	movs	r3, #60	@ 0x3c
 8001b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b66:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4853      	ldr	r0, [pc, #332]	@ (8001cbc <HAL_ADC_MspInit+0x1d8>)
 8001b6e:	f001 f919 	bl	8002da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Curr5VBis_Pin|Volt5VBis_Pin;
 8001b72:	2330      	movs	r3, #48	@ 0x30
 8001b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b76:	2303      	movs	r3, #3
 8001b78:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b82:	4619      	mov	r1, r3
 8001b84:	484e      	ldr	r0, [pc, #312]	@ (8001cc0 <HAL_ADC_MspInit+0x1dc>)
 8001b86:	f001 f90d 	bl	8002da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001b8a:	e08e      	b.n	8001caa <HAL_ADC_MspInit+0x1c6>
  else if(hadc->Instance==ADC2)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a4c      	ldr	r2, [pc, #304]	@ (8001cc4 <HAL_ADC_MspInit+0x1e0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d15c      	bne.n	8001c50 <HAL_ADC_MspInit+0x16c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	61fb      	str	r3, [r7, #28]
 8001b9a:	4b47      	ldr	r3, [pc, #284]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b9e:	4a46      	ldr	r2, [pc, #280]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001ba0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ba6:	4b44      	ldr	r3, [pc, #272]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bae:	61fb      	str	r3, [r7, #28]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
 8001bb6:	4b40      	ldr	r3, [pc, #256]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	4a3f      	ldr	r2, [pc, #252]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001bbc:	f043 0304 	orr.w	r3, r3, #4
 8001bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc2:	4b3d      	ldr	r3, [pc, #244]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	61bb      	str	r3, [r7, #24]
 8001bcc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	4b39      	ldr	r3, [pc, #228]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	4a38      	ldr	r2, [pc, #224]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bde:	4b36      	ldr	r3, [pc, #216]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	4b32      	ldr	r3, [pc, #200]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	4a31      	ldr	r2, [pc, #196]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001bf4:	f043 0302 	orr.w	r3, r3, #2
 8001bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = CurrXMPPT_Pin|VoltXMPPT_Pin;
 8001c06:	2303      	movs	r3, #3
 8001c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c12:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c16:	4619      	mov	r1, r3
 8001c18:	4828      	ldr	r0, [pc, #160]	@ (8001cbc <HAL_ADC_MspInit+0x1d8>)
 8001c1a:	f001 f8c3 	bl	8002da4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Volt3_3V_Pin|Curr3_3V_Pin;
 8001c1e:	23c0      	movs	r3, #192	@ 0xc0
 8001c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c22:	2303      	movs	r3, #3
 8001c24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4823      	ldr	r0, [pc, #140]	@ (8001cc0 <HAL_ADC_MspInit+0x1dc>)
 8001c32:	f001 f8b7 	bl	8002da4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Volt3_3VBis_Pin|Curr3_3Vbis_Pin;
 8001c36:	2303      	movs	r3, #3
 8001c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c42:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c46:	4619      	mov	r1, r3
 8001c48:	481f      	ldr	r0, [pc, #124]	@ (8001cc8 <HAL_ADC_MspInit+0x1e4>)
 8001c4a:	f001 f8ab 	bl	8002da4 <HAL_GPIO_Init>
}
 8001c4e:	e02c      	b.n	8001caa <HAL_ADC_MspInit+0x1c6>
  else if(hadc->Instance==ADC3)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a1d      	ldr	r2, [pc, #116]	@ (8001ccc <HAL_ADC_MspInit+0x1e8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d127      	bne.n	8001caa <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	4b16      	ldr	r3, [pc, #88]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c62:	4a15      	ldr	r2, [pc, #84]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001c64:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c6a:	4b13      	ldr	r3, [pc, #76]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c72:	60fb      	str	r3, [r7, #12]
 8001c74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c86:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb8 <HAL_ADC_MspInit+0x1d4>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	60bb      	str	r3, [r7, #8]
 8001c90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CurrZMPPT_Pin|VoltZMPPT_Pin;
 8001c92:	2306      	movs	r3, #6
 8001c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c96:	2303      	movs	r3, #3
 8001c98:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4806      	ldr	r0, [pc, #24]	@ (8001cc0 <HAL_ADC_MspInit+0x1dc>)
 8001ca6:	f001 f87d 	bl	8002da4 <HAL_GPIO_Init>
}
 8001caa:	bf00      	nop
 8001cac:	3740      	adds	r7, #64	@ 0x40
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	40012000 	.word	0x40012000
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40020800 	.word	0x40020800
 8001cc0:	40020000 	.word	0x40020000
 8001cc4:	40012100 	.word	0x40012100
 8001cc8:	40020400 	.word	0x40020400
 8001ccc:	40012200 	.word	0x40012200

08001cd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08c      	sub	sp, #48	@ 0x30
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd8:	f107 031c 	add.w	r3, r7, #28
 8001cdc:	2200      	movs	r2, #0
 8001cde:	601a      	str	r2, [r3, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	609a      	str	r2, [r3, #8]
 8001ce4:	60da      	str	r2, [r3, #12]
 8001ce6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a42      	ldr	r2, [pc, #264]	@ (8001df8 <HAL_I2C_MspInit+0x128>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d12c      	bne.n	8001d4c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	4b41      	ldr	r3, [pc, #260]	@ (8001dfc <HAL_I2C_MspInit+0x12c>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	4a40      	ldr	r2, [pc, #256]	@ (8001dfc <HAL_I2C_MspInit+0x12c>)
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d02:	4b3e      	ldr	r3, [pc, #248]	@ (8001dfc <HAL_I2C_MspInit+0x12c>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_BMS_Pin|SDA_BMS_Pin;
 8001d0e:	23c0      	movs	r3, #192	@ 0xc0
 8001d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d12:	2312      	movs	r3, #18
 8001d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d1e:	2304      	movs	r3, #4
 8001d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	4619      	mov	r1, r3
 8001d28:	4835      	ldr	r0, [pc, #212]	@ (8001e00 <HAL_I2C_MspInit+0x130>)
 8001d2a:	f001 f83b 	bl	8002da4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
 8001d32:	4b32      	ldr	r3, [pc, #200]	@ (8001dfc <HAL_I2C_MspInit+0x12c>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	4a31      	ldr	r2, [pc, #196]	@ (8001dfc <HAL_I2C_MspInit+0x12c>)
 8001d38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d3e:	4b2f      	ldr	r3, [pc, #188]	@ (8001dfc <HAL_I2C_MspInit+0x12c>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001d4a:	e050      	b.n	8001dee <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a2c      	ldr	r2, [pc, #176]	@ (8001e04 <HAL_I2C_MspInit+0x134>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d14b      	bne.n	8001dee <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	4b28      	ldr	r3, [pc, #160]	@ (8001dfc <HAL_I2C_MspInit+0x12c>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	4a27      	ldr	r2, [pc, #156]	@ (8001dfc <HAL_I2C_MspInit+0x12c>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d66:	4b25      	ldr	r3, [pc, #148]	@ (8001dfc <HAL_I2C_MspInit+0x12c>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b21      	ldr	r3, [pc, #132]	@ (8001dfc <HAL_I2C_MspInit+0x12c>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	4a20      	ldr	r2, [pc, #128]	@ (8001dfc <HAL_I2C_MspInit+0x12c>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d82:	4b1e      	ldr	r3, [pc, #120]	@ (8001dfc <HAL_I2C_MspInit+0x12c>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SDA_Sat_Pin;
 8001d8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d94:	2312      	movs	r3, #18
 8001d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001da0:	2304      	movs	r3, #4
 8001da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SDA_Sat_GPIO_Port, &GPIO_InitStruct);
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	4619      	mov	r1, r3
 8001daa:	4817      	ldr	r0, [pc, #92]	@ (8001e08 <HAL_I2C_MspInit+0x138>)
 8001dac:	f000 fffa 	bl	8002da4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCL_Sat_Pin;
 8001db0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001db6:	2312      	movs	r3, #18
 8001db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SCL_Sat_GPIO_Port, &GPIO_InitStruct);
 8001dc6:	f107 031c 	add.w	r3, r7, #28
 8001dca:	4619      	mov	r1, r3
 8001dcc:	480f      	ldr	r0, [pc, #60]	@ (8001e0c <HAL_I2C_MspInit+0x13c>)
 8001dce:	f000 ffe9 	bl	8002da4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	4b09      	ldr	r3, [pc, #36]	@ (8001dfc <HAL_I2C_MspInit+0x12c>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	4a08      	ldr	r2, [pc, #32]	@ (8001dfc <HAL_I2C_MspInit+0x12c>)
 8001ddc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de2:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <HAL_I2C_MspInit+0x12c>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001dea:	60bb      	str	r3, [r7, #8]
 8001dec:	68bb      	ldr	r3, [r7, #8]
}
 8001dee:	bf00      	nop
 8001df0:	3730      	adds	r7, #48	@ 0x30
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40005400 	.word	0x40005400
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40020400 	.word	0x40020400
 8001e04:	40005c00 	.word	0x40005c00
 8001e08:	40020800 	.word	0x40020800
 8001e0c:	40020000 	.word	0x40020000

08001e10 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b087      	sub	sp, #28
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e20:	d10e      	bne.n	8001e40 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	4b1d      	ldr	r3, [pc, #116]	@ (8001e9c <HAL_TIM_PWM_MspInit+0x8c>)
 8001e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2a:	4a1c      	ldr	r2, [pc, #112]	@ (8001e9c <HAL_TIM_PWM_MspInit+0x8c>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e32:	4b1a      	ldr	r3, [pc, #104]	@ (8001e9c <HAL_TIM_PWM_MspInit+0x8c>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	617b      	str	r3, [r7, #20]
 8001e3c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001e3e:	e026      	b.n	8001e8e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a16      	ldr	r2, [pc, #88]	@ (8001ea0 <HAL_TIM_PWM_MspInit+0x90>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d10e      	bne.n	8001e68 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	4b13      	ldr	r3, [pc, #76]	@ (8001e9c <HAL_TIM_PWM_MspInit+0x8c>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	4a12      	ldr	r2, [pc, #72]	@ (8001e9c <HAL_TIM_PWM_MspInit+0x8c>)
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e5a:	4b10      	ldr	r3, [pc, #64]	@ (8001e9c <HAL_TIM_PWM_MspInit+0x8c>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	f003 0304 	and.w	r3, r3, #4
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]
}
 8001e66:	e012      	b.n	8001e8e <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ea4 <HAL_TIM_PWM_MspInit+0x94>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d10d      	bne.n	8001e8e <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	4b09      	ldr	r3, [pc, #36]	@ (8001e9c <HAL_TIM_PWM_MspInit+0x8c>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7a:	4a08      	ldr	r2, [pc, #32]	@ (8001e9c <HAL_TIM_PWM_MspInit+0x8c>)
 8001e7c:	f043 0308 	orr.w	r3, r3, #8
 8001e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e82:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <HAL_TIM_PWM_MspInit+0x8c>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
}
 8001e8e:	bf00      	nop
 8001e90:	371c      	adds	r7, #28
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40000800 	.word	0x40000800
 8001ea4:	40000c00 	.word	0x40000c00

08001ea8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08a      	sub	sp, #40	@ 0x28
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ec8:	d11e      	bne.n	8001f08 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	4b34      	ldr	r3, [pc, #208]	@ (8001fa0 <HAL_TIM_MspPostInit+0xf8>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	4a33      	ldr	r2, [pc, #204]	@ (8001fa0 <HAL_TIM_MspPostInit+0xf8>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eda:	4b31      	ldr	r3, [pc, #196]	@ (8001fa0 <HAL_TIM_MspPostInit+0xf8>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	613b      	str	r3, [r7, #16]
 8001ee4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = MPPTYControl_Pin;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPPTYControl_GPIO_Port, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	4828      	ldr	r0, [pc, #160]	@ (8001fa4 <HAL_TIM_MspPostInit+0xfc>)
 8001f02:	f000 ff4f 	bl	8002da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001f06:	e047      	b.n	8001f98 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a26      	ldr	r2, [pc, #152]	@ (8001fa8 <HAL_TIM_MspPostInit+0x100>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d11f      	bne.n	8001f52 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	4b22      	ldr	r3, [pc, #136]	@ (8001fa0 <HAL_TIM_MspPostInit+0xf8>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	4a21      	ldr	r2, [pc, #132]	@ (8001fa0 <HAL_TIM_MspPostInit+0xf8>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f22:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa0 <HAL_TIM_MspPostInit+0xf8>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MPPTXControl_Pin;
 8001f2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f40:	2302      	movs	r3, #2
 8001f42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPPTXControl_GPIO_Port, &GPIO_InitStruct);
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4818      	ldr	r0, [pc, #96]	@ (8001fac <HAL_TIM_MspPostInit+0x104>)
 8001f4c:	f000 ff2a 	bl	8002da4 <HAL_GPIO_Init>
}
 8001f50:	e022      	b.n	8001f98 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a16      	ldr	r2, [pc, #88]	@ (8001fb0 <HAL_TIM_MspPostInit+0x108>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d11d      	bne.n	8001f98 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa0 <HAL_TIM_MspPostInit+0xf8>)
 8001f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f64:	4a0e      	ldr	r2, [pc, #56]	@ (8001fa0 <HAL_TIM_MspPostInit+0xf8>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa0 <HAL_TIM_MspPostInit+0xf8>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MPPTZControl_Pin;
 8001f78:	2308      	movs	r3, #8
 8001f7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f84:	2300      	movs	r3, #0
 8001f86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPPTZControl_GPIO_Port, &GPIO_InitStruct);
 8001f8c:	f107 0314 	add.w	r3, r7, #20
 8001f90:	4619      	mov	r1, r3
 8001f92:	4804      	ldr	r0, [pc, #16]	@ (8001fa4 <HAL_TIM_MspPostInit+0xfc>)
 8001f94:	f000 ff06 	bl	8002da4 <HAL_GPIO_Init>
}
 8001f98:	bf00      	nop
 8001f9a:	3728      	adds	r7, #40	@ 0x28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40020000 	.word	0x40020000
 8001fa8:	40000800 	.word	0x40000800
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	40000c00 	.word	0x40000c00

08001fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08a      	sub	sp, #40	@ 0x28
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 0314 	add.w	r3, r7, #20
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a19      	ldr	r2, [pc, #100]	@ (8002038 <HAL_UART_MspInit+0x84>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d12c      	bne.n	8002030 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	613b      	str	r3, [r7, #16]
 8001fda:	4b18      	ldr	r3, [pc, #96]	@ (800203c <HAL_UART_MspInit+0x88>)
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	4a17      	ldr	r2, [pc, #92]	@ (800203c <HAL_UART_MspInit+0x88>)
 8001fe0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fe6:	4b15      	ldr	r3, [pc, #84]	@ (800203c <HAL_UART_MspInit+0x88>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001fee:	613b      	str	r3, [r7, #16]
 8001ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	4b11      	ldr	r3, [pc, #68]	@ (800203c <HAL_UART_MspInit+0x88>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	4a10      	ldr	r2, [pc, #64]	@ (800203c <HAL_UART_MspInit+0x88>)
 8001ffc:	f043 0304 	orr.w	r3, r3, #4
 8002000:	6313      	str	r3, [r2, #48]	@ 0x30
 8002002:	4b0e      	ldr	r3, [pc, #56]	@ (800203c <HAL_UART_MspInit+0x88>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 800200e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002014:	2302      	movs	r3, #2
 8002016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002018:	2300      	movs	r3, #0
 800201a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800201c:	2303      	movs	r3, #3
 800201e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002020:	2308      	movs	r3, #8
 8002022:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002024:	f107 0314 	add.w	r3, r7, #20
 8002028:	4619      	mov	r1, r3
 800202a:	4805      	ldr	r0, [pc, #20]	@ (8002040 <HAL_UART_MspInit+0x8c>)
 800202c:	f000 feba 	bl	8002da4 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8002030:	bf00      	nop
 8002032:	3728      	adds	r7, #40	@ 0x28
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40004c00 	.word	0x40004c00
 800203c:	40023800 	.word	0x40023800
 8002040:	40020800 	.word	0x40020800

08002044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002048:	bf00      	nop
 800204a:	e7fd      	b.n	8002048 <NMI_Handler+0x4>

0800204c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002050:	bf00      	nop
 8002052:	e7fd      	b.n	8002050 <HardFault_Handler+0x4>

08002054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002058:	bf00      	nop
 800205a:	e7fd      	b.n	8002058 <MemManage_Handler+0x4>

0800205c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002060:	bf00      	nop
 8002062:	e7fd      	b.n	8002060 <BusFault_Handler+0x4>

08002064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002068:	bf00      	nop
 800206a:	e7fd      	b.n	8002068 <UsageFault_Handler+0x4>

0800206c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800209a:	f000 f961 	bl	8002360 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
	...

080020a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80020a8:	4802      	ldr	r0, [pc, #8]	@ (80020b4 <OTG_FS_IRQHandler+0x10>)
 80020aa:	f001 fab9 	bl	8003620 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020ae:	bf00      	nop
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	20001ac4 	.word	0x20001ac4

080020b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return 1;
 80020bc:	2301      	movs	r3, #1
}
 80020be:	4618      	mov	r0, r3
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <_kill>:

int _kill(int pid, int sig)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020d2:	f008 fe43 	bl	800ad5c <__errno>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2216      	movs	r2, #22
 80020da:	601a      	str	r2, [r3, #0]
  return -1;
 80020dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <_exit>:

void _exit (int status)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020f0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff ffe7 	bl	80020c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020fa:	bf00      	nop
 80020fc:	e7fd      	b.n	80020fa <_exit+0x12>

080020fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b086      	sub	sp, #24
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	e00a      	b.n	8002126 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002110:	f3af 8000 	nop.w
 8002114:	4601      	mov	r1, r0
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	1c5a      	adds	r2, r3, #1
 800211a:	60ba      	str	r2, [r7, #8]
 800211c:	b2ca      	uxtb	r2, r1
 800211e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	3301      	adds	r3, #1
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	429a      	cmp	r2, r3
 800212c:	dbf0      	blt.n	8002110 <_read+0x12>
  }

  return len;
 800212e:	687b      	ldr	r3, [r7, #4]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	e009      	b.n	800215e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	60ba      	str	r2, [r7, #8]
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	3301      	adds	r3, #1
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	429a      	cmp	r2, r3
 8002164:	dbf1      	blt.n	800214a <_write+0x12>
  }
  return len;
 8002166:	687b      	ldr	r3, [r7, #4]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3718      	adds	r7, #24
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <_close>:

int _close(int file)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002178:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002198:	605a      	str	r2, [r3, #4]
  return 0;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <_isatty>:

int _isatty(int file)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80021b0:	2301      	movs	r3, #1
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021be:	b480      	push	{r7}
 80021c0:	b085      	sub	sp, #20
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	60b9      	str	r1, [r7, #8]
 80021c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3714      	adds	r7, #20
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021e0:	4a14      	ldr	r2, [pc, #80]	@ (8002234 <_sbrk+0x5c>)
 80021e2:	4b15      	ldr	r3, [pc, #84]	@ (8002238 <_sbrk+0x60>)
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021ec:	4b13      	ldr	r3, [pc, #76]	@ (800223c <_sbrk+0x64>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d102      	bne.n	80021fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021f4:	4b11      	ldr	r3, [pc, #68]	@ (800223c <_sbrk+0x64>)
 80021f6:	4a12      	ldr	r2, [pc, #72]	@ (8002240 <_sbrk+0x68>)
 80021f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021fa:	4b10      	ldr	r3, [pc, #64]	@ (800223c <_sbrk+0x64>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	429a      	cmp	r2, r3
 8002206:	d207      	bcs.n	8002218 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002208:	f008 fda8 	bl	800ad5c <__errno>
 800220c:	4603      	mov	r3, r0
 800220e:	220c      	movs	r2, #12
 8002210:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002212:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002216:	e009      	b.n	800222c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002218:	4b08      	ldr	r3, [pc, #32]	@ (800223c <_sbrk+0x64>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800221e:	4b07      	ldr	r3, [pc, #28]	@ (800223c <_sbrk+0x64>)
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4413      	add	r3, r2
 8002226:	4a05      	ldr	r2, [pc, #20]	@ (800223c <_sbrk+0x64>)
 8002228:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800222a:	68fb      	ldr	r3, [r7, #12]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20020000 	.word	0x20020000
 8002238:	00000400 	.word	0x00000400
 800223c:	200005dc 	.word	0x200005dc
 8002240:	20002318 	.word	0x20002318

08002244 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002248:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <SystemInit+0x20>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800224e:	4a05      	ldr	r2, [pc, #20]	@ (8002264 <SystemInit+0x20>)
 8002250:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002254:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	e000ed00 	.word	0xe000ed00

08002268 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002268:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80022a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800226c:	f7ff ffea 	bl	8002244 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002270:	480c      	ldr	r0, [pc, #48]	@ (80022a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002272:	490d      	ldr	r1, [pc, #52]	@ (80022a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002274:	4a0d      	ldr	r2, [pc, #52]	@ (80022ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002276:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002278:	e002      	b.n	8002280 <LoopCopyDataInit>

0800227a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800227a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800227c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800227e:	3304      	adds	r3, #4

08002280 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002280:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002282:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002284:	d3f9      	bcc.n	800227a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002286:	4a0a      	ldr	r2, [pc, #40]	@ (80022b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002288:	4c0a      	ldr	r4, [pc, #40]	@ (80022b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800228c:	e001      	b.n	8002292 <LoopFillZerobss>

0800228e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800228e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002290:	3204      	adds	r2, #4

08002292 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002292:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002294:	d3fb      	bcc.n	800228e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002296:	f008 fd67 	bl	800ad68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800229a:	f7fe fea5 	bl	8000fe8 <main>
  bx  lr    
 800229e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80022a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022a8:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 80022ac:	0800d3e8 	.word	0x0800d3e8
  ldr r2, =_sbss
 80022b0:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 80022b4:	20002314 	.word	0x20002314

080022b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022b8:	e7fe      	b.n	80022b8 <ADC_IRQHandler>
	...

080022bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022c0:	4b0e      	ldr	r3, [pc, #56]	@ (80022fc <HAL_Init+0x40>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a0d      	ldr	r2, [pc, #52]	@ (80022fc <HAL_Init+0x40>)
 80022c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80022ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022cc:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <HAL_Init+0x40>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a0a      	ldr	r2, [pc, #40]	@ (80022fc <HAL_Init+0x40>)
 80022d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80022d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022d8:	4b08      	ldr	r3, [pc, #32]	@ (80022fc <HAL_Init+0x40>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a07      	ldr	r2, [pc, #28]	@ (80022fc <HAL_Init+0x40>)
 80022de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e4:	2003      	movs	r0, #3
 80022e6:	f000 fd1b 	bl	8002d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ea:	200f      	movs	r0, #15
 80022ec:	f000 f808 	bl	8002300 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022f0:	f7ff fbd0 	bl	8001a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023c00 	.word	0x40023c00

08002300 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002308:	4b12      	ldr	r3, [pc, #72]	@ (8002354 <HAL_InitTick+0x54>)
 800230a:	681a      	ldr	r2, [r3, #0]
 800230c:	4b12      	ldr	r3, [pc, #72]	@ (8002358 <HAL_InitTick+0x58>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	4619      	mov	r1, r3
 8002312:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002316:	fbb3 f3f1 	udiv	r3, r3, r1
 800231a:	fbb2 f3f3 	udiv	r3, r2, r3
 800231e:	4618      	mov	r0, r3
 8002320:	f000 fd33 	bl	8002d8a <HAL_SYSTICK_Config>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e00e      	b.n	800234c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2b0f      	cmp	r3, #15
 8002332:	d80a      	bhi.n	800234a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002334:	2200      	movs	r2, #0
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800233c:	f000 fcfb 	bl	8002d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002340:	4a06      	ldr	r2, [pc, #24]	@ (800235c <HAL_InitTick+0x5c>)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	e000      	b.n	800234c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	2000000c 	.word	0x2000000c
 8002358:	20000014 	.word	0x20000014
 800235c:	20000010 	.word	0x20000010

08002360 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002364:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <HAL_IncTick+0x20>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	4b06      	ldr	r3, [pc, #24]	@ (8002384 <HAL_IncTick+0x24>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4413      	add	r3, r2
 8002370:	4a04      	ldr	r2, [pc, #16]	@ (8002384 <HAL_IncTick+0x24>)
 8002372:	6013      	str	r3, [r2, #0]
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	20000014 	.word	0x20000014
 8002384:	200005e0 	.word	0x200005e0

08002388 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return uwTick;
 800238c:	4b03      	ldr	r3, [pc, #12]	@ (800239c <HAL_GetTick+0x14>)
 800238e:	681b      	ldr	r3, [r3, #0]
}
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	200005e0 	.word	0x200005e0

080023a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023a8:	f7ff ffee 	bl	8002388 <HAL_GetTick>
 80023ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80023b8:	d005      	beq.n	80023c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023ba:	4b0a      	ldr	r3, [pc, #40]	@ (80023e4 <HAL_Delay+0x44>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	461a      	mov	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4413      	add	r3, r2
 80023c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023c6:	bf00      	nop
 80023c8:	f7ff ffde 	bl	8002388 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d8f7      	bhi.n	80023c8 <HAL_Delay+0x28>
  {
  }
}
 80023d8:	bf00      	nop
 80023da:	bf00      	nop
 80023dc:	3710      	adds	r7, #16
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	20000014 	.word	0x20000014

080023e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e033      	b.n	8002466 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002402:	2b00      	cmp	r3, #0
 8002404:	d109      	bne.n	800241a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff fb6c 	bl	8001ae4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	f003 0310 	and.w	r3, r3, #16
 8002422:	2b00      	cmp	r3, #0
 8002424:	d118      	bne.n	8002458 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800242e:	f023 0302 	bic.w	r3, r3, #2
 8002432:	f043 0202 	orr.w	r2, r3, #2
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 faa4 	bl	8002988 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244a:	f023 0303 	bic.w	r3, r3, #3
 800244e:	f043 0201 	orr.w	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	641a      	str	r2, [r3, #64]	@ 0x40
 8002456:	e001      	b.n	800245c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002464:	7bfb      	ldrb	r3, [r7, #15]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_ADC_Start+0x1a>
 8002486:	2302      	movs	r3, #2
 8002488:	e0b2      	b.n	80025f0 <HAL_ADC_Start+0x180>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b01      	cmp	r3, #1
 800249e:	d018      	beq.n	80024d2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689a      	ldr	r2, [r3, #8]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80024b0:	4b52      	ldr	r3, [pc, #328]	@ (80025fc <HAL_ADC_Start+0x18c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a52      	ldr	r2, [pc, #328]	@ (8002600 <HAL_ADC_Start+0x190>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	0c9a      	lsrs	r2, r3, #18
 80024bc:	4613      	mov	r3, r2
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	4413      	add	r3, r2
 80024c2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80024c4:	e002      	b.n	80024cc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	3b01      	subs	r3, #1
 80024ca:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f9      	bne.n	80024c6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 0301 	and.w	r3, r3, #1
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d17a      	bne.n	80025d6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024e4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80024e8:	f023 0301 	bic.w	r3, r3, #1
 80024ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d007      	beq.n	8002512 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800250a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002516:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800251a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800251e:	d106      	bne.n	800252e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002524:	f023 0206 	bic.w	r2, r3, #6
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	645a      	str	r2, [r3, #68]	@ 0x44
 800252c:	e002      	b.n	8002534 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800253c:	4b31      	ldr	r3, [pc, #196]	@ (8002604 <HAL_ADC_Start+0x194>)
 800253e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002548:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f003 031f 	and.w	r3, r3, #31
 8002552:	2b00      	cmp	r3, #0
 8002554:	d12a      	bne.n	80025ac <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a2b      	ldr	r2, [pc, #172]	@ (8002608 <HAL_ADC_Start+0x198>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d015      	beq.n	800258c <HAL_ADC_Start+0x11c>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a29      	ldr	r2, [pc, #164]	@ (800260c <HAL_ADC_Start+0x19c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d105      	bne.n	8002576 <HAL_ADC_Start+0x106>
 800256a:	4b26      	ldr	r3, [pc, #152]	@ (8002604 <HAL_ADC_Start+0x194>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f003 031f 	and.w	r3, r3, #31
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a25      	ldr	r2, [pc, #148]	@ (8002610 <HAL_ADC_Start+0x1a0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d136      	bne.n	80025ee <HAL_ADC_Start+0x17e>
 8002580:	4b20      	ldr	r3, [pc, #128]	@ (8002604 <HAL_ADC_Start+0x194>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	2b00      	cmp	r3, #0
 800258a:	d130      	bne.n	80025ee <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d129      	bne.n	80025ee <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	689a      	ldr	r2, [r3, #8]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025a8:	609a      	str	r2, [r3, #8]
 80025aa:	e020      	b.n	80025ee <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a15      	ldr	r2, [pc, #84]	@ (8002608 <HAL_ADC_Start+0x198>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d11b      	bne.n	80025ee <HAL_ADC_Start+0x17e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d114      	bne.n	80025ee <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	689a      	ldr	r2, [r3, #8]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	e00b      	b.n	80025ee <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025da:	f043 0210 	orr.w	r2, r3, #16
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e6:	f043 0201 	orr.w	r2, r3, #1
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	2000000c 	.word	0x2000000c
 8002600:	431bde83 	.word	0x431bde83
 8002604:	40012300 	.word	0x40012300
 8002608:	40012000 	.word	0x40012000
 800260c:	40012100 	.word	0x40012100
 8002610:	40012200 	.word	0x40012200

08002614 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800262c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002630:	d113      	bne.n	800265a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800263c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002640:	d10b      	bne.n	800265a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002646:	f043 0220 	orr.w	r2, r3, #32
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e063      	b.n	8002722 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800265a:	f7ff fe95 	bl	8002388 <HAL_GetTick>
 800265e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002660:	e021      	b.n	80026a6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002668:	d01d      	beq.n	80026a6 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d007      	beq.n	8002680 <HAL_ADC_PollForConversion+0x6c>
 8002670:	f7ff fe8a 	bl	8002388 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	683a      	ldr	r2, [r7, #0]
 800267c:	429a      	cmp	r2, r3
 800267e:	d212      	bcs.n	80026a6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b02      	cmp	r3, #2
 800268c:	d00b      	beq.n	80026a6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002692:	f043 0204 	orr.w	r2, r3, #4
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e03d      	b.n	8002722 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d1d6      	bne.n	8002662 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f06f 0212 	mvn.w	r2, #18
 80026bc:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d123      	bne.n	8002720 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d11f      	bne.n	8002720 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026e6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d006      	beq.n	80026fc <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d111      	bne.n	8002720 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002700:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d105      	bne.n	8002720 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002718:	f043 0201 	orr.w	r2, r3, #1
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800274e:	2300      	movs	r3, #0
 8002750:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_ADC_ConfigChannel+0x1c>
 800275c:	2302      	movs	r3, #2
 800275e:	e105      	b.n	800296c <HAL_ADC_ConfigChannel+0x228>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b09      	cmp	r3, #9
 800276e:	d925      	bls.n	80027bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	68d9      	ldr	r1, [r3, #12]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	4613      	mov	r3, r2
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	4413      	add	r3, r2
 8002784:	3b1e      	subs	r3, #30
 8002786:	2207      	movs	r2, #7
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43da      	mvns	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	400a      	ands	r2, r1
 8002794:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68d9      	ldr	r1, [r3, #12]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	689a      	ldr	r2, [r3, #8]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	4618      	mov	r0, r3
 80027a8:	4603      	mov	r3, r0
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	4403      	add	r3, r0
 80027ae:	3b1e      	subs	r3, #30
 80027b0:	409a      	lsls	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	e022      	b.n	8002802 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6919      	ldr	r1, [r3, #16]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	461a      	mov	r2, r3
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	2207      	movs	r2, #7
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	43da      	mvns	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	400a      	ands	r2, r1
 80027de:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6919      	ldr	r1, [r3, #16]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	4618      	mov	r0, r3
 80027f2:	4603      	mov	r3, r0
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4403      	add	r3, r0
 80027f8:	409a      	lsls	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b06      	cmp	r3, #6
 8002808:	d824      	bhi.n	8002854 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4413      	add	r3, r2
 800281a:	3b05      	subs	r3, #5
 800281c:	221f      	movs	r2, #31
 800281e:	fa02 f303 	lsl.w	r3, r2, r3
 8002822:	43da      	mvns	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	400a      	ands	r2, r1
 800282a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	4618      	mov	r0, r3
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	3b05      	subs	r3, #5
 8002846:	fa00 f203 	lsl.w	r2, r0, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	635a      	str	r2, [r3, #52]	@ 0x34
 8002852:	e04c      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b0c      	cmp	r3, #12
 800285a:	d824      	bhi.n	80028a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4413      	add	r3, r2
 800286c:	3b23      	subs	r3, #35	@ 0x23
 800286e:	221f      	movs	r2, #31
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43da      	mvns	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	400a      	ands	r2, r1
 800287c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	b29b      	uxth	r3, r3
 800288a:	4618      	mov	r0, r3
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	4413      	add	r3, r2
 8002896:	3b23      	subs	r3, #35	@ 0x23
 8002898:	fa00 f203 	lsl.w	r2, r0, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	430a      	orrs	r2, r1
 80028a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80028a4:	e023      	b.n	80028ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	4413      	add	r3, r2
 80028b6:	3b41      	subs	r3, #65	@ 0x41
 80028b8:	221f      	movs	r2, #31
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43da      	mvns	r2, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	400a      	ands	r2, r1
 80028c6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	4618      	mov	r0, r3
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685a      	ldr	r2, [r3, #4]
 80028da:	4613      	mov	r3, r2
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	4413      	add	r3, r2
 80028e0:	3b41      	subs	r3, #65	@ 0x41
 80028e2:	fa00 f203 	lsl.w	r2, r0, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	430a      	orrs	r2, r1
 80028ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028ee:	4b22      	ldr	r3, [pc, #136]	@ (8002978 <HAL_ADC_ConfigChannel+0x234>)
 80028f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a21      	ldr	r2, [pc, #132]	@ (800297c <HAL_ADC_ConfigChannel+0x238>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d109      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x1cc>
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b12      	cmp	r3, #18
 8002902:	d105      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a19      	ldr	r2, [pc, #100]	@ (800297c <HAL_ADC_ConfigChannel+0x238>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d123      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x21e>
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2b10      	cmp	r3, #16
 8002920:	d003      	beq.n	800292a <HAL_ADC_ConfigChannel+0x1e6>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b11      	cmp	r3, #17
 8002928:	d11b      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b10      	cmp	r3, #16
 800293c:	d111      	bne.n	8002962 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800293e:	4b10      	ldr	r3, [pc, #64]	@ (8002980 <HAL_ADC_ConfigChannel+0x23c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a10      	ldr	r2, [pc, #64]	@ (8002984 <HAL_ADC_ConfigChannel+0x240>)
 8002944:	fba2 2303 	umull	r2, r3, r2, r3
 8002948:	0c9a      	lsrs	r2, r3, #18
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002954:	e002      	b.n	800295c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	3b01      	subs	r3, #1
 800295a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f9      	bne.n	8002956 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	40012300 	.word	0x40012300
 800297c:	40012000 	.word	0x40012000
 8002980:	2000000c 	.word	0x2000000c
 8002984:	431bde83 	.word	0x431bde83

08002988 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002990:	4b79      	ldr	r3, [pc, #484]	@ (8002b78 <ADC_Init+0x1f0>)
 8002992:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	431a      	orrs	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	6859      	ldr	r1, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	021a      	lsls	r2, r3, #8
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	430a      	orrs	r2, r1
 80029d0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	685a      	ldr	r2, [r3, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80029e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6859      	ldr	r1, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6899      	ldr	r1, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1a:	4a58      	ldr	r2, [pc, #352]	@ (8002b7c <ADC_Init+0x1f4>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d022      	beq.n	8002a66 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6899      	ldr	r1, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6899      	ldr	r1, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	e00f      	b.n	8002a86 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a84:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0202 	bic.w	r2, r2, #2
 8002a94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6899      	ldr	r1, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	7e1b      	ldrb	r3, [r3, #24]
 8002aa0:	005a      	lsls	r2, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01b      	beq.n	8002aec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ac2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002ad2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6859      	ldr	r1, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	035a      	lsls	r2, r3, #13
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	e007      	b.n	8002afc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002afa:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b0a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	3b01      	subs	r3, #1
 8002b18:	051a      	lsls	r2, r3, #20
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002b30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6899      	ldr	r1, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002b3e:	025a      	lsls	r2, r3, #9
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	430a      	orrs	r2, r1
 8002b46:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6899      	ldr	r1, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	029a      	lsls	r2, r3, #10
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	609a      	str	r2, [r3, #8]
}
 8002b6c:	bf00      	nop
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	40012300 	.word	0x40012300
 8002b7c:	0f000001 	.word	0x0f000001

08002b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b90:	4b0c      	ldr	r3, [pc, #48]	@ (8002bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b96:	68ba      	ldr	r2, [r7, #8]
 8002b98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ba8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bb2:	4a04      	ldr	r2, [pc, #16]	@ (8002bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	60d3      	str	r3, [r2, #12]
}
 8002bb8:	bf00      	nop
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	e000ed00 	.word	0xe000ed00

08002bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bcc:	4b04      	ldr	r3, [pc, #16]	@ (8002be0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	0a1b      	lsrs	r3, r3, #8
 8002bd2:	f003 0307 	and.w	r3, r3, #7
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	4603      	mov	r3, r0
 8002bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	db0b      	blt.n	8002c0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bf6:	79fb      	ldrb	r3, [r7, #7]
 8002bf8:	f003 021f 	and.w	r2, r3, #31
 8002bfc:	4907      	ldr	r1, [pc, #28]	@ (8002c1c <__NVIC_EnableIRQ+0x38>)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	095b      	lsrs	r3, r3, #5
 8002c04:	2001      	movs	r0, #1
 8002c06:	fa00 f202 	lsl.w	r2, r0, r2
 8002c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	e000e100 	.word	0xe000e100

08002c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	6039      	str	r1, [r7, #0]
 8002c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	db0a      	blt.n	8002c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	b2da      	uxtb	r2, r3
 8002c38:	490c      	ldr	r1, [pc, #48]	@ (8002c6c <__NVIC_SetPriority+0x4c>)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	0112      	lsls	r2, r2, #4
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	440b      	add	r3, r1
 8002c44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c48:	e00a      	b.n	8002c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	4908      	ldr	r1, [pc, #32]	@ (8002c70 <__NVIC_SetPriority+0x50>)
 8002c50:	79fb      	ldrb	r3, [r7, #7]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	3b04      	subs	r3, #4
 8002c58:	0112      	lsls	r2, r2, #4
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	761a      	strb	r2, [r3, #24]
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	e000e100 	.word	0xe000e100
 8002c70:	e000ed00 	.word	0xe000ed00

08002c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b089      	sub	sp, #36	@ 0x24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	f1c3 0307 	rsb	r3, r3, #7
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	bf28      	it	cs
 8002c92:	2304      	movcs	r3, #4
 8002c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	2b06      	cmp	r3, #6
 8002c9c:	d902      	bls.n	8002ca4 <NVIC_EncodePriority+0x30>
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3b03      	subs	r3, #3
 8002ca2:	e000      	b.n	8002ca6 <NVIC_EncodePriority+0x32>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	43da      	mvns	r2, r3
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cbc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc6:	43d9      	mvns	r1, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ccc:	4313      	orrs	r3, r2
         );
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	3724      	adds	r7, #36	@ 0x24
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
	...

08002cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cec:	d301      	bcc.n	8002cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e00f      	b.n	8002d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8002d1c <SysTick_Config+0x40>)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cfa:	210f      	movs	r1, #15
 8002cfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d00:	f7ff ff8e 	bl	8002c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d04:	4b05      	ldr	r3, [pc, #20]	@ (8002d1c <SysTick_Config+0x40>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d0a:	4b04      	ldr	r3, [pc, #16]	@ (8002d1c <SysTick_Config+0x40>)
 8002d0c:	2207      	movs	r2, #7
 8002d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	e000e010 	.word	0xe000e010

08002d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b082      	sub	sp, #8
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f7ff ff29 	bl	8002b80 <__NVIC_SetPriorityGrouping>
}
 8002d2e:	bf00      	nop
 8002d30:	3708      	adds	r7, #8
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b086      	sub	sp, #24
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
 8002d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d48:	f7ff ff3e 	bl	8002bc8 <__NVIC_GetPriorityGrouping>
 8002d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	68b9      	ldr	r1, [r7, #8]
 8002d52:	6978      	ldr	r0, [r7, #20]
 8002d54:	f7ff ff8e 	bl	8002c74 <NVIC_EncodePriority>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff5d 	bl	8002c20 <__NVIC_SetPriority>
}
 8002d66:	bf00      	nop
 8002d68:	3718      	adds	r7, #24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	4603      	mov	r3, r0
 8002d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff31 	bl	8002be4 <__NVIC_EnableIRQ>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff ffa2 	bl	8002cdc <SysTick_Config>
 8002d98:	4603      	mov	r3, r0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b089      	sub	sp, #36	@ 0x24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
 8002dbe:	e16b      	b.n	8003098 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	f040 815a 	bne.w	8003092 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d005      	beq.n	8002df6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002df2:	2b02      	cmp	r3, #2
 8002df4:	d130      	bne.n	8002e58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	2203      	movs	r2, #3
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69ba      	ldr	r2, [r7, #24]
 8002e24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	43db      	mvns	r3, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	091b      	lsrs	r3, r3, #4
 8002e42:	f003 0201 	and.w	r2, r3, #1
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0303 	and.w	r3, r3, #3
 8002e60:	2b03      	cmp	r3, #3
 8002e62:	d017      	beq.n	8002e94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	005b      	lsls	r3, r3, #1
 8002e6e:	2203      	movs	r2, #3
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	689a      	ldr	r2, [r3, #8]
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d123      	bne.n	8002ee8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	08da      	lsrs	r2, r3, #3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	3208      	adds	r2, #8
 8002ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	f003 0307 	and.w	r3, r3, #7
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	220f      	movs	r2, #15
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	691a      	ldr	r2, [r3, #16]
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	08da      	lsrs	r2, r3, #3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3208      	adds	r2, #8
 8002ee2:	69b9      	ldr	r1, [r7, #24]
 8002ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	2203      	movs	r2, #3
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	43db      	mvns	r3, r3
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4013      	ands	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 0203 	and.w	r2, r3, #3
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	005b      	lsls	r3, r3, #1
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 80b4 	beq.w	8003092 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	4b60      	ldr	r3, [pc, #384]	@ (80030b0 <HAL_GPIO_Init+0x30c>)
 8002f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f32:	4a5f      	ldr	r2, [pc, #380]	@ (80030b0 <HAL_GPIO_Init+0x30c>)
 8002f34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f38:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f3a:	4b5d      	ldr	r3, [pc, #372]	@ (80030b0 <HAL_GPIO_Init+0x30c>)
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f46:	4a5b      	ldr	r2, [pc, #364]	@ (80030b4 <HAL_GPIO_Init+0x310>)
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	089b      	lsrs	r3, r3, #2
 8002f4c:	3302      	adds	r3, #2
 8002f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	220f      	movs	r2, #15
 8002f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f62:	43db      	mvns	r3, r3
 8002f64:	69ba      	ldr	r2, [r7, #24]
 8002f66:	4013      	ands	r3, r2
 8002f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4a52      	ldr	r2, [pc, #328]	@ (80030b8 <HAL_GPIO_Init+0x314>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d02b      	beq.n	8002fca <HAL_GPIO_Init+0x226>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a51      	ldr	r2, [pc, #324]	@ (80030bc <HAL_GPIO_Init+0x318>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d025      	beq.n	8002fc6 <HAL_GPIO_Init+0x222>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a50      	ldr	r2, [pc, #320]	@ (80030c0 <HAL_GPIO_Init+0x31c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d01f      	beq.n	8002fc2 <HAL_GPIO_Init+0x21e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a4f      	ldr	r2, [pc, #316]	@ (80030c4 <HAL_GPIO_Init+0x320>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d019      	beq.n	8002fbe <HAL_GPIO_Init+0x21a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a4e      	ldr	r2, [pc, #312]	@ (80030c8 <HAL_GPIO_Init+0x324>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d013      	beq.n	8002fba <HAL_GPIO_Init+0x216>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a4d      	ldr	r2, [pc, #308]	@ (80030cc <HAL_GPIO_Init+0x328>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d00d      	beq.n	8002fb6 <HAL_GPIO_Init+0x212>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a4c      	ldr	r2, [pc, #304]	@ (80030d0 <HAL_GPIO_Init+0x32c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d007      	beq.n	8002fb2 <HAL_GPIO_Init+0x20e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a4b      	ldr	r2, [pc, #300]	@ (80030d4 <HAL_GPIO_Init+0x330>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d101      	bne.n	8002fae <HAL_GPIO_Init+0x20a>
 8002faa:	2307      	movs	r3, #7
 8002fac:	e00e      	b.n	8002fcc <HAL_GPIO_Init+0x228>
 8002fae:	2308      	movs	r3, #8
 8002fb0:	e00c      	b.n	8002fcc <HAL_GPIO_Init+0x228>
 8002fb2:	2306      	movs	r3, #6
 8002fb4:	e00a      	b.n	8002fcc <HAL_GPIO_Init+0x228>
 8002fb6:	2305      	movs	r3, #5
 8002fb8:	e008      	b.n	8002fcc <HAL_GPIO_Init+0x228>
 8002fba:	2304      	movs	r3, #4
 8002fbc:	e006      	b.n	8002fcc <HAL_GPIO_Init+0x228>
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e004      	b.n	8002fcc <HAL_GPIO_Init+0x228>
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	e002      	b.n	8002fcc <HAL_GPIO_Init+0x228>
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <HAL_GPIO_Init+0x228>
 8002fca:	2300      	movs	r3, #0
 8002fcc:	69fa      	ldr	r2, [r7, #28]
 8002fce:	f002 0203 	and.w	r2, r2, #3
 8002fd2:	0092      	lsls	r2, r2, #2
 8002fd4:	4093      	lsls	r3, r2
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fdc:	4935      	ldr	r1, [pc, #212]	@ (80030b4 <HAL_GPIO_Init+0x310>)
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	089b      	lsrs	r3, r3, #2
 8002fe2:	3302      	adds	r3, #2
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fea:	4b3b      	ldr	r3, [pc, #236]	@ (80030d8 <HAL_GPIO_Init+0x334>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800300e:	4a32      	ldr	r2, [pc, #200]	@ (80030d8 <HAL_GPIO_Init+0x334>)
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003014:	4b30      	ldr	r3, [pc, #192]	@ (80030d8 <HAL_GPIO_Init+0x334>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d003      	beq.n	8003038 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003038:	4a27      	ldr	r2, [pc, #156]	@ (80030d8 <HAL_GPIO_Init+0x334>)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800303e:	4b26      	ldr	r3, [pc, #152]	@ (80030d8 <HAL_GPIO_Init+0x334>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	43db      	mvns	r3, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4013      	ands	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003062:	4a1d      	ldr	r2, [pc, #116]	@ (80030d8 <HAL_GPIO_Init+0x334>)
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003068:	4b1b      	ldr	r3, [pc, #108]	@ (80030d8 <HAL_GPIO_Init+0x334>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d003      	beq.n	800308c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800308c:	4a12      	ldr	r2, [pc, #72]	@ (80030d8 <HAL_GPIO_Init+0x334>)
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	3301      	adds	r3, #1
 8003096:	61fb      	str	r3, [r7, #28]
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	2b0f      	cmp	r3, #15
 800309c:	f67f ae90 	bls.w	8002dc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030a0:	bf00      	nop
 80030a2:	bf00      	nop
 80030a4:	3724      	adds	r7, #36	@ 0x24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40023800 	.word	0x40023800
 80030b4:	40013800 	.word	0x40013800
 80030b8:	40020000 	.word	0x40020000
 80030bc:	40020400 	.word	0x40020400
 80030c0:	40020800 	.word	0x40020800
 80030c4:	40020c00 	.word	0x40020c00
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40021400 	.word	0x40021400
 80030d0:	40021800 	.word	0x40021800
 80030d4:	40021c00 	.word	0x40021c00
 80030d8:	40013c00 	.word	0x40013c00

080030dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	807b      	strh	r3, [r7, #2]
 80030e8:	4613      	mov	r3, r2
 80030ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030ec:	787b      	ldrb	r3, [r7, #1]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030f2:	887a      	ldrh	r2, [r7, #2]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030f8:	e003      	b.n	8003102 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030fa:	887b      	ldrh	r3, [r7, #2]
 80030fc:	041a      	lsls	r2, r3, #16
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	619a      	str	r2, [r3, #24]
}
 8003102:	bf00      	nop
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
	...

08003110 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e12b      	b.n	800337a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d106      	bne.n	800313c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7fe fdca 	bl	8001cd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2224      	movs	r2, #36	@ 0x24
 8003140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0201 	bic.w	r2, r2, #1
 8003152:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003162:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681a      	ldr	r2, [r3, #0]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003172:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003174:	f001 ffd2 	bl	800511c <HAL_RCC_GetPCLK1Freq>
 8003178:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4a81      	ldr	r2, [pc, #516]	@ (8003384 <HAL_I2C_Init+0x274>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d807      	bhi.n	8003194 <HAL_I2C_Init+0x84>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4a80      	ldr	r2, [pc, #512]	@ (8003388 <HAL_I2C_Init+0x278>)
 8003188:	4293      	cmp	r3, r2
 800318a:	bf94      	ite	ls
 800318c:	2301      	movls	r3, #1
 800318e:	2300      	movhi	r3, #0
 8003190:	b2db      	uxtb	r3, r3
 8003192:	e006      	b.n	80031a2 <HAL_I2C_Init+0x92>
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4a7d      	ldr	r2, [pc, #500]	@ (800338c <HAL_I2C_Init+0x27c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	bf94      	ite	ls
 800319c:	2301      	movls	r3, #1
 800319e:	2300      	movhi	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e0e7      	b.n	800337a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4a78      	ldr	r2, [pc, #480]	@ (8003390 <HAL_I2C_Init+0x280>)
 80031ae:	fba2 2303 	umull	r2, r3, r2, r3
 80031b2:	0c9b      	lsrs	r3, r3, #18
 80031b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6a1b      	ldr	r3, [r3, #32]
 80031d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	4a6a      	ldr	r2, [pc, #424]	@ (8003384 <HAL_I2C_Init+0x274>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d802      	bhi.n	80031e4 <HAL_I2C_Init+0xd4>
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	3301      	adds	r3, #1
 80031e2:	e009      	b.n	80031f8 <HAL_I2C_Init+0xe8>
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80031ea:	fb02 f303 	mul.w	r3, r2, r3
 80031ee:	4a69      	ldr	r2, [pc, #420]	@ (8003394 <HAL_I2C_Init+0x284>)
 80031f0:	fba2 2303 	umull	r2, r3, r2, r3
 80031f4:	099b      	lsrs	r3, r3, #6
 80031f6:	3301      	adds	r3, #1
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6812      	ldr	r2, [r2, #0]
 80031fc:	430b      	orrs	r3, r1
 80031fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800320a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	495c      	ldr	r1, [pc, #368]	@ (8003384 <HAL_I2C_Init+0x274>)
 8003214:	428b      	cmp	r3, r1
 8003216:	d819      	bhi.n	800324c <HAL_I2C_Init+0x13c>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	1e59      	subs	r1, r3, #1
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	fbb1 f3f3 	udiv	r3, r1, r3
 8003226:	1c59      	adds	r1, r3, #1
 8003228:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800322c:	400b      	ands	r3, r1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <HAL_I2C_Init+0x138>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	1e59      	subs	r1, r3, #1
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003240:	3301      	adds	r3, #1
 8003242:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003246:	e051      	b.n	80032ec <HAL_I2C_Init+0x1dc>
 8003248:	2304      	movs	r3, #4
 800324a:	e04f      	b.n	80032ec <HAL_I2C_Init+0x1dc>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d111      	bne.n	8003278 <HAL_I2C_Init+0x168>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	1e58      	subs	r0, r3, #1
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6859      	ldr	r1, [r3, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	440b      	add	r3, r1
 8003262:	fbb0 f3f3 	udiv	r3, r0, r3
 8003266:	3301      	adds	r3, #1
 8003268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800326c:	2b00      	cmp	r3, #0
 800326e:	bf0c      	ite	eq
 8003270:	2301      	moveq	r3, #1
 8003272:	2300      	movne	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	e012      	b.n	800329e <HAL_I2C_Init+0x18e>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	1e58      	subs	r0, r3, #1
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6859      	ldr	r1, [r3, #4]
 8003280:	460b      	mov	r3, r1
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	0099      	lsls	r1, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	fbb0 f3f3 	udiv	r3, r0, r3
 800328e:	3301      	adds	r3, #1
 8003290:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003294:	2b00      	cmp	r3, #0
 8003296:	bf0c      	ite	eq
 8003298:	2301      	moveq	r3, #1
 800329a:	2300      	movne	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_I2C_Init+0x196>
 80032a2:	2301      	movs	r3, #1
 80032a4:	e022      	b.n	80032ec <HAL_I2C_Init+0x1dc>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10e      	bne.n	80032cc <HAL_I2C_Init+0x1bc>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1e58      	subs	r0, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6859      	ldr	r1, [r3, #4]
 80032b6:	460b      	mov	r3, r1
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	440b      	add	r3, r1
 80032bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80032c0:	3301      	adds	r3, #1
 80032c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80032ca:	e00f      	b.n	80032ec <HAL_I2C_Init+0x1dc>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	1e58      	subs	r0, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6859      	ldr	r1, [r3, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	0099      	lsls	r1, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	fbb0 f3f3 	udiv	r3, r0, r3
 80032e2:	3301      	adds	r3, #1
 80032e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	6809      	ldr	r1, [r1, #0]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69da      	ldr	r2, [r3, #28]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	430a      	orrs	r2, r1
 800330e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800331a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	6911      	ldr	r1, [r2, #16]
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	68d2      	ldr	r2, [r2, #12]
 8003326:	4311      	orrs	r1, r2
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	6812      	ldr	r2, [r2, #0]
 800332c:	430b      	orrs	r3, r1
 800332e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	695a      	ldr	r2, [r3, #20]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	000186a0 	.word	0x000186a0
 8003388:	001e847f 	.word	0x001e847f
 800338c:	003d08ff 	.word	0x003d08ff
 8003390:	431bde83 	.word	0x431bde83
 8003394:	10624dd3 	.word	0x10624dd3

08003398 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af02      	add	r7, sp, #8
 800339e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e101      	b.n	80035ae <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d106      	bne.n	80033ca <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f006 fc6f 	bl	8009ca8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2203      	movs	r2, #3
 80033ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033d8:	d102      	bne.n	80033e0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f003 f8bc 	bl	8006562 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6818      	ldr	r0, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	7c1a      	ldrb	r2, [r3, #16]
 80033f2:	f88d 2000 	strb.w	r2, [sp]
 80033f6:	3304      	adds	r3, #4
 80033f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033fa:	f002 ff9b 	bl	8006334 <USB_CoreInit>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e0ce      	b.n	80035ae <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2100      	movs	r1, #0
 8003416:	4618      	mov	r0, r3
 8003418:	f003 f8b4 	bl	8006584 <USB_SetCurrentMode>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d005      	beq.n	800342e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2202      	movs	r2, #2
 8003426:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e0bf      	b.n	80035ae <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800342e:	2300      	movs	r3, #0
 8003430:	73fb      	strb	r3, [r7, #15]
 8003432:	e04a      	b.n	80034ca <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003434:	7bfa      	ldrb	r2, [r7, #15]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	3315      	adds	r3, #21
 8003444:	2201      	movs	r2, #1
 8003446:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003448:	7bfa      	ldrb	r2, [r7, #15]
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	3314      	adds	r3, #20
 8003458:	7bfa      	ldrb	r2, [r7, #15]
 800345a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800345c:	7bfa      	ldrb	r2, [r7, #15]
 800345e:	7bfb      	ldrb	r3, [r7, #15]
 8003460:	b298      	uxth	r0, r3
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4413      	add	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	332e      	adds	r3, #46	@ 0x2e
 8003470:	4602      	mov	r2, r0
 8003472:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003474:	7bfa      	ldrb	r2, [r7, #15]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	4413      	add	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	3318      	adds	r3, #24
 8003484:	2200      	movs	r2, #0
 8003486:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003488:	7bfa      	ldrb	r2, [r7, #15]
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4613      	mov	r3, r2
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	4413      	add	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	440b      	add	r3, r1
 8003496:	331c      	adds	r3, #28
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800349c:	7bfa      	ldrb	r2, [r7, #15]
 800349e:	6879      	ldr	r1, [r7, #4]
 80034a0:	4613      	mov	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4413      	add	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	440b      	add	r3, r1
 80034aa:	3320      	adds	r3, #32
 80034ac:	2200      	movs	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80034b0:	7bfa      	ldrb	r2, [r7, #15]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	4413      	add	r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	3324      	adds	r3, #36	@ 0x24
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034c4:	7bfb      	ldrb	r3, [r7, #15]
 80034c6:	3301      	adds	r3, #1
 80034c8:	73fb      	strb	r3, [r7, #15]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	791b      	ldrb	r3, [r3, #4]
 80034ce:	7bfa      	ldrb	r2, [r7, #15]
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d3af      	bcc.n	8003434 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034d4:	2300      	movs	r3, #0
 80034d6:	73fb      	strb	r3, [r7, #15]
 80034d8:	e044      	b.n	8003564 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80034da:	7bfa      	ldrb	r2, [r7, #15]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80034ec:	2200      	movs	r2, #0
 80034ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80034f0:	7bfa      	ldrb	r2, [r7, #15]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003502:	7bfa      	ldrb	r2, [r7, #15]
 8003504:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003506:	7bfa      	ldrb	r2, [r7, #15]
 8003508:	6879      	ldr	r1, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	440b      	add	r3, r1
 8003514:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800351c:	7bfa      	ldrb	r2, [r7, #15]
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800352e:	2200      	movs	r2, #0
 8003530:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003532:	7bfa      	ldrb	r2, [r7, #15]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003548:	7bfa      	ldrb	r2, [r7, #15]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4413      	add	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	3301      	adds	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	791b      	ldrb	r3, [r3, #4]
 8003568:	7bfa      	ldrb	r2, [r7, #15]
 800356a:	429a      	cmp	r2, r3
 800356c:	d3b5      	bcc.n	80034da <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6818      	ldr	r0, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	7c1a      	ldrb	r2, [r3, #16]
 8003576:	f88d 2000 	strb.w	r2, [sp]
 800357a:	3304      	adds	r3, #4
 800357c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800357e:	f003 f84d 	bl	800661c <USB_DevInit>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2202      	movs	r2, #2
 800358c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e00c      	b.n	80035ae <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f004 f897 	bl	80076da <USB_DevDisconnect>

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d101      	bne.n	80035d2 <HAL_PCD_Start+0x1c>
 80035ce:	2302      	movs	r3, #2
 80035d0:	e022      	b.n	8003618 <HAL_PCD_Start+0x62>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d105      	bne.n	80035fa <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f002 ff9e 	bl	8006540 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f004 f845 	bl	8007698 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003616:	2300      	movs	r3, #0
}
 8003618:	4618      	mov	r0, r3
 800361a:	3710      	adds	r7, #16
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}

08003620 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003620:	b590      	push	{r4, r7, lr}
 8003622:	b08d      	sub	sp, #52	@ 0x34
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f004 f903 	bl	8007842 <USB_GetMode>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	f040 848c 	bne.w	8003f5c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f004 f867 	bl	800771c <USB_ReadInterrupts>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 8482 	beq.w	8003f5a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	0a1b      	lsrs	r3, r3, #8
 8003660:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f004 f854 	bl	800771c <USB_ReadInterrupts>
 8003674:	4603      	mov	r3, r0
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b02      	cmp	r3, #2
 800367c:	d107      	bne.n	800368e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695a      	ldr	r2, [r3, #20]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f002 0202 	and.w	r2, r2, #2
 800368c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f004 f842 	bl	800771c <USB_ReadInterrupts>
 8003698:	4603      	mov	r3, r0
 800369a:	f003 0310 	and.w	r3, r3, #16
 800369e:	2b10      	cmp	r3, #16
 80036a0:	d161      	bne.n	8003766 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	699a      	ldr	r2, [r3, #24]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0210 	bic.w	r2, r2, #16
 80036b0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	f003 020f 	and.w	r2, r3, #15
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	4413      	add	r3, r2
 80036ce:	3304      	adds	r3, #4
 80036d0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	0c5b      	lsrs	r3, r3, #17
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d124      	bne.n	8003728 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d035      	beq.n	8003756 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	091b      	lsrs	r3, r3, #4
 80036f2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80036f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	461a      	mov	r2, r3
 80036fc:	6a38      	ldr	r0, [r7, #32]
 80036fe:	f003 fe79 	bl	80073f4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	091b      	lsrs	r3, r3, #4
 800370a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800370e:	441a      	add	r2, r3
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	695a      	ldr	r2, [r3, #20]
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003720:	441a      	add	r2, r3
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	615a      	str	r2, [r3, #20]
 8003726:	e016      	b.n	8003756 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	0c5b      	lsrs	r3, r3, #17
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	2b06      	cmp	r3, #6
 8003732:	d110      	bne.n	8003756 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800373a:	2208      	movs	r2, #8
 800373c:	4619      	mov	r1, r3
 800373e:	6a38      	ldr	r0, [r7, #32]
 8003740:	f003 fe58 	bl	80073f4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	695a      	ldr	r2, [r3, #20]
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	091b      	lsrs	r3, r3, #4
 800374c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003750:	441a      	add	r2, r3
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	699a      	ldr	r2, [r3, #24]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f042 0210 	orr.w	r2, r2, #16
 8003764:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f003 ffd6 	bl	800771c <USB_ReadInterrupts>
 8003770:	4603      	mov	r3, r0
 8003772:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003776:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800377a:	f040 80a7 	bne.w	80038cc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f003 ffdb 	bl	8007742 <USB_ReadDevAllOutEpInterrupt>
 800378c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800378e:	e099      	b.n	80038c4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 808e 	beq.w	80038b8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	4611      	mov	r1, r2
 80037a6:	4618      	mov	r0, r3
 80037a8:	f003 ffff 	bl	80077aa <USB_ReadDevOutEPInterrupt>
 80037ac:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f003 0301 	and.w	r3, r3, #1
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00c      	beq.n	80037d2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80037b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037c4:	461a      	mov	r2, r3
 80037c6:	2301      	movs	r3, #1
 80037c8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80037ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fea3 	bl	8004518 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00c      	beq.n	80037f6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80037dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037e8:	461a      	mov	r2, r3
 80037ea:	2308      	movs	r3, #8
 80037ec:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80037ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 ff79 	bl	80046e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f003 0310 	and.w	r3, r3, #16
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800380c:	461a      	mov	r2, r3
 800380e:	2310      	movs	r3, #16
 8003810:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d030      	beq.n	800387e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800381c:	6a3b      	ldr	r3, [r7, #32]
 800381e:	695b      	ldr	r3, [r3, #20]
 8003820:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003824:	2b80      	cmp	r3, #128	@ 0x80
 8003826:	d109      	bne.n	800383c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	69fa      	ldr	r2, [r7, #28]
 8003832:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003836:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800383a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800383c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800383e:	4613      	mov	r3, r2
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	4413      	add	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	4413      	add	r3, r2
 800384e:	3304      	adds	r3, #4
 8003850:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	78db      	ldrb	r3, [r3, #3]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d108      	bne.n	800386c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2200      	movs	r2, #0
 800385e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003862:	b2db      	uxtb	r3, r3
 8003864:	4619      	mov	r1, r3
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f006 fb24 	bl	8009eb4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800386c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	4413      	add	r3, r2
 8003874:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003878:	461a      	mov	r2, r3
 800387a:	2302      	movs	r3, #2
 800387c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b00      	cmp	r3, #0
 8003886:	d008      	beq.n	800389a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	4413      	add	r3, r2
 8003890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003894:	461a      	mov	r2, r3
 8003896:	2320      	movs	r3, #32
 8003898:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d009      	beq.n	80038b8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80038a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038b0:	461a      	mov	r2, r3
 80038b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80038b6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80038b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ba:	3301      	adds	r3, #1
 80038bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80038be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c0:	085b      	lsrs	r3, r3, #1
 80038c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80038c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f47f af62 	bne.w	8003790 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f003 ff23 	bl	800771c <USB_ReadInterrupts>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038e0:	f040 80db 	bne.w	8003a9a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f003 ff44 	bl	8007776 <USB_ReadDevAllInEpInterrupt>
 80038ee:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80038f4:	e0cd      	b.n	8003a92 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80038f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 80c2 	beq.w	8003a86 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	4611      	mov	r1, r2
 800390c:	4618      	mov	r0, r3
 800390e:	f003 ff6a 	bl	80077e6 <USB_ReadDevInEPInterrupt>
 8003912:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d057      	beq.n	80039ce <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800391e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003920:	f003 030f 	and.w	r3, r3, #15
 8003924:	2201      	movs	r2, #1
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003932:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	43db      	mvns	r3, r3
 8003938:	69f9      	ldr	r1, [r7, #28]
 800393a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800393e:	4013      	ands	r3, r2
 8003940:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	4413      	add	r3, r2
 800394a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800394e:	461a      	mov	r2, r3
 8003950:	2301      	movs	r3, #1
 8003952:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	799b      	ldrb	r3, [r3, #6]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d132      	bne.n	80039c2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003960:	4613      	mov	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	3320      	adds	r3, #32
 800396c:	6819      	ldr	r1, [r3, #0]
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003972:	4613      	mov	r3, r2
 8003974:	00db      	lsls	r3, r3, #3
 8003976:	4413      	add	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4403      	add	r3, r0
 800397c:	331c      	adds	r3, #28
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4419      	add	r1, r3
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003986:	4613      	mov	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	4403      	add	r3, r0
 8003990:	3320      	adds	r3, #32
 8003992:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003996:	2b00      	cmp	r3, #0
 8003998:	d113      	bne.n	80039c2 <HAL_PCD_IRQHandler+0x3a2>
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800399e:	4613      	mov	r3, r2
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	4413      	add	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	3324      	adds	r3, #36	@ 0x24
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d108      	bne.n	80039c2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6818      	ldr	r0, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80039ba:	461a      	mov	r2, r3
 80039bc:	2101      	movs	r1, #1
 80039be:	f003 ff71 	bl	80078a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	4619      	mov	r1, r3
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f006 f9ee 	bl	8009daa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d008      	beq.n	80039ea <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80039d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039e4:	461a      	mov	r2, r3
 80039e6:	2308      	movs	r3, #8
 80039e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f003 0310 	and.w	r3, r3, #16
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80039f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f6:	015a      	lsls	r2, r3, #5
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	4413      	add	r3, r2
 80039fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a00:	461a      	mov	r2, r3
 8003a02:	2310      	movs	r3, #16
 8003a04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d008      	beq.n	8003a22 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	2340      	movs	r3, #64	@ 0x40
 8003a20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d023      	beq.n	8003a74 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003a2c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a2e:	6a38      	ldr	r0, [r7, #32]
 8003a30:	f002 ff58 	bl	80068e4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003a34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a36:	4613      	mov	r3, r2
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	3310      	adds	r3, #16
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	4413      	add	r3, r2
 8003a44:	3304      	adds	r3, #4
 8003a46:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	78db      	ldrb	r3, [r3, #3]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d108      	bne.n	8003a62 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2200      	movs	r2, #0
 8003a54:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f006 fa3b 	bl	8009ed8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a6e:	461a      	mov	r2, r3
 8003a70:	2302      	movs	r3, #2
 8003a72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 fcbd 	bl	8004400 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	3301      	adds	r3, #1
 8003a8a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a8e:	085b      	lsrs	r3, r3, #1
 8003a90:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f47f af2e 	bne.w	80038f6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f003 fe3c 	bl	800771c <USB_ReadInterrupts>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003aaa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003aae:	d122      	bne.n	8003af6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	69fa      	ldr	r2, [r7, #28]
 8003aba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003abe:	f023 0301 	bic.w	r3, r3, #1
 8003ac2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d108      	bne.n	8003ae0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 fea3 	bl	8004824 <HAL_PCDEx_LPM_Callback>
 8003ade:	e002      	b.n	8003ae6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f006 f9d9 	bl	8009e98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	695a      	ldr	r2, [r3, #20]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003af4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f003 fe0e 	bl	800771c <USB_ReadInterrupts>
 8003b00:	4603      	mov	r3, r0
 8003b02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b0a:	d112      	bne.n	8003b32 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d102      	bne.n	8003b22 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f006 f995 	bl	8009e4c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695a      	ldr	r2, [r3, #20]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003b30:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f003 fdf0 	bl	800771c <USB_ReadInterrupts>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b46:	f040 80b7 	bne.w	8003cb8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	69fa      	ldr	r2, [r7, #28]
 8003b54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b58:	f023 0301 	bic.w	r3, r3, #1
 8003b5c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	2110      	movs	r1, #16
 8003b64:	4618      	mov	r0, r3
 8003b66:	f002 febd 	bl	80068e4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b6e:	e046      	b.n	8003bfe <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b82:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b86:	015a      	lsls	r2, r3, #5
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b94:	0151      	lsls	r1, r2, #5
 8003b96:	69fa      	ldr	r2, [r7, #28]
 8003b98:	440a      	add	r2, r1
 8003b9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b9e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ba2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003bb6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bba:	015a      	lsls	r2, r3, #5
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bc8:	0151      	lsls	r1, r2, #5
 8003bca:	69fa      	ldr	r2, [r7, #28]
 8003bcc:	440a      	add	r2, r1
 8003bce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003bd2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003bd6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003be8:	0151      	lsls	r1, r2, #5
 8003bea:	69fa      	ldr	r2, [r7, #28]
 8003bec:	440a      	add	r2, r1
 8003bee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003bf2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003bf6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	791b      	ldrb	r3, [r3, #4]
 8003c02:	461a      	mov	r2, r3
 8003c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d3b2      	bcc.n	8003b70 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	69fa      	ldr	r2, [r7, #28]
 8003c14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c18:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003c1c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	7bdb      	ldrb	r3, [r3, #15]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d016      	beq.n	8003c54 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c30:	69fa      	ldr	r2, [r7, #28]
 8003c32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c36:	f043 030b 	orr.w	r3, r3, #11
 8003c3a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c4c:	f043 030b 	orr.w	r3, r3, #11
 8003c50:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c52:	e015      	b.n	8003c80 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c5a:	695b      	ldr	r3, [r3, #20]
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c62:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003c66:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003c6a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	69fa      	ldr	r2, [r7, #28]
 8003c76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c7a:	f043 030b 	orr.w	r3, r3, #11
 8003c7e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69fa      	ldr	r2, [r7, #28]
 8003c8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c8e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003c92:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6818      	ldr	r0, [r3, #0]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f003 fdfe 	bl	80078a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	695a      	ldr	r2, [r3, #20]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003cb6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f003 fd2d 	bl	800771c <USB_ReadInterrupts>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003cc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ccc:	d123      	bne.n	8003d16 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f003 fdc3 	bl	800785e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f002 fe7a 	bl	80069d6 <USB_GetDevSpeed>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681c      	ldr	r4, [r3, #0]
 8003cee:	f001 fa09 	bl	8005104 <HAL_RCC_GetHCLKFreq>
 8003cf2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4620      	mov	r0, r4
 8003cfc:	f002 fb7e 	bl	80063fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f006 f87a 	bl	8009dfa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695a      	ldr	r2, [r3, #20]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003d14:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f003 fcfe 	bl	800771c <USB_ReadInterrupts>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f003 0308 	and.w	r3, r3, #8
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d10a      	bne.n	8003d40 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f006 f857 	bl	8009dde <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695a      	ldr	r2, [r3, #20]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f002 0208 	and.w	r2, r2, #8
 8003d3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f003 fce9 	bl	800771c <USB_ReadInterrupts>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d50:	2b80      	cmp	r3, #128	@ 0x80
 8003d52:	d123      	bne.n	8003d9c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003d54:	6a3b      	ldr	r3, [r7, #32]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d5c:	6a3b      	ldr	r3, [r7, #32]
 8003d5e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d60:	2301      	movs	r3, #1
 8003d62:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d64:	e014      	b.n	8003d90 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003d66:	6879      	ldr	r1, [r7, #4]
 8003d68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	4413      	add	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	440b      	add	r3, r1
 8003d74:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d105      	bne.n	8003d8a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	4619      	mov	r1, r3
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 fb0a 	bl	800439e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	791b      	ldrb	r3, [r3, #4]
 8003d94:	461a      	mov	r2, r3
 8003d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d3e4      	bcc.n	8003d66 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f003 fcbb 	bl	800771c <USB_ReadInterrupts>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003dac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003db0:	d13c      	bne.n	8003e2c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003db2:	2301      	movs	r3, #1
 8003db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003db6:	e02b      	b.n	8003e10 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dcc:	4613      	mov	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	3318      	adds	r3, #24
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d115      	bne.n	8003e0a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003dde:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	da12      	bge.n	8003e0a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	3317      	adds	r3, #23
 8003df4:	2201      	movs	r2, #1
 8003df6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	4619      	mov	r1, r3
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 faca 	bl	800439e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	791b      	ldrb	r3, [r3, #4]
 8003e14:	461a      	mov	r2, r3
 8003e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d3cd      	bcc.n	8003db8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	695a      	ldr	r2, [r3, #20]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003e2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f003 fc73 	bl	800771c <USB_ReadInterrupts>
 8003e36:	4603      	mov	r3, r0
 8003e38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e3c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e40:	d156      	bne.n	8003ef0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e42:	2301      	movs	r3, #1
 8003e44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e46:	e045      	b.n	8003ed4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4a:	015a      	lsls	r2, r3, #5
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	4413      	add	r3, r2
 8003e50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d12e      	bne.n	8003ece <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e70:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	da2b      	bge.n	8003ece <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003e82:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d121      	bne.n	8003ece <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003e8a:	6879      	ldr	r1, [r7, #4]
 8003e8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e8e:	4613      	mov	r3, r2
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	4413      	add	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003ea0:	6a3b      	ldr	r3, [r7, #32]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003ea8:	6a3b      	ldr	r3, [r7, #32]
 8003eaa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10a      	bne.n	8003ece <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	69fa      	ldr	r2, [r7, #28]
 8003ec2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ec6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003eca:	6053      	str	r3, [r2, #4]
            break;
 8003ecc:	e008      	b.n	8003ee0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	791b      	ldrb	r3, [r3, #4]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d3b3      	bcc.n	8003e48 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	695a      	ldr	r2, [r3, #20]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003eee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f003 fc11 	bl	800771c <USB_ReadInterrupts>
 8003efa:	4603      	mov	r3, r0
 8003efc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003f00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f04:	d10a      	bne.n	8003f1c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f005 fff8 	bl	8009efc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	695a      	ldr	r2, [r3, #20]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003f1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f003 fbfb 	bl	800771c <USB_ReadInterrupts>
 8003f26:	4603      	mov	r3, r0
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d115      	bne.n	8003f5c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	f003 0304 	and.w	r3, r3, #4
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d002      	beq.n	8003f48 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f005 ffe8 	bl	8009f18 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6859      	ldr	r1, [r3, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	430a      	orrs	r2, r1
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	e000      	b.n	8003f5c <HAL_PCD_IRQHandler+0x93c>
      return;
 8003f5a:	bf00      	nop
    }
  }
}
 8003f5c:	3734      	adds	r7, #52	@ 0x34
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd90      	pop	{r4, r7, pc}

08003f62 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f62:	b580      	push	{r7, lr}
 8003f64:	b082      	sub	sp, #8
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_PCD_SetAddress+0x1a>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e012      	b.n	8003fa2 <HAL_PCD_SetAddress+0x40>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	78fa      	ldrb	r2, [r7, #3]
 8003f88:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	78fa      	ldrb	r2, [r7, #3]
 8003f90:	4611      	mov	r1, r2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f003 fb5a 	bl	800764c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b084      	sub	sp, #16
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	4608      	mov	r0, r1
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	4603      	mov	r3, r0
 8003fba:	70fb      	strb	r3, [r7, #3]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	803b      	strh	r3, [r7, #0]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003fc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	da0f      	bge.n	8003ff0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	f003 020f 	and.w	r2, r3, #15
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	00db      	lsls	r3, r3, #3
 8003fda:	4413      	add	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	3310      	adds	r3, #16
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3304      	adds	r3, #4
 8003fe6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2201      	movs	r2, #1
 8003fec:	705a      	strb	r2, [r3, #1]
 8003fee:	e00f      	b.n	8004010 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	f003 020f 	and.w	r2, r3, #15
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	4413      	add	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	4413      	add	r3, r2
 8004006:	3304      	adds	r3, #4
 8004008:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	b2da      	uxtb	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800401c:	883b      	ldrh	r3, [r7, #0]
 800401e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	78ba      	ldrb	r2, [r7, #2]
 800402a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	785b      	ldrb	r3, [r3, #1]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d004      	beq.n	800403e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	461a      	mov	r2, r3
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800403e:	78bb      	ldrb	r3, [r7, #2]
 8004040:	2b02      	cmp	r3, #2
 8004042:	d102      	bne.n	800404a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_PCD_EP_Open+0xae>
 8004054:	2302      	movs	r3, #2
 8004056:	e00e      	b.n	8004076 <HAL_PCD_EP_Open+0xcc>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68f9      	ldr	r1, [r7, #12]
 8004066:	4618      	mov	r0, r3
 8004068:	f002 fcda 	bl	8006a20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004074:	7afb      	ldrb	r3, [r7, #11]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
 8004086:	460b      	mov	r3, r1
 8004088:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800408a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800408e:	2b00      	cmp	r3, #0
 8004090:	da0f      	bge.n	80040b2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004092:	78fb      	ldrb	r3, [r7, #3]
 8004094:	f003 020f 	and.w	r2, r3, #15
 8004098:	4613      	mov	r3, r2
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	4413      	add	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	3310      	adds	r3, #16
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	4413      	add	r3, r2
 80040a6:	3304      	adds	r3, #4
 80040a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	705a      	strb	r2, [r3, #1]
 80040b0:	e00f      	b.n	80040d2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040b2:	78fb      	ldrb	r3, [r7, #3]
 80040b4:	f003 020f 	and.w	r2, r3, #15
 80040b8:	4613      	mov	r3, r2
 80040ba:	00db      	lsls	r3, r3, #3
 80040bc:	4413      	add	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	4413      	add	r3, r2
 80040c8:	3304      	adds	r3, #4
 80040ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80040d2:	78fb      	ldrb	r3, [r7, #3]
 80040d4:	f003 030f 	and.w	r3, r3, #15
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_PCD_EP_Close+0x6e>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e00e      	b.n	800410a <HAL_PCD_EP_Close+0x8c>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68f9      	ldr	r1, [r7, #12]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f002 fd18 	bl	8006b30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3710      	adds	r7, #16
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}

08004112 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b086      	sub	sp, #24
 8004116:	af00      	add	r7, sp, #0
 8004118:	60f8      	str	r0, [r7, #12]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
 800411e:	460b      	mov	r3, r1
 8004120:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004122:	7afb      	ldrb	r3, [r7, #11]
 8004124:	f003 020f 	and.w	r2, r3, #15
 8004128:	4613      	mov	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	4413      	add	r3, r2
 8004138:	3304      	adds	r3, #4
 800413a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	2200      	movs	r2, #0
 800414c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2200      	movs	r2, #0
 8004152:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004154:	7afb      	ldrb	r3, [r7, #11]
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	b2da      	uxtb	r2, r3
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	799b      	ldrb	r3, [r3, #6]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d102      	bne.n	800416e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6818      	ldr	r0, [r3, #0]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	799b      	ldrb	r3, [r3, #6]
 8004176:	461a      	mov	r2, r3
 8004178:	6979      	ldr	r1, [r7, #20]
 800417a:	f002 fdb5 	bl	8006ce8 <USB_EPStartXfer>

  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3718      	adds	r7, #24
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004194:	78fb      	ldrb	r3, [r7, #3]
 8004196:	f003 020f 	and.w	r2, r3, #15
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	4413      	add	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80041aa:	681b      	ldr	r3, [r3, #0]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	607a      	str	r2, [r7, #4]
 80041c2:	603b      	str	r3, [r7, #0]
 80041c4:	460b      	mov	r3, r1
 80041c6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041c8:	7afb      	ldrb	r3, [r7, #11]
 80041ca:	f003 020f 	and.w	r2, r3, #15
 80041ce:	4613      	mov	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	4413      	add	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	3310      	adds	r3, #16
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	4413      	add	r3, r2
 80041dc:	3304      	adds	r3, #4
 80041de:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	2200      	movs	r2, #0
 80041f0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2201      	movs	r2, #1
 80041f6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041f8:	7afb      	ldrb	r3, [r7, #11]
 80041fa:	f003 030f 	and.w	r3, r3, #15
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	799b      	ldrb	r3, [r3, #6]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d102      	bne.n	8004212 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	799b      	ldrb	r3, [r3, #6]
 800421a:	461a      	mov	r2, r3
 800421c:	6979      	ldr	r1, [r7, #20]
 800421e:	f002 fd63 	bl	8006ce8 <USB_EPStartXfer>

  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3718      	adds	r7, #24
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004238:	78fb      	ldrb	r3, [r7, #3]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	7912      	ldrb	r2, [r2, #4]
 8004242:	4293      	cmp	r3, r2
 8004244:	d901      	bls.n	800424a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e04f      	b.n	80042ea <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800424a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800424e:	2b00      	cmp	r3, #0
 8004250:	da0f      	bge.n	8004272 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004252:	78fb      	ldrb	r3, [r7, #3]
 8004254:	f003 020f 	and.w	r2, r3, #15
 8004258:	4613      	mov	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	4413      	add	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	3310      	adds	r3, #16
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	4413      	add	r3, r2
 8004266:	3304      	adds	r3, #4
 8004268:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2201      	movs	r2, #1
 800426e:	705a      	strb	r2, [r3, #1]
 8004270:	e00d      	b.n	800428e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004272:	78fa      	ldrb	r2, [r7, #3]
 8004274:	4613      	mov	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	4413      	add	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	4413      	add	r3, r2
 8004284:	3304      	adds	r3, #4
 8004286:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2201      	movs	r2, #1
 8004292:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	b2da      	uxtb	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_PCD_EP_SetStall+0x82>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e01d      	b.n	80042ea <HAL_PCD_EP_SetStall+0xbe>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68f9      	ldr	r1, [r7, #12]
 80042bc:	4618      	mov	r0, r3
 80042be:	f003 f8f1 	bl	80074a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042c2:	78fb      	ldrb	r3, [r7, #3]
 80042c4:	f003 030f 	and.w	r3, r3, #15
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d109      	bne.n	80042e0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6818      	ldr	r0, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	7999      	ldrb	r1, [r3, #6]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80042da:	461a      	mov	r2, r3
 80042dc:	f003 fae2 	bl	80078a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b084      	sub	sp, #16
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	460b      	mov	r3, r1
 80042fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042fe:	78fb      	ldrb	r3, [r7, #3]
 8004300:	f003 030f 	and.w	r3, r3, #15
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	7912      	ldrb	r2, [r2, #4]
 8004308:	4293      	cmp	r3, r2
 800430a:	d901      	bls.n	8004310 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e042      	b.n	8004396 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004310:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004314:	2b00      	cmp	r3, #0
 8004316:	da0f      	bge.n	8004338 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	f003 020f 	and.w	r2, r3, #15
 800431e:	4613      	mov	r3, r2
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	4413      	add	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	3310      	adds	r3, #16
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	4413      	add	r3, r2
 800432c:	3304      	adds	r3, #4
 800432e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2201      	movs	r2, #1
 8004334:	705a      	strb	r2, [r3, #1]
 8004336:	e00f      	b.n	8004358 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004338:	78fb      	ldrb	r3, [r7, #3]
 800433a:	f003 020f 	and.w	r2, r3, #15
 800433e:	4613      	mov	r3, r2
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	4413      	add	r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	4413      	add	r3, r2
 800434e:	3304      	adds	r3, #4
 8004350:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2200      	movs	r2, #0
 8004356:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2200      	movs	r2, #0
 800435c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800435e:	78fb      	ldrb	r3, [r7, #3]
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	b2da      	uxtb	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004370:	2b01      	cmp	r3, #1
 8004372:	d101      	bne.n	8004378 <HAL_PCD_EP_ClrStall+0x86>
 8004374:	2302      	movs	r3, #2
 8004376:	e00e      	b.n	8004396 <HAL_PCD_EP_ClrStall+0xa4>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68f9      	ldr	r1, [r7, #12]
 8004386:	4618      	mov	r0, r3
 8004388:	f003 f8fa 	bl	8007580 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b084      	sub	sp, #16
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
 80043a6:	460b      	mov	r3, r1
 80043a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80043aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	da0c      	bge.n	80043cc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043b2:	78fb      	ldrb	r3, [r7, #3]
 80043b4:	f003 020f 	and.w	r2, r3, #15
 80043b8:	4613      	mov	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	3310      	adds	r3, #16
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	4413      	add	r3, r2
 80043c6:	3304      	adds	r3, #4
 80043c8:	60fb      	str	r3, [r7, #12]
 80043ca:	e00c      	b.n	80043e6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043cc:	78fb      	ldrb	r3, [r7, #3]
 80043ce:	f003 020f 	and.w	r2, r3, #15
 80043d2:	4613      	mov	r3, r2
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	4413      	add	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	4413      	add	r3, r2
 80043e2:	3304      	adds	r3, #4
 80043e4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68f9      	ldr	r1, [r7, #12]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f002 ff19 	bl	8007224 <USB_EPStopXfer>
 80043f2:	4603      	mov	r3, r0
 80043f4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80043f6:	7afb      	ldrb	r3, [r7, #11]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08a      	sub	sp, #40	@ 0x28
 8004404:	af02      	add	r7, sp, #8
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	4613      	mov	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	4413      	add	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	3310      	adds	r3, #16
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	4413      	add	r3, r2
 8004424:	3304      	adds	r3, #4
 8004426:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	695a      	ldr	r2, [r3, #20]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	429a      	cmp	r2, r3
 8004432:	d901      	bls.n	8004438 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e06b      	b.n	8004510 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	429a      	cmp	r2, r3
 800444c:	d902      	bls.n	8004454 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	3303      	adds	r3, #3
 8004458:	089b      	lsrs	r3, r3, #2
 800445a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800445c:	e02a      	b.n	80044b4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	691a      	ldr	r2, [r3, #16]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	429a      	cmp	r2, r3
 8004472:	d902      	bls.n	800447a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	3303      	adds	r3, #3
 800447e:	089b      	lsrs	r3, r3, #2
 8004480:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	68d9      	ldr	r1, [r3, #12]
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	b2da      	uxtb	r2, r3
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	4603      	mov	r3, r0
 8004496:	6978      	ldr	r0, [r7, #20]
 8004498:	f002 ff6e 	bl	8007378 <USB_WritePacket>

    ep->xfer_buff  += len;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	441a      	add	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	695a      	ldr	r2, [r3, #20]
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	441a      	add	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d809      	bhi.n	80044de <PCD_WriteEmptyTxFifo+0xde>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	695a      	ldr	r2, [r3, #20]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d203      	bcs.n	80044de <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1bf      	bne.n	800445e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	691a      	ldr	r2, [r3, #16]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d811      	bhi.n	800450e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	2201      	movs	r2, #1
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	43db      	mvns	r3, r3
 8004504:	6939      	ldr	r1, [r7, #16]
 8004506:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800450a:	4013      	ands	r3, r2
 800450c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3720      	adds	r7, #32
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b088      	sub	sp, #32
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	333c      	adds	r3, #60	@ 0x3c
 8004530:	3304      	adds	r3, #4
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	799b      	ldrb	r3, [r3, #6]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d17b      	bne.n	8004646 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b00      	cmp	r3, #0
 8004556:	d015      	beq.n	8004584 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	4a61      	ldr	r2, [pc, #388]	@ (80046e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800455c:	4293      	cmp	r3, r2
 800455e:	f240 80b9 	bls.w	80046d4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 80b3 	beq.w	80046d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	015a      	lsls	r2, r3, #5
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	4413      	add	r3, r2
 8004576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800457a:	461a      	mov	r2, r3
 800457c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004580:	6093      	str	r3, [r2, #8]
 8004582:	e0a7      	b.n	80046d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f003 0320 	and.w	r3, r3, #32
 800458a:	2b00      	cmp	r3, #0
 800458c:	d009      	beq.n	80045a2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	015a      	lsls	r2, r3, #5
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	4413      	add	r3, r2
 8004596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800459a:	461a      	mov	r2, r3
 800459c:	2320      	movs	r3, #32
 800459e:	6093      	str	r3, [r2, #8]
 80045a0:	e098      	b.n	80046d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f040 8093 	bne.w	80046d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	4a4b      	ldr	r2, [pc, #300]	@ (80046e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d90f      	bls.n	80045d6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045cc:	461a      	mov	r2, r3
 80045ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045d2:	6093      	str	r3, [r2, #8]
 80045d4:	e07e      	b.n	80046d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80045d6:	683a      	ldr	r2, [r7, #0]
 80045d8:	4613      	mov	r3, r2
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	4413      	add	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	4413      	add	r3, r2
 80045e8:	3304      	adds	r3, #4
 80045ea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a1a      	ldr	r2, [r3, #32]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	0159      	lsls	r1, r3, #5
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	440b      	add	r3, r1
 80045f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004602:	1ad2      	subs	r2, r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d114      	bne.n	8004638 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d109      	bne.n	800462a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6818      	ldr	r0, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004620:	461a      	mov	r2, r3
 8004622:	2101      	movs	r1, #1
 8004624:	f003 f93e 	bl	80078a4 <USB_EP0_OutStart>
 8004628:	e006      	b.n	8004638 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	68da      	ldr	r2, [r3, #12]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	441a      	add	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	b2db      	uxtb	r3, r3
 800463c:	4619      	mov	r1, r3
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f005 fb98 	bl	8009d74 <HAL_PCD_DataOutStageCallback>
 8004644:	e046      	b.n	80046d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	4a26      	ldr	r2, [pc, #152]	@ (80046e4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d124      	bne.n	8004698 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00a      	beq.n	800466e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	015a      	lsls	r2, r3, #5
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	4413      	add	r3, r2
 8004660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004664:	461a      	mov	r2, r3
 8004666:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800466a:	6093      	str	r3, [r2, #8]
 800466c:	e032      	b.n	80046d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	f003 0320 	and.w	r3, r3, #32
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	4413      	add	r3, r2
 8004680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004684:	461a      	mov	r2, r3
 8004686:	2320      	movs	r3, #32
 8004688:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	b2db      	uxtb	r3, r3
 800468e:	4619      	mov	r1, r3
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f005 fb6f 	bl	8009d74 <HAL_PCD_DataOutStageCallback>
 8004696:	e01d      	b.n	80046d4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d114      	bne.n	80046c8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	4613      	mov	r3, r2
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	4413      	add	r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d108      	bne.n	80046c8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6818      	ldr	r0, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046c0:	461a      	mov	r2, r3
 80046c2:	2100      	movs	r1, #0
 80046c4:	f003 f8ee 	bl	80078a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	4619      	mov	r1, r3
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f005 fb50 	bl	8009d74 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3720      	adds	r7, #32
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	4f54300a 	.word	0x4f54300a
 80046e4:	4f54310a 	.word	0x4f54310a

080046e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	333c      	adds	r3, #60	@ 0x3c
 8004700:	3304      	adds	r3, #4
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	4a15      	ldr	r2, [pc, #84]	@ (8004770 <PCD_EP_OutSetupPacket_int+0x88>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d90e      	bls.n	800473c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004724:	2b00      	cmp	r3, #0
 8004726:	d009      	beq.n	800473c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004734:	461a      	mov	r2, r3
 8004736:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800473a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f005 fb07 	bl	8009d50 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4a0a      	ldr	r2, [pc, #40]	@ (8004770 <PCD_EP_OutSetupPacket_int+0x88>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d90c      	bls.n	8004764 <PCD_EP_OutSetupPacket_int+0x7c>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	799b      	ldrb	r3, [r3, #6]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d108      	bne.n	8004764 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800475c:	461a      	mov	r2, r3
 800475e:	2101      	movs	r1, #1
 8004760:	f003 f8a0 	bl	80078a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	4f54300a 	.word	0x4f54300a

08004774 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	460b      	mov	r3, r1
 800477e:	70fb      	strb	r3, [r7, #3]
 8004780:	4613      	mov	r3, r2
 8004782:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d107      	bne.n	80047a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004792:	883b      	ldrh	r3, [r7, #0]
 8004794:	0419      	lsls	r1, r3, #16
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	430a      	orrs	r2, r1
 800479e:	629a      	str	r2, [r3, #40]	@ 0x28
 80047a0:	e028      	b.n	80047f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a8:	0c1b      	lsrs	r3, r3, #16
 80047aa:	68ba      	ldr	r2, [r7, #8]
 80047ac:	4413      	add	r3, r2
 80047ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047b0:	2300      	movs	r3, #0
 80047b2:	73fb      	strb	r3, [r7, #15]
 80047b4:	e00d      	b.n	80047d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	7bfb      	ldrb	r3, [r7, #15]
 80047bc:	3340      	adds	r3, #64	@ 0x40
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	4413      	add	r3, r2
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	0c1b      	lsrs	r3, r3, #16
 80047c6:	68ba      	ldr	r2, [r7, #8]
 80047c8:	4413      	add	r3, r2
 80047ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
 80047ce:	3301      	adds	r3, #1
 80047d0:	73fb      	strb	r3, [r7, #15]
 80047d2:	7bfa      	ldrb	r2, [r7, #15]
 80047d4:	78fb      	ldrb	r3, [r7, #3]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	429a      	cmp	r2, r3
 80047da:	d3ec      	bcc.n	80047b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80047dc:	883b      	ldrh	r3, [r7, #0]
 80047de:	0418      	lsls	r0, r3, #16
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6819      	ldr	r1, [r3, #0]
 80047e4:	78fb      	ldrb	r3, [r7, #3]
 80047e6:	3b01      	subs	r3, #1
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	4302      	orrs	r2, r0
 80047ec:	3340      	adds	r3, #64	@ 0x40
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004800:	4770      	bx	lr

08004802 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004802:	b480      	push	{r7}
 8004804:	b083      	sub	sp, #12
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
 800480a:	460b      	mov	r3, r1
 800480c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	887a      	ldrh	r2, [r7, #2]
 8004814:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004824:	b480      	push	{r7}
 8004826:	b083      	sub	sp, #12
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e267      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d075      	beq.n	8004946 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800485a:	4b88      	ldr	r3, [pc, #544]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	f003 030c 	and.w	r3, r3, #12
 8004862:	2b04      	cmp	r3, #4
 8004864:	d00c      	beq.n	8004880 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004866:	4b85      	ldr	r3, [pc, #532]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800486e:	2b08      	cmp	r3, #8
 8004870:	d112      	bne.n	8004898 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004872:	4b82      	ldr	r3, [pc, #520]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800487a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800487e:	d10b      	bne.n	8004898 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004880:	4b7e      	ldr	r3, [pc, #504]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d05b      	beq.n	8004944 <HAL_RCC_OscConfig+0x108>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d157      	bne.n	8004944 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e242      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048a0:	d106      	bne.n	80048b0 <HAL_RCC_OscConfig+0x74>
 80048a2:	4b76      	ldr	r3, [pc, #472]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a75      	ldr	r2, [pc, #468]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	e01d      	b.n	80048ec <HAL_RCC_OscConfig+0xb0>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048b8:	d10c      	bne.n	80048d4 <HAL_RCC_OscConfig+0x98>
 80048ba:	4b70      	ldr	r3, [pc, #448]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a6f      	ldr	r2, [pc, #444]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	4b6d      	ldr	r3, [pc, #436]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a6c      	ldr	r2, [pc, #432]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	e00b      	b.n	80048ec <HAL_RCC_OscConfig+0xb0>
 80048d4:	4b69      	ldr	r3, [pc, #420]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a68      	ldr	r2, [pc, #416]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	4b66      	ldr	r3, [pc, #408]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a65      	ldr	r2, [pc, #404]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80048e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d013      	beq.n	800491c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f4:	f7fd fd48 	bl	8002388 <HAL_GetTick>
 80048f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048fa:	e008      	b.n	800490e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048fc:	f7fd fd44 	bl	8002388 <HAL_GetTick>
 8004900:	4602      	mov	r2, r0
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	1ad3      	subs	r3, r2, r3
 8004906:	2b64      	cmp	r3, #100	@ 0x64
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e207      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490e:	4b5b      	ldr	r3, [pc, #364]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d0f0      	beq.n	80048fc <HAL_RCC_OscConfig+0xc0>
 800491a:	e014      	b.n	8004946 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800491c:	f7fd fd34 	bl	8002388 <HAL_GetTick>
 8004920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004924:	f7fd fd30 	bl	8002388 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b64      	cmp	r3, #100	@ 0x64
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e1f3      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004936:	4b51      	ldr	r3, [pc, #324]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1f0      	bne.n	8004924 <HAL_RCC_OscConfig+0xe8>
 8004942:	e000      	b.n	8004946 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d063      	beq.n	8004a1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004952:	4b4a      	ldr	r3, [pc, #296]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	f003 030c 	and.w	r3, r3, #12
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00b      	beq.n	8004976 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800495e:	4b47      	ldr	r3, [pc, #284]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004966:	2b08      	cmp	r3, #8
 8004968:	d11c      	bne.n	80049a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800496a:	4b44      	ldr	r3, [pc, #272]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 800496c:	685b      	ldr	r3, [r3, #4]
 800496e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d116      	bne.n	80049a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004976:	4b41      	ldr	r3, [pc, #260]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d005      	beq.n	800498e <HAL_RCC_OscConfig+0x152>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d001      	beq.n	800498e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e1c7      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498e:	4b3b      	ldr	r3, [pc, #236]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	4937      	ldr	r1, [pc, #220]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049a2:	e03a      	b.n	8004a1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d020      	beq.n	80049ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049ac:	4b34      	ldr	r3, [pc, #208]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b2:	f7fd fce9 	bl	8002388 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ba:	f7fd fce5 	bl	8002388 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e1a8      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049cc:	4b2b      	ldr	r3, [pc, #172]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0f0      	beq.n	80049ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d8:	4b28      	ldr	r3, [pc, #160]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	4925      	ldr	r1, [pc, #148]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	600b      	str	r3, [r1, #0]
 80049ec:	e015      	b.n	8004a1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ee:	4b24      	ldr	r3, [pc, #144]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f4:	f7fd fcc8 	bl	8002388 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049fc:	f7fd fcc4 	bl	8002388 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e187      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0302 	and.w	r3, r3, #2
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1f0      	bne.n	80049fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d036      	beq.n	8004a94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	695b      	ldr	r3, [r3, #20]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d016      	beq.n	8004a5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a2e:	4b15      	ldr	r3, [pc, #84]	@ (8004a84 <HAL_RCC_OscConfig+0x248>)
 8004a30:	2201      	movs	r2, #1
 8004a32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a34:	f7fd fca8 	bl	8002388 <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a3a:	e008      	b.n	8004a4e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a3c:	f7fd fca4 	bl	8002388 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d901      	bls.n	8004a4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	e167      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a7c <HAL_RCC_OscConfig+0x240>)
 8004a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a52:	f003 0302 	and.w	r3, r3, #2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0f0      	beq.n	8004a3c <HAL_RCC_OscConfig+0x200>
 8004a5a:	e01b      	b.n	8004a94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a5c:	4b09      	ldr	r3, [pc, #36]	@ (8004a84 <HAL_RCC_OscConfig+0x248>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a62:	f7fd fc91 	bl	8002388 <HAL_GetTick>
 8004a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a68:	e00e      	b.n	8004a88 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a6a:	f7fd fc8d 	bl	8002388 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	d907      	bls.n	8004a88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e150      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
 8004a7c:	40023800 	.word	0x40023800
 8004a80:	42470000 	.word	0x42470000
 8004a84:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a88:	4b88      	ldr	r3, [pc, #544]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004a8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1ea      	bne.n	8004a6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 8097 	beq.w	8004bd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aa6:	4b81      	ldr	r3, [pc, #516]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10f      	bne.n	8004ad2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60bb      	str	r3, [r7, #8]
 8004ab6:	4b7d      	ldr	r3, [pc, #500]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aba:	4a7c      	ldr	r2, [pc, #496]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ac0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004ac2:	4b7a      	ldr	r3, [pc, #488]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aca:	60bb      	str	r3, [r7, #8]
 8004acc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad2:	4b77      	ldr	r3, [pc, #476]	@ (8004cb0 <HAL_RCC_OscConfig+0x474>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d118      	bne.n	8004b10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ade:	4b74      	ldr	r3, [pc, #464]	@ (8004cb0 <HAL_RCC_OscConfig+0x474>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a73      	ldr	r2, [pc, #460]	@ (8004cb0 <HAL_RCC_OscConfig+0x474>)
 8004ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ae8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aea:	f7fd fc4d 	bl	8002388 <HAL_GetTick>
 8004aee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004af2:	f7fd fc49 	bl	8002388 <HAL_GetTick>
 8004af6:	4602      	mov	r2, r0
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e10c      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b04:	4b6a      	ldr	r3, [pc, #424]	@ (8004cb0 <HAL_RCC_OscConfig+0x474>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d106      	bne.n	8004b26 <HAL_RCC_OscConfig+0x2ea>
 8004b18:	4b64      	ldr	r3, [pc, #400]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b1c:	4a63      	ldr	r2, [pc, #396]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b1e:	f043 0301 	orr.w	r3, r3, #1
 8004b22:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b24:	e01c      	b.n	8004b60 <HAL_RCC_OscConfig+0x324>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	2b05      	cmp	r3, #5
 8004b2c:	d10c      	bne.n	8004b48 <HAL_RCC_OscConfig+0x30c>
 8004b2e:	4b5f      	ldr	r3, [pc, #380]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b32:	4a5e      	ldr	r2, [pc, #376]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b34:	f043 0304 	orr.w	r3, r3, #4
 8004b38:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b3a:	4b5c      	ldr	r3, [pc, #368]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b3e:	4a5b      	ldr	r2, [pc, #364]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b40:	f043 0301 	orr.w	r3, r3, #1
 8004b44:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b46:	e00b      	b.n	8004b60 <HAL_RCC_OscConfig+0x324>
 8004b48:	4b58      	ldr	r3, [pc, #352]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b4c:	4a57      	ldr	r2, [pc, #348]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b4e:	f023 0301 	bic.w	r3, r3, #1
 8004b52:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b54:	4b55      	ldr	r3, [pc, #340]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b58:	4a54      	ldr	r2, [pc, #336]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b5a:	f023 0304 	bic.w	r3, r3, #4
 8004b5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d015      	beq.n	8004b94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b68:	f7fd fc0e 	bl	8002388 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b6e:	e00a      	b.n	8004b86 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b70:	f7fd fc0a 	bl	8002388 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e0cb      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b86:	4b49      	ldr	r3, [pc, #292]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b8a:	f003 0302 	and.w	r3, r3, #2
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0ee      	beq.n	8004b70 <HAL_RCC_OscConfig+0x334>
 8004b92:	e014      	b.n	8004bbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b94:	f7fd fbf8 	bl	8002388 <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b9a:	e00a      	b.n	8004bb2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b9c:	f7fd fbf4 	bl	8002388 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e0b5      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bb2:	4b3e      	ldr	r3, [pc, #248]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1ee      	bne.n	8004b9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bbe:	7dfb      	ldrb	r3, [r7, #23]
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d105      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bc4:	4b39      	ldr	r3, [pc, #228]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc8:	4a38      	ldr	r2, [pc, #224]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004bca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 80a1 	beq.w	8004d1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bda:	4b34      	ldr	r3, [pc, #208]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 030c 	and.w	r3, r3, #12
 8004be2:	2b08      	cmp	r3, #8
 8004be4:	d05c      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d141      	bne.n	8004c72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bee:	4b31      	ldr	r3, [pc, #196]	@ (8004cb4 <HAL_RCC_OscConfig+0x478>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf4:	f7fd fbc8 	bl	8002388 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bfc:	f7fd fbc4 	bl	8002388 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b02      	cmp	r3, #2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e087      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c0e:	4b27      	ldr	r3, [pc, #156]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f0      	bne.n	8004bfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69da      	ldr	r2, [r3, #28]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a1b      	ldr	r3, [r3, #32]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c28:	019b      	lsls	r3, r3, #6
 8004c2a:	431a      	orrs	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c30:	085b      	lsrs	r3, r3, #1
 8004c32:	3b01      	subs	r3, #1
 8004c34:	041b      	lsls	r3, r3, #16
 8004c36:	431a      	orrs	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3c:	061b      	lsls	r3, r3, #24
 8004c3e:	491b      	ldr	r1, [pc, #108]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004c40:	4313      	orrs	r3, r2
 8004c42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c44:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb4 <HAL_RCC_OscConfig+0x478>)
 8004c46:	2201      	movs	r2, #1
 8004c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4a:	f7fd fb9d 	bl	8002388 <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c50:	e008      	b.n	8004c64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c52:	f7fd fb99 	bl	8002388 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e05c      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c64:	4b11      	ldr	r3, [pc, #68]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d0f0      	beq.n	8004c52 <HAL_RCC_OscConfig+0x416>
 8004c70:	e054      	b.n	8004d1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c72:	4b10      	ldr	r3, [pc, #64]	@ (8004cb4 <HAL_RCC_OscConfig+0x478>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c78:	f7fd fb86 	bl	8002388 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c80:	f7fd fb82 	bl	8002388 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e045      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c92:	4b06      	ldr	r3, [pc, #24]	@ (8004cac <HAL_RCC_OscConfig+0x470>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1f0      	bne.n	8004c80 <HAL_RCC_OscConfig+0x444>
 8004c9e:	e03d      	b.n	8004d1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d107      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e038      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	40007000 	.word	0x40007000
 8004cb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d28 <HAL_RCC_OscConfig+0x4ec>)
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d028      	beq.n	8004d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d121      	bne.n	8004d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d11a      	bne.n	8004d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ce8:	4013      	ands	r3, r2
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004cee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d111      	bne.n	8004d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfe:	085b      	lsrs	r3, r3, #1
 8004d00:	3b01      	subs	r3, #1
 8004d02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d107      	bne.n	8004d18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d001      	beq.n	8004d1c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	e000      	b.n	8004d1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	40023800 	.word	0x40023800

08004d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0cc      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d40:	4b68      	ldr	r3, [pc, #416]	@ (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d90c      	bls.n	8004d68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d4e:	4b65      	ldr	r3, [pc, #404]	@ (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d56:	4b63      	ldr	r3, [pc, #396]	@ (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d001      	beq.n	8004d68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e0b8      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 0302 	and.w	r3, r3, #2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d020      	beq.n	8004db6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d005      	beq.n	8004d8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d80:	4b59      	ldr	r3, [pc, #356]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	4a58      	ldr	r2, [pc, #352]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d8a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d005      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d98:	4b53      	ldr	r3, [pc, #332]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	4a52      	ldr	r2, [pc, #328]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004da2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004da4:	4b50      	ldr	r3, [pc, #320]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	494d      	ldr	r1, [pc, #308]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d044      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d107      	bne.n	8004dda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dca:	4b47      	ldr	r3, [pc, #284]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d119      	bne.n	8004e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e07f      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d003      	beq.n	8004dea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d107      	bne.n	8004dfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dea:	4b3f      	ldr	r3, [pc, #252]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	e06f      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dfa:	4b3b      	ldr	r3, [pc, #236]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e067      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e0a:	4b37      	ldr	r3, [pc, #220]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f023 0203 	bic.w	r2, r3, #3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	4934      	ldr	r1, [pc, #208]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e1c:	f7fd fab4 	bl	8002388 <HAL_GetTick>
 8004e20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e22:	e00a      	b.n	8004e3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e24:	f7fd fab0 	bl	8002388 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e04f      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e3a:	4b2b      	ldr	r3, [pc, #172]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f003 020c 	and.w	r2, r3, #12
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d1eb      	bne.n	8004e24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e4c:	4b25      	ldr	r3, [pc, #148]	@ (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0307 	and.w	r3, r3, #7
 8004e54:	683a      	ldr	r2, [r7, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d20c      	bcs.n	8004e74 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e5a:	4b22      	ldr	r3, [pc, #136]	@ (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e62:	4b20      	ldr	r3, [pc, #128]	@ (8004ee4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0307 	and.w	r3, r3, #7
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d001      	beq.n	8004e74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e032      	b.n	8004eda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d008      	beq.n	8004e92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e80:	4b19      	ldr	r3, [pc, #100]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	4916      	ldr	r1, [pc, #88]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0308 	and.w	r3, r3, #8
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d009      	beq.n	8004eb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e9e:	4b12      	ldr	r3, [pc, #72]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	490e      	ldr	r1, [pc, #56]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004eb2:	f000 f821 	bl	8004ef8 <HAL_RCC_GetSysClockFreq>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8004ee8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	091b      	lsrs	r3, r3, #4
 8004ebe:	f003 030f 	and.w	r3, r3, #15
 8004ec2:	490a      	ldr	r1, [pc, #40]	@ (8004eec <HAL_RCC_ClockConfig+0x1c0>)
 8004ec4:	5ccb      	ldrb	r3, [r1, r3]
 8004ec6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eca:	4a09      	ldr	r2, [pc, #36]	@ (8004ef0 <HAL_RCC_ClockConfig+0x1c4>)
 8004ecc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004ece:	4b09      	ldr	r3, [pc, #36]	@ (8004ef4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fd fa14 	bl	8002300 <HAL_InitTick>

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40023c00 	.word	0x40023c00
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	0800d050 	.word	0x0800d050
 8004ef0:	2000000c 	.word	0x2000000c
 8004ef4:	20000010 	.word	0x20000010

08004ef8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ef8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004efc:	b094      	sub	sp, #80	@ 0x50
 8004efe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f00:	2300      	movs	r3, #0
 8004f02:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f10:	4b79      	ldr	r3, [pc, #484]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f003 030c 	and.w	r3, r3, #12
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d00d      	beq.n	8004f38 <HAL_RCC_GetSysClockFreq+0x40>
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	f200 80e1 	bhi.w	80050e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <HAL_RCC_GetSysClockFreq+0x34>
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d003      	beq.n	8004f32 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f2a:	e0db      	b.n	80050e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f2c:	4b73      	ldr	r3, [pc, #460]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x204>)
 8004f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f30:	e0db      	b.n	80050ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f32:	4b73      	ldr	r3, [pc, #460]	@ (8005100 <HAL_RCC_GetSysClockFreq+0x208>)
 8004f34:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f36:	e0d8      	b.n	80050ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f38:	4b6f      	ldr	r3, [pc, #444]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f40:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f42:	4b6d      	ldr	r3, [pc, #436]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d063      	beq.n	8005016 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f4e:	4b6a      	ldr	r3, [pc, #424]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	099b      	lsrs	r3, r3, #6
 8004f54:	2200      	movs	r2, #0
 8004f56:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f58:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f60:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f62:	2300      	movs	r3, #0
 8004f64:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f66:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004f6a:	4622      	mov	r2, r4
 8004f6c:	462b      	mov	r3, r5
 8004f6e:	f04f 0000 	mov.w	r0, #0
 8004f72:	f04f 0100 	mov.w	r1, #0
 8004f76:	0159      	lsls	r1, r3, #5
 8004f78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f7c:	0150      	lsls	r0, r2, #5
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4621      	mov	r1, r4
 8004f84:	1a51      	subs	r1, r2, r1
 8004f86:	6139      	str	r1, [r7, #16]
 8004f88:	4629      	mov	r1, r5
 8004f8a:	eb63 0301 	sbc.w	r3, r3, r1
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	f04f 0200 	mov.w	r2, #0
 8004f94:	f04f 0300 	mov.w	r3, #0
 8004f98:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f9c:	4659      	mov	r1, fp
 8004f9e:	018b      	lsls	r3, r1, #6
 8004fa0:	4651      	mov	r1, sl
 8004fa2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fa6:	4651      	mov	r1, sl
 8004fa8:	018a      	lsls	r2, r1, #6
 8004faa:	4651      	mov	r1, sl
 8004fac:	ebb2 0801 	subs.w	r8, r2, r1
 8004fb0:	4659      	mov	r1, fp
 8004fb2:	eb63 0901 	sbc.w	r9, r3, r1
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fca:	4690      	mov	r8, r2
 8004fcc:	4699      	mov	r9, r3
 8004fce:	4623      	mov	r3, r4
 8004fd0:	eb18 0303 	adds.w	r3, r8, r3
 8004fd4:	60bb      	str	r3, [r7, #8]
 8004fd6:	462b      	mov	r3, r5
 8004fd8:	eb49 0303 	adc.w	r3, r9, r3
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fea:	4629      	mov	r1, r5
 8004fec:	024b      	lsls	r3, r1, #9
 8004fee:	4621      	mov	r1, r4
 8004ff0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ff4:	4621      	mov	r1, r4
 8004ff6:	024a      	lsls	r2, r1, #9
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ffe:	2200      	movs	r2, #0
 8005000:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005002:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005004:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005008:	f7fb fdee 	bl	8000be8 <__aeabi_uldivmod>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4613      	mov	r3, r2
 8005012:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005014:	e058      	b.n	80050c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005016:	4b38      	ldr	r3, [pc, #224]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	099b      	lsrs	r3, r3, #6
 800501c:	2200      	movs	r2, #0
 800501e:	4618      	mov	r0, r3
 8005020:	4611      	mov	r1, r2
 8005022:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005026:	623b      	str	r3, [r7, #32]
 8005028:	2300      	movs	r3, #0
 800502a:	627b      	str	r3, [r7, #36]	@ 0x24
 800502c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005030:	4642      	mov	r2, r8
 8005032:	464b      	mov	r3, r9
 8005034:	f04f 0000 	mov.w	r0, #0
 8005038:	f04f 0100 	mov.w	r1, #0
 800503c:	0159      	lsls	r1, r3, #5
 800503e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005042:	0150      	lsls	r0, r2, #5
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4641      	mov	r1, r8
 800504a:	ebb2 0a01 	subs.w	sl, r2, r1
 800504e:	4649      	mov	r1, r9
 8005050:	eb63 0b01 	sbc.w	fp, r3, r1
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	f04f 0300 	mov.w	r3, #0
 800505c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005060:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005064:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005068:	ebb2 040a 	subs.w	r4, r2, sl
 800506c:	eb63 050b 	sbc.w	r5, r3, fp
 8005070:	f04f 0200 	mov.w	r2, #0
 8005074:	f04f 0300 	mov.w	r3, #0
 8005078:	00eb      	lsls	r3, r5, #3
 800507a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800507e:	00e2      	lsls	r2, r4, #3
 8005080:	4614      	mov	r4, r2
 8005082:	461d      	mov	r5, r3
 8005084:	4643      	mov	r3, r8
 8005086:	18e3      	adds	r3, r4, r3
 8005088:	603b      	str	r3, [r7, #0]
 800508a:	464b      	mov	r3, r9
 800508c:	eb45 0303 	adc.w	r3, r5, r3
 8005090:	607b      	str	r3, [r7, #4]
 8005092:	f04f 0200 	mov.w	r2, #0
 8005096:	f04f 0300 	mov.w	r3, #0
 800509a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800509e:	4629      	mov	r1, r5
 80050a0:	028b      	lsls	r3, r1, #10
 80050a2:	4621      	mov	r1, r4
 80050a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050a8:	4621      	mov	r1, r4
 80050aa:	028a      	lsls	r2, r1, #10
 80050ac:	4610      	mov	r0, r2
 80050ae:	4619      	mov	r1, r3
 80050b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050b2:	2200      	movs	r2, #0
 80050b4:	61bb      	str	r3, [r7, #24]
 80050b6:	61fa      	str	r2, [r7, #28]
 80050b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050bc:	f7fb fd94 	bl	8000be8 <__aeabi_uldivmod>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4613      	mov	r3, r2
 80050c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80050c8:	4b0b      	ldr	r3, [pc, #44]	@ (80050f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	0c1b      	lsrs	r3, r3, #16
 80050ce:	f003 0303 	and.w	r3, r3, #3
 80050d2:	3301      	adds	r3, #1
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80050d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050e2:	e002      	b.n	80050ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050e4:	4b05      	ldr	r3, [pc, #20]	@ (80050fc <HAL_RCC_GetSysClockFreq+0x204>)
 80050e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3750      	adds	r7, #80	@ 0x50
 80050f0:	46bd      	mov	sp, r7
 80050f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050f6:	bf00      	nop
 80050f8:	40023800 	.word	0x40023800
 80050fc:	00f42400 	.word	0x00f42400
 8005100:	007a1200 	.word	0x007a1200

08005104 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005108:	4b03      	ldr	r3, [pc, #12]	@ (8005118 <HAL_RCC_GetHCLKFreq+0x14>)
 800510a:	681b      	ldr	r3, [r3, #0]
}
 800510c:	4618      	mov	r0, r3
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	2000000c 	.word	0x2000000c

0800511c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005120:	f7ff fff0 	bl	8005104 <HAL_RCC_GetHCLKFreq>
 8005124:	4602      	mov	r2, r0
 8005126:	4b05      	ldr	r3, [pc, #20]	@ (800513c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	0a9b      	lsrs	r3, r3, #10
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	4903      	ldr	r1, [pc, #12]	@ (8005140 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005132:	5ccb      	ldrb	r3, [r1, r3]
 8005134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005138:	4618      	mov	r0, r3
 800513a:	bd80      	pop	{r7, pc}
 800513c:	40023800 	.word	0x40023800
 8005140:	0800d060 	.word	0x0800d060

08005144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005148:	f7ff ffdc 	bl	8005104 <HAL_RCC_GetHCLKFreq>
 800514c:	4602      	mov	r2, r0
 800514e:	4b05      	ldr	r3, [pc, #20]	@ (8005164 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	0b5b      	lsrs	r3, r3, #13
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	4903      	ldr	r1, [pc, #12]	@ (8005168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800515a:	5ccb      	ldrb	r3, [r1, r3]
 800515c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005160:	4618      	mov	r0, r3
 8005162:	bd80      	pop	{r7, pc}
 8005164:	40023800 	.word	0x40023800
 8005168:	0800d060 	.word	0x0800d060

0800516c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e041      	b.n	8005202 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d106      	bne.n	8005198 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7fc fe3c 	bl	8001e10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3304      	adds	r3, #4
 80051a8:	4619      	mov	r1, r3
 80051aa:	4610      	mov	r0, r2
 80051ac:	f000 f9b8 	bl	8005520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d109      	bne.n	8005230 <HAL_TIM_PWM_Start+0x24>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b01      	cmp	r3, #1
 8005226:	bf14      	ite	ne
 8005228:	2301      	movne	r3, #1
 800522a:	2300      	moveq	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	e022      	b.n	8005276 <HAL_TIM_PWM_Start+0x6a>
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	2b04      	cmp	r3, #4
 8005234:	d109      	bne.n	800524a <HAL_TIM_PWM_Start+0x3e>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b01      	cmp	r3, #1
 8005240:	bf14      	ite	ne
 8005242:	2301      	movne	r3, #1
 8005244:	2300      	moveq	r3, #0
 8005246:	b2db      	uxtb	r3, r3
 8005248:	e015      	b.n	8005276 <HAL_TIM_PWM_Start+0x6a>
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b08      	cmp	r3, #8
 800524e:	d109      	bne.n	8005264 <HAL_TIM_PWM_Start+0x58>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005256:	b2db      	uxtb	r3, r3
 8005258:	2b01      	cmp	r3, #1
 800525a:	bf14      	ite	ne
 800525c:	2301      	movne	r3, #1
 800525e:	2300      	moveq	r3, #0
 8005260:	b2db      	uxtb	r3, r3
 8005262:	e008      	b.n	8005276 <HAL_TIM_PWM_Start+0x6a>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800526a:	b2db      	uxtb	r3, r3
 800526c:	2b01      	cmp	r3, #1
 800526e:	bf14      	ite	ne
 8005270:	2301      	movne	r3, #1
 8005272:	2300      	moveq	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d001      	beq.n	800527e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e07c      	b.n	8005378 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d104      	bne.n	800528e <HAL_TIM_PWM_Start+0x82>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2202      	movs	r2, #2
 8005288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800528c:	e013      	b.n	80052b6 <HAL_TIM_PWM_Start+0xaa>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b04      	cmp	r3, #4
 8005292:	d104      	bne.n	800529e <HAL_TIM_PWM_Start+0x92>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2202      	movs	r2, #2
 8005298:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800529c:	e00b      	b.n	80052b6 <HAL_TIM_PWM_Start+0xaa>
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d104      	bne.n	80052ae <HAL_TIM_PWM_Start+0xa2>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052ac:	e003      	b.n	80052b6 <HAL_TIM_PWM_Start+0xaa>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2202      	movs	r2, #2
 80052b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2201      	movs	r2, #1
 80052bc:	6839      	ldr	r1, [r7, #0]
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fb8a 	bl	80059d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a2d      	ldr	r2, [pc, #180]	@ (8005380 <HAL_TIM_PWM_Start+0x174>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d004      	beq.n	80052d8 <HAL_TIM_PWM_Start+0xcc>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a2c      	ldr	r2, [pc, #176]	@ (8005384 <HAL_TIM_PWM_Start+0x178>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d101      	bne.n	80052dc <HAL_TIM_PWM_Start+0xd0>
 80052d8:	2301      	movs	r3, #1
 80052da:	e000      	b.n	80052de <HAL_TIM_PWM_Start+0xd2>
 80052dc:	2300      	movs	r3, #0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d007      	beq.n	80052f2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a22      	ldr	r2, [pc, #136]	@ (8005380 <HAL_TIM_PWM_Start+0x174>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d022      	beq.n	8005342 <HAL_TIM_PWM_Start+0x136>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005304:	d01d      	beq.n	8005342 <HAL_TIM_PWM_Start+0x136>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a1f      	ldr	r2, [pc, #124]	@ (8005388 <HAL_TIM_PWM_Start+0x17c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d018      	beq.n	8005342 <HAL_TIM_PWM_Start+0x136>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a1d      	ldr	r2, [pc, #116]	@ (800538c <HAL_TIM_PWM_Start+0x180>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d013      	beq.n	8005342 <HAL_TIM_PWM_Start+0x136>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a1c      	ldr	r2, [pc, #112]	@ (8005390 <HAL_TIM_PWM_Start+0x184>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d00e      	beq.n	8005342 <HAL_TIM_PWM_Start+0x136>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a16      	ldr	r2, [pc, #88]	@ (8005384 <HAL_TIM_PWM_Start+0x178>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d009      	beq.n	8005342 <HAL_TIM_PWM_Start+0x136>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a18      	ldr	r2, [pc, #96]	@ (8005394 <HAL_TIM_PWM_Start+0x188>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d004      	beq.n	8005342 <HAL_TIM_PWM_Start+0x136>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a16      	ldr	r2, [pc, #88]	@ (8005398 <HAL_TIM_PWM_Start+0x18c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d111      	bne.n	8005366 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	f003 0307 	and.w	r3, r3, #7
 800534c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b06      	cmp	r3, #6
 8005352:	d010      	beq.n	8005376 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681a      	ldr	r2, [r3, #0]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f042 0201 	orr.w	r2, r2, #1
 8005362:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005364:	e007      	b.n	8005376 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681a      	ldr	r2, [r3, #0]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f042 0201 	orr.w	r2, r2, #1
 8005374:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40010000 	.word	0x40010000
 8005384:	40010400 	.word	0x40010400
 8005388:	40000400 	.word	0x40000400
 800538c:	40000800 	.word	0x40000800
 8005390:	40000c00 	.word	0x40000c00
 8005394:	40014000 	.word	0x40014000
 8005398:	40001800 	.word	0x40001800

0800539c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d101      	bne.n	80053ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053b6:	2302      	movs	r3, #2
 80053b8:	e0ae      	b.n	8005518 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2201      	movs	r2, #1
 80053be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b0c      	cmp	r3, #12
 80053c6:	f200 809f 	bhi.w	8005508 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80053ca:	a201      	add	r2, pc, #4	@ (adr r2, 80053d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d0:	08005405 	.word	0x08005405
 80053d4:	08005509 	.word	0x08005509
 80053d8:	08005509 	.word	0x08005509
 80053dc:	08005509 	.word	0x08005509
 80053e0:	08005445 	.word	0x08005445
 80053e4:	08005509 	.word	0x08005509
 80053e8:	08005509 	.word	0x08005509
 80053ec:	08005509 	.word	0x08005509
 80053f0:	08005487 	.word	0x08005487
 80053f4:	08005509 	.word	0x08005509
 80053f8:	08005509 	.word	0x08005509
 80053fc:	08005509 	.word	0x08005509
 8005400:	080054c7 	.word	0x080054c7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68b9      	ldr	r1, [r7, #8]
 800540a:	4618      	mov	r0, r3
 800540c:	f000 f934 	bl	8005678 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699a      	ldr	r2, [r3, #24]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0208 	orr.w	r2, r2, #8
 800541e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699a      	ldr	r2, [r3, #24]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0204 	bic.w	r2, r2, #4
 800542e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6999      	ldr	r1, [r3, #24]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	691a      	ldr	r2, [r3, #16]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	619a      	str	r2, [r3, #24]
      break;
 8005442:	e064      	b.n	800550e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	4618      	mov	r0, r3
 800544c:	f000 f984 	bl	8005758 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699a      	ldr	r2, [r3, #24]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800545e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800546e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6999      	ldr	r1, [r3, #24]
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	021a      	lsls	r2, r3, #8
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	619a      	str	r2, [r3, #24]
      break;
 8005484:	e043      	b.n	800550e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68b9      	ldr	r1, [r7, #8]
 800548c:	4618      	mov	r0, r3
 800548e:	f000 f9d9 	bl	8005844 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69da      	ldr	r2, [r3, #28]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f042 0208 	orr.w	r2, r2, #8
 80054a0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	69da      	ldr	r2, [r3, #28]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0204 	bic.w	r2, r2, #4
 80054b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	69d9      	ldr	r1, [r3, #28]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	691a      	ldr	r2, [r3, #16]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	61da      	str	r2, [r3, #28]
      break;
 80054c4:	e023      	b.n	800550e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68b9      	ldr	r1, [r7, #8]
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fa2d 	bl	800592c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	69da      	ldr	r2, [r3, #28]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	69da      	ldr	r2, [r3, #28]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69d9      	ldr	r1, [r3, #28]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	021a      	lsls	r2, r3, #8
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	61da      	str	r2, [r3, #28]
      break;
 8005506:	e002      	b.n	800550e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	75fb      	strb	r3, [r7, #23]
      break;
 800550c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005516:	7dfb      	ldrb	r3, [r7, #23]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a46      	ldr	r2, [pc, #280]	@ (800564c <TIM_Base_SetConfig+0x12c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d013      	beq.n	8005560 <TIM_Base_SetConfig+0x40>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800553e:	d00f      	beq.n	8005560 <TIM_Base_SetConfig+0x40>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a43      	ldr	r2, [pc, #268]	@ (8005650 <TIM_Base_SetConfig+0x130>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d00b      	beq.n	8005560 <TIM_Base_SetConfig+0x40>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a42      	ldr	r2, [pc, #264]	@ (8005654 <TIM_Base_SetConfig+0x134>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d007      	beq.n	8005560 <TIM_Base_SetConfig+0x40>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a41      	ldr	r2, [pc, #260]	@ (8005658 <TIM_Base_SetConfig+0x138>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d003      	beq.n	8005560 <TIM_Base_SetConfig+0x40>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a40      	ldr	r2, [pc, #256]	@ (800565c <TIM_Base_SetConfig+0x13c>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d108      	bne.n	8005572 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a35      	ldr	r2, [pc, #212]	@ (800564c <TIM_Base_SetConfig+0x12c>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d02b      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005580:	d027      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a32      	ldr	r2, [pc, #200]	@ (8005650 <TIM_Base_SetConfig+0x130>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d023      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a31      	ldr	r2, [pc, #196]	@ (8005654 <TIM_Base_SetConfig+0x134>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d01f      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a30      	ldr	r2, [pc, #192]	@ (8005658 <TIM_Base_SetConfig+0x138>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d01b      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a2f      	ldr	r2, [pc, #188]	@ (800565c <TIM_Base_SetConfig+0x13c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d017      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a2e      	ldr	r2, [pc, #184]	@ (8005660 <TIM_Base_SetConfig+0x140>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d013      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a2d      	ldr	r2, [pc, #180]	@ (8005664 <TIM_Base_SetConfig+0x144>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00f      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a2c      	ldr	r2, [pc, #176]	@ (8005668 <TIM_Base_SetConfig+0x148>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00b      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a2b      	ldr	r2, [pc, #172]	@ (800566c <TIM_Base_SetConfig+0x14c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d007      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005670 <TIM_Base_SetConfig+0x150>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d003      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a29      	ldr	r2, [pc, #164]	@ (8005674 <TIM_Base_SetConfig+0x154>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d108      	bne.n	80055e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a10      	ldr	r2, [pc, #64]	@ (800564c <TIM_Base_SetConfig+0x12c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d003      	beq.n	8005618 <TIM_Base_SetConfig+0xf8>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a12      	ldr	r2, [pc, #72]	@ (800565c <TIM_Base_SetConfig+0x13c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d103      	bne.n	8005620 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f003 0301 	and.w	r3, r3, #1
 800562e:	2b01      	cmp	r3, #1
 8005630:	d105      	bne.n	800563e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	f023 0201 	bic.w	r2, r3, #1
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	611a      	str	r2, [r3, #16]
  }
}
 800563e:	bf00      	nop
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40010000 	.word	0x40010000
 8005650:	40000400 	.word	0x40000400
 8005654:	40000800 	.word	0x40000800
 8005658:	40000c00 	.word	0x40000c00
 800565c:	40010400 	.word	0x40010400
 8005660:	40014000 	.word	0x40014000
 8005664:	40014400 	.word	0x40014400
 8005668:	40014800 	.word	0x40014800
 800566c:	40001800 	.word	0x40001800
 8005670:	40001c00 	.word	0x40001c00
 8005674:	40002000 	.word	0x40002000

08005678 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005678:	b480      	push	{r7}
 800567a:	b087      	sub	sp, #28
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	f023 0201 	bic.w	r2, r3, #1
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f023 0303 	bic.w	r3, r3, #3
 80056ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f023 0302 	bic.w	r3, r3, #2
 80056c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a20      	ldr	r2, [pc, #128]	@ (8005750 <TIM_OC1_SetConfig+0xd8>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d003      	beq.n	80056dc <TIM_OC1_SetConfig+0x64>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005754 <TIM_OC1_SetConfig+0xdc>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d10c      	bne.n	80056f6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	f023 0308 	bic.w	r3, r3, #8
 80056e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f023 0304 	bic.w	r3, r3, #4
 80056f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a15      	ldr	r2, [pc, #84]	@ (8005750 <TIM_OC1_SetConfig+0xd8>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d003      	beq.n	8005706 <TIM_OC1_SetConfig+0x8e>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a14      	ldr	r2, [pc, #80]	@ (8005754 <TIM_OC1_SetConfig+0xdc>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d111      	bne.n	800572a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800570c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4313      	orrs	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	4313      	orrs	r3, r2
 8005728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	685a      	ldr	r2, [r3, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	697a      	ldr	r2, [r7, #20]
 8005742:	621a      	str	r2, [r3, #32]
}
 8005744:	bf00      	nop
 8005746:	371c      	adds	r7, #28
 8005748:	46bd      	mov	sp, r7
 800574a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574e:	4770      	bx	lr
 8005750:	40010000 	.word	0x40010000
 8005754:	40010400 	.word	0x40010400

08005758 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	f023 0210 	bic.w	r2, r3, #16
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005786:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800578e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	021b      	lsls	r3, r3, #8
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4313      	orrs	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f023 0320 	bic.w	r3, r3, #32
 80057a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a22      	ldr	r2, [pc, #136]	@ (800583c <TIM_OC2_SetConfig+0xe4>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d003      	beq.n	80057c0 <TIM_OC2_SetConfig+0x68>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a21      	ldr	r2, [pc, #132]	@ (8005840 <TIM_OC2_SetConfig+0xe8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d10d      	bne.n	80057dc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a17      	ldr	r2, [pc, #92]	@ (800583c <TIM_OC2_SetConfig+0xe4>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d003      	beq.n	80057ec <TIM_OC2_SetConfig+0x94>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a16      	ldr	r2, [pc, #88]	@ (8005840 <TIM_OC2_SetConfig+0xe8>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d113      	bne.n	8005814 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80057f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	009b      	lsls	r3, r3, #2
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	621a      	str	r2, [r3, #32]
}
 800582e:	bf00      	nop
 8005830:	371c      	adds	r7, #28
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	40010000 	.word	0x40010000
 8005840:	40010400 	.word	0x40010400

08005844 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005872:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0303 	bic.w	r3, r3, #3
 800587a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4313      	orrs	r3, r2
 8005884:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800588c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	021b      	lsls	r3, r3, #8
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	4313      	orrs	r3, r2
 8005898:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	4a21      	ldr	r2, [pc, #132]	@ (8005924 <TIM_OC3_SetConfig+0xe0>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d003      	beq.n	80058aa <TIM_OC3_SetConfig+0x66>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	4a20      	ldr	r2, [pc, #128]	@ (8005928 <TIM_OC3_SetConfig+0xe4>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d10d      	bne.n	80058c6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058b0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	021b      	lsls	r3, r3, #8
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a16      	ldr	r2, [pc, #88]	@ (8005924 <TIM_OC3_SetConfig+0xe0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d003      	beq.n	80058d6 <TIM_OC3_SetConfig+0x92>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a15      	ldr	r2, [pc, #84]	@ (8005928 <TIM_OC3_SetConfig+0xe4>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d113      	bne.n	80058fe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80058dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80058e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	011b      	lsls	r3, r3, #4
 80058ec:	693a      	ldr	r2, [r7, #16]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	011b      	lsls	r3, r3, #4
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	621a      	str	r2, [r3, #32]
}
 8005918:	bf00      	nop
 800591a:	371c      	adds	r7, #28
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	40010000 	.word	0x40010000
 8005928:	40010400 	.word	0x40010400

0800592c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	69db      	ldr	r3, [r3, #28]
 8005952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800595a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	021b      	lsls	r3, r3, #8
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4313      	orrs	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005976:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	031b      	lsls	r3, r3, #12
 800597e:	693a      	ldr	r2, [r7, #16]
 8005980:	4313      	orrs	r3, r2
 8005982:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a12      	ldr	r2, [pc, #72]	@ (80059d0 <TIM_OC4_SetConfig+0xa4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d003      	beq.n	8005994 <TIM_OC4_SetConfig+0x68>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a11      	ldr	r2, [pc, #68]	@ (80059d4 <TIM_OC4_SetConfig+0xa8>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d109      	bne.n	80059a8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800599a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	695b      	ldr	r3, [r3, #20]
 80059a0:	019b      	lsls	r3, r3, #6
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	685a      	ldr	r2, [r3, #4]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	693a      	ldr	r2, [r7, #16]
 80059c0:	621a      	str	r2, [r3, #32]
}
 80059c2:	bf00      	nop
 80059c4:	371c      	adds	r7, #28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr
 80059ce:	bf00      	nop
 80059d0:	40010000 	.word	0x40010000
 80059d4:	40010400 	.word	0x40010400

080059d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059d8:	b480      	push	{r7}
 80059da:	b087      	sub	sp, #28
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	f003 031f 	and.w	r3, r3, #31
 80059ea:	2201      	movs	r2, #1
 80059ec:	fa02 f303 	lsl.w	r3, r2, r3
 80059f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6a1a      	ldr	r2, [r3, #32]
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	43db      	mvns	r3, r3
 80059fa:	401a      	ands	r2, r3
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6a1a      	ldr	r2, [r3, #32]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	f003 031f 	and.w	r3, r3, #31
 8005a0a:	6879      	ldr	r1, [r7, #4]
 8005a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a10:	431a      	orrs	r2, r3
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	621a      	str	r2, [r3, #32]
}
 8005a16:	bf00      	nop
 8005a18:	371c      	adds	r7, #28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
	...

08005a24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d101      	bne.n	8005a3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a38:	2302      	movs	r3, #2
 8005a3a:	e05a      	b.n	8005af2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a21      	ldr	r2, [pc, #132]	@ (8005b00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d022      	beq.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a88:	d01d      	beq.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a1d      	ldr	r2, [pc, #116]	@ (8005b04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d018      	beq.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a1b      	ldr	r2, [pc, #108]	@ (8005b08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d013      	beq.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a1a      	ldr	r2, [pc, #104]	@ (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d00e      	beq.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a18      	ldr	r2, [pc, #96]	@ (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d009      	beq.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a17      	ldr	r2, [pc, #92]	@ (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d004      	beq.n	8005ac6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a15      	ldr	r2, [pc, #84]	@ (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d10c      	bne.n	8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005acc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	68ba      	ldr	r2, [r7, #8]
 8005ade:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2200      	movs	r2, #0
 8005aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40010000 	.word	0x40010000
 8005b04:	40000400 	.word	0x40000400
 8005b08:	40000800 	.word	0x40000800
 8005b0c:	40000c00 	.word	0x40000c00
 8005b10:	40010400 	.word	0x40010400
 8005b14:	40014000 	.word	0x40014000
 8005b18:	40001800 	.word	0x40001800

08005b1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d101      	bne.n	8005b2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e042      	b.n	8005bb4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d106      	bne.n	8005b48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f7fc fa36 	bl	8001fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2224      	movs	r2, #36	@ 0x24
 8005b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f973 	bl	8005e4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	691a      	ldr	r2, [r3, #16]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695a      	ldr	r2, [r3, #20]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68da      	ldr	r2, [r3, #12]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2220      	movs	r2, #32
 8005ba8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3708      	adds	r7, #8
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b08a      	sub	sp, #40	@ 0x28
 8005bc0:	af02      	add	r7, sp, #8
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b20      	cmp	r3, #32
 8005bda:	d175      	bne.n	8005cc8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d002      	beq.n	8005be8 <HAL_UART_Transmit+0x2c>
 8005be2:	88fb      	ldrh	r3, [r7, #6]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e06e      	b.n	8005cca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2221      	movs	r2, #33	@ 0x21
 8005bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bfa:	f7fc fbc5 	bl	8002388 <HAL_GetTick>
 8005bfe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	88fa      	ldrh	r2, [r7, #6]
 8005c04:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	88fa      	ldrh	r2, [r7, #6]
 8005c0a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c14:	d108      	bne.n	8005c28 <HAL_UART_Transmit+0x6c>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d104      	bne.n	8005c28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	61bb      	str	r3, [r7, #24]
 8005c26:	e003      	b.n	8005c30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c30:	e02e      	b.n	8005c90 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	9300      	str	r3, [sp, #0]
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	2180      	movs	r1, #128	@ 0x80
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	f000 f848 	bl	8005cd2 <UART_WaitOnFlagUntilTimeout>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d005      	beq.n	8005c54 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2220      	movs	r2, #32
 8005c4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005c50:	2303      	movs	r3, #3
 8005c52:	e03a      	b.n	8005cca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d10b      	bne.n	8005c72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	881b      	ldrh	r3, [r3, #0]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	3302      	adds	r3, #2
 8005c6e:	61bb      	str	r3, [r7, #24]
 8005c70:	e007      	b.n	8005c82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	781a      	ldrb	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	3b01      	subs	r3, #1
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1cb      	bne.n	8005c32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	9300      	str	r3, [sp, #0]
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	2140      	movs	r1, #64	@ 0x40
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 f814 	bl	8005cd2 <UART_WaitOnFlagUntilTimeout>
 8005caa:	4603      	mov	r3, r0
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d005      	beq.n	8005cbc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2220      	movs	r2, #32
 8005cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e006      	b.n	8005cca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	e000      	b.n	8005cca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005cc8:	2302      	movs	r3, #2
  }
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3720      	adds	r7, #32
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b086      	sub	sp, #24
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	60f8      	str	r0, [r7, #12]
 8005cda:	60b9      	str	r1, [r7, #8]
 8005cdc:	603b      	str	r3, [r7, #0]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ce2:	e03b      	b.n	8005d5c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cea:	d037      	beq.n	8005d5c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cec:	f7fc fb4c 	bl	8002388 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	6a3a      	ldr	r2, [r7, #32]
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d302      	bcc.n	8005d02 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e03a      	b.n	8005d7c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d023      	beq.n	8005d5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	2b80      	cmp	r3, #128	@ 0x80
 8005d18:	d020      	beq.n	8005d5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	2b40      	cmp	r3, #64	@ 0x40
 8005d1e:	d01d      	beq.n	8005d5c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	2b08      	cmp	r3, #8
 8005d2c:	d116      	bne.n	8005d5c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005d2e:	2300      	movs	r3, #0
 8005d30:	617b      	str	r3, [r7, #20]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	617b      	str	r3, [r7, #20]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	617b      	str	r3, [r7, #20]
 8005d42:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 f81d 	bl	8005d84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2208      	movs	r2, #8
 8005d4e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e00f      	b.n	8005d7c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	4013      	ands	r3, r2
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	bf0c      	ite	eq
 8005d6c:	2301      	moveq	r3, #1
 8005d6e:	2300      	movne	r3, #0
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	461a      	mov	r2, r3
 8005d74:	79fb      	ldrb	r3, [r7, #7]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d0b4      	beq.n	8005ce4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3718      	adds	r7, #24
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b095      	sub	sp, #84	@ 0x54
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	330c      	adds	r3, #12
 8005d92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d96:	e853 3f00 	ldrex	r3, [r3]
 8005d9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	330c      	adds	r3, #12
 8005daa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005dac:	643a      	str	r2, [r7, #64]	@ 0x40
 8005dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005db2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005db4:	e841 2300 	strex	r3, r2, [r1]
 8005db8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e5      	bne.n	8005d8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3314      	adds	r3, #20
 8005dc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
 8005dca:	e853 3f00 	ldrex	r3, [r3]
 8005dce:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	f023 0301 	bic.w	r3, r3, #1
 8005dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	3314      	adds	r3, #20
 8005dde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005de0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005de2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005de6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005de8:	e841 2300 	strex	r3, r2, [r1]
 8005dec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1e5      	bne.n	8005dc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d119      	bne.n	8005e30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	330c      	adds	r3, #12
 8005e02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	e853 3f00 	ldrex	r3, [r3]
 8005e0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	f023 0310 	bic.w	r3, r3, #16
 8005e12:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	330c      	adds	r3, #12
 8005e1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e1c:	61ba      	str	r2, [r7, #24]
 8005e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e20:	6979      	ldr	r1, [r7, #20]
 8005e22:	69ba      	ldr	r2, [r7, #24]
 8005e24:	e841 2300 	strex	r3, r2, [r1]
 8005e28:	613b      	str	r3, [r7, #16]
   return(result);
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d1e5      	bne.n	8005dfc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2220      	movs	r2, #32
 8005e34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005e3e:	bf00      	nop
 8005e40:	3754      	adds	r7, #84	@ 0x54
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr
	...

08005e4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e50:	b0c0      	sub	sp, #256	@ 0x100
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e68:	68d9      	ldr	r1, [r3, #12]
 8005e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	ea40 0301 	orr.w	r3, r0, r1
 8005e74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e7a:	689a      	ldr	r2, [r3, #8]
 8005e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	431a      	orrs	r2, r3
 8005e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005ea4:	f021 010c 	bic.w	r1, r1, #12
 8005ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005eb2:	430b      	orrs	r3, r1
 8005eb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	695b      	ldr	r3, [r3, #20]
 8005ebe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec6:	6999      	ldr	r1, [r3, #24]
 8005ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	ea40 0301 	orr.w	r3, r0, r1
 8005ed2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	4b8f      	ldr	r3, [pc, #572]	@ (8006118 <UART_SetConfig+0x2cc>)
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d005      	beq.n	8005eec <UART_SetConfig+0xa0>
 8005ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	4b8d      	ldr	r3, [pc, #564]	@ (800611c <UART_SetConfig+0x2d0>)
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d104      	bne.n	8005ef6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005eec:	f7ff f92a 	bl	8005144 <HAL_RCC_GetPCLK2Freq>
 8005ef0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005ef4:	e003      	b.n	8005efe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ef6:	f7ff f911 	bl	800511c <HAL_RCC_GetPCLK1Freq>
 8005efa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f02:	69db      	ldr	r3, [r3, #28]
 8005f04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f08:	f040 810c 	bne.w	8006124 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f10:	2200      	movs	r2, #0
 8005f12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f16:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005f1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f1e:	4622      	mov	r2, r4
 8005f20:	462b      	mov	r3, r5
 8005f22:	1891      	adds	r1, r2, r2
 8005f24:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005f26:	415b      	adcs	r3, r3
 8005f28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005f2e:	4621      	mov	r1, r4
 8005f30:	eb12 0801 	adds.w	r8, r2, r1
 8005f34:	4629      	mov	r1, r5
 8005f36:	eb43 0901 	adc.w	r9, r3, r1
 8005f3a:	f04f 0200 	mov.w	r2, #0
 8005f3e:	f04f 0300 	mov.w	r3, #0
 8005f42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f4e:	4690      	mov	r8, r2
 8005f50:	4699      	mov	r9, r3
 8005f52:	4623      	mov	r3, r4
 8005f54:	eb18 0303 	adds.w	r3, r8, r3
 8005f58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f5c:	462b      	mov	r3, r5
 8005f5e:	eb49 0303 	adc.w	r3, r9, r3
 8005f62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f72:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005f76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	18db      	adds	r3, r3, r3
 8005f7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f80:	4613      	mov	r3, r2
 8005f82:	eb42 0303 	adc.w	r3, r2, r3
 8005f86:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005f8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005f90:	f7fa fe2a 	bl	8000be8 <__aeabi_uldivmod>
 8005f94:	4602      	mov	r2, r0
 8005f96:	460b      	mov	r3, r1
 8005f98:	4b61      	ldr	r3, [pc, #388]	@ (8006120 <UART_SetConfig+0x2d4>)
 8005f9a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f9e:	095b      	lsrs	r3, r3, #5
 8005fa0:	011c      	lsls	r4, r3, #4
 8005fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005fac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005fb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005fb4:	4642      	mov	r2, r8
 8005fb6:	464b      	mov	r3, r9
 8005fb8:	1891      	adds	r1, r2, r2
 8005fba:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005fbc:	415b      	adcs	r3, r3
 8005fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005fc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005fc4:	4641      	mov	r1, r8
 8005fc6:	eb12 0a01 	adds.w	sl, r2, r1
 8005fca:	4649      	mov	r1, r9
 8005fcc:	eb43 0b01 	adc.w	fp, r3, r1
 8005fd0:	f04f 0200 	mov.w	r2, #0
 8005fd4:	f04f 0300 	mov.w	r3, #0
 8005fd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fe0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fe4:	4692      	mov	sl, r2
 8005fe6:	469b      	mov	fp, r3
 8005fe8:	4643      	mov	r3, r8
 8005fea:	eb1a 0303 	adds.w	r3, sl, r3
 8005fee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ff2:	464b      	mov	r3, r9
 8005ff4:	eb4b 0303 	adc.w	r3, fp, r3
 8005ff8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006008:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800600c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006010:	460b      	mov	r3, r1
 8006012:	18db      	adds	r3, r3, r3
 8006014:	643b      	str	r3, [r7, #64]	@ 0x40
 8006016:	4613      	mov	r3, r2
 8006018:	eb42 0303 	adc.w	r3, r2, r3
 800601c:	647b      	str	r3, [r7, #68]	@ 0x44
 800601e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006022:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006026:	f7fa fddf 	bl	8000be8 <__aeabi_uldivmod>
 800602a:	4602      	mov	r2, r0
 800602c:	460b      	mov	r3, r1
 800602e:	4611      	mov	r1, r2
 8006030:	4b3b      	ldr	r3, [pc, #236]	@ (8006120 <UART_SetConfig+0x2d4>)
 8006032:	fba3 2301 	umull	r2, r3, r3, r1
 8006036:	095b      	lsrs	r3, r3, #5
 8006038:	2264      	movs	r2, #100	@ 0x64
 800603a:	fb02 f303 	mul.w	r3, r2, r3
 800603e:	1acb      	subs	r3, r1, r3
 8006040:	00db      	lsls	r3, r3, #3
 8006042:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006046:	4b36      	ldr	r3, [pc, #216]	@ (8006120 <UART_SetConfig+0x2d4>)
 8006048:	fba3 2302 	umull	r2, r3, r3, r2
 800604c:	095b      	lsrs	r3, r3, #5
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006054:	441c      	add	r4, r3
 8006056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800605a:	2200      	movs	r2, #0
 800605c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006060:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006064:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006068:	4642      	mov	r2, r8
 800606a:	464b      	mov	r3, r9
 800606c:	1891      	adds	r1, r2, r2
 800606e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006070:	415b      	adcs	r3, r3
 8006072:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006074:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006078:	4641      	mov	r1, r8
 800607a:	1851      	adds	r1, r2, r1
 800607c:	6339      	str	r1, [r7, #48]	@ 0x30
 800607e:	4649      	mov	r1, r9
 8006080:	414b      	adcs	r3, r1
 8006082:	637b      	str	r3, [r7, #52]	@ 0x34
 8006084:	f04f 0200 	mov.w	r2, #0
 8006088:	f04f 0300 	mov.w	r3, #0
 800608c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006090:	4659      	mov	r1, fp
 8006092:	00cb      	lsls	r3, r1, #3
 8006094:	4651      	mov	r1, sl
 8006096:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800609a:	4651      	mov	r1, sl
 800609c:	00ca      	lsls	r2, r1, #3
 800609e:	4610      	mov	r0, r2
 80060a0:	4619      	mov	r1, r3
 80060a2:	4603      	mov	r3, r0
 80060a4:	4642      	mov	r2, r8
 80060a6:	189b      	adds	r3, r3, r2
 80060a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060ac:	464b      	mov	r3, r9
 80060ae:	460a      	mov	r2, r1
 80060b0:	eb42 0303 	adc.w	r3, r2, r3
 80060b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80060c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80060c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80060cc:	460b      	mov	r3, r1
 80060ce:	18db      	adds	r3, r3, r3
 80060d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060d2:	4613      	mov	r3, r2
 80060d4:	eb42 0303 	adc.w	r3, r2, r3
 80060d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80060de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80060e2:	f7fa fd81 	bl	8000be8 <__aeabi_uldivmod>
 80060e6:	4602      	mov	r2, r0
 80060e8:	460b      	mov	r3, r1
 80060ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006120 <UART_SetConfig+0x2d4>)
 80060ec:	fba3 1302 	umull	r1, r3, r3, r2
 80060f0:	095b      	lsrs	r3, r3, #5
 80060f2:	2164      	movs	r1, #100	@ 0x64
 80060f4:	fb01 f303 	mul.w	r3, r1, r3
 80060f8:	1ad3      	subs	r3, r2, r3
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	3332      	adds	r3, #50	@ 0x32
 80060fe:	4a08      	ldr	r2, [pc, #32]	@ (8006120 <UART_SetConfig+0x2d4>)
 8006100:	fba2 2303 	umull	r2, r3, r2, r3
 8006104:	095b      	lsrs	r3, r3, #5
 8006106:	f003 0207 	and.w	r2, r3, #7
 800610a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4422      	add	r2, r4
 8006112:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006114:	e106      	b.n	8006324 <UART_SetConfig+0x4d8>
 8006116:	bf00      	nop
 8006118:	40011000 	.word	0x40011000
 800611c:	40011400 	.word	0x40011400
 8006120:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006128:	2200      	movs	r2, #0
 800612a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800612e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006132:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006136:	4642      	mov	r2, r8
 8006138:	464b      	mov	r3, r9
 800613a:	1891      	adds	r1, r2, r2
 800613c:	6239      	str	r1, [r7, #32]
 800613e:	415b      	adcs	r3, r3
 8006140:	627b      	str	r3, [r7, #36]	@ 0x24
 8006142:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006146:	4641      	mov	r1, r8
 8006148:	1854      	adds	r4, r2, r1
 800614a:	4649      	mov	r1, r9
 800614c:	eb43 0501 	adc.w	r5, r3, r1
 8006150:	f04f 0200 	mov.w	r2, #0
 8006154:	f04f 0300 	mov.w	r3, #0
 8006158:	00eb      	lsls	r3, r5, #3
 800615a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800615e:	00e2      	lsls	r2, r4, #3
 8006160:	4614      	mov	r4, r2
 8006162:	461d      	mov	r5, r3
 8006164:	4643      	mov	r3, r8
 8006166:	18e3      	adds	r3, r4, r3
 8006168:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800616c:	464b      	mov	r3, r9
 800616e:	eb45 0303 	adc.w	r3, r5, r3
 8006172:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006182:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006186:	f04f 0200 	mov.w	r2, #0
 800618a:	f04f 0300 	mov.w	r3, #0
 800618e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006192:	4629      	mov	r1, r5
 8006194:	008b      	lsls	r3, r1, #2
 8006196:	4621      	mov	r1, r4
 8006198:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800619c:	4621      	mov	r1, r4
 800619e:	008a      	lsls	r2, r1, #2
 80061a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80061a4:	f7fa fd20 	bl	8000be8 <__aeabi_uldivmod>
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	4b60      	ldr	r3, [pc, #384]	@ (8006330 <UART_SetConfig+0x4e4>)
 80061ae:	fba3 2302 	umull	r2, r3, r3, r2
 80061b2:	095b      	lsrs	r3, r3, #5
 80061b4:	011c      	lsls	r4, r3, #4
 80061b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061ba:	2200      	movs	r2, #0
 80061bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80061c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80061c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80061c8:	4642      	mov	r2, r8
 80061ca:	464b      	mov	r3, r9
 80061cc:	1891      	adds	r1, r2, r2
 80061ce:	61b9      	str	r1, [r7, #24]
 80061d0:	415b      	adcs	r3, r3
 80061d2:	61fb      	str	r3, [r7, #28]
 80061d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061d8:	4641      	mov	r1, r8
 80061da:	1851      	adds	r1, r2, r1
 80061dc:	6139      	str	r1, [r7, #16]
 80061de:	4649      	mov	r1, r9
 80061e0:	414b      	adcs	r3, r1
 80061e2:	617b      	str	r3, [r7, #20]
 80061e4:	f04f 0200 	mov.w	r2, #0
 80061e8:	f04f 0300 	mov.w	r3, #0
 80061ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061f0:	4659      	mov	r1, fp
 80061f2:	00cb      	lsls	r3, r1, #3
 80061f4:	4651      	mov	r1, sl
 80061f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061fa:	4651      	mov	r1, sl
 80061fc:	00ca      	lsls	r2, r1, #3
 80061fe:	4610      	mov	r0, r2
 8006200:	4619      	mov	r1, r3
 8006202:	4603      	mov	r3, r0
 8006204:	4642      	mov	r2, r8
 8006206:	189b      	adds	r3, r3, r2
 8006208:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800620c:	464b      	mov	r3, r9
 800620e:	460a      	mov	r2, r1
 8006210:	eb42 0303 	adc.w	r3, r2, r3
 8006214:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006222:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006224:	f04f 0200 	mov.w	r2, #0
 8006228:	f04f 0300 	mov.w	r3, #0
 800622c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006230:	4649      	mov	r1, r9
 8006232:	008b      	lsls	r3, r1, #2
 8006234:	4641      	mov	r1, r8
 8006236:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800623a:	4641      	mov	r1, r8
 800623c:	008a      	lsls	r2, r1, #2
 800623e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006242:	f7fa fcd1 	bl	8000be8 <__aeabi_uldivmod>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4611      	mov	r1, r2
 800624c:	4b38      	ldr	r3, [pc, #224]	@ (8006330 <UART_SetConfig+0x4e4>)
 800624e:	fba3 2301 	umull	r2, r3, r3, r1
 8006252:	095b      	lsrs	r3, r3, #5
 8006254:	2264      	movs	r2, #100	@ 0x64
 8006256:	fb02 f303 	mul.w	r3, r2, r3
 800625a:	1acb      	subs	r3, r1, r3
 800625c:	011b      	lsls	r3, r3, #4
 800625e:	3332      	adds	r3, #50	@ 0x32
 8006260:	4a33      	ldr	r2, [pc, #204]	@ (8006330 <UART_SetConfig+0x4e4>)
 8006262:	fba2 2303 	umull	r2, r3, r2, r3
 8006266:	095b      	lsrs	r3, r3, #5
 8006268:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800626c:	441c      	add	r4, r3
 800626e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006272:	2200      	movs	r2, #0
 8006274:	673b      	str	r3, [r7, #112]	@ 0x70
 8006276:	677a      	str	r2, [r7, #116]	@ 0x74
 8006278:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800627c:	4642      	mov	r2, r8
 800627e:	464b      	mov	r3, r9
 8006280:	1891      	adds	r1, r2, r2
 8006282:	60b9      	str	r1, [r7, #8]
 8006284:	415b      	adcs	r3, r3
 8006286:	60fb      	str	r3, [r7, #12]
 8006288:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800628c:	4641      	mov	r1, r8
 800628e:	1851      	adds	r1, r2, r1
 8006290:	6039      	str	r1, [r7, #0]
 8006292:	4649      	mov	r1, r9
 8006294:	414b      	adcs	r3, r1
 8006296:	607b      	str	r3, [r7, #4]
 8006298:	f04f 0200 	mov.w	r2, #0
 800629c:	f04f 0300 	mov.w	r3, #0
 80062a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062a4:	4659      	mov	r1, fp
 80062a6:	00cb      	lsls	r3, r1, #3
 80062a8:	4651      	mov	r1, sl
 80062aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062ae:	4651      	mov	r1, sl
 80062b0:	00ca      	lsls	r2, r1, #3
 80062b2:	4610      	mov	r0, r2
 80062b4:	4619      	mov	r1, r3
 80062b6:	4603      	mov	r3, r0
 80062b8:	4642      	mov	r2, r8
 80062ba:	189b      	adds	r3, r3, r2
 80062bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062be:	464b      	mov	r3, r9
 80062c0:	460a      	mov	r2, r1
 80062c2:	eb42 0303 	adc.w	r3, r2, r3
 80062c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80062d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80062d4:	f04f 0200 	mov.w	r2, #0
 80062d8:	f04f 0300 	mov.w	r3, #0
 80062dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80062e0:	4649      	mov	r1, r9
 80062e2:	008b      	lsls	r3, r1, #2
 80062e4:	4641      	mov	r1, r8
 80062e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062ea:	4641      	mov	r1, r8
 80062ec:	008a      	lsls	r2, r1, #2
 80062ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80062f2:	f7fa fc79 	bl	8000be8 <__aeabi_uldivmod>
 80062f6:	4602      	mov	r2, r0
 80062f8:	460b      	mov	r3, r1
 80062fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006330 <UART_SetConfig+0x4e4>)
 80062fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006300:	095b      	lsrs	r3, r3, #5
 8006302:	2164      	movs	r1, #100	@ 0x64
 8006304:	fb01 f303 	mul.w	r3, r1, r3
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	011b      	lsls	r3, r3, #4
 800630c:	3332      	adds	r3, #50	@ 0x32
 800630e:	4a08      	ldr	r2, [pc, #32]	@ (8006330 <UART_SetConfig+0x4e4>)
 8006310:	fba2 2303 	umull	r2, r3, r2, r3
 8006314:	095b      	lsrs	r3, r3, #5
 8006316:	f003 020f 	and.w	r2, r3, #15
 800631a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4422      	add	r2, r4
 8006322:	609a      	str	r2, [r3, #8]
}
 8006324:	bf00      	nop
 8006326:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800632a:	46bd      	mov	sp, r7
 800632c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006330:	51eb851f 	.word	0x51eb851f

08006334 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006334:	b084      	sub	sp, #16
 8006336:	b580      	push	{r7, lr}
 8006338:	b084      	sub	sp, #16
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
 800633e:	f107 001c 	add.w	r0, r7, #28
 8006342:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006346:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800634a:	2b01      	cmp	r3, #1
 800634c:	d123      	bne.n	8006396 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006352:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	68db      	ldr	r3, [r3, #12]
 800635e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006362:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006376:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800637a:	2b01      	cmp	r3, #1
 800637c:	d105      	bne.n	800638a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f001 fae8 	bl	8007960 <USB_CoreReset>
 8006390:	4603      	mov	r3, r0
 8006392:	73fb      	strb	r3, [r7, #15]
 8006394:	e01b      	b.n	80063ce <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f001 fadc 	bl	8007960 <USB_CoreReset>
 80063a8:	4603      	mov	r3, r0
 80063aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80063ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d106      	bne.n	80063c2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	639a      	str	r2, [r3, #56]	@ 0x38
 80063c0:	e005      	b.n	80063ce <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80063ce:	7fbb      	ldrb	r3, [r7, #30]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d10b      	bne.n	80063ec <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	f043 0206 	orr.w	r2, r3, #6
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f043 0220 	orr.w	r2, r3, #32
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063f8:	b004      	add	sp, #16
 80063fa:	4770      	bx	lr

080063fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b087      	sub	sp, #28
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	60b9      	str	r1, [r7, #8]
 8006406:	4613      	mov	r3, r2
 8006408:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800640a:	79fb      	ldrb	r3, [r7, #7]
 800640c:	2b02      	cmp	r3, #2
 800640e:	d165      	bne.n	80064dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	4a41      	ldr	r2, [pc, #260]	@ (8006518 <USB_SetTurnaroundTime+0x11c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d906      	bls.n	8006426 <USB_SetTurnaroundTime+0x2a>
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	4a40      	ldr	r2, [pc, #256]	@ (800651c <USB_SetTurnaroundTime+0x120>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d202      	bcs.n	8006426 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006420:	230f      	movs	r3, #15
 8006422:	617b      	str	r3, [r7, #20]
 8006424:	e062      	b.n	80064ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	4a3c      	ldr	r2, [pc, #240]	@ (800651c <USB_SetTurnaroundTime+0x120>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d306      	bcc.n	800643c <USB_SetTurnaroundTime+0x40>
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	4a3b      	ldr	r2, [pc, #236]	@ (8006520 <USB_SetTurnaroundTime+0x124>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d202      	bcs.n	800643c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006436:	230e      	movs	r3, #14
 8006438:	617b      	str	r3, [r7, #20]
 800643a:	e057      	b.n	80064ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	4a38      	ldr	r2, [pc, #224]	@ (8006520 <USB_SetTurnaroundTime+0x124>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d306      	bcc.n	8006452 <USB_SetTurnaroundTime+0x56>
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4a37      	ldr	r2, [pc, #220]	@ (8006524 <USB_SetTurnaroundTime+0x128>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d202      	bcs.n	8006452 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800644c:	230d      	movs	r3, #13
 800644e:	617b      	str	r3, [r7, #20]
 8006450:	e04c      	b.n	80064ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	4a33      	ldr	r2, [pc, #204]	@ (8006524 <USB_SetTurnaroundTime+0x128>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d306      	bcc.n	8006468 <USB_SetTurnaroundTime+0x6c>
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	4a32      	ldr	r2, [pc, #200]	@ (8006528 <USB_SetTurnaroundTime+0x12c>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d802      	bhi.n	8006468 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006462:	230c      	movs	r3, #12
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	e041      	b.n	80064ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	4a2f      	ldr	r2, [pc, #188]	@ (8006528 <USB_SetTurnaroundTime+0x12c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d906      	bls.n	800647e <USB_SetTurnaroundTime+0x82>
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	4a2e      	ldr	r2, [pc, #184]	@ (800652c <USB_SetTurnaroundTime+0x130>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d802      	bhi.n	800647e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006478:	230b      	movs	r3, #11
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	e036      	b.n	80064ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	4a2a      	ldr	r2, [pc, #168]	@ (800652c <USB_SetTurnaroundTime+0x130>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d906      	bls.n	8006494 <USB_SetTurnaroundTime+0x98>
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	4a29      	ldr	r2, [pc, #164]	@ (8006530 <USB_SetTurnaroundTime+0x134>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d802      	bhi.n	8006494 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800648e:	230a      	movs	r3, #10
 8006490:	617b      	str	r3, [r7, #20]
 8006492:	e02b      	b.n	80064ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	4a26      	ldr	r2, [pc, #152]	@ (8006530 <USB_SetTurnaroundTime+0x134>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d906      	bls.n	80064aa <USB_SetTurnaroundTime+0xae>
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	4a25      	ldr	r2, [pc, #148]	@ (8006534 <USB_SetTurnaroundTime+0x138>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d202      	bcs.n	80064aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80064a4:	2309      	movs	r3, #9
 80064a6:	617b      	str	r3, [r7, #20]
 80064a8:	e020      	b.n	80064ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	4a21      	ldr	r2, [pc, #132]	@ (8006534 <USB_SetTurnaroundTime+0x138>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d306      	bcc.n	80064c0 <USB_SetTurnaroundTime+0xc4>
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	4a20      	ldr	r2, [pc, #128]	@ (8006538 <USB_SetTurnaroundTime+0x13c>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d802      	bhi.n	80064c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80064ba:	2308      	movs	r3, #8
 80064bc:	617b      	str	r3, [r7, #20]
 80064be:	e015      	b.n	80064ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	4a1d      	ldr	r2, [pc, #116]	@ (8006538 <USB_SetTurnaroundTime+0x13c>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d906      	bls.n	80064d6 <USB_SetTurnaroundTime+0xda>
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	4a1c      	ldr	r2, [pc, #112]	@ (800653c <USB_SetTurnaroundTime+0x140>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d202      	bcs.n	80064d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80064d0:	2307      	movs	r3, #7
 80064d2:	617b      	str	r3, [r7, #20]
 80064d4:	e00a      	b.n	80064ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80064d6:	2306      	movs	r3, #6
 80064d8:	617b      	str	r3, [r7, #20]
 80064da:	e007      	b.n	80064ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80064dc:	79fb      	ldrb	r3, [r7, #7]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d102      	bne.n	80064e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80064e2:	2309      	movs	r3, #9
 80064e4:	617b      	str	r3, [r7, #20]
 80064e6:	e001      	b.n	80064ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80064e8:	2309      	movs	r3, #9
 80064ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	68da      	ldr	r2, [r3, #12]
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	029b      	lsls	r3, r3, #10
 8006500:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8006504:	431a      	orrs	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800650a:	2300      	movs	r3, #0
}
 800650c:	4618      	mov	r0, r3
 800650e:	371c      	adds	r7, #28
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	00d8acbf 	.word	0x00d8acbf
 800651c:	00e4e1c0 	.word	0x00e4e1c0
 8006520:	00f42400 	.word	0x00f42400
 8006524:	01067380 	.word	0x01067380
 8006528:	011a499f 	.word	0x011a499f
 800652c:	01312cff 	.word	0x01312cff
 8006530:	014ca43f 	.word	0x014ca43f
 8006534:	016e3600 	.word	0x016e3600
 8006538:	01a6ab1f 	.word	0x01a6ab1f
 800653c:	01e84800 	.word	0x01e84800

08006540 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	f043 0201 	orr.w	r2, r3, #1
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006562:	b480      	push	{r7}
 8006564:	b083      	sub	sp, #12
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	f023 0201 	bic.w	r2, r3, #1
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	460b      	mov	r3, r1
 800658e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006590:	2300      	movs	r3, #0
 8006592:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80065a0:	78fb      	ldrb	r3, [r7, #3]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d115      	bne.n	80065d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80065b2:	200a      	movs	r0, #10
 80065b4:	f7fb fef4 	bl	80023a0 <HAL_Delay>
      ms += 10U;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	330a      	adds	r3, #10
 80065bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f001 f93f 	bl	8007842 <USB_GetMode>
 80065c4:	4603      	mov	r3, r0
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d01e      	beq.n	8006608 <USB_SetCurrentMode+0x84>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2bc7      	cmp	r3, #199	@ 0xc7
 80065ce:	d9f0      	bls.n	80065b2 <USB_SetCurrentMode+0x2e>
 80065d0:	e01a      	b.n	8006608 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80065d2:	78fb      	ldrb	r3, [r7, #3]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d115      	bne.n	8006604 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80065e4:	200a      	movs	r0, #10
 80065e6:	f7fb fedb 	bl	80023a0 <HAL_Delay>
      ms += 10U;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	330a      	adds	r3, #10
 80065ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f001 f926 	bl	8007842 <USB_GetMode>
 80065f6:	4603      	mov	r3, r0
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d005      	beq.n	8006608 <USB_SetCurrentMode+0x84>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2bc7      	cmp	r3, #199	@ 0xc7
 8006600:	d9f0      	bls.n	80065e4 <USB_SetCurrentMode+0x60>
 8006602:	e001      	b.n	8006608 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e005      	b.n	8006614 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2bc8      	cmp	r3, #200	@ 0xc8
 800660c:	d101      	bne.n	8006612 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e000      	b.n	8006614 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006612:	2300      	movs	r3, #0
}
 8006614:	4618      	mov	r0, r3
 8006616:	3710      	adds	r7, #16
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800661c:	b084      	sub	sp, #16
 800661e:	b580      	push	{r7, lr}
 8006620:	b086      	sub	sp, #24
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
 8006626:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800662a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006636:	2300      	movs	r3, #0
 8006638:	613b      	str	r3, [r7, #16]
 800663a:	e009      	b.n	8006650 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	3340      	adds	r3, #64	@ 0x40
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	4413      	add	r3, r2
 8006646:	2200      	movs	r2, #0
 8006648:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	3301      	adds	r3, #1
 800664e:	613b      	str	r3, [r7, #16]
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	2b0e      	cmp	r3, #14
 8006654:	d9f2      	bls.n	800663c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006656:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800665a:	2b00      	cmp	r3, #0
 800665c:	d11c      	bne.n	8006698 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	68fa      	ldr	r2, [r7, #12]
 8006668:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800666c:	f043 0302 	orr.w	r3, r3, #2
 8006670:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006676:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006682:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800668e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	639a      	str	r2, [r3, #56]	@ 0x38
 8006696:	e00b      	b.n	80066b0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800669c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80066b6:	461a      	mov	r2, r3
 80066b8:	2300      	movs	r3, #0
 80066ba:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066bc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d10d      	bne.n	80066e0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80066c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d104      	bne.n	80066d6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80066cc:	2100      	movs	r1, #0
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f968 	bl	80069a4 <USB_SetDevSpeed>
 80066d4:	e008      	b.n	80066e8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80066d6:	2101      	movs	r1, #1
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f000 f963 	bl	80069a4 <USB_SetDevSpeed>
 80066de:	e003      	b.n	80066e8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80066e0:	2103      	movs	r1, #3
 80066e2:	6878      	ldr	r0, [r7, #4]
 80066e4:	f000 f95e 	bl	80069a4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80066e8:	2110      	movs	r1, #16
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f8fa 	bl	80068e4 <USB_FlushTxFifo>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d001      	beq.n	80066fa <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f924 	bl	8006948 <USB_FlushRxFifo>
 8006700:	4603      	mov	r3, r0
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006710:	461a      	mov	r2, r3
 8006712:	2300      	movs	r3, #0
 8006714:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800671c:	461a      	mov	r2, r3
 800671e:	2300      	movs	r3, #0
 8006720:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006728:	461a      	mov	r2, r3
 800672a:	2300      	movs	r3, #0
 800672c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800672e:	2300      	movs	r3, #0
 8006730:	613b      	str	r3, [r7, #16]
 8006732:	e043      	b.n	80067bc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006746:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800674a:	d118      	bne.n	800677e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10a      	bne.n	8006768 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	4413      	add	r3, r2
 800675a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800675e:	461a      	mov	r2, r3
 8006760:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006764:	6013      	str	r3, [r2, #0]
 8006766:	e013      	b.n	8006790 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	015a      	lsls	r2, r3, #5
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4413      	add	r3, r2
 8006770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006774:	461a      	mov	r2, r3
 8006776:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	e008      	b.n	8006790 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	4413      	add	r3, r2
 8006786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800678a:	461a      	mov	r2, r3
 800678c:	2300      	movs	r3, #0
 800678e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800679c:	461a      	mov	r2, r3
 800679e:	2300      	movs	r3, #0
 80067a0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	015a      	lsls	r2, r3, #5
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	4413      	add	r3, r2
 80067aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067ae:	461a      	mov	r2, r3
 80067b0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80067b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	3301      	adds	r3, #1
 80067ba:	613b      	str	r3, [r7, #16]
 80067bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80067c0:	461a      	mov	r2, r3
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d3b5      	bcc.n	8006734 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067c8:	2300      	movs	r3, #0
 80067ca:	613b      	str	r3, [r7, #16]
 80067cc:	e043      	b.n	8006856 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80067e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80067e4:	d118      	bne.n	8006818 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10a      	bne.n	8006802 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067f8:	461a      	mov	r2, r3
 80067fa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80067fe:	6013      	str	r3, [r2, #0]
 8006800:	e013      	b.n	800682a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	015a      	lsls	r2, r3, #5
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	4413      	add	r3, r2
 800680a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800680e:	461a      	mov	r2, r3
 8006810:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006814:	6013      	str	r3, [r2, #0]
 8006816:	e008      	b.n	800682a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	4413      	add	r3, r2
 8006820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006824:	461a      	mov	r2, r3
 8006826:	2300      	movs	r3, #0
 8006828:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	4413      	add	r3, r2
 8006832:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006836:	461a      	mov	r2, r3
 8006838:	2300      	movs	r3, #0
 800683a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4413      	add	r3, r2
 8006844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006848:	461a      	mov	r2, r3
 800684a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800684e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	3301      	adds	r3, #1
 8006854:	613b      	str	r3, [r7, #16]
 8006856:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800685a:	461a      	mov	r2, r3
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	4293      	cmp	r3, r2
 8006860:	d3b5      	bcc.n	80067ce <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006870:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006874:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006882:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006884:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006888:	2b00      	cmp	r3, #0
 800688a:	d105      	bne.n	8006898 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	f043 0210 	orr.w	r2, r3, #16
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	699a      	ldr	r2, [r3, #24]
 800689c:	4b10      	ldr	r3, [pc, #64]	@ (80068e0 <USB_DevInit+0x2c4>)
 800689e:	4313      	orrs	r3, r2
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80068a4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d005      	beq.n	80068b8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	f043 0208 	orr.w	r2, r3, #8
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80068b8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d107      	bne.n	80068d0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	699b      	ldr	r3, [r3, #24]
 80068c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068c8:	f043 0304 	orr.w	r3, r3, #4
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80068d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3718      	adds	r7, #24
 80068d6:	46bd      	mov	sp, r7
 80068d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068dc:	b004      	add	sp, #16
 80068de:	4770      	bx	lr
 80068e0:	803c3800 	.word	0x803c3800

080068e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80068ee:	2300      	movs	r3, #0
 80068f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	3301      	adds	r3, #1
 80068f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068fe:	d901      	bls.n	8006904 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006900:	2303      	movs	r3, #3
 8006902:	e01b      	b.n	800693c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	2b00      	cmp	r3, #0
 800690a:	daf2      	bge.n	80068f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800690c:	2300      	movs	r3, #0
 800690e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	019b      	lsls	r3, r3, #6
 8006914:	f043 0220 	orr.w	r2, r3, #32
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	3301      	adds	r3, #1
 8006920:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006928:	d901      	bls.n	800692e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e006      	b.n	800693c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	f003 0320 	and.w	r3, r3, #32
 8006936:	2b20      	cmp	r3, #32
 8006938:	d0f0      	beq.n	800691c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3714      	adds	r7, #20
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006950:	2300      	movs	r3, #0
 8006952:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	3301      	adds	r3, #1
 8006958:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006960:	d901      	bls.n	8006966 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006962:	2303      	movs	r3, #3
 8006964:	e018      	b.n	8006998 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	2b00      	cmp	r3, #0
 800696c:	daf2      	bge.n	8006954 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800696e:	2300      	movs	r3, #0
 8006970:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2210      	movs	r2, #16
 8006976:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	3301      	adds	r3, #1
 800697c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006984:	d901      	bls.n	800698a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e006      	b.n	8006998 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	f003 0310 	and.w	r3, r3, #16
 8006992:	2b10      	cmp	r3, #16
 8006994:	d0f0      	beq.n	8006978 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	3714      	adds	r7, #20
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr

080069a4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b085      	sub	sp, #20
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	460b      	mov	r3, r1
 80069ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	78fb      	ldrb	r3, [r7, #3]
 80069be:	68f9      	ldr	r1, [r7, #12]
 80069c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069c4:	4313      	orrs	r3, r2
 80069c6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr

080069d6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b087      	sub	sp, #28
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f003 0306 	and.w	r3, r3, #6
 80069ee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d102      	bne.n	80069fc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80069f6:	2300      	movs	r3, #0
 80069f8:	75fb      	strb	r3, [r7, #23]
 80069fa:	e00a      	b.n	8006a12 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d002      	beq.n	8006a08 <USB_GetDevSpeed+0x32>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2b06      	cmp	r3, #6
 8006a06:	d102      	bne.n	8006a0e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006a08:	2302      	movs	r3, #2
 8006a0a:	75fb      	strb	r3, [r7, #23]
 8006a0c:	e001      	b.n	8006a12 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006a0e:	230f      	movs	r3, #15
 8006a10:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	371c      	adds	r7, #28
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b085      	sub	sp, #20
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	785b      	ldrb	r3, [r3, #1]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d13a      	bne.n	8006ab2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a42:	69da      	ldr	r2, [r3, #28]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	781b      	ldrb	r3, [r3, #0]
 8006a48:	f003 030f 	and.w	r3, r3, #15
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	68f9      	ldr	r1, [r7, #12]
 8006a56:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	015a      	lsls	r2, r3, #5
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	4413      	add	r3, r2
 8006a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d155      	bne.n	8006b20 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	791b      	ldrb	r3, [r3, #4]
 8006a8e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a90:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	059b      	lsls	r3, r3, #22
 8006a96:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	0151      	lsls	r1, r2, #5
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	440a      	add	r2, r1
 8006aa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006aa6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006aaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	e036      	b.n	8006b20 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ab8:	69da      	ldr	r2, [r3, #28]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	781b      	ldrb	r3, [r3, #0]
 8006abe:	f003 030f 	and.w	r3, r3, #15
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ac8:	041b      	lsls	r3, r3, #16
 8006aca:	68f9      	ldr	r1, [r7, #12]
 8006acc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	015a      	lsls	r2, r3, #5
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	4413      	add	r3, r2
 8006adc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d11a      	bne.n	8006b20 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	015a      	lsls	r2, r3, #5
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	4413      	add	r3, r2
 8006af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	791b      	ldrb	r3, [r3, #4]
 8006b04:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006b06:	430b      	orrs	r3, r1
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	0151      	lsls	r1, r2, #5
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	440a      	add	r2, r1
 8006b12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b1e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006b20:	2300      	movs	r3, #0
}
 8006b22:	4618      	mov	r0, r3
 8006b24:	3714      	adds	r7, #20
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
	...

08006b30 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b085      	sub	sp, #20
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
 8006b38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	785b      	ldrb	r3, [r3, #1]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d161      	bne.n	8006c10 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	015a      	lsls	r2, r3, #5
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4413      	add	r3, r2
 8006b54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b62:	d11f      	bne.n	8006ba4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68ba      	ldr	r2, [r7, #8]
 8006b74:	0151      	lsls	r1, r2, #5
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	440a      	add	r2, r1
 8006b7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b7e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006b82:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68ba      	ldr	r2, [r7, #8]
 8006b94:	0151      	lsls	r1, r2, #5
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	440a      	add	r2, r1
 8006b9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ba2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006baa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	f003 030f 	and.w	r3, r3, #15
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	43db      	mvns	r3, r3
 8006bbe:	68f9      	ldr	r1, [r7, #12]
 8006bc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bce:	69da      	ldr	r2, [r3, #28]
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	f003 030f 	and.w	r3, r3, #15
 8006bd8:	2101      	movs	r1, #1
 8006bda:	fa01 f303 	lsl.w	r3, r1, r3
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	43db      	mvns	r3, r3
 8006be2:	68f9      	ldr	r1, [r7, #12]
 8006be4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006be8:	4013      	ands	r3, r2
 8006bea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	0159      	lsls	r1, r3, #5
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	440b      	add	r3, r1
 8006c02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c06:	4619      	mov	r1, r3
 8006c08:	4b35      	ldr	r3, [pc, #212]	@ (8006ce0 <USB_DeactivateEndpoint+0x1b0>)
 8006c0a:	4013      	ands	r3, r2
 8006c0c:	600b      	str	r3, [r1, #0]
 8006c0e:	e060      	b.n	8006cd2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c26:	d11f      	bne.n	8006c68 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	015a      	lsls	r2, r3, #5
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	0151      	lsls	r1, r2, #5
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	440a      	add	r2, r1
 8006c3e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c42:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006c46:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68ba      	ldr	r2, [r7, #8]
 8006c58:	0151      	lsls	r1, r2, #5
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	440a      	add	r2, r1
 8006c5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	f003 030f 	and.w	r3, r3, #15
 8006c78:	2101      	movs	r1, #1
 8006c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c7e:	041b      	lsls	r3, r3, #16
 8006c80:	43db      	mvns	r3, r3
 8006c82:	68f9      	ldr	r1, [r7, #12]
 8006c84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c88:	4013      	ands	r3, r2
 8006c8a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c92:	69da      	ldr	r2, [r3, #28]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	f003 030f 	and.w	r3, r3, #15
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca2:	041b      	lsls	r3, r3, #16
 8006ca4:	43db      	mvns	r3, r3
 8006ca6:	68f9      	ldr	r1, [r7, #12]
 8006ca8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006cac:	4013      	ands	r3, r2
 8006cae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	0159      	lsls	r1, r3, #5
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	440b      	add	r3, r1
 8006cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cca:	4619      	mov	r1, r3
 8006ccc:	4b05      	ldr	r3, [pc, #20]	@ (8006ce4 <USB_DeactivateEndpoint+0x1b4>)
 8006cce:	4013      	ands	r3, r2
 8006cd0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3714      	adds	r7, #20
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	ec337800 	.word	0xec337800
 8006ce4:	eff37800 	.word	0xeff37800

08006ce8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b08a      	sub	sp, #40	@ 0x28
 8006cec:	af02      	add	r7, sp, #8
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	4613      	mov	r3, r2
 8006cf4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	785b      	ldrb	r3, [r3, #1]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	f040 817f 	bne.w	8007008 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d132      	bne.n	8006d78 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d12:	69bb      	ldr	r3, [r7, #24]
 8006d14:	015a      	lsls	r2, r3, #5
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	4413      	add	r3, r2
 8006d1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	0151      	lsls	r1, r2, #5
 8006d24:	69fa      	ldr	r2, [r7, #28]
 8006d26:	440a      	add	r2, r1
 8006d28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d2c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006d30:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006d34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d36:	69bb      	ldr	r3, [r7, #24]
 8006d38:	015a      	lsls	r2, r3, #5
 8006d3a:	69fb      	ldr	r3, [r7, #28]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	69ba      	ldr	r2, [r7, #24]
 8006d46:	0151      	lsls	r1, r2, #5
 8006d48:	69fa      	ldr	r2, [r7, #28]
 8006d4a:	440a      	add	r2, r1
 8006d4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d50:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d56:	69bb      	ldr	r3, [r7, #24]
 8006d58:	015a      	lsls	r2, r3, #5
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d62:	691b      	ldr	r3, [r3, #16]
 8006d64:	69ba      	ldr	r2, [r7, #24]
 8006d66:	0151      	lsls	r1, r2, #5
 8006d68:	69fa      	ldr	r2, [r7, #28]
 8006d6a:	440a      	add	r2, r1
 8006d6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d70:	0cdb      	lsrs	r3, r3, #19
 8006d72:	04db      	lsls	r3, r3, #19
 8006d74:	6113      	str	r3, [r2, #16]
 8006d76:	e097      	b.n	8006ea8 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d78:	69bb      	ldr	r3, [r7, #24]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d84:	691b      	ldr	r3, [r3, #16]
 8006d86:	69ba      	ldr	r2, [r7, #24]
 8006d88:	0151      	lsls	r1, r2, #5
 8006d8a:	69fa      	ldr	r2, [r7, #28]
 8006d8c:	440a      	add	r2, r1
 8006d8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d92:	0cdb      	lsrs	r3, r3, #19
 8006d94:	04db      	lsls	r3, r3, #19
 8006d96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006da4:	691b      	ldr	r3, [r3, #16]
 8006da6:	69ba      	ldr	r2, [r7, #24]
 8006da8:	0151      	lsls	r1, r2, #5
 8006daa:	69fa      	ldr	r2, [r7, #28]
 8006dac:	440a      	add	r2, r1
 8006dae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006db2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006db6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006dba:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006dbc:	69bb      	ldr	r3, [r7, #24]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d11a      	bne.n	8006df8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	691a      	ldr	r2, [r3, #16]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d903      	bls.n	8006dd6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	689a      	ldr	r2, [r3, #8]
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	015a      	lsls	r2, r3, #5
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	4413      	add	r3, r2
 8006dde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006de2:	691b      	ldr	r3, [r3, #16]
 8006de4:	69ba      	ldr	r2, [r7, #24]
 8006de6:	0151      	lsls	r1, r2, #5
 8006de8:	69fa      	ldr	r2, [r7, #28]
 8006dea:	440a      	add	r2, r1
 8006dec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006df0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006df4:	6113      	str	r3, [r2, #16]
 8006df6:	e044      	b.n	8006e82 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	691a      	ldr	r2, [r3, #16]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	4413      	add	r3, r2
 8006e02:	1e5a      	subs	r2, r3, #1
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e0c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	015a      	lsls	r2, r3, #5
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	4413      	add	r3, r2
 8006e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e1a:	691a      	ldr	r2, [r3, #16]
 8006e1c:	8afb      	ldrh	r3, [r7, #22]
 8006e1e:	04d9      	lsls	r1, r3, #19
 8006e20:	4ba4      	ldr	r3, [pc, #656]	@ (80070b4 <USB_EPStartXfer+0x3cc>)
 8006e22:	400b      	ands	r3, r1
 8006e24:	69b9      	ldr	r1, [r7, #24]
 8006e26:	0148      	lsls	r0, r1, #5
 8006e28:	69f9      	ldr	r1, [r7, #28]
 8006e2a:	4401      	add	r1, r0
 8006e2c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006e30:	4313      	orrs	r3, r2
 8006e32:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	791b      	ldrb	r3, [r3, #4]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d122      	bne.n	8006e82 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	0151      	lsls	r1, r2, #5
 8006e4e:	69fa      	ldr	r2, [r7, #28]
 8006e50:	440a      	add	r2, r1
 8006e52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006e56:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006e5a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e68:	691a      	ldr	r2, [r3, #16]
 8006e6a:	8afb      	ldrh	r3, [r7, #22]
 8006e6c:	075b      	lsls	r3, r3, #29
 8006e6e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006e72:	69b9      	ldr	r1, [r7, #24]
 8006e74:	0148      	lsls	r0, r1, #5
 8006e76:	69f9      	ldr	r1, [r7, #28]
 8006e78:	4401      	add	r1, r0
 8006e7a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	015a      	lsls	r2, r3, #5
 8006e86:	69fb      	ldr	r3, [r7, #28]
 8006e88:	4413      	add	r3, r2
 8006e8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e8e:	691a      	ldr	r2, [r3, #16]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e98:	69b9      	ldr	r1, [r7, #24]
 8006e9a:	0148      	lsls	r0, r1, #5
 8006e9c:	69f9      	ldr	r1, [r7, #28]
 8006e9e:	4401      	add	r1, r0
 8006ea0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006ea8:	79fb      	ldrb	r3, [r7, #7]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d14b      	bne.n	8006f46 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d009      	beq.n	8006eca <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	69db      	ldr	r3, [r3, #28]
 8006ec8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	791b      	ldrb	r3, [r3, #4]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d128      	bne.n	8006f24 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d110      	bne.n	8006f04 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006ee2:	69bb      	ldr	r3, [r7, #24]
 8006ee4:	015a      	lsls	r2, r3, #5
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	4413      	add	r3, r2
 8006eea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	69ba      	ldr	r2, [r7, #24]
 8006ef2:	0151      	lsls	r1, r2, #5
 8006ef4:	69fa      	ldr	r2, [r7, #28]
 8006ef6:	440a      	add	r2, r1
 8006ef8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006efc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006f00:	6013      	str	r3, [r2, #0]
 8006f02:	e00f      	b.n	8006f24 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f04:	69bb      	ldr	r3, [r7, #24]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	0151      	lsls	r1, r2, #5
 8006f16:	69fa      	ldr	r2, [r7, #28]
 8006f18:	440a      	add	r2, r1
 8006f1a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f22:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	015a      	lsls	r2, r3, #5
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	69ba      	ldr	r2, [r7, #24]
 8006f34:	0151      	lsls	r1, r2, #5
 8006f36:	69fa      	ldr	r2, [r7, #28]
 8006f38:	440a      	add	r2, r1
 8006f3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f3e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006f42:	6013      	str	r3, [r2, #0]
 8006f44:	e166      	b.n	8007214 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	015a      	lsls	r2, r3, #5
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	69ba      	ldr	r2, [r7, #24]
 8006f56:	0151      	lsls	r1, r2, #5
 8006f58:	69fa      	ldr	r2, [r7, #28]
 8006f5a:	440a      	add	r2, r1
 8006f5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f60:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006f64:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	791b      	ldrb	r3, [r3, #4]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d015      	beq.n	8006f9a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	691b      	ldr	r3, [r3, #16]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f000 814e 	beq.w	8007214 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	f003 030f 	and.w	r3, r3, #15
 8006f88:	2101      	movs	r1, #1
 8006f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f8e:	69f9      	ldr	r1, [r7, #28]
 8006f90:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f94:	4313      	orrs	r3, r2
 8006f96:	634b      	str	r3, [r1, #52]	@ 0x34
 8006f98:	e13c      	b.n	8007214 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f9a:	69fb      	ldr	r3, [r7, #28]
 8006f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d110      	bne.n	8006fcc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	015a      	lsls	r2, r3, #5
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	0151      	lsls	r1, r2, #5
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	440a      	add	r2, r1
 8006fc0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fc4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006fc8:	6013      	str	r3, [r2, #0]
 8006fca:	e00f      	b.n	8006fec <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	0151      	lsls	r1, r2, #5
 8006fde:	69fa      	ldr	r2, [r7, #28]
 8006fe0:	440a      	add	r2, r1
 8006fe2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006fe6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fea:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	68d9      	ldr	r1, [r3, #12]
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	781a      	ldrb	r2, [r3, #0]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	b298      	uxth	r0, r3
 8006ffa:	79fb      	ldrb	r3, [r7, #7]
 8006ffc:	9300      	str	r3, [sp, #0]
 8006ffe:	4603      	mov	r3, r0
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f000 f9b9 	bl	8007378 <USB_WritePacket>
 8007006:	e105      	b.n	8007214 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007008:	69bb      	ldr	r3, [r7, #24]
 800700a:	015a      	lsls	r2, r3, #5
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	4413      	add	r3, r2
 8007010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007014:	691b      	ldr	r3, [r3, #16]
 8007016:	69ba      	ldr	r2, [r7, #24]
 8007018:	0151      	lsls	r1, r2, #5
 800701a:	69fa      	ldr	r2, [r7, #28]
 800701c:	440a      	add	r2, r1
 800701e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007022:	0cdb      	lsrs	r3, r3, #19
 8007024:	04db      	lsls	r3, r3, #19
 8007026:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	69ba      	ldr	r2, [r7, #24]
 8007038:	0151      	lsls	r1, r2, #5
 800703a:	69fa      	ldr	r2, [r7, #28]
 800703c:	440a      	add	r2, r1
 800703e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007042:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007046:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800704a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d132      	bne.n	80070b8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	689a      	ldr	r2, [r3, #8]
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	689a      	ldr	r2, [r3, #8]
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800706a:	69bb      	ldr	r3, [r7, #24]
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007076:	691a      	ldr	r2, [r3, #16]
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	6a1b      	ldr	r3, [r3, #32]
 800707c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007080:	69b9      	ldr	r1, [r7, #24]
 8007082:	0148      	lsls	r0, r1, #5
 8007084:	69f9      	ldr	r1, [r7, #28]
 8007086:	4401      	add	r1, r0
 8007088:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800708c:	4313      	orrs	r3, r2
 800708e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	4413      	add	r3, r2
 8007098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	69ba      	ldr	r2, [r7, #24]
 80070a0:	0151      	lsls	r1, r2, #5
 80070a2:	69fa      	ldr	r2, [r7, #28]
 80070a4:	440a      	add	r2, r1
 80070a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80070ae:	6113      	str	r3, [r2, #16]
 80070b0:	e062      	b.n	8007178 <USB_EPStartXfer+0x490>
 80070b2:	bf00      	nop
 80070b4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d123      	bne.n	8007108 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070cc:	691a      	ldr	r2, [r3, #16]
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070d6:	69b9      	ldr	r1, [r7, #24]
 80070d8:	0148      	lsls	r0, r1, #5
 80070da:	69f9      	ldr	r1, [r7, #28]
 80070dc:	4401      	add	r1, r0
 80070de:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80070e2:	4313      	orrs	r3, r2
 80070e4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	015a      	lsls	r2, r3, #5
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	4413      	add	r3, r2
 80070ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	69ba      	ldr	r2, [r7, #24]
 80070f6:	0151      	lsls	r1, r2, #5
 80070f8:	69fa      	ldr	r2, [r7, #28]
 80070fa:	440a      	add	r2, r1
 80070fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007100:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007104:	6113      	str	r3, [r2, #16]
 8007106:	e037      	b.n	8007178 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	691a      	ldr	r2, [r3, #16]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	4413      	add	r3, r2
 8007112:	1e5a      	subs	r2, r3, #1
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	fbb2 f3f3 	udiv	r3, r2, r3
 800711c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	8afa      	ldrh	r2, [r7, #22]
 8007124:	fb03 f202 	mul.w	r2, r3, r2
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	4413      	add	r3, r2
 8007134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007138:	691a      	ldr	r2, [r3, #16]
 800713a:	8afb      	ldrh	r3, [r7, #22]
 800713c:	04d9      	lsls	r1, r3, #19
 800713e:	4b38      	ldr	r3, [pc, #224]	@ (8007220 <USB_EPStartXfer+0x538>)
 8007140:	400b      	ands	r3, r1
 8007142:	69b9      	ldr	r1, [r7, #24]
 8007144:	0148      	lsls	r0, r1, #5
 8007146:	69f9      	ldr	r1, [r7, #28]
 8007148:	4401      	add	r1, r0
 800714a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800714e:	4313      	orrs	r3, r2
 8007150:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	015a      	lsls	r2, r3, #5
 8007156:	69fb      	ldr	r3, [r7, #28]
 8007158:	4413      	add	r3, r2
 800715a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800715e:	691a      	ldr	r2, [r3, #16]
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	6a1b      	ldr	r3, [r3, #32]
 8007164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007168:	69b9      	ldr	r1, [r7, #24]
 800716a:	0148      	lsls	r0, r1, #5
 800716c:	69f9      	ldr	r1, [r7, #28]
 800716e:	4401      	add	r1, r0
 8007170:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007174:	4313      	orrs	r3, r2
 8007176:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007178:	79fb      	ldrb	r3, [r7, #7]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d10d      	bne.n	800719a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d009      	beq.n	800719a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	68d9      	ldr	r1, [r3, #12]
 800718a:	69bb      	ldr	r3, [r7, #24]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	69fb      	ldr	r3, [r7, #28]
 8007190:	4413      	add	r3, r2
 8007192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007196:	460a      	mov	r2, r1
 8007198:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	791b      	ldrb	r3, [r3, #4]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d128      	bne.n	80071f4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d110      	bne.n	80071d4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80071b2:	69bb      	ldr	r3, [r7, #24]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	69fb      	ldr	r3, [r7, #28]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	69ba      	ldr	r2, [r7, #24]
 80071c2:	0151      	lsls	r1, r2, #5
 80071c4:	69fa      	ldr	r2, [r7, #28]
 80071c6:	440a      	add	r2, r1
 80071c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80071d0:	6013      	str	r3, [r2, #0]
 80071d2:	e00f      	b.n	80071f4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80071d4:	69bb      	ldr	r3, [r7, #24]
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	69ba      	ldr	r2, [r7, #24]
 80071e4:	0151      	lsls	r1, r2, #5
 80071e6:	69fa      	ldr	r2, [r7, #28]
 80071e8:	440a      	add	r2, r1
 80071ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	69ba      	ldr	r2, [r7, #24]
 8007204:	0151      	lsls	r1, r2, #5
 8007206:	69fa      	ldr	r2, [r7, #28]
 8007208:	440a      	add	r2, r1
 800720a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800720e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007212:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3720      	adds	r7, #32
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop
 8007220:	1ff80000 	.word	0x1ff80000

08007224 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007224:	b480      	push	{r7}
 8007226:	b087      	sub	sp, #28
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800722e:	2300      	movs	r3, #0
 8007230:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007232:	2300      	movs	r3, #0
 8007234:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	785b      	ldrb	r3, [r3, #1]
 800723e:	2b01      	cmp	r3, #1
 8007240:	d14a      	bne.n	80072d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	015a      	lsls	r2, r3, #5
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	4413      	add	r3, r2
 800724c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007256:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800725a:	f040 8086 	bne.w	800736a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	015a      	lsls	r2, r3, #5
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	4413      	add	r3, r2
 8007268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	683a      	ldr	r2, [r7, #0]
 8007270:	7812      	ldrb	r2, [r2, #0]
 8007272:	0151      	lsls	r1, r2, #5
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	440a      	add	r2, r1
 8007278:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800727c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007280:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	015a      	lsls	r2, r3, #5
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	4413      	add	r3, r2
 800728c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	7812      	ldrb	r2, [r2, #0]
 8007296:	0151      	lsls	r1, r2, #5
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	440a      	add	r2, r1
 800729c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80072a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	3301      	adds	r3, #1
 80072aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	f242 7210 	movw	r2, #10000	@ 0x2710
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d902      	bls.n	80072bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80072b6:	2301      	movs	r3, #1
 80072b8:	75fb      	strb	r3, [r7, #23]
          break;
 80072ba:	e056      	b.n	800736a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072d4:	d0e7      	beq.n	80072a6 <USB_EPStopXfer+0x82>
 80072d6:	e048      	b.n	800736a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072ec:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072f0:	d13b      	bne.n	800736a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	015a      	lsls	r2, r3, #5
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	4413      	add	r3, r2
 80072fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	683a      	ldr	r2, [r7, #0]
 8007304:	7812      	ldrb	r2, [r2, #0]
 8007306:	0151      	lsls	r1, r2, #5
 8007308:	693a      	ldr	r2, [r7, #16]
 800730a:	440a      	add	r2, r1
 800730c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007310:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007314:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	015a      	lsls	r2, r3, #5
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	4413      	add	r3, r2
 8007320:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	7812      	ldrb	r2, [r2, #0]
 800732a:	0151      	lsls	r1, r2, #5
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	440a      	add	r2, r1
 8007330:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007334:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007338:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	3301      	adds	r3, #1
 800733e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f242 7210 	movw	r2, #10000	@ 0x2710
 8007346:	4293      	cmp	r3, r2
 8007348:	d902      	bls.n	8007350 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	75fb      	strb	r3, [r7, #23]
          break;
 800734e:	e00c      	b.n	800736a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	015a      	lsls	r2, r3, #5
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	4413      	add	r3, r2
 800735a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007364:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007368:	d0e7      	beq.n	800733a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800736a:	7dfb      	ldrb	r3, [r7, #23]
}
 800736c:	4618      	mov	r0, r3
 800736e:	371c      	adds	r7, #28
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007378:	b480      	push	{r7}
 800737a:	b089      	sub	sp, #36	@ 0x24
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	4611      	mov	r1, r2
 8007384:	461a      	mov	r2, r3
 8007386:	460b      	mov	r3, r1
 8007388:	71fb      	strb	r3, [r7, #7]
 800738a:	4613      	mov	r3, r2
 800738c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007396:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800739a:	2b00      	cmp	r3, #0
 800739c:	d123      	bne.n	80073e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800739e:	88bb      	ldrh	r3, [r7, #4]
 80073a0:	3303      	adds	r3, #3
 80073a2:	089b      	lsrs	r3, r3, #2
 80073a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80073a6:	2300      	movs	r3, #0
 80073a8:	61bb      	str	r3, [r7, #24]
 80073aa:	e018      	b.n	80073de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80073ac:	79fb      	ldrb	r3, [r7, #7]
 80073ae:	031a      	lsls	r2, r3, #12
 80073b0:	697b      	ldr	r3, [r7, #20]
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073b8:	461a      	mov	r2, r3
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6013      	str	r3, [r2, #0]
      pSrc++;
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	3301      	adds	r3, #1
 80073c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	3301      	adds	r3, #1
 80073ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	3301      	adds	r3, #1
 80073d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	3301      	adds	r3, #1
 80073d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	3301      	adds	r3, #1
 80073dc:	61bb      	str	r3, [r7, #24]
 80073de:	69ba      	ldr	r2, [r7, #24]
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d3e2      	bcc.n	80073ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80073e6:	2300      	movs	r3, #0
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3724      	adds	r7, #36	@ 0x24
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b08b      	sub	sp, #44	@ 0x2c
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	4613      	mov	r3, r2
 8007400:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800740a:	88fb      	ldrh	r3, [r7, #6]
 800740c:	089b      	lsrs	r3, r3, #2
 800740e:	b29b      	uxth	r3, r3
 8007410:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007412:	88fb      	ldrh	r3, [r7, #6]
 8007414:	f003 0303 	and.w	r3, r3, #3
 8007418:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800741a:	2300      	movs	r3, #0
 800741c:	623b      	str	r3, [r7, #32]
 800741e:	e014      	b.n	800744a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742a:	601a      	str	r2, [r3, #0]
    pDest++;
 800742c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742e:	3301      	adds	r3, #1
 8007430:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007434:	3301      	adds	r3, #1
 8007436:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743a:	3301      	adds	r3, #1
 800743c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800743e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007440:	3301      	adds	r3, #1
 8007442:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007444:	6a3b      	ldr	r3, [r7, #32]
 8007446:	3301      	adds	r3, #1
 8007448:	623b      	str	r3, [r7, #32]
 800744a:	6a3a      	ldr	r2, [r7, #32]
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	429a      	cmp	r2, r3
 8007450:	d3e6      	bcc.n	8007420 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007452:	8bfb      	ldrh	r3, [r7, #30]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d01e      	beq.n	8007496 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007458:	2300      	movs	r3, #0
 800745a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007462:	461a      	mov	r2, r3
 8007464:	f107 0310 	add.w	r3, r7, #16
 8007468:	6812      	ldr	r2, [r2, #0]
 800746a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	6a3b      	ldr	r3, [r7, #32]
 8007470:	b2db      	uxtb	r3, r3
 8007472:	00db      	lsls	r3, r3, #3
 8007474:	fa22 f303 	lsr.w	r3, r2, r3
 8007478:	b2da      	uxtb	r2, r3
 800747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747c:	701a      	strb	r2, [r3, #0]
      i++;
 800747e:	6a3b      	ldr	r3, [r7, #32]
 8007480:	3301      	adds	r3, #1
 8007482:	623b      	str	r3, [r7, #32]
      pDest++;
 8007484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007486:	3301      	adds	r3, #1
 8007488:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800748a:	8bfb      	ldrh	r3, [r7, #30]
 800748c:	3b01      	subs	r3, #1
 800748e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007490:	8bfb      	ldrh	r3, [r7, #30]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d1ea      	bne.n	800746c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007498:	4618      	mov	r0, r3
 800749a:	372c      	adds	r7, #44	@ 0x2c
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	785b      	ldrb	r3, [r3, #1]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d12c      	bne.n	800751a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	015a      	lsls	r2, r3, #5
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	db12      	blt.n	80074f8 <USB_EPSetStall+0x54>
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00f      	beq.n	80074f8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	015a      	lsls	r2, r3, #5
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	4413      	add	r3, r2
 80074e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68ba      	ldr	r2, [r7, #8]
 80074e8:	0151      	lsls	r1, r2, #5
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	440a      	add	r2, r1
 80074ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074f2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80074f6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	015a      	lsls	r2, r3, #5
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	4413      	add	r3, r2
 8007500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	0151      	lsls	r1, r2, #5
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	440a      	add	r2, r1
 800750e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007512:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007516:	6013      	str	r3, [r2, #0]
 8007518:	e02b      	b.n	8007572 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	4413      	add	r3, r2
 8007522:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	db12      	blt.n	8007552 <USB_EPSetStall+0xae>
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00f      	beq.n	8007552 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	015a      	lsls	r2, r3, #5
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	4413      	add	r3, r2
 800753a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	0151      	lsls	r1, r2, #5
 8007544:	68fa      	ldr	r2, [r7, #12]
 8007546:	440a      	add	r2, r1
 8007548:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800754c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007550:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	015a      	lsls	r2, r3, #5
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	4413      	add	r3, r2
 800755a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	0151      	lsls	r1, r2, #5
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	440a      	add	r2, r1
 8007568:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800756c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007570:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3714      	adds	r7, #20
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	785b      	ldrb	r3, [r3, #1]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d128      	bne.n	80075ee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	015a      	lsls	r2, r3, #5
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	4413      	add	r3, r2
 80075a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68ba      	ldr	r2, [r7, #8]
 80075ac:	0151      	lsls	r1, r2, #5
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	440a      	add	r2, r1
 80075b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80075ba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	791b      	ldrb	r3, [r3, #4]
 80075c0:	2b03      	cmp	r3, #3
 80075c2:	d003      	beq.n	80075cc <USB_EPClearStall+0x4c>
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	791b      	ldrb	r3, [r3, #4]
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d138      	bne.n	800763e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	015a      	lsls	r2, r3, #5
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	4413      	add	r3, r2
 80075d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68ba      	ldr	r2, [r7, #8]
 80075dc:	0151      	lsls	r1, r2, #5
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	440a      	add	r2, r1
 80075e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80075e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075ea:	6013      	str	r3, [r2, #0]
 80075ec:	e027      	b.n	800763e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	015a      	lsls	r2, r3, #5
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	4413      	add	r3, r2
 80075f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	0151      	lsls	r1, r2, #5
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	440a      	add	r2, r1
 8007604:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007608:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800760c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	791b      	ldrb	r3, [r3, #4]
 8007612:	2b03      	cmp	r3, #3
 8007614:	d003      	beq.n	800761e <USB_EPClearStall+0x9e>
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	791b      	ldrb	r3, [r3, #4]
 800761a:	2b02      	cmp	r3, #2
 800761c:	d10f      	bne.n	800763e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	015a      	lsls	r2, r3, #5
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	4413      	add	r3, r2
 8007626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68ba      	ldr	r2, [r7, #8]
 800762e:	0151      	lsls	r1, r2, #5
 8007630:	68fa      	ldr	r2, [r7, #12]
 8007632:	440a      	add	r2, r1
 8007634:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007638:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800763c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	460b      	mov	r3, r1
 8007656:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800766a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800766e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007676:	681a      	ldr	r2, [r3, #0]
 8007678:	78fb      	ldrb	r3, [r7, #3]
 800767a:	011b      	lsls	r3, r3, #4
 800767c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007680:	68f9      	ldr	r1, [r7, #12]
 8007682:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007686:	4313      	orrs	r3, r2
 8007688:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3714      	adds	r7, #20
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007698:	b480      	push	{r7}
 800769a:	b085      	sub	sp, #20
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	68fa      	ldr	r2, [r7, #12]
 80076ae:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80076b2:	f023 0303 	bic.w	r3, r3, #3
 80076b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076c6:	f023 0302 	bic.w	r3, r3, #2
 80076ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr

080076da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80076da:	b480      	push	{r7}
 80076dc:	b085      	sub	sp, #20
 80076de:	af00      	add	r7, sp, #0
 80076e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80076f4:	f023 0303 	bic.w	r3, r3, #3
 80076f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	68fa      	ldr	r2, [r7, #12]
 8007704:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007708:	f043 0302 	orr.w	r3, r3, #2
 800770c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	695b      	ldr	r3, [r3, #20]
 8007728:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	68fa      	ldr	r2, [r7, #12]
 8007730:	4013      	ands	r3, r2
 8007732:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007734:	68fb      	ldr	r3, [r7, #12]
}
 8007736:	4618      	mov	r0, r3
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007742:	b480      	push	{r7}
 8007744:	b085      	sub	sp, #20
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800775e:	69db      	ldr	r3, [r3, #28]
 8007760:	68ba      	ldr	r2, [r7, #8]
 8007762:	4013      	ands	r3, r2
 8007764:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	0c1b      	lsrs	r3, r3, #16
}
 800776a:	4618      	mov	r0, r3
 800776c:	3714      	adds	r7, #20
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007776:	b480      	push	{r7}
 8007778:	b085      	sub	sp, #20
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007792:	69db      	ldr	r3, [r3, #28]
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	4013      	ands	r3, r2
 8007798:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	b29b      	uxth	r3, r3
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80077aa:	b480      	push	{r7}
 80077ac:	b085      	sub	sp, #20
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	460b      	mov	r3, r1
 80077b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80077ba:	78fb      	ldrb	r3, [r7, #3]
 80077bc:	015a      	lsls	r2, r3, #5
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	4413      	add	r3, r2
 80077c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	4013      	ands	r3, r2
 80077d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80077d8:	68bb      	ldr	r3, [r7, #8]
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr

080077e6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80077e6:	b480      	push	{r7}
 80077e8:	b087      	sub	sp, #28
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	6078      	str	r0, [r7, #4]
 80077ee:	460b      	mov	r3, r1
 80077f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007806:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007808:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800780a:	78fb      	ldrb	r3, [r7, #3]
 800780c:	f003 030f 	and.w	r3, r3, #15
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	fa22 f303 	lsr.w	r3, r2, r3
 8007816:	01db      	lsls	r3, r3, #7
 8007818:	b2db      	uxtb	r3, r3
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	4313      	orrs	r3, r2
 800781e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007820:	78fb      	ldrb	r3, [r7, #3]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	4413      	add	r3, r2
 8007828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	693a      	ldr	r2, [r7, #16]
 8007830:	4013      	ands	r3, r2
 8007832:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007834:	68bb      	ldr	r3, [r7, #8]
}
 8007836:	4618      	mov	r0, r3
 8007838:	371c      	adds	r7, #28
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr

08007842 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007842:	b480      	push	{r7}
 8007844:	b083      	sub	sp, #12
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	f003 0301 	and.w	r3, r3, #1
}
 8007852:	4618      	mov	r0, r3
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800785e:	b480      	push	{r7}
 8007860:	b085      	sub	sp, #20
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007878:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800787c:	f023 0307 	bic.w	r3, r3, #7
 8007880:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	68fa      	ldr	r2, [r7, #12]
 800788c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007890:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007894:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3714      	adds	r7, #20
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	460b      	mov	r3, r1
 80078ae:	607a      	str	r2, [r7, #4]
 80078b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	333c      	adds	r3, #60	@ 0x3c
 80078ba:	3304      	adds	r3, #4
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	4a26      	ldr	r2, [pc, #152]	@ (800795c <USB_EP0_OutStart+0xb8>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d90a      	bls.n	80078de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80078d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80078d8:	d101      	bne.n	80078de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80078da:	2300      	movs	r3, #0
 80078dc:	e037      	b.n	800794e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078e4:	461a      	mov	r2, r3
 80078e6:	2300      	movs	r3, #0
 80078e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	697a      	ldr	r2, [r7, #20]
 80078f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80078fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800790c:	f043 0318 	orr.w	r3, r3, #24
 8007910:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	697a      	ldr	r2, [r7, #20]
 800791c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007920:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007924:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007926:	7afb      	ldrb	r3, [r7, #11]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d10f      	bne.n	800794c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007932:	461a      	mov	r2, r3
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007946:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800794a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800794c:	2300      	movs	r3, #0
}
 800794e:	4618      	mov	r0, r3
 8007950:	371c      	adds	r7, #28
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	4f54300a 	.word	0x4f54300a

08007960 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007960:	b480      	push	{r7}
 8007962:	b085      	sub	sp, #20
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007968:	2300      	movs	r3, #0
 800796a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	3301      	adds	r3, #1
 8007970:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007978:	d901      	bls.n	800797e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e01b      	b.n	80079b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	daf2      	bge.n	800796c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007986:	2300      	movs	r3, #0
 8007988:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	691b      	ldr	r3, [r3, #16]
 800798e:	f043 0201 	orr.w	r2, r3, #1
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	3301      	adds	r3, #1
 800799a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079a2:	d901      	bls.n	80079a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80079a4:	2303      	movs	r3, #3
 80079a6:	e006      	b.n	80079b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	691b      	ldr	r3, [r3, #16]
 80079ac:	f003 0301 	and.w	r3, r3, #1
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d0f0      	beq.n	8007996 <USB_CoreReset+0x36>

  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3714      	adds	r7, #20
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr
	...

080079c4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	460b      	mov	r3, r1
 80079ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80079d0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80079d4:	f002 fc38 	bl	800a248 <USBD_static_malloc>
 80079d8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d109      	bne.n	80079f4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	32b0      	adds	r2, #176	@ 0xb0
 80079ea:	2100      	movs	r1, #0
 80079ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80079f0:	2302      	movs	r3, #2
 80079f2:	e0d4      	b.n	8007b9e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80079f4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80079f8:	2100      	movs	r1, #0
 80079fa:	68f8      	ldr	r0, [r7, #12]
 80079fc:	f003 f9a2 	bl	800ad44 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	32b0      	adds	r2, #176	@ 0xb0
 8007a0a:	68f9      	ldr	r1, [r7, #12]
 8007a0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	32b0      	adds	r2, #176	@ 0xb0
 8007a1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	7c1b      	ldrb	r3, [r3, #16]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d138      	bne.n	8007a9e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007a2c:	4b5e      	ldr	r3, [pc, #376]	@ (8007ba8 <USBD_CDC_Init+0x1e4>)
 8007a2e:	7819      	ldrb	r1, [r3, #0]
 8007a30:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a34:	2202      	movs	r2, #2
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f002 fae3 	bl	800a002 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007a3c:	4b5a      	ldr	r3, [pc, #360]	@ (8007ba8 <USBD_CDC_Init+0x1e4>)
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	f003 020f 	and.w	r2, r3, #15
 8007a44:	6879      	ldr	r1, [r7, #4]
 8007a46:	4613      	mov	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	440b      	add	r3, r1
 8007a50:	3324      	adds	r3, #36	@ 0x24
 8007a52:	2201      	movs	r2, #1
 8007a54:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007a56:	4b55      	ldr	r3, [pc, #340]	@ (8007bac <USBD_CDC_Init+0x1e8>)
 8007a58:	7819      	ldrb	r1, [r3, #0]
 8007a5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a5e:	2202      	movs	r2, #2
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f002 face 	bl	800a002 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007a66:	4b51      	ldr	r3, [pc, #324]	@ (8007bac <USBD_CDC_Init+0x1e8>)
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	f003 020f 	and.w	r2, r3, #15
 8007a6e:	6879      	ldr	r1, [r7, #4]
 8007a70:	4613      	mov	r3, r2
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	4413      	add	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	440b      	add	r3, r1
 8007a7a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007a7e:	2201      	movs	r2, #1
 8007a80:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007a82:	4b4b      	ldr	r3, [pc, #300]	@ (8007bb0 <USBD_CDC_Init+0x1ec>)
 8007a84:	781b      	ldrb	r3, [r3, #0]
 8007a86:	f003 020f 	and.w	r2, r3, #15
 8007a8a:	6879      	ldr	r1, [r7, #4]
 8007a8c:	4613      	mov	r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	4413      	add	r3, r2
 8007a92:	009b      	lsls	r3, r3, #2
 8007a94:	440b      	add	r3, r1
 8007a96:	3326      	adds	r3, #38	@ 0x26
 8007a98:	2210      	movs	r2, #16
 8007a9a:	801a      	strh	r2, [r3, #0]
 8007a9c:	e035      	b.n	8007b0a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007a9e:	4b42      	ldr	r3, [pc, #264]	@ (8007ba8 <USBD_CDC_Init+0x1e4>)
 8007aa0:	7819      	ldrb	r1, [r3, #0]
 8007aa2:	2340      	movs	r3, #64	@ 0x40
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f002 faab 	bl	800a002 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007aac:	4b3e      	ldr	r3, [pc, #248]	@ (8007ba8 <USBD_CDC_Init+0x1e4>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	f003 020f 	and.w	r2, r3, #15
 8007ab4:	6879      	ldr	r1, [r7, #4]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	4413      	add	r3, r2
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	440b      	add	r3, r1
 8007ac0:	3324      	adds	r3, #36	@ 0x24
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007ac6:	4b39      	ldr	r3, [pc, #228]	@ (8007bac <USBD_CDC_Init+0x1e8>)
 8007ac8:	7819      	ldrb	r1, [r3, #0]
 8007aca:	2340      	movs	r3, #64	@ 0x40
 8007acc:	2202      	movs	r2, #2
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f002 fa97 	bl	800a002 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007ad4:	4b35      	ldr	r3, [pc, #212]	@ (8007bac <USBD_CDC_Init+0x1e8>)
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	f003 020f 	and.w	r2, r3, #15
 8007adc:	6879      	ldr	r1, [r7, #4]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	009b      	lsls	r3, r3, #2
 8007ae2:	4413      	add	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	440b      	add	r3, r1
 8007ae8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007aec:	2201      	movs	r2, #1
 8007aee:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007af0:	4b2f      	ldr	r3, [pc, #188]	@ (8007bb0 <USBD_CDC_Init+0x1ec>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	f003 020f 	and.w	r2, r3, #15
 8007af8:	6879      	ldr	r1, [r7, #4]
 8007afa:	4613      	mov	r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	4413      	add	r3, r2
 8007b00:	009b      	lsls	r3, r3, #2
 8007b02:	440b      	add	r3, r1
 8007b04:	3326      	adds	r3, #38	@ 0x26
 8007b06:	2210      	movs	r2, #16
 8007b08:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007b0a:	4b29      	ldr	r3, [pc, #164]	@ (8007bb0 <USBD_CDC_Init+0x1ec>)
 8007b0c:	7819      	ldrb	r1, [r3, #0]
 8007b0e:	2308      	movs	r3, #8
 8007b10:	2203      	movs	r2, #3
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f002 fa75 	bl	800a002 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007b18:	4b25      	ldr	r3, [pc, #148]	@ (8007bb0 <USBD_CDC_Init+0x1ec>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	f003 020f 	and.w	r2, r3, #15
 8007b20:	6879      	ldr	r1, [r7, #4]
 8007b22:	4613      	mov	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4413      	add	r3, r2
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	440b      	add	r3, r1
 8007b2c:	3324      	adds	r3, #36	@ 0x24
 8007b2e:	2201      	movs	r2, #1
 8007b30:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	33b0      	adds	r3, #176	@ 0xb0
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d101      	bne.n	8007b6c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007b68:	2302      	movs	r3, #2
 8007b6a:	e018      	b.n	8007b9e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	7c1b      	ldrb	r3, [r3, #16]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10a      	bne.n	8007b8a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b74:	4b0d      	ldr	r3, [pc, #52]	@ (8007bac <USBD_CDC_Init+0x1e8>)
 8007b76:	7819      	ldrb	r1, [r3, #0]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f002 fb2c 	bl	800a1e0 <USBD_LL_PrepareReceive>
 8007b88:	e008      	b.n	8007b9c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b8a:	4b08      	ldr	r3, [pc, #32]	@ (8007bac <USBD_CDC_Init+0x1e8>)
 8007b8c:	7819      	ldrb	r1, [r3, #0]
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b94:	2340      	movs	r3, #64	@ 0x40
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f002 fb22 	bl	800a1e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3710      	adds	r7, #16
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	2000009f 	.word	0x2000009f
 8007bac:	200000a0 	.word	0x200000a0
 8007bb0:	200000a1 	.word	0x200000a1

08007bb4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007bc0:	4b3a      	ldr	r3, [pc, #232]	@ (8007cac <USBD_CDC_DeInit+0xf8>)
 8007bc2:	781b      	ldrb	r3, [r3, #0]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f002 fa41 	bl	800a04e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007bcc:	4b37      	ldr	r3, [pc, #220]	@ (8007cac <USBD_CDC_DeInit+0xf8>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	f003 020f 	and.w	r2, r3, #15
 8007bd4:	6879      	ldr	r1, [r7, #4]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	440b      	add	r3, r1
 8007be0:	3324      	adds	r3, #36	@ 0x24
 8007be2:	2200      	movs	r2, #0
 8007be4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007be6:	4b32      	ldr	r3, [pc, #200]	@ (8007cb0 <USBD_CDC_DeInit+0xfc>)
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	4619      	mov	r1, r3
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f002 fa2e 	bl	800a04e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007bf2:	4b2f      	ldr	r3, [pc, #188]	@ (8007cb0 <USBD_CDC_DeInit+0xfc>)
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	f003 020f 	and.w	r2, r3, #15
 8007bfa:	6879      	ldr	r1, [r7, #4]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	009b      	lsls	r3, r3, #2
 8007c00:	4413      	add	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	440b      	add	r3, r1
 8007c06:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007c0e:	4b29      	ldr	r3, [pc, #164]	@ (8007cb4 <USBD_CDC_DeInit+0x100>)
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	4619      	mov	r1, r3
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f002 fa1a 	bl	800a04e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007c1a:	4b26      	ldr	r3, [pc, #152]	@ (8007cb4 <USBD_CDC_DeInit+0x100>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	f003 020f 	and.w	r2, r3, #15
 8007c22:	6879      	ldr	r1, [r7, #4]
 8007c24:	4613      	mov	r3, r2
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4413      	add	r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	440b      	add	r3, r1
 8007c2e:	3324      	adds	r3, #36	@ 0x24
 8007c30:	2200      	movs	r2, #0
 8007c32:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007c34:	4b1f      	ldr	r3, [pc, #124]	@ (8007cb4 <USBD_CDC_DeInit+0x100>)
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	f003 020f 	and.w	r2, r3, #15
 8007c3c:	6879      	ldr	r1, [r7, #4]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	009b      	lsls	r3, r3, #2
 8007c46:	440b      	add	r3, r1
 8007c48:	3326      	adds	r3, #38	@ 0x26
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	32b0      	adds	r2, #176	@ 0xb0
 8007c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d01f      	beq.n	8007ca0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c66:	687a      	ldr	r2, [r7, #4]
 8007c68:	33b0      	adds	r3, #176	@ 0xb0
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	4413      	add	r3, r2
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	32b0      	adds	r2, #176	@ 0xb0
 8007c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c82:	4618      	mov	r0, r3
 8007c84:	f002 faee 	bl	800a264 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	32b0      	adds	r2, #176	@ 0xb0
 8007c92:	2100      	movs	r1, #0
 8007c94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
 8007caa:	bf00      	nop
 8007cac:	2000009f 	.word	0x2000009f
 8007cb0:	200000a0 	.word	0x200000a0
 8007cb4:	200000a1 	.word	0x200000a1

08007cb8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	32b0      	adds	r2, #176	@ 0xb0
 8007ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cd0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	e0bf      	b.n	8007e68 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d050      	beq.n	8007d96 <USBD_CDC_Setup+0xde>
 8007cf4:	2b20      	cmp	r3, #32
 8007cf6:	f040 80af 	bne.w	8007e58 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	88db      	ldrh	r3, [r3, #6]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d03a      	beq.n	8007d78 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	b25b      	sxtb	r3, r3
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	da1b      	bge.n	8007d44 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	33b0      	adds	r3, #176	@ 0xb0
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	689b      	ldr	r3, [r3, #8]
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007d22:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d24:	683a      	ldr	r2, [r7, #0]
 8007d26:	88d2      	ldrh	r2, [r2, #6]
 8007d28:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	88db      	ldrh	r3, [r3, #6]
 8007d2e:	2b07      	cmp	r3, #7
 8007d30:	bf28      	it	cs
 8007d32:	2307      	movcs	r3, #7
 8007d34:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	89fa      	ldrh	r2, [r7, #14]
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f001 fd53 	bl	80097e8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007d42:	e090      	b.n	8007e66 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007d44:	683b      	ldr	r3, [r7, #0]
 8007d46:	785a      	ldrb	r2, [r3, #1]
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	88db      	ldrh	r3, [r3, #6]
 8007d52:	2b3f      	cmp	r3, #63	@ 0x3f
 8007d54:	d803      	bhi.n	8007d5e <USBD_CDC_Setup+0xa6>
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	88db      	ldrh	r3, [r3, #6]
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	e000      	b.n	8007d60 <USBD_CDC_Setup+0xa8>
 8007d5e:	2240      	movs	r2, #64	@ 0x40
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007d66:	6939      	ldr	r1, [r7, #16]
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007d6e:	461a      	mov	r2, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f001 fd65 	bl	8009840 <USBD_CtlPrepareRx>
      break;
 8007d76:	e076      	b.n	8007e66 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	33b0      	adds	r3, #176	@ 0xb0
 8007d82:	009b      	lsls	r3, r3, #2
 8007d84:	4413      	add	r3, r2
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	683a      	ldr	r2, [r7, #0]
 8007d8c:	7850      	ldrb	r0, [r2, #1]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	4798      	blx	r3
      break;
 8007d94:	e067      	b.n	8007e66 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	785b      	ldrb	r3, [r3, #1]
 8007d9a:	2b0b      	cmp	r3, #11
 8007d9c:	d851      	bhi.n	8007e42 <USBD_CDC_Setup+0x18a>
 8007d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007da4 <USBD_CDC_Setup+0xec>)
 8007da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da4:	08007dd5 	.word	0x08007dd5
 8007da8:	08007e51 	.word	0x08007e51
 8007dac:	08007e43 	.word	0x08007e43
 8007db0:	08007e43 	.word	0x08007e43
 8007db4:	08007e43 	.word	0x08007e43
 8007db8:	08007e43 	.word	0x08007e43
 8007dbc:	08007e43 	.word	0x08007e43
 8007dc0:	08007e43 	.word	0x08007e43
 8007dc4:	08007e43 	.word	0x08007e43
 8007dc8:	08007e43 	.word	0x08007e43
 8007dcc:	08007dff 	.word	0x08007dff
 8007dd0:	08007e29 	.word	0x08007e29
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dda:	b2db      	uxtb	r3, r3
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d107      	bne.n	8007df0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007de0:	f107 030a 	add.w	r3, r7, #10
 8007de4:	2202      	movs	r2, #2
 8007de6:	4619      	mov	r1, r3
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f001 fcfd 	bl	80097e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007dee:	e032      	b.n	8007e56 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f001 fc7b 	bl	80096ee <USBD_CtlError>
            ret = USBD_FAIL;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	75fb      	strb	r3, [r7, #23]
          break;
 8007dfc:	e02b      	b.n	8007e56 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b03      	cmp	r3, #3
 8007e08:	d107      	bne.n	8007e1a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007e0a:	f107 030d 	add.w	r3, r7, #13
 8007e0e:	2201      	movs	r2, #1
 8007e10:	4619      	mov	r1, r3
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f001 fce8 	bl	80097e8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007e18:	e01d      	b.n	8007e56 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007e1a:	6839      	ldr	r1, [r7, #0]
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f001 fc66 	bl	80096ee <USBD_CtlError>
            ret = USBD_FAIL;
 8007e22:	2303      	movs	r3, #3
 8007e24:	75fb      	strb	r3, [r7, #23]
          break;
 8007e26:	e016      	b.n	8007e56 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	2b03      	cmp	r3, #3
 8007e32:	d00f      	beq.n	8007e54 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f001 fc59 	bl	80096ee <USBD_CtlError>
            ret = USBD_FAIL;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007e40:	e008      	b.n	8007e54 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007e42:	6839      	ldr	r1, [r7, #0]
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f001 fc52 	bl	80096ee <USBD_CtlError>
          ret = USBD_FAIL;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	75fb      	strb	r3, [r7, #23]
          break;
 8007e4e:	e002      	b.n	8007e56 <USBD_CDC_Setup+0x19e>
          break;
 8007e50:	bf00      	nop
 8007e52:	e008      	b.n	8007e66 <USBD_CDC_Setup+0x1ae>
          break;
 8007e54:	bf00      	nop
      }
      break;
 8007e56:	e006      	b.n	8007e66 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f001 fc47 	bl	80096ee <USBD_CtlError>
      ret = USBD_FAIL;
 8007e60:	2303      	movs	r3, #3
 8007e62:	75fb      	strb	r3, [r7, #23]
      break;
 8007e64:	bf00      	nop
  }

  return (uint8_t)ret;
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	460b      	mov	r3, r1
 8007e7a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e82:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	32b0      	adds	r2, #176	@ 0xb0
 8007e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d101      	bne.n	8007e9a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e065      	b.n	8007f66 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	32b0      	adds	r2, #176	@ 0xb0
 8007ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007eaa:	78fb      	ldrb	r3, [r7, #3]
 8007eac:	f003 020f 	and.w	r2, r3, #15
 8007eb0:	6879      	ldr	r1, [r7, #4]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	4413      	add	r3, r2
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	440b      	add	r3, r1
 8007ebc:	3318      	adds	r3, #24
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d02f      	beq.n	8007f24 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007ec4:	78fb      	ldrb	r3, [r7, #3]
 8007ec6:	f003 020f 	and.w	r2, r3, #15
 8007eca:	6879      	ldr	r1, [r7, #4]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	009b      	lsls	r3, r3, #2
 8007ed0:	4413      	add	r3, r2
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	440b      	add	r3, r1
 8007ed6:	3318      	adds	r3, #24
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	78fb      	ldrb	r3, [r7, #3]
 8007edc:	f003 010f 	and.w	r1, r3, #15
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	460b      	mov	r3, r1
 8007ee4:	00db      	lsls	r3, r3, #3
 8007ee6:	440b      	add	r3, r1
 8007ee8:	009b      	lsls	r3, r3, #2
 8007eea:	4403      	add	r3, r0
 8007eec:	331c      	adds	r3, #28
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	fbb2 f1f3 	udiv	r1, r2, r3
 8007ef4:	fb01 f303 	mul.w	r3, r1, r3
 8007ef8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d112      	bne.n	8007f24 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007efe:	78fb      	ldrb	r3, [r7, #3]
 8007f00:	f003 020f 	and.w	r2, r3, #15
 8007f04:	6879      	ldr	r1, [r7, #4]
 8007f06:	4613      	mov	r3, r2
 8007f08:	009b      	lsls	r3, r3, #2
 8007f0a:	4413      	add	r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	440b      	add	r3, r1
 8007f10:	3318      	adds	r3, #24
 8007f12:	2200      	movs	r2, #0
 8007f14:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007f16:	78f9      	ldrb	r1, [r7, #3]
 8007f18:	2300      	movs	r3, #0
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f002 f93e 	bl	800a19e <USBD_LL_Transmit>
 8007f22:	e01f      	b.n	8007f64 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2200      	movs	r2, #0
 8007f28:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	33b0      	adds	r3, #176	@ 0xb0
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4413      	add	r3, r2
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d010      	beq.n	8007f64 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	33b0      	adds	r3, #176	@ 0xb0
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	4413      	add	r3, r2
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	68ba      	ldr	r2, [r7, #8]
 8007f56:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007f5a:	68ba      	ldr	r2, [r7, #8]
 8007f5c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007f60:	78fa      	ldrb	r2, [r7, #3]
 8007f62:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007f64:	2300      	movs	r3, #0
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	460b      	mov	r3, r1
 8007f78:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	32b0      	adds	r2, #176	@ 0xb0
 8007f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f88:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	32b0      	adds	r2, #176	@ 0xb0
 8007f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d101      	bne.n	8007fa0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007f9c:	2303      	movs	r3, #3
 8007f9e:	e01a      	b.n	8007fd6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007fa0:	78fb      	ldrb	r3, [r7, #3]
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f002 f93c 	bl	800a222 <USBD_LL_GetRxDataSize>
 8007faa:	4602      	mov	r2, r0
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fb8:	687a      	ldr	r2, [r7, #4]
 8007fba:	33b0      	adds	r3, #176	@ 0xb0
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	68fa      	ldr	r2, [r7, #12]
 8007fc6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b084      	sub	sp, #16
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	32b0      	adds	r2, #176	@ 0xb0
 8007ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e024      	b.n	800804a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	33b0      	adds	r3, #176	@ 0xb0
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4413      	add	r3, r2
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d019      	beq.n	8008048 <USBD_CDC_EP0_RxReady+0x6a>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800801a:	2bff      	cmp	r3, #255	@ 0xff
 800801c:	d014      	beq.n	8008048 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008024:	687a      	ldr	r2, [r7, #4]
 8008026:	33b0      	adds	r3, #176	@ 0xb0
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	4413      	add	r3, r2
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	689b      	ldr	r3, [r3, #8]
 8008030:	68fa      	ldr	r2, [r7, #12]
 8008032:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008036:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800803e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	22ff      	movs	r2, #255	@ 0xff
 8008044:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
	...

08008054 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b086      	sub	sp, #24
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800805c:	2182      	movs	r1, #130	@ 0x82
 800805e:	4818      	ldr	r0, [pc, #96]	@ (80080c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008060:	f000 fd0f 	bl	8008a82 <USBD_GetEpDesc>
 8008064:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008066:	2101      	movs	r1, #1
 8008068:	4815      	ldr	r0, [pc, #84]	@ (80080c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800806a:	f000 fd0a 	bl	8008a82 <USBD_GetEpDesc>
 800806e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008070:	2181      	movs	r1, #129	@ 0x81
 8008072:	4813      	ldr	r0, [pc, #76]	@ (80080c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008074:	f000 fd05 	bl	8008a82 <USBD_GetEpDesc>
 8008078:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d002      	beq.n	8008086 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	2210      	movs	r2, #16
 8008084:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d006      	beq.n	800809a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	2200      	movs	r2, #0
 8008090:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008094:	711a      	strb	r2, [r3, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d006      	beq.n	80080ae <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2200      	movs	r2, #0
 80080a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80080a8:	711a      	strb	r2, [r3, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2243      	movs	r2, #67	@ 0x43
 80080b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80080b4:	4b02      	ldr	r3, [pc, #8]	@ (80080c0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3718      	adds	r7, #24
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	2000005c 	.word	0x2000005c

080080c4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b086      	sub	sp, #24
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80080cc:	2182      	movs	r1, #130	@ 0x82
 80080ce:	4818      	ldr	r0, [pc, #96]	@ (8008130 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80080d0:	f000 fcd7 	bl	8008a82 <USBD_GetEpDesc>
 80080d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80080d6:	2101      	movs	r1, #1
 80080d8:	4815      	ldr	r0, [pc, #84]	@ (8008130 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80080da:	f000 fcd2 	bl	8008a82 <USBD_GetEpDesc>
 80080de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80080e0:	2181      	movs	r1, #129	@ 0x81
 80080e2:	4813      	ldr	r0, [pc, #76]	@ (8008130 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80080e4:	f000 fccd 	bl	8008a82 <USBD_GetEpDesc>
 80080e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d002      	beq.n	80080f6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	2210      	movs	r2, #16
 80080f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d006      	beq.n	800810a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	2200      	movs	r2, #0
 8008100:	711a      	strb	r2, [r3, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	f042 0202 	orr.w	r2, r2, #2
 8008108:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d006      	beq.n	800811e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2200      	movs	r2, #0
 8008114:	711a      	strb	r2, [r3, #4]
 8008116:	2200      	movs	r2, #0
 8008118:	f042 0202 	orr.w	r2, r2, #2
 800811c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2243      	movs	r2, #67	@ 0x43
 8008122:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008124:	4b02      	ldr	r3, [pc, #8]	@ (8008130 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008126:	4618      	mov	r0, r3
 8008128:	3718      	adds	r7, #24
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	2000005c 	.word	0x2000005c

08008134 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800813c:	2182      	movs	r1, #130	@ 0x82
 800813e:	4818      	ldr	r0, [pc, #96]	@ (80081a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008140:	f000 fc9f 	bl	8008a82 <USBD_GetEpDesc>
 8008144:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008146:	2101      	movs	r1, #1
 8008148:	4815      	ldr	r0, [pc, #84]	@ (80081a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800814a:	f000 fc9a 	bl	8008a82 <USBD_GetEpDesc>
 800814e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008150:	2181      	movs	r1, #129	@ 0x81
 8008152:	4813      	ldr	r0, [pc, #76]	@ (80081a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008154:	f000 fc95 	bl	8008a82 <USBD_GetEpDesc>
 8008158:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d002      	beq.n	8008166 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	2210      	movs	r2, #16
 8008164:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d006      	beq.n	800817a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	2200      	movs	r2, #0
 8008170:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008174:	711a      	strb	r2, [r3, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d006      	beq.n	800818e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2200      	movs	r2, #0
 8008184:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008188:	711a      	strb	r2, [r3, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2243      	movs	r2, #67	@ 0x43
 8008192:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008194:	4b02      	ldr	r3, [pc, #8]	@ (80081a0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008196:	4618      	mov	r0, r3
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	2000005c 	.word	0x2000005c

080081a4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	220a      	movs	r2, #10
 80081b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80081b2:	4b03      	ldr	r3, [pc, #12]	@ (80081c0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	370c      	adds	r7, #12
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	20000018 	.word	0x20000018

080081c4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d101      	bne.n	80081d8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80081d4:	2303      	movs	r3, #3
 80081d6:	e009      	b.n	80081ec <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	33b0      	adds	r3, #176	@ 0xb0
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr

080081f8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80081f8:	b480      	push	{r7}
 80081fa:	b087      	sub	sp, #28
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	32b0      	adds	r2, #176	@ 0xb0
 800820e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008212:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d101      	bne.n	800821e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800821a:	2303      	movs	r3, #3
 800821c:	e008      	b.n	8008230 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	68ba      	ldr	r2, [r7, #8]
 8008222:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	687a      	ldr	r2, [r7, #4]
 800822a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	371c      	adds	r7, #28
 8008234:	46bd      	mov	sp, r7
 8008236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823a:	4770      	bx	lr

0800823c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800823c:	b480      	push	{r7}
 800823e:	b085      	sub	sp, #20
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	32b0      	adds	r2, #176	@ 0xb0
 8008250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008254:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d101      	bne.n	8008260 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800825c:	2303      	movs	r3, #3
 800825e:	e004      	b.n	800826a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	683a      	ldr	r2, [r7, #0]
 8008264:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3714      	adds	r7, #20
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr
	...

08008278 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	32b0      	adds	r2, #176	@ 0xb0
 800828a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800828e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	32b0      	adds	r2, #176	@ 0xb0
 800829a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d101      	bne.n	80082a6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e018      	b.n	80082d8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	7c1b      	ldrb	r3, [r3, #16]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d10a      	bne.n	80082c4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80082ae:	4b0c      	ldr	r3, [pc, #48]	@ (80082e0 <USBD_CDC_ReceivePacket+0x68>)
 80082b0:	7819      	ldrb	r1, [r3, #0]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80082b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f001 ff8f 	bl	800a1e0 <USBD_LL_PrepareReceive>
 80082c2:	e008      	b.n	80082d6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80082c4:	4b06      	ldr	r3, [pc, #24]	@ (80082e0 <USBD_CDC_ReceivePacket+0x68>)
 80082c6:	7819      	ldrb	r1, [r3, #0]
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80082ce:	2340      	movs	r3, #64	@ 0x40
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f001 ff85 	bl	800a1e0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	200000a0 	.word	0x200000a0

080082e4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	4613      	mov	r3, r2
 80082f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d101      	bne.n	80082fc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80082f8:	2303      	movs	r3, #3
 80082fa:	e01f      	b.n	800833c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2200      	movs	r2, #0
 8008300:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2200      	movs	r2, #0
 8008308:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2200      	movs	r2, #0
 8008310:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d003      	beq.n	8008322 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2201      	movs	r2, #1
 8008326:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	79fa      	ldrb	r2, [r7, #7]
 800832e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f001 fdff 	bl	8009f34 <USBD_LL_Init>
 8008336:	4603      	mov	r3, r0
 8008338:	75fb      	strb	r3, [r7, #23]

  return ret;
 800833a:	7dfb      	ldrb	r3, [r7, #23]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3718      	adds	r7, #24
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800834e:	2300      	movs	r3, #0
 8008350:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d101      	bne.n	800835c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008358:	2303      	movs	r3, #3
 800835a:	e025      	b.n	80083a8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	683a      	ldr	r2, [r7, #0]
 8008360:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	32ae      	adds	r2, #174	@ 0xae
 800836e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008374:	2b00      	cmp	r3, #0
 8008376:	d00f      	beq.n	8008398 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	32ae      	adds	r2, #174	@ 0xae
 8008382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008388:	f107 020e 	add.w	r2, r7, #14
 800838c:	4610      	mov	r0, r2
 800838e:	4798      	blx	r3
 8008390:	4602      	mov	r2, r0
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800839e:	1c5a      	adds	r2, r3, #1
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3710      	adds	r7, #16
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b082      	sub	sp, #8
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f001 fe07 	bl	8009fcc <USBD_LL_Start>
 80083be:	4603      	mov	r3, r0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80083d0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	370c      	adds	r7, #12
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b084      	sub	sp, #16
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
 80083e6:	460b      	mov	r3, r1
 80083e8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80083ea:	2300      	movs	r3, #0
 80083ec:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d009      	beq.n	800840c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	78fa      	ldrb	r2, [r7, #3]
 8008402:	4611      	mov	r1, r2
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	4798      	blx	r3
 8008408:	4603      	mov	r3, r0
 800840a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800840c:	7bfb      	ldrb	r3, [r7, #15]
}
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008416:	b580      	push	{r7, lr}
 8008418:	b084      	sub	sp, #16
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	460b      	mov	r3, r1
 8008420:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008422:	2300      	movs	r3, #0
 8008424:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800842c:	685b      	ldr	r3, [r3, #4]
 800842e:	78fa      	ldrb	r2, [r7, #3]
 8008430:	4611      	mov	r1, r2
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	4798      	blx	r3
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d001      	beq.n	8008440 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800843c:	2303      	movs	r3, #3
 800843e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008440:	7bfb      	ldrb	r3, [r7, #15]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3710      	adds	r7, #16
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b084      	sub	sp, #16
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800845a:	6839      	ldr	r1, [r7, #0]
 800845c:	4618      	mov	r0, r3
 800845e:	f001 f90c 	bl	800967a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008470:	461a      	mov	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800847e:	f003 031f 	and.w	r3, r3, #31
 8008482:	2b02      	cmp	r3, #2
 8008484:	d01a      	beq.n	80084bc <USBD_LL_SetupStage+0x72>
 8008486:	2b02      	cmp	r3, #2
 8008488:	d822      	bhi.n	80084d0 <USBD_LL_SetupStage+0x86>
 800848a:	2b00      	cmp	r3, #0
 800848c:	d002      	beq.n	8008494 <USBD_LL_SetupStage+0x4a>
 800848e:	2b01      	cmp	r3, #1
 8008490:	d00a      	beq.n	80084a8 <USBD_LL_SetupStage+0x5e>
 8008492:	e01d      	b.n	80084d0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800849a:	4619      	mov	r1, r3
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fb63 	bl	8008b68 <USBD_StdDevReq>
 80084a2:	4603      	mov	r3, r0
 80084a4:	73fb      	strb	r3, [r7, #15]
      break;
 80084a6:	e020      	b.n	80084ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80084ae:	4619      	mov	r1, r3
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fbcb 	bl	8008c4c <USBD_StdItfReq>
 80084b6:	4603      	mov	r3, r0
 80084b8:	73fb      	strb	r3, [r7, #15]
      break;
 80084ba:	e016      	b.n	80084ea <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fc2d 	bl	8008d24 <USBD_StdEPReq>
 80084ca:	4603      	mov	r3, r0
 80084cc:	73fb      	strb	r3, [r7, #15]
      break;
 80084ce:	e00c      	b.n	80084ea <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80084d6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	4619      	mov	r1, r3
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f001 fdd4 	bl	800a08c <USBD_LL_StallEP>
 80084e4:	4603      	mov	r3, r0
 80084e6:	73fb      	strb	r3, [r7, #15]
      break;
 80084e8:	bf00      	nop
  }

  return ret;
 80084ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b086      	sub	sp, #24
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	60f8      	str	r0, [r7, #12]
 80084fc:	460b      	mov	r3, r1
 80084fe:	607a      	str	r2, [r7, #4]
 8008500:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008502:	2300      	movs	r3, #0
 8008504:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008506:	7afb      	ldrb	r3, [r7, #11]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d16e      	bne.n	80085ea <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008512:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800851a:	2b03      	cmp	r3, #3
 800851c:	f040 8098 	bne.w	8008650 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	689a      	ldr	r2, [r3, #8]
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	68db      	ldr	r3, [r3, #12]
 8008528:	429a      	cmp	r2, r3
 800852a:	d913      	bls.n	8008554 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	689a      	ldr	r2, [r3, #8]
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	1ad2      	subs	r2, r2, r3
 8008536:	693b      	ldr	r3, [r7, #16]
 8008538:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	68da      	ldr	r2, [r3, #12]
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	4293      	cmp	r3, r2
 8008544:	bf28      	it	cs
 8008546:	4613      	movcs	r3, r2
 8008548:	461a      	mov	r2, r3
 800854a:	6879      	ldr	r1, [r7, #4]
 800854c:	68f8      	ldr	r0, [r7, #12]
 800854e:	f001 f994 	bl	800987a <USBD_CtlContinueRx>
 8008552:	e07d      	b.n	8008650 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800855a:	f003 031f 	and.w	r3, r3, #31
 800855e:	2b02      	cmp	r3, #2
 8008560:	d014      	beq.n	800858c <USBD_LL_DataOutStage+0x98>
 8008562:	2b02      	cmp	r3, #2
 8008564:	d81d      	bhi.n	80085a2 <USBD_LL_DataOutStage+0xae>
 8008566:	2b00      	cmp	r3, #0
 8008568:	d002      	beq.n	8008570 <USBD_LL_DataOutStage+0x7c>
 800856a:	2b01      	cmp	r3, #1
 800856c:	d003      	beq.n	8008576 <USBD_LL_DataOutStage+0x82>
 800856e:	e018      	b.n	80085a2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008570:	2300      	movs	r3, #0
 8008572:	75bb      	strb	r3, [r7, #22]
            break;
 8008574:	e018      	b.n	80085a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800857c:	b2db      	uxtb	r3, r3
 800857e:	4619      	mov	r1, r3
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f000 fa64 	bl	8008a4e <USBD_CoreFindIF>
 8008586:	4603      	mov	r3, r0
 8008588:	75bb      	strb	r3, [r7, #22]
            break;
 800858a:	e00d      	b.n	80085a8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008592:	b2db      	uxtb	r3, r3
 8008594:	4619      	mov	r1, r3
 8008596:	68f8      	ldr	r0, [r7, #12]
 8008598:	f000 fa66 	bl	8008a68 <USBD_CoreFindEP>
 800859c:	4603      	mov	r3, r0
 800859e:	75bb      	strb	r3, [r7, #22]
            break;
 80085a0:	e002      	b.n	80085a8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80085a2:	2300      	movs	r3, #0
 80085a4:	75bb      	strb	r3, [r7, #22]
            break;
 80085a6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80085a8:	7dbb      	ldrb	r3, [r7, #22]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d119      	bne.n	80085e2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085b4:	b2db      	uxtb	r3, r3
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	d113      	bne.n	80085e2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80085ba:	7dba      	ldrb	r2, [r7, #22]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	32ae      	adds	r2, #174	@ 0xae
 80085c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00b      	beq.n	80085e2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80085ca:	7dba      	ldrb	r2, [r7, #22]
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80085d2:	7dba      	ldrb	r2, [r7, #22]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	32ae      	adds	r2, #174	@ 0xae
 80085d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	68f8      	ldr	r0, [r7, #12]
 80085e0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80085e2:	68f8      	ldr	r0, [r7, #12]
 80085e4:	f001 f95a 	bl	800989c <USBD_CtlSendStatus>
 80085e8:	e032      	b.n	8008650 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80085ea:	7afb      	ldrb	r3, [r7, #11]
 80085ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085f0:	b2db      	uxtb	r3, r3
 80085f2:	4619      	mov	r1, r3
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f000 fa37 	bl	8008a68 <USBD_CoreFindEP>
 80085fa:	4603      	mov	r3, r0
 80085fc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085fe:	7dbb      	ldrb	r3, [r7, #22]
 8008600:	2bff      	cmp	r3, #255	@ 0xff
 8008602:	d025      	beq.n	8008650 <USBD_LL_DataOutStage+0x15c>
 8008604:	7dbb      	ldrb	r3, [r7, #22]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d122      	bne.n	8008650 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b03      	cmp	r3, #3
 8008614:	d117      	bne.n	8008646 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008616:	7dba      	ldrb	r2, [r7, #22]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	32ae      	adds	r2, #174	@ 0xae
 800861c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d00f      	beq.n	8008646 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008626:	7dba      	ldrb	r2, [r7, #22]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800862e:	7dba      	ldrb	r2, [r7, #22]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	32ae      	adds	r2, #174	@ 0xae
 8008634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	7afa      	ldrb	r2, [r7, #11]
 800863c:	4611      	mov	r1, r2
 800863e:	68f8      	ldr	r0, [r7, #12]
 8008640:	4798      	blx	r3
 8008642:	4603      	mov	r3, r0
 8008644:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008646:	7dfb      	ldrb	r3, [r7, #23]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d001      	beq.n	8008650 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800864c:	7dfb      	ldrb	r3, [r7, #23]
 800864e:	e000      	b.n	8008652 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3718      	adds	r7, #24
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}

0800865a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800865a:	b580      	push	{r7, lr}
 800865c:	b086      	sub	sp, #24
 800865e:	af00      	add	r7, sp, #0
 8008660:	60f8      	str	r0, [r7, #12]
 8008662:	460b      	mov	r3, r1
 8008664:	607a      	str	r2, [r7, #4]
 8008666:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008668:	7afb      	ldrb	r3, [r7, #11]
 800866a:	2b00      	cmp	r3, #0
 800866c:	d16f      	bne.n	800874e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	3314      	adds	r3, #20
 8008672:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800867a:	2b02      	cmp	r3, #2
 800867c:	d15a      	bne.n	8008734 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	689a      	ldr	r2, [r3, #8]
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	429a      	cmp	r2, r3
 8008688:	d914      	bls.n	80086b4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	689a      	ldr	r2, [r3, #8]
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	68db      	ldr	r3, [r3, #12]
 8008692:	1ad2      	subs	r2, r2, r3
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	461a      	mov	r2, r3
 800869e:	6879      	ldr	r1, [r7, #4]
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f001 f8bc 	bl	800981e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086a6:	2300      	movs	r3, #0
 80086a8:	2200      	movs	r2, #0
 80086aa:	2100      	movs	r1, #0
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f001 fd97 	bl	800a1e0 <USBD_LL_PrepareReceive>
 80086b2:	e03f      	b.n	8008734 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	68da      	ldr	r2, [r3, #12]
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d11c      	bne.n	80086fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	685a      	ldr	r2, [r3, #4]
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d316      	bcc.n	80086fa <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	685a      	ldr	r2, [r3, #4]
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d20f      	bcs.n	80086fa <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80086da:	2200      	movs	r2, #0
 80086dc:	2100      	movs	r1, #0
 80086de:	68f8      	ldr	r0, [r7, #12]
 80086e0:	f001 f89d 	bl	800981e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086ec:	2300      	movs	r3, #0
 80086ee:	2200      	movs	r2, #0
 80086f0:	2100      	movs	r1, #0
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f001 fd74 	bl	800a1e0 <USBD_LL_PrepareReceive>
 80086f8:	e01c      	b.n	8008734 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008700:	b2db      	uxtb	r3, r3
 8008702:	2b03      	cmp	r3, #3
 8008704:	d10f      	bne.n	8008726 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d009      	beq.n	8008726 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008726:	2180      	movs	r1, #128	@ 0x80
 8008728:	68f8      	ldr	r0, [r7, #12]
 800872a:	f001 fcaf 	bl	800a08c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f001 f8c7 	bl	80098c2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d03a      	beq.n	80087b4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800873e:	68f8      	ldr	r0, [r7, #12]
 8008740:	f7ff fe42 	bl	80083c8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800874c:	e032      	b.n	80087b4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800874e:	7afb      	ldrb	r3, [r7, #11]
 8008750:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008754:	b2db      	uxtb	r3, r3
 8008756:	4619      	mov	r1, r3
 8008758:	68f8      	ldr	r0, [r7, #12]
 800875a:	f000 f985 	bl	8008a68 <USBD_CoreFindEP>
 800875e:	4603      	mov	r3, r0
 8008760:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008762:	7dfb      	ldrb	r3, [r7, #23]
 8008764:	2bff      	cmp	r3, #255	@ 0xff
 8008766:	d025      	beq.n	80087b4 <USBD_LL_DataInStage+0x15a>
 8008768:	7dfb      	ldrb	r3, [r7, #23]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d122      	bne.n	80087b4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008774:	b2db      	uxtb	r3, r3
 8008776:	2b03      	cmp	r3, #3
 8008778:	d11c      	bne.n	80087b4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800877a:	7dfa      	ldrb	r2, [r7, #23]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	32ae      	adds	r2, #174	@ 0xae
 8008780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d014      	beq.n	80087b4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800878a:	7dfa      	ldrb	r2, [r7, #23]
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008792:	7dfa      	ldrb	r2, [r7, #23]
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	32ae      	adds	r2, #174	@ 0xae
 8008798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800879c:	695b      	ldr	r3, [r3, #20]
 800879e:	7afa      	ldrb	r2, [r7, #11]
 80087a0:	4611      	mov	r1, r2
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	4798      	blx	r3
 80087a6:	4603      	mov	r3, r0
 80087a8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80087aa:	7dbb      	ldrb	r3, [r7, #22]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d001      	beq.n	80087b4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80087b0:	7dbb      	ldrb	r3, [r7, #22]
 80087b2:	e000      	b.n	80087b6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80087b4:	2300      	movs	r3, #0
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3718      	adds	r7, #24
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b084      	sub	sp, #16
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80087c6:	2300      	movs	r3, #0
 80087c8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2201      	movs	r2, #1
 80087ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2200      	movs	r2, #0
 80087e4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d014      	beq.n	8008824 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d00e      	beq.n	8008824 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800880c:	685b      	ldr	r3, [r3, #4]
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	6852      	ldr	r2, [r2, #4]
 8008812:	b2d2      	uxtb	r2, r2
 8008814:	4611      	mov	r1, r2
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	4798      	blx	r3
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008820:	2303      	movs	r3, #3
 8008822:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008824:	2340      	movs	r3, #64	@ 0x40
 8008826:	2200      	movs	r2, #0
 8008828:	2100      	movs	r1, #0
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f001 fbe9 	bl	800a002 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2240      	movs	r2, #64	@ 0x40
 800883c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008840:	2340      	movs	r3, #64	@ 0x40
 8008842:	2200      	movs	r2, #0
 8008844:	2180      	movs	r1, #128	@ 0x80
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f001 fbdb 	bl	800a002 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2240      	movs	r2, #64	@ 0x40
 8008856:	621a      	str	r2, [r3, #32]

  return ret;
 8008858:	7bfb      	ldrb	r3, [r7, #15]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008862:	b480      	push	{r7}
 8008864:	b083      	sub	sp, #12
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
 800886a:	460b      	mov	r3, r1
 800886c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	78fa      	ldrb	r2, [r7, #3]
 8008872:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	370c      	adds	r7, #12
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr

08008882 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008882:	b480      	push	{r7}
 8008884:	b083      	sub	sp, #12
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008890:	b2db      	uxtb	r3, r3
 8008892:	2b04      	cmp	r3, #4
 8008894:	d006      	beq.n	80088a4 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800889c:	b2da      	uxtb	r2, r3
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2204      	movs	r2, #4
 80088a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80088ac:	2300      	movs	r3, #0
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	370c      	adds	r7, #12
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr

080088ba <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80088ba:	b480      	push	{r7}
 80088bc:	b083      	sub	sp, #12
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b04      	cmp	r3, #4
 80088cc:	d106      	bne.n	80088dc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80088d4:	b2da      	uxtb	r2, r3
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80088dc:	2300      	movs	r3, #0
}
 80088de:	4618      	mov	r0, r3
 80088e0:	370c      	adds	r7, #12
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr

080088ea <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80088ea:	b580      	push	{r7, lr}
 80088ec:	b082      	sub	sp, #8
 80088ee:	af00      	add	r7, sp, #0
 80088f0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	2b03      	cmp	r3, #3
 80088fc:	d110      	bne.n	8008920 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00b      	beq.n	8008920 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800890e:	69db      	ldr	r3, [r3, #28]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d005      	beq.n	8008920 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800891a:	69db      	ldr	r3, [r3, #28]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3708      	adds	r7, #8
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}

0800892a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b082      	sub	sp, #8
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
 8008932:	460b      	mov	r3, r1
 8008934:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	32ae      	adds	r2, #174	@ 0xae
 8008940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d101      	bne.n	800894c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008948:	2303      	movs	r3, #3
 800894a:	e01c      	b.n	8008986 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008952:	b2db      	uxtb	r3, r3
 8008954:	2b03      	cmp	r3, #3
 8008956:	d115      	bne.n	8008984 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	32ae      	adds	r2, #174	@ 0xae
 8008962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008966:	6a1b      	ldr	r3, [r3, #32]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d00b      	beq.n	8008984 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	32ae      	adds	r2, #174	@ 0xae
 8008976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800897a:	6a1b      	ldr	r3, [r3, #32]
 800897c:	78fa      	ldrb	r2, [r7, #3]
 800897e:	4611      	mov	r1, r2
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3708      	adds	r7, #8
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}

0800898e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800898e:	b580      	push	{r7, lr}
 8008990:	b082      	sub	sp, #8
 8008992:	af00      	add	r7, sp, #0
 8008994:	6078      	str	r0, [r7, #4]
 8008996:	460b      	mov	r3, r1
 8008998:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	32ae      	adds	r2, #174	@ 0xae
 80089a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d101      	bne.n	80089b0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80089ac:	2303      	movs	r3, #3
 80089ae:	e01c      	b.n	80089ea <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	2b03      	cmp	r3, #3
 80089ba:	d115      	bne.n	80089e8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	32ae      	adds	r2, #174	@ 0xae
 80089c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d00b      	beq.n	80089e8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	32ae      	adds	r2, #174	@ 0xae
 80089da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089e0:	78fa      	ldrb	r2, [r7, #3]
 80089e2:	4611      	mov	r1, r2
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80089e8:	2300      	movs	r3, #0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80089f2:	b480      	push	{r7}
 80089f4:	b083      	sub	sp, #12
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089fa:	2300      	movs	r3, #0
}
 80089fc:	4618      	mov	r0, r3
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2201      	movs	r2, #1
 8008a18:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00e      	beq.n	8008a44 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	6852      	ldr	r2, [r2, #4]
 8008a32:	b2d2      	uxtb	r2, r2
 8008a34:	4611      	mov	r1, r2
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	4798      	blx	r3
 8008a3a:	4603      	mov	r3, r0
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d001      	beq.n	8008a44 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008a40:	2303      	movs	r3, #3
 8008a42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b083      	sub	sp, #12
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	460b      	mov	r3, r1
 8008a58:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008a5a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	460b      	mov	r3, r1
 8008a72:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008a74:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	370c      	adds	r7, #12
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr

08008a82 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b086      	sub	sp, #24
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008a96:	2300      	movs	r3, #0
 8008a98:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	885b      	ldrh	r3, [r3, #2]
 8008a9e:	b29b      	uxth	r3, r3
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	7812      	ldrb	r2, [r2, #0]
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d91f      	bls.n	8008ae8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	781b      	ldrb	r3, [r3, #0]
 8008aac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008aae:	e013      	b.n	8008ad8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008ab0:	f107 030a 	add.w	r3, r7, #10
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	6978      	ldr	r0, [r7, #20]
 8008ab8:	f000 f81b 	bl	8008af2 <USBD_GetNextDesc>
 8008abc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	785b      	ldrb	r3, [r3, #1]
 8008ac2:	2b05      	cmp	r3, #5
 8008ac4:	d108      	bne.n	8008ad8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	789b      	ldrb	r3, [r3, #2]
 8008ace:	78fa      	ldrb	r2, [r7, #3]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d008      	beq.n	8008ae6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	885b      	ldrh	r3, [r3, #2]
 8008adc:	b29a      	uxth	r2, r3
 8008ade:	897b      	ldrh	r3, [r7, #10]
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d8e5      	bhi.n	8008ab0 <USBD_GetEpDesc+0x2e>
 8008ae4:	e000      	b.n	8008ae8 <USBD_GetEpDesc+0x66>
          break;
 8008ae6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008ae8:	693b      	ldr	r3, [r7, #16]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3718      	adds	r7, #24
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b085      	sub	sp, #20
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	881b      	ldrh	r3, [r3, #0]
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	7812      	ldrb	r2, [r2, #0]
 8008b08:	4413      	add	r3, r2
 8008b0a:	b29a      	uxth	r2, r3
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	461a      	mov	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4413      	add	r3, r2
 8008b1a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	3714      	adds	r7, #20
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr

08008b2a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	b087      	sub	sp, #28
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	781b      	ldrb	r3, [r3, #0]
 8008b3a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008b48:	8a3b      	ldrh	r3, [r7, #16]
 8008b4a:	021b      	lsls	r3, r3, #8
 8008b4c:	b21a      	sxth	r2, r3
 8008b4e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	b21b      	sxth	r3, r3
 8008b56:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008b58:	89fb      	ldrh	r3, [r7, #14]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	371c      	adds	r7, #28
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr
	...

08008b68 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b084      	sub	sp, #16
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
 8008b70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b72:	2300      	movs	r3, #0
 8008b74:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	781b      	ldrb	r3, [r3, #0]
 8008b7a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b7e:	2b40      	cmp	r3, #64	@ 0x40
 8008b80:	d005      	beq.n	8008b8e <USBD_StdDevReq+0x26>
 8008b82:	2b40      	cmp	r3, #64	@ 0x40
 8008b84:	d857      	bhi.n	8008c36 <USBD_StdDevReq+0xce>
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00f      	beq.n	8008baa <USBD_StdDevReq+0x42>
 8008b8a:	2b20      	cmp	r3, #32
 8008b8c:	d153      	bne.n	8008c36 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	32ae      	adds	r2, #174	@ 0xae
 8008b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	4798      	blx	r3
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ba8:	e04a      	b.n	8008c40 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	785b      	ldrb	r3, [r3, #1]
 8008bae:	2b09      	cmp	r3, #9
 8008bb0:	d83b      	bhi.n	8008c2a <USBD_StdDevReq+0xc2>
 8008bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8008bb8 <USBD_StdDevReq+0x50>)
 8008bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bb8:	08008c0d 	.word	0x08008c0d
 8008bbc:	08008c21 	.word	0x08008c21
 8008bc0:	08008c2b 	.word	0x08008c2b
 8008bc4:	08008c17 	.word	0x08008c17
 8008bc8:	08008c2b 	.word	0x08008c2b
 8008bcc:	08008beb 	.word	0x08008beb
 8008bd0:	08008be1 	.word	0x08008be1
 8008bd4:	08008c2b 	.word	0x08008c2b
 8008bd8:	08008c03 	.word	0x08008c03
 8008bdc:	08008bf5 	.word	0x08008bf5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008be0:	6839      	ldr	r1, [r7, #0]
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 fa3c 	bl	8009060 <USBD_GetDescriptor>
          break;
 8008be8:	e024      	b.n	8008c34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 fba1 	bl	8009334 <USBD_SetAddress>
          break;
 8008bf2:	e01f      	b.n	8008c34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008bf4:	6839      	ldr	r1, [r7, #0]
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 fbe0 	bl	80093bc <USBD_SetConfig>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	73fb      	strb	r3, [r7, #15]
          break;
 8008c00:	e018      	b.n	8008c34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008c02:	6839      	ldr	r1, [r7, #0]
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f000 fc83 	bl	8009510 <USBD_GetConfig>
          break;
 8008c0a:	e013      	b.n	8008c34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008c0c:	6839      	ldr	r1, [r7, #0]
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 fcb4 	bl	800957c <USBD_GetStatus>
          break;
 8008c14:	e00e      	b.n	8008c34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008c16:	6839      	ldr	r1, [r7, #0]
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fce3 	bl	80095e4 <USBD_SetFeature>
          break;
 8008c1e:	e009      	b.n	8008c34 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008c20:	6839      	ldr	r1, [r7, #0]
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 fd07 	bl	8009636 <USBD_ClrFeature>
          break;
 8008c28:	e004      	b.n	8008c34 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008c2a:	6839      	ldr	r1, [r7, #0]
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 fd5e 	bl	80096ee <USBD_CtlError>
          break;
 8008c32:	bf00      	nop
      }
      break;
 8008c34:	e004      	b.n	8008c40 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008c36:	6839      	ldr	r1, [r7, #0]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 fd58 	bl	80096ee <USBD_CtlError>
      break;
 8008c3e:	bf00      	nop
  }

  return ret;
 8008c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
 8008c4a:	bf00      	nop

08008c4c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c56:	2300      	movs	r3, #0
 8008c58:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	781b      	ldrb	r3, [r3, #0]
 8008c5e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c62:	2b40      	cmp	r3, #64	@ 0x40
 8008c64:	d005      	beq.n	8008c72 <USBD_StdItfReq+0x26>
 8008c66:	2b40      	cmp	r3, #64	@ 0x40
 8008c68:	d852      	bhi.n	8008d10 <USBD_StdItfReq+0xc4>
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d001      	beq.n	8008c72 <USBD_StdItfReq+0x26>
 8008c6e:	2b20      	cmp	r3, #32
 8008c70:	d14e      	bne.n	8008d10 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	d840      	bhi.n	8008d02 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	889b      	ldrh	r3, [r3, #4]
 8008c84:	b2db      	uxtb	r3, r3
 8008c86:	2b01      	cmp	r3, #1
 8008c88:	d836      	bhi.n	8008cf8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	889b      	ldrh	r3, [r3, #4]
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	4619      	mov	r1, r3
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7ff fedb 	bl	8008a4e <USBD_CoreFindIF>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c9c:	7bbb      	ldrb	r3, [r7, #14]
 8008c9e:	2bff      	cmp	r3, #255	@ 0xff
 8008ca0:	d01d      	beq.n	8008cde <USBD_StdItfReq+0x92>
 8008ca2:	7bbb      	ldrb	r3, [r7, #14]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d11a      	bne.n	8008cde <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008ca8:	7bba      	ldrb	r2, [r7, #14]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	32ae      	adds	r2, #174	@ 0xae
 8008cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d00f      	beq.n	8008cd8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008cb8:	7bba      	ldrb	r2, [r7, #14]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008cc0:	7bba      	ldrb	r2, [r7, #14]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	32ae      	adds	r2, #174	@ 0xae
 8008cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	6839      	ldr	r1, [r7, #0]
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	4798      	blx	r3
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008cd6:	e004      	b.n	8008ce2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008cd8:	2303      	movs	r3, #3
 8008cda:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008cdc:	e001      	b.n	8008ce2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008cde:	2303      	movs	r3, #3
 8008ce0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	88db      	ldrh	r3, [r3, #6]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d110      	bne.n	8008d0c <USBD_StdItfReq+0xc0>
 8008cea:	7bfb      	ldrb	r3, [r7, #15]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d10d      	bne.n	8008d0c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 fdd3 	bl	800989c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008cf6:	e009      	b.n	8008d0c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008cf8:	6839      	ldr	r1, [r7, #0]
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fcf7 	bl	80096ee <USBD_CtlError>
          break;
 8008d00:	e004      	b.n	8008d0c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008d02:	6839      	ldr	r1, [r7, #0]
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fcf2 	bl	80096ee <USBD_CtlError>
          break;
 8008d0a:	e000      	b.n	8008d0e <USBD_StdItfReq+0xc2>
          break;
 8008d0c:	bf00      	nop
      }
      break;
 8008d0e:	e004      	b.n	8008d1a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fceb 	bl	80096ee <USBD_CtlError>
      break;
 8008d18:	bf00      	nop
  }

  return ret;
 8008d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	889b      	ldrh	r3, [r3, #4]
 8008d36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	781b      	ldrb	r3, [r3, #0]
 8008d3c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008d40:	2b40      	cmp	r3, #64	@ 0x40
 8008d42:	d007      	beq.n	8008d54 <USBD_StdEPReq+0x30>
 8008d44:	2b40      	cmp	r3, #64	@ 0x40
 8008d46:	f200 817f 	bhi.w	8009048 <USBD_StdEPReq+0x324>
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d02a      	beq.n	8008da4 <USBD_StdEPReq+0x80>
 8008d4e:	2b20      	cmp	r3, #32
 8008d50:	f040 817a 	bne.w	8009048 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008d54:	7bbb      	ldrb	r3, [r7, #14]
 8008d56:	4619      	mov	r1, r3
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f7ff fe85 	bl	8008a68 <USBD_CoreFindEP>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d62:	7b7b      	ldrb	r3, [r7, #13]
 8008d64:	2bff      	cmp	r3, #255	@ 0xff
 8008d66:	f000 8174 	beq.w	8009052 <USBD_StdEPReq+0x32e>
 8008d6a:	7b7b      	ldrb	r3, [r7, #13]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f040 8170 	bne.w	8009052 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008d72:	7b7a      	ldrb	r2, [r7, #13]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008d7a:	7b7a      	ldrb	r2, [r7, #13]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	32ae      	adds	r2, #174	@ 0xae
 8008d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	f000 8163 	beq.w	8009052 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008d8c:	7b7a      	ldrb	r2, [r7, #13]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	32ae      	adds	r2, #174	@ 0xae
 8008d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	6839      	ldr	r1, [r7, #0]
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	4798      	blx	r3
 8008d9e:	4603      	mov	r3, r0
 8008da0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008da2:	e156      	b.n	8009052 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	785b      	ldrb	r3, [r3, #1]
 8008da8:	2b03      	cmp	r3, #3
 8008daa:	d008      	beq.n	8008dbe <USBD_StdEPReq+0x9a>
 8008dac:	2b03      	cmp	r3, #3
 8008dae:	f300 8145 	bgt.w	800903c <USBD_StdEPReq+0x318>
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	f000 809b 	beq.w	8008eee <USBD_StdEPReq+0x1ca>
 8008db8:	2b01      	cmp	r3, #1
 8008dba:	d03c      	beq.n	8008e36 <USBD_StdEPReq+0x112>
 8008dbc:	e13e      	b.n	800903c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b02      	cmp	r3, #2
 8008dc8:	d002      	beq.n	8008dd0 <USBD_StdEPReq+0xac>
 8008dca:	2b03      	cmp	r3, #3
 8008dcc:	d016      	beq.n	8008dfc <USBD_StdEPReq+0xd8>
 8008dce:	e02c      	b.n	8008e2a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008dd0:	7bbb      	ldrb	r3, [r7, #14]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00d      	beq.n	8008df2 <USBD_StdEPReq+0xce>
 8008dd6:	7bbb      	ldrb	r3, [r7, #14]
 8008dd8:	2b80      	cmp	r3, #128	@ 0x80
 8008dda:	d00a      	beq.n	8008df2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ddc:	7bbb      	ldrb	r3, [r7, #14]
 8008dde:	4619      	mov	r1, r3
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f001 f953 	bl	800a08c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008de6:	2180      	movs	r1, #128	@ 0x80
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f001 f94f 	bl	800a08c <USBD_LL_StallEP>
 8008dee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008df0:	e020      	b.n	8008e34 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008df2:	6839      	ldr	r1, [r7, #0]
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 fc7a 	bl	80096ee <USBD_CtlError>
              break;
 8008dfa:	e01b      	b.n	8008e34 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	885b      	ldrh	r3, [r3, #2]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10e      	bne.n	8008e22 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008e04:	7bbb      	ldrb	r3, [r7, #14]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00b      	beq.n	8008e22 <USBD_StdEPReq+0xfe>
 8008e0a:	7bbb      	ldrb	r3, [r7, #14]
 8008e0c:	2b80      	cmp	r3, #128	@ 0x80
 8008e0e:	d008      	beq.n	8008e22 <USBD_StdEPReq+0xfe>
 8008e10:	683b      	ldr	r3, [r7, #0]
 8008e12:	88db      	ldrh	r3, [r3, #6]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d104      	bne.n	8008e22 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e18:	7bbb      	ldrb	r3, [r7, #14]
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f001 f935 	bl	800a08c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fd3a 	bl	800989c <USBD_CtlSendStatus>

              break;
 8008e28:	e004      	b.n	8008e34 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008e2a:	6839      	ldr	r1, [r7, #0]
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f000 fc5e 	bl	80096ee <USBD_CtlError>
              break;
 8008e32:	bf00      	nop
          }
          break;
 8008e34:	e107      	b.n	8009046 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	d002      	beq.n	8008e48 <USBD_StdEPReq+0x124>
 8008e42:	2b03      	cmp	r3, #3
 8008e44:	d016      	beq.n	8008e74 <USBD_StdEPReq+0x150>
 8008e46:	e04b      	b.n	8008ee0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e48:	7bbb      	ldrb	r3, [r7, #14]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d00d      	beq.n	8008e6a <USBD_StdEPReq+0x146>
 8008e4e:	7bbb      	ldrb	r3, [r7, #14]
 8008e50:	2b80      	cmp	r3, #128	@ 0x80
 8008e52:	d00a      	beq.n	8008e6a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e54:	7bbb      	ldrb	r3, [r7, #14]
 8008e56:	4619      	mov	r1, r3
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f001 f917 	bl	800a08c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e5e:	2180      	movs	r1, #128	@ 0x80
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f001 f913 	bl	800a08c <USBD_LL_StallEP>
 8008e66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e68:	e040      	b.n	8008eec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008e6a:	6839      	ldr	r1, [r7, #0]
 8008e6c:	6878      	ldr	r0, [r7, #4]
 8008e6e:	f000 fc3e 	bl	80096ee <USBD_CtlError>
              break;
 8008e72:	e03b      	b.n	8008eec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	885b      	ldrh	r3, [r3, #2]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d136      	bne.n	8008eea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008e7c:	7bbb      	ldrb	r3, [r7, #14]
 8008e7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d004      	beq.n	8008e90 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008e86:	7bbb      	ldrb	r3, [r7, #14]
 8008e88:	4619      	mov	r1, r3
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f001 f91d 	bl	800a0ca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 fd03 	bl	800989c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008e96:	7bbb      	ldrb	r3, [r7, #14]
 8008e98:	4619      	mov	r1, r3
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f7ff fde4 	bl	8008a68 <USBD_CoreFindEP>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008ea4:	7b7b      	ldrb	r3, [r7, #13]
 8008ea6:	2bff      	cmp	r3, #255	@ 0xff
 8008ea8:	d01f      	beq.n	8008eea <USBD_StdEPReq+0x1c6>
 8008eaa:	7b7b      	ldrb	r3, [r7, #13]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d11c      	bne.n	8008eea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008eb0:	7b7a      	ldrb	r2, [r7, #13]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008eb8:	7b7a      	ldrb	r2, [r7, #13]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	32ae      	adds	r2, #174	@ 0xae
 8008ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d010      	beq.n	8008eea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008ec8:	7b7a      	ldrb	r2, [r7, #13]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	32ae      	adds	r2, #174	@ 0xae
 8008ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed2:	689b      	ldr	r3, [r3, #8]
 8008ed4:	6839      	ldr	r1, [r7, #0]
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	4798      	blx	r3
 8008eda:	4603      	mov	r3, r0
 8008edc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008ede:	e004      	b.n	8008eea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 fc03 	bl	80096ee <USBD_CtlError>
              break;
 8008ee8:	e000      	b.n	8008eec <USBD_StdEPReq+0x1c8>
              break;
 8008eea:	bf00      	nop
          }
          break;
 8008eec:	e0ab      	b.n	8009046 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	d002      	beq.n	8008f00 <USBD_StdEPReq+0x1dc>
 8008efa:	2b03      	cmp	r3, #3
 8008efc:	d032      	beq.n	8008f64 <USBD_StdEPReq+0x240>
 8008efe:	e097      	b.n	8009030 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f00:	7bbb      	ldrb	r3, [r7, #14]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d007      	beq.n	8008f16 <USBD_StdEPReq+0x1f2>
 8008f06:	7bbb      	ldrb	r3, [r7, #14]
 8008f08:	2b80      	cmp	r3, #128	@ 0x80
 8008f0a:	d004      	beq.n	8008f16 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008f0c:	6839      	ldr	r1, [r7, #0]
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 fbed 	bl	80096ee <USBD_CtlError>
                break;
 8008f14:	e091      	b.n	800903a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	da0b      	bge.n	8008f36 <USBD_StdEPReq+0x212>
 8008f1e:	7bbb      	ldrb	r3, [r7, #14]
 8008f20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f24:	4613      	mov	r3, r2
 8008f26:	009b      	lsls	r3, r3, #2
 8008f28:	4413      	add	r3, r2
 8008f2a:	009b      	lsls	r3, r3, #2
 8008f2c:	3310      	adds	r3, #16
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	4413      	add	r3, r2
 8008f32:	3304      	adds	r3, #4
 8008f34:	e00b      	b.n	8008f4e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f36:	7bbb      	ldrb	r3, [r7, #14]
 8008f38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	009b      	lsls	r3, r3, #2
 8008f40:	4413      	add	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008f48:	687a      	ldr	r2, [r7, #4]
 8008f4a:	4413      	add	r3, r2
 8008f4c:	3304      	adds	r3, #4
 8008f4e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	2200      	movs	r2, #0
 8008f54:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	2202      	movs	r2, #2
 8008f5a:	4619      	mov	r1, r3
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f000 fc43 	bl	80097e8 <USBD_CtlSendData>
              break;
 8008f62:	e06a      	b.n	800903a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008f64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	da11      	bge.n	8008f90 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008f6c:	7bbb      	ldrb	r3, [r7, #14]
 8008f6e:	f003 020f 	and.w	r2, r3, #15
 8008f72:	6879      	ldr	r1, [r7, #4]
 8008f74:	4613      	mov	r3, r2
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4413      	add	r3, r2
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	440b      	add	r3, r1
 8008f7e:	3324      	adds	r3, #36	@ 0x24
 8008f80:	881b      	ldrh	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d117      	bne.n	8008fb6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008f86:	6839      	ldr	r1, [r7, #0]
 8008f88:	6878      	ldr	r0, [r7, #4]
 8008f8a:	f000 fbb0 	bl	80096ee <USBD_CtlError>
                  break;
 8008f8e:	e054      	b.n	800903a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f90:	7bbb      	ldrb	r3, [r7, #14]
 8008f92:	f003 020f 	and.w	r2, r3, #15
 8008f96:	6879      	ldr	r1, [r7, #4]
 8008f98:	4613      	mov	r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	4413      	add	r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	440b      	add	r3, r1
 8008fa2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008fa6:	881b      	ldrh	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d104      	bne.n	8008fb6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fb9d 	bl	80096ee <USBD_CtlError>
                  break;
 8008fb4:	e041      	b.n	800903a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	da0b      	bge.n	8008fd6 <USBD_StdEPReq+0x2b2>
 8008fbe:	7bbb      	ldrb	r3, [r7, #14]
 8008fc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008fc4:	4613      	mov	r3, r2
 8008fc6:	009b      	lsls	r3, r3, #2
 8008fc8:	4413      	add	r3, r2
 8008fca:	009b      	lsls	r3, r3, #2
 8008fcc:	3310      	adds	r3, #16
 8008fce:	687a      	ldr	r2, [r7, #4]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	3304      	adds	r3, #4
 8008fd4:	e00b      	b.n	8008fee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008fd6:	7bbb      	ldrb	r3, [r7, #14]
 8008fd8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fdc:	4613      	mov	r3, r2
 8008fde:	009b      	lsls	r3, r3, #2
 8008fe0:	4413      	add	r3, r2
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	4413      	add	r3, r2
 8008fec:	3304      	adds	r3, #4
 8008fee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008ff0:	7bbb      	ldrb	r3, [r7, #14]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d002      	beq.n	8008ffc <USBD_StdEPReq+0x2d8>
 8008ff6:	7bbb      	ldrb	r3, [r7, #14]
 8008ff8:	2b80      	cmp	r3, #128	@ 0x80
 8008ffa:	d103      	bne.n	8009004 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	2200      	movs	r2, #0
 8009000:	601a      	str	r2, [r3, #0]
 8009002:	e00e      	b.n	8009022 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009004:	7bbb      	ldrb	r3, [r7, #14]
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f001 f87d 	bl	800a108 <USBD_LL_IsStallEP>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d003      	beq.n	800901c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2201      	movs	r2, #1
 8009018:	601a      	str	r2, [r3, #0]
 800901a:	e002      	b.n	8009022 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	2200      	movs	r2, #0
 8009020:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	2202      	movs	r2, #2
 8009026:	4619      	mov	r1, r3
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 fbdd 	bl	80097e8 <USBD_CtlSendData>
              break;
 800902e:	e004      	b.n	800903a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009030:	6839      	ldr	r1, [r7, #0]
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 fb5b 	bl	80096ee <USBD_CtlError>
              break;
 8009038:	bf00      	nop
          }
          break;
 800903a:	e004      	b.n	8009046 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800903c:	6839      	ldr	r1, [r7, #0]
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fb55 	bl	80096ee <USBD_CtlError>
          break;
 8009044:	bf00      	nop
      }
      break;
 8009046:	e005      	b.n	8009054 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fb4f 	bl	80096ee <USBD_CtlError>
      break;
 8009050:	e000      	b.n	8009054 <USBD_StdEPReq+0x330>
      break;
 8009052:	bf00      	nop
  }

  return ret;
 8009054:	7bfb      	ldrb	r3, [r7, #15]
}
 8009056:	4618      	mov	r0, r3
 8009058:	3710      	adds	r7, #16
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
	...

08009060 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b084      	sub	sp, #16
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800906a:	2300      	movs	r3, #0
 800906c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800906e:	2300      	movs	r3, #0
 8009070:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009072:	2300      	movs	r3, #0
 8009074:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	885b      	ldrh	r3, [r3, #2]
 800907a:	0a1b      	lsrs	r3, r3, #8
 800907c:	b29b      	uxth	r3, r3
 800907e:	3b01      	subs	r3, #1
 8009080:	2b06      	cmp	r3, #6
 8009082:	f200 8128 	bhi.w	80092d6 <USBD_GetDescriptor+0x276>
 8009086:	a201      	add	r2, pc, #4	@ (adr r2, 800908c <USBD_GetDescriptor+0x2c>)
 8009088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800908c:	080090a9 	.word	0x080090a9
 8009090:	080090c1 	.word	0x080090c1
 8009094:	08009101 	.word	0x08009101
 8009098:	080092d7 	.word	0x080092d7
 800909c:	080092d7 	.word	0x080092d7
 80090a0:	08009277 	.word	0x08009277
 80090a4:	080092a3 	.word	0x080092a3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	7c12      	ldrb	r2, [r2, #16]
 80090b4:	f107 0108 	add.w	r1, r7, #8
 80090b8:	4610      	mov	r0, r2
 80090ba:	4798      	blx	r3
 80090bc:	60f8      	str	r0, [r7, #12]
      break;
 80090be:	e112      	b.n	80092e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	7c1b      	ldrb	r3, [r3, #16]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10d      	bne.n	80090e4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80090d0:	f107 0208 	add.w	r2, r7, #8
 80090d4:	4610      	mov	r0, r2
 80090d6:	4798      	blx	r3
 80090d8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	3301      	adds	r3, #1
 80090de:	2202      	movs	r2, #2
 80090e0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80090e2:	e100      	b.n	80092e6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80090ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090ec:	f107 0208 	add.w	r2, r7, #8
 80090f0:	4610      	mov	r0, r2
 80090f2:	4798      	blx	r3
 80090f4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	3301      	adds	r3, #1
 80090fa:	2202      	movs	r2, #2
 80090fc:	701a      	strb	r2, [r3, #0]
      break;
 80090fe:	e0f2      	b.n	80092e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	885b      	ldrh	r3, [r3, #2]
 8009104:	b2db      	uxtb	r3, r3
 8009106:	2b05      	cmp	r3, #5
 8009108:	f200 80ac 	bhi.w	8009264 <USBD_GetDescriptor+0x204>
 800910c:	a201      	add	r2, pc, #4	@ (adr r2, 8009114 <USBD_GetDescriptor+0xb4>)
 800910e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009112:	bf00      	nop
 8009114:	0800912d 	.word	0x0800912d
 8009118:	08009161 	.word	0x08009161
 800911c:	08009195 	.word	0x08009195
 8009120:	080091c9 	.word	0x080091c9
 8009124:	080091fd 	.word	0x080091fd
 8009128:	08009231 	.word	0x08009231
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00b      	beq.n	8009150 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	687a      	ldr	r2, [r7, #4]
 8009142:	7c12      	ldrb	r2, [r2, #16]
 8009144:	f107 0108 	add.w	r1, r7, #8
 8009148:	4610      	mov	r0, r2
 800914a:	4798      	blx	r3
 800914c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800914e:	e091      	b.n	8009274 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009150:	6839      	ldr	r1, [r7, #0]
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 facb 	bl	80096ee <USBD_CtlError>
            err++;
 8009158:	7afb      	ldrb	r3, [r7, #11]
 800915a:	3301      	adds	r3, #1
 800915c:	72fb      	strb	r3, [r7, #11]
          break;
 800915e:	e089      	b.n	8009274 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009166:	689b      	ldr	r3, [r3, #8]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d00b      	beq.n	8009184 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	7c12      	ldrb	r2, [r2, #16]
 8009178:	f107 0108 	add.w	r1, r7, #8
 800917c:	4610      	mov	r0, r2
 800917e:	4798      	blx	r3
 8009180:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009182:	e077      	b.n	8009274 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fab1 	bl	80096ee <USBD_CtlError>
            err++;
 800918c:	7afb      	ldrb	r3, [r7, #11]
 800918e:	3301      	adds	r3, #1
 8009190:	72fb      	strb	r3, [r7, #11]
          break;
 8009192:	e06f      	b.n	8009274 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800919a:	68db      	ldr	r3, [r3, #12]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00b      	beq.n	80091b8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	687a      	ldr	r2, [r7, #4]
 80091aa:	7c12      	ldrb	r2, [r2, #16]
 80091ac:	f107 0108 	add.w	r1, r7, #8
 80091b0:	4610      	mov	r0, r2
 80091b2:	4798      	blx	r3
 80091b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091b6:	e05d      	b.n	8009274 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091b8:	6839      	ldr	r1, [r7, #0]
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fa97 	bl	80096ee <USBD_CtlError>
            err++;
 80091c0:	7afb      	ldrb	r3, [r7, #11]
 80091c2:	3301      	adds	r3, #1
 80091c4:	72fb      	strb	r3, [r7, #11]
          break;
 80091c6:	e055      	b.n	8009274 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091ce:	691b      	ldr	r3, [r3, #16]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d00b      	beq.n	80091ec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091da:	691b      	ldr	r3, [r3, #16]
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	7c12      	ldrb	r2, [r2, #16]
 80091e0:	f107 0108 	add.w	r1, r7, #8
 80091e4:	4610      	mov	r0, r2
 80091e6:	4798      	blx	r3
 80091e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091ea:	e043      	b.n	8009274 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091ec:	6839      	ldr	r1, [r7, #0]
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 fa7d 	bl	80096ee <USBD_CtlError>
            err++;
 80091f4:	7afb      	ldrb	r3, [r7, #11]
 80091f6:	3301      	adds	r3, #1
 80091f8:	72fb      	strb	r3, [r7, #11]
          break;
 80091fa:	e03b      	b.n	8009274 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009202:	695b      	ldr	r3, [r3, #20]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d00b      	beq.n	8009220 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800920e:	695b      	ldr	r3, [r3, #20]
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	7c12      	ldrb	r2, [r2, #16]
 8009214:	f107 0108 	add.w	r1, r7, #8
 8009218:	4610      	mov	r0, r2
 800921a:	4798      	blx	r3
 800921c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800921e:	e029      	b.n	8009274 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009220:	6839      	ldr	r1, [r7, #0]
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 fa63 	bl	80096ee <USBD_CtlError>
            err++;
 8009228:	7afb      	ldrb	r3, [r7, #11]
 800922a:	3301      	adds	r3, #1
 800922c:	72fb      	strb	r3, [r7, #11]
          break;
 800922e:	e021      	b.n	8009274 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d00b      	beq.n	8009254 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009242:	699b      	ldr	r3, [r3, #24]
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	7c12      	ldrb	r2, [r2, #16]
 8009248:	f107 0108 	add.w	r1, r7, #8
 800924c:	4610      	mov	r0, r2
 800924e:	4798      	blx	r3
 8009250:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009252:	e00f      	b.n	8009274 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009254:	6839      	ldr	r1, [r7, #0]
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 fa49 	bl	80096ee <USBD_CtlError>
            err++;
 800925c:	7afb      	ldrb	r3, [r7, #11]
 800925e:	3301      	adds	r3, #1
 8009260:	72fb      	strb	r3, [r7, #11]
          break;
 8009262:	e007      	b.n	8009274 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fa41 	bl	80096ee <USBD_CtlError>
          err++;
 800926c:	7afb      	ldrb	r3, [r7, #11]
 800926e:	3301      	adds	r3, #1
 8009270:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009272:	bf00      	nop
      }
      break;
 8009274:	e037      	b.n	80092e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	7c1b      	ldrb	r3, [r3, #16]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d109      	bne.n	8009292 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009286:	f107 0208 	add.w	r2, r7, #8
 800928a:	4610      	mov	r0, r2
 800928c:	4798      	blx	r3
 800928e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009290:	e029      	b.n	80092e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 fa2a 	bl	80096ee <USBD_CtlError>
        err++;
 800929a:	7afb      	ldrb	r3, [r7, #11]
 800929c:	3301      	adds	r3, #1
 800929e:	72fb      	strb	r3, [r7, #11]
      break;
 80092a0:	e021      	b.n	80092e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	7c1b      	ldrb	r3, [r3, #16]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d10d      	bne.n	80092c6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80092b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092b2:	f107 0208 	add.w	r2, r7, #8
 80092b6:	4610      	mov	r0, r2
 80092b8:	4798      	blx	r3
 80092ba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	3301      	adds	r3, #1
 80092c0:	2207      	movs	r2, #7
 80092c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092c4:	e00f      	b.n	80092e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80092c6:	6839      	ldr	r1, [r7, #0]
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 fa10 	bl	80096ee <USBD_CtlError>
        err++;
 80092ce:	7afb      	ldrb	r3, [r7, #11]
 80092d0:	3301      	adds	r3, #1
 80092d2:	72fb      	strb	r3, [r7, #11]
      break;
 80092d4:	e007      	b.n	80092e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fa08 	bl	80096ee <USBD_CtlError>
      err++;
 80092de:	7afb      	ldrb	r3, [r7, #11]
 80092e0:	3301      	adds	r3, #1
 80092e2:	72fb      	strb	r3, [r7, #11]
      break;
 80092e4:	bf00      	nop
  }

  if (err != 0U)
 80092e6:	7afb      	ldrb	r3, [r7, #11]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d11e      	bne.n	800932a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	88db      	ldrh	r3, [r3, #6]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d016      	beq.n	8009322 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80092f4:	893b      	ldrh	r3, [r7, #8]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00e      	beq.n	8009318 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	88da      	ldrh	r2, [r3, #6]
 80092fe:	893b      	ldrh	r3, [r7, #8]
 8009300:	4293      	cmp	r3, r2
 8009302:	bf28      	it	cs
 8009304:	4613      	movcs	r3, r2
 8009306:	b29b      	uxth	r3, r3
 8009308:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800930a:	893b      	ldrh	r3, [r7, #8]
 800930c:	461a      	mov	r2, r3
 800930e:	68f9      	ldr	r1, [r7, #12]
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 fa69 	bl	80097e8 <USBD_CtlSendData>
 8009316:	e009      	b.n	800932c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009318:	6839      	ldr	r1, [r7, #0]
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f9e7 	bl	80096ee <USBD_CtlError>
 8009320:	e004      	b.n	800932c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 faba 	bl	800989c <USBD_CtlSendStatus>
 8009328:	e000      	b.n	800932c <USBD_GetDescriptor+0x2cc>
    return;
 800932a:	bf00      	nop
  }
}
 800932c:	3710      	adds	r7, #16
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop

08009334 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	889b      	ldrh	r3, [r3, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d131      	bne.n	80093aa <USBD_SetAddress+0x76>
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	88db      	ldrh	r3, [r3, #6]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d12d      	bne.n	80093aa <USBD_SetAddress+0x76>
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	885b      	ldrh	r3, [r3, #2]
 8009352:	2b7f      	cmp	r3, #127	@ 0x7f
 8009354:	d829      	bhi.n	80093aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	885b      	ldrh	r3, [r3, #2]
 800935a:	b2db      	uxtb	r3, r3
 800935c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009360:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009368:	b2db      	uxtb	r3, r3
 800936a:	2b03      	cmp	r3, #3
 800936c:	d104      	bne.n	8009378 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800936e:	6839      	ldr	r1, [r7, #0]
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 f9bc 	bl	80096ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009376:	e01d      	b.n	80093b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	7bfa      	ldrb	r2, [r7, #15]
 800937c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009380:	7bfb      	ldrb	r3, [r7, #15]
 8009382:	4619      	mov	r1, r3
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 feeb 	bl	800a160 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fa86 	bl	800989c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009390:	7bfb      	ldrb	r3, [r7, #15]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d004      	beq.n	80093a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2202      	movs	r2, #2
 800939a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800939e:	e009      	b.n	80093b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093a8:	e004      	b.n	80093b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80093aa:	6839      	ldr	r1, [r7, #0]
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 f99e 	bl	80096ee <USBD_CtlError>
  }
}
 80093b2:	bf00      	nop
 80093b4:	bf00      	nop
 80093b6:	3710      	adds	r7, #16
 80093b8:	46bd      	mov	sp, r7
 80093ba:	bd80      	pop	{r7, pc}

080093bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	b084      	sub	sp, #16
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80093c6:	2300      	movs	r3, #0
 80093c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	885b      	ldrh	r3, [r3, #2]
 80093ce:	b2da      	uxtb	r2, r3
 80093d0:	4b4e      	ldr	r3, [pc, #312]	@ (800950c <USBD_SetConfig+0x150>)
 80093d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80093d4:	4b4d      	ldr	r3, [pc, #308]	@ (800950c <USBD_SetConfig+0x150>)
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d905      	bls.n	80093e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80093dc:	6839      	ldr	r1, [r7, #0]
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f985 	bl	80096ee <USBD_CtlError>
    return USBD_FAIL;
 80093e4:	2303      	movs	r3, #3
 80093e6:	e08c      	b.n	8009502 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	2b02      	cmp	r3, #2
 80093f2:	d002      	beq.n	80093fa <USBD_SetConfig+0x3e>
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	d029      	beq.n	800944c <USBD_SetConfig+0x90>
 80093f8:	e075      	b.n	80094e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80093fa:	4b44      	ldr	r3, [pc, #272]	@ (800950c <USBD_SetConfig+0x150>)
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d020      	beq.n	8009444 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009402:	4b42      	ldr	r3, [pc, #264]	@ (800950c <USBD_SetConfig+0x150>)
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	461a      	mov	r2, r3
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800940c:	4b3f      	ldr	r3, [pc, #252]	@ (800950c <USBD_SetConfig+0x150>)
 800940e:	781b      	ldrb	r3, [r3, #0]
 8009410:	4619      	mov	r1, r3
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f7fe ffe3 	bl	80083de <USBD_SetClassConfig>
 8009418:	4603      	mov	r3, r0
 800941a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800941c:	7bfb      	ldrb	r3, [r7, #15]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d008      	beq.n	8009434 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009422:	6839      	ldr	r1, [r7, #0]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f962 	bl	80096ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2202      	movs	r2, #2
 800942e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009432:	e065      	b.n	8009500 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fa31 	bl	800989c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	2203      	movs	r2, #3
 800943e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009442:	e05d      	b.n	8009500 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 fa29 	bl	800989c <USBD_CtlSendStatus>
      break;
 800944a:	e059      	b.n	8009500 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800944c:	4b2f      	ldr	r3, [pc, #188]	@ (800950c <USBD_SetConfig+0x150>)
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d112      	bne.n	800947a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2202      	movs	r2, #2
 8009458:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800945c:	4b2b      	ldr	r3, [pc, #172]	@ (800950c <USBD_SetConfig+0x150>)
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	461a      	mov	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009466:	4b29      	ldr	r3, [pc, #164]	@ (800950c <USBD_SetConfig+0x150>)
 8009468:	781b      	ldrb	r3, [r3, #0]
 800946a:	4619      	mov	r1, r3
 800946c:	6878      	ldr	r0, [r7, #4]
 800946e:	f7fe ffd2 	bl	8008416 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fa12 	bl	800989c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009478:	e042      	b.n	8009500 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800947a:	4b24      	ldr	r3, [pc, #144]	@ (800950c <USBD_SetConfig+0x150>)
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	461a      	mov	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	429a      	cmp	r2, r3
 8009486:	d02a      	beq.n	80094de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	b2db      	uxtb	r3, r3
 800948e:	4619      	mov	r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f7fe ffc0 	bl	8008416 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009496:	4b1d      	ldr	r3, [pc, #116]	@ (800950c <USBD_SetConfig+0x150>)
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	461a      	mov	r2, r3
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80094a0:	4b1a      	ldr	r3, [pc, #104]	@ (800950c <USBD_SetConfig+0x150>)
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	4619      	mov	r1, r3
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f7fe ff99 	bl	80083de <USBD_SetClassConfig>
 80094ac:	4603      	mov	r3, r0
 80094ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80094b0:	7bfb      	ldrb	r3, [r7, #15]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00f      	beq.n	80094d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80094b6:	6839      	ldr	r1, [r7, #0]
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f918 	bl	80096ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	b2db      	uxtb	r3, r3
 80094c4:	4619      	mov	r1, r3
 80094c6:	6878      	ldr	r0, [r7, #4]
 80094c8:	f7fe ffa5 	bl	8008416 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2202      	movs	r2, #2
 80094d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80094d4:	e014      	b.n	8009500 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 f9e0 	bl	800989c <USBD_CtlSendStatus>
      break;
 80094dc:	e010      	b.n	8009500 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f9dc 	bl	800989c <USBD_CtlSendStatus>
      break;
 80094e4:	e00c      	b.n	8009500 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80094e6:	6839      	ldr	r1, [r7, #0]
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 f900 	bl	80096ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80094ee:	4b07      	ldr	r3, [pc, #28]	@ (800950c <USBD_SetConfig+0x150>)
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	4619      	mov	r1, r3
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7fe ff8e 	bl	8008416 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80094fa:	2303      	movs	r3, #3
 80094fc:	73fb      	strb	r3, [r7, #15]
      break;
 80094fe:	bf00      	nop
  }

  return ret;
 8009500:	7bfb      	ldrb	r3, [r7, #15]
}
 8009502:	4618      	mov	r0, r3
 8009504:	3710      	adds	r7, #16
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}
 800950a:	bf00      	nop
 800950c:	200005e4 	.word	0x200005e4

08009510 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b082      	sub	sp, #8
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
 8009518:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	88db      	ldrh	r3, [r3, #6]
 800951e:	2b01      	cmp	r3, #1
 8009520:	d004      	beq.n	800952c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f8e2 	bl	80096ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800952a:	e023      	b.n	8009574 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009532:	b2db      	uxtb	r3, r3
 8009534:	2b02      	cmp	r3, #2
 8009536:	dc02      	bgt.n	800953e <USBD_GetConfig+0x2e>
 8009538:	2b00      	cmp	r3, #0
 800953a:	dc03      	bgt.n	8009544 <USBD_GetConfig+0x34>
 800953c:	e015      	b.n	800956a <USBD_GetConfig+0x5a>
 800953e:	2b03      	cmp	r3, #3
 8009540:	d00b      	beq.n	800955a <USBD_GetConfig+0x4a>
 8009542:	e012      	b.n	800956a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	3308      	adds	r3, #8
 800954e:	2201      	movs	r2, #1
 8009550:	4619      	mov	r1, r3
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f948 	bl	80097e8 <USBD_CtlSendData>
        break;
 8009558:	e00c      	b.n	8009574 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	3304      	adds	r3, #4
 800955e:	2201      	movs	r2, #1
 8009560:	4619      	mov	r1, r3
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 f940 	bl	80097e8 <USBD_CtlSendData>
        break;
 8009568:	e004      	b.n	8009574 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800956a:	6839      	ldr	r1, [r7, #0]
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f000 f8be 	bl	80096ee <USBD_CtlError>
        break;
 8009572:	bf00      	nop
}
 8009574:	bf00      	nop
 8009576:	3708      	adds	r7, #8
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}

0800957c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800958c:	b2db      	uxtb	r3, r3
 800958e:	3b01      	subs	r3, #1
 8009590:	2b02      	cmp	r3, #2
 8009592:	d81e      	bhi.n	80095d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	88db      	ldrh	r3, [r3, #6]
 8009598:	2b02      	cmp	r3, #2
 800959a:	d004      	beq.n	80095a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800959c:	6839      	ldr	r1, [r7, #0]
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 f8a5 	bl	80096ee <USBD_CtlError>
        break;
 80095a4:	e01a      	b.n	80095dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2201      	movs	r2, #1
 80095aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d005      	beq.n	80095c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	68db      	ldr	r3, [r3, #12]
 80095ba:	f043 0202 	orr.w	r2, r3, #2
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	330c      	adds	r3, #12
 80095c6:	2202      	movs	r2, #2
 80095c8:	4619      	mov	r1, r3
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	f000 f90c 	bl	80097e8 <USBD_CtlSendData>
      break;
 80095d0:	e004      	b.n	80095dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80095d2:	6839      	ldr	r1, [r7, #0]
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f88a 	bl	80096ee <USBD_CtlError>
      break;
 80095da:	bf00      	nop
  }
}
 80095dc:	bf00      	nop
 80095de:	3708      	adds	r7, #8
 80095e0:	46bd      	mov	sp, r7
 80095e2:	bd80      	pop	{r7, pc}

080095e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	885b      	ldrh	r3, [r3, #2]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d107      	bne.n	8009606 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f94c 	bl	800989c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009604:	e013      	b.n	800962e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	885b      	ldrh	r3, [r3, #2]
 800960a:	2b02      	cmp	r3, #2
 800960c:	d10b      	bne.n	8009626 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	889b      	ldrh	r3, [r3, #4]
 8009612:	0a1b      	lsrs	r3, r3, #8
 8009614:	b29b      	uxth	r3, r3
 8009616:	b2da      	uxtb	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 f93c 	bl	800989c <USBD_CtlSendStatus>
}
 8009624:	e003      	b.n	800962e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009626:	6839      	ldr	r1, [r7, #0]
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f000 f860 	bl	80096ee <USBD_CtlError>
}
 800962e:	bf00      	nop
 8009630:	3708      	adds	r7, #8
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009636:	b580      	push	{r7, lr}
 8009638:	b082      	sub	sp, #8
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
 800963e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009646:	b2db      	uxtb	r3, r3
 8009648:	3b01      	subs	r3, #1
 800964a:	2b02      	cmp	r3, #2
 800964c:	d80b      	bhi.n	8009666 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	885b      	ldrh	r3, [r3, #2]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d10c      	bne.n	8009670 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800965e:	6878      	ldr	r0, [r7, #4]
 8009660:	f000 f91c 	bl	800989c <USBD_CtlSendStatus>
      }
      break;
 8009664:	e004      	b.n	8009670 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009666:	6839      	ldr	r1, [r7, #0]
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 f840 	bl	80096ee <USBD_CtlError>
      break;
 800966e:	e000      	b.n	8009672 <USBD_ClrFeature+0x3c>
      break;
 8009670:	bf00      	nop
  }
}
 8009672:	bf00      	nop
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b084      	sub	sp, #16
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
 8009682:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	781a      	ldrb	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	3301      	adds	r3, #1
 8009694:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	781a      	ldrb	r2, [r3, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	3301      	adds	r3, #1
 80096a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f7ff fa40 	bl	8008b2a <SWAPBYTE>
 80096aa:	4603      	mov	r3, r0
 80096ac:	461a      	mov	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	3301      	adds	r3, #1
 80096b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	3301      	adds	r3, #1
 80096bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f7ff fa33 	bl	8008b2a <SWAPBYTE>
 80096c4:	4603      	mov	r3, r0
 80096c6:	461a      	mov	r2, r3
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	3301      	adds	r3, #1
 80096d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	3301      	adds	r3, #1
 80096d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80096d8:	68f8      	ldr	r0, [r7, #12]
 80096da:	f7ff fa26 	bl	8008b2a <SWAPBYTE>
 80096de:	4603      	mov	r3, r0
 80096e0:	461a      	mov	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	80da      	strh	r2, [r3, #6]
}
 80096e6:	bf00      	nop
 80096e8:	3710      	adds	r7, #16
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b082      	sub	sp, #8
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80096f8:	2180      	movs	r1, #128	@ 0x80
 80096fa:	6878      	ldr	r0, [r7, #4]
 80096fc:	f000 fcc6 	bl	800a08c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009700:	2100      	movs	r1, #0
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fcc2 	bl	800a08c <USBD_LL_StallEP>
}
 8009708:	bf00      	nop
 800970a:	3708      	adds	r7, #8
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
 8009716:	60f8      	str	r0, [r7, #12]
 8009718:	60b9      	str	r1, [r7, #8]
 800971a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800971c:	2300      	movs	r3, #0
 800971e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d042      	beq.n	80097ac <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800972a:	6938      	ldr	r0, [r7, #16]
 800972c:	f000 f842 	bl	80097b4 <USBD_GetLen>
 8009730:	4603      	mov	r3, r0
 8009732:	3301      	adds	r3, #1
 8009734:	005b      	lsls	r3, r3, #1
 8009736:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800973a:	d808      	bhi.n	800974e <USBD_GetString+0x3e>
 800973c:	6938      	ldr	r0, [r7, #16]
 800973e:	f000 f839 	bl	80097b4 <USBD_GetLen>
 8009742:	4603      	mov	r3, r0
 8009744:	3301      	adds	r3, #1
 8009746:	b29b      	uxth	r3, r3
 8009748:	005b      	lsls	r3, r3, #1
 800974a:	b29a      	uxth	r2, r3
 800974c:	e001      	b.n	8009752 <USBD_GetString+0x42>
 800974e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009756:	7dfb      	ldrb	r3, [r7, #23]
 8009758:	68ba      	ldr	r2, [r7, #8]
 800975a:	4413      	add	r3, r2
 800975c:	687a      	ldr	r2, [r7, #4]
 800975e:	7812      	ldrb	r2, [r2, #0]
 8009760:	701a      	strb	r2, [r3, #0]
  idx++;
 8009762:	7dfb      	ldrb	r3, [r7, #23]
 8009764:	3301      	adds	r3, #1
 8009766:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009768:	7dfb      	ldrb	r3, [r7, #23]
 800976a:	68ba      	ldr	r2, [r7, #8]
 800976c:	4413      	add	r3, r2
 800976e:	2203      	movs	r2, #3
 8009770:	701a      	strb	r2, [r3, #0]
  idx++;
 8009772:	7dfb      	ldrb	r3, [r7, #23]
 8009774:	3301      	adds	r3, #1
 8009776:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009778:	e013      	b.n	80097a2 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800977a:	7dfb      	ldrb	r3, [r7, #23]
 800977c:	68ba      	ldr	r2, [r7, #8]
 800977e:	4413      	add	r3, r2
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	7812      	ldrb	r2, [r2, #0]
 8009784:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	3301      	adds	r3, #1
 800978a:	613b      	str	r3, [r7, #16]
    idx++;
 800978c:	7dfb      	ldrb	r3, [r7, #23]
 800978e:	3301      	adds	r3, #1
 8009790:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009792:	7dfb      	ldrb	r3, [r7, #23]
 8009794:	68ba      	ldr	r2, [r7, #8]
 8009796:	4413      	add	r3, r2
 8009798:	2200      	movs	r2, #0
 800979a:	701a      	strb	r2, [r3, #0]
    idx++;
 800979c:	7dfb      	ldrb	r3, [r7, #23]
 800979e:	3301      	adds	r3, #1
 80097a0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80097a2:	693b      	ldr	r3, [r7, #16]
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1e7      	bne.n	800977a <USBD_GetString+0x6a>
 80097aa:	e000      	b.n	80097ae <USBD_GetString+0x9e>
    return;
 80097ac:	bf00      	nop
  }
}
 80097ae:	3718      	adds	r7, #24
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80097bc:	2300      	movs	r3, #0
 80097be:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80097c4:	e005      	b.n	80097d2 <USBD_GetLen+0x1e>
  {
    len++;
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
 80097c8:	3301      	adds	r3, #1
 80097ca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	3301      	adds	r3, #1
 80097d0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d1f5      	bne.n	80097c6 <USBD_GetLen+0x12>
  }

  return len;
 80097da:	7bfb      	ldrb	r3, [r7, #15]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3714      	adds	r7, #20
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2202      	movs	r2, #2
 80097f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	2100      	movs	r1, #0
 800980e:	68f8      	ldr	r0, [r7, #12]
 8009810:	f000 fcc5 	bl	800a19e <USBD_LL_Transmit>

  return USBD_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	3710      	adds	r7, #16
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}

0800981e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800981e:	b580      	push	{r7, lr}
 8009820:	b084      	sub	sp, #16
 8009822:	af00      	add	r7, sp, #0
 8009824:	60f8      	str	r0, [r7, #12]
 8009826:	60b9      	str	r1, [r7, #8]
 8009828:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	68ba      	ldr	r2, [r7, #8]
 800982e:	2100      	movs	r1, #0
 8009830:	68f8      	ldr	r0, [r7, #12]
 8009832:	f000 fcb4 	bl	800a19e <USBD_LL_Transmit>

  return USBD_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	3710      	adds	r7, #16
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}

08009840 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2203      	movs	r2, #3
 8009850:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	687a      	ldr	r2, [r7, #4]
 8009858:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	68ba      	ldr	r2, [r7, #8]
 8009868:	2100      	movs	r1, #0
 800986a:	68f8      	ldr	r0, [r7, #12]
 800986c:	f000 fcb8 	bl	800a1e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009870:	2300      	movs	r3, #0
}
 8009872:	4618      	mov	r0, r3
 8009874:	3710      	adds	r7, #16
 8009876:	46bd      	mov	sp, r7
 8009878:	bd80      	pop	{r7, pc}

0800987a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b084      	sub	sp, #16
 800987e:	af00      	add	r7, sp, #0
 8009880:	60f8      	str	r0, [r7, #12]
 8009882:	60b9      	str	r1, [r7, #8]
 8009884:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	68ba      	ldr	r2, [r7, #8]
 800988a:	2100      	movs	r1, #0
 800988c:	68f8      	ldr	r0, [r7, #12]
 800988e:	f000 fca7 	bl	800a1e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009892:	2300      	movs	r3, #0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2204      	movs	r2, #4
 80098a8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80098ac:	2300      	movs	r3, #0
 80098ae:	2200      	movs	r2, #0
 80098b0:	2100      	movs	r1, #0
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 fc73 	bl	800a19e <USBD_LL_Transmit>

  return USBD_OK;
 80098b8:	2300      	movs	r3, #0
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b082      	sub	sp, #8
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2205      	movs	r2, #5
 80098ce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098d2:	2300      	movs	r3, #0
 80098d4:	2200      	movs	r2, #0
 80098d6:	2100      	movs	r1, #0
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f000 fc81 	bl	800a1e0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3708      	adds	r7, #8
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80098ec:	2200      	movs	r2, #0
 80098ee:	4912      	ldr	r1, [pc, #72]	@ (8009938 <MX_USB_DEVICE_Init+0x50>)
 80098f0:	4812      	ldr	r0, [pc, #72]	@ (800993c <MX_USB_DEVICE_Init+0x54>)
 80098f2:	f7fe fcf7 	bl	80082e4 <USBD_Init>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d001      	beq.n	8009900 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80098fc:	f7f8 f8c4 	bl	8001a88 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009900:	490f      	ldr	r1, [pc, #60]	@ (8009940 <MX_USB_DEVICE_Init+0x58>)
 8009902:	480e      	ldr	r0, [pc, #56]	@ (800993c <MX_USB_DEVICE_Init+0x54>)
 8009904:	f7fe fd1e 	bl	8008344 <USBD_RegisterClass>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d001      	beq.n	8009912 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800990e:	f7f8 f8bb 	bl	8001a88 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009912:	490c      	ldr	r1, [pc, #48]	@ (8009944 <MX_USB_DEVICE_Init+0x5c>)
 8009914:	4809      	ldr	r0, [pc, #36]	@ (800993c <MX_USB_DEVICE_Init+0x54>)
 8009916:	f7fe fc55 	bl	80081c4 <USBD_CDC_RegisterInterface>
 800991a:	4603      	mov	r3, r0
 800991c:	2b00      	cmp	r3, #0
 800991e:	d001      	beq.n	8009924 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009920:	f7f8 f8b2 	bl	8001a88 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009924:	4805      	ldr	r0, [pc, #20]	@ (800993c <MX_USB_DEVICE_Init+0x54>)
 8009926:	f7fe fd43 	bl	80083b0 <USBD_Start>
 800992a:	4603      	mov	r3, r0
 800992c:	2b00      	cmp	r3, #0
 800992e:	d001      	beq.n	8009934 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009930:	f7f8 f8aa 	bl	8001a88 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009934:	bf00      	nop
 8009936:	bd80      	pop	{r7, pc}
 8009938:	200000b8 	.word	0x200000b8
 800993c:	200005e8 	.word	0x200005e8
 8009940:	20000024 	.word	0x20000024
 8009944:	200000a4 	.word	0x200000a4

08009948 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800994c:	2200      	movs	r2, #0
 800994e:	4905      	ldr	r1, [pc, #20]	@ (8009964 <CDC_Init_FS+0x1c>)
 8009950:	4805      	ldr	r0, [pc, #20]	@ (8009968 <CDC_Init_FS+0x20>)
 8009952:	f7fe fc51 	bl	80081f8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009956:	4905      	ldr	r1, [pc, #20]	@ (800996c <CDC_Init_FS+0x24>)
 8009958:	4803      	ldr	r0, [pc, #12]	@ (8009968 <CDC_Init_FS+0x20>)
 800995a:	f7fe fc6f 	bl	800823c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800995e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009960:	4618      	mov	r0, r3
 8009962:	bd80      	pop	{r7, pc}
 8009964:	200010c4 	.word	0x200010c4
 8009968:	200005e8 	.word	0x200005e8
 800996c:	200008c4 	.word	0x200008c4

08009970 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009970:	b480      	push	{r7}
 8009972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009974:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009976:	4618      	mov	r0, r3
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	4603      	mov	r3, r0
 8009988:	6039      	str	r1, [r7, #0]
 800998a:	71fb      	strb	r3, [r7, #7]
 800998c:	4613      	mov	r3, r2
 800998e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009990:	79fb      	ldrb	r3, [r7, #7]
 8009992:	2b23      	cmp	r3, #35	@ 0x23
 8009994:	d84a      	bhi.n	8009a2c <CDC_Control_FS+0xac>
 8009996:	a201      	add	r2, pc, #4	@ (adr r2, 800999c <CDC_Control_FS+0x1c>)
 8009998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999c:	08009a2d 	.word	0x08009a2d
 80099a0:	08009a2d 	.word	0x08009a2d
 80099a4:	08009a2d 	.word	0x08009a2d
 80099a8:	08009a2d 	.word	0x08009a2d
 80099ac:	08009a2d 	.word	0x08009a2d
 80099b0:	08009a2d 	.word	0x08009a2d
 80099b4:	08009a2d 	.word	0x08009a2d
 80099b8:	08009a2d 	.word	0x08009a2d
 80099bc:	08009a2d 	.word	0x08009a2d
 80099c0:	08009a2d 	.word	0x08009a2d
 80099c4:	08009a2d 	.word	0x08009a2d
 80099c8:	08009a2d 	.word	0x08009a2d
 80099cc:	08009a2d 	.word	0x08009a2d
 80099d0:	08009a2d 	.word	0x08009a2d
 80099d4:	08009a2d 	.word	0x08009a2d
 80099d8:	08009a2d 	.word	0x08009a2d
 80099dc:	08009a2d 	.word	0x08009a2d
 80099e0:	08009a2d 	.word	0x08009a2d
 80099e4:	08009a2d 	.word	0x08009a2d
 80099e8:	08009a2d 	.word	0x08009a2d
 80099ec:	08009a2d 	.word	0x08009a2d
 80099f0:	08009a2d 	.word	0x08009a2d
 80099f4:	08009a2d 	.word	0x08009a2d
 80099f8:	08009a2d 	.word	0x08009a2d
 80099fc:	08009a2d 	.word	0x08009a2d
 8009a00:	08009a2d 	.word	0x08009a2d
 8009a04:	08009a2d 	.word	0x08009a2d
 8009a08:	08009a2d 	.word	0x08009a2d
 8009a0c:	08009a2d 	.word	0x08009a2d
 8009a10:	08009a2d 	.word	0x08009a2d
 8009a14:	08009a2d 	.word	0x08009a2d
 8009a18:	08009a2d 	.word	0x08009a2d
 8009a1c:	08009a2d 	.word	0x08009a2d
 8009a20:	08009a2d 	.word	0x08009a2d
 8009a24:	08009a2d 	.word	0x08009a2d
 8009a28:	08009a2d 	.word	0x08009a2d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009a2c:	bf00      	nop
  }

  return (USBD_OK);
 8009a2e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
 8009a44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009a46:	6879      	ldr	r1, [r7, #4]
 8009a48:	4805      	ldr	r0, [pc, #20]	@ (8009a60 <CDC_Receive_FS+0x24>)
 8009a4a:	f7fe fbf7 	bl	800823c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009a4e:	4804      	ldr	r0, [pc, #16]	@ (8009a60 <CDC_Receive_FS+0x24>)
 8009a50:	f7fe fc12 	bl	8008278 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009a54:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3708      	adds	r7, #8
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	200005e8 	.word	0x200005e8

08009a64 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b087      	sub	sp, #28
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	4613      	mov	r3, r2
 8009a70:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009a72:	2300      	movs	r3, #0
 8009a74:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009a76:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	371c      	adds	r7, #28
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a84:	4770      	bx	lr
	...

08009a88 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	4603      	mov	r3, r0
 8009a90:	6039      	str	r1, [r7, #0]
 8009a92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	2212      	movs	r2, #18
 8009a98:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009a9a:	4b03      	ldr	r3, [pc, #12]	@ (8009aa8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr
 8009aa8:	200000d4 	.word	0x200000d4

08009aac <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	6039      	str	r1, [r7, #0]
 8009ab6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	2204      	movs	r2, #4
 8009abc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009abe:	4b03      	ldr	r3, [pc, #12]	@ (8009acc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr
 8009acc:	200000e8 	.word	0x200000e8

08009ad0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	6039      	str	r1, [r7, #0]
 8009ada:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009adc:	79fb      	ldrb	r3, [r7, #7]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d105      	bne.n	8009aee <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009ae2:	683a      	ldr	r2, [r7, #0]
 8009ae4:	4907      	ldr	r1, [pc, #28]	@ (8009b04 <USBD_FS_ProductStrDescriptor+0x34>)
 8009ae6:	4808      	ldr	r0, [pc, #32]	@ (8009b08 <USBD_FS_ProductStrDescriptor+0x38>)
 8009ae8:	f7ff fe12 	bl	8009710 <USBD_GetString>
 8009aec:	e004      	b.n	8009af8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009aee:	683a      	ldr	r2, [r7, #0]
 8009af0:	4904      	ldr	r1, [pc, #16]	@ (8009b04 <USBD_FS_ProductStrDescriptor+0x34>)
 8009af2:	4805      	ldr	r0, [pc, #20]	@ (8009b08 <USBD_FS_ProductStrDescriptor+0x38>)
 8009af4:	f7ff fe0c 	bl	8009710 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009af8:	4b02      	ldr	r3, [pc, #8]	@ (8009b04 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3708      	adds	r7, #8
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	200018c4 	.word	0x200018c4
 8009b08:	0800d008 	.word	0x0800d008

08009b0c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	4603      	mov	r3, r0
 8009b14:	6039      	str	r1, [r7, #0]
 8009b16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	4904      	ldr	r1, [pc, #16]	@ (8009b2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009b1c:	4804      	ldr	r0, [pc, #16]	@ (8009b30 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009b1e:	f7ff fdf7 	bl	8009710 <USBD_GetString>
  return USBD_StrDesc;
 8009b22:	4b02      	ldr	r3, [pc, #8]	@ (8009b2c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3708      	adds	r7, #8
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	200018c4 	.word	0x200018c4
 8009b30:	0800d020 	.word	0x0800d020

08009b34 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b082      	sub	sp, #8
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	6039      	str	r1, [r7, #0]
 8009b3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	221a      	movs	r2, #26
 8009b44:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009b46:	f000 f843 	bl	8009bd0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009b4a:	4b02      	ldr	r3, [pc, #8]	@ (8009b54 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	200000ec 	.word	0x200000ec

08009b58 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	4603      	mov	r3, r0
 8009b60:	6039      	str	r1, [r7, #0]
 8009b62:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009b64:	79fb      	ldrb	r3, [r7, #7]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d105      	bne.n	8009b76 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b6a:	683a      	ldr	r2, [r7, #0]
 8009b6c:	4907      	ldr	r1, [pc, #28]	@ (8009b8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b6e:	4808      	ldr	r0, [pc, #32]	@ (8009b90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b70:	f7ff fdce 	bl	8009710 <USBD_GetString>
 8009b74:	e004      	b.n	8009b80 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b76:	683a      	ldr	r2, [r7, #0]
 8009b78:	4904      	ldr	r1, [pc, #16]	@ (8009b8c <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b7a:	4805      	ldr	r0, [pc, #20]	@ (8009b90 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b7c:	f7ff fdc8 	bl	8009710 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b80:	4b02      	ldr	r3, [pc, #8]	@ (8009b8c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3708      	adds	r7, #8
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	200018c4 	.word	0x200018c4
 8009b90:	0800d034 	.word	0x0800d034

08009b94 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	6039      	str	r1, [r7, #0]
 8009b9e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009ba0:	79fb      	ldrb	r3, [r7, #7]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d105      	bne.n	8009bb2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009ba6:	683a      	ldr	r2, [r7, #0]
 8009ba8:	4907      	ldr	r1, [pc, #28]	@ (8009bc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009baa:	4808      	ldr	r0, [pc, #32]	@ (8009bcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009bac:	f7ff fdb0 	bl	8009710 <USBD_GetString>
 8009bb0:	e004      	b.n	8009bbc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009bb2:	683a      	ldr	r2, [r7, #0]
 8009bb4:	4904      	ldr	r1, [pc, #16]	@ (8009bc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009bb6:	4805      	ldr	r0, [pc, #20]	@ (8009bcc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009bb8:	f7ff fdaa 	bl	8009710 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bbc:	4b02      	ldr	r3, [pc, #8]	@ (8009bc8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3708      	adds	r7, #8
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	200018c4 	.word	0x200018c4
 8009bcc:	0800d040 	.word	0x0800d040

08009bd0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8009c14 <Get_SerialNum+0x44>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8009c18 <Get_SerialNum+0x48>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009be2:	4b0e      	ldr	r3, [pc, #56]	@ (8009c1c <Get_SerialNum+0x4c>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	4413      	add	r3, r2
 8009bee:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d009      	beq.n	8009c0a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009bf6:	2208      	movs	r2, #8
 8009bf8:	4909      	ldr	r1, [pc, #36]	@ (8009c20 <Get_SerialNum+0x50>)
 8009bfa:	68f8      	ldr	r0, [r7, #12]
 8009bfc:	f000 f814 	bl	8009c28 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009c00:	2204      	movs	r2, #4
 8009c02:	4908      	ldr	r1, [pc, #32]	@ (8009c24 <Get_SerialNum+0x54>)
 8009c04:	68b8      	ldr	r0, [r7, #8]
 8009c06:	f000 f80f 	bl	8009c28 <IntToUnicode>
  }
}
 8009c0a:	bf00      	nop
 8009c0c:	3710      	adds	r7, #16
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	1fff7a10 	.word	0x1fff7a10
 8009c18:	1fff7a14 	.word	0x1fff7a14
 8009c1c:	1fff7a18 	.word	0x1fff7a18
 8009c20:	200000ee 	.word	0x200000ee
 8009c24:	200000fe 	.word	0x200000fe

08009c28 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b087      	sub	sp, #28
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	4613      	mov	r3, r2
 8009c34:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009c36:	2300      	movs	r3, #0
 8009c38:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	75fb      	strb	r3, [r7, #23]
 8009c3e:	e027      	b.n	8009c90 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	0f1b      	lsrs	r3, r3, #28
 8009c44:	2b09      	cmp	r3, #9
 8009c46:	d80b      	bhi.n	8009c60 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	0f1b      	lsrs	r3, r3, #28
 8009c4c:	b2da      	uxtb	r2, r3
 8009c4e:	7dfb      	ldrb	r3, [r7, #23]
 8009c50:	005b      	lsls	r3, r3, #1
 8009c52:	4619      	mov	r1, r3
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	440b      	add	r3, r1
 8009c58:	3230      	adds	r2, #48	@ 0x30
 8009c5a:	b2d2      	uxtb	r2, r2
 8009c5c:	701a      	strb	r2, [r3, #0]
 8009c5e:	e00a      	b.n	8009c76 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	0f1b      	lsrs	r3, r3, #28
 8009c64:	b2da      	uxtb	r2, r3
 8009c66:	7dfb      	ldrb	r3, [r7, #23]
 8009c68:	005b      	lsls	r3, r3, #1
 8009c6a:	4619      	mov	r1, r3
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	440b      	add	r3, r1
 8009c70:	3237      	adds	r2, #55	@ 0x37
 8009c72:	b2d2      	uxtb	r2, r2
 8009c74:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	011b      	lsls	r3, r3, #4
 8009c7a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009c7c:	7dfb      	ldrb	r3, [r7, #23]
 8009c7e:	005b      	lsls	r3, r3, #1
 8009c80:	3301      	adds	r3, #1
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	4413      	add	r3, r2
 8009c86:	2200      	movs	r2, #0
 8009c88:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009c8a:	7dfb      	ldrb	r3, [r7, #23]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	75fb      	strb	r3, [r7, #23]
 8009c90:	7dfa      	ldrb	r2, [r7, #23]
 8009c92:	79fb      	ldrb	r3, [r7, #7]
 8009c94:	429a      	cmp	r2, r3
 8009c96:	d3d3      	bcc.n	8009c40 <IntToUnicode+0x18>
  }
}
 8009c98:	bf00      	nop
 8009c9a:	bf00      	nop
 8009c9c:	371c      	adds	r7, #28
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca4:	4770      	bx	lr
	...

08009ca8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b08a      	sub	sp, #40	@ 0x28
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009cb0:	f107 0314 	add.w	r3, r7, #20
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	601a      	str	r2, [r3, #0]
 8009cb8:	605a      	str	r2, [r3, #4]
 8009cba:	609a      	str	r2, [r3, #8]
 8009cbc:	60da      	str	r2, [r3, #12]
 8009cbe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009cc8:	d13a      	bne.n	8009d40 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009cca:	2300      	movs	r3, #0
 8009ccc:	613b      	str	r3, [r7, #16]
 8009cce:	4b1e      	ldr	r3, [pc, #120]	@ (8009d48 <HAL_PCD_MspInit+0xa0>)
 8009cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cd2:	4a1d      	ldr	r2, [pc, #116]	@ (8009d48 <HAL_PCD_MspInit+0xa0>)
 8009cd4:	f043 0301 	orr.w	r3, r3, #1
 8009cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8009cda:	4b1b      	ldr	r3, [pc, #108]	@ (8009d48 <HAL_PCD_MspInit+0xa0>)
 8009cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cde:	f003 0301 	and.w	r3, r3, #1
 8009ce2:	613b      	str	r3, [r7, #16]
 8009ce4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_D__Pin|USB_D_A12_Pin;
 8009ce6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009cec:	2302      	movs	r3, #2
 8009cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009cf4:	2303      	movs	r3, #3
 8009cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009cf8:	230a      	movs	r3, #10
 8009cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009cfc:	f107 0314 	add.w	r3, r7, #20
 8009d00:	4619      	mov	r1, r3
 8009d02:	4812      	ldr	r0, [pc, #72]	@ (8009d4c <HAL_PCD_MspInit+0xa4>)
 8009d04:	f7f9 f84e 	bl	8002da4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009d08:	4b0f      	ldr	r3, [pc, #60]	@ (8009d48 <HAL_PCD_MspInit+0xa0>)
 8009d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8009d48 <HAL_PCD_MspInit+0xa0>)
 8009d0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d12:	6353      	str	r3, [r2, #52]	@ 0x34
 8009d14:	2300      	movs	r3, #0
 8009d16:	60fb      	str	r3, [r7, #12]
 8009d18:	4b0b      	ldr	r3, [pc, #44]	@ (8009d48 <HAL_PCD_MspInit+0xa0>)
 8009d1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8009d48 <HAL_PCD_MspInit+0xa0>)
 8009d1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009d22:	6453      	str	r3, [r2, #68]	@ 0x44
 8009d24:	4b08      	ldr	r3, [pc, #32]	@ (8009d48 <HAL_PCD_MspInit+0xa0>)
 8009d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009d2c:	60fb      	str	r3, [r7, #12]
 8009d2e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009d30:	2200      	movs	r2, #0
 8009d32:	2100      	movs	r1, #0
 8009d34:	2043      	movs	r0, #67	@ 0x43
 8009d36:	f7f8 fffe 	bl	8002d36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009d3a:	2043      	movs	r0, #67	@ 0x43
 8009d3c:	f7f9 f817 	bl	8002d6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009d40:	bf00      	nop
 8009d42:	3728      	adds	r7, #40	@ 0x28
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}
 8009d48:	40023800 	.word	0x40023800
 8009d4c:	40020000 	.word	0x40020000

08009d50 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009d64:	4619      	mov	r1, r3
 8009d66:	4610      	mov	r0, r2
 8009d68:	f7fe fb6f 	bl	800844a <USBD_LL_SetupStage>
}
 8009d6c:	bf00      	nop
 8009d6e:	3708      	adds	r7, #8
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}

08009d74 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b082      	sub	sp, #8
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009d86:	78fa      	ldrb	r2, [r7, #3]
 8009d88:	6879      	ldr	r1, [r7, #4]
 8009d8a:	4613      	mov	r3, r2
 8009d8c:	00db      	lsls	r3, r3, #3
 8009d8e:	4413      	add	r3, r2
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	440b      	add	r3, r1
 8009d94:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009d98:	681a      	ldr	r2, [r3, #0]
 8009d9a:	78fb      	ldrb	r3, [r7, #3]
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	f7fe fba9 	bl	80084f4 <USBD_LL_DataOutStage>
}
 8009da2:	bf00      	nop
 8009da4:	3708      	adds	r7, #8
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b082      	sub	sp, #8
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
 8009db2:	460b      	mov	r3, r1
 8009db4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009dbc:	78fa      	ldrb	r2, [r7, #3]
 8009dbe:	6879      	ldr	r1, [r7, #4]
 8009dc0:	4613      	mov	r3, r2
 8009dc2:	00db      	lsls	r3, r3, #3
 8009dc4:	4413      	add	r3, r2
 8009dc6:	009b      	lsls	r3, r3, #2
 8009dc8:	440b      	add	r3, r1
 8009dca:	3320      	adds	r3, #32
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	78fb      	ldrb	r3, [r7, #3]
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	f7fe fc42 	bl	800865a <USBD_LL_DataInStage>
}
 8009dd6:	bf00      	nop
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b082      	sub	sp, #8
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7fe fd7c 	bl	80088ea <USBD_LL_SOF>
}
 8009df2:	bf00      	nop
 8009df4:	3708      	adds	r7, #8
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b084      	sub	sp, #16
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e02:	2301      	movs	r3, #1
 8009e04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	79db      	ldrb	r3, [r3, #7]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d102      	bne.n	8009e14 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	73fb      	strb	r3, [r7, #15]
 8009e12:	e008      	b.n	8009e26 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	79db      	ldrb	r3, [r3, #7]
 8009e18:	2b02      	cmp	r3, #2
 8009e1a:	d102      	bne.n	8009e22 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	73fb      	strb	r3, [r7, #15]
 8009e20:	e001      	b.n	8009e26 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009e22:	f7f7 fe31 	bl	8001a88 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e2c:	7bfa      	ldrb	r2, [r7, #15]
 8009e2e:	4611      	mov	r1, r2
 8009e30:	4618      	mov	r0, r3
 8009e32:	f7fe fd16 	bl	8008862 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7fe fcbe 	bl	80087be <USBD_LL_Reset>
}
 8009e42:	bf00      	nop
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}
	...

08009e4c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7fe fd11 	bl	8008882 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	6812      	ldr	r2, [r2, #0]
 8009e6e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009e72:	f043 0301 	orr.w	r3, r3, #1
 8009e76:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	7adb      	ldrb	r3, [r3, #11]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d005      	beq.n	8009e8c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e80:	4b04      	ldr	r3, [pc, #16]	@ (8009e94 <HAL_PCD_SuspendCallback+0x48>)
 8009e82:	691b      	ldr	r3, [r3, #16]
 8009e84:	4a03      	ldr	r2, [pc, #12]	@ (8009e94 <HAL_PCD_SuspendCallback+0x48>)
 8009e86:	f043 0306 	orr.w	r3, r3, #6
 8009e8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009e8c:	bf00      	nop
 8009e8e:	3708      	adds	r7, #8
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	e000ed00 	.word	0xe000ed00

08009e98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b082      	sub	sp, #8
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f7fe fd07 	bl	80088ba <USBD_LL_Resume>
}
 8009eac:	bf00      	nop
 8009eae:	3708      	adds	r7, #8
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd80      	pop	{r7, pc}

08009eb4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b082      	sub	sp, #8
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ec6:	78fa      	ldrb	r2, [r7, #3]
 8009ec8:	4611      	mov	r1, r2
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f7fe fd5f 	bl	800898e <USBD_LL_IsoOUTIncomplete>
}
 8009ed0:	bf00      	nop
 8009ed2:	3708      	adds	r7, #8
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b082      	sub	sp, #8
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009eea:	78fa      	ldrb	r2, [r7, #3]
 8009eec:	4611      	mov	r1, r2
 8009eee:	4618      	mov	r0, r3
 8009ef0:	f7fe fd1b 	bl	800892a <USBD_LL_IsoINIncomplete>
}
 8009ef4:	bf00      	nop
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fe fd71 	bl	80089f2 <USBD_LL_DevConnected>
}
 8009f10:	bf00      	nop
 8009f12:	3708      	adds	r7, #8
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b082      	sub	sp, #8
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7fe fd6e 	bl	8008a08 <USBD_LL_DevDisconnected>
}
 8009f2c:	bf00      	nop
 8009f2e:	3708      	adds	r7, #8
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b082      	sub	sp, #8
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d13c      	bne.n	8009fbe <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009f44:	4a20      	ldr	r2, [pc, #128]	@ (8009fc8 <USBD_LL_Init+0x94>)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	4a1e      	ldr	r2, [pc, #120]	@ (8009fc8 <USBD_LL_Init+0x94>)
 8009f50:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009f54:	4b1c      	ldr	r3, [pc, #112]	@ (8009fc8 <USBD_LL_Init+0x94>)
 8009f56:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009f5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8009fc8 <USBD_LL_Init+0x94>)
 8009f5e:	2204      	movs	r2, #4
 8009f60:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009f62:	4b19      	ldr	r3, [pc, #100]	@ (8009fc8 <USBD_LL_Init+0x94>)
 8009f64:	2202      	movs	r2, #2
 8009f66:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009f68:	4b17      	ldr	r3, [pc, #92]	@ (8009fc8 <USBD_LL_Init+0x94>)
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009f6e:	4b16      	ldr	r3, [pc, #88]	@ (8009fc8 <USBD_LL_Init+0x94>)
 8009f70:	2202      	movs	r2, #2
 8009f72:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009f74:	4b14      	ldr	r3, [pc, #80]	@ (8009fc8 <USBD_LL_Init+0x94>)
 8009f76:	2200      	movs	r2, #0
 8009f78:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009f7a:	4b13      	ldr	r3, [pc, #76]	@ (8009fc8 <USBD_LL_Init+0x94>)
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009f80:	4b11      	ldr	r3, [pc, #68]	@ (8009fc8 <USBD_LL_Init+0x94>)
 8009f82:	2200      	movs	r2, #0
 8009f84:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009f86:	4b10      	ldr	r3, [pc, #64]	@ (8009fc8 <USBD_LL_Init+0x94>)
 8009f88:	2200      	movs	r2, #0
 8009f8a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8009fc8 <USBD_LL_Init+0x94>)
 8009f8e:	2200      	movs	r2, #0
 8009f90:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009f92:	480d      	ldr	r0, [pc, #52]	@ (8009fc8 <USBD_LL_Init+0x94>)
 8009f94:	f7f9 fa00 	bl	8003398 <HAL_PCD_Init>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d001      	beq.n	8009fa2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009f9e:	f7f7 fd73 	bl	8001a88 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009fa2:	2180      	movs	r1, #128	@ 0x80
 8009fa4:	4808      	ldr	r0, [pc, #32]	@ (8009fc8 <USBD_LL_Init+0x94>)
 8009fa6:	f7fa fc2c 	bl	8004802 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009faa:	2240      	movs	r2, #64	@ 0x40
 8009fac:	2100      	movs	r1, #0
 8009fae:	4806      	ldr	r0, [pc, #24]	@ (8009fc8 <USBD_LL_Init+0x94>)
 8009fb0:	f7fa fbe0 	bl	8004774 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009fb4:	2280      	movs	r2, #128	@ 0x80
 8009fb6:	2101      	movs	r1, #1
 8009fb8:	4803      	ldr	r0, [pc, #12]	@ (8009fc8 <USBD_LL_Init+0x94>)
 8009fba:	f7fa fbdb 	bl	8004774 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009fbe:	2300      	movs	r3, #0
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3708      	adds	r7, #8
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	20001ac4 	.word	0x20001ac4

08009fcc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7f9 fae7 	bl	80035b6 <HAL_PCD_Start>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fec:	7bfb      	ldrb	r3, [r7, #15]
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f000 f942 	bl	800a278 <USBD_Get_USB_Status>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ff8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3710      	adds	r7, #16
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b084      	sub	sp, #16
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
 800a00a:	4608      	mov	r0, r1
 800a00c:	4611      	mov	r1, r2
 800a00e:	461a      	mov	r2, r3
 800a010:	4603      	mov	r3, r0
 800a012:	70fb      	strb	r3, [r7, #3]
 800a014:	460b      	mov	r3, r1
 800a016:	70bb      	strb	r3, [r7, #2]
 800a018:	4613      	mov	r3, r2
 800a01a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a01c:	2300      	movs	r3, #0
 800a01e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a020:	2300      	movs	r3, #0
 800a022:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a02a:	78bb      	ldrb	r3, [r7, #2]
 800a02c:	883a      	ldrh	r2, [r7, #0]
 800a02e:	78f9      	ldrb	r1, [r7, #3]
 800a030:	f7f9 ffbb 	bl	8003faa <HAL_PCD_EP_Open>
 800a034:	4603      	mov	r3, r0
 800a036:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a038:	7bfb      	ldrb	r3, [r7, #15]
 800a03a:	4618      	mov	r0, r3
 800a03c:	f000 f91c 	bl	800a278 <USBD_Get_USB_Status>
 800a040:	4603      	mov	r3, r0
 800a042:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a044:	7bbb      	ldrb	r3, [r7, #14]
}
 800a046:	4618      	mov	r0, r3
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b084      	sub	sp, #16
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
 800a056:	460b      	mov	r3, r1
 800a058:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a05a:	2300      	movs	r3, #0
 800a05c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a05e:	2300      	movs	r3, #0
 800a060:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a068:	78fa      	ldrb	r2, [r7, #3]
 800a06a:	4611      	mov	r1, r2
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7fa f806 	bl	800407e <HAL_PCD_EP_Close>
 800a072:	4603      	mov	r3, r0
 800a074:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a076:	7bfb      	ldrb	r3, [r7, #15]
 800a078:	4618      	mov	r0, r3
 800a07a:	f000 f8fd 	bl	800a278 <USBD_Get_USB_Status>
 800a07e:	4603      	mov	r3, r0
 800a080:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a082:	7bbb      	ldrb	r3, [r7, #14]
}
 800a084:	4618      	mov	r0, r3
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	460b      	mov	r3, r1
 800a096:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a098:	2300      	movs	r3, #0
 800a09a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a09c:	2300      	movs	r3, #0
 800a09e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a0a6:	78fa      	ldrb	r2, [r7, #3]
 800a0a8:	4611      	mov	r1, r2
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7fa f8be 	bl	800422c <HAL_PCD_EP_SetStall>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0b4:	7bfb      	ldrb	r3, [r7, #15]
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f000 f8de 	bl	800a278 <USBD_Get_USB_Status>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	3710      	adds	r7, #16
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	bd80      	pop	{r7, pc}

0800a0ca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0ca:	b580      	push	{r7, lr}
 800a0cc:	b084      	sub	sp, #16
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	6078      	str	r0, [r7, #4]
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a0e4:	78fa      	ldrb	r2, [r7, #3]
 800a0e6:	4611      	mov	r1, r2
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7fa f902 	bl	80042f2 <HAL_PCD_EP_ClrStall>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0f2:	7bfb      	ldrb	r3, [r7, #15]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f000 f8bf 	bl	800a278 <USBD_Get_USB_Status>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800a100:	4618      	mov	r0, r3
 800a102:	3710      	adds	r7, #16
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}

0800a108 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	460b      	mov	r3, r1
 800a112:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a11a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a11c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a120:	2b00      	cmp	r3, #0
 800a122:	da0b      	bge.n	800a13c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a124:	78fb      	ldrb	r3, [r7, #3]
 800a126:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a12a:	68f9      	ldr	r1, [r7, #12]
 800a12c:	4613      	mov	r3, r2
 800a12e:	00db      	lsls	r3, r3, #3
 800a130:	4413      	add	r3, r2
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	440b      	add	r3, r1
 800a136:	3316      	adds	r3, #22
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	e00b      	b.n	800a154 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a13c:	78fb      	ldrb	r3, [r7, #3]
 800a13e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a142:	68f9      	ldr	r1, [r7, #12]
 800a144:	4613      	mov	r3, r2
 800a146:	00db      	lsls	r3, r3, #3
 800a148:	4413      	add	r3, r2
 800a14a:	009b      	lsls	r3, r3, #2
 800a14c:	440b      	add	r3, r1
 800a14e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a152:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a154:	4618      	mov	r0, r3
 800a156:	3714      	adds	r7, #20
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	460b      	mov	r3, r1
 800a16a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a16c:	2300      	movs	r3, #0
 800a16e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a170:	2300      	movs	r3, #0
 800a172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a17a:	78fa      	ldrb	r2, [r7, #3]
 800a17c:	4611      	mov	r1, r2
 800a17e:	4618      	mov	r0, r3
 800a180:	f7f9 feef 	bl	8003f62 <HAL_PCD_SetAddress>
 800a184:	4603      	mov	r3, r0
 800a186:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a188:	7bfb      	ldrb	r3, [r7, #15]
 800a18a:	4618      	mov	r0, r3
 800a18c:	f000 f874 	bl	800a278 <USBD_Get_USB_Status>
 800a190:	4603      	mov	r3, r0
 800a192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a194:	7bbb      	ldrb	r3, [r7, #14]
}
 800a196:	4618      	mov	r0, r3
 800a198:	3710      	adds	r7, #16
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b086      	sub	sp, #24
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	60f8      	str	r0, [r7, #12]
 800a1a6:	607a      	str	r2, [r7, #4]
 800a1a8:	603b      	str	r3, [r7, #0]
 800a1aa:	460b      	mov	r3, r1
 800a1ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a1bc:	7af9      	ldrb	r1, [r7, #11]
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	f7f9 fff9 	bl	80041b8 <HAL_PCD_EP_Transmit>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1ca:	7dfb      	ldrb	r3, [r7, #23]
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f000 f853 	bl	800a278 <USBD_Get_USB_Status>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1d6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	3718      	adds	r7, #24
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b086      	sub	sp, #24
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	607a      	str	r2, [r7, #4]
 800a1ea:	603b      	str	r3, [r7, #0]
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a1fe:	7af9      	ldrb	r1, [r7, #11]
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	f7f9 ff85 	bl	8004112 <HAL_PCD_EP_Receive>
 800a208:	4603      	mov	r3, r0
 800a20a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a20c:	7dfb      	ldrb	r3, [r7, #23]
 800a20e:	4618      	mov	r0, r3
 800a210:	f000 f832 	bl	800a278 <USBD_Get_USB_Status>
 800a214:	4603      	mov	r3, r0
 800a216:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a218:	7dbb      	ldrb	r3, [r7, #22]
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3718      	adds	r7, #24
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b082      	sub	sp, #8
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
 800a22a:	460b      	mov	r3, r1
 800a22c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a234:	78fa      	ldrb	r2, [r7, #3]
 800a236:	4611      	mov	r1, r2
 800a238:	4618      	mov	r0, r3
 800a23a:	f7f9 ffa5 	bl	8004188 <HAL_PCD_EP_GetRxCount>
 800a23e:	4603      	mov	r3, r0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3708      	adds	r7, #8
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a248:	b480      	push	{r7}
 800a24a:	b083      	sub	sp, #12
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a250:	4b03      	ldr	r3, [pc, #12]	@ (800a260 <USBD_static_malloc+0x18>)
}
 800a252:	4618      	mov	r0, r3
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	20001fa8 	.word	0x20001fa8

0800a264 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]

}
 800a26c:	bf00      	nop
 800a26e:	370c      	adds	r7, #12
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a278:	b480      	push	{r7}
 800a27a:	b085      	sub	sp, #20
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	4603      	mov	r3, r0
 800a280:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a282:	2300      	movs	r3, #0
 800a284:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a286:	79fb      	ldrb	r3, [r7, #7]
 800a288:	2b03      	cmp	r3, #3
 800a28a:	d817      	bhi.n	800a2bc <USBD_Get_USB_Status+0x44>
 800a28c:	a201      	add	r2, pc, #4	@ (adr r2, 800a294 <USBD_Get_USB_Status+0x1c>)
 800a28e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a292:	bf00      	nop
 800a294:	0800a2a5 	.word	0x0800a2a5
 800a298:	0800a2ab 	.word	0x0800a2ab
 800a29c:	0800a2b1 	.word	0x0800a2b1
 800a2a0:	0800a2b7 	.word	0x0800a2b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a2a8:	e00b      	b.n	800a2c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a2aa:	2303      	movs	r3, #3
 800a2ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ae:	e008      	b.n	800a2c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2b4:	e005      	b.n	800a2c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2b6:	2303      	movs	r3, #3
 800a2b8:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ba:	e002      	b.n	800a2c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	73fb      	strb	r3, [r7, #15]
    break;
 800a2c0:	bf00      	nop
  }
  return usb_status;
 800a2c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3714      	adds	r7, #20
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr

0800a2d0 <__cvt>:
 800a2d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2d4:	ec57 6b10 	vmov	r6, r7, d0
 800a2d8:	2f00      	cmp	r7, #0
 800a2da:	460c      	mov	r4, r1
 800a2dc:	4619      	mov	r1, r3
 800a2de:	463b      	mov	r3, r7
 800a2e0:	bfbb      	ittet	lt
 800a2e2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a2e6:	461f      	movlt	r7, r3
 800a2e8:	2300      	movge	r3, #0
 800a2ea:	232d      	movlt	r3, #45	@ 0x2d
 800a2ec:	700b      	strb	r3, [r1, #0]
 800a2ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a2f0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a2f4:	4691      	mov	r9, r2
 800a2f6:	f023 0820 	bic.w	r8, r3, #32
 800a2fa:	bfbc      	itt	lt
 800a2fc:	4632      	movlt	r2, r6
 800a2fe:	4616      	movlt	r6, r2
 800a300:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a304:	d005      	beq.n	800a312 <__cvt+0x42>
 800a306:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a30a:	d100      	bne.n	800a30e <__cvt+0x3e>
 800a30c:	3401      	adds	r4, #1
 800a30e:	2102      	movs	r1, #2
 800a310:	e000      	b.n	800a314 <__cvt+0x44>
 800a312:	2103      	movs	r1, #3
 800a314:	ab03      	add	r3, sp, #12
 800a316:	9301      	str	r3, [sp, #4]
 800a318:	ab02      	add	r3, sp, #8
 800a31a:	9300      	str	r3, [sp, #0]
 800a31c:	ec47 6b10 	vmov	d0, r6, r7
 800a320:	4653      	mov	r3, sl
 800a322:	4622      	mov	r2, r4
 800a324:	f000 fdd0 	bl	800aec8 <_dtoa_r>
 800a328:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a32c:	4605      	mov	r5, r0
 800a32e:	d119      	bne.n	800a364 <__cvt+0x94>
 800a330:	f019 0f01 	tst.w	r9, #1
 800a334:	d00e      	beq.n	800a354 <__cvt+0x84>
 800a336:	eb00 0904 	add.w	r9, r0, r4
 800a33a:	2200      	movs	r2, #0
 800a33c:	2300      	movs	r3, #0
 800a33e:	4630      	mov	r0, r6
 800a340:	4639      	mov	r1, r7
 800a342:	f7f6 fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a346:	b108      	cbz	r0, 800a34c <__cvt+0x7c>
 800a348:	f8cd 900c 	str.w	r9, [sp, #12]
 800a34c:	2230      	movs	r2, #48	@ 0x30
 800a34e:	9b03      	ldr	r3, [sp, #12]
 800a350:	454b      	cmp	r3, r9
 800a352:	d31e      	bcc.n	800a392 <__cvt+0xc2>
 800a354:	9b03      	ldr	r3, [sp, #12]
 800a356:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a358:	1b5b      	subs	r3, r3, r5
 800a35a:	4628      	mov	r0, r5
 800a35c:	6013      	str	r3, [r2, #0]
 800a35e:	b004      	add	sp, #16
 800a360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a364:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a368:	eb00 0904 	add.w	r9, r0, r4
 800a36c:	d1e5      	bne.n	800a33a <__cvt+0x6a>
 800a36e:	7803      	ldrb	r3, [r0, #0]
 800a370:	2b30      	cmp	r3, #48	@ 0x30
 800a372:	d10a      	bne.n	800a38a <__cvt+0xba>
 800a374:	2200      	movs	r2, #0
 800a376:	2300      	movs	r3, #0
 800a378:	4630      	mov	r0, r6
 800a37a:	4639      	mov	r1, r7
 800a37c:	f7f6 fba4 	bl	8000ac8 <__aeabi_dcmpeq>
 800a380:	b918      	cbnz	r0, 800a38a <__cvt+0xba>
 800a382:	f1c4 0401 	rsb	r4, r4, #1
 800a386:	f8ca 4000 	str.w	r4, [sl]
 800a38a:	f8da 3000 	ldr.w	r3, [sl]
 800a38e:	4499      	add	r9, r3
 800a390:	e7d3      	b.n	800a33a <__cvt+0x6a>
 800a392:	1c59      	adds	r1, r3, #1
 800a394:	9103      	str	r1, [sp, #12]
 800a396:	701a      	strb	r2, [r3, #0]
 800a398:	e7d9      	b.n	800a34e <__cvt+0x7e>

0800a39a <__exponent>:
 800a39a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a39c:	2900      	cmp	r1, #0
 800a39e:	bfba      	itte	lt
 800a3a0:	4249      	neglt	r1, r1
 800a3a2:	232d      	movlt	r3, #45	@ 0x2d
 800a3a4:	232b      	movge	r3, #43	@ 0x2b
 800a3a6:	2909      	cmp	r1, #9
 800a3a8:	7002      	strb	r2, [r0, #0]
 800a3aa:	7043      	strb	r3, [r0, #1]
 800a3ac:	dd29      	ble.n	800a402 <__exponent+0x68>
 800a3ae:	f10d 0307 	add.w	r3, sp, #7
 800a3b2:	461d      	mov	r5, r3
 800a3b4:	270a      	movs	r7, #10
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	fbb1 f6f7 	udiv	r6, r1, r7
 800a3bc:	fb07 1416 	mls	r4, r7, r6, r1
 800a3c0:	3430      	adds	r4, #48	@ 0x30
 800a3c2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a3c6:	460c      	mov	r4, r1
 800a3c8:	2c63      	cmp	r4, #99	@ 0x63
 800a3ca:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a3ce:	4631      	mov	r1, r6
 800a3d0:	dcf1      	bgt.n	800a3b6 <__exponent+0x1c>
 800a3d2:	3130      	adds	r1, #48	@ 0x30
 800a3d4:	1e94      	subs	r4, r2, #2
 800a3d6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a3da:	1c41      	adds	r1, r0, #1
 800a3dc:	4623      	mov	r3, r4
 800a3de:	42ab      	cmp	r3, r5
 800a3e0:	d30a      	bcc.n	800a3f8 <__exponent+0x5e>
 800a3e2:	f10d 0309 	add.w	r3, sp, #9
 800a3e6:	1a9b      	subs	r3, r3, r2
 800a3e8:	42ac      	cmp	r4, r5
 800a3ea:	bf88      	it	hi
 800a3ec:	2300      	movhi	r3, #0
 800a3ee:	3302      	adds	r3, #2
 800a3f0:	4403      	add	r3, r0
 800a3f2:	1a18      	subs	r0, r3, r0
 800a3f4:	b003      	add	sp, #12
 800a3f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3f8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a3fc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a400:	e7ed      	b.n	800a3de <__exponent+0x44>
 800a402:	2330      	movs	r3, #48	@ 0x30
 800a404:	3130      	adds	r1, #48	@ 0x30
 800a406:	7083      	strb	r3, [r0, #2]
 800a408:	70c1      	strb	r1, [r0, #3]
 800a40a:	1d03      	adds	r3, r0, #4
 800a40c:	e7f1      	b.n	800a3f2 <__exponent+0x58>
	...

0800a410 <_printf_float>:
 800a410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a414:	b08d      	sub	sp, #52	@ 0x34
 800a416:	460c      	mov	r4, r1
 800a418:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a41c:	4616      	mov	r6, r2
 800a41e:	461f      	mov	r7, r3
 800a420:	4605      	mov	r5, r0
 800a422:	f000 fc97 	bl	800ad54 <_localeconv_r>
 800a426:	6803      	ldr	r3, [r0, #0]
 800a428:	9304      	str	r3, [sp, #16]
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7f5 ff20 	bl	8000270 <strlen>
 800a430:	2300      	movs	r3, #0
 800a432:	930a      	str	r3, [sp, #40]	@ 0x28
 800a434:	f8d8 3000 	ldr.w	r3, [r8]
 800a438:	9005      	str	r0, [sp, #20]
 800a43a:	3307      	adds	r3, #7
 800a43c:	f023 0307 	bic.w	r3, r3, #7
 800a440:	f103 0208 	add.w	r2, r3, #8
 800a444:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a448:	f8d4 b000 	ldr.w	fp, [r4]
 800a44c:	f8c8 2000 	str.w	r2, [r8]
 800a450:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a454:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a458:	9307      	str	r3, [sp, #28]
 800a45a:	f8cd 8018 	str.w	r8, [sp, #24]
 800a45e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a462:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a466:	4b9c      	ldr	r3, [pc, #624]	@ (800a6d8 <_printf_float+0x2c8>)
 800a468:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a46c:	f7f6 fb5e 	bl	8000b2c <__aeabi_dcmpun>
 800a470:	bb70      	cbnz	r0, 800a4d0 <_printf_float+0xc0>
 800a472:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a476:	4b98      	ldr	r3, [pc, #608]	@ (800a6d8 <_printf_float+0x2c8>)
 800a478:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a47c:	f7f6 fb38 	bl	8000af0 <__aeabi_dcmple>
 800a480:	bb30      	cbnz	r0, 800a4d0 <_printf_float+0xc0>
 800a482:	2200      	movs	r2, #0
 800a484:	2300      	movs	r3, #0
 800a486:	4640      	mov	r0, r8
 800a488:	4649      	mov	r1, r9
 800a48a:	f7f6 fb27 	bl	8000adc <__aeabi_dcmplt>
 800a48e:	b110      	cbz	r0, 800a496 <_printf_float+0x86>
 800a490:	232d      	movs	r3, #45	@ 0x2d
 800a492:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a496:	4a91      	ldr	r2, [pc, #580]	@ (800a6dc <_printf_float+0x2cc>)
 800a498:	4b91      	ldr	r3, [pc, #580]	@ (800a6e0 <_printf_float+0x2d0>)
 800a49a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a49e:	bf94      	ite	ls
 800a4a0:	4690      	movls	r8, r2
 800a4a2:	4698      	movhi	r8, r3
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	6123      	str	r3, [r4, #16]
 800a4a8:	f02b 0304 	bic.w	r3, fp, #4
 800a4ac:	6023      	str	r3, [r4, #0]
 800a4ae:	f04f 0900 	mov.w	r9, #0
 800a4b2:	9700      	str	r7, [sp, #0]
 800a4b4:	4633      	mov	r3, r6
 800a4b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a4b8:	4621      	mov	r1, r4
 800a4ba:	4628      	mov	r0, r5
 800a4bc:	f000 f9d2 	bl	800a864 <_printf_common>
 800a4c0:	3001      	adds	r0, #1
 800a4c2:	f040 808d 	bne.w	800a5e0 <_printf_float+0x1d0>
 800a4c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a4ca:	b00d      	add	sp, #52	@ 0x34
 800a4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d0:	4642      	mov	r2, r8
 800a4d2:	464b      	mov	r3, r9
 800a4d4:	4640      	mov	r0, r8
 800a4d6:	4649      	mov	r1, r9
 800a4d8:	f7f6 fb28 	bl	8000b2c <__aeabi_dcmpun>
 800a4dc:	b140      	cbz	r0, 800a4f0 <_printf_float+0xe0>
 800a4de:	464b      	mov	r3, r9
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	bfbc      	itt	lt
 800a4e4:	232d      	movlt	r3, #45	@ 0x2d
 800a4e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a4ea:	4a7e      	ldr	r2, [pc, #504]	@ (800a6e4 <_printf_float+0x2d4>)
 800a4ec:	4b7e      	ldr	r3, [pc, #504]	@ (800a6e8 <_printf_float+0x2d8>)
 800a4ee:	e7d4      	b.n	800a49a <_printf_float+0x8a>
 800a4f0:	6863      	ldr	r3, [r4, #4]
 800a4f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a4f6:	9206      	str	r2, [sp, #24]
 800a4f8:	1c5a      	adds	r2, r3, #1
 800a4fa:	d13b      	bne.n	800a574 <_printf_float+0x164>
 800a4fc:	2306      	movs	r3, #6
 800a4fe:	6063      	str	r3, [r4, #4]
 800a500:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a504:	2300      	movs	r3, #0
 800a506:	6022      	str	r2, [r4, #0]
 800a508:	9303      	str	r3, [sp, #12]
 800a50a:	ab0a      	add	r3, sp, #40	@ 0x28
 800a50c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a510:	ab09      	add	r3, sp, #36	@ 0x24
 800a512:	9300      	str	r3, [sp, #0]
 800a514:	6861      	ldr	r1, [r4, #4]
 800a516:	ec49 8b10 	vmov	d0, r8, r9
 800a51a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a51e:	4628      	mov	r0, r5
 800a520:	f7ff fed6 	bl	800a2d0 <__cvt>
 800a524:	9b06      	ldr	r3, [sp, #24]
 800a526:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a528:	2b47      	cmp	r3, #71	@ 0x47
 800a52a:	4680      	mov	r8, r0
 800a52c:	d129      	bne.n	800a582 <_printf_float+0x172>
 800a52e:	1cc8      	adds	r0, r1, #3
 800a530:	db02      	blt.n	800a538 <_printf_float+0x128>
 800a532:	6863      	ldr	r3, [r4, #4]
 800a534:	4299      	cmp	r1, r3
 800a536:	dd41      	ble.n	800a5bc <_printf_float+0x1ac>
 800a538:	f1aa 0a02 	sub.w	sl, sl, #2
 800a53c:	fa5f fa8a 	uxtb.w	sl, sl
 800a540:	3901      	subs	r1, #1
 800a542:	4652      	mov	r2, sl
 800a544:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a548:	9109      	str	r1, [sp, #36]	@ 0x24
 800a54a:	f7ff ff26 	bl	800a39a <__exponent>
 800a54e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a550:	1813      	adds	r3, r2, r0
 800a552:	2a01      	cmp	r2, #1
 800a554:	4681      	mov	r9, r0
 800a556:	6123      	str	r3, [r4, #16]
 800a558:	dc02      	bgt.n	800a560 <_printf_float+0x150>
 800a55a:	6822      	ldr	r2, [r4, #0]
 800a55c:	07d2      	lsls	r2, r2, #31
 800a55e:	d501      	bpl.n	800a564 <_printf_float+0x154>
 800a560:	3301      	adds	r3, #1
 800a562:	6123      	str	r3, [r4, #16]
 800a564:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d0a2      	beq.n	800a4b2 <_printf_float+0xa2>
 800a56c:	232d      	movs	r3, #45	@ 0x2d
 800a56e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a572:	e79e      	b.n	800a4b2 <_printf_float+0xa2>
 800a574:	9a06      	ldr	r2, [sp, #24]
 800a576:	2a47      	cmp	r2, #71	@ 0x47
 800a578:	d1c2      	bne.n	800a500 <_printf_float+0xf0>
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d1c0      	bne.n	800a500 <_printf_float+0xf0>
 800a57e:	2301      	movs	r3, #1
 800a580:	e7bd      	b.n	800a4fe <_printf_float+0xee>
 800a582:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a586:	d9db      	bls.n	800a540 <_printf_float+0x130>
 800a588:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a58c:	d118      	bne.n	800a5c0 <_printf_float+0x1b0>
 800a58e:	2900      	cmp	r1, #0
 800a590:	6863      	ldr	r3, [r4, #4]
 800a592:	dd0b      	ble.n	800a5ac <_printf_float+0x19c>
 800a594:	6121      	str	r1, [r4, #16]
 800a596:	b913      	cbnz	r3, 800a59e <_printf_float+0x18e>
 800a598:	6822      	ldr	r2, [r4, #0]
 800a59a:	07d0      	lsls	r0, r2, #31
 800a59c:	d502      	bpl.n	800a5a4 <_printf_float+0x194>
 800a59e:	3301      	adds	r3, #1
 800a5a0:	440b      	add	r3, r1
 800a5a2:	6123      	str	r3, [r4, #16]
 800a5a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a5a6:	f04f 0900 	mov.w	r9, #0
 800a5aa:	e7db      	b.n	800a564 <_printf_float+0x154>
 800a5ac:	b913      	cbnz	r3, 800a5b4 <_printf_float+0x1a4>
 800a5ae:	6822      	ldr	r2, [r4, #0]
 800a5b0:	07d2      	lsls	r2, r2, #31
 800a5b2:	d501      	bpl.n	800a5b8 <_printf_float+0x1a8>
 800a5b4:	3302      	adds	r3, #2
 800a5b6:	e7f4      	b.n	800a5a2 <_printf_float+0x192>
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	e7f2      	b.n	800a5a2 <_printf_float+0x192>
 800a5bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a5c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5c2:	4299      	cmp	r1, r3
 800a5c4:	db05      	blt.n	800a5d2 <_printf_float+0x1c2>
 800a5c6:	6823      	ldr	r3, [r4, #0]
 800a5c8:	6121      	str	r1, [r4, #16]
 800a5ca:	07d8      	lsls	r0, r3, #31
 800a5cc:	d5ea      	bpl.n	800a5a4 <_printf_float+0x194>
 800a5ce:	1c4b      	adds	r3, r1, #1
 800a5d0:	e7e7      	b.n	800a5a2 <_printf_float+0x192>
 800a5d2:	2900      	cmp	r1, #0
 800a5d4:	bfd4      	ite	le
 800a5d6:	f1c1 0202 	rsble	r2, r1, #2
 800a5da:	2201      	movgt	r2, #1
 800a5dc:	4413      	add	r3, r2
 800a5de:	e7e0      	b.n	800a5a2 <_printf_float+0x192>
 800a5e0:	6823      	ldr	r3, [r4, #0]
 800a5e2:	055a      	lsls	r2, r3, #21
 800a5e4:	d407      	bmi.n	800a5f6 <_printf_float+0x1e6>
 800a5e6:	6923      	ldr	r3, [r4, #16]
 800a5e8:	4642      	mov	r2, r8
 800a5ea:	4631      	mov	r1, r6
 800a5ec:	4628      	mov	r0, r5
 800a5ee:	47b8      	blx	r7
 800a5f0:	3001      	adds	r0, #1
 800a5f2:	d12b      	bne.n	800a64c <_printf_float+0x23c>
 800a5f4:	e767      	b.n	800a4c6 <_printf_float+0xb6>
 800a5f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a5fa:	f240 80dd 	bls.w	800a7b8 <_printf_float+0x3a8>
 800a5fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a602:	2200      	movs	r2, #0
 800a604:	2300      	movs	r3, #0
 800a606:	f7f6 fa5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a60a:	2800      	cmp	r0, #0
 800a60c:	d033      	beq.n	800a676 <_printf_float+0x266>
 800a60e:	4a37      	ldr	r2, [pc, #220]	@ (800a6ec <_printf_float+0x2dc>)
 800a610:	2301      	movs	r3, #1
 800a612:	4631      	mov	r1, r6
 800a614:	4628      	mov	r0, r5
 800a616:	47b8      	blx	r7
 800a618:	3001      	adds	r0, #1
 800a61a:	f43f af54 	beq.w	800a4c6 <_printf_float+0xb6>
 800a61e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a622:	4543      	cmp	r3, r8
 800a624:	db02      	blt.n	800a62c <_printf_float+0x21c>
 800a626:	6823      	ldr	r3, [r4, #0]
 800a628:	07d8      	lsls	r0, r3, #31
 800a62a:	d50f      	bpl.n	800a64c <_printf_float+0x23c>
 800a62c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a630:	4631      	mov	r1, r6
 800a632:	4628      	mov	r0, r5
 800a634:	47b8      	blx	r7
 800a636:	3001      	adds	r0, #1
 800a638:	f43f af45 	beq.w	800a4c6 <_printf_float+0xb6>
 800a63c:	f04f 0900 	mov.w	r9, #0
 800a640:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a644:	f104 0a1a 	add.w	sl, r4, #26
 800a648:	45c8      	cmp	r8, r9
 800a64a:	dc09      	bgt.n	800a660 <_printf_float+0x250>
 800a64c:	6823      	ldr	r3, [r4, #0]
 800a64e:	079b      	lsls	r3, r3, #30
 800a650:	f100 8103 	bmi.w	800a85a <_printf_float+0x44a>
 800a654:	68e0      	ldr	r0, [r4, #12]
 800a656:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a658:	4298      	cmp	r0, r3
 800a65a:	bfb8      	it	lt
 800a65c:	4618      	movlt	r0, r3
 800a65e:	e734      	b.n	800a4ca <_printf_float+0xba>
 800a660:	2301      	movs	r3, #1
 800a662:	4652      	mov	r2, sl
 800a664:	4631      	mov	r1, r6
 800a666:	4628      	mov	r0, r5
 800a668:	47b8      	blx	r7
 800a66a:	3001      	adds	r0, #1
 800a66c:	f43f af2b 	beq.w	800a4c6 <_printf_float+0xb6>
 800a670:	f109 0901 	add.w	r9, r9, #1
 800a674:	e7e8      	b.n	800a648 <_printf_float+0x238>
 800a676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a678:	2b00      	cmp	r3, #0
 800a67a:	dc39      	bgt.n	800a6f0 <_printf_float+0x2e0>
 800a67c:	4a1b      	ldr	r2, [pc, #108]	@ (800a6ec <_printf_float+0x2dc>)
 800a67e:	2301      	movs	r3, #1
 800a680:	4631      	mov	r1, r6
 800a682:	4628      	mov	r0, r5
 800a684:	47b8      	blx	r7
 800a686:	3001      	adds	r0, #1
 800a688:	f43f af1d 	beq.w	800a4c6 <_printf_float+0xb6>
 800a68c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a690:	ea59 0303 	orrs.w	r3, r9, r3
 800a694:	d102      	bne.n	800a69c <_printf_float+0x28c>
 800a696:	6823      	ldr	r3, [r4, #0]
 800a698:	07d9      	lsls	r1, r3, #31
 800a69a:	d5d7      	bpl.n	800a64c <_printf_float+0x23c>
 800a69c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6a0:	4631      	mov	r1, r6
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	47b8      	blx	r7
 800a6a6:	3001      	adds	r0, #1
 800a6a8:	f43f af0d 	beq.w	800a4c6 <_printf_float+0xb6>
 800a6ac:	f04f 0a00 	mov.w	sl, #0
 800a6b0:	f104 0b1a 	add.w	fp, r4, #26
 800a6b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6b6:	425b      	negs	r3, r3
 800a6b8:	4553      	cmp	r3, sl
 800a6ba:	dc01      	bgt.n	800a6c0 <_printf_float+0x2b0>
 800a6bc:	464b      	mov	r3, r9
 800a6be:	e793      	b.n	800a5e8 <_printf_float+0x1d8>
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	465a      	mov	r2, fp
 800a6c4:	4631      	mov	r1, r6
 800a6c6:	4628      	mov	r0, r5
 800a6c8:	47b8      	blx	r7
 800a6ca:	3001      	adds	r0, #1
 800a6cc:	f43f aefb 	beq.w	800a4c6 <_printf_float+0xb6>
 800a6d0:	f10a 0a01 	add.w	sl, sl, #1
 800a6d4:	e7ee      	b.n	800a6b4 <_printf_float+0x2a4>
 800a6d6:	bf00      	nop
 800a6d8:	7fefffff 	.word	0x7fefffff
 800a6dc:	0800d068 	.word	0x0800d068
 800a6e0:	0800d06c 	.word	0x0800d06c
 800a6e4:	0800d070 	.word	0x0800d070
 800a6e8:	0800d074 	.word	0x0800d074
 800a6ec:	0800d078 	.word	0x0800d078
 800a6f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a6f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a6f6:	4553      	cmp	r3, sl
 800a6f8:	bfa8      	it	ge
 800a6fa:	4653      	movge	r3, sl
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	4699      	mov	r9, r3
 800a700:	dc36      	bgt.n	800a770 <_printf_float+0x360>
 800a702:	f04f 0b00 	mov.w	fp, #0
 800a706:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a70a:	f104 021a 	add.w	r2, r4, #26
 800a70e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a710:	9306      	str	r3, [sp, #24]
 800a712:	eba3 0309 	sub.w	r3, r3, r9
 800a716:	455b      	cmp	r3, fp
 800a718:	dc31      	bgt.n	800a77e <_printf_float+0x36e>
 800a71a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a71c:	459a      	cmp	sl, r3
 800a71e:	dc3a      	bgt.n	800a796 <_printf_float+0x386>
 800a720:	6823      	ldr	r3, [r4, #0]
 800a722:	07da      	lsls	r2, r3, #31
 800a724:	d437      	bmi.n	800a796 <_printf_float+0x386>
 800a726:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a728:	ebaa 0903 	sub.w	r9, sl, r3
 800a72c:	9b06      	ldr	r3, [sp, #24]
 800a72e:	ebaa 0303 	sub.w	r3, sl, r3
 800a732:	4599      	cmp	r9, r3
 800a734:	bfa8      	it	ge
 800a736:	4699      	movge	r9, r3
 800a738:	f1b9 0f00 	cmp.w	r9, #0
 800a73c:	dc33      	bgt.n	800a7a6 <_printf_float+0x396>
 800a73e:	f04f 0800 	mov.w	r8, #0
 800a742:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a746:	f104 0b1a 	add.w	fp, r4, #26
 800a74a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a74c:	ebaa 0303 	sub.w	r3, sl, r3
 800a750:	eba3 0309 	sub.w	r3, r3, r9
 800a754:	4543      	cmp	r3, r8
 800a756:	f77f af79 	ble.w	800a64c <_printf_float+0x23c>
 800a75a:	2301      	movs	r3, #1
 800a75c:	465a      	mov	r2, fp
 800a75e:	4631      	mov	r1, r6
 800a760:	4628      	mov	r0, r5
 800a762:	47b8      	blx	r7
 800a764:	3001      	adds	r0, #1
 800a766:	f43f aeae 	beq.w	800a4c6 <_printf_float+0xb6>
 800a76a:	f108 0801 	add.w	r8, r8, #1
 800a76e:	e7ec      	b.n	800a74a <_printf_float+0x33a>
 800a770:	4642      	mov	r2, r8
 800a772:	4631      	mov	r1, r6
 800a774:	4628      	mov	r0, r5
 800a776:	47b8      	blx	r7
 800a778:	3001      	adds	r0, #1
 800a77a:	d1c2      	bne.n	800a702 <_printf_float+0x2f2>
 800a77c:	e6a3      	b.n	800a4c6 <_printf_float+0xb6>
 800a77e:	2301      	movs	r3, #1
 800a780:	4631      	mov	r1, r6
 800a782:	4628      	mov	r0, r5
 800a784:	9206      	str	r2, [sp, #24]
 800a786:	47b8      	blx	r7
 800a788:	3001      	adds	r0, #1
 800a78a:	f43f ae9c 	beq.w	800a4c6 <_printf_float+0xb6>
 800a78e:	9a06      	ldr	r2, [sp, #24]
 800a790:	f10b 0b01 	add.w	fp, fp, #1
 800a794:	e7bb      	b.n	800a70e <_printf_float+0x2fe>
 800a796:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a79a:	4631      	mov	r1, r6
 800a79c:	4628      	mov	r0, r5
 800a79e:	47b8      	blx	r7
 800a7a0:	3001      	adds	r0, #1
 800a7a2:	d1c0      	bne.n	800a726 <_printf_float+0x316>
 800a7a4:	e68f      	b.n	800a4c6 <_printf_float+0xb6>
 800a7a6:	9a06      	ldr	r2, [sp, #24]
 800a7a8:	464b      	mov	r3, r9
 800a7aa:	4442      	add	r2, r8
 800a7ac:	4631      	mov	r1, r6
 800a7ae:	4628      	mov	r0, r5
 800a7b0:	47b8      	blx	r7
 800a7b2:	3001      	adds	r0, #1
 800a7b4:	d1c3      	bne.n	800a73e <_printf_float+0x32e>
 800a7b6:	e686      	b.n	800a4c6 <_printf_float+0xb6>
 800a7b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a7bc:	f1ba 0f01 	cmp.w	sl, #1
 800a7c0:	dc01      	bgt.n	800a7c6 <_printf_float+0x3b6>
 800a7c2:	07db      	lsls	r3, r3, #31
 800a7c4:	d536      	bpl.n	800a834 <_printf_float+0x424>
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	4642      	mov	r2, r8
 800a7ca:	4631      	mov	r1, r6
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	47b8      	blx	r7
 800a7d0:	3001      	adds	r0, #1
 800a7d2:	f43f ae78 	beq.w	800a4c6 <_printf_float+0xb6>
 800a7d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a7da:	4631      	mov	r1, r6
 800a7dc:	4628      	mov	r0, r5
 800a7de:	47b8      	blx	r7
 800a7e0:	3001      	adds	r0, #1
 800a7e2:	f43f ae70 	beq.w	800a4c6 <_printf_float+0xb6>
 800a7e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a7f2:	f7f6 f969 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7f6:	b9c0      	cbnz	r0, 800a82a <_printf_float+0x41a>
 800a7f8:	4653      	mov	r3, sl
 800a7fa:	f108 0201 	add.w	r2, r8, #1
 800a7fe:	4631      	mov	r1, r6
 800a800:	4628      	mov	r0, r5
 800a802:	47b8      	blx	r7
 800a804:	3001      	adds	r0, #1
 800a806:	d10c      	bne.n	800a822 <_printf_float+0x412>
 800a808:	e65d      	b.n	800a4c6 <_printf_float+0xb6>
 800a80a:	2301      	movs	r3, #1
 800a80c:	465a      	mov	r2, fp
 800a80e:	4631      	mov	r1, r6
 800a810:	4628      	mov	r0, r5
 800a812:	47b8      	blx	r7
 800a814:	3001      	adds	r0, #1
 800a816:	f43f ae56 	beq.w	800a4c6 <_printf_float+0xb6>
 800a81a:	f108 0801 	add.w	r8, r8, #1
 800a81e:	45d0      	cmp	r8, sl
 800a820:	dbf3      	blt.n	800a80a <_printf_float+0x3fa>
 800a822:	464b      	mov	r3, r9
 800a824:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a828:	e6df      	b.n	800a5ea <_printf_float+0x1da>
 800a82a:	f04f 0800 	mov.w	r8, #0
 800a82e:	f104 0b1a 	add.w	fp, r4, #26
 800a832:	e7f4      	b.n	800a81e <_printf_float+0x40e>
 800a834:	2301      	movs	r3, #1
 800a836:	4642      	mov	r2, r8
 800a838:	e7e1      	b.n	800a7fe <_printf_float+0x3ee>
 800a83a:	2301      	movs	r3, #1
 800a83c:	464a      	mov	r2, r9
 800a83e:	4631      	mov	r1, r6
 800a840:	4628      	mov	r0, r5
 800a842:	47b8      	blx	r7
 800a844:	3001      	adds	r0, #1
 800a846:	f43f ae3e 	beq.w	800a4c6 <_printf_float+0xb6>
 800a84a:	f108 0801 	add.w	r8, r8, #1
 800a84e:	68e3      	ldr	r3, [r4, #12]
 800a850:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a852:	1a5b      	subs	r3, r3, r1
 800a854:	4543      	cmp	r3, r8
 800a856:	dcf0      	bgt.n	800a83a <_printf_float+0x42a>
 800a858:	e6fc      	b.n	800a654 <_printf_float+0x244>
 800a85a:	f04f 0800 	mov.w	r8, #0
 800a85e:	f104 0919 	add.w	r9, r4, #25
 800a862:	e7f4      	b.n	800a84e <_printf_float+0x43e>

0800a864 <_printf_common>:
 800a864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a868:	4616      	mov	r6, r2
 800a86a:	4698      	mov	r8, r3
 800a86c:	688a      	ldr	r2, [r1, #8]
 800a86e:	690b      	ldr	r3, [r1, #16]
 800a870:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a874:	4293      	cmp	r3, r2
 800a876:	bfb8      	it	lt
 800a878:	4613      	movlt	r3, r2
 800a87a:	6033      	str	r3, [r6, #0]
 800a87c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a880:	4607      	mov	r7, r0
 800a882:	460c      	mov	r4, r1
 800a884:	b10a      	cbz	r2, 800a88a <_printf_common+0x26>
 800a886:	3301      	adds	r3, #1
 800a888:	6033      	str	r3, [r6, #0]
 800a88a:	6823      	ldr	r3, [r4, #0]
 800a88c:	0699      	lsls	r1, r3, #26
 800a88e:	bf42      	ittt	mi
 800a890:	6833      	ldrmi	r3, [r6, #0]
 800a892:	3302      	addmi	r3, #2
 800a894:	6033      	strmi	r3, [r6, #0]
 800a896:	6825      	ldr	r5, [r4, #0]
 800a898:	f015 0506 	ands.w	r5, r5, #6
 800a89c:	d106      	bne.n	800a8ac <_printf_common+0x48>
 800a89e:	f104 0a19 	add.w	sl, r4, #25
 800a8a2:	68e3      	ldr	r3, [r4, #12]
 800a8a4:	6832      	ldr	r2, [r6, #0]
 800a8a6:	1a9b      	subs	r3, r3, r2
 800a8a8:	42ab      	cmp	r3, r5
 800a8aa:	dc26      	bgt.n	800a8fa <_printf_common+0x96>
 800a8ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a8b0:	6822      	ldr	r2, [r4, #0]
 800a8b2:	3b00      	subs	r3, #0
 800a8b4:	bf18      	it	ne
 800a8b6:	2301      	movne	r3, #1
 800a8b8:	0692      	lsls	r2, r2, #26
 800a8ba:	d42b      	bmi.n	800a914 <_printf_common+0xb0>
 800a8bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a8c0:	4641      	mov	r1, r8
 800a8c2:	4638      	mov	r0, r7
 800a8c4:	47c8      	blx	r9
 800a8c6:	3001      	adds	r0, #1
 800a8c8:	d01e      	beq.n	800a908 <_printf_common+0xa4>
 800a8ca:	6823      	ldr	r3, [r4, #0]
 800a8cc:	6922      	ldr	r2, [r4, #16]
 800a8ce:	f003 0306 	and.w	r3, r3, #6
 800a8d2:	2b04      	cmp	r3, #4
 800a8d4:	bf02      	ittt	eq
 800a8d6:	68e5      	ldreq	r5, [r4, #12]
 800a8d8:	6833      	ldreq	r3, [r6, #0]
 800a8da:	1aed      	subeq	r5, r5, r3
 800a8dc:	68a3      	ldr	r3, [r4, #8]
 800a8de:	bf0c      	ite	eq
 800a8e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a8e4:	2500      	movne	r5, #0
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	bfc4      	itt	gt
 800a8ea:	1a9b      	subgt	r3, r3, r2
 800a8ec:	18ed      	addgt	r5, r5, r3
 800a8ee:	2600      	movs	r6, #0
 800a8f0:	341a      	adds	r4, #26
 800a8f2:	42b5      	cmp	r5, r6
 800a8f4:	d11a      	bne.n	800a92c <_printf_common+0xc8>
 800a8f6:	2000      	movs	r0, #0
 800a8f8:	e008      	b.n	800a90c <_printf_common+0xa8>
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	4652      	mov	r2, sl
 800a8fe:	4641      	mov	r1, r8
 800a900:	4638      	mov	r0, r7
 800a902:	47c8      	blx	r9
 800a904:	3001      	adds	r0, #1
 800a906:	d103      	bne.n	800a910 <_printf_common+0xac>
 800a908:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a90c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a910:	3501      	adds	r5, #1
 800a912:	e7c6      	b.n	800a8a2 <_printf_common+0x3e>
 800a914:	18e1      	adds	r1, r4, r3
 800a916:	1c5a      	adds	r2, r3, #1
 800a918:	2030      	movs	r0, #48	@ 0x30
 800a91a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a91e:	4422      	add	r2, r4
 800a920:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a924:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a928:	3302      	adds	r3, #2
 800a92a:	e7c7      	b.n	800a8bc <_printf_common+0x58>
 800a92c:	2301      	movs	r3, #1
 800a92e:	4622      	mov	r2, r4
 800a930:	4641      	mov	r1, r8
 800a932:	4638      	mov	r0, r7
 800a934:	47c8      	blx	r9
 800a936:	3001      	adds	r0, #1
 800a938:	d0e6      	beq.n	800a908 <_printf_common+0xa4>
 800a93a:	3601      	adds	r6, #1
 800a93c:	e7d9      	b.n	800a8f2 <_printf_common+0x8e>
	...

0800a940 <_printf_i>:
 800a940:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a944:	7e0f      	ldrb	r7, [r1, #24]
 800a946:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a948:	2f78      	cmp	r7, #120	@ 0x78
 800a94a:	4691      	mov	r9, r2
 800a94c:	4680      	mov	r8, r0
 800a94e:	460c      	mov	r4, r1
 800a950:	469a      	mov	sl, r3
 800a952:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a956:	d807      	bhi.n	800a968 <_printf_i+0x28>
 800a958:	2f62      	cmp	r7, #98	@ 0x62
 800a95a:	d80a      	bhi.n	800a972 <_printf_i+0x32>
 800a95c:	2f00      	cmp	r7, #0
 800a95e:	f000 80d2 	beq.w	800ab06 <_printf_i+0x1c6>
 800a962:	2f58      	cmp	r7, #88	@ 0x58
 800a964:	f000 80b9 	beq.w	800aada <_printf_i+0x19a>
 800a968:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a96c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a970:	e03a      	b.n	800a9e8 <_printf_i+0xa8>
 800a972:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a976:	2b15      	cmp	r3, #21
 800a978:	d8f6      	bhi.n	800a968 <_printf_i+0x28>
 800a97a:	a101      	add	r1, pc, #4	@ (adr r1, 800a980 <_printf_i+0x40>)
 800a97c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a980:	0800a9d9 	.word	0x0800a9d9
 800a984:	0800a9ed 	.word	0x0800a9ed
 800a988:	0800a969 	.word	0x0800a969
 800a98c:	0800a969 	.word	0x0800a969
 800a990:	0800a969 	.word	0x0800a969
 800a994:	0800a969 	.word	0x0800a969
 800a998:	0800a9ed 	.word	0x0800a9ed
 800a99c:	0800a969 	.word	0x0800a969
 800a9a0:	0800a969 	.word	0x0800a969
 800a9a4:	0800a969 	.word	0x0800a969
 800a9a8:	0800a969 	.word	0x0800a969
 800a9ac:	0800aaed 	.word	0x0800aaed
 800a9b0:	0800aa17 	.word	0x0800aa17
 800a9b4:	0800aaa7 	.word	0x0800aaa7
 800a9b8:	0800a969 	.word	0x0800a969
 800a9bc:	0800a969 	.word	0x0800a969
 800a9c0:	0800ab0f 	.word	0x0800ab0f
 800a9c4:	0800a969 	.word	0x0800a969
 800a9c8:	0800aa17 	.word	0x0800aa17
 800a9cc:	0800a969 	.word	0x0800a969
 800a9d0:	0800a969 	.word	0x0800a969
 800a9d4:	0800aaaf 	.word	0x0800aaaf
 800a9d8:	6833      	ldr	r3, [r6, #0]
 800a9da:	1d1a      	adds	r2, r3, #4
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	6032      	str	r2, [r6, #0]
 800a9e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a9e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	e09d      	b.n	800ab28 <_printf_i+0x1e8>
 800a9ec:	6833      	ldr	r3, [r6, #0]
 800a9ee:	6820      	ldr	r0, [r4, #0]
 800a9f0:	1d19      	adds	r1, r3, #4
 800a9f2:	6031      	str	r1, [r6, #0]
 800a9f4:	0606      	lsls	r6, r0, #24
 800a9f6:	d501      	bpl.n	800a9fc <_printf_i+0xbc>
 800a9f8:	681d      	ldr	r5, [r3, #0]
 800a9fa:	e003      	b.n	800aa04 <_printf_i+0xc4>
 800a9fc:	0645      	lsls	r5, r0, #25
 800a9fe:	d5fb      	bpl.n	800a9f8 <_printf_i+0xb8>
 800aa00:	f9b3 5000 	ldrsh.w	r5, [r3]
 800aa04:	2d00      	cmp	r5, #0
 800aa06:	da03      	bge.n	800aa10 <_printf_i+0xd0>
 800aa08:	232d      	movs	r3, #45	@ 0x2d
 800aa0a:	426d      	negs	r5, r5
 800aa0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aa10:	4859      	ldr	r0, [pc, #356]	@ (800ab78 <_printf_i+0x238>)
 800aa12:	230a      	movs	r3, #10
 800aa14:	e011      	b.n	800aa3a <_printf_i+0xfa>
 800aa16:	6821      	ldr	r1, [r4, #0]
 800aa18:	6833      	ldr	r3, [r6, #0]
 800aa1a:	0608      	lsls	r0, r1, #24
 800aa1c:	f853 5b04 	ldr.w	r5, [r3], #4
 800aa20:	d402      	bmi.n	800aa28 <_printf_i+0xe8>
 800aa22:	0649      	lsls	r1, r1, #25
 800aa24:	bf48      	it	mi
 800aa26:	b2ad      	uxthmi	r5, r5
 800aa28:	2f6f      	cmp	r7, #111	@ 0x6f
 800aa2a:	4853      	ldr	r0, [pc, #332]	@ (800ab78 <_printf_i+0x238>)
 800aa2c:	6033      	str	r3, [r6, #0]
 800aa2e:	bf14      	ite	ne
 800aa30:	230a      	movne	r3, #10
 800aa32:	2308      	moveq	r3, #8
 800aa34:	2100      	movs	r1, #0
 800aa36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800aa3a:	6866      	ldr	r6, [r4, #4]
 800aa3c:	60a6      	str	r6, [r4, #8]
 800aa3e:	2e00      	cmp	r6, #0
 800aa40:	bfa2      	ittt	ge
 800aa42:	6821      	ldrge	r1, [r4, #0]
 800aa44:	f021 0104 	bicge.w	r1, r1, #4
 800aa48:	6021      	strge	r1, [r4, #0]
 800aa4a:	b90d      	cbnz	r5, 800aa50 <_printf_i+0x110>
 800aa4c:	2e00      	cmp	r6, #0
 800aa4e:	d04b      	beq.n	800aae8 <_printf_i+0x1a8>
 800aa50:	4616      	mov	r6, r2
 800aa52:	fbb5 f1f3 	udiv	r1, r5, r3
 800aa56:	fb03 5711 	mls	r7, r3, r1, r5
 800aa5a:	5dc7      	ldrb	r7, [r0, r7]
 800aa5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aa60:	462f      	mov	r7, r5
 800aa62:	42bb      	cmp	r3, r7
 800aa64:	460d      	mov	r5, r1
 800aa66:	d9f4      	bls.n	800aa52 <_printf_i+0x112>
 800aa68:	2b08      	cmp	r3, #8
 800aa6a:	d10b      	bne.n	800aa84 <_printf_i+0x144>
 800aa6c:	6823      	ldr	r3, [r4, #0]
 800aa6e:	07df      	lsls	r7, r3, #31
 800aa70:	d508      	bpl.n	800aa84 <_printf_i+0x144>
 800aa72:	6923      	ldr	r3, [r4, #16]
 800aa74:	6861      	ldr	r1, [r4, #4]
 800aa76:	4299      	cmp	r1, r3
 800aa78:	bfde      	ittt	le
 800aa7a:	2330      	movle	r3, #48	@ 0x30
 800aa7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aa80:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800aa84:	1b92      	subs	r2, r2, r6
 800aa86:	6122      	str	r2, [r4, #16]
 800aa88:	f8cd a000 	str.w	sl, [sp]
 800aa8c:	464b      	mov	r3, r9
 800aa8e:	aa03      	add	r2, sp, #12
 800aa90:	4621      	mov	r1, r4
 800aa92:	4640      	mov	r0, r8
 800aa94:	f7ff fee6 	bl	800a864 <_printf_common>
 800aa98:	3001      	adds	r0, #1
 800aa9a:	d14a      	bne.n	800ab32 <_printf_i+0x1f2>
 800aa9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aaa0:	b004      	add	sp, #16
 800aaa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aaa6:	6823      	ldr	r3, [r4, #0]
 800aaa8:	f043 0320 	orr.w	r3, r3, #32
 800aaac:	6023      	str	r3, [r4, #0]
 800aaae:	4833      	ldr	r0, [pc, #204]	@ (800ab7c <_printf_i+0x23c>)
 800aab0:	2778      	movs	r7, #120	@ 0x78
 800aab2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aab6:	6823      	ldr	r3, [r4, #0]
 800aab8:	6831      	ldr	r1, [r6, #0]
 800aaba:	061f      	lsls	r7, r3, #24
 800aabc:	f851 5b04 	ldr.w	r5, [r1], #4
 800aac0:	d402      	bmi.n	800aac8 <_printf_i+0x188>
 800aac2:	065f      	lsls	r7, r3, #25
 800aac4:	bf48      	it	mi
 800aac6:	b2ad      	uxthmi	r5, r5
 800aac8:	6031      	str	r1, [r6, #0]
 800aaca:	07d9      	lsls	r1, r3, #31
 800aacc:	bf44      	itt	mi
 800aace:	f043 0320 	orrmi.w	r3, r3, #32
 800aad2:	6023      	strmi	r3, [r4, #0]
 800aad4:	b11d      	cbz	r5, 800aade <_printf_i+0x19e>
 800aad6:	2310      	movs	r3, #16
 800aad8:	e7ac      	b.n	800aa34 <_printf_i+0xf4>
 800aada:	4827      	ldr	r0, [pc, #156]	@ (800ab78 <_printf_i+0x238>)
 800aadc:	e7e9      	b.n	800aab2 <_printf_i+0x172>
 800aade:	6823      	ldr	r3, [r4, #0]
 800aae0:	f023 0320 	bic.w	r3, r3, #32
 800aae4:	6023      	str	r3, [r4, #0]
 800aae6:	e7f6      	b.n	800aad6 <_printf_i+0x196>
 800aae8:	4616      	mov	r6, r2
 800aaea:	e7bd      	b.n	800aa68 <_printf_i+0x128>
 800aaec:	6833      	ldr	r3, [r6, #0]
 800aaee:	6825      	ldr	r5, [r4, #0]
 800aaf0:	6961      	ldr	r1, [r4, #20]
 800aaf2:	1d18      	adds	r0, r3, #4
 800aaf4:	6030      	str	r0, [r6, #0]
 800aaf6:	062e      	lsls	r6, r5, #24
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	d501      	bpl.n	800ab00 <_printf_i+0x1c0>
 800aafc:	6019      	str	r1, [r3, #0]
 800aafe:	e002      	b.n	800ab06 <_printf_i+0x1c6>
 800ab00:	0668      	lsls	r0, r5, #25
 800ab02:	d5fb      	bpl.n	800aafc <_printf_i+0x1bc>
 800ab04:	8019      	strh	r1, [r3, #0]
 800ab06:	2300      	movs	r3, #0
 800ab08:	6123      	str	r3, [r4, #16]
 800ab0a:	4616      	mov	r6, r2
 800ab0c:	e7bc      	b.n	800aa88 <_printf_i+0x148>
 800ab0e:	6833      	ldr	r3, [r6, #0]
 800ab10:	1d1a      	adds	r2, r3, #4
 800ab12:	6032      	str	r2, [r6, #0]
 800ab14:	681e      	ldr	r6, [r3, #0]
 800ab16:	6862      	ldr	r2, [r4, #4]
 800ab18:	2100      	movs	r1, #0
 800ab1a:	4630      	mov	r0, r6
 800ab1c:	f7f5 fb58 	bl	80001d0 <memchr>
 800ab20:	b108      	cbz	r0, 800ab26 <_printf_i+0x1e6>
 800ab22:	1b80      	subs	r0, r0, r6
 800ab24:	6060      	str	r0, [r4, #4]
 800ab26:	6863      	ldr	r3, [r4, #4]
 800ab28:	6123      	str	r3, [r4, #16]
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab30:	e7aa      	b.n	800aa88 <_printf_i+0x148>
 800ab32:	6923      	ldr	r3, [r4, #16]
 800ab34:	4632      	mov	r2, r6
 800ab36:	4649      	mov	r1, r9
 800ab38:	4640      	mov	r0, r8
 800ab3a:	47d0      	blx	sl
 800ab3c:	3001      	adds	r0, #1
 800ab3e:	d0ad      	beq.n	800aa9c <_printf_i+0x15c>
 800ab40:	6823      	ldr	r3, [r4, #0]
 800ab42:	079b      	lsls	r3, r3, #30
 800ab44:	d413      	bmi.n	800ab6e <_printf_i+0x22e>
 800ab46:	68e0      	ldr	r0, [r4, #12]
 800ab48:	9b03      	ldr	r3, [sp, #12]
 800ab4a:	4298      	cmp	r0, r3
 800ab4c:	bfb8      	it	lt
 800ab4e:	4618      	movlt	r0, r3
 800ab50:	e7a6      	b.n	800aaa0 <_printf_i+0x160>
 800ab52:	2301      	movs	r3, #1
 800ab54:	4632      	mov	r2, r6
 800ab56:	4649      	mov	r1, r9
 800ab58:	4640      	mov	r0, r8
 800ab5a:	47d0      	blx	sl
 800ab5c:	3001      	adds	r0, #1
 800ab5e:	d09d      	beq.n	800aa9c <_printf_i+0x15c>
 800ab60:	3501      	adds	r5, #1
 800ab62:	68e3      	ldr	r3, [r4, #12]
 800ab64:	9903      	ldr	r1, [sp, #12]
 800ab66:	1a5b      	subs	r3, r3, r1
 800ab68:	42ab      	cmp	r3, r5
 800ab6a:	dcf2      	bgt.n	800ab52 <_printf_i+0x212>
 800ab6c:	e7eb      	b.n	800ab46 <_printf_i+0x206>
 800ab6e:	2500      	movs	r5, #0
 800ab70:	f104 0619 	add.w	r6, r4, #25
 800ab74:	e7f5      	b.n	800ab62 <_printf_i+0x222>
 800ab76:	bf00      	nop
 800ab78:	0800d07a 	.word	0x0800d07a
 800ab7c:	0800d08b 	.word	0x0800d08b

0800ab80 <siprintf>:
 800ab80:	b40e      	push	{r1, r2, r3}
 800ab82:	b500      	push	{lr}
 800ab84:	b09c      	sub	sp, #112	@ 0x70
 800ab86:	ab1d      	add	r3, sp, #116	@ 0x74
 800ab88:	9002      	str	r0, [sp, #8]
 800ab8a:	9006      	str	r0, [sp, #24]
 800ab8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ab90:	4809      	ldr	r0, [pc, #36]	@ (800abb8 <siprintf+0x38>)
 800ab92:	9107      	str	r1, [sp, #28]
 800ab94:	9104      	str	r1, [sp, #16]
 800ab96:	4909      	ldr	r1, [pc, #36]	@ (800abbc <siprintf+0x3c>)
 800ab98:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab9c:	9105      	str	r1, [sp, #20]
 800ab9e:	6800      	ldr	r0, [r0, #0]
 800aba0:	9301      	str	r3, [sp, #4]
 800aba2:	a902      	add	r1, sp, #8
 800aba4:	f000 ffb0 	bl	800bb08 <_svfiprintf_r>
 800aba8:	9b02      	ldr	r3, [sp, #8]
 800abaa:	2200      	movs	r2, #0
 800abac:	701a      	strb	r2, [r3, #0]
 800abae:	b01c      	add	sp, #112	@ 0x70
 800abb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800abb4:	b003      	add	sp, #12
 800abb6:	4770      	bx	lr
 800abb8:	20000114 	.word	0x20000114
 800abbc:	ffff0208 	.word	0xffff0208

0800abc0 <std>:
 800abc0:	2300      	movs	r3, #0
 800abc2:	b510      	push	{r4, lr}
 800abc4:	4604      	mov	r4, r0
 800abc6:	e9c0 3300 	strd	r3, r3, [r0]
 800abca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800abce:	6083      	str	r3, [r0, #8]
 800abd0:	8181      	strh	r1, [r0, #12]
 800abd2:	6643      	str	r3, [r0, #100]	@ 0x64
 800abd4:	81c2      	strh	r2, [r0, #14]
 800abd6:	6183      	str	r3, [r0, #24]
 800abd8:	4619      	mov	r1, r3
 800abda:	2208      	movs	r2, #8
 800abdc:	305c      	adds	r0, #92	@ 0x5c
 800abde:	f000 f8b1 	bl	800ad44 <memset>
 800abe2:	4b0d      	ldr	r3, [pc, #52]	@ (800ac18 <std+0x58>)
 800abe4:	6263      	str	r3, [r4, #36]	@ 0x24
 800abe6:	4b0d      	ldr	r3, [pc, #52]	@ (800ac1c <std+0x5c>)
 800abe8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800abea:	4b0d      	ldr	r3, [pc, #52]	@ (800ac20 <std+0x60>)
 800abec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800abee:	4b0d      	ldr	r3, [pc, #52]	@ (800ac24 <std+0x64>)
 800abf0:	6323      	str	r3, [r4, #48]	@ 0x30
 800abf2:	4b0d      	ldr	r3, [pc, #52]	@ (800ac28 <std+0x68>)
 800abf4:	6224      	str	r4, [r4, #32]
 800abf6:	429c      	cmp	r4, r3
 800abf8:	d006      	beq.n	800ac08 <std+0x48>
 800abfa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800abfe:	4294      	cmp	r4, r2
 800ac00:	d002      	beq.n	800ac08 <std+0x48>
 800ac02:	33d0      	adds	r3, #208	@ 0xd0
 800ac04:	429c      	cmp	r4, r3
 800ac06:	d105      	bne.n	800ac14 <std+0x54>
 800ac08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ac0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac10:	f000 b8ce 	b.w	800adb0 <__retarget_lock_init_recursive>
 800ac14:	bd10      	pop	{r4, pc}
 800ac16:	bf00      	nop
 800ac18:	0800c6c9 	.word	0x0800c6c9
 800ac1c:	0800c6eb 	.word	0x0800c6eb
 800ac20:	0800c723 	.word	0x0800c723
 800ac24:	0800c747 	.word	0x0800c747
 800ac28:	200021c8 	.word	0x200021c8

0800ac2c <stdio_exit_handler>:
 800ac2c:	4a02      	ldr	r2, [pc, #8]	@ (800ac38 <stdio_exit_handler+0xc>)
 800ac2e:	4903      	ldr	r1, [pc, #12]	@ (800ac3c <stdio_exit_handler+0x10>)
 800ac30:	4803      	ldr	r0, [pc, #12]	@ (800ac40 <stdio_exit_handler+0x14>)
 800ac32:	f000 b869 	b.w	800ad08 <_fwalk_sglue>
 800ac36:	bf00      	nop
 800ac38:	20000108 	.word	0x20000108
 800ac3c:	0800bf5d 	.word	0x0800bf5d
 800ac40:	20000118 	.word	0x20000118

0800ac44 <cleanup_stdio>:
 800ac44:	6841      	ldr	r1, [r0, #4]
 800ac46:	4b0c      	ldr	r3, [pc, #48]	@ (800ac78 <cleanup_stdio+0x34>)
 800ac48:	4299      	cmp	r1, r3
 800ac4a:	b510      	push	{r4, lr}
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	d001      	beq.n	800ac54 <cleanup_stdio+0x10>
 800ac50:	f001 f984 	bl	800bf5c <_fflush_r>
 800ac54:	68a1      	ldr	r1, [r4, #8]
 800ac56:	4b09      	ldr	r3, [pc, #36]	@ (800ac7c <cleanup_stdio+0x38>)
 800ac58:	4299      	cmp	r1, r3
 800ac5a:	d002      	beq.n	800ac62 <cleanup_stdio+0x1e>
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	f001 f97d 	bl	800bf5c <_fflush_r>
 800ac62:	68e1      	ldr	r1, [r4, #12]
 800ac64:	4b06      	ldr	r3, [pc, #24]	@ (800ac80 <cleanup_stdio+0x3c>)
 800ac66:	4299      	cmp	r1, r3
 800ac68:	d004      	beq.n	800ac74 <cleanup_stdio+0x30>
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac70:	f001 b974 	b.w	800bf5c <_fflush_r>
 800ac74:	bd10      	pop	{r4, pc}
 800ac76:	bf00      	nop
 800ac78:	200021c8 	.word	0x200021c8
 800ac7c:	20002230 	.word	0x20002230
 800ac80:	20002298 	.word	0x20002298

0800ac84 <global_stdio_init.part.0>:
 800ac84:	b510      	push	{r4, lr}
 800ac86:	4b0b      	ldr	r3, [pc, #44]	@ (800acb4 <global_stdio_init.part.0+0x30>)
 800ac88:	4c0b      	ldr	r4, [pc, #44]	@ (800acb8 <global_stdio_init.part.0+0x34>)
 800ac8a:	4a0c      	ldr	r2, [pc, #48]	@ (800acbc <global_stdio_init.part.0+0x38>)
 800ac8c:	601a      	str	r2, [r3, #0]
 800ac8e:	4620      	mov	r0, r4
 800ac90:	2200      	movs	r2, #0
 800ac92:	2104      	movs	r1, #4
 800ac94:	f7ff ff94 	bl	800abc0 <std>
 800ac98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	2109      	movs	r1, #9
 800aca0:	f7ff ff8e 	bl	800abc0 <std>
 800aca4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aca8:	2202      	movs	r2, #2
 800acaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acae:	2112      	movs	r1, #18
 800acb0:	f7ff bf86 	b.w	800abc0 <std>
 800acb4:	20002300 	.word	0x20002300
 800acb8:	200021c8 	.word	0x200021c8
 800acbc:	0800ac2d 	.word	0x0800ac2d

0800acc0 <__sfp_lock_acquire>:
 800acc0:	4801      	ldr	r0, [pc, #4]	@ (800acc8 <__sfp_lock_acquire+0x8>)
 800acc2:	f000 b876 	b.w	800adb2 <__retarget_lock_acquire_recursive>
 800acc6:	bf00      	nop
 800acc8:	20002305 	.word	0x20002305

0800accc <__sfp_lock_release>:
 800accc:	4801      	ldr	r0, [pc, #4]	@ (800acd4 <__sfp_lock_release+0x8>)
 800acce:	f000 b871 	b.w	800adb4 <__retarget_lock_release_recursive>
 800acd2:	bf00      	nop
 800acd4:	20002305 	.word	0x20002305

0800acd8 <__sinit>:
 800acd8:	b510      	push	{r4, lr}
 800acda:	4604      	mov	r4, r0
 800acdc:	f7ff fff0 	bl	800acc0 <__sfp_lock_acquire>
 800ace0:	6a23      	ldr	r3, [r4, #32]
 800ace2:	b11b      	cbz	r3, 800acec <__sinit+0x14>
 800ace4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ace8:	f7ff bff0 	b.w	800accc <__sfp_lock_release>
 800acec:	4b04      	ldr	r3, [pc, #16]	@ (800ad00 <__sinit+0x28>)
 800acee:	6223      	str	r3, [r4, #32]
 800acf0:	4b04      	ldr	r3, [pc, #16]	@ (800ad04 <__sinit+0x2c>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1f5      	bne.n	800ace4 <__sinit+0xc>
 800acf8:	f7ff ffc4 	bl	800ac84 <global_stdio_init.part.0>
 800acfc:	e7f2      	b.n	800ace4 <__sinit+0xc>
 800acfe:	bf00      	nop
 800ad00:	0800ac45 	.word	0x0800ac45
 800ad04:	20002300 	.word	0x20002300

0800ad08 <_fwalk_sglue>:
 800ad08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad0c:	4607      	mov	r7, r0
 800ad0e:	4688      	mov	r8, r1
 800ad10:	4614      	mov	r4, r2
 800ad12:	2600      	movs	r6, #0
 800ad14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad18:	f1b9 0901 	subs.w	r9, r9, #1
 800ad1c:	d505      	bpl.n	800ad2a <_fwalk_sglue+0x22>
 800ad1e:	6824      	ldr	r4, [r4, #0]
 800ad20:	2c00      	cmp	r4, #0
 800ad22:	d1f7      	bne.n	800ad14 <_fwalk_sglue+0xc>
 800ad24:	4630      	mov	r0, r6
 800ad26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad2a:	89ab      	ldrh	r3, [r5, #12]
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d907      	bls.n	800ad40 <_fwalk_sglue+0x38>
 800ad30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad34:	3301      	adds	r3, #1
 800ad36:	d003      	beq.n	800ad40 <_fwalk_sglue+0x38>
 800ad38:	4629      	mov	r1, r5
 800ad3a:	4638      	mov	r0, r7
 800ad3c:	47c0      	blx	r8
 800ad3e:	4306      	orrs	r6, r0
 800ad40:	3568      	adds	r5, #104	@ 0x68
 800ad42:	e7e9      	b.n	800ad18 <_fwalk_sglue+0x10>

0800ad44 <memset>:
 800ad44:	4402      	add	r2, r0
 800ad46:	4603      	mov	r3, r0
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d100      	bne.n	800ad4e <memset+0xa>
 800ad4c:	4770      	bx	lr
 800ad4e:	f803 1b01 	strb.w	r1, [r3], #1
 800ad52:	e7f9      	b.n	800ad48 <memset+0x4>

0800ad54 <_localeconv_r>:
 800ad54:	4800      	ldr	r0, [pc, #0]	@ (800ad58 <_localeconv_r+0x4>)
 800ad56:	4770      	bx	lr
 800ad58:	20000254 	.word	0x20000254

0800ad5c <__errno>:
 800ad5c:	4b01      	ldr	r3, [pc, #4]	@ (800ad64 <__errno+0x8>)
 800ad5e:	6818      	ldr	r0, [r3, #0]
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
 800ad64:	20000114 	.word	0x20000114

0800ad68 <__libc_init_array>:
 800ad68:	b570      	push	{r4, r5, r6, lr}
 800ad6a:	4d0d      	ldr	r5, [pc, #52]	@ (800ada0 <__libc_init_array+0x38>)
 800ad6c:	4c0d      	ldr	r4, [pc, #52]	@ (800ada4 <__libc_init_array+0x3c>)
 800ad6e:	1b64      	subs	r4, r4, r5
 800ad70:	10a4      	asrs	r4, r4, #2
 800ad72:	2600      	movs	r6, #0
 800ad74:	42a6      	cmp	r6, r4
 800ad76:	d109      	bne.n	800ad8c <__libc_init_array+0x24>
 800ad78:	4d0b      	ldr	r5, [pc, #44]	@ (800ada8 <__libc_init_array+0x40>)
 800ad7a:	4c0c      	ldr	r4, [pc, #48]	@ (800adac <__libc_init_array+0x44>)
 800ad7c:	f002 f8ee 	bl	800cf5c <_init>
 800ad80:	1b64      	subs	r4, r4, r5
 800ad82:	10a4      	asrs	r4, r4, #2
 800ad84:	2600      	movs	r6, #0
 800ad86:	42a6      	cmp	r6, r4
 800ad88:	d105      	bne.n	800ad96 <__libc_init_array+0x2e>
 800ad8a:	bd70      	pop	{r4, r5, r6, pc}
 800ad8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad90:	4798      	blx	r3
 800ad92:	3601      	adds	r6, #1
 800ad94:	e7ee      	b.n	800ad74 <__libc_init_array+0xc>
 800ad96:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad9a:	4798      	blx	r3
 800ad9c:	3601      	adds	r6, #1
 800ad9e:	e7f2      	b.n	800ad86 <__libc_init_array+0x1e>
 800ada0:	0800d3e0 	.word	0x0800d3e0
 800ada4:	0800d3e0 	.word	0x0800d3e0
 800ada8:	0800d3e0 	.word	0x0800d3e0
 800adac:	0800d3e4 	.word	0x0800d3e4

0800adb0 <__retarget_lock_init_recursive>:
 800adb0:	4770      	bx	lr

0800adb2 <__retarget_lock_acquire_recursive>:
 800adb2:	4770      	bx	lr

0800adb4 <__retarget_lock_release_recursive>:
 800adb4:	4770      	bx	lr

0800adb6 <quorem>:
 800adb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adba:	6903      	ldr	r3, [r0, #16]
 800adbc:	690c      	ldr	r4, [r1, #16]
 800adbe:	42a3      	cmp	r3, r4
 800adc0:	4607      	mov	r7, r0
 800adc2:	db7e      	blt.n	800aec2 <quorem+0x10c>
 800adc4:	3c01      	subs	r4, #1
 800adc6:	f101 0814 	add.w	r8, r1, #20
 800adca:	00a3      	lsls	r3, r4, #2
 800adcc:	f100 0514 	add.w	r5, r0, #20
 800add0:	9300      	str	r3, [sp, #0]
 800add2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800add6:	9301      	str	r3, [sp, #4]
 800add8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800addc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ade0:	3301      	adds	r3, #1
 800ade2:	429a      	cmp	r2, r3
 800ade4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ade8:	fbb2 f6f3 	udiv	r6, r2, r3
 800adec:	d32e      	bcc.n	800ae4c <quorem+0x96>
 800adee:	f04f 0a00 	mov.w	sl, #0
 800adf2:	46c4      	mov	ip, r8
 800adf4:	46ae      	mov	lr, r5
 800adf6:	46d3      	mov	fp, sl
 800adf8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800adfc:	b298      	uxth	r0, r3
 800adfe:	fb06 a000 	mla	r0, r6, r0, sl
 800ae02:	0c02      	lsrs	r2, r0, #16
 800ae04:	0c1b      	lsrs	r3, r3, #16
 800ae06:	fb06 2303 	mla	r3, r6, r3, r2
 800ae0a:	f8de 2000 	ldr.w	r2, [lr]
 800ae0e:	b280      	uxth	r0, r0
 800ae10:	b292      	uxth	r2, r2
 800ae12:	1a12      	subs	r2, r2, r0
 800ae14:	445a      	add	r2, fp
 800ae16:	f8de 0000 	ldr.w	r0, [lr]
 800ae1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ae1e:	b29b      	uxth	r3, r3
 800ae20:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ae24:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ae28:	b292      	uxth	r2, r2
 800ae2a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ae2e:	45e1      	cmp	r9, ip
 800ae30:	f84e 2b04 	str.w	r2, [lr], #4
 800ae34:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ae38:	d2de      	bcs.n	800adf8 <quorem+0x42>
 800ae3a:	9b00      	ldr	r3, [sp, #0]
 800ae3c:	58eb      	ldr	r3, [r5, r3]
 800ae3e:	b92b      	cbnz	r3, 800ae4c <quorem+0x96>
 800ae40:	9b01      	ldr	r3, [sp, #4]
 800ae42:	3b04      	subs	r3, #4
 800ae44:	429d      	cmp	r5, r3
 800ae46:	461a      	mov	r2, r3
 800ae48:	d32f      	bcc.n	800aeaa <quorem+0xf4>
 800ae4a:	613c      	str	r4, [r7, #16]
 800ae4c:	4638      	mov	r0, r7
 800ae4e:	f001 fb33 	bl	800c4b8 <__mcmp>
 800ae52:	2800      	cmp	r0, #0
 800ae54:	db25      	blt.n	800aea2 <quorem+0xec>
 800ae56:	4629      	mov	r1, r5
 800ae58:	2000      	movs	r0, #0
 800ae5a:	f858 2b04 	ldr.w	r2, [r8], #4
 800ae5e:	f8d1 c000 	ldr.w	ip, [r1]
 800ae62:	fa1f fe82 	uxth.w	lr, r2
 800ae66:	fa1f f38c 	uxth.w	r3, ip
 800ae6a:	eba3 030e 	sub.w	r3, r3, lr
 800ae6e:	4403      	add	r3, r0
 800ae70:	0c12      	lsrs	r2, r2, #16
 800ae72:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ae76:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae80:	45c1      	cmp	r9, r8
 800ae82:	f841 3b04 	str.w	r3, [r1], #4
 800ae86:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ae8a:	d2e6      	bcs.n	800ae5a <quorem+0xa4>
 800ae8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae94:	b922      	cbnz	r2, 800aea0 <quorem+0xea>
 800ae96:	3b04      	subs	r3, #4
 800ae98:	429d      	cmp	r5, r3
 800ae9a:	461a      	mov	r2, r3
 800ae9c:	d30b      	bcc.n	800aeb6 <quorem+0x100>
 800ae9e:	613c      	str	r4, [r7, #16]
 800aea0:	3601      	adds	r6, #1
 800aea2:	4630      	mov	r0, r6
 800aea4:	b003      	add	sp, #12
 800aea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeaa:	6812      	ldr	r2, [r2, #0]
 800aeac:	3b04      	subs	r3, #4
 800aeae:	2a00      	cmp	r2, #0
 800aeb0:	d1cb      	bne.n	800ae4a <quorem+0x94>
 800aeb2:	3c01      	subs	r4, #1
 800aeb4:	e7c6      	b.n	800ae44 <quorem+0x8e>
 800aeb6:	6812      	ldr	r2, [r2, #0]
 800aeb8:	3b04      	subs	r3, #4
 800aeba:	2a00      	cmp	r2, #0
 800aebc:	d1ef      	bne.n	800ae9e <quorem+0xe8>
 800aebe:	3c01      	subs	r4, #1
 800aec0:	e7ea      	b.n	800ae98 <quorem+0xe2>
 800aec2:	2000      	movs	r0, #0
 800aec4:	e7ee      	b.n	800aea4 <quorem+0xee>
	...

0800aec8 <_dtoa_r>:
 800aec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aecc:	69c7      	ldr	r7, [r0, #28]
 800aece:	b099      	sub	sp, #100	@ 0x64
 800aed0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800aed4:	ec55 4b10 	vmov	r4, r5, d0
 800aed8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800aeda:	9109      	str	r1, [sp, #36]	@ 0x24
 800aedc:	4683      	mov	fp, r0
 800aede:	920e      	str	r2, [sp, #56]	@ 0x38
 800aee0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800aee2:	b97f      	cbnz	r7, 800af04 <_dtoa_r+0x3c>
 800aee4:	2010      	movs	r0, #16
 800aee6:	f000 ff0b 	bl	800bd00 <malloc>
 800aeea:	4602      	mov	r2, r0
 800aeec:	f8cb 001c 	str.w	r0, [fp, #28]
 800aef0:	b920      	cbnz	r0, 800aefc <_dtoa_r+0x34>
 800aef2:	4ba7      	ldr	r3, [pc, #668]	@ (800b190 <_dtoa_r+0x2c8>)
 800aef4:	21ef      	movs	r1, #239	@ 0xef
 800aef6:	48a7      	ldr	r0, [pc, #668]	@ (800b194 <_dtoa_r+0x2cc>)
 800aef8:	f001 fcd6 	bl	800c8a8 <__assert_func>
 800aefc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800af00:	6007      	str	r7, [r0, #0]
 800af02:	60c7      	str	r7, [r0, #12]
 800af04:	f8db 301c 	ldr.w	r3, [fp, #28]
 800af08:	6819      	ldr	r1, [r3, #0]
 800af0a:	b159      	cbz	r1, 800af24 <_dtoa_r+0x5c>
 800af0c:	685a      	ldr	r2, [r3, #4]
 800af0e:	604a      	str	r2, [r1, #4]
 800af10:	2301      	movs	r3, #1
 800af12:	4093      	lsls	r3, r2
 800af14:	608b      	str	r3, [r1, #8]
 800af16:	4658      	mov	r0, fp
 800af18:	f001 f894 	bl	800c044 <_Bfree>
 800af1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800af20:	2200      	movs	r2, #0
 800af22:	601a      	str	r2, [r3, #0]
 800af24:	1e2b      	subs	r3, r5, #0
 800af26:	bfb9      	ittee	lt
 800af28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800af2c:	9303      	strlt	r3, [sp, #12]
 800af2e:	2300      	movge	r3, #0
 800af30:	6033      	strge	r3, [r6, #0]
 800af32:	9f03      	ldr	r7, [sp, #12]
 800af34:	4b98      	ldr	r3, [pc, #608]	@ (800b198 <_dtoa_r+0x2d0>)
 800af36:	bfbc      	itt	lt
 800af38:	2201      	movlt	r2, #1
 800af3a:	6032      	strlt	r2, [r6, #0]
 800af3c:	43bb      	bics	r3, r7
 800af3e:	d112      	bne.n	800af66 <_dtoa_r+0x9e>
 800af40:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800af42:	f242 730f 	movw	r3, #9999	@ 0x270f
 800af46:	6013      	str	r3, [r2, #0]
 800af48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800af4c:	4323      	orrs	r3, r4
 800af4e:	f000 854d 	beq.w	800b9ec <_dtoa_r+0xb24>
 800af52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800af54:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b1ac <_dtoa_r+0x2e4>
 800af58:	2b00      	cmp	r3, #0
 800af5a:	f000 854f 	beq.w	800b9fc <_dtoa_r+0xb34>
 800af5e:	f10a 0303 	add.w	r3, sl, #3
 800af62:	f000 bd49 	b.w	800b9f8 <_dtoa_r+0xb30>
 800af66:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af6a:	2200      	movs	r2, #0
 800af6c:	ec51 0b17 	vmov	r0, r1, d7
 800af70:	2300      	movs	r3, #0
 800af72:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800af76:	f7f5 fda7 	bl	8000ac8 <__aeabi_dcmpeq>
 800af7a:	4680      	mov	r8, r0
 800af7c:	b158      	cbz	r0, 800af96 <_dtoa_r+0xce>
 800af7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800af80:	2301      	movs	r3, #1
 800af82:	6013      	str	r3, [r2, #0]
 800af84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800af86:	b113      	cbz	r3, 800af8e <_dtoa_r+0xc6>
 800af88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800af8a:	4b84      	ldr	r3, [pc, #528]	@ (800b19c <_dtoa_r+0x2d4>)
 800af8c:	6013      	str	r3, [r2, #0]
 800af8e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b1b0 <_dtoa_r+0x2e8>
 800af92:	f000 bd33 	b.w	800b9fc <_dtoa_r+0xb34>
 800af96:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800af9a:	aa16      	add	r2, sp, #88	@ 0x58
 800af9c:	a917      	add	r1, sp, #92	@ 0x5c
 800af9e:	4658      	mov	r0, fp
 800afa0:	f001 fb3a 	bl	800c618 <__d2b>
 800afa4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800afa8:	4681      	mov	r9, r0
 800afaa:	2e00      	cmp	r6, #0
 800afac:	d077      	beq.n	800b09e <_dtoa_r+0x1d6>
 800afae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800afb0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800afb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800afb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800afbc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800afc0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800afc4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800afc8:	4619      	mov	r1, r3
 800afca:	2200      	movs	r2, #0
 800afcc:	4b74      	ldr	r3, [pc, #464]	@ (800b1a0 <_dtoa_r+0x2d8>)
 800afce:	f7f5 f95b 	bl	8000288 <__aeabi_dsub>
 800afd2:	a369      	add	r3, pc, #420	@ (adr r3, 800b178 <_dtoa_r+0x2b0>)
 800afd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd8:	f7f5 fb0e 	bl	80005f8 <__aeabi_dmul>
 800afdc:	a368      	add	r3, pc, #416	@ (adr r3, 800b180 <_dtoa_r+0x2b8>)
 800afde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe2:	f7f5 f953 	bl	800028c <__adddf3>
 800afe6:	4604      	mov	r4, r0
 800afe8:	4630      	mov	r0, r6
 800afea:	460d      	mov	r5, r1
 800afec:	f7f5 fa9a 	bl	8000524 <__aeabi_i2d>
 800aff0:	a365      	add	r3, pc, #404	@ (adr r3, 800b188 <_dtoa_r+0x2c0>)
 800aff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff6:	f7f5 faff 	bl	80005f8 <__aeabi_dmul>
 800affa:	4602      	mov	r2, r0
 800affc:	460b      	mov	r3, r1
 800affe:	4620      	mov	r0, r4
 800b000:	4629      	mov	r1, r5
 800b002:	f7f5 f943 	bl	800028c <__adddf3>
 800b006:	4604      	mov	r4, r0
 800b008:	460d      	mov	r5, r1
 800b00a:	f7f5 fda5 	bl	8000b58 <__aeabi_d2iz>
 800b00e:	2200      	movs	r2, #0
 800b010:	4607      	mov	r7, r0
 800b012:	2300      	movs	r3, #0
 800b014:	4620      	mov	r0, r4
 800b016:	4629      	mov	r1, r5
 800b018:	f7f5 fd60 	bl	8000adc <__aeabi_dcmplt>
 800b01c:	b140      	cbz	r0, 800b030 <_dtoa_r+0x168>
 800b01e:	4638      	mov	r0, r7
 800b020:	f7f5 fa80 	bl	8000524 <__aeabi_i2d>
 800b024:	4622      	mov	r2, r4
 800b026:	462b      	mov	r3, r5
 800b028:	f7f5 fd4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b02c:	b900      	cbnz	r0, 800b030 <_dtoa_r+0x168>
 800b02e:	3f01      	subs	r7, #1
 800b030:	2f16      	cmp	r7, #22
 800b032:	d851      	bhi.n	800b0d8 <_dtoa_r+0x210>
 800b034:	4b5b      	ldr	r3, [pc, #364]	@ (800b1a4 <_dtoa_r+0x2dc>)
 800b036:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b042:	f7f5 fd4b 	bl	8000adc <__aeabi_dcmplt>
 800b046:	2800      	cmp	r0, #0
 800b048:	d048      	beq.n	800b0dc <_dtoa_r+0x214>
 800b04a:	3f01      	subs	r7, #1
 800b04c:	2300      	movs	r3, #0
 800b04e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b050:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b052:	1b9b      	subs	r3, r3, r6
 800b054:	1e5a      	subs	r2, r3, #1
 800b056:	bf44      	itt	mi
 800b058:	f1c3 0801 	rsbmi	r8, r3, #1
 800b05c:	2300      	movmi	r3, #0
 800b05e:	9208      	str	r2, [sp, #32]
 800b060:	bf54      	ite	pl
 800b062:	f04f 0800 	movpl.w	r8, #0
 800b066:	9308      	strmi	r3, [sp, #32]
 800b068:	2f00      	cmp	r7, #0
 800b06a:	db39      	blt.n	800b0e0 <_dtoa_r+0x218>
 800b06c:	9b08      	ldr	r3, [sp, #32]
 800b06e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b070:	443b      	add	r3, r7
 800b072:	9308      	str	r3, [sp, #32]
 800b074:	2300      	movs	r3, #0
 800b076:	930a      	str	r3, [sp, #40]	@ 0x28
 800b078:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b07a:	2b09      	cmp	r3, #9
 800b07c:	d864      	bhi.n	800b148 <_dtoa_r+0x280>
 800b07e:	2b05      	cmp	r3, #5
 800b080:	bfc4      	itt	gt
 800b082:	3b04      	subgt	r3, #4
 800b084:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b088:	f1a3 0302 	sub.w	r3, r3, #2
 800b08c:	bfcc      	ite	gt
 800b08e:	2400      	movgt	r4, #0
 800b090:	2401      	movle	r4, #1
 800b092:	2b03      	cmp	r3, #3
 800b094:	d863      	bhi.n	800b15e <_dtoa_r+0x296>
 800b096:	e8df f003 	tbb	[pc, r3]
 800b09a:	372a      	.short	0x372a
 800b09c:	5535      	.short	0x5535
 800b09e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b0a2:	441e      	add	r6, r3
 800b0a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b0a8:	2b20      	cmp	r3, #32
 800b0aa:	bfc1      	itttt	gt
 800b0ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b0b0:	409f      	lslgt	r7, r3
 800b0b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b0b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b0ba:	bfd6      	itet	le
 800b0bc:	f1c3 0320 	rsble	r3, r3, #32
 800b0c0:	ea47 0003 	orrgt.w	r0, r7, r3
 800b0c4:	fa04 f003 	lslle.w	r0, r4, r3
 800b0c8:	f7f5 fa1c 	bl	8000504 <__aeabi_ui2d>
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b0d2:	3e01      	subs	r6, #1
 800b0d4:	9214      	str	r2, [sp, #80]	@ 0x50
 800b0d6:	e777      	b.n	800afc8 <_dtoa_r+0x100>
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e7b8      	b.n	800b04e <_dtoa_r+0x186>
 800b0dc:	9012      	str	r0, [sp, #72]	@ 0x48
 800b0de:	e7b7      	b.n	800b050 <_dtoa_r+0x188>
 800b0e0:	427b      	negs	r3, r7
 800b0e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	eba8 0807 	sub.w	r8, r8, r7
 800b0ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b0ec:	e7c4      	b.n	800b078 <_dtoa_r+0x1b0>
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	dc35      	bgt.n	800b164 <_dtoa_r+0x29c>
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	9300      	str	r3, [sp, #0]
 800b0fc:	9307      	str	r3, [sp, #28]
 800b0fe:	461a      	mov	r2, r3
 800b100:	920e      	str	r2, [sp, #56]	@ 0x38
 800b102:	e00b      	b.n	800b11c <_dtoa_r+0x254>
 800b104:	2301      	movs	r3, #1
 800b106:	e7f3      	b.n	800b0f0 <_dtoa_r+0x228>
 800b108:	2300      	movs	r3, #0
 800b10a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b10c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b10e:	18fb      	adds	r3, r7, r3
 800b110:	9300      	str	r3, [sp, #0]
 800b112:	3301      	adds	r3, #1
 800b114:	2b01      	cmp	r3, #1
 800b116:	9307      	str	r3, [sp, #28]
 800b118:	bfb8      	it	lt
 800b11a:	2301      	movlt	r3, #1
 800b11c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b120:	2100      	movs	r1, #0
 800b122:	2204      	movs	r2, #4
 800b124:	f102 0514 	add.w	r5, r2, #20
 800b128:	429d      	cmp	r5, r3
 800b12a:	d91f      	bls.n	800b16c <_dtoa_r+0x2a4>
 800b12c:	6041      	str	r1, [r0, #4]
 800b12e:	4658      	mov	r0, fp
 800b130:	f000 ff48 	bl	800bfc4 <_Balloc>
 800b134:	4682      	mov	sl, r0
 800b136:	2800      	cmp	r0, #0
 800b138:	d13c      	bne.n	800b1b4 <_dtoa_r+0x2ec>
 800b13a:	4b1b      	ldr	r3, [pc, #108]	@ (800b1a8 <_dtoa_r+0x2e0>)
 800b13c:	4602      	mov	r2, r0
 800b13e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b142:	e6d8      	b.n	800aef6 <_dtoa_r+0x2e>
 800b144:	2301      	movs	r3, #1
 800b146:	e7e0      	b.n	800b10a <_dtoa_r+0x242>
 800b148:	2401      	movs	r4, #1
 800b14a:	2300      	movs	r3, #0
 800b14c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b14e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b150:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b154:	9300      	str	r3, [sp, #0]
 800b156:	9307      	str	r3, [sp, #28]
 800b158:	2200      	movs	r2, #0
 800b15a:	2312      	movs	r3, #18
 800b15c:	e7d0      	b.n	800b100 <_dtoa_r+0x238>
 800b15e:	2301      	movs	r3, #1
 800b160:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b162:	e7f5      	b.n	800b150 <_dtoa_r+0x288>
 800b164:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b166:	9300      	str	r3, [sp, #0]
 800b168:	9307      	str	r3, [sp, #28]
 800b16a:	e7d7      	b.n	800b11c <_dtoa_r+0x254>
 800b16c:	3101      	adds	r1, #1
 800b16e:	0052      	lsls	r2, r2, #1
 800b170:	e7d8      	b.n	800b124 <_dtoa_r+0x25c>
 800b172:	bf00      	nop
 800b174:	f3af 8000 	nop.w
 800b178:	636f4361 	.word	0x636f4361
 800b17c:	3fd287a7 	.word	0x3fd287a7
 800b180:	8b60c8b3 	.word	0x8b60c8b3
 800b184:	3fc68a28 	.word	0x3fc68a28
 800b188:	509f79fb 	.word	0x509f79fb
 800b18c:	3fd34413 	.word	0x3fd34413
 800b190:	0800d0a9 	.word	0x0800d0a9
 800b194:	0800d0c0 	.word	0x0800d0c0
 800b198:	7ff00000 	.word	0x7ff00000
 800b19c:	0800d079 	.word	0x0800d079
 800b1a0:	3ff80000 	.word	0x3ff80000
 800b1a4:	0800d1c8 	.word	0x0800d1c8
 800b1a8:	0800d118 	.word	0x0800d118
 800b1ac:	0800d0a5 	.word	0x0800d0a5
 800b1b0:	0800d078 	.word	0x0800d078
 800b1b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b1b8:	6018      	str	r0, [r3, #0]
 800b1ba:	9b07      	ldr	r3, [sp, #28]
 800b1bc:	2b0e      	cmp	r3, #14
 800b1be:	f200 80a4 	bhi.w	800b30a <_dtoa_r+0x442>
 800b1c2:	2c00      	cmp	r4, #0
 800b1c4:	f000 80a1 	beq.w	800b30a <_dtoa_r+0x442>
 800b1c8:	2f00      	cmp	r7, #0
 800b1ca:	dd33      	ble.n	800b234 <_dtoa_r+0x36c>
 800b1cc:	4bad      	ldr	r3, [pc, #692]	@ (800b484 <_dtoa_r+0x5bc>)
 800b1ce:	f007 020f 	and.w	r2, r7, #15
 800b1d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1d6:	ed93 7b00 	vldr	d7, [r3]
 800b1da:	05f8      	lsls	r0, r7, #23
 800b1dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b1e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b1e4:	d516      	bpl.n	800b214 <_dtoa_r+0x34c>
 800b1e6:	4ba8      	ldr	r3, [pc, #672]	@ (800b488 <_dtoa_r+0x5c0>)
 800b1e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b1ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b1f0:	f7f5 fb2c 	bl	800084c <__aeabi_ddiv>
 800b1f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1f8:	f004 040f 	and.w	r4, r4, #15
 800b1fc:	2603      	movs	r6, #3
 800b1fe:	4da2      	ldr	r5, [pc, #648]	@ (800b488 <_dtoa_r+0x5c0>)
 800b200:	b954      	cbnz	r4, 800b218 <_dtoa_r+0x350>
 800b202:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b206:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b20a:	f7f5 fb1f 	bl	800084c <__aeabi_ddiv>
 800b20e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b212:	e028      	b.n	800b266 <_dtoa_r+0x39e>
 800b214:	2602      	movs	r6, #2
 800b216:	e7f2      	b.n	800b1fe <_dtoa_r+0x336>
 800b218:	07e1      	lsls	r1, r4, #31
 800b21a:	d508      	bpl.n	800b22e <_dtoa_r+0x366>
 800b21c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b220:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b224:	f7f5 f9e8 	bl	80005f8 <__aeabi_dmul>
 800b228:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b22c:	3601      	adds	r6, #1
 800b22e:	1064      	asrs	r4, r4, #1
 800b230:	3508      	adds	r5, #8
 800b232:	e7e5      	b.n	800b200 <_dtoa_r+0x338>
 800b234:	f000 80d2 	beq.w	800b3dc <_dtoa_r+0x514>
 800b238:	427c      	negs	r4, r7
 800b23a:	4b92      	ldr	r3, [pc, #584]	@ (800b484 <_dtoa_r+0x5bc>)
 800b23c:	4d92      	ldr	r5, [pc, #584]	@ (800b488 <_dtoa_r+0x5c0>)
 800b23e:	f004 020f 	and.w	r2, r4, #15
 800b242:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b246:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b24a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b24e:	f7f5 f9d3 	bl	80005f8 <__aeabi_dmul>
 800b252:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b256:	1124      	asrs	r4, r4, #4
 800b258:	2300      	movs	r3, #0
 800b25a:	2602      	movs	r6, #2
 800b25c:	2c00      	cmp	r4, #0
 800b25e:	f040 80b2 	bne.w	800b3c6 <_dtoa_r+0x4fe>
 800b262:	2b00      	cmp	r3, #0
 800b264:	d1d3      	bne.n	800b20e <_dtoa_r+0x346>
 800b266:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b268:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	f000 80b7 	beq.w	800b3e0 <_dtoa_r+0x518>
 800b272:	4b86      	ldr	r3, [pc, #536]	@ (800b48c <_dtoa_r+0x5c4>)
 800b274:	2200      	movs	r2, #0
 800b276:	4620      	mov	r0, r4
 800b278:	4629      	mov	r1, r5
 800b27a:	f7f5 fc2f 	bl	8000adc <__aeabi_dcmplt>
 800b27e:	2800      	cmp	r0, #0
 800b280:	f000 80ae 	beq.w	800b3e0 <_dtoa_r+0x518>
 800b284:	9b07      	ldr	r3, [sp, #28]
 800b286:	2b00      	cmp	r3, #0
 800b288:	f000 80aa 	beq.w	800b3e0 <_dtoa_r+0x518>
 800b28c:	9b00      	ldr	r3, [sp, #0]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	dd37      	ble.n	800b302 <_dtoa_r+0x43a>
 800b292:	1e7b      	subs	r3, r7, #1
 800b294:	9304      	str	r3, [sp, #16]
 800b296:	4620      	mov	r0, r4
 800b298:	4b7d      	ldr	r3, [pc, #500]	@ (800b490 <_dtoa_r+0x5c8>)
 800b29a:	2200      	movs	r2, #0
 800b29c:	4629      	mov	r1, r5
 800b29e:	f7f5 f9ab 	bl	80005f8 <__aeabi_dmul>
 800b2a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2a6:	9c00      	ldr	r4, [sp, #0]
 800b2a8:	3601      	adds	r6, #1
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	f7f5 f93a 	bl	8000524 <__aeabi_i2d>
 800b2b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b2b4:	f7f5 f9a0 	bl	80005f8 <__aeabi_dmul>
 800b2b8:	4b76      	ldr	r3, [pc, #472]	@ (800b494 <_dtoa_r+0x5cc>)
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f7f4 ffe6 	bl	800028c <__adddf3>
 800b2c0:	4605      	mov	r5, r0
 800b2c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b2c6:	2c00      	cmp	r4, #0
 800b2c8:	f040 808d 	bne.w	800b3e6 <_dtoa_r+0x51e>
 800b2cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2d0:	4b71      	ldr	r3, [pc, #452]	@ (800b498 <_dtoa_r+0x5d0>)
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f7f4 ffd8 	bl	8000288 <__aeabi_dsub>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	460b      	mov	r3, r1
 800b2dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b2e0:	462a      	mov	r2, r5
 800b2e2:	4633      	mov	r3, r6
 800b2e4:	f7f5 fc18 	bl	8000b18 <__aeabi_dcmpgt>
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	f040 828b 	bne.w	800b804 <_dtoa_r+0x93c>
 800b2ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2f2:	462a      	mov	r2, r5
 800b2f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b2f8:	f7f5 fbf0 	bl	8000adc <__aeabi_dcmplt>
 800b2fc:	2800      	cmp	r0, #0
 800b2fe:	f040 8128 	bne.w	800b552 <_dtoa_r+0x68a>
 800b302:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b306:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b30a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	f2c0 815a 	blt.w	800b5c6 <_dtoa_r+0x6fe>
 800b312:	2f0e      	cmp	r7, #14
 800b314:	f300 8157 	bgt.w	800b5c6 <_dtoa_r+0x6fe>
 800b318:	4b5a      	ldr	r3, [pc, #360]	@ (800b484 <_dtoa_r+0x5bc>)
 800b31a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b31e:	ed93 7b00 	vldr	d7, [r3]
 800b322:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b324:	2b00      	cmp	r3, #0
 800b326:	ed8d 7b00 	vstr	d7, [sp]
 800b32a:	da03      	bge.n	800b334 <_dtoa_r+0x46c>
 800b32c:	9b07      	ldr	r3, [sp, #28]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	f340 8101 	ble.w	800b536 <_dtoa_r+0x66e>
 800b334:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b338:	4656      	mov	r6, sl
 800b33a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b33e:	4620      	mov	r0, r4
 800b340:	4629      	mov	r1, r5
 800b342:	f7f5 fa83 	bl	800084c <__aeabi_ddiv>
 800b346:	f7f5 fc07 	bl	8000b58 <__aeabi_d2iz>
 800b34a:	4680      	mov	r8, r0
 800b34c:	f7f5 f8ea 	bl	8000524 <__aeabi_i2d>
 800b350:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b354:	f7f5 f950 	bl	80005f8 <__aeabi_dmul>
 800b358:	4602      	mov	r2, r0
 800b35a:	460b      	mov	r3, r1
 800b35c:	4620      	mov	r0, r4
 800b35e:	4629      	mov	r1, r5
 800b360:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b364:	f7f4 ff90 	bl	8000288 <__aeabi_dsub>
 800b368:	f806 4b01 	strb.w	r4, [r6], #1
 800b36c:	9d07      	ldr	r5, [sp, #28]
 800b36e:	eba6 040a 	sub.w	r4, r6, sl
 800b372:	42a5      	cmp	r5, r4
 800b374:	4602      	mov	r2, r0
 800b376:	460b      	mov	r3, r1
 800b378:	f040 8117 	bne.w	800b5aa <_dtoa_r+0x6e2>
 800b37c:	f7f4 ff86 	bl	800028c <__adddf3>
 800b380:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b384:	4604      	mov	r4, r0
 800b386:	460d      	mov	r5, r1
 800b388:	f7f5 fbc6 	bl	8000b18 <__aeabi_dcmpgt>
 800b38c:	2800      	cmp	r0, #0
 800b38e:	f040 80f9 	bne.w	800b584 <_dtoa_r+0x6bc>
 800b392:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b396:	4620      	mov	r0, r4
 800b398:	4629      	mov	r1, r5
 800b39a:	f7f5 fb95 	bl	8000ac8 <__aeabi_dcmpeq>
 800b39e:	b118      	cbz	r0, 800b3a8 <_dtoa_r+0x4e0>
 800b3a0:	f018 0f01 	tst.w	r8, #1
 800b3a4:	f040 80ee 	bne.w	800b584 <_dtoa_r+0x6bc>
 800b3a8:	4649      	mov	r1, r9
 800b3aa:	4658      	mov	r0, fp
 800b3ac:	f000 fe4a 	bl	800c044 <_Bfree>
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	7033      	strb	r3, [r6, #0]
 800b3b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b3b6:	3701      	adds	r7, #1
 800b3b8:	601f      	str	r7, [r3, #0]
 800b3ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	f000 831d 	beq.w	800b9fc <_dtoa_r+0xb34>
 800b3c2:	601e      	str	r6, [r3, #0]
 800b3c4:	e31a      	b.n	800b9fc <_dtoa_r+0xb34>
 800b3c6:	07e2      	lsls	r2, r4, #31
 800b3c8:	d505      	bpl.n	800b3d6 <_dtoa_r+0x50e>
 800b3ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b3ce:	f7f5 f913 	bl	80005f8 <__aeabi_dmul>
 800b3d2:	3601      	adds	r6, #1
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	1064      	asrs	r4, r4, #1
 800b3d8:	3508      	adds	r5, #8
 800b3da:	e73f      	b.n	800b25c <_dtoa_r+0x394>
 800b3dc:	2602      	movs	r6, #2
 800b3de:	e742      	b.n	800b266 <_dtoa_r+0x39e>
 800b3e0:	9c07      	ldr	r4, [sp, #28]
 800b3e2:	9704      	str	r7, [sp, #16]
 800b3e4:	e761      	b.n	800b2aa <_dtoa_r+0x3e2>
 800b3e6:	4b27      	ldr	r3, [pc, #156]	@ (800b484 <_dtoa_r+0x5bc>)
 800b3e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b3ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b3ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b3f2:	4454      	add	r4, sl
 800b3f4:	2900      	cmp	r1, #0
 800b3f6:	d053      	beq.n	800b4a0 <_dtoa_r+0x5d8>
 800b3f8:	4928      	ldr	r1, [pc, #160]	@ (800b49c <_dtoa_r+0x5d4>)
 800b3fa:	2000      	movs	r0, #0
 800b3fc:	f7f5 fa26 	bl	800084c <__aeabi_ddiv>
 800b400:	4633      	mov	r3, r6
 800b402:	462a      	mov	r2, r5
 800b404:	f7f4 ff40 	bl	8000288 <__aeabi_dsub>
 800b408:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b40c:	4656      	mov	r6, sl
 800b40e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b412:	f7f5 fba1 	bl	8000b58 <__aeabi_d2iz>
 800b416:	4605      	mov	r5, r0
 800b418:	f7f5 f884 	bl	8000524 <__aeabi_i2d>
 800b41c:	4602      	mov	r2, r0
 800b41e:	460b      	mov	r3, r1
 800b420:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b424:	f7f4 ff30 	bl	8000288 <__aeabi_dsub>
 800b428:	3530      	adds	r5, #48	@ 0x30
 800b42a:	4602      	mov	r2, r0
 800b42c:	460b      	mov	r3, r1
 800b42e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b432:	f806 5b01 	strb.w	r5, [r6], #1
 800b436:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b43a:	f7f5 fb4f 	bl	8000adc <__aeabi_dcmplt>
 800b43e:	2800      	cmp	r0, #0
 800b440:	d171      	bne.n	800b526 <_dtoa_r+0x65e>
 800b442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b446:	4911      	ldr	r1, [pc, #68]	@ (800b48c <_dtoa_r+0x5c4>)
 800b448:	2000      	movs	r0, #0
 800b44a:	f7f4 ff1d 	bl	8000288 <__aeabi_dsub>
 800b44e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b452:	f7f5 fb43 	bl	8000adc <__aeabi_dcmplt>
 800b456:	2800      	cmp	r0, #0
 800b458:	f040 8095 	bne.w	800b586 <_dtoa_r+0x6be>
 800b45c:	42a6      	cmp	r6, r4
 800b45e:	f43f af50 	beq.w	800b302 <_dtoa_r+0x43a>
 800b462:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b466:	4b0a      	ldr	r3, [pc, #40]	@ (800b490 <_dtoa_r+0x5c8>)
 800b468:	2200      	movs	r2, #0
 800b46a:	f7f5 f8c5 	bl	80005f8 <__aeabi_dmul>
 800b46e:	4b08      	ldr	r3, [pc, #32]	@ (800b490 <_dtoa_r+0x5c8>)
 800b470:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b474:	2200      	movs	r2, #0
 800b476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b47a:	f7f5 f8bd 	bl	80005f8 <__aeabi_dmul>
 800b47e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b482:	e7c4      	b.n	800b40e <_dtoa_r+0x546>
 800b484:	0800d1c8 	.word	0x0800d1c8
 800b488:	0800d1a0 	.word	0x0800d1a0
 800b48c:	3ff00000 	.word	0x3ff00000
 800b490:	40240000 	.word	0x40240000
 800b494:	401c0000 	.word	0x401c0000
 800b498:	40140000 	.word	0x40140000
 800b49c:	3fe00000 	.word	0x3fe00000
 800b4a0:	4631      	mov	r1, r6
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	f7f5 f8a8 	bl	80005f8 <__aeabi_dmul>
 800b4a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b4ac:	9415      	str	r4, [sp, #84]	@ 0x54
 800b4ae:	4656      	mov	r6, sl
 800b4b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4b4:	f7f5 fb50 	bl	8000b58 <__aeabi_d2iz>
 800b4b8:	4605      	mov	r5, r0
 800b4ba:	f7f5 f833 	bl	8000524 <__aeabi_i2d>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	460b      	mov	r3, r1
 800b4c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4c6:	f7f4 fedf 	bl	8000288 <__aeabi_dsub>
 800b4ca:	3530      	adds	r5, #48	@ 0x30
 800b4cc:	f806 5b01 	strb.w	r5, [r6], #1
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	42a6      	cmp	r6, r4
 800b4d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b4da:	f04f 0200 	mov.w	r2, #0
 800b4de:	d124      	bne.n	800b52a <_dtoa_r+0x662>
 800b4e0:	4bac      	ldr	r3, [pc, #688]	@ (800b794 <_dtoa_r+0x8cc>)
 800b4e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b4e6:	f7f4 fed1 	bl	800028c <__adddf3>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4f2:	f7f5 fb11 	bl	8000b18 <__aeabi_dcmpgt>
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	d145      	bne.n	800b586 <_dtoa_r+0x6be>
 800b4fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b4fe:	49a5      	ldr	r1, [pc, #660]	@ (800b794 <_dtoa_r+0x8cc>)
 800b500:	2000      	movs	r0, #0
 800b502:	f7f4 fec1 	bl	8000288 <__aeabi_dsub>
 800b506:	4602      	mov	r2, r0
 800b508:	460b      	mov	r3, r1
 800b50a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b50e:	f7f5 fae5 	bl	8000adc <__aeabi_dcmplt>
 800b512:	2800      	cmp	r0, #0
 800b514:	f43f aef5 	beq.w	800b302 <_dtoa_r+0x43a>
 800b518:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b51a:	1e73      	subs	r3, r6, #1
 800b51c:	9315      	str	r3, [sp, #84]	@ 0x54
 800b51e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b522:	2b30      	cmp	r3, #48	@ 0x30
 800b524:	d0f8      	beq.n	800b518 <_dtoa_r+0x650>
 800b526:	9f04      	ldr	r7, [sp, #16]
 800b528:	e73e      	b.n	800b3a8 <_dtoa_r+0x4e0>
 800b52a:	4b9b      	ldr	r3, [pc, #620]	@ (800b798 <_dtoa_r+0x8d0>)
 800b52c:	f7f5 f864 	bl	80005f8 <__aeabi_dmul>
 800b530:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b534:	e7bc      	b.n	800b4b0 <_dtoa_r+0x5e8>
 800b536:	d10c      	bne.n	800b552 <_dtoa_r+0x68a>
 800b538:	4b98      	ldr	r3, [pc, #608]	@ (800b79c <_dtoa_r+0x8d4>)
 800b53a:	2200      	movs	r2, #0
 800b53c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b540:	f7f5 f85a 	bl	80005f8 <__aeabi_dmul>
 800b544:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b548:	f7f5 fadc 	bl	8000b04 <__aeabi_dcmpge>
 800b54c:	2800      	cmp	r0, #0
 800b54e:	f000 8157 	beq.w	800b800 <_dtoa_r+0x938>
 800b552:	2400      	movs	r4, #0
 800b554:	4625      	mov	r5, r4
 800b556:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b558:	43db      	mvns	r3, r3
 800b55a:	9304      	str	r3, [sp, #16]
 800b55c:	4656      	mov	r6, sl
 800b55e:	2700      	movs	r7, #0
 800b560:	4621      	mov	r1, r4
 800b562:	4658      	mov	r0, fp
 800b564:	f000 fd6e 	bl	800c044 <_Bfree>
 800b568:	2d00      	cmp	r5, #0
 800b56a:	d0dc      	beq.n	800b526 <_dtoa_r+0x65e>
 800b56c:	b12f      	cbz	r7, 800b57a <_dtoa_r+0x6b2>
 800b56e:	42af      	cmp	r7, r5
 800b570:	d003      	beq.n	800b57a <_dtoa_r+0x6b2>
 800b572:	4639      	mov	r1, r7
 800b574:	4658      	mov	r0, fp
 800b576:	f000 fd65 	bl	800c044 <_Bfree>
 800b57a:	4629      	mov	r1, r5
 800b57c:	4658      	mov	r0, fp
 800b57e:	f000 fd61 	bl	800c044 <_Bfree>
 800b582:	e7d0      	b.n	800b526 <_dtoa_r+0x65e>
 800b584:	9704      	str	r7, [sp, #16]
 800b586:	4633      	mov	r3, r6
 800b588:	461e      	mov	r6, r3
 800b58a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b58e:	2a39      	cmp	r2, #57	@ 0x39
 800b590:	d107      	bne.n	800b5a2 <_dtoa_r+0x6da>
 800b592:	459a      	cmp	sl, r3
 800b594:	d1f8      	bne.n	800b588 <_dtoa_r+0x6c0>
 800b596:	9a04      	ldr	r2, [sp, #16]
 800b598:	3201      	adds	r2, #1
 800b59a:	9204      	str	r2, [sp, #16]
 800b59c:	2230      	movs	r2, #48	@ 0x30
 800b59e:	f88a 2000 	strb.w	r2, [sl]
 800b5a2:	781a      	ldrb	r2, [r3, #0]
 800b5a4:	3201      	adds	r2, #1
 800b5a6:	701a      	strb	r2, [r3, #0]
 800b5a8:	e7bd      	b.n	800b526 <_dtoa_r+0x65e>
 800b5aa:	4b7b      	ldr	r3, [pc, #492]	@ (800b798 <_dtoa_r+0x8d0>)
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f7f5 f823 	bl	80005f8 <__aeabi_dmul>
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	4604      	mov	r4, r0
 800b5b8:	460d      	mov	r5, r1
 800b5ba:	f7f5 fa85 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	f43f aebb 	beq.w	800b33a <_dtoa_r+0x472>
 800b5c4:	e6f0      	b.n	800b3a8 <_dtoa_r+0x4e0>
 800b5c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b5c8:	2a00      	cmp	r2, #0
 800b5ca:	f000 80db 	beq.w	800b784 <_dtoa_r+0x8bc>
 800b5ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5d0:	2a01      	cmp	r2, #1
 800b5d2:	f300 80bf 	bgt.w	800b754 <_dtoa_r+0x88c>
 800b5d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b5d8:	2a00      	cmp	r2, #0
 800b5da:	f000 80b7 	beq.w	800b74c <_dtoa_r+0x884>
 800b5de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b5e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b5e4:	4646      	mov	r6, r8
 800b5e6:	9a08      	ldr	r2, [sp, #32]
 800b5e8:	2101      	movs	r1, #1
 800b5ea:	441a      	add	r2, r3
 800b5ec:	4658      	mov	r0, fp
 800b5ee:	4498      	add	r8, r3
 800b5f0:	9208      	str	r2, [sp, #32]
 800b5f2:	f000 fddb 	bl	800c1ac <__i2b>
 800b5f6:	4605      	mov	r5, r0
 800b5f8:	b15e      	cbz	r6, 800b612 <_dtoa_r+0x74a>
 800b5fa:	9b08      	ldr	r3, [sp, #32]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	dd08      	ble.n	800b612 <_dtoa_r+0x74a>
 800b600:	42b3      	cmp	r3, r6
 800b602:	9a08      	ldr	r2, [sp, #32]
 800b604:	bfa8      	it	ge
 800b606:	4633      	movge	r3, r6
 800b608:	eba8 0803 	sub.w	r8, r8, r3
 800b60c:	1af6      	subs	r6, r6, r3
 800b60e:	1ad3      	subs	r3, r2, r3
 800b610:	9308      	str	r3, [sp, #32]
 800b612:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b614:	b1f3      	cbz	r3, 800b654 <_dtoa_r+0x78c>
 800b616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b618:	2b00      	cmp	r3, #0
 800b61a:	f000 80b7 	beq.w	800b78c <_dtoa_r+0x8c4>
 800b61e:	b18c      	cbz	r4, 800b644 <_dtoa_r+0x77c>
 800b620:	4629      	mov	r1, r5
 800b622:	4622      	mov	r2, r4
 800b624:	4658      	mov	r0, fp
 800b626:	f000 fe81 	bl	800c32c <__pow5mult>
 800b62a:	464a      	mov	r2, r9
 800b62c:	4601      	mov	r1, r0
 800b62e:	4605      	mov	r5, r0
 800b630:	4658      	mov	r0, fp
 800b632:	f000 fdd1 	bl	800c1d8 <__multiply>
 800b636:	4649      	mov	r1, r9
 800b638:	9004      	str	r0, [sp, #16]
 800b63a:	4658      	mov	r0, fp
 800b63c:	f000 fd02 	bl	800c044 <_Bfree>
 800b640:	9b04      	ldr	r3, [sp, #16]
 800b642:	4699      	mov	r9, r3
 800b644:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b646:	1b1a      	subs	r2, r3, r4
 800b648:	d004      	beq.n	800b654 <_dtoa_r+0x78c>
 800b64a:	4649      	mov	r1, r9
 800b64c:	4658      	mov	r0, fp
 800b64e:	f000 fe6d 	bl	800c32c <__pow5mult>
 800b652:	4681      	mov	r9, r0
 800b654:	2101      	movs	r1, #1
 800b656:	4658      	mov	r0, fp
 800b658:	f000 fda8 	bl	800c1ac <__i2b>
 800b65c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b65e:	4604      	mov	r4, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	f000 81cf 	beq.w	800ba04 <_dtoa_r+0xb3c>
 800b666:	461a      	mov	r2, r3
 800b668:	4601      	mov	r1, r0
 800b66a:	4658      	mov	r0, fp
 800b66c:	f000 fe5e 	bl	800c32c <__pow5mult>
 800b670:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b672:	2b01      	cmp	r3, #1
 800b674:	4604      	mov	r4, r0
 800b676:	f300 8095 	bgt.w	800b7a4 <_dtoa_r+0x8dc>
 800b67a:	9b02      	ldr	r3, [sp, #8]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	f040 8087 	bne.w	800b790 <_dtoa_r+0x8c8>
 800b682:	9b03      	ldr	r3, [sp, #12]
 800b684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b688:	2b00      	cmp	r3, #0
 800b68a:	f040 8089 	bne.w	800b7a0 <_dtoa_r+0x8d8>
 800b68e:	9b03      	ldr	r3, [sp, #12]
 800b690:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b694:	0d1b      	lsrs	r3, r3, #20
 800b696:	051b      	lsls	r3, r3, #20
 800b698:	b12b      	cbz	r3, 800b6a6 <_dtoa_r+0x7de>
 800b69a:	9b08      	ldr	r3, [sp, #32]
 800b69c:	3301      	adds	r3, #1
 800b69e:	9308      	str	r3, [sp, #32]
 800b6a0:	f108 0801 	add.w	r8, r8, #1
 800b6a4:	2301      	movs	r3, #1
 800b6a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b6a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	f000 81b0 	beq.w	800ba10 <_dtoa_r+0xb48>
 800b6b0:	6923      	ldr	r3, [r4, #16]
 800b6b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b6b6:	6918      	ldr	r0, [r3, #16]
 800b6b8:	f000 fd2c 	bl	800c114 <__hi0bits>
 800b6bc:	f1c0 0020 	rsb	r0, r0, #32
 800b6c0:	9b08      	ldr	r3, [sp, #32]
 800b6c2:	4418      	add	r0, r3
 800b6c4:	f010 001f 	ands.w	r0, r0, #31
 800b6c8:	d077      	beq.n	800b7ba <_dtoa_r+0x8f2>
 800b6ca:	f1c0 0320 	rsb	r3, r0, #32
 800b6ce:	2b04      	cmp	r3, #4
 800b6d0:	dd6b      	ble.n	800b7aa <_dtoa_r+0x8e2>
 800b6d2:	9b08      	ldr	r3, [sp, #32]
 800b6d4:	f1c0 001c 	rsb	r0, r0, #28
 800b6d8:	4403      	add	r3, r0
 800b6da:	4480      	add	r8, r0
 800b6dc:	4406      	add	r6, r0
 800b6de:	9308      	str	r3, [sp, #32]
 800b6e0:	f1b8 0f00 	cmp.w	r8, #0
 800b6e4:	dd05      	ble.n	800b6f2 <_dtoa_r+0x82a>
 800b6e6:	4649      	mov	r1, r9
 800b6e8:	4642      	mov	r2, r8
 800b6ea:	4658      	mov	r0, fp
 800b6ec:	f000 fe78 	bl	800c3e0 <__lshift>
 800b6f0:	4681      	mov	r9, r0
 800b6f2:	9b08      	ldr	r3, [sp, #32]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	dd05      	ble.n	800b704 <_dtoa_r+0x83c>
 800b6f8:	4621      	mov	r1, r4
 800b6fa:	461a      	mov	r2, r3
 800b6fc:	4658      	mov	r0, fp
 800b6fe:	f000 fe6f 	bl	800c3e0 <__lshift>
 800b702:	4604      	mov	r4, r0
 800b704:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b706:	2b00      	cmp	r3, #0
 800b708:	d059      	beq.n	800b7be <_dtoa_r+0x8f6>
 800b70a:	4621      	mov	r1, r4
 800b70c:	4648      	mov	r0, r9
 800b70e:	f000 fed3 	bl	800c4b8 <__mcmp>
 800b712:	2800      	cmp	r0, #0
 800b714:	da53      	bge.n	800b7be <_dtoa_r+0x8f6>
 800b716:	1e7b      	subs	r3, r7, #1
 800b718:	9304      	str	r3, [sp, #16]
 800b71a:	4649      	mov	r1, r9
 800b71c:	2300      	movs	r3, #0
 800b71e:	220a      	movs	r2, #10
 800b720:	4658      	mov	r0, fp
 800b722:	f000 fcb1 	bl	800c088 <__multadd>
 800b726:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b728:	4681      	mov	r9, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	f000 8172 	beq.w	800ba14 <_dtoa_r+0xb4c>
 800b730:	2300      	movs	r3, #0
 800b732:	4629      	mov	r1, r5
 800b734:	220a      	movs	r2, #10
 800b736:	4658      	mov	r0, fp
 800b738:	f000 fca6 	bl	800c088 <__multadd>
 800b73c:	9b00      	ldr	r3, [sp, #0]
 800b73e:	2b00      	cmp	r3, #0
 800b740:	4605      	mov	r5, r0
 800b742:	dc67      	bgt.n	800b814 <_dtoa_r+0x94c>
 800b744:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b746:	2b02      	cmp	r3, #2
 800b748:	dc41      	bgt.n	800b7ce <_dtoa_r+0x906>
 800b74a:	e063      	b.n	800b814 <_dtoa_r+0x94c>
 800b74c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b74e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b752:	e746      	b.n	800b5e2 <_dtoa_r+0x71a>
 800b754:	9b07      	ldr	r3, [sp, #28]
 800b756:	1e5c      	subs	r4, r3, #1
 800b758:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b75a:	42a3      	cmp	r3, r4
 800b75c:	bfbf      	itttt	lt
 800b75e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b760:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b762:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b764:	1ae3      	sublt	r3, r4, r3
 800b766:	bfb4      	ite	lt
 800b768:	18d2      	addlt	r2, r2, r3
 800b76a:	1b1c      	subge	r4, r3, r4
 800b76c:	9b07      	ldr	r3, [sp, #28]
 800b76e:	bfbc      	itt	lt
 800b770:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b772:	2400      	movlt	r4, #0
 800b774:	2b00      	cmp	r3, #0
 800b776:	bfb5      	itete	lt
 800b778:	eba8 0603 	sublt.w	r6, r8, r3
 800b77c:	9b07      	ldrge	r3, [sp, #28]
 800b77e:	2300      	movlt	r3, #0
 800b780:	4646      	movge	r6, r8
 800b782:	e730      	b.n	800b5e6 <_dtoa_r+0x71e>
 800b784:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b786:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b788:	4646      	mov	r6, r8
 800b78a:	e735      	b.n	800b5f8 <_dtoa_r+0x730>
 800b78c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b78e:	e75c      	b.n	800b64a <_dtoa_r+0x782>
 800b790:	2300      	movs	r3, #0
 800b792:	e788      	b.n	800b6a6 <_dtoa_r+0x7de>
 800b794:	3fe00000 	.word	0x3fe00000
 800b798:	40240000 	.word	0x40240000
 800b79c:	40140000 	.word	0x40140000
 800b7a0:	9b02      	ldr	r3, [sp, #8]
 800b7a2:	e780      	b.n	800b6a6 <_dtoa_r+0x7de>
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7a8:	e782      	b.n	800b6b0 <_dtoa_r+0x7e8>
 800b7aa:	d099      	beq.n	800b6e0 <_dtoa_r+0x818>
 800b7ac:	9a08      	ldr	r2, [sp, #32]
 800b7ae:	331c      	adds	r3, #28
 800b7b0:	441a      	add	r2, r3
 800b7b2:	4498      	add	r8, r3
 800b7b4:	441e      	add	r6, r3
 800b7b6:	9208      	str	r2, [sp, #32]
 800b7b8:	e792      	b.n	800b6e0 <_dtoa_r+0x818>
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	e7f6      	b.n	800b7ac <_dtoa_r+0x8e4>
 800b7be:	9b07      	ldr	r3, [sp, #28]
 800b7c0:	9704      	str	r7, [sp, #16]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	dc20      	bgt.n	800b808 <_dtoa_r+0x940>
 800b7c6:	9300      	str	r3, [sp, #0]
 800b7c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7ca:	2b02      	cmp	r3, #2
 800b7cc:	dd1e      	ble.n	800b80c <_dtoa_r+0x944>
 800b7ce:	9b00      	ldr	r3, [sp, #0]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	f47f aec0 	bne.w	800b556 <_dtoa_r+0x68e>
 800b7d6:	4621      	mov	r1, r4
 800b7d8:	2205      	movs	r2, #5
 800b7da:	4658      	mov	r0, fp
 800b7dc:	f000 fc54 	bl	800c088 <__multadd>
 800b7e0:	4601      	mov	r1, r0
 800b7e2:	4604      	mov	r4, r0
 800b7e4:	4648      	mov	r0, r9
 800b7e6:	f000 fe67 	bl	800c4b8 <__mcmp>
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	f77f aeb3 	ble.w	800b556 <_dtoa_r+0x68e>
 800b7f0:	4656      	mov	r6, sl
 800b7f2:	2331      	movs	r3, #49	@ 0x31
 800b7f4:	f806 3b01 	strb.w	r3, [r6], #1
 800b7f8:	9b04      	ldr	r3, [sp, #16]
 800b7fa:	3301      	adds	r3, #1
 800b7fc:	9304      	str	r3, [sp, #16]
 800b7fe:	e6ae      	b.n	800b55e <_dtoa_r+0x696>
 800b800:	9c07      	ldr	r4, [sp, #28]
 800b802:	9704      	str	r7, [sp, #16]
 800b804:	4625      	mov	r5, r4
 800b806:	e7f3      	b.n	800b7f0 <_dtoa_r+0x928>
 800b808:	9b07      	ldr	r3, [sp, #28]
 800b80a:	9300      	str	r3, [sp, #0]
 800b80c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b80e:	2b00      	cmp	r3, #0
 800b810:	f000 8104 	beq.w	800ba1c <_dtoa_r+0xb54>
 800b814:	2e00      	cmp	r6, #0
 800b816:	dd05      	ble.n	800b824 <_dtoa_r+0x95c>
 800b818:	4629      	mov	r1, r5
 800b81a:	4632      	mov	r2, r6
 800b81c:	4658      	mov	r0, fp
 800b81e:	f000 fddf 	bl	800c3e0 <__lshift>
 800b822:	4605      	mov	r5, r0
 800b824:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b826:	2b00      	cmp	r3, #0
 800b828:	d05a      	beq.n	800b8e0 <_dtoa_r+0xa18>
 800b82a:	6869      	ldr	r1, [r5, #4]
 800b82c:	4658      	mov	r0, fp
 800b82e:	f000 fbc9 	bl	800bfc4 <_Balloc>
 800b832:	4606      	mov	r6, r0
 800b834:	b928      	cbnz	r0, 800b842 <_dtoa_r+0x97a>
 800b836:	4b84      	ldr	r3, [pc, #528]	@ (800ba48 <_dtoa_r+0xb80>)
 800b838:	4602      	mov	r2, r0
 800b83a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b83e:	f7ff bb5a 	b.w	800aef6 <_dtoa_r+0x2e>
 800b842:	692a      	ldr	r2, [r5, #16]
 800b844:	3202      	adds	r2, #2
 800b846:	0092      	lsls	r2, r2, #2
 800b848:	f105 010c 	add.w	r1, r5, #12
 800b84c:	300c      	adds	r0, #12
 800b84e:	f001 f81d 	bl	800c88c <memcpy>
 800b852:	2201      	movs	r2, #1
 800b854:	4631      	mov	r1, r6
 800b856:	4658      	mov	r0, fp
 800b858:	f000 fdc2 	bl	800c3e0 <__lshift>
 800b85c:	f10a 0301 	add.w	r3, sl, #1
 800b860:	9307      	str	r3, [sp, #28]
 800b862:	9b00      	ldr	r3, [sp, #0]
 800b864:	4453      	add	r3, sl
 800b866:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b868:	9b02      	ldr	r3, [sp, #8]
 800b86a:	f003 0301 	and.w	r3, r3, #1
 800b86e:	462f      	mov	r7, r5
 800b870:	930a      	str	r3, [sp, #40]	@ 0x28
 800b872:	4605      	mov	r5, r0
 800b874:	9b07      	ldr	r3, [sp, #28]
 800b876:	4621      	mov	r1, r4
 800b878:	3b01      	subs	r3, #1
 800b87a:	4648      	mov	r0, r9
 800b87c:	9300      	str	r3, [sp, #0]
 800b87e:	f7ff fa9a 	bl	800adb6 <quorem>
 800b882:	4639      	mov	r1, r7
 800b884:	9002      	str	r0, [sp, #8]
 800b886:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b88a:	4648      	mov	r0, r9
 800b88c:	f000 fe14 	bl	800c4b8 <__mcmp>
 800b890:	462a      	mov	r2, r5
 800b892:	9008      	str	r0, [sp, #32]
 800b894:	4621      	mov	r1, r4
 800b896:	4658      	mov	r0, fp
 800b898:	f000 fe2a 	bl	800c4f0 <__mdiff>
 800b89c:	68c2      	ldr	r2, [r0, #12]
 800b89e:	4606      	mov	r6, r0
 800b8a0:	bb02      	cbnz	r2, 800b8e4 <_dtoa_r+0xa1c>
 800b8a2:	4601      	mov	r1, r0
 800b8a4:	4648      	mov	r0, r9
 800b8a6:	f000 fe07 	bl	800c4b8 <__mcmp>
 800b8aa:	4602      	mov	r2, r0
 800b8ac:	4631      	mov	r1, r6
 800b8ae:	4658      	mov	r0, fp
 800b8b0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b8b2:	f000 fbc7 	bl	800c044 <_Bfree>
 800b8b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b8ba:	9e07      	ldr	r6, [sp, #28]
 800b8bc:	ea43 0102 	orr.w	r1, r3, r2
 800b8c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b8c2:	4319      	orrs	r1, r3
 800b8c4:	d110      	bne.n	800b8e8 <_dtoa_r+0xa20>
 800b8c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b8ca:	d029      	beq.n	800b920 <_dtoa_r+0xa58>
 800b8cc:	9b08      	ldr	r3, [sp, #32]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	dd02      	ble.n	800b8d8 <_dtoa_r+0xa10>
 800b8d2:	9b02      	ldr	r3, [sp, #8]
 800b8d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b8d8:	9b00      	ldr	r3, [sp, #0]
 800b8da:	f883 8000 	strb.w	r8, [r3]
 800b8de:	e63f      	b.n	800b560 <_dtoa_r+0x698>
 800b8e0:	4628      	mov	r0, r5
 800b8e2:	e7bb      	b.n	800b85c <_dtoa_r+0x994>
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	e7e1      	b.n	800b8ac <_dtoa_r+0x9e4>
 800b8e8:	9b08      	ldr	r3, [sp, #32]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	db04      	blt.n	800b8f8 <_dtoa_r+0xa30>
 800b8ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b8f0:	430b      	orrs	r3, r1
 800b8f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b8f4:	430b      	orrs	r3, r1
 800b8f6:	d120      	bne.n	800b93a <_dtoa_r+0xa72>
 800b8f8:	2a00      	cmp	r2, #0
 800b8fa:	dded      	ble.n	800b8d8 <_dtoa_r+0xa10>
 800b8fc:	4649      	mov	r1, r9
 800b8fe:	2201      	movs	r2, #1
 800b900:	4658      	mov	r0, fp
 800b902:	f000 fd6d 	bl	800c3e0 <__lshift>
 800b906:	4621      	mov	r1, r4
 800b908:	4681      	mov	r9, r0
 800b90a:	f000 fdd5 	bl	800c4b8 <__mcmp>
 800b90e:	2800      	cmp	r0, #0
 800b910:	dc03      	bgt.n	800b91a <_dtoa_r+0xa52>
 800b912:	d1e1      	bne.n	800b8d8 <_dtoa_r+0xa10>
 800b914:	f018 0f01 	tst.w	r8, #1
 800b918:	d0de      	beq.n	800b8d8 <_dtoa_r+0xa10>
 800b91a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b91e:	d1d8      	bne.n	800b8d2 <_dtoa_r+0xa0a>
 800b920:	9a00      	ldr	r2, [sp, #0]
 800b922:	2339      	movs	r3, #57	@ 0x39
 800b924:	7013      	strb	r3, [r2, #0]
 800b926:	4633      	mov	r3, r6
 800b928:	461e      	mov	r6, r3
 800b92a:	3b01      	subs	r3, #1
 800b92c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b930:	2a39      	cmp	r2, #57	@ 0x39
 800b932:	d052      	beq.n	800b9da <_dtoa_r+0xb12>
 800b934:	3201      	adds	r2, #1
 800b936:	701a      	strb	r2, [r3, #0]
 800b938:	e612      	b.n	800b560 <_dtoa_r+0x698>
 800b93a:	2a00      	cmp	r2, #0
 800b93c:	dd07      	ble.n	800b94e <_dtoa_r+0xa86>
 800b93e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b942:	d0ed      	beq.n	800b920 <_dtoa_r+0xa58>
 800b944:	9a00      	ldr	r2, [sp, #0]
 800b946:	f108 0301 	add.w	r3, r8, #1
 800b94a:	7013      	strb	r3, [r2, #0]
 800b94c:	e608      	b.n	800b560 <_dtoa_r+0x698>
 800b94e:	9b07      	ldr	r3, [sp, #28]
 800b950:	9a07      	ldr	r2, [sp, #28]
 800b952:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b956:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b958:	4293      	cmp	r3, r2
 800b95a:	d028      	beq.n	800b9ae <_dtoa_r+0xae6>
 800b95c:	4649      	mov	r1, r9
 800b95e:	2300      	movs	r3, #0
 800b960:	220a      	movs	r2, #10
 800b962:	4658      	mov	r0, fp
 800b964:	f000 fb90 	bl	800c088 <__multadd>
 800b968:	42af      	cmp	r7, r5
 800b96a:	4681      	mov	r9, r0
 800b96c:	f04f 0300 	mov.w	r3, #0
 800b970:	f04f 020a 	mov.w	r2, #10
 800b974:	4639      	mov	r1, r7
 800b976:	4658      	mov	r0, fp
 800b978:	d107      	bne.n	800b98a <_dtoa_r+0xac2>
 800b97a:	f000 fb85 	bl	800c088 <__multadd>
 800b97e:	4607      	mov	r7, r0
 800b980:	4605      	mov	r5, r0
 800b982:	9b07      	ldr	r3, [sp, #28]
 800b984:	3301      	adds	r3, #1
 800b986:	9307      	str	r3, [sp, #28]
 800b988:	e774      	b.n	800b874 <_dtoa_r+0x9ac>
 800b98a:	f000 fb7d 	bl	800c088 <__multadd>
 800b98e:	4629      	mov	r1, r5
 800b990:	4607      	mov	r7, r0
 800b992:	2300      	movs	r3, #0
 800b994:	220a      	movs	r2, #10
 800b996:	4658      	mov	r0, fp
 800b998:	f000 fb76 	bl	800c088 <__multadd>
 800b99c:	4605      	mov	r5, r0
 800b99e:	e7f0      	b.n	800b982 <_dtoa_r+0xaba>
 800b9a0:	9b00      	ldr	r3, [sp, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	bfcc      	ite	gt
 800b9a6:	461e      	movgt	r6, r3
 800b9a8:	2601      	movle	r6, #1
 800b9aa:	4456      	add	r6, sl
 800b9ac:	2700      	movs	r7, #0
 800b9ae:	4649      	mov	r1, r9
 800b9b0:	2201      	movs	r2, #1
 800b9b2:	4658      	mov	r0, fp
 800b9b4:	f000 fd14 	bl	800c3e0 <__lshift>
 800b9b8:	4621      	mov	r1, r4
 800b9ba:	4681      	mov	r9, r0
 800b9bc:	f000 fd7c 	bl	800c4b8 <__mcmp>
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	dcb0      	bgt.n	800b926 <_dtoa_r+0xa5e>
 800b9c4:	d102      	bne.n	800b9cc <_dtoa_r+0xb04>
 800b9c6:	f018 0f01 	tst.w	r8, #1
 800b9ca:	d1ac      	bne.n	800b926 <_dtoa_r+0xa5e>
 800b9cc:	4633      	mov	r3, r6
 800b9ce:	461e      	mov	r6, r3
 800b9d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9d4:	2a30      	cmp	r2, #48	@ 0x30
 800b9d6:	d0fa      	beq.n	800b9ce <_dtoa_r+0xb06>
 800b9d8:	e5c2      	b.n	800b560 <_dtoa_r+0x698>
 800b9da:	459a      	cmp	sl, r3
 800b9dc:	d1a4      	bne.n	800b928 <_dtoa_r+0xa60>
 800b9de:	9b04      	ldr	r3, [sp, #16]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	9304      	str	r3, [sp, #16]
 800b9e4:	2331      	movs	r3, #49	@ 0x31
 800b9e6:	f88a 3000 	strb.w	r3, [sl]
 800b9ea:	e5b9      	b.n	800b560 <_dtoa_r+0x698>
 800b9ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b9ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ba4c <_dtoa_r+0xb84>
 800b9f2:	b11b      	cbz	r3, 800b9fc <_dtoa_r+0xb34>
 800b9f4:	f10a 0308 	add.w	r3, sl, #8
 800b9f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b9fa:	6013      	str	r3, [r2, #0]
 800b9fc:	4650      	mov	r0, sl
 800b9fe:	b019      	add	sp, #100	@ 0x64
 800ba00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	f77f ae37 	ble.w	800b67a <_dtoa_r+0x7b2>
 800ba0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba10:	2001      	movs	r0, #1
 800ba12:	e655      	b.n	800b6c0 <_dtoa_r+0x7f8>
 800ba14:	9b00      	ldr	r3, [sp, #0]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	f77f aed6 	ble.w	800b7c8 <_dtoa_r+0x900>
 800ba1c:	4656      	mov	r6, sl
 800ba1e:	4621      	mov	r1, r4
 800ba20:	4648      	mov	r0, r9
 800ba22:	f7ff f9c8 	bl	800adb6 <quorem>
 800ba26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ba2a:	f806 8b01 	strb.w	r8, [r6], #1
 800ba2e:	9b00      	ldr	r3, [sp, #0]
 800ba30:	eba6 020a 	sub.w	r2, r6, sl
 800ba34:	4293      	cmp	r3, r2
 800ba36:	ddb3      	ble.n	800b9a0 <_dtoa_r+0xad8>
 800ba38:	4649      	mov	r1, r9
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	220a      	movs	r2, #10
 800ba3e:	4658      	mov	r0, fp
 800ba40:	f000 fb22 	bl	800c088 <__multadd>
 800ba44:	4681      	mov	r9, r0
 800ba46:	e7ea      	b.n	800ba1e <_dtoa_r+0xb56>
 800ba48:	0800d118 	.word	0x0800d118
 800ba4c:	0800d09c 	.word	0x0800d09c

0800ba50 <__ssputs_r>:
 800ba50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba54:	688e      	ldr	r6, [r1, #8]
 800ba56:	461f      	mov	r7, r3
 800ba58:	42be      	cmp	r6, r7
 800ba5a:	680b      	ldr	r3, [r1, #0]
 800ba5c:	4682      	mov	sl, r0
 800ba5e:	460c      	mov	r4, r1
 800ba60:	4690      	mov	r8, r2
 800ba62:	d82d      	bhi.n	800bac0 <__ssputs_r+0x70>
 800ba64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ba6c:	d026      	beq.n	800babc <__ssputs_r+0x6c>
 800ba6e:	6965      	ldr	r5, [r4, #20]
 800ba70:	6909      	ldr	r1, [r1, #16]
 800ba72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba76:	eba3 0901 	sub.w	r9, r3, r1
 800ba7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba7e:	1c7b      	adds	r3, r7, #1
 800ba80:	444b      	add	r3, r9
 800ba82:	106d      	asrs	r5, r5, #1
 800ba84:	429d      	cmp	r5, r3
 800ba86:	bf38      	it	cc
 800ba88:	461d      	movcc	r5, r3
 800ba8a:	0553      	lsls	r3, r2, #21
 800ba8c:	d527      	bpl.n	800bade <__ssputs_r+0x8e>
 800ba8e:	4629      	mov	r1, r5
 800ba90:	f000 f960 	bl	800bd54 <_malloc_r>
 800ba94:	4606      	mov	r6, r0
 800ba96:	b360      	cbz	r0, 800baf2 <__ssputs_r+0xa2>
 800ba98:	6921      	ldr	r1, [r4, #16]
 800ba9a:	464a      	mov	r2, r9
 800ba9c:	f000 fef6 	bl	800c88c <memcpy>
 800baa0:	89a3      	ldrh	r3, [r4, #12]
 800baa2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800baa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800baaa:	81a3      	strh	r3, [r4, #12]
 800baac:	6126      	str	r6, [r4, #16]
 800baae:	6165      	str	r5, [r4, #20]
 800bab0:	444e      	add	r6, r9
 800bab2:	eba5 0509 	sub.w	r5, r5, r9
 800bab6:	6026      	str	r6, [r4, #0]
 800bab8:	60a5      	str	r5, [r4, #8]
 800baba:	463e      	mov	r6, r7
 800babc:	42be      	cmp	r6, r7
 800babe:	d900      	bls.n	800bac2 <__ssputs_r+0x72>
 800bac0:	463e      	mov	r6, r7
 800bac2:	6820      	ldr	r0, [r4, #0]
 800bac4:	4632      	mov	r2, r6
 800bac6:	4641      	mov	r1, r8
 800bac8:	f000 fe6f 	bl	800c7aa <memmove>
 800bacc:	68a3      	ldr	r3, [r4, #8]
 800bace:	1b9b      	subs	r3, r3, r6
 800bad0:	60a3      	str	r3, [r4, #8]
 800bad2:	6823      	ldr	r3, [r4, #0]
 800bad4:	4433      	add	r3, r6
 800bad6:	6023      	str	r3, [r4, #0]
 800bad8:	2000      	movs	r0, #0
 800bada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bade:	462a      	mov	r2, r5
 800bae0:	f000 fe35 	bl	800c74e <_realloc_r>
 800bae4:	4606      	mov	r6, r0
 800bae6:	2800      	cmp	r0, #0
 800bae8:	d1e0      	bne.n	800baac <__ssputs_r+0x5c>
 800baea:	6921      	ldr	r1, [r4, #16]
 800baec:	4650      	mov	r0, sl
 800baee:	f000 ff0d 	bl	800c90c <_free_r>
 800baf2:	230c      	movs	r3, #12
 800baf4:	f8ca 3000 	str.w	r3, [sl]
 800baf8:	89a3      	ldrh	r3, [r4, #12]
 800bafa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bafe:	81a3      	strh	r3, [r4, #12]
 800bb00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb04:	e7e9      	b.n	800bada <__ssputs_r+0x8a>
	...

0800bb08 <_svfiprintf_r>:
 800bb08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb0c:	4698      	mov	r8, r3
 800bb0e:	898b      	ldrh	r3, [r1, #12]
 800bb10:	061b      	lsls	r3, r3, #24
 800bb12:	b09d      	sub	sp, #116	@ 0x74
 800bb14:	4607      	mov	r7, r0
 800bb16:	460d      	mov	r5, r1
 800bb18:	4614      	mov	r4, r2
 800bb1a:	d510      	bpl.n	800bb3e <_svfiprintf_r+0x36>
 800bb1c:	690b      	ldr	r3, [r1, #16]
 800bb1e:	b973      	cbnz	r3, 800bb3e <_svfiprintf_r+0x36>
 800bb20:	2140      	movs	r1, #64	@ 0x40
 800bb22:	f000 f917 	bl	800bd54 <_malloc_r>
 800bb26:	6028      	str	r0, [r5, #0]
 800bb28:	6128      	str	r0, [r5, #16]
 800bb2a:	b930      	cbnz	r0, 800bb3a <_svfiprintf_r+0x32>
 800bb2c:	230c      	movs	r3, #12
 800bb2e:	603b      	str	r3, [r7, #0]
 800bb30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb34:	b01d      	add	sp, #116	@ 0x74
 800bb36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb3a:	2340      	movs	r3, #64	@ 0x40
 800bb3c:	616b      	str	r3, [r5, #20]
 800bb3e:	2300      	movs	r3, #0
 800bb40:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb42:	2320      	movs	r3, #32
 800bb44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb48:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb4c:	2330      	movs	r3, #48	@ 0x30
 800bb4e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bcec <_svfiprintf_r+0x1e4>
 800bb52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb56:	f04f 0901 	mov.w	r9, #1
 800bb5a:	4623      	mov	r3, r4
 800bb5c:	469a      	mov	sl, r3
 800bb5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb62:	b10a      	cbz	r2, 800bb68 <_svfiprintf_r+0x60>
 800bb64:	2a25      	cmp	r2, #37	@ 0x25
 800bb66:	d1f9      	bne.n	800bb5c <_svfiprintf_r+0x54>
 800bb68:	ebba 0b04 	subs.w	fp, sl, r4
 800bb6c:	d00b      	beq.n	800bb86 <_svfiprintf_r+0x7e>
 800bb6e:	465b      	mov	r3, fp
 800bb70:	4622      	mov	r2, r4
 800bb72:	4629      	mov	r1, r5
 800bb74:	4638      	mov	r0, r7
 800bb76:	f7ff ff6b 	bl	800ba50 <__ssputs_r>
 800bb7a:	3001      	adds	r0, #1
 800bb7c:	f000 80a7 	beq.w	800bcce <_svfiprintf_r+0x1c6>
 800bb80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb82:	445a      	add	r2, fp
 800bb84:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb86:	f89a 3000 	ldrb.w	r3, [sl]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	f000 809f 	beq.w	800bcce <_svfiprintf_r+0x1c6>
 800bb90:	2300      	movs	r3, #0
 800bb92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bb96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb9a:	f10a 0a01 	add.w	sl, sl, #1
 800bb9e:	9304      	str	r3, [sp, #16]
 800bba0:	9307      	str	r3, [sp, #28]
 800bba2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bba6:	931a      	str	r3, [sp, #104]	@ 0x68
 800bba8:	4654      	mov	r4, sl
 800bbaa:	2205      	movs	r2, #5
 800bbac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbb0:	484e      	ldr	r0, [pc, #312]	@ (800bcec <_svfiprintf_r+0x1e4>)
 800bbb2:	f7f4 fb0d 	bl	80001d0 <memchr>
 800bbb6:	9a04      	ldr	r2, [sp, #16]
 800bbb8:	b9d8      	cbnz	r0, 800bbf2 <_svfiprintf_r+0xea>
 800bbba:	06d0      	lsls	r0, r2, #27
 800bbbc:	bf44      	itt	mi
 800bbbe:	2320      	movmi	r3, #32
 800bbc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbc4:	0711      	lsls	r1, r2, #28
 800bbc6:	bf44      	itt	mi
 800bbc8:	232b      	movmi	r3, #43	@ 0x2b
 800bbca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbce:	f89a 3000 	ldrb.w	r3, [sl]
 800bbd2:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbd4:	d015      	beq.n	800bc02 <_svfiprintf_r+0xfa>
 800bbd6:	9a07      	ldr	r2, [sp, #28]
 800bbd8:	4654      	mov	r4, sl
 800bbda:	2000      	movs	r0, #0
 800bbdc:	f04f 0c0a 	mov.w	ip, #10
 800bbe0:	4621      	mov	r1, r4
 800bbe2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbe6:	3b30      	subs	r3, #48	@ 0x30
 800bbe8:	2b09      	cmp	r3, #9
 800bbea:	d94b      	bls.n	800bc84 <_svfiprintf_r+0x17c>
 800bbec:	b1b0      	cbz	r0, 800bc1c <_svfiprintf_r+0x114>
 800bbee:	9207      	str	r2, [sp, #28]
 800bbf0:	e014      	b.n	800bc1c <_svfiprintf_r+0x114>
 800bbf2:	eba0 0308 	sub.w	r3, r0, r8
 800bbf6:	fa09 f303 	lsl.w	r3, r9, r3
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	9304      	str	r3, [sp, #16]
 800bbfe:	46a2      	mov	sl, r4
 800bc00:	e7d2      	b.n	800bba8 <_svfiprintf_r+0xa0>
 800bc02:	9b03      	ldr	r3, [sp, #12]
 800bc04:	1d19      	adds	r1, r3, #4
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	9103      	str	r1, [sp, #12]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	bfbb      	ittet	lt
 800bc0e:	425b      	neglt	r3, r3
 800bc10:	f042 0202 	orrlt.w	r2, r2, #2
 800bc14:	9307      	strge	r3, [sp, #28]
 800bc16:	9307      	strlt	r3, [sp, #28]
 800bc18:	bfb8      	it	lt
 800bc1a:	9204      	strlt	r2, [sp, #16]
 800bc1c:	7823      	ldrb	r3, [r4, #0]
 800bc1e:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc20:	d10a      	bne.n	800bc38 <_svfiprintf_r+0x130>
 800bc22:	7863      	ldrb	r3, [r4, #1]
 800bc24:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc26:	d132      	bne.n	800bc8e <_svfiprintf_r+0x186>
 800bc28:	9b03      	ldr	r3, [sp, #12]
 800bc2a:	1d1a      	adds	r2, r3, #4
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	9203      	str	r2, [sp, #12]
 800bc30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc34:	3402      	adds	r4, #2
 800bc36:	9305      	str	r3, [sp, #20]
 800bc38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bcfc <_svfiprintf_r+0x1f4>
 800bc3c:	7821      	ldrb	r1, [r4, #0]
 800bc3e:	2203      	movs	r2, #3
 800bc40:	4650      	mov	r0, sl
 800bc42:	f7f4 fac5 	bl	80001d0 <memchr>
 800bc46:	b138      	cbz	r0, 800bc58 <_svfiprintf_r+0x150>
 800bc48:	9b04      	ldr	r3, [sp, #16]
 800bc4a:	eba0 000a 	sub.w	r0, r0, sl
 800bc4e:	2240      	movs	r2, #64	@ 0x40
 800bc50:	4082      	lsls	r2, r0
 800bc52:	4313      	orrs	r3, r2
 800bc54:	3401      	adds	r4, #1
 800bc56:	9304      	str	r3, [sp, #16]
 800bc58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc5c:	4824      	ldr	r0, [pc, #144]	@ (800bcf0 <_svfiprintf_r+0x1e8>)
 800bc5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc62:	2206      	movs	r2, #6
 800bc64:	f7f4 fab4 	bl	80001d0 <memchr>
 800bc68:	2800      	cmp	r0, #0
 800bc6a:	d036      	beq.n	800bcda <_svfiprintf_r+0x1d2>
 800bc6c:	4b21      	ldr	r3, [pc, #132]	@ (800bcf4 <_svfiprintf_r+0x1ec>)
 800bc6e:	bb1b      	cbnz	r3, 800bcb8 <_svfiprintf_r+0x1b0>
 800bc70:	9b03      	ldr	r3, [sp, #12]
 800bc72:	3307      	adds	r3, #7
 800bc74:	f023 0307 	bic.w	r3, r3, #7
 800bc78:	3308      	adds	r3, #8
 800bc7a:	9303      	str	r3, [sp, #12]
 800bc7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc7e:	4433      	add	r3, r6
 800bc80:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc82:	e76a      	b.n	800bb5a <_svfiprintf_r+0x52>
 800bc84:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc88:	460c      	mov	r4, r1
 800bc8a:	2001      	movs	r0, #1
 800bc8c:	e7a8      	b.n	800bbe0 <_svfiprintf_r+0xd8>
 800bc8e:	2300      	movs	r3, #0
 800bc90:	3401      	adds	r4, #1
 800bc92:	9305      	str	r3, [sp, #20]
 800bc94:	4619      	mov	r1, r3
 800bc96:	f04f 0c0a 	mov.w	ip, #10
 800bc9a:	4620      	mov	r0, r4
 800bc9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bca0:	3a30      	subs	r2, #48	@ 0x30
 800bca2:	2a09      	cmp	r2, #9
 800bca4:	d903      	bls.n	800bcae <_svfiprintf_r+0x1a6>
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d0c6      	beq.n	800bc38 <_svfiprintf_r+0x130>
 800bcaa:	9105      	str	r1, [sp, #20]
 800bcac:	e7c4      	b.n	800bc38 <_svfiprintf_r+0x130>
 800bcae:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcb2:	4604      	mov	r4, r0
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	e7f0      	b.n	800bc9a <_svfiprintf_r+0x192>
 800bcb8:	ab03      	add	r3, sp, #12
 800bcba:	9300      	str	r3, [sp, #0]
 800bcbc:	462a      	mov	r2, r5
 800bcbe:	4b0e      	ldr	r3, [pc, #56]	@ (800bcf8 <_svfiprintf_r+0x1f0>)
 800bcc0:	a904      	add	r1, sp, #16
 800bcc2:	4638      	mov	r0, r7
 800bcc4:	f7fe fba4 	bl	800a410 <_printf_float>
 800bcc8:	1c42      	adds	r2, r0, #1
 800bcca:	4606      	mov	r6, r0
 800bccc:	d1d6      	bne.n	800bc7c <_svfiprintf_r+0x174>
 800bcce:	89ab      	ldrh	r3, [r5, #12]
 800bcd0:	065b      	lsls	r3, r3, #25
 800bcd2:	f53f af2d 	bmi.w	800bb30 <_svfiprintf_r+0x28>
 800bcd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bcd8:	e72c      	b.n	800bb34 <_svfiprintf_r+0x2c>
 800bcda:	ab03      	add	r3, sp, #12
 800bcdc:	9300      	str	r3, [sp, #0]
 800bcde:	462a      	mov	r2, r5
 800bce0:	4b05      	ldr	r3, [pc, #20]	@ (800bcf8 <_svfiprintf_r+0x1f0>)
 800bce2:	a904      	add	r1, sp, #16
 800bce4:	4638      	mov	r0, r7
 800bce6:	f7fe fe2b 	bl	800a940 <_printf_i>
 800bcea:	e7ed      	b.n	800bcc8 <_svfiprintf_r+0x1c0>
 800bcec:	0800d129 	.word	0x0800d129
 800bcf0:	0800d133 	.word	0x0800d133
 800bcf4:	0800a411 	.word	0x0800a411
 800bcf8:	0800ba51 	.word	0x0800ba51
 800bcfc:	0800d12f 	.word	0x0800d12f

0800bd00 <malloc>:
 800bd00:	4b02      	ldr	r3, [pc, #8]	@ (800bd0c <malloc+0xc>)
 800bd02:	4601      	mov	r1, r0
 800bd04:	6818      	ldr	r0, [r3, #0]
 800bd06:	f000 b825 	b.w	800bd54 <_malloc_r>
 800bd0a:	bf00      	nop
 800bd0c:	20000114 	.word	0x20000114

0800bd10 <sbrk_aligned>:
 800bd10:	b570      	push	{r4, r5, r6, lr}
 800bd12:	4e0f      	ldr	r6, [pc, #60]	@ (800bd50 <sbrk_aligned+0x40>)
 800bd14:	460c      	mov	r4, r1
 800bd16:	6831      	ldr	r1, [r6, #0]
 800bd18:	4605      	mov	r5, r0
 800bd1a:	b911      	cbnz	r1, 800bd22 <sbrk_aligned+0x12>
 800bd1c:	f000 fd94 	bl	800c848 <_sbrk_r>
 800bd20:	6030      	str	r0, [r6, #0]
 800bd22:	4621      	mov	r1, r4
 800bd24:	4628      	mov	r0, r5
 800bd26:	f000 fd8f 	bl	800c848 <_sbrk_r>
 800bd2a:	1c43      	adds	r3, r0, #1
 800bd2c:	d103      	bne.n	800bd36 <sbrk_aligned+0x26>
 800bd2e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bd32:	4620      	mov	r0, r4
 800bd34:	bd70      	pop	{r4, r5, r6, pc}
 800bd36:	1cc4      	adds	r4, r0, #3
 800bd38:	f024 0403 	bic.w	r4, r4, #3
 800bd3c:	42a0      	cmp	r0, r4
 800bd3e:	d0f8      	beq.n	800bd32 <sbrk_aligned+0x22>
 800bd40:	1a21      	subs	r1, r4, r0
 800bd42:	4628      	mov	r0, r5
 800bd44:	f000 fd80 	bl	800c848 <_sbrk_r>
 800bd48:	3001      	adds	r0, #1
 800bd4a:	d1f2      	bne.n	800bd32 <sbrk_aligned+0x22>
 800bd4c:	e7ef      	b.n	800bd2e <sbrk_aligned+0x1e>
 800bd4e:	bf00      	nop
 800bd50:	20002308 	.word	0x20002308

0800bd54 <_malloc_r>:
 800bd54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd58:	1ccd      	adds	r5, r1, #3
 800bd5a:	f025 0503 	bic.w	r5, r5, #3
 800bd5e:	3508      	adds	r5, #8
 800bd60:	2d0c      	cmp	r5, #12
 800bd62:	bf38      	it	cc
 800bd64:	250c      	movcc	r5, #12
 800bd66:	2d00      	cmp	r5, #0
 800bd68:	4606      	mov	r6, r0
 800bd6a:	db01      	blt.n	800bd70 <_malloc_r+0x1c>
 800bd6c:	42a9      	cmp	r1, r5
 800bd6e:	d904      	bls.n	800bd7a <_malloc_r+0x26>
 800bd70:	230c      	movs	r3, #12
 800bd72:	6033      	str	r3, [r6, #0]
 800bd74:	2000      	movs	r0, #0
 800bd76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800be50 <_malloc_r+0xfc>
 800bd7e:	f000 f915 	bl	800bfac <__malloc_lock>
 800bd82:	f8d8 3000 	ldr.w	r3, [r8]
 800bd86:	461c      	mov	r4, r3
 800bd88:	bb44      	cbnz	r4, 800bddc <_malloc_r+0x88>
 800bd8a:	4629      	mov	r1, r5
 800bd8c:	4630      	mov	r0, r6
 800bd8e:	f7ff ffbf 	bl	800bd10 <sbrk_aligned>
 800bd92:	1c43      	adds	r3, r0, #1
 800bd94:	4604      	mov	r4, r0
 800bd96:	d158      	bne.n	800be4a <_malloc_r+0xf6>
 800bd98:	f8d8 4000 	ldr.w	r4, [r8]
 800bd9c:	4627      	mov	r7, r4
 800bd9e:	2f00      	cmp	r7, #0
 800bda0:	d143      	bne.n	800be2a <_malloc_r+0xd6>
 800bda2:	2c00      	cmp	r4, #0
 800bda4:	d04b      	beq.n	800be3e <_malloc_r+0xea>
 800bda6:	6823      	ldr	r3, [r4, #0]
 800bda8:	4639      	mov	r1, r7
 800bdaa:	4630      	mov	r0, r6
 800bdac:	eb04 0903 	add.w	r9, r4, r3
 800bdb0:	f000 fd4a 	bl	800c848 <_sbrk_r>
 800bdb4:	4581      	cmp	r9, r0
 800bdb6:	d142      	bne.n	800be3e <_malloc_r+0xea>
 800bdb8:	6821      	ldr	r1, [r4, #0]
 800bdba:	1a6d      	subs	r5, r5, r1
 800bdbc:	4629      	mov	r1, r5
 800bdbe:	4630      	mov	r0, r6
 800bdc0:	f7ff ffa6 	bl	800bd10 <sbrk_aligned>
 800bdc4:	3001      	adds	r0, #1
 800bdc6:	d03a      	beq.n	800be3e <_malloc_r+0xea>
 800bdc8:	6823      	ldr	r3, [r4, #0]
 800bdca:	442b      	add	r3, r5
 800bdcc:	6023      	str	r3, [r4, #0]
 800bdce:	f8d8 3000 	ldr.w	r3, [r8]
 800bdd2:	685a      	ldr	r2, [r3, #4]
 800bdd4:	bb62      	cbnz	r2, 800be30 <_malloc_r+0xdc>
 800bdd6:	f8c8 7000 	str.w	r7, [r8]
 800bdda:	e00f      	b.n	800bdfc <_malloc_r+0xa8>
 800bddc:	6822      	ldr	r2, [r4, #0]
 800bdde:	1b52      	subs	r2, r2, r5
 800bde0:	d420      	bmi.n	800be24 <_malloc_r+0xd0>
 800bde2:	2a0b      	cmp	r2, #11
 800bde4:	d917      	bls.n	800be16 <_malloc_r+0xc2>
 800bde6:	1961      	adds	r1, r4, r5
 800bde8:	42a3      	cmp	r3, r4
 800bdea:	6025      	str	r5, [r4, #0]
 800bdec:	bf18      	it	ne
 800bdee:	6059      	strne	r1, [r3, #4]
 800bdf0:	6863      	ldr	r3, [r4, #4]
 800bdf2:	bf08      	it	eq
 800bdf4:	f8c8 1000 	streq.w	r1, [r8]
 800bdf8:	5162      	str	r2, [r4, r5]
 800bdfa:	604b      	str	r3, [r1, #4]
 800bdfc:	4630      	mov	r0, r6
 800bdfe:	f000 f8db 	bl	800bfb8 <__malloc_unlock>
 800be02:	f104 000b 	add.w	r0, r4, #11
 800be06:	1d23      	adds	r3, r4, #4
 800be08:	f020 0007 	bic.w	r0, r0, #7
 800be0c:	1ac2      	subs	r2, r0, r3
 800be0e:	bf1c      	itt	ne
 800be10:	1a1b      	subne	r3, r3, r0
 800be12:	50a3      	strne	r3, [r4, r2]
 800be14:	e7af      	b.n	800bd76 <_malloc_r+0x22>
 800be16:	6862      	ldr	r2, [r4, #4]
 800be18:	42a3      	cmp	r3, r4
 800be1a:	bf0c      	ite	eq
 800be1c:	f8c8 2000 	streq.w	r2, [r8]
 800be20:	605a      	strne	r2, [r3, #4]
 800be22:	e7eb      	b.n	800bdfc <_malloc_r+0xa8>
 800be24:	4623      	mov	r3, r4
 800be26:	6864      	ldr	r4, [r4, #4]
 800be28:	e7ae      	b.n	800bd88 <_malloc_r+0x34>
 800be2a:	463c      	mov	r4, r7
 800be2c:	687f      	ldr	r7, [r7, #4]
 800be2e:	e7b6      	b.n	800bd9e <_malloc_r+0x4a>
 800be30:	461a      	mov	r2, r3
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	42a3      	cmp	r3, r4
 800be36:	d1fb      	bne.n	800be30 <_malloc_r+0xdc>
 800be38:	2300      	movs	r3, #0
 800be3a:	6053      	str	r3, [r2, #4]
 800be3c:	e7de      	b.n	800bdfc <_malloc_r+0xa8>
 800be3e:	230c      	movs	r3, #12
 800be40:	6033      	str	r3, [r6, #0]
 800be42:	4630      	mov	r0, r6
 800be44:	f000 f8b8 	bl	800bfb8 <__malloc_unlock>
 800be48:	e794      	b.n	800bd74 <_malloc_r+0x20>
 800be4a:	6005      	str	r5, [r0, #0]
 800be4c:	e7d6      	b.n	800bdfc <_malloc_r+0xa8>
 800be4e:	bf00      	nop
 800be50:	2000230c 	.word	0x2000230c

0800be54 <__sflush_r>:
 800be54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be5c:	0716      	lsls	r6, r2, #28
 800be5e:	4605      	mov	r5, r0
 800be60:	460c      	mov	r4, r1
 800be62:	d454      	bmi.n	800bf0e <__sflush_r+0xba>
 800be64:	684b      	ldr	r3, [r1, #4]
 800be66:	2b00      	cmp	r3, #0
 800be68:	dc02      	bgt.n	800be70 <__sflush_r+0x1c>
 800be6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	dd48      	ble.n	800bf02 <__sflush_r+0xae>
 800be70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be72:	2e00      	cmp	r6, #0
 800be74:	d045      	beq.n	800bf02 <__sflush_r+0xae>
 800be76:	2300      	movs	r3, #0
 800be78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800be7c:	682f      	ldr	r7, [r5, #0]
 800be7e:	6a21      	ldr	r1, [r4, #32]
 800be80:	602b      	str	r3, [r5, #0]
 800be82:	d030      	beq.n	800bee6 <__sflush_r+0x92>
 800be84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be86:	89a3      	ldrh	r3, [r4, #12]
 800be88:	0759      	lsls	r1, r3, #29
 800be8a:	d505      	bpl.n	800be98 <__sflush_r+0x44>
 800be8c:	6863      	ldr	r3, [r4, #4]
 800be8e:	1ad2      	subs	r2, r2, r3
 800be90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be92:	b10b      	cbz	r3, 800be98 <__sflush_r+0x44>
 800be94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be96:	1ad2      	subs	r2, r2, r3
 800be98:	2300      	movs	r3, #0
 800be9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be9c:	6a21      	ldr	r1, [r4, #32]
 800be9e:	4628      	mov	r0, r5
 800bea0:	47b0      	blx	r6
 800bea2:	1c43      	adds	r3, r0, #1
 800bea4:	89a3      	ldrh	r3, [r4, #12]
 800bea6:	d106      	bne.n	800beb6 <__sflush_r+0x62>
 800bea8:	6829      	ldr	r1, [r5, #0]
 800beaa:	291d      	cmp	r1, #29
 800beac:	d82b      	bhi.n	800bf06 <__sflush_r+0xb2>
 800beae:	4a2a      	ldr	r2, [pc, #168]	@ (800bf58 <__sflush_r+0x104>)
 800beb0:	410a      	asrs	r2, r1
 800beb2:	07d6      	lsls	r6, r2, #31
 800beb4:	d427      	bmi.n	800bf06 <__sflush_r+0xb2>
 800beb6:	2200      	movs	r2, #0
 800beb8:	6062      	str	r2, [r4, #4]
 800beba:	04d9      	lsls	r1, r3, #19
 800bebc:	6922      	ldr	r2, [r4, #16]
 800bebe:	6022      	str	r2, [r4, #0]
 800bec0:	d504      	bpl.n	800becc <__sflush_r+0x78>
 800bec2:	1c42      	adds	r2, r0, #1
 800bec4:	d101      	bne.n	800beca <__sflush_r+0x76>
 800bec6:	682b      	ldr	r3, [r5, #0]
 800bec8:	b903      	cbnz	r3, 800becc <__sflush_r+0x78>
 800beca:	6560      	str	r0, [r4, #84]	@ 0x54
 800becc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bece:	602f      	str	r7, [r5, #0]
 800bed0:	b1b9      	cbz	r1, 800bf02 <__sflush_r+0xae>
 800bed2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bed6:	4299      	cmp	r1, r3
 800bed8:	d002      	beq.n	800bee0 <__sflush_r+0x8c>
 800beda:	4628      	mov	r0, r5
 800bedc:	f000 fd16 	bl	800c90c <_free_r>
 800bee0:	2300      	movs	r3, #0
 800bee2:	6363      	str	r3, [r4, #52]	@ 0x34
 800bee4:	e00d      	b.n	800bf02 <__sflush_r+0xae>
 800bee6:	2301      	movs	r3, #1
 800bee8:	4628      	mov	r0, r5
 800beea:	47b0      	blx	r6
 800beec:	4602      	mov	r2, r0
 800beee:	1c50      	adds	r0, r2, #1
 800bef0:	d1c9      	bne.n	800be86 <__sflush_r+0x32>
 800bef2:	682b      	ldr	r3, [r5, #0]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d0c6      	beq.n	800be86 <__sflush_r+0x32>
 800bef8:	2b1d      	cmp	r3, #29
 800befa:	d001      	beq.n	800bf00 <__sflush_r+0xac>
 800befc:	2b16      	cmp	r3, #22
 800befe:	d11e      	bne.n	800bf3e <__sflush_r+0xea>
 800bf00:	602f      	str	r7, [r5, #0]
 800bf02:	2000      	movs	r0, #0
 800bf04:	e022      	b.n	800bf4c <__sflush_r+0xf8>
 800bf06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf0a:	b21b      	sxth	r3, r3
 800bf0c:	e01b      	b.n	800bf46 <__sflush_r+0xf2>
 800bf0e:	690f      	ldr	r7, [r1, #16]
 800bf10:	2f00      	cmp	r7, #0
 800bf12:	d0f6      	beq.n	800bf02 <__sflush_r+0xae>
 800bf14:	0793      	lsls	r3, r2, #30
 800bf16:	680e      	ldr	r6, [r1, #0]
 800bf18:	bf08      	it	eq
 800bf1a:	694b      	ldreq	r3, [r1, #20]
 800bf1c:	600f      	str	r7, [r1, #0]
 800bf1e:	bf18      	it	ne
 800bf20:	2300      	movne	r3, #0
 800bf22:	eba6 0807 	sub.w	r8, r6, r7
 800bf26:	608b      	str	r3, [r1, #8]
 800bf28:	f1b8 0f00 	cmp.w	r8, #0
 800bf2c:	dde9      	ble.n	800bf02 <__sflush_r+0xae>
 800bf2e:	6a21      	ldr	r1, [r4, #32]
 800bf30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bf32:	4643      	mov	r3, r8
 800bf34:	463a      	mov	r2, r7
 800bf36:	4628      	mov	r0, r5
 800bf38:	47b0      	blx	r6
 800bf3a:	2800      	cmp	r0, #0
 800bf3c:	dc08      	bgt.n	800bf50 <__sflush_r+0xfc>
 800bf3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf46:	81a3      	strh	r3, [r4, #12]
 800bf48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bf4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf50:	4407      	add	r7, r0
 800bf52:	eba8 0800 	sub.w	r8, r8, r0
 800bf56:	e7e7      	b.n	800bf28 <__sflush_r+0xd4>
 800bf58:	dfbffffe 	.word	0xdfbffffe

0800bf5c <_fflush_r>:
 800bf5c:	b538      	push	{r3, r4, r5, lr}
 800bf5e:	690b      	ldr	r3, [r1, #16]
 800bf60:	4605      	mov	r5, r0
 800bf62:	460c      	mov	r4, r1
 800bf64:	b913      	cbnz	r3, 800bf6c <_fflush_r+0x10>
 800bf66:	2500      	movs	r5, #0
 800bf68:	4628      	mov	r0, r5
 800bf6a:	bd38      	pop	{r3, r4, r5, pc}
 800bf6c:	b118      	cbz	r0, 800bf76 <_fflush_r+0x1a>
 800bf6e:	6a03      	ldr	r3, [r0, #32]
 800bf70:	b90b      	cbnz	r3, 800bf76 <_fflush_r+0x1a>
 800bf72:	f7fe feb1 	bl	800acd8 <__sinit>
 800bf76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d0f3      	beq.n	800bf66 <_fflush_r+0xa>
 800bf7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf80:	07d0      	lsls	r0, r2, #31
 800bf82:	d404      	bmi.n	800bf8e <_fflush_r+0x32>
 800bf84:	0599      	lsls	r1, r3, #22
 800bf86:	d402      	bmi.n	800bf8e <_fflush_r+0x32>
 800bf88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf8a:	f7fe ff12 	bl	800adb2 <__retarget_lock_acquire_recursive>
 800bf8e:	4628      	mov	r0, r5
 800bf90:	4621      	mov	r1, r4
 800bf92:	f7ff ff5f 	bl	800be54 <__sflush_r>
 800bf96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf98:	07da      	lsls	r2, r3, #31
 800bf9a:	4605      	mov	r5, r0
 800bf9c:	d4e4      	bmi.n	800bf68 <_fflush_r+0xc>
 800bf9e:	89a3      	ldrh	r3, [r4, #12]
 800bfa0:	059b      	lsls	r3, r3, #22
 800bfa2:	d4e1      	bmi.n	800bf68 <_fflush_r+0xc>
 800bfa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfa6:	f7fe ff05 	bl	800adb4 <__retarget_lock_release_recursive>
 800bfaa:	e7dd      	b.n	800bf68 <_fflush_r+0xc>

0800bfac <__malloc_lock>:
 800bfac:	4801      	ldr	r0, [pc, #4]	@ (800bfb4 <__malloc_lock+0x8>)
 800bfae:	f7fe bf00 	b.w	800adb2 <__retarget_lock_acquire_recursive>
 800bfb2:	bf00      	nop
 800bfb4:	20002304 	.word	0x20002304

0800bfb8 <__malloc_unlock>:
 800bfb8:	4801      	ldr	r0, [pc, #4]	@ (800bfc0 <__malloc_unlock+0x8>)
 800bfba:	f7fe befb 	b.w	800adb4 <__retarget_lock_release_recursive>
 800bfbe:	bf00      	nop
 800bfc0:	20002304 	.word	0x20002304

0800bfc4 <_Balloc>:
 800bfc4:	b570      	push	{r4, r5, r6, lr}
 800bfc6:	69c6      	ldr	r6, [r0, #28]
 800bfc8:	4604      	mov	r4, r0
 800bfca:	460d      	mov	r5, r1
 800bfcc:	b976      	cbnz	r6, 800bfec <_Balloc+0x28>
 800bfce:	2010      	movs	r0, #16
 800bfd0:	f7ff fe96 	bl	800bd00 <malloc>
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	61e0      	str	r0, [r4, #28]
 800bfd8:	b920      	cbnz	r0, 800bfe4 <_Balloc+0x20>
 800bfda:	4b18      	ldr	r3, [pc, #96]	@ (800c03c <_Balloc+0x78>)
 800bfdc:	4818      	ldr	r0, [pc, #96]	@ (800c040 <_Balloc+0x7c>)
 800bfde:	216b      	movs	r1, #107	@ 0x6b
 800bfe0:	f000 fc62 	bl	800c8a8 <__assert_func>
 800bfe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bfe8:	6006      	str	r6, [r0, #0]
 800bfea:	60c6      	str	r6, [r0, #12]
 800bfec:	69e6      	ldr	r6, [r4, #28]
 800bfee:	68f3      	ldr	r3, [r6, #12]
 800bff0:	b183      	cbz	r3, 800c014 <_Balloc+0x50>
 800bff2:	69e3      	ldr	r3, [r4, #28]
 800bff4:	68db      	ldr	r3, [r3, #12]
 800bff6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bffa:	b9b8      	cbnz	r0, 800c02c <_Balloc+0x68>
 800bffc:	2101      	movs	r1, #1
 800bffe:	fa01 f605 	lsl.w	r6, r1, r5
 800c002:	1d72      	adds	r2, r6, #5
 800c004:	0092      	lsls	r2, r2, #2
 800c006:	4620      	mov	r0, r4
 800c008:	f000 fc6c 	bl	800c8e4 <_calloc_r>
 800c00c:	b160      	cbz	r0, 800c028 <_Balloc+0x64>
 800c00e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c012:	e00e      	b.n	800c032 <_Balloc+0x6e>
 800c014:	2221      	movs	r2, #33	@ 0x21
 800c016:	2104      	movs	r1, #4
 800c018:	4620      	mov	r0, r4
 800c01a:	f000 fc63 	bl	800c8e4 <_calloc_r>
 800c01e:	69e3      	ldr	r3, [r4, #28]
 800c020:	60f0      	str	r0, [r6, #12]
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d1e4      	bne.n	800bff2 <_Balloc+0x2e>
 800c028:	2000      	movs	r0, #0
 800c02a:	bd70      	pop	{r4, r5, r6, pc}
 800c02c:	6802      	ldr	r2, [r0, #0]
 800c02e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c032:	2300      	movs	r3, #0
 800c034:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c038:	e7f7      	b.n	800c02a <_Balloc+0x66>
 800c03a:	bf00      	nop
 800c03c:	0800d0a9 	.word	0x0800d0a9
 800c040:	0800d13a 	.word	0x0800d13a

0800c044 <_Bfree>:
 800c044:	b570      	push	{r4, r5, r6, lr}
 800c046:	69c6      	ldr	r6, [r0, #28]
 800c048:	4605      	mov	r5, r0
 800c04a:	460c      	mov	r4, r1
 800c04c:	b976      	cbnz	r6, 800c06c <_Bfree+0x28>
 800c04e:	2010      	movs	r0, #16
 800c050:	f7ff fe56 	bl	800bd00 <malloc>
 800c054:	4602      	mov	r2, r0
 800c056:	61e8      	str	r0, [r5, #28]
 800c058:	b920      	cbnz	r0, 800c064 <_Bfree+0x20>
 800c05a:	4b09      	ldr	r3, [pc, #36]	@ (800c080 <_Bfree+0x3c>)
 800c05c:	4809      	ldr	r0, [pc, #36]	@ (800c084 <_Bfree+0x40>)
 800c05e:	218f      	movs	r1, #143	@ 0x8f
 800c060:	f000 fc22 	bl	800c8a8 <__assert_func>
 800c064:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c068:	6006      	str	r6, [r0, #0]
 800c06a:	60c6      	str	r6, [r0, #12]
 800c06c:	b13c      	cbz	r4, 800c07e <_Bfree+0x3a>
 800c06e:	69eb      	ldr	r3, [r5, #28]
 800c070:	6862      	ldr	r2, [r4, #4]
 800c072:	68db      	ldr	r3, [r3, #12]
 800c074:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c078:	6021      	str	r1, [r4, #0]
 800c07a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c07e:	bd70      	pop	{r4, r5, r6, pc}
 800c080:	0800d0a9 	.word	0x0800d0a9
 800c084:	0800d13a 	.word	0x0800d13a

0800c088 <__multadd>:
 800c088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c08c:	690d      	ldr	r5, [r1, #16]
 800c08e:	4607      	mov	r7, r0
 800c090:	460c      	mov	r4, r1
 800c092:	461e      	mov	r6, r3
 800c094:	f101 0c14 	add.w	ip, r1, #20
 800c098:	2000      	movs	r0, #0
 800c09a:	f8dc 3000 	ldr.w	r3, [ip]
 800c09e:	b299      	uxth	r1, r3
 800c0a0:	fb02 6101 	mla	r1, r2, r1, r6
 800c0a4:	0c1e      	lsrs	r6, r3, #16
 800c0a6:	0c0b      	lsrs	r3, r1, #16
 800c0a8:	fb02 3306 	mla	r3, r2, r6, r3
 800c0ac:	b289      	uxth	r1, r1
 800c0ae:	3001      	adds	r0, #1
 800c0b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c0b4:	4285      	cmp	r5, r0
 800c0b6:	f84c 1b04 	str.w	r1, [ip], #4
 800c0ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c0be:	dcec      	bgt.n	800c09a <__multadd+0x12>
 800c0c0:	b30e      	cbz	r6, 800c106 <__multadd+0x7e>
 800c0c2:	68a3      	ldr	r3, [r4, #8]
 800c0c4:	42ab      	cmp	r3, r5
 800c0c6:	dc19      	bgt.n	800c0fc <__multadd+0x74>
 800c0c8:	6861      	ldr	r1, [r4, #4]
 800c0ca:	4638      	mov	r0, r7
 800c0cc:	3101      	adds	r1, #1
 800c0ce:	f7ff ff79 	bl	800bfc4 <_Balloc>
 800c0d2:	4680      	mov	r8, r0
 800c0d4:	b928      	cbnz	r0, 800c0e2 <__multadd+0x5a>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	4b0c      	ldr	r3, [pc, #48]	@ (800c10c <__multadd+0x84>)
 800c0da:	480d      	ldr	r0, [pc, #52]	@ (800c110 <__multadd+0x88>)
 800c0dc:	21ba      	movs	r1, #186	@ 0xba
 800c0de:	f000 fbe3 	bl	800c8a8 <__assert_func>
 800c0e2:	6922      	ldr	r2, [r4, #16]
 800c0e4:	3202      	adds	r2, #2
 800c0e6:	f104 010c 	add.w	r1, r4, #12
 800c0ea:	0092      	lsls	r2, r2, #2
 800c0ec:	300c      	adds	r0, #12
 800c0ee:	f000 fbcd 	bl	800c88c <memcpy>
 800c0f2:	4621      	mov	r1, r4
 800c0f4:	4638      	mov	r0, r7
 800c0f6:	f7ff ffa5 	bl	800c044 <_Bfree>
 800c0fa:	4644      	mov	r4, r8
 800c0fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c100:	3501      	adds	r5, #1
 800c102:	615e      	str	r6, [r3, #20]
 800c104:	6125      	str	r5, [r4, #16]
 800c106:	4620      	mov	r0, r4
 800c108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c10c:	0800d118 	.word	0x0800d118
 800c110:	0800d13a 	.word	0x0800d13a

0800c114 <__hi0bits>:
 800c114:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c118:	4603      	mov	r3, r0
 800c11a:	bf36      	itet	cc
 800c11c:	0403      	lslcc	r3, r0, #16
 800c11e:	2000      	movcs	r0, #0
 800c120:	2010      	movcc	r0, #16
 800c122:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c126:	bf3c      	itt	cc
 800c128:	021b      	lslcc	r3, r3, #8
 800c12a:	3008      	addcc	r0, #8
 800c12c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c130:	bf3c      	itt	cc
 800c132:	011b      	lslcc	r3, r3, #4
 800c134:	3004      	addcc	r0, #4
 800c136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c13a:	bf3c      	itt	cc
 800c13c:	009b      	lslcc	r3, r3, #2
 800c13e:	3002      	addcc	r0, #2
 800c140:	2b00      	cmp	r3, #0
 800c142:	db05      	blt.n	800c150 <__hi0bits+0x3c>
 800c144:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c148:	f100 0001 	add.w	r0, r0, #1
 800c14c:	bf08      	it	eq
 800c14e:	2020      	moveq	r0, #32
 800c150:	4770      	bx	lr

0800c152 <__lo0bits>:
 800c152:	6803      	ldr	r3, [r0, #0]
 800c154:	4602      	mov	r2, r0
 800c156:	f013 0007 	ands.w	r0, r3, #7
 800c15a:	d00b      	beq.n	800c174 <__lo0bits+0x22>
 800c15c:	07d9      	lsls	r1, r3, #31
 800c15e:	d421      	bmi.n	800c1a4 <__lo0bits+0x52>
 800c160:	0798      	lsls	r0, r3, #30
 800c162:	bf49      	itett	mi
 800c164:	085b      	lsrmi	r3, r3, #1
 800c166:	089b      	lsrpl	r3, r3, #2
 800c168:	2001      	movmi	r0, #1
 800c16a:	6013      	strmi	r3, [r2, #0]
 800c16c:	bf5c      	itt	pl
 800c16e:	6013      	strpl	r3, [r2, #0]
 800c170:	2002      	movpl	r0, #2
 800c172:	4770      	bx	lr
 800c174:	b299      	uxth	r1, r3
 800c176:	b909      	cbnz	r1, 800c17c <__lo0bits+0x2a>
 800c178:	0c1b      	lsrs	r3, r3, #16
 800c17a:	2010      	movs	r0, #16
 800c17c:	b2d9      	uxtb	r1, r3
 800c17e:	b909      	cbnz	r1, 800c184 <__lo0bits+0x32>
 800c180:	3008      	adds	r0, #8
 800c182:	0a1b      	lsrs	r3, r3, #8
 800c184:	0719      	lsls	r1, r3, #28
 800c186:	bf04      	itt	eq
 800c188:	091b      	lsreq	r3, r3, #4
 800c18a:	3004      	addeq	r0, #4
 800c18c:	0799      	lsls	r1, r3, #30
 800c18e:	bf04      	itt	eq
 800c190:	089b      	lsreq	r3, r3, #2
 800c192:	3002      	addeq	r0, #2
 800c194:	07d9      	lsls	r1, r3, #31
 800c196:	d403      	bmi.n	800c1a0 <__lo0bits+0x4e>
 800c198:	085b      	lsrs	r3, r3, #1
 800c19a:	f100 0001 	add.w	r0, r0, #1
 800c19e:	d003      	beq.n	800c1a8 <__lo0bits+0x56>
 800c1a0:	6013      	str	r3, [r2, #0]
 800c1a2:	4770      	bx	lr
 800c1a4:	2000      	movs	r0, #0
 800c1a6:	4770      	bx	lr
 800c1a8:	2020      	movs	r0, #32
 800c1aa:	4770      	bx	lr

0800c1ac <__i2b>:
 800c1ac:	b510      	push	{r4, lr}
 800c1ae:	460c      	mov	r4, r1
 800c1b0:	2101      	movs	r1, #1
 800c1b2:	f7ff ff07 	bl	800bfc4 <_Balloc>
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	b928      	cbnz	r0, 800c1c6 <__i2b+0x1a>
 800c1ba:	4b05      	ldr	r3, [pc, #20]	@ (800c1d0 <__i2b+0x24>)
 800c1bc:	4805      	ldr	r0, [pc, #20]	@ (800c1d4 <__i2b+0x28>)
 800c1be:	f240 1145 	movw	r1, #325	@ 0x145
 800c1c2:	f000 fb71 	bl	800c8a8 <__assert_func>
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	6144      	str	r4, [r0, #20]
 800c1ca:	6103      	str	r3, [r0, #16]
 800c1cc:	bd10      	pop	{r4, pc}
 800c1ce:	bf00      	nop
 800c1d0:	0800d118 	.word	0x0800d118
 800c1d4:	0800d13a 	.word	0x0800d13a

0800c1d8 <__multiply>:
 800c1d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1dc:	4614      	mov	r4, r2
 800c1de:	690a      	ldr	r2, [r1, #16]
 800c1e0:	6923      	ldr	r3, [r4, #16]
 800c1e2:	429a      	cmp	r2, r3
 800c1e4:	bfa8      	it	ge
 800c1e6:	4623      	movge	r3, r4
 800c1e8:	460f      	mov	r7, r1
 800c1ea:	bfa4      	itt	ge
 800c1ec:	460c      	movge	r4, r1
 800c1ee:	461f      	movge	r7, r3
 800c1f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c1f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c1f8:	68a3      	ldr	r3, [r4, #8]
 800c1fa:	6861      	ldr	r1, [r4, #4]
 800c1fc:	eb0a 0609 	add.w	r6, sl, r9
 800c200:	42b3      	cmp	r3, r6
 800c202:	b085      	sub	sp, #20
 800c204:	bfb8      	it	lt
 800c206:	3101      	addlt	r1, #1
 800c208:	f7ff fedc 	bl	800bfc4 <_Balloc>
 800c20c:	b930      	cbnz	r0, 800c21c <__multiply+0x44>
 800c20e:	4602      	mov	r2, r0
 800c210:	4b44      	ldr	r3, [pc, #272]	@ (800c324 <__multiply+0x14c>)
 800c212:	4845      	ldr	r0, [pc, #276]	@ (800c328 <__multiply+0x150>)
 800c214:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c218:	f000 fb46 	bl	800c8a8 <__assert_func>
 800c21c:	f100 0514 	add.w	r5, r0, #20
 800c220:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c224:	462b      	mov	r3, r5
 800c226:	2200      	movs	r2, #0
 800c228:	4543      	cmp	r3, r8
 800c22a:	d321      	bcc.n	800c270 <__multiply+0x98>
 800c22c:	f107 0114 	add.w	r1, r7, #20
 800c230:	f104 0214 	add.w	r2, r4, #20
 800c234:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c238:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c23c:	9302      	str	r3, [sp, #8]
 800c23e:	1b13      	subs	r3, r2, r4
 800c240:	3b15      	subs	r3, #21
 800c242:	f023 0303 	bic.w	r3, r3, #3
 800c246:	3304      	adds	r3, #4
 800c248:	f104 0715 	add.w	r7, r4, #21
 800c24c:	42ba      	cmp	r2, r7
 800c24e:	bf38      	it	cc
 800c250:	2304      	movcc	r3, #4
 800c252:	9301      	str	r3, [sp, #4]
 800c254:	9b02      	ldr	r3, [sp, #8]
 800c256:	9103      	str	r1, [sp, #12]
 800c258:	428b      	cmp	r3, r1
 800c25a:	d80c      	bhi.n	800c276 <__multiply+0x9e>
 800c25c:	2e00      	cmp	r6, #0
 800c25e:	dd03      	ble.n	800c268 <__multiply+0x90>
 800c260:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c264:	2b00      	cmp	r3, #0
 800c266:	d05b      	beq.n	800c320 <__multiply+0x148>
 800c268:	6106      	str	r6, [r0, #16]
 800c26a:	b005      	add	sp, #20
 800c26c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c270:	f843 2b04 	str.w	r2, [r3], #4
 800c274:	e7d8      	b.n	800c228 <__multiply+0x50>
 800c276:	f8b1 a000 	ldrh.w	sl, [r1]
 800c27a:	f1ba 0f00 	cmp.w	sl, #0
 800c27e:	d024      	beq.n	800c2ca <__multiply+0xf2>
 800c280:	f104 0e14 	add.w	lr, r4, #20
 800c284:	46a9      	mov	r9, r5
 800c286:	f04f 0c00 	mov.w	ip, #0
 800c28a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c28e:	f8d9 3000 	ldr.w	r3, [r9]
 800c292:	fa1f fb87 	uxth.w	fp, r7
 800c296:	b29b      	uxth	r3, r3
 800c298:	fb0a 330b 	mla	r3, sl, fp, r3
 800c29c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c2a0:	f8d9 7000 	ldr.w	r7, [r9]
 800c2a4:	4463      	add	r3, ip
 800c2a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c2aa:	fb0a c70b 	mla	r7, sl, fp, ip
 800c2ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c2b2:	b29b      	uxth	r3, r3
 800c2b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c2b8:	4572      	cmp	r2, lr
 800c2ba:	f849 3b04 	str.w	r3, [r9], #4
 800c2be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c2c2:	d8e2      	bhi.n	800c28a <__multiply+0xb2>
 800c2c4:	9b01      	ldr	r3, [sp, #4]
 800c2c6:	f845 c003 	str.w	ip, [r5, r3]
 800c2ca:	9b03      	ldr	r3, [sp, #12]
 800c2cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c2d0:	3104      	adds	r1, #4
 800c2d2:	f1b9 0f00 	cmp.w	r9, #0
 800c2d6:	d021      	beq.n	800c31c <__multiply+0x144>
 800c2d8:	682b      	ldr	r3, [r5, #0]
 800c2da:	f104 0c14 	add.w	ip, r4, #20
 800c2de:	46ae      	mov	lr, r5
 800c2e0:	f04f 0a00 	mov.w	sl, #0
 800c2e4:	f8bc b000 	ldrh.w	fp, [ip]
 800c2e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c2ec:	fb09 770b 	mla	r7, r9, fp, r7
 800c2f0:	4457      	add	r7, sl
 800c2f2:	b29b      	uxth	r3, r3
 800c2f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c2f8:	f84e 3b04 	str.w	r3, [lr], #4
 800c2fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c300:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c304:	f8be 3000 	ldrh.w	r3, [lr]
 800c308:	fb09 330a 	mla	r3, r9, sl, r3
 800c30c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c310:	4562      	cmp	r2, ip
 800c312:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c316:	d8e5      	bhi.n	800c2e4 <__multiply+0x10c>
 800c318:	9f01      	ldr	r7, [sp, #4]
 800c31a:	51eb      	str	r3, [r5, r7]
 800c31c:	3504      	adds	r5, #4
 800c31e:	e799      	b.n	800c254 <__multiply+0x7c>
 800c320:	3e01      	subs	r6, #1
 800c322:	e79b      	b.n	800c25c <__multiply+0x84>
 800c324:	0800d118 	.word	0x0800d118
 800c328:	0800d13a 	.word	0x0800d13a

0800c32c <__pow5mult>:
 800c32c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c330:	4615      	mov	r5, r2
 800c332:	f012 0203 	ands.w	r2, r2, #3
 800c336:	4607      	mov	r7, r0
 800c338:	460e      	mov	r6, r1
 800c33a:	d007      	beq.n	800c34c <__pow5mult+0x20>
 800c33c:	4c25      	ldr	r4, [pc, #148]	@ (800c3d4 <__pow5mult+0xa8>)
 800c33e:	3a01      	subs	r2, #1
 800c340:	2300      	movs	r3, #0
 800c342:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c346:	f7ff fe9f 	bl	800c088 <__multadd>
 800c34a:	4606      	mov	r6, r0
 800c34c:	10ad      	asrs	r5, r5, #2
 800c34e:	d03d      	beq.n	800c3cc <__pow5mult+0xa0>
 800c350:	69fc      	ldr	r4, [r7, #28]
 800c352:	b97c      	cbnz	r4, 800c374 <__pow5mult+0x48>
 800c354:	2010      	movs	r0, #16
 800c356:	f7ff fcd3 	bl	800bd00 <malloc>
 800c35a:	4602      	mov	r2, r0
 800c35c:	61f8      	str	r0, [r7, #28]
 800c35e:	b928      	cbnz	r0, 800c36c <__pow5mult+0x40>
 800c360:	4b1d      	ldr	r3, [pc, #116]	@ (800c3d8 <__pow5mult+0xac>)
 800c362:	481e      	ldr	r0, [pc, #120]	@ (800c3dc <__pow5mult+0xb0>)
 800c364:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c368:	f000 fa9e 	bl	800c8a8 <__assert_func>
 800c36c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c370:	6004      	str	r4, [r0, #0]
 800c372:	60c4      	str	r4, [r0, #12]
 800c374:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c378:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c37c:	b94c      	cbnz	r4, 800c392 <__pow5mult+0x66>
 800c37e:	f240 2171 	movw	r1, #625	@ 0x271
 800c382:	4638      	mov	r0, r7
 800c384:	f7ff ff12 	bl	800c1ac <__i2b>
 800c388:	2300      	movs	r3, #0
 800c38a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c38e:	4604      	mov	r4, r0
 800c390:	6003      	str	r3, [r0, #0]
 800c392:	f04f 0900 	mov.w	r9, #0
 800c396:	07eb      	lsls	r3, r5, #31
 800c398:	d50a      	bpl.n	800c3b0 <__pow5mult+0x84>
 800c39a:	4631      	mov	r1, r6
 800c39c:	4622      	mov	r2, r4
 800c39e:	4638      	mov	r0, r7
 800c3a0:	f7ff ff1a 	bl	800c1d8 <__multiply>
 800c3a4:	4631      	mov	r1, r6
 800c3a6:	4680      	mov	r8, r0
 800c3a8:	4638      	mov	r0, r7
 800c3aa:	f7ff fe4b 	bl	800c044 <_Bfree>
 800c3ae:	4646      	mov	r6, r8
 800c3b0:	106d      	asrs	r5, r5, #1
 800c3b2:	d00b      	beq.n	800c3cc <__pow5mult+0xa0>
 800c3b4:	6820      	ldr	r0, [r4, #0]
 800c3b6:	b938      	cbnz	r0, 800c3c8 <__pow5mult+0x9c>
 800c3b8:	4622      	mov	r2, r4
 800c3ba:	4621      	mov	r1, r4
 800c3bc:	4638      	mov	r0, r7
 800c3be:	f7ff ff0b 	bl	800c1d8 <__multiply>
 800c3c2:	6020      	str	r0, [r4, #0]
 800c3c4:	f8c0 9000 	str.w	r9, [r0]
 800c3c8:	4604      	mov	r4, r0
 800c3ca:	e7e4      	b.n	800c396 <__pow5mult+0x6a>
 800c3cc:	4630      	mov	r0, r6
 800c3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3d2:	bf00      	nop
 800c3d4:	0800d194 	.word	0x0800d194
 800c3d8:	0800d0a9 	.word	0x0800d0a9
 800c3dc:	0800d13a 	.word	0x0800d13a

0800c3e0 <__lshift>:
 800c3e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3e4:	460c      	mov	r4, r1
 800c3e6:	6849      	ldr	r1, [r1, #4]
 800c3e8:	6923      	ldr	r3, [r4, #16]
 800c3ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c3ee:	68a3      	ldr	r3, [r4, #8]
 800c3f0:	4607      	mov	r7, r0
 800c3f2:	4691      	mov	r9, r2
 800c3f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c3f8:	f108 0601 	add.w	r6, r8, #1
 800c3fc:	42b3      	cmp	r3, r6
 800c3fe:	db0b      	blt.n	800c418 <__lshift+0x38>
 800c400:	4638      	mov	r0, r7
 800c402:	f7ff fddf 	bl	800bfc4 <_Balloc>
 800c406:	4605      	mov	r5, r0
 800c408:	b948      	cbnz	r0, 800c41e <__lshift+0x3e>
 800c40a:	4602      	mov	r2, r0
 800c40c:	4b28      	ldr	r3, [pc, #160]	@ (800c4b0 <__lshift+0xd0>)
 800c40e:	4829      	ldr	r0, [pc, #164]	@ (800c4b4 <__lshift+0xd4>)
 800c410:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c414:	f000 fa48 	bl	800c8a8 <__assert_func>
 800c418:	3101      	adds	r1, #1
 800c41a:	005b      	lsls	r3, r3, #1
 800c41c:	e7ee      	b.n	800c3fc <__lshift+0x1c>
 800c41e:	2300      	movs	r3, #0
 800c420:	f100 0114 	add.w	r1, r0, #20
 800c424:	f100 0210 	add.w	r2, r0, #16
 800c428:	4618      	mov	r0, r3
 800c42a:	4553      	cmp	r3, sl
 800c42c:	db33      	blt.n	800c496 <__lshift+0xb6>
 800c42e:	6920      	ldr	r0, [r4, #16]
 800c430:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c434:	f104 0314 	add.w	r3, r4, #20
 800c438:	f019 091f 	ands.w	r9, r9, #31
 800c43c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c440:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c444:	d02b      	beq.n	800c49e <__lshift+0xbe>
 800c446:	f1c9 0e20 	rsb	lr, r9, #32
 800c44a:	468a      	mov	sl, r1
 800c44c:	2200      	movs	r2, #0
 800c44e:	6818      	ldr	r0, [r3, #0]
 800c450:	fa00 f009 	lsl.w	r0, r0, r9
 800c454:	4310      	orrs	r0, r2
 800c456:	f84a 0b04 	str.w	r0, [sl], #4
 800c45a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c45e:	459c      	cmp	ip, r3
 800c460:	fa22 f20e 	lsr.w	r2, r2, lr
 800c464:	d8f3      	bhi.n	800c44e <__lshift+0x6e>
 800c466:	ebac 0304 	sub.w	r3, ip, r4
 800c46a:	3b15      	subs	r3, #21
 800c46c:	f023 0303 	bic.w	r3, r3, #3
 800c470:	3304      	adds	r3, #4
 800c472:	f104 0015 	add.w	r0, r4, #21
 800c476:	4584      	cmp	ip, r0
 800c478:	bf38      	it	cc
 800c47a:	2304      	movcc	r3, #4
 800c47c:	50ca      	str	r2, [r1, r3]
 800c47e:	b10a      	cbz	r2, 800c484 <__lshift+0xa4>
 800c480:	f108 0602 	add.w	r6, r8, #2
 800c484:	3e01      	subs	r6, #1
 800c486:	4638      	mov	r0, r7
 800c488:	612e      	str	r6, [r5, #16]
 800c48a:	4621      	mov	r1, r4
 800c48c:	f7ff fdda 	bl	800c044 <_Bfree>
 800c490:	4628      	mov	r0, r5
 800c492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c496:	f842 0f04 	str.w	r0, [r2, #4]!
 800c49a:	3301      	adds	r3, #1
 800c49c:	e7c5      	b.n	800c42a <__lshift+0x4a>
 800c49e:	3904      	subs	r1, #4
 800c4a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c4a8:	459c      	cmp	ip, r3
 800c4aa:	d8f9      	bhi.n	800c4a0 <__lshift+0xc0>
 800c4ac:	e7ea      	b.n	800c484 <__lshift+0xa4>
 800c4ae:	bf00      	nop
 800c4b0:	0800d118 	.word	0x0800d118
 800c4b4:	0800d13a 	.word	0x0800d13a

0800c4b8 <__mcmp>:
 800c4b8:	690a      	ldr	r2, [r1, #16]
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	6900      	ldr	r0, [r0, #16]
 800c4be:	1a80      	subs	r0, r0, r2
 800c4c0:	b530      	push	{r4, r5, lr}
 800c4c2:	d10e      	bne.n	800c4e2 <__mcmp+0x2a>
 800c4c4:	3314      	adds	r3, #20
 800c4c6:	3114      	adds	r1, #20
 800c4c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c4cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c4d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c4d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c4d8:	4295      	cmp	r5, r2
 800c4da:	d003      	beq.n	800c4e4 <__mcmp+0x2c>
 800c4dc:	d205      	bcs.n	800c4ea <__mcmp+0x32>
 800c4de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c4e2:	bd30      	pop	{r4, r5, pc}
 800c4e4:	42a3      	cmp	r3, r4
 800c4e6:	d3f3      	bcc.n	800c4d0 <__mcmp+0x18>
 800c4e8:	e7fb      	b.n	800c4e2 <__mcmp+0x2a>
 800c4ea:	2001      	movs	r0, #1
 800c4ec:	e7f9      	b.n	800c4e2 <__mcmp+0x2a>
	...

0800c4f0 <__mdiff>:
 800c4f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f4:	4689      	mov	r9, r1
 800c4f6:	4606      	mov	r6, r0
 800c4f8:	4611      	mov	r1, r2
 800c4fa:	4648      	mov	r0, r9
 800c4fc:	4614      	mov	r4, r2
 800c4fe:	f7ff ffdb 	bl	800c4b8 <__mcmp>
 800c502:	1e05      	subs	r5, r0, #0
 800c504:	d112      	bne.n	800c52c <__mdiff+0x3c>
 800c506:	4629      	mov	r1, r5
 800c508:	4630      	mov	r0, r6
 800c50a:	f7ff fd5b 	bl	800bfc4 <_Balloc>
 800c50e:	4602      	mov	r2, r0
 800c510:	b928      	cbnz	r0, 800c51e <__mdiff+0x2e>
 800c512:	4b3f      	ldr	r3, [pc, #252]	@ (800c610 <__mdiff+0x120>)
 800c514:	f240 2137 	movw	r1, #567	@ 0x237
 800c518:	483e      	ldr	r0, [pc, #248]	@ (800c614 <__mdiff+0x124>)
 800c51a:	f000 f9c5 	bl	800c8a8 <__assert_func>
 800c51e:	2301      	movs	r3, #1
 800c520:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c524:	4610      	mov	r0, r2
 800c526:	b003      	add	sp, #12
 800c528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c52c:	bfbc      	itt	lt
 800c52e:	464b      	movlt	r3, r9
 800c530:	46a1      	movlt	r9, r4
 800c532:	4630      	mov	r0, r6
 800c534:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c538:	bfba      	itte	lt
 800c53a:	461c      	movlt	r4, r3
 800c53c:	2501      	movlt	r5, #1
 800c53e:	2500      	movge	r5, #0
 800c540:	f7ff fd40 	bl	800bfc4 <_Balloc>
 800c544:	4602      	mov	r2, r0
 800c546:	b918      	cbnz	r0, 800c550 <__mdiff+0x60>
 800c548:	4b31      	ldr	r3, [pc, #196]	@ (800c610 <__mdiff+0x120>)
 800c54a:	f240 2145 	movw	r1, #581	@ 0x245
 800c54e:	e7e3      	b.n	800c518 <__mdiff+0x28>
 800c550:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c554:	6926      	ldr	r6, [r4, #16]
 800c556:	60c5      	str	r5, [r0, #12]
 800c558:	f109 0310 	add.w	r3, r9, #16
 800c55c:	f109 0514 	add.w	r5, r9, #20
 800c560:	f104 0e14 	add.w	lr, r4, #20
 800c564:	f100 0b14 	add.w	fp, r0, #20
 800c568:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c56c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c570:	9301      	str	r3, [sp, #4]
 800c572:	46d9      	mov	r9, fp
 800c574:	f04f 0c00 	mov.w	ip, #0
 800c578:	9b01      	ldr	r3, [sp, #4]
 800c57a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c57e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c582:	9301      	str	r3, [sp, #4]
 800c584:	fa1f f38a 	uxth.w	r3, sl
 800c588:	4619      	mov	r1, r3
 800c58a:	b283      	uxth	r3, r0
 800c58c:	1acb      	subs	r3, r1, r3
 800c58e:	0c00      	lsrs	r0, r0, #16
 800c590:	4463      	add	r3, ip
 800c592:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c596:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c59a:	b29b      	uxth	r3, r3
 800c59c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c5a0:	4576      	cmp	r6, lr
 800c5a2:	f849 3b04 	str.w	r3, [r9], #4
 800c5a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c5aa:	d8e5      	bhi.n	800c578 <__mdiff+0x88>
 800c5ac:	1b33      	subs	r3, r6, r4
 800c5ae:	3b15      	subs	r3, #21
 800c5b0:	f023 0303 	bic.w	r3, r3, #3
 800c5b4:	3415      	adds	r4, #21
 800c5b6:	3304      	adds	r3, #4
 800c5b8:	42a6      	cmp	r6, r4
 800c5ba:	bf38      	it	cc
 800c5bc:	2304      	movcc	r3, #4
 800c5be:	441d      	add	r5, r3
 800c5c0:	445b      	add	r3, fp
 800c5c2:	461e      	mov	r6, r3
 800c5c4:	462c      	mov	r4, r5
 800c5c6:	4544      	cmp	r4, r8
 800c5c8:	d30e      	bcc.n	800c5e8 <__mdiff+0xf8>
 800c5ca:	f108 0103 	add.w	r1, r8, #3
 800c5ce:	1b49      	subs	r1, r1, r5
 800c5d0:	f021 0103 	bic.w	r1, r1, #3
 800c5d4:	3d03      	subs	r5, #3
 800c5d6:	45a8      	cmp	r8, r5
 800c5d8:	bf38      	it	cc
 800c5da:	2100      	movcc	r1, #0
 800c5dc:	440b      	add	r3, r1
 800c5de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c5e2:	b191      	cbz	r1, 800c60a <__mdiff+0x11a>
 800c5e4:	6117      	str	r7, [r2, #16]
 800c5e6:	e79d      	b.n	800c524 <__mdiff+0x34>
 800c5e8:	f854 1b04 	ldr.w	r1, [r4], #4
 800c5ec:	46e6      	mov	lr, ip
 800c5ee:	0c08      	lsrs	r0, r1, #16
 800c5f0:	fa1c fc81 	uxtah	ip, ip, r1
 800c5f4:	4471      	add	r1, lr
 800c5f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c5fa:	b289      	uxth	r1, r1
 800c5fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c600:	f846 1b04 	str.w	r1, [r6], #4
 800c604:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c608:	e7dd      	b.n	800c5c6 <__mdiff+0xd6>
 800c60a:	3f01      	subs	r7, #1
 800c60c:	e7e7      	b.n	800c5de <__mdiff+0xee>
 800c60e:	bf00      	nop
 800c610:	0800d118 	.word	0x0800d118
 800c614:	0800d13a 	.word	0x0800d13a

0800c618 <__d2b>:
 800c618:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c61c:	460f      	mov	r7, r1
 800c61e:	2101      	movs	r1, #1
 800c620:	ec59 8b10 	vmov	r8, r9, d0
 800c624:	4616      	mov	r6, r2
 800c626:	f7ff fccd 	bl	800bfc4 <_Balloc>
 800c62a:	4604      	mov	r4, r0
 800c62c:	b930      	cbnz	r0, 800c63c <__d2b+0x24>
 800c62e:	4602      	mov	r2, r0
 800c630:	4b23      	ldr	r3, [pc, #140]	@ (800c6c0 <__d2b+0xa8>)
 800c632:	4824      	ldr	r0, [pc, #144]	@ (800c6c4 <__d2b+0xac>)
 800c634:	f240 310f 	movw	r1, #783	@ 0x30f
 800c638:	f000 f936 	bl	800c8a8 <__assert_func>
 800c63c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c640:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c644:	b10d      	cbz	r5, 800c64a <__d2b+0x32>
 800c646:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c64a:	9301      	str	r3, [sp, #4]
 800c64c:	f1b8 0300 	subs.w	r3, r8, #0
 800c650:	d023      	beq.n	800c69a <__d2b+0x82>
 800c652:	4668      	mov	r0, sp
 800c654:	9300      	str	r3, [sp, #0]
 800c656:	f7ff fd7c 	bl	800c152 <__lo0bits>
 800c65a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c65e:	b1d0      	cbz	r0, 800c696 <__d2b+0x7e>
 800c660:	f1c0 0320 	rsb	r3, r0, #32
 800c664:	fa02 f303 	lsl.w	r3, r2, r3
 800c668:	430b      	orrs	r3, r1
 800c66a:	40c2      	lsrs	r2, r0
 800c66c:	6163      	str	r3, [r4, #20]
 800c66e:	9201      	str	r2, [sp, #4]
 800c670:	9b01      	ldr	r3, [sp, #4]
 800c672:	61a3      	str	r3, [r4, #24]
 800c674:	2b00      	cmp	r3, #0
 800c676:	bf0c      	ite	eq
 800c678:	2201      	moveq	r2, #1
 800c67a:	2202      	movne	r2, #2
 800c67c:	6122      	str	r2, [r4, #16]
 800c67e:	b1a5      	cbz	r5, 800c6aa <__d2b+0x92>
 800c680:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c684:	4405      	add	r5, r0
 800c686:	603d      	str	r5, [r7, #0]
 800c688:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c68c:	6030      	str	r0, [r6, #0]
 800c68e:	4620      	mov	r0, r4
 800c690:	b003      	add	sp, #12
 800c692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c696:	6161      	str	r1, [r4, #20]
 800c698:	e7ea      	b.n	800c670 <__d2b+0x58>
 800c69a:	a801      	add	r0, sp, #4
 800c69c:	f7ff fd59 	bl	800c152 <__lo0bits>
 800c6a0:	9b01      	ldr	r3, [sp, #4]
 800c6a2:	6163      	str	r3, [r4, #20]
 800c6a4:	3020      	adds	r0, #32
 800c6a6:	2201      	movs	r2, #1
 800c6a8:	e7e8      	b.n	800c67c <__d2b+0x64>
 800c6aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c6ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c6b2:	6038      	str	r0, [r7, #0]
 800c6b4:	6918      	ldr	r0, [r3, #16]
 800c6b6:	f7ff fd2d 	bl	800c114 <__hi0bits>
 800c6ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c6be:	e7e5      	b.n	800c68c <__d2b+0x74>
 800c6c0:	0800d118 	.word	0x0800d118
 800c6c4:	0800d13a 	.word	0x0800d13a

0800c6c8 <__sread>:
 800c6c8:	b510      	push	{r4, lr}
 800c6ca:	460c      	mov	r4, r1
 800c6cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6d0:	f000 f8a8 	bl	800c824 <_read_r>
 800c6d4:	2800      	cmp	r0, #0
 800c6d6:	bfab      	itete	ge
 800c6d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c6da:	89a3      	ldrhlt	r3, [r4, #12]
 800c6dc:	181b      	addge	r3, r3, r0
 800c6de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c6e2:	bfac      	ite	ge
 800c6e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c6e6:	81a3      	strhlt	r3, [r4, #12]
 800c6e8:	bd10      	pop	{r4, pc}

0800c6ea <__swrite>:
 800c6ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ee:	461f      	mov	r7, r3
 800c6f0:	898b      	ldrh	r3, [r1, #12]
 800c6f2:	05db      	lsls	r3, r3, #23
 800c6f4:	4605      	mov	r5, r0
 800c6f6:	460c      	mov	r4, r1
 800c6f8:	4616      	mov	r6, r2
 800c6fa:	d505      	bpl.n	800c708 <__swrite+0x1e>
 800c6fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c700:	2302      	movs	r3, #2
 800c702:	2200      	movs	r2, #0
 800c704:	f000 f87c 	bl	800c800 <_lseek_r>
 800c708:	89a3      	ldrh	r3, [r4, #12]
 800c70a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c70e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c712:	81a3      	strh	r3, [r4, #12]
 800c714:	4632      	mov	r2, r6
 800c716:	463b      	mov	r3, r7
 800c718:	4628      	mov	r0, r5
 800c71a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c71e:	f000 b8a3 	b.w	800c868 <_write_r>

0800c722 <__sseek>:
 800c722:	b510      	push	{r4, lr}
 800c724:	460c      	mov	r4, r1
 800c726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c72a:	f000 f869 	bl	800c800 <_lseek_r>
 800c72e:	1c43      	adds	r3, r0, #1
 800c730:	89a3      	ldrh	r3, [r4, #12]
 800c732:	bf15      	itete	ne
 800c734:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c736:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c73a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c73e:	81a3      	strheq	r3, [r4, #12]
 800c740:	bf18      	it	ne
 800c742:	81a3      	strhne	r3, [r4, #12]
 800c744:	bd10      	pop	{r4, pc}

0800c746 <__sclose>:
 800c746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c74a:	f000 b849 	b.w	800c7e0 <_close_r>

0800c74e <_realloc_r>:
 800c74e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c752:	4680      	mov	r8, r0
 800c754:	4615      	mov	r5, r2
 800c756:	460c      	mov	r4, r1
 800c758:	b921      	cbnz	r1, 800c764 <_realloc_r+0x16>
 800c75a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c75e:	4611      	mov	r1, r2
 800c760:	f7ff baf8 	b.w	800bd54 <_malloc_r>
 800c764:	b92a      	cbnz	r2, 800c772 <_realloc_r+0x24>
 800c766:	f000 f8d1 	bl	800c90c <_free_r>
 800c76a:	2400      	movs	r4, #0
 800c76c:	4620      	mov	r0, r4
 800c76e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c772:	f000 f927 	bl	800c9c4 <_malloc_usable_size_r>
 800c776:	4285      	cmp	r5, r0
 800c778:	4606      	mov	r6, r0
 800c77a:	d802      	bhi.n	800c782 <_realloc_r+0x34>
 800c77c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c780:	d8f4      	bhi.n	800c76c <_realloc_r+0x1e>
 800c782:	4629      	mov	r1, r5
 800c784:	4640      	mov	r0, r8
 800c786:	f7ff fae5 	bl	800bd54 <_malloc_r>
 800c78a:	4607      	mov	r7, r0
 800c78c:	2800      	cmp	r0, #0
 800c78e:	d0ec      	beq.n	800c76a <_realloc_r+0x1c>
 800c790:	42b5      	cmp	r5, r6
 800c792:	462a      	mov	r2, r5
 800c794:	4621      	mov	r1, r4
 800c796:	bf28      	it	cs
 800c798:	4632      	movcs	r2, r6
 800c79a:	f000 f877 	bl	800c88c <memcpy>
 800c79e:	4621      	mov	r1, r4
 800c7a0:	4640      	mov	r0, r8
 800c7a2:	f000 f8b3 	bl	800c90c <_free_r>
 800c7a6:	463c      	mov	r4, r7
 800c7a8:	e7e0      	b.n	800c76c <_realloc_r+0x1e>

0800c7aa <memmove>:
 800c7aa:	4288      	cmp	r0, r1
 800c7ac:	b510      	push	{r4, lr}
 800c7ae:	eb01 0402 	add.w	r4, r1, r2
 800c7b2:	d902      	bls.n	800c7ba <memmove+0x10>
 800c7b4:	4284      	cmp	r4, r0
 800c7b6:	4623      	mov	r3, r4
 800c7b8:	d807      	bhi.n	800c7ca <memmove+0x20>
 800c7ba:	1e43      	subs	r3, r0, #1
 800c7bc:	42a1      	cmp	r1, r4
 800c7be:	d008      	beq.n	800c7d2 <memmove+0x28>
 800c7c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c7c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c7c8:	e7f8      	b.n	800c7bc <memmove+0x12>
 800c7ca:	4402      	add	r2, r0
 800c7cc:	4601      	mov	r1, r0
 800c7ce:	428a      	cmp	r2, r1
 800c7d0:	d100      	bne.n	800c7d4 <memmove+0x2a>
 800c7d2:	bd10      	pop	{r4, pc}
 800c7d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c7d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c7dc:	e7f7      	b.n	800c7ce <memmove+0x24>
	...

0800c7e0 <_close_r>:
 800c7e0:	b538      	push	{r3, r4, r5, lr}
 800c7e2:	4d06      	ldr	r5, [pc, #24]	@ (800c7fc <_close_r+0x1c>)
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	4604      	mov	r4, r0
 800c7e8:	4608      	mov	r0, r1
 800c7ea:	602b      	str	r3, [r5, #0]
 800c7ec:	f7f5 fcc0 	bl	8002170 <_close>
 800c7f0:	1c43      	adds	r3, r0, #1
 800c7f2:	d102      	bne.n	800c7fa <_close_r+0x1a>
 800c7f4:	682b      	ldr	r3, [r5, #0]
 800c7f6:	b103      	cbz	r3, 800c7fa <_close_r+0x1a>
 800c7f8:	6023      	str	r3, [r4, #0]
 800c7fa:	bd38      	pop	{r3, r4, r5, pc}
 800c7fc:	20002310 	.word	0x20002310

0800c800 <_lseek_r>:
 800c800:	b538      	push	{r3, r4, r5, lr}
 800c802:	4d07      	ldr	r5, [pc, #28]	@ (800c820 <_lseek_r+0x20>)
 800c804:	4604      	mov	r4, r0
 800c806:	4608      	mov	r0, r1
 800c808:	4611      	mov	r1, r2
 800c80a:	2200      	movs	r2, #0
 800c80c:	602a      	str	r2, [r5, #0]
 800c80e:	461a      	mov	r2, r3
 800c810:	f7f5 fcd5 	bl	80021be <_lseek>
 800c814:	1c43      	adds	r3, r0, #1
 800c816:	d102      	bne.n	800c81e <_lseek_r+0x1e>
 800c818:	682b      	ldr	r3, [r5, #0]
 800c81a:	b103      	cbz	r3, 800c81e <_lseek_r+0x1e>
 800c81c:	6023      	str	r3, [r4, #0]
 800c81e:	bd38      	pop	{r3, r4, r5, pc}
 800c820:	20002310 	.word	0x20002310

0800c824 <_read_r>:
 800c824:	b538      	push	{r3, r4, r5, lr}
 800c826:	4d07      	ldr	r5, [pc, #28]	@ (800c844 <_read_r+0x20>)
 800c828:	4604      	mov	r4, r0
 800c82a:	4608      	mov	r0, r1
 800c82c:	4611      	mov	r1, r2
 800c82e:	2200      	movs	r2, #0
 800c830:	602a      	str	r2, [r5, #0]
 800c832:	461a      	mov	r2, r3
 800c834:	f7f5 fc63 	bl	80020fe <_read>
 800c838:	1c43      	adds	r3, r0, #1
 800c83a:	d102      	bne.n	800c842 <_read_r+0x1e>
 800c83c:	682b      	ldr	r3, [r5, #0]
 800c83e:	b103      	cbz	r3, 800c842 <_read_r+0x1e>
 800c840:	6023      	str	r3, [r4, #0]
 800c842:	bd38      	pop	{r3, r4, r5, pc}
 800c844:	20002310 	.word	0x20002310

0800c848 <_sbrk_r>:
 800c848:	b538      	push	{r3, r4, r5, lr}
 800c84a:	4d06      	ldr	r5, [pc, #24]	@ (800c864 <_sbrk_r+0x1c>)
 800c84c:	2300      	movs	r3, #0
 800c84e:	4604      	mov	r4, r0
 800c850:	4608      	mov	r0, r1
 800c852:	602b      	str	r3, [r5, #0]
 800c854:	f7f5 fcc0 	bl	80021d8 <_sbrk>
 800c858:	1c43      	adds	r3, r0, #1
 800c85a:	d102      	bne.n	800c862 <_sbrk_r+0x1a>
 800c85c:	682b      	ldr	r3, [r5, #0]
 800c85e:	b103      	cbz	r3, 800c862 <_sbrk_r+0x1a>
 800c860:	6023      	str	r3, [r4, #0]
 800c862:	bd38      	pop	{r3, r4, r5, pc}
 800c864:	20002310 	.word	0x20002310

0800c868 <_write_r>:
 800c868:	b538      	push	{r3, r4, r5, lr}
 800c86a:	4d07      	ldr	r5, [pc, #28]	@ (800c888 <_write_r+0x20>)
 800c86c:	4604      	mov	r4, r0
 800c86e:	4608      	mov	r0, r1
 800c870:	4611      	mov	r1, r2
 800c872:	2200      	movs	r2, #0
 800c874:	602a      	str	r2, [r5, #0]
 800c876:	461a      	mov	r2, r3
 800c878:	f7f5 fc5e 	bl	8002138 <_write>
 800c87c:	1c43      	adds	r3, r0, #1
 800c87e:	d102      	bne.n	800c886 <_write_r+0x1e>
 800c880:	682b      	ldr	r3, [r5, #0]
 800c882:	b103      	cbz	r3, 800c886 <_write_r+0x1e>
 800c884:	6023      	str	r3, [r4, #0]
 800c886:	bd38      	pop	{r3, r4, r5, pc}
 800c888:	20002310 	.word	0x20002310

0800c88c <memcpy>:
 800c88c:	440a      	add	r2, r1
 800c88e:	4291      	cmp	r1, r2
 800c890:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c894:	d100      	bne.n	800c898 <memcpy+0xc>
 800c896:	4770      	bx	lr
 800c898:	b510      	push	{r4, lr}
 800c89a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c89e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c8a2:	4291      	cmp	r1, r2
 800c8a4:	d1f9      	bne.n	800c89a <memcpy+0xe>
 800c8a6:	bd10      	pop	{r4, pc}

0800c8a8 <__assert_func>:
 800c8a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c8aa:	4614      	mov	r4, r2
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	4b09      	ldr	r3, [pc, #36]	@ (800c8d4 <__assert_func+0x2c>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4605      	mov	r5, r0
 800c8b4:	68d8      	ldr	r0, [r3, #12]
 800c8b6:	b954      	cbnz	r4, 800c8ce <__assert_func+0x26>
 800c8b8:	4b07      	ldr	r3, [pc, #28]	@ (800c8d8 <__assert_func+0x30>)
 800c8ba:	461c      	mov	r4, r3
 800c8bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c8c0:	9100      	str	r1, [sp, #0]
 800c8c2:	462b      	mov	r3, r5
 800c8c4:	4905      	ldr	r1, [pc, #20]	@ (800c8dc <__assert_func+0x34>)
 800c8c6:	f000 f885 	bl	800c9d4 <fiprintf>
 800c8ca:	f000 f8a2 	bl	800ca12 <abort>
 800c8ce:	4b04      	ldr	r3, [pc, #16]	@ (800c8e0 <__assert_func+0x38>)
 800c8d0:	e7f4      	b.n	800c8bc <__assert_func+0x14>
 800c8d2:	bf00      	nop
 800c8d4:	20000114 	.word	0x20000114
 800c8d8:	0800d3d6 	.word	0x0800d3d6
 800c8dc:	0800d3a8 	.word	0x0800d3a8
 800c8e0:	0800d39b 	.word	0x0800d39b

0800c8e4 <_calloc_r>:
 800c8e4:	b570      	push	{r4, r5, r6, lr}
 800c8e6:	fba1 5402 	umull	r5, r4, r1, r2
 800c8ea:	b93c      	cbnz	r4, 800c8fc <_calloc_r+0x18>
 800c8ec:	4629      	mov	r1, r5
 800c8ee:	f7ff fa31 	bl	800bd54 <_malloc_r>
 800c8f2:	4606      	mov	r6, r0
 800c8f4:	b928      	cbnz	r0, 800c902 <_calloc_r+0x1e>
 800c8f6:	2600      	movs	r6, #0
 800c8f8:	4630      	mov	r0, r6
 800c8fa:	bd70      	pop	{r4, r5, r6, pc}
 800c8fc:	220c      	movs	r2, #12
 800c8fe:	6002      	str	r2, [r0, #0]
 800c900:	e7f9      	b.n	800c8f6 <_calloc_r+0x12>
 800c902:	462a      	mov	r2, r5
 800c904:	4621      	mov	r1, r4
 800c906:	f7fe fa1d 	bl	800ad44 <memset>
 800c90a:	e7f5      	b.n	800c8f8 <_calloc_r+0x14>

0800c90c <_free_r>:
 800c90c:	b538      	push	{r3, r4, r5, lr}
 800c90e:	4605      	mov	r5, r0
 800c910:	2900      	cmp	r1, #0
 800c912:	d041      	beq.n	800c998 <_free_r+0x8c>
 800c914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c918:	1f0c      	subs	r4, r1, #4
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	bfb8      	it	lt
 800c91e:	18e4      	addlt	r4, r4, r3
 800c920:	f7ff fb44 	bl	800bfac <__malloc_lock>
 800c924:	4a1d      	ldr	r2, [pc, #116]	@ (800c99c <_free_r+0x90>)
 800c926:	6813      	ldr	r3, [r2, #0]
 800c928:	b933      	cbnz	r3, 800c938 <_free_r+0x2c>
 800c92a:	6063      	str	r3, [r4, #4]
 800c92c:	6014      	str	r4, [r2, #0]
 800c92e:	4628      	mov	r0, r5
 800c930:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c934:	f7ff bb40 	b.w	800bfb8 <__malloc_unlock>
 800c938:	42a3      	cmp	r3, r4
 800c93a:	d908      	bls.n	800c94e <_free_r+0x42>
 800c93c:	6820      	ldr	r0, [r4, #0]
 800c93e:	1821      	adds	r1, r4, r0
 800c940:	428b      	cmp	r3, r1
 800c942:	bf01      	itttt	eq
 800c944:	6819      	ldreq	r1, [r3, #0]
 800c946:	685b      	ldreq	r3, [r3, #4]
 800c948:	1809      	addeq	r1, r1, r0
 800c94a:	6021      	streq	r1, [r4, #0]
 800c94c:	e7ed      	b.n	800c92a <_free_r+0x1e>
 800c94e:	461a      	mov	r2, r3
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	b10b      	cbz	r3, 800c958 <_free_r+0x4c>
 800c954:	42a3      	cmp	r3, r4
 800c956:	d9fa      	bls.n	800c94e <_free_r+0x42>
 800c958:	6811      	ldr	r1, [r2, #0]
 800c95a:	1850      	adds	r0, r2, r1
 800c95c:	42a0      	cmp	r0, r4
 800c95e:	d10b      	bne.n	800c978 <_free_r+0x6c>
 800c960:	6820      	ldr	r0, [r4, #0]
 800c962:	4401      	add	r1, r0
 800c964:	1850      	adds	r0, r2, r1
 800c966:	4283      	cmp	r3, r0
 800c968:	6011      	str	r1, [r2, #0]
 800c96a:	d1e0      	bne.n	800c92e <_free_r+0x22>
 800c96c:	6818      	ldr	r0, [r3, #0]
 800c96e:	685b      	ldr	r3, [r3, #4]
 800c970:	6053      	str	r3, [r2, #4]
 800c972:	4408      	add	r0, r1
 800c974:	6010      	str	r0, [r2, #0]
 800c976:	e7da      	b.n	800c92e <_free_r+0x22>
 800c978:	d902      	bls.n	800c980 <_free_r+0x74>
 800c97a:	230c      	movs	r3, #12
 800c97c:	602b      	str	r3, [r5, #0]
 800c97e:	e7d6      	b.n	800c92e <_free_r+0x22>
 800c980:	6820      	ldr	r0, [r4, #0]
 800c982:	1821      	adds	r1, r4, r0
 800c984:	428b      	cmp	r3, r1
 800c986:	bf04      	itt	eq
 800c988:	6819      	ldreq	r1, [r3, #0]
 800c98a:	685b      	ldreq	r3, [r3, #4]
 800c98c:	6063      	str	r3, [r4, #4]
 800c98e:	bf04      	itt	eq
 800c990:	1809      	addeq	r1, r1, r0
 800c992:	6021      	streq	r1, [r4, #0]
 800c994:	6054      	str	r4, [r2, #4]
 800c996:	e7ca      	b.n	800c92e <_free_r+0x22>
 800c998:	bd38      	pop	{r3, r4, r5, pc}
 800c99a:	bf00      	nop
 800c99c:	2000230c 	.word	0x2000230c

0800c9a0 <__ascii_mbtowc>:
 800c9a0:	b082      	sub	sp, #8
 800c9a2:	b901      	cbnz	r1, 800c9a6 <__ascii_mbtowc+0x6>
 800c9a4:	a901      	add	r1, sp, #4
 800c9a6:	b142      	cbz	r2, 800c9ba <__ascii_mbtowc+0x1a>
 800c9a8:	b14b      	cbz	r3, 800c9be <__ascii_mbtowc+0x1e>
 800c9aa:	7813      	ldrb	r3, [r2, #0]
 800c9ac:	600b      	str	r3, [r1, #0]
 800c9ae:	7812      	ldrb	r2, [r2, #0]
 800c9b0:	1e10      	subs	r0, r2, #0
 800c9b2:	bf18      	it	ne
 800c9b4:	2001      	movne	r0, #1
 800c9b6:	b002      	add	sp, #8
 800c9b8:	4770      	bx	lr
 800c9ba:	4610      	mov	r0, r2
 800c9bc:	e7fb      	b.n	800c9b6 <__ascii_mbtowc+0x16>
 800c9be:	f06f 0001 	mvn.w	r0, #1
 800c9c2:	e7f8      	b.n	800c9b6 <__ascii_mbtowc+0x16>

0800c9c4 <_malloc_usable_size_r>:
 800c9c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c9c8:	1f18      	subs	r0, r3, #4
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	bfbc      	itt	lt
 800c9ce:	580b      	ldrlt	r3, [r1, r0]
 800c9d0:	18c0      	addlt	r0, r0, r3
 800c9d2:	4770      	bx	lr

0800c9d4 <fiprintf>:
 800c9d4:	b40e      	push	{r1, r2, r3}
 800c9d6:	b503      	push	{r0, r1, lr}
 800c9d8:	4601      	mov	r1, r0
 800c9da:	ab03      	add	r3, sp, #12
 800c9dc:	4805      	ldr	r0, [pc, #20]	@ (800c9f4 <fiprintf+0x20>)
 800c9de:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9e2:	6800      	ldr	r0, [r0, #0]
 800c9e4:	9301      	str	r3, [sp, #4]
 800c9e6:	f000 f845 	bl	800ca74 <_vfiprintf_r>
 800c9ea:	b002      	add	sp, #8
 800c9ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9f0:	b003      	add	sp, #12
 800c9f2:	4770      	bx	lr
 800c9f4:	20000114 	.word	0x20000114

0800c9f8 <__ascii_wctomb>:
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	4608      	mov	r0, r1
 800c9fc:	b141      	cbz	r1, 800ca10 <__ascii_wctomb+0x18>
 800c9fe:	2aff      	cmp	r2, #255	@ 0xff
 800ca00:	d904      	bls.n	800ca0c <__ascii_wctomb+0x14>
 800ca02:	228a      	movs	r2, #138	@ 0x8a
 800ca04:	601a      	str	r2, [r3, #0]
 800ca06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca0a:	4770      	bx	lr
 800ca0c:	700a      	strb	r2, [r1, #0]
 800ca0e:	2001      	movs	r0, #1
 800ca10:	4770      	bx	lr

0800ca12 <abort>:
 800ca12:	b508      	push	{r3, lr}
 800ca14:	2006      	movs	r0, #6
 800ca16:	f000 fa85 	bl	800cf24 <raise>
 800ca1a:	2001      	movs	r0, #1
 800ca1c:	f7f5 fb64 	bl	80020e8 <_exit>

0800ca20 <__sfputc_r>:
 800ca20:	6893      	ldr	r3, [r2, #8]
 800ca22:	3b01      	subs	r3, #1
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	b410      	push	{r4}
 800ca28:	6093      	str	r3, [r2, #8]
 800ca2a:	da08      	bge.n	800ca3e <__sfputc_r+0x1e>
 800ca2c:	6994      	ldr	r4, [r2, #24]
 800ca2e:	42a3      	cmp	r3, r4
 800ca30:	db01      	blt.n	800ca36 <__sfputc_r+0x16>
 800ca32:	290a      	cmp	r1, #10
 800ca34:	d103      	bne.n	800ca3e <__sfputc_r+0x1e>
 800ca36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca3a:	f000 b933 	b.w	800cca4 <__swbuf_r>
 800ca3e:	6813      	ldr	r3, [r2, #0]
 800ca40:	1c58      	adds	r0, r3, #1
 800ca42:	6010      	str	r0, [r2, #0]
 800ca44:	7019      	strb	r1, [r3, #0]
 800ca46:	4608      	mov	r0, r1
 800ca48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca4c:	4770      	bx	lr

0800ca4e <__sfputs_r>:
 800ca4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca50:	4606      	mov	r6, r0
 800ca52:	460f      	mov	r7, r1
 800ca54:	4614      	mov	r4, r2
 800ca56:	18d5      	adds	r5, r2, r3
 800ca58:	42ac      	cmp	r4, r5
 800ca5a:	d101      	bne.n	800ca60 <__sfputs_r+0x12>
 800ca5c:	2000      	movs	r0, #0
 800ca5e:	e007      	b.n	800ca70 <__sfputs_r+0x22>
 800ca60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca64:	463a      	mov	r2, r7
 800ca66:	4630      	mov	r0, r6
 800ca68:	f7ff ffda 	bl	800ca20 <__sfputc_r>
 800ca6c:	1c43      	adds	r3, r0, #1
 800ca6e:	d1f3      	bne.n	800ca58 <__sfputs_r+0xa>
 800ca70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca74 <_vfiprintf_r>:
 800ca74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca78:	460d      	mov	r5, r1
 800ca7a:	b09d      	sub	sp, #116	@ 0x74
 800ca7c:	4614      	mov	r4, r2
 800ca7e:	4698      	mov	r8, r3
 800ca80:	4606      	mov	r6, r0
 800ca82:	b118      	cbz	r0, 800ca8c <_vfiprintf_r+0x18>
 800ca84:	6a03      	ldr	r3, [r0, #32]
 800ca86:	b90b      	cbnz	r3, 800ca8c <_vfiprintf_r+0x18>
 800ca88:	f7fe f926 	bl	800acd8 <__sinit>
 800ca8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca8e:	07d9      	lsls	r1, r3, #31
 800ca90:	d405      	bmi.n	800ca9e <_vfiprintf_r+0x2a>
 800ca92:	89ab      	ldrh	r3, [r5, #12]
 800ca94:	059a      	lsls	r2, r3, #22
 800ca96:	d402      	bmi.n	800ca9e <_vfiprintf_r+0x2a>
 800ca98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca9a:	f7fe f98a 	bl	800adb2 <__retarget_lock_acquire_recursive>
 800ca9e:	89ab      	ldrh	r3, [r5, #12]
 800caa0:	071b      	lsls	r3, r3, #28
 800caa2:	d501      	bpl.n	800caa8 <_vfiprintf_r+0x34>
 800caa4:	692b      	ldr	r3, [r5, #16]
 800caa6:	b99b      	cbnz	r3, 800cad0 <_vfiprintf_r+0x5c>
 800caa8:	4629      	mov	r1, r5
 800caaa:	4630      	mov	r0, r6
 800caac:	f000 f938 	bl	800cd20 <__swsetup_r>
 800cab0:	b170      	cbz	r0, 800cad0 <_vfiprintf_r+0x5c>
 800cab2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cab4:	07dc      	lsls	r4, r3, #31
 800cab6:	d504      	bpl.n	800cac2 <_vfiprintf_r+0x4e>
 800cab8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cabc:	b01d      	add	sp, #116	@ 0x74
 800cabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cac2:	89ab      	ldrh	r3, [r5, #12]
 800cac4:	0598      	lsls	r0, r3, #22
 800cac6:	d4f7      	bmi.n	800cab8 <_vfiprintf_r+0x44>
 800cac8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800caca:	f7fe f973 	bl	800adb4 <__retarget_lock_release_recursive>
 800cace:	e7f3      	b.n	800cab8 <_vfiprintf_r+0x44>
 800cad0:	2300      	movs	r3, #0
 800cad2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cad4:	2320      	movs	r3, #32
 800cad6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cada:	f8cd 800c 	str.w	r8, [sp, #12]
 800cade:	2330      	movs	r3, #48	@ 0x30
 800cae0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cc90 <_vfiprintf_r+0x21c>
 800cae4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cae8:	f04f 0901 	mov.w	r9, #1
 800caec:	4623      	mov	r3, r4
 800caee:	469a      	mov	sl, r3
 800caf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caf4:	b10a      	cbz	r2, 800cafa <_vfiprintf_r+0x86>
 800caf6:	2a25      	cmp	r2, #37	@ 0x25
 800caf8:	d1f9      	bne.n	800caee <_vfiprintf_r+0x7a>
 800cafa:	ebba 0b04 	subs.w	fp, sl, r4
 800cafe:	d00b      	beq.n	800cb18 <_vfiprintf_r+0xa4>
 800cb00:	465b      	mov	r3, fp
 800cb02:	4622      	mov	r2, r4
 800cb04:	4629      	mov	r1, r5
 800cb06:	4630      	mov	r0, r6
 800cb08:	f7ff ffa1 	bl	800ca4e <__sfputs_r>
 800cb0c:	3001      	adds	r0, #1
 800cb0e:	f000 80a7 	beq.w	800cc60 <_vfiprintf_r+0x1ec>
 800cb12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb14:	445a      	add	r2, fp
 800cb16:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb18:	f89a 3000 	ldrb.w	r3, [sl]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	f000 809f 	beq.w	800cc60 <_vfiprintf_r+0x1ec>
 800cb22:	2300      	movs	r3, #0
 800cb24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cb28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb2c:	f10a 0a01 	add.w	sl, sl, #1
 800cb30:	9304      	str	r3, [sp, #16]
 800cb32:	9307      	str	r3, [sp, #28]
 800cb34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb38:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb3a:	4654      	mov	r4, sl
 800cb3c:	2205      	movs	r2, #5
 800cb3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb42:	4853      	ldr	r0, [pc, #332]	@ (800cc90 <_vfiprintf_r+0x21c>)
 800cb44:	f7f3 fb44 	bl	80001d0 <memchr>
 800cb48:	9a04      	ldr	r2, [sp, #16]
 800cb4a:	b9d8      	cbnz	r0, 800cb84 <_vfiprintf_r+0x110>
 800cb4c:	06d1      	lsls	r1, r2, #27
 800cb4e:	bf44      	itt	mi
 800cb50:	2320      	movmi	r3, #32
 800cb52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb56:	0713      	lsls	r3, r2, #28
 800cb58:	bf44      	itt	mi
 800cb5a:	232b      	movmi	r3, #43	@ 0x2b
 800cb5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb60:	f89a 3000 	ldrb.w	r3, [sl]
 800cb64:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb66:	d015      	beq.n	800cb94 <_vfiprintf_r+0x120>
 800cb68:	9a07      	ldr	r2, [sp, #28]
 800cb6a:	4654      	mov	r4, sl
 800cb6c:	2000      	movs	r0, #0
 800cb6e:	f04f 0c0a 	mov.w	ip, #10
 800cb72:	4621      	mov	r1, r4
 800cb74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb78:	3b30      	subs	r3, #48	@ 0x30
 800cb7a:	2b09      	cmp	r3, #9
 800cb7c:	d94b      	bls.n	800cc16 <_vfiprintf_r+0x1a2>
 800cb7e:	b1b0      	cbz	r0, 800cbae <_vfiprintf_r+0x13a>
 800cb80:	9207      	str	r2, [sp, #28]
 800cb82:	e014      	b.n	800cbae <_vfiprintf_r+0x13a>
 800cb84:	eba0 0308 	sub.w	r3, r0, r8
 800cb88:	fa09 f303 	lsl.w	r3, r9, r3
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	9304      	str	r3, [sp, #16]
 800cb90:	46a2      	mov	sl, r4
 800cb92:	e7d2      	b.n	800cb3a <_vfiprintf_r+0xc6>
 800cb94:	9b03      	ldr	r3, [sp, #12]
 800cb96:	1d19      	adds	r1, r3, #4
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	9103      	str	r1, [sp, #12]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	bfbb      	ittet	lt
 800cba0:	425b      	neglt	r3, r3
 800cba2:	f042 0202 	orrlt.w	r2, r2, #2
 800cba6:	9307      	strge	r3, [sp, #28]
 800cba8:	9307      	strlt	r3, [sp, #28]
 800cbaa:	bfb8      	it	lt
 800cbac:	9204      	strlt	r2, [sp, #16]
 800cbae:	7823      	ldrb	r3, [r4, #0]
 800cbb0:	2b2e      	cmp	r3, #46	@ 0x2e
 800cbb2:	d10a      	bne.n	800cbca <_vfiprintf_r+0x156>
 800cbb4:	7863      	ldrb	r3, [r4, #1]
 800cbb6:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbb8:	d132      	bne.n	800cc20 <_vfiprintf_r+0x1ac>
 800cbba:	9b03      	ldr	r3, [sp, #12]
 800cbbc:	1d1a      	adds	r2, r3, #4
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	9203      	str	r2, [sp, #12]
 800cbc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cbc6:	3402      	adds	r4, #2
 800cbc8:	9305      	str	r3, [sp, #20]
 800cbca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cca0 <_vfiprintf_r+0x22c>
 800cbce:	7821      	ldrb	r1, [r4, #0]
 800cbd0:	2203      	movs	r2, #3
 800cbd2:	4650      	mov	r0, sl
 800cbd4:	f7f3 fafc 	bl	80001d0 <memchr>
 800cbd8:	b138      	cbz	r0, 800cbea <_vfiprintf_r+0x176>
 800cbda:	9b04      	ldr	r3, [sp, #16]
 800cbdc:	eba0 000a 	sub.w	r0, r0, sl
 800cbe0:	2240      	movs	r2, #64	@ 0x40
 800cbe2:	4082      	lsls	r2, r0
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	3401      	adds	r4, #1
 800cbe8:	9304      	str	r3, [sp, #16]
 800cbea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbee:	4829      	ldr	r0, [pc, #164]	@ (800cc94 <_vfiprintf_r+0x220>)
 800cbf0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cbf4:	2206      	movs	r2, #6
 800cbf6:	f7f3 faeb 	bl	80001d0 <memchr>
 800cbfa:	2800      	cmp	r0, #0
 800cbfc:	d03f      	beq.n	800cc7e <_vfiprintf_r+0x20a>
 800cbfe:	4b26      	ldr	r3, [pc, #152]	@ (800cc98 <_vfiprintf_r+0x224>)
 800cc00:	bb1b      	cbnz	r3, 800cc4a <_vfiprintf_r+0x1d6>
 800cc02:	9b03      	ldr	r3, [sp, #12]
 800cc04:	3307      	adds	r3, #7
 800cc06:	f023 0307 	bic.w	r3, r3, #7
 800cc0a:	3308      	adds	r3, #8
 800cc0c:	9303      	str	r3, [sp, #12]
 800cc0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc10:	443b      	add	r3, r7
 800cc12:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc14:	e76a      	b.n	800caec <_vfiprintf_r+0x78>
 800cc16:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc1a:	460c      	mov	r4, r1
 800cc1c:	2001      	movs	r0, #1
 800cc1e:	e7a8      	b.n	800cb72 <_vfiprintf_r+0xfe>
 800cc20:	2300      	movs	r3, #0
 800cc22:	3401      	adds	r4, #1
 800cc24:	9305      	str	r3, [sp, #20]
 800cc26:	4619      	mov	r1, r3
 800cc28:	f04f 0c0a 	mov.w	ip, #10
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc32:	3a30      	subs	r2, #48	@ 0x30
 800cc34:	2a09      	cmp	r2, #9
 800cc36:	d903      	bls.n	800cc40 <_vfiprintf_r+0x1cc>
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d0c6      	beq.n	800cbca <_vfiprintf_r+0x156>
 800cc3c:	9105      	str	r1, [sp, #20]
 800cc3e:	e7c4      	b.n	800cbca <_vfiprintf_r+0x156>
 800cc40:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc44:	4604      	mov	r4, r0
 800cc46:	2301      	movs	r3, #1
 800cc48:	e7f0      	b.n	800cc2c <_vfiprintf_r+0x1b8>
 800cc4a:	ab03      	add	r3, sp, #12
 800cc4c:	9300      	str	r3, [sp, #0]
 800cc4e:	462a      	mov	r2, r5
 800cc50:	4b12      	ldr	r3, [pc, #72]	@ (800cc9c <_vfiprintf_r+0x228>)
 800cc52:	a904      	add	r1, sp, #16
 800cc54:	4630      	mov	r0, r6
 800cc56:	f7fd fbdb 	bl	800a410 <_printf_float>
 800cc5a:	4607      	mov	r7, r0
 800cc5c:	1c78      	adds	r0, r7, #1
 800cc5e:	d1d6      	bne.n	800cc0e <_vfiprintf_r+0x19a>
 800cc60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc62:	07d9      	lsls	r1, r3, #31
 800cc64:	d405      	bmi.n	800cc72 <_vfiprintf_r+0x1fe>
 800cc66:	89ab      	ldrh	r3, [r5, #12]
 800cc68:	059a      	lsls	r2, r3, #22
 800cc6a:	d402      	bmi.n	800cc72 <_vfiprintf_r+0x1fe>
 800cc6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc6e:	f7fe f8a1 	bl	800adb4 <__retarget_lock_release_recursive>
 800cc72:	89ab      	ldrh	r3, [r5, #12]
 800cc74:	065b      	lsls	r3, r3, #25
 800cc76:	f53f af1f 	bmi.w	800cab8 <_vfiprintf_r+0x44>
 800cc7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc7c:	e71e      	b.n	800cabc <_vfiprintf_r+0x48>
 800cc7e:	ab03      	add	r3, sp, #12
 800cc80:	9300      	str	r3, [sp, #0]
 800cc82:	462a      	mov	r2, r5
 800cc84:	4b05      	ldr	r3, [pc, #20]	@ (800cc9c <_vfiprintf_r+0x228>)
 800cc86:	a904      	add	r1, sp, #16
 800cc88:	4630      	mov	r0, r6
 800cc8a:	f7fd fe59 	bl	800a940 <_printf_i>
 800cc8e:	e7e4      	b.n	800cc5a <_vfiprintf_r+0x1e6>
 800cc90:	0800d129 	.word	0x0800d129
 800cc94:	0800d133 	.word	0x0800d133
 800cc98:	0800a411 	.word	0x0800a411
 800cc9c:	0800ca4f 	.word	0x0800ca4f
 800cca0:	0800d12f 	.word	0x0800d12f

0800cca4 <__swbuf_r>:
 800cca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cca6:	460e      	mov	r6, r1
 800cca8:	4614      	mov	r4, r2
 800ccaa:	4605      	mov	r5, r0
 800ccac:	b118      	cbz	r0, 800ccb6 <__swbuf_r+0x12>
 800ccae:	6a03      	ldr	r3, [r0, #32]
 800ccb0:	b90b      	cbnz	r3, 800ccb6 <__swbuf_r+0x12>
 800ccb2:	f7fe f811 	bl	800acd8 <__sinit>
 800ccb6:	69a3      	ldr	r3, [r4, #24]
 800ccb8:	60a3      	str	r3, [r4, #8]
 800ccba:	89a3      	ldrh	r3, [r4, #12]
 800ccbc:	071a      	lsls	r2, r3, #28
 800ccbe:	d501      	bpl.n	800ccc4 <__swbuf_r+0x20>
 800ccc0:	6923      	ldr	r3, [r4, #16]
 800ccc2:	b943      	cbnz	r3, 800ccd6 <__swbuf_r+0x32>
 800ccc4:	4621      	mov	r1, r4
 800ccc6:	4628      	mov	r0, r5
 800ccc8:	f000 f82a 	bl	800cd20 <__swsetup_r>
 800cccc:	b118      	cbz	r0, 800ccd6 <__swbuf_r+0x32>
 800ccce:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ccd2:	4638      	mov	r0, r7
 800ccd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccd6:	6823      	ldr	r3, [r4, #0]
 800ccd8:	6922      	ldr	r2, [r4, #16]
 800ccda:	1a98      	subs	r0, r3, r2
 800ccdc:	6963      	ldr	r3, [r4, #20]
 800ccde:	b2f6      	uxtb	r6, r6
 800cce0:	4283      	cmp	r3, r0
 800cce2:	4637      	mov	r7, r6
 800cce4:	dc05      	bgt.n	800ccf2 <__swbuf_r+0x4e>
 800cce6:	4621      	mov	r1, r4
 800cce8:	4628      	mov	r0, r5
 800ccea:	f7ff f937 	bl	800bf5c <_fflush_r>
 800ccee:	2800      	cmp	r0, #0
 800ccf0:	d1ed      	bne.n	800ccce <__swbuf_r+0x2a>
 800ccf2:	68a3      	ldr	r3, [r4, #8]
 800ccf4:	3b01      	subs	r3, #1
 800ccf6:	60a3      	str	r3, [r4, #8]
 800ccf8:	6823      	ldr	r3, [r4, #0]
 800ccfa:	1c5a      	adds	r2, r3, #1
 800ccfc:	6022      	str	r2, [r4, #0]
 800ccfe:	701e      	strb	r6, [r3, #0]
 800cd00:	6962      	ldr	r2, [r4, #20]
 800cd02:	1c43      	adds	r3, r0, #1
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d004      	beq.n	800cd12 <__swbuf_r+0x6e>
 800cd08:	89a3      	ldrh	r3, [r4, #12]
 800cd0a:	07db      	lsls	r3, r3, #31
 800cd0c:	d5e1      	bpl.n	800ccd2 <__swbuf_r+0x2e>
 800cd0e:	2e0a      	cmp	r6, #10
 800cd10:	d1df      	bne.n	800ccd2 <__swbuf_r+0x2e>
 800cd12:	4621      	mov	r1, r4
 800cd14:	4628      	mov	r0, r5
 800cd16:	f7ff f921 	bl	800bf5c <_fflush_r>
 800cd1a:	2800      	cmp	r0, #0
 800cd1c:	d0d9      	beq.n	800ccd2 <__swbuf_r+0x2e>
 800cd1e:	e7d6      	b.n	800ccce <__swbuf_r+0x2a>

0800cd20 <__swsetup_r>:
 800cd20:	b538      	push	{r3, r4, r5, lr}
 800cd22:	4b29      	ldr	r3, [pc, #164]	@ (800cdc8 <__swsetup_r+0xa8>)
 800cd24:	4605      	mov	r5, r0
 800cd26:	6818      	ldr	r0, [r3, #0]
 800cd28:	460c      	mov	r4, r1
 800cd2a:	b118      	cbz	r0, 800cd34 <__swsetup_r+0x14>
 800cd2c:	6a03      	ldr	r3, [r0, #32]
 800cd2e:	b90b      	cbnz	r3, 800cd34 <__swsetup_r+0x14>
 800cd30:	f7fd ffd2 	bl	800acd8 <__sinit>
 800cd34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd38:	0719      	lsls	r1, r3, #28
 800cd3a:	d422      	bmi.n	800cd82 <__swsetup_r+0x62>
 800cd3c:	06da      	lsls	r2, r3, #27
 800cd3e:	d407      	bmi.n	800cd50 <__swsetup_r+0x30>
 800cd40:	2209      	movs	r2, #9
 800cd42:	602a      	str	r2, [r5, #0]
 800cd44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd48:	81a3      	strh	r3, [r4, #12]
 800cd4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cd4e:	e033      	b.n	800cdb8 <__swsetup_r+0x98>
 800cd50:	0758      	lsls	r0, r3, #29
 800cd52:	d512      	bpl.n	800cd7a <__swsetup_r+0x5a>
 800cd54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd56:	b141      	cbz	r1, 800cd6a <__swsetup_r+0x4a>
 800cd58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd5c:	4299      	cmp	r1, r3
 800cd5e:	d002      	beq.n	800cd66 <__swsetup_r+0x46>
 800cd60:	4628      	mov	r0, r5
 800cd62:	f7ff fdd3 	bl	800c90c <_free_r>
 800cd66:	2300      	movs	r3, #0
 800cd68:	6363      	str	r3, [r4, #52]	@ 0x34
 800cd6a:	89a3      	ldrh	r3, [r4, #12]
 800cd6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cd70:	81a3      	strh	r3, [r4, #12]
 800cd72:	2300      	movs	r3, #0
 800cd74:	6063      	str	r3, [r4, #4]
 800cd76:	6923      	ldr	r3, [r4, #16]
 800cd78:	6023      	str	r3, [r4, #0]
 800cd7a:	89a3      	ldrh	r3, [r4, #12]
 800cd7c:	f043 0308 	orr.w	r3, r3, #8
 800cd80:	81a3      	strh	r3, [r4, #12]
 800cd82:	6923      	ldr	r3, [r4, #16]
 800cd84:	b94b      	cbnz	r3, 800cd9a <__swsetup_r+0x7a>
 800cd86:	89a3      	ldrh	r3, [r4, #12]
 800cd88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cd8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd90:	d003      	beq.n	800cd9a <__swsetup_r+0x7a>
 800cd92:	4621      	mov	r1, r4
 800cd94:	4628      	mov	r0, r5
 800cd96:	f000 f83f 	bl	800ce18 <__smakebuf_r>
 800cd9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd9e:	f013 0201 	ands.w	r2, r3, #1
 800cda2:	d00a      	beq.n	800cdba <__swsetup_r+0x9a>
 800cda4:	2200      	movs	r2, #0
 800cda6:	60a2      	str	r2, [r4, #8]
 800cda8:	6962      	ldr	r2, [r4, #20]
 800cdaa:	4252      	negs	r2, r2
 800cdac:	61a2      	str	r2, [r4, #24]
 800cdae:	6922      	ldr	r2, [r4, #16]
 800cdb0:	b942      	cbnz	r2, 800cdc4 <__swsetup_r+0xa4>
 800cdb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cdb6:	d1c5      	bne.n	800cd44 <__swsetup_r+0x24>
 800cdb8:	bd38      	pop	{r3, r4, r5, pc}
 800cdba:	0799      	lsls	r1, r3, #30
 800cdbc:	bf58      	it	pl
 800cdbe:	6962      	ldrpl	r2, [r4, #20]
 800cdc0:	60a2      	str	r2, [r4, #8]
 800cdc2:	e7f4      	b.n	800cdae <__swsetup_r+0x8e>
 800cdc4:	2000      	movs	r0, #0
 800cdc6:	e7f7      	b.n	800cdb8 <__swsetup_r+0x98>
 800cdc8:	20000114 	.word	0x20000114

0800cdcc <__swhatbuf_r>:
 800cdcc:	b570      	push	{r4, r5, r6, lr}
 800cdce:	460c      	mov	r4, r1
 800cdd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdd4:	2900      	cmp	r1, #0
 800cdd6:	b096      	sub	sp, #88	@ 0x58
 800cdd8:	4615      	mov	r5, r2
 800cdda:	461e      	mov	r6, r3
 800cddc:	da0d      	bge.n	800cdfa <__swhatbuf_r+0x2e>
 800cdde:	89a3      	ldrh	r3, [r4, #12]
 800cde0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cde4:	f04f 0100 	mov.w	r1, #0
 800cde8:	bf14      	ite	ne
 800cdea:	2340      	movne	r3, #64	@ 0x40
 800cdec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cdf0:	2000      	movs	r0, #0
 800cdf2:	6031      	str	r1, [r6, #0]
 800cdf4:	602b      	str	r3, [r5, #0]
 800cdf6:	b016      	add	sp, #88	@ 0x58
 800cdf8:	bd70      	pop	{r4, r5, r6, pc}
 800cdfa:	466a      	mov	r2, sp
 800cdfc:	f000 f848 	bl	800ce90 <_fstat_r>
 800ce00:	2800      	cmp	r0, #0
 800ce02:	dbec      	blt.n	800cdde <__swhatbuf_r+0x12>
 800ce04:	9901      	ldr	r1, [sp, #4]
 800ce06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ce0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ce0e:	4259      	negs	r1, r3
 800ce10:	4159      	adcs	r1, r3
 800ce12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ce16:	e7eb      	b.n	800cdf0 <__swhatbuf_r+0x24>

0800ce18 <__smakebuf_r>:
 800ce18:	898b      	ldrh	r3, [r1, #12]
 800ce1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce1c:	079d      	lsls	r5, r3, #30
 800ce1e:	4606      	mov	r6, r0
 800ce20:	460c      	mov	r4, r1
 800ce22:	d507      	bpl.n	800ce34 <__smakebuf_r+0x1c>
 800ce24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ce28:	6023      	str	r3, [r4, #0]
 800ce2a:	6123      	str	r3, [r4, #16]
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	6163      	str	r3, [r4, #20]
 800ce30:	b003      	add	sp, #12
 800ce32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce34:	ab01      	add	r3, sp, #4
 800ce36:	466a      	mov	r2, sp
 800ce38:	f7ff ffc8 	bl	800cdcc <__swhatbuf_r>
 800ce3c:	9f00      	ldr	r7, [sp, #0]
 800ce3e:	4605      	mov	r5, r0
 800ce40:	4639      	mov	r1, r7
 800ce42:	4630      	mov	r0, r6
 800ce44:	f7fe ff86 	bl	800bd54 <_malloc_r>
 800ce48:	b948      	cbnz	r0, 800ce5e <__smakebuf_r+0x46>
 800ce4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce4e:	059a      	lsls	r2, r3, #22
 800ce50:	d4ee      	bmi.n	800ce30 <__smakebuf_r+0x18>
 800ce52:	f023 0303 	bic.w	r3, r3, #3
 800ce56:	f043 0302 	orr.w	r3, r3, #2
 800ce5a:	81a3      	strh	r3, [r4, #12]
 800ce5c:	e7e2      	b.n	800ce24 <__smakebuf_r+0xc>
 800ce5e:	89a3      	ldrh	r3, [r4, #12]
 800ce60:	6020      	str	r0, [r4, #0]
 800ce62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce66:	81a3      	strh	r3, [r4, #12]
 800ce68:	9b01      	ldr	r3, [sp, #4]
 800ce6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ce6e:	b15b      	cbz	r3, 800ce88 <__smakebuf_r+0x70>
 800ce70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce74:	4630      	mov	r0, r6
 800ce76:	f000 f81d 	bl	800ceb4 <_isatty_r>
 800ce7a:	b128      	cbz	r0, 800ce88 <__smakebuf_r+0x70>
 800ce7c:	89a3      	ldrh	r3, [r4, #12]
 800ce7e:	f023 0303 	bic.w	r3, r3, #3
 800ce82:	f043 0301 	orr.w	r3, r3, #1
 800ce86:	81a3      	strh	r3, [r4, #12]
 800ce88:	89a3      	ldrh	r3, [r4, #12]
 800ce8a:	431d      	orrs	r5, r3
 800ce8c:	81a5      	strh	r5, [r4, #12]
 800ce8e:	e7cf      	b.n	800ce30 <__smakebuf_r+0x18>

0800ce90 <_fstat_r>:
 800ce90:	b538      	push	{r3, r4, r5, lr}
 800ce92:	4d07      	ldr	r5, [pc, #28]	@ (800ceb0 <_fstat_r+0x20>)
 800ce94:	2300      	movs	r3, #0
 800ce96:	4604      	mov	r4, r0
 800ce98:	4608      	mov	r0, r1
 800ce9a:	4611      	mov	r1, r2
 800ce9c:	602b      	str	r3, [r5, #0]
 800ce9e:	f7f5 f973 	bl	8002188 <_fstat>
 800cea2:	1c43      	adds	r3, r0, #1
 800cea4:	d102      	bne.n	800ceac <_fstat_r+0x1c>
 800cea6:	682b      	ldr	r3, [r5, #0]
 800cea8:	b103      	cbz	r3, 800ceac <_fstat_r+0x1c>
 800ceaa:	6023      	str	r3, [r4, #0]
 800ceac:	bd38      	pop	{r3, r4, r5, pc}
 800ceae:	bf00      	nop
 800ceb0:	20002310 	.word	0x20002310

0800ceb4 <_isatty_r>:
 800ceb4:	b538      	push	{r3, r4, r5, lr}
 800ceb6:	4d06      	ldr	r5, [pc, #24]	@ (800ced0 <_isatty_r+0x1c>)
 800ceb8:	2300      	movs	r3, #0
 800ceba:	4604      	mov	r4, r0
 800cebc:	4608      	mov	r0, r1
 800cebe:	602b      	str	r3, [r5, #0]
 800cec0:	f7f5 f972 	bl	80021a8 <_isatty>
 800cec4:	1c43      	adds	r3, r0, #1
 800cec6:	d102      	bne.n	800cece <_isatty_r+0x1a>
 800cec8:	682b      	ldr	r3, [r5, #0]
 800ceca:	b103      	cbz	r3, 800cece <_isatty_r+0x1a>
 800cecc:	6023      	str	r3, [r4, #0]
 800cece:	bd38      	pop	{r3, r4, r5, pc}
 800ced0:	20002310 	.word	0x20002310

0800ced4 <_raise_r>:
 800ced4:	291f      	cmp	r1, #31
 800ced6:	b538      	push	{r3, r4, r5, lr}
 800ced8:	4605      	mov	r5, r0
 800ceda:	460c      	mov	r4, r1
 800cedc:	d904      	bls.n	800cee8 <_raise_r+0x14>
 800cede:	2316      	movs	r3, #22
 800cee0:	6003      	str	r3, [r0, #0]
 800cee2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cee6:	bd38      	pop	{r3, r4, r5, pc}
 800cee8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ceea:	b112      	cbz	r2, 800cef2 <_raise_r+0x1e>
 800ceec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cef0:	b94b      	cbnz	r3, 800cf06 <_raise_r+0x32>
 800cef2:	4628      	mov	r0, r5
 800cef4:	f000 f830 	bl	800cf58 <_getpid_r>
 800cef8:	4622      	mov	r2, r4
 800cefa:	4601      	mov	r1, r0
 800cefc:	4628      	mov	r0, r5
 800cefe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cf02:	f000 b817 	b.w	800cf34 <_kill_r>
 800cf06:	2b01      	cmp	r3, #1
 800cf08:	d00a      	beq.n	800cf20 <_raise_r+0x4c>
 800cf0a:	1c59      	adds	r1, r3, #1
 800cf0c:	d103      	bne.n	800cf16 <_raise_r+0x42>
 800cf0e:	2316      	movs	r3, #22
 800cf10:	6003      	str	r3, [r0, #0]
 800cf12:	2001      	movs	r0, #1
 800cf14:	e7e7      	b.n	800cee6 <_raise_r+0x12>
 800cf16:	2100      	movs	r1, #0
 800cf18:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cf1c:	4620      	mov	r0, r4
 800cf1e:	4798      	blx	r3
 800cf20:	2000      	movs	r0, #0
 800cf22:	e7e0      	b.n	800cee6 <_raise_r+0x12>

0800cf24 <raise>:
 800cf24:	4b02      	ldr	r3, [pc, #8]	@ (800cf30 <raise+0xc>)
 800cf26:	4601      	mov	r1, r0
 800cf28:	6818      	ldr	r0, [r3, #0]
 800cf2a:	f7ff bfd3 	b.w	800ced4 <_raise_r>
 800cf2e:	bf00      	nop
 800cf30:	20000114 	.word	0x20000114

0800cf34 <_kill_r>:
 800cf34:	b538      	push	{r3, r4, r5, lr}
 800cf36:	4d07      	ldr	r5, [pc, #28]	@ (800cf54 <_kill_r+0x20>)
 800cf38:	2300      	movs	r3, #0
 800cf3a:	4604      	mov	r4, r0
 800cf3c:	4608      	mov	r0, r1
 800cf3e:	4611      	mov	r1, r2
 800cf40:	602b      	str	r3, [r5, #0]
 800cf42:	f7f5 f8c1 	bl	80020c8 <_kill>
 800cf46:	1c43      	adds	r3, r0, #1
 800cf48:	d102      	bne.n	800cf50 <_kill_r+0x1c>
 800cf4a:	682b      	ldr	r3, [r5, #0]
 800cf4c:	b103      	cbz	r3, 800cf50 <_kill_r+0x1c>
 800cf4e:	6023      	str	r3, [r4, #0]
 800cf50:	bd38      	pop	{r3, r4, r5, pc}
 800cf52:	bf00      	nop
 800cf54:	20002310 	.word	0x20002310

0800cf58 <_getpid_r>:
 800cf58:	f7f5 b8ae 	b.w	80020b8 <_getpid>

0800cf5c <_init>:
 800cf5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf5e:	bf00      	nop
 800cf60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf62:	bc08      	pop	{r3}
 800cf64:	469e      	mov	lr, r3
 800cf66:	4770      	bx	lr

0800cf68 <_fini>:
 800cf68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf6a:	bf00      	nop
 800cf6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf6e:	bc08      	pop	{r3}
 800cf70:	469e      	mov	lr, r3
 800cf72:	4770      	bx	lr
