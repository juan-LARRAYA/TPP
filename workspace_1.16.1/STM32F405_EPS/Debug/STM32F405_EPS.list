
STM32F405_EPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c0c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08009da0  08009da0  0000ada0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a210  0800a210  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a210  0800a210  0000b210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a218  0800a218  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a218  0800a218  0000b218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a21c  0800a21c  0000b21c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a220  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1d4  2**0
                  CONTENTS
 10 .bss          000008c8  200001d4  200001d4  0000c1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a9c  20000a9c  0000c1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019741  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d20  00000000  00000000  00025945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001600  00000000  00000000  00029668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000111d  00000000  00000000  0002ac68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c24  00000000  00000000  0002bd85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000203b6  00000000  00000000  000509a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d46ff  00000000  00000000  00070d5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014545e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e40  00000000  00000000  001454a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0014c2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009d84 	.word	0x08009d84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08009d84 	.word	0x08009d84

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ede:	463b      	mov	r3, r7
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eea:	4b7c      	ldr	r3, [pc, #496]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000eec:	4a7c      	ldr	r2, [pc, #496]	@ (80010e0 <MX_ADC1_Init+0x208>)
 8000eee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ef0:	4b7a      	ldr	r3, [pc, #488]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef6:	4b79      	ldr	r3, [pc, #484]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000efc:	4b77      	ldr	r3, [pc, #476]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f02:	4b76      	ldr	r3, [pc, #472]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f08:	4b74      	ldr	r3, [pc, #464]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f10:	4b72      	ldr	r3, [pc, #456]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f16:	4b71      	ldr	r3, [pc, #452]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f18:	4a72      	ldr	r2, [pc, #456]	@ (80010e4 <MX_ADC1_Init+0x20c>)
 8000f1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1c:	4b6f      	ldr	r3, [pc, #444]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8000f22:	4b6e      	ldr	r3, [pc, #440]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f24:	220e      	movs	r2, #14
 8000f26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f28:	4b6c      	ldr	r3, [pc, #432]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f30:	4b6a      	ldr	r3, [pc, #424]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f36:	4869      	ldr	r0, [pc, #420]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f38:	f001 fcf0 	bl	800291c <HAL_ADC_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f42:	f000 ff19 	bl	8001d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f46:	2301      	movs	r3, #1
 8000f48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f4e:	2307      	movs	r3, #7
 8000f50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f52:	463b      	mov	r3, r7
 8000f54:	4619      	mov	r1, r3
 8000f56:	4861      	ldr	r0, [pc, #388]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f58:	f001 ff62 	bl	8002e20 <HAL_ADC_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f62:	f000 ff09 	bl	8001d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f66:	2302      	movs	r3, #2
 8000f68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4619      	mov	r1, r3
 8000f72:	485a      	ldr	r0, [pc, #360]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f74:	f001 ff54 	bl	8002e20 <HAL_ADC_ConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f7e:	f000 fefb 	bl	8001d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f82:	2304      	movs	r3, #4
 8000f84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f86:	2303      	movs	r3, #3
 8000f88:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4853      	ldr	r0, [pc, #332]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f90:	f001 ff46 	bl	8002e20 <HAL_ADC_ConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000f9a:	f000 feed 	bl	8001d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f9e:	2305      	movs	r3, #5
 8000fa0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	4619      	mov	r1, r3
 8000faa:	484c      	ldr	r0, [pc, #304]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000fac:	f001 ff38 	bl	8002e20 <HAL_ADC_ConfigChannel>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000fb6:	f000 fedf 	bl	8001d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fba:	2306      	movs	r3, #6
 8000fbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000fbe:	2305      	movs	r3, #5
 8000fc0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4845      	ldr	r0, [pc, #276]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000fc8:	f001 ff2a 	bl	8002e20 <HAL_ADC_ConfigChannel>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000fd2:	f000 fed1 	bl	8001d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000fda:	2306      	movs	r3, #6
 8000fdc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fde:	463b      	mov	r3, r7
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	483e      	ldr	r0, [pc, #248]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000fe4:	f001 ff1c 	bl	8002e20 <HAL_ADC_ConfigChannel>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000fee:	f000 fec3 	bl	8001d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000ff6:	2307      	movs	r3, #7
 8000ff8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4837      	ldr	r0, [pc, #220]	@ (80010dc <MX_ADC1_Init+0x204>)
 8001000:	f001 ff0e 	bl	8002e20 <HAL_ADC_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 800100a:	f000 feb5 	bl	8001d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800100e:	2309      	movs	r3, #9
 8001010:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001012:	2308      	movs	r3, #8
 8001014:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001016:	463b      	mov	r3, r7
 8001018:	4619      	mov	r1, r3
 800101a:	4830      	ldr	r0, [pc, #192]	@ (80010dc <MX_ADC1_Init+0x204>)
 800101c:	f001 ff00 	bl	8002e20 <HAL_ADC_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8001026:	f000 fea7 	bl	8001d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800102a:	230a      	movs	r3, #10
 800102c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800102e:	2309      	movs	r3, #9
 8001030:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001032:	463b      	mov	r3, r7
 8001034:	4619      	mov	r1, r3
 8001036:	4829      	ldr	r0, [pc, #164]	@ (80010dc <MX_ADC1_Init+0x204>)
 8001038:	f001 fef2 	bl	8002e20 <HAL_ADC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8001042:	f000 fe99 	bl	8001d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001046:	230b      	movs	r3, #11
 8001048:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 800104a:	230a      	movs	r3, #10
 800104c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800104e:	463b      	mov	r3, r7
 8001050:	4619      	mov	r1, r3
 8001052:	4822      	ldr	r0, [pc, #136]	@ (80010dc <MX_ADC1_Init+0x204>)
 8001054:	f001 fee4 	bl	8002e20 <HAL_ADC_ConfigChannel>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 800105e:	f000 fe8b 	bl	8001d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001062:	230c      	movs	r3, #12
 8001064:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001066:	230b      	movs	r3, #11
 8001068:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	4619      	mov	r1, r3
 800106e:	481b      	ldr	r0, [pc, #108]	@ (80010dc <MX_ADC1_Init+0x204>)
 8001070:	f001 fed6 	bl	8002e20 <HAL_ADC_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0x1a6>
  {
    Error_Handler();
 800107a:	f000 fe7d 	bl	8001d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800107e:	230d      	movs	r3, #13
 8001080:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001082:	230c      	movs	r3, #12
 8001084:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	4814      	ldr	r0, [pc, #80]	@ (80010dc <MX_ADC1_Init+0x204>)
 800108c:	f001 fec8 	bl	8002e20 <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0x1c2>
  {
    Error_Handler();
 8001096:	f000 fe6f 	bl	8001d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800109a:	230e      	movs	r3, #14
 800109c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800109e:	230d      	movs	r3, #13
 80010a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	4619      	mov	r1, r3
 80010a6:	480d      	ldr	r0, [pc, #52]	@ (80010dc <MX_ADC1_Init+0x204>)
 80010a8:	f001 feba 	bl	8002e20 <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0x1de>
  {
    Error_Handler();
 80010b2:	f000 fe61 	bl	8001d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80010b6:	230f      	movs	r3, #15
 80010b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80010ba:	230e      	movs	r3, #14
 80010bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010be:	463b      	mov	r3, r7
 80010c0:	4619      	mov	r1, r3
 80010c2:	4806      	ldr	r0, [pc, #24]	@ (80010dc <MX_ADC1_Init+0x204>)
 80010c4:	f001 feac 	bl	8002e20 <HAL_ADC_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC1_Init+0x1fa>
  {
    Error_Handler();
 80010ce:	f000 fe53 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200001f0 	.word	0x200001f0
 80010e0:	40012000 	.word	0x40012000
 80010e4:	0f000001 	.word	0x0f000001

080010e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	@ 0x30
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a4d      	ldr	r2, [pc, #308]	@ (800123c <HAL_ADC_MspInit+0x154>)
 8001106:	4293      	cmp	r3, r2
 8001108:	f040 8094 	bne.w	8001234 <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
 8001110:	4b4b      	ldr	r3, [pc, #300]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 8001112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001114:	4a4a      	ldr	r2, [pc, #296]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 8001116:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800111a:	6453      	str	r3, [r2, #68]	@ 0x44
 800111c:	4b48      	ldr	r3, [pc, #288]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 800111e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	4b44      	ldr	r3, [pc, #272]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001130:	4a43      	ldr	r2, [pc, #268]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 8001132:	f043 0304 	orr.w	r3, r3, #4
 8001136:	6313      	str	r3, [r2, #48]	@ 0x30
 8001138:	4b41      	ldr	r3, [pc, #260]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	4b3d      	ldr	r3, [pc, #244]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114c:	4a3c      	ldr	r2, [pc, #240]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6313      	str	r3, [r2, #48]	@ 0x30
 8001154:	4b3a      	ldr	r3, [pc, #232]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	4b36      	ldr	r3, [pc, #216]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001168:	4a35      	ldr	r2, [pc, #212]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 800116a:	f043 0302 	orr.w	r3, r3, #2
 800116e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001170:	4b33      	ldr	r3, [pc, #204]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800117c:	233f      	movs	r3, #63	@ 0x3f
 800117e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001180:	2303      	movs	r3, #3
 8001182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	482d      	ldr	r0, [pc, #180]	@ (8001244 <HAL_ADC_MspInit+0x15c>)
 8001190:	f002 fd72 	bl	8003c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8001194:	23f6      	movs	r3, #246	@ 0xf6
 8001196:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001198:	2303      	movs	r3, #3
 800119a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	4828      	ldr	r0, [pc, #160]	@ (8001248 <HAL_ADC_MspInit+0x160>)
 80011a8:	f002 fd66 	bl	8003c78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011ac:	2303      	movs	r3, #3
 80011ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b0:	2303      	movs	r3, #3
 80011b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b8:	f107 031c 	add.w	r3, r7, #28
 80011bc:	4619      	mov	r1, r3
 80011be:	4823      	ldr	r0, [pc, #140]	@ (800124c <HAL_ADC_MspInit+0x164>)
 80011c0:	f002 fd5a 	bl	8003c78 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011c4:	4b22      	ldr	r3, [pc, #136]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011c6:	4a23      	ldr	r2, [pc, #140]	@ (8001254 <HAL_ADC_MspInit+0x16c>)
 80011c8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011ca:	4b21      	ldr	r3, [pc, #132]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011ec:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011f2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011f4:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011fa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011fc:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011fe:	2200      	movs	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001202:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 8001204:	2200      	movs	r2, #0
 8001206:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001208:	4811      	ldr	r0, [pc, #68]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 800120a:	f002 f9c5 	bl	8003598 <HAL_DMA_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001214:	f000 fdb0 	bl	8001d78 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a0d      	ldr	r2, [pc, #52]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 800121c:	639a      	str	r2, [r3, #56]	@ 0x38
 800121e:	4a0c      	ldr	r2, [pc, #48]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001224:	2200      	movs	r2, #0
 8001226:	2100      	movs	r1, #0
 8001228:	2012      	movs	r0, #18
 800122a:	f002 f97e 	bl	800352a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800122e:	2012      	movs	r0, #18
 8001230:	f002 f997 	bl	8003562 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001234:	bf00      	nop
 8001236:	3730      	adds	r7, #48	@ 0x30
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40012000 	.word	0x40012000
 8001240:	40023800 	.word	0x40023800
 8001244:	40020800 	.word	0x40020800
 8001248:	40020000 	.word	0x40020000
 800124c:	40020400 	.word	0x40020400
 8001250:	20000238 	.word	0x20000238
 8001254:	40026410 	.word	0x40026410

08001258 <currentScale>:
  /* USER CODE END ADC1_MspDeInit 1 */
  }
}


uint16_t currentScale(uint16_t rawValue){
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	4603      	mov	r3, r0
 8001260:	80fb      	strh	r3, [r7, #6]
	  return  (uint16_t) rawValue * 0.606 * CONVERSION_FACTOR;
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f95d 	bl	8000524 <__aeabi_i2d>
 800126a:	a30d      	add	r3, pc, #52	@ (adr r3, 80012a0 <currentScale+0x48>)
 800126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001270:	f7ff f9c2 	bl	80005f8 <__aeabi_dmul>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4610      	mov	r0, r2
 800127a:	4619      	mov	r1, r3
 800127c:	a30a      	add	r3, pc, #40	@ (adr r3, 80012a8 <currentScale+0x50>)
 800127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001282:	f7ff f9b9 	bl	80005f8 <__aeabi_dmul>
 8001286:	4602      	mov	r2, r0
 8001288:	460b      	mov	r3, r1
 800128a:	4610      	mov	r0, r2
 800128c:	4619      	mov	r1, r3
 800128e:	f7ff fc8b 	bl	8000ba8 <__aeabi_d2uiz>
 8001292:	4603      	mov	r3, r0
 8001294:	b29b      	uxth	r3, r3
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	1cac0831 	.word	0x1cac0831
 80012a4:	3fe3645a 	.word	0x3fe3645a
 80012a8:	99c99c9a 	.word	0x99c99c9a
 80012ac:	3fe9c99c 	.word	0x3fe9c99c

080012b0 <voltageScale>:
uint16_t voltageScale(uint16_t rawValue){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	80fb      	strh	r3, [r7, #6]
	  return  (uint16_t) rawValue * 0.606 * CONVERSION_FACTOR;
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f931 	bl	8000524 <__aeabi_i2d>
 80012c2:	a30d      	add	r3, pc, #52	@ (adr r3, 80012f8 <voltageScale+0x48>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7ff f996 	bl	80005f8 <__aeabi_dmul>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	a30a      	add	r3, pc, #40	@ (adr r3, 8001300 <voltageScale+0x50>)
 80012d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012da:	f7ff f98d 	bl	80005f8 <__aeabi_dmul>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f7ff fc5f 	bl	8000ba8 <__aeabi_d2uiz>
 80012ea:	4603      	mov	r3, r0
 80012ec:	b29b      	uxth	r3, r3
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	1cac0831 	.word	0x1cac0831
 80012fc:	3fe3645a 	.word	0x3fe3645a
 8001300:	99c99c9a 	.word	0x99c99c9a
 8001304:	3fe9c99c 	.word	0x3fe9c99c

08001308 <INA219_ReadBusVoltage>:
    // Aquí podrías configurar registros de calibración si fuera necesario
    // Por defecto, se asume calibración 32V, 2A
}

float INA219_ReadBusVoltage(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af04      	add	r7, sp, #16
    uint8_t buffer[2];
    uint16_t raw;

    HAL_I2C_Mem_Read(&hi2c1, INA219_ADDRESS, INA219_REG_BUS_VOLTAGE, 1, buffer, 2, HAL_MAX_DELAY);
 800130e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001312:	9302      	str	r3, [sp, #8]
 8001314:	2302      	movs	r3, #2
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2301      	movs	r3, #1
 800131e:	2202      	movs	r2, #2
 8001320:	2180      	movs	r1, #128	@ 0x80
 8001322:	480e      	ldr	r0, [pc, #56]	@ (800135c <INA219_ReadBusVoltage+0x54>)
 8001324:	f003 f8a0 	bl	8004468 <HAL_I2C_Mem_Read>
    raw = (buffer[0] << 8) | buffer[1];
 8001328:	793b      	ldrb	r3, [r7, #4]
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b21a      	sxth	r2, r3
 800132e:	797b      	ldrb	r3, [r7, #5]
 8001330:	b21b      	sxth	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	b21b      	sxth	r3, r3
 8001336:	80fb      	strh	r3, [r7, #6]
    raw >>= 3;  // los 3 bits LSB no son válidos
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	08db      	lsrs	r3, r3, #3
 800133c:	80fb      	strh	r3, [r7, #6]
    return raw * 0.004f;  // resolución 4 mV
 800133e:	88fb      	ldrh	r3, [r7, #6]
 8001340:	ee07 3a90 	vmov	s15, r3
 8001344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001348:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8001360 <INA219_ReadBusVoltage+0x58>
 800134c:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001350:	eeb0 0a67 	vmov.f32	s0, s15
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000298 	.word	0x20000298
 8001360:	3b83126f 	.word	0x3b83126f

08001364 <INA219_ReadShuntVoltage>:

float INA219_ReadShuntVoltage(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af04      	add	r7, sp, #16
    uint8_t buffer[2];
    int16_t raw;

    HAL_I2C_Mem_Read(&hi2c1, INA219_ADDRESS, INA219_REG_SHUNT_VOLTAGE, 1, buffer, 2, HAL_MAX_DELAY);
 800136a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800136e:	9302      	str	r3, [sp, #8]
 8001370:	2302      	movs	r3, #2
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2301      	movs	r3, #1
 800137a:	2201      	movs	r2, #1
 800137c:	2180      	movs	r1, #128	@ 0x80
 800137e:	480c      	ldr	r0, [pc, #48]	@ (80013b0 <INA219_ReadShuntVoltage+0x4c>)
 8001380:	f003 f872 	bl	8004468 <HAL_I2C_Mem_Read>
    raw = (int16_t)((buffer[0] << 8) | buffer[1]);
 8001384:	793b      	ldrb	r3, [r7, #4]
 8001386:	021b      	lsls	r3, r3, #8
 8001388:	b21a      	sxth	r2, r3
 800138a:	797b      	ldrb	r3, [r7, #5]
 800138c:	b21b      	sxth	r3, r3
 800138e:	4313      	orrs	r3, r2
 8001390:	80fb      	strh	r3, [r7, #6]
    return raw * 0.01f;  // resolución 10 uV
 8001392:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001396:	ee07 3a90 	vmov	s15, r3
 800139a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800139e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80013b4 <INA219_ReadShuntVoltage+0x50>
 80013a2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80013a6:	eeb0 0a67 	vmov.f32	s0, s15
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000298 	.word	0x20000298
 80013b4:	3c23d70a 	.word	0x3c23d70a

080013b8 <INA219_ReadCurrent>:

float INA219_ReadCurrent(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af04      	add	r7, sp, #16
    uint8_t buffer[2];
    int16_t raw;

    HAL_I2C_Mem_Read(&hi2c1, INA219_ADDRESS, INA219_REG_CURRENT, 1, buffer, 2, HAL_MAX_DELAY);
 80013be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013c2:	9302      	str	r3, [sp, #8]
 80013c4:	2302      	movs	r3, #2
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	2301      	movs	r3, #1
 80013ce:	2204      	movs	r2, #4
 80013d0:	2180      	movs	r1, #128	@ 0x80
 80013d2:	480a      	ldr	r0, [pc, #40]	@ (80013fc <INA219_ReadCurrent+0x44>)
 80013d4:	f003 f848 	bl	8004468 <HAL_I2C_Mem_Read>
    raw = (int16_t)((buffer[0] << 8) | buffer[1]);
 80013d8:	793b      	ldrb	r3, [r7, #4]
 80013da:	021b      	lsls	r3, r3, #8
 80013dc:	b21a      	sxth	r2, r3
 80013de:	797b      	ldrb	r3, [r7, #5]
 80013e0:	b21b      	sxth	r3, r3
 80013e2:	4313      	orrs	r3, r2
 80013e4:	80fb      	strh	r3, [r7, #6]
    return raw * 1.0f;  // depende de la calibración
 80013e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ea:	ee07 3a90 	vmov	s15, r3
 80013ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80013f2:	eeb0 0a67 	vmov.f32	s0, s15
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000298 	.word	0x20000298

08001400 <INA219_ReadPower>:

float INA219_ReadPower(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af04      	add	r7, sp, #16
    uint8_t buffer[2];
    uint16_t raw;

    HAL_I2C_Mem_Read(&hi2c1, INA219_ADDRESS, INA219_REG_POWER, 1, buffer, 2, HAL_MAX_DELAY);
 8001406:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800140a:	9302      	str	r3, [sp, #8]
 800140c:	2302      	movs	r3, #2
 800140e:	9301      	str	r3, [sp, #4]
 8001410:	1d3b      	adds	r3, r7, #4
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	2301      	movs	r3, #1
 8001416:	2203      	movs	r2, #3
 8001418:	2180      	movs	r1, #128	@ 0x80
 800141a:	480c      	ldr	r0, [pc, #48]	@ (800144c <INA219_ReadPower+0x4c>)
 800141c:	f003 f824 	bl	8004468 <HAL_I2C_Mem_Read>
    raw = (buffer[0] << 8) | buffer[1];
 8001420:	793b      	ldrb	r3, [r7, #4]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	b21a      	sxth	r2, r3
 8001426:	797b      	ldrb	r3, [r7, #5]
 8001428:	b21b      	sxth	r3, r3
 800142a:	4313      	orrs	r3, r2
 800142c:	b21b      	sxth	r3, r3
 800142e:	80fb      	strh	r3, [r7, #6]
    return raw * 20.0f;  // resolución depende de calibración: 20 mW/LSB para default
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	ee07 3a90 	vmov	s15, r3
 8001436:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800143a:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 800143e:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001442:	eeb0 0a67 	vmov.f32	s0, s15
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000298 	.word	0x20000298

08001450 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <MX_DMA_Init+0x3c>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	4a0b      	ldr	r2, [pc, #44]	@ (800148c <MX_DMA_Init+0x3c>)
 8001460:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001464:	6313      	str	r3, [r2, #48]	@ 0x30
 8001466:	4b09      	ldr	r3, [pc, #36]	@ (800148c <MX_DMA_Init+0x3c>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	2038      	movs	r0, #56	@ 0x38
 8001478:	f002 f857 	bl	800352a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800147c:	2038      	movs	r0, #56	@ 0x38
 800147e:	f002 f870 	bl	8003562 <HAL_NVIC_EnableIRQ>

}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800

08001490 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b08a      	sub	sp, #40	@ 0x28
 8001494:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
 80014a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b59      	ldr	r3, [pc, #356]	@ (8001610 <MX_GPIO_Init+0x180>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	4a58      	ldr	r2, [pc, #352]	@ (8001610 <MX_GPIO_Init+0x180>)
 80014b0:	f043 0304 	orr.w	r3, r3, #4
 80014b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b6:	4b56      	ldr	r3, [pc, #344]	@ (8001610 <MX_GPIO_Init+0x180>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b52      	ldr	r3, [pc, #328]	@ (8001610 <MX_GPIO_Init+0x180>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ca:	4a51      	ldr	r2, [pc, #324]	@ (8001610 <MX_GPIO_Init+0x180>)
 80014cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d2:	4b4f      	ldr	r3, [pc, #316]	@ (8001610 <MX_GPIO_Init+0x180>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60bb      	str	r3, [r7, #8]
 80014e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001610 <MX_GPIO_Init+0x180>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a4a      	ldr	r2, [pc, #296]	@ (8001610 <MX_GPIO_Init+0x180>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b48      	ldr	r3, [pc, #288]	@ (8001610 <MX_GPIO_Init+0x180>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
 80014f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	4b44      	ldr	r3, [pc, #272]	@ (8001610 <MX_GPIO_Init+0x180>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a43      	ldr	r2, [pc, #268]	@ (8001610 <MX_GPIO_Init+0x180>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b41      	ldr	r3, [pc, #260]	@ (8001610 <MX_GPIO_Init+0x180>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	603b      	str	r3, [r7, #0]
 800151a:	4b3d      	ldr	r3, [pc, #244]	@ (8001610 <MX_GPIO_Init+0x180>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	4a3c      	ldr	r2, [pc, #240]	@ (8001610 <MX_GPIO_Init+0x180>)
 8001520:	f043 0308 	orr.w	r3, r3, #8
 8001524:	6313      	str	r3, [r2, #48]	@ 0x30
 8001526:	4b3a      	ldr	r3, [pc, #232]	@ (8001610 <MX_GPIO_Init+0x180>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Enable5V_Pin|Enable3_3VBis_Pin|Enable3_3V_Pin|Enable5VBis_Pin
 8001532:	2200      	movs	r2, #0
 8001534:	f645 4104 	movw	r1, #23556	@ 0x5c04
 8001538:	4836      	ldr	r0, [pc, #216]	@ (8001614 <MX_GPIO_Init+0x184>)
 800153a:	f002 fd39 	bl	8003fb0 <HAL_GPIO_WritePin>
                          |EnableCalefactor_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EnableBatOut_GPIO_Port, EnableBatOut_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001544:	4834      	ldr	r0, [pc, #208]	@ (8001618 <MX_GPIO_Init+0x188>)
 8001546:	f002 fd33 	bl	8003fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC7 PC8 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 800154a:	f24f 13c0 	movw	r3, #61888	@ 0xf1c0
 800154e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001550:	2303      	movs	r3, #3
 8001552:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001554:	2300      	movs	r3, #0
 8001556:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	482f      	ldr	r0, [pc, #188]	@ (800161c <MX_GPIO_Init+0x18c>)
 8001560:	f002 fb8a 	bl	8003c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Enable5V_Pin|Enable3_3VBis_Pin|Enable3_3V_Pin|Enable5VBis_Pin
 8001564:	f645 4304 	movw	r3, #23556	@ 0x5c04
 8001568:	617b      	str	r3, [r7, #20]
                          |EnableCalefactor_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800156a:	2301      	movs	r3, #1
 800156c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800156e:	2301      	movs	r3, #1
 8001570:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	4825      	ldr	r0, [pc, #148]	@ (8001614 <MX_GPIO_Init+0x184>)
 800157e:	f002 fb7b 	bl	8003c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
 8001582:	f24a 0338 	movw	r3, #41016	@ 0xa038
 8001586:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001588:	2303      	movs	r3, #3
 800158a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	4619      	mov	r1, r3
 8001596:	481f      	ldr	r0, [pc, #124]	@ (8001614 <MX_GPIO_Init+0x184>)
 8001598:	f002 fb6e 	bl	8003c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EnableBatOut_Pin;
 800159c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80015a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a6:	2301      	movs	r3, #1
 80015a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EnableBatOut_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	4818      	ldr	r0, [pc, #96]	@ (8001618 <MX_GPIO_Init+0x188>)
 80015b6:	f002 fb5f 	bl	8003c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80015ba:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 80015be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015c0:	2303      	movs	r3, #3
 80015c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	4619      	mov	r1, r3
 80015ce:	4812      	ldr	r0, [pc, #72]	@ (8001618 <MX_GPIO_Init+0x188>)
 80015d0:	f002 fb52 	bl	8003c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80015d4:	2304      	movs	r3, #4
 80015d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d8:	2303      	movs	r3, #3
 80015da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	480e      	ldr	r0, [pc, #56]	@ (8001620 <MX_GPIO_Init+0x190>)
 80015e8:	f002 fb46 	bl	8003c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMS_Alert_Pin;
 80015ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f6:	2301      	movs	r3, #1
 80015f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BMS_Alert_GPIO_Port, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	4804      	ldr	r0, [pc, #16]	@ (8001614 <MX_GPIO_Init+0x184>)
 8001602:	f002 fb39 	bl	8003c78 <HAL_GPIO_Init>

}
 8001606:	bf00      	nop
 8001608:	3728      	adds	r7, #40	@ 0x28
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800
 8001614:	40020400 	.word	0x40020400
 8001618:	40020000 	.word	0x40020000
 800161c:	40020800 	.word	0x40020800
 8001620:	40020c00 	.word	0x40020c00

08001624 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001628:	4b12      	ldr	r3, [pc, #72]	@ (8001674 <MX_I2C1_Init+0x50>)
 800162a:	4a13      	ldr	r2, [pc, #76]	@ (8001678 <MX_I2C1_Init+0x54>)
 800162c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800162e:	4b11      	ldr	r3, [pc, #68]	@ (8001674 <MX_I2C1_Init+0x50>)
 8001630:	4a12      	ldr	r2, [pc, #72]	@ (800167c <MX_I2C1_Init+0x58>)
 8001632:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001634:	4b0f      	ldr	r3, [pc, #60]	@ (8001674 <MX_I2C1_Init+0x50>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800163a:	4b0e      	ldr	r3, [pc, #56]	@ (8001674 <MX_I2C1_Init+0x50>)
 800163c:	2200      	movs	r2, #0
 800163e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001640:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <MX_I2C1_Init+0x50>)
 8001642:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001646:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001648:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <MX_I2C1_Init+0x50>)
 800164a:	2200      	movs	r2, #0
 800164c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800164e:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <MX_I2C1_Init+0x50>)
 8001650:	2200      	movs	r2, #0
 8001652:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001654:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <MX_I2C1_Init+0x50>)
 8001656:	2200      	movs	r2, #0
 8001658:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800165a:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <MX_I2C1_Init+0x50>)
 800165c:	2200      	movs	r2, #0
 800165e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001660:	4804      	ldr	r0, [pc, #16]	@ (8001674 <MX_I2C1_Init+0x50>)
 8001662:	f002 fcbf 	bl	8003fe4 <HAL_I2C_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800166c:	f000 fb84 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001670:	bf00      	nop
 8001672:	bd80      	pop	{r7, pc}
 8001674:	20000298 	.word	0x20000298
 8001678:	40005400 	.word	0x40005400
 800167c:	00061a80 	.word	0x00061a80

08001680 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001684:	4b12      	ldr	r3, [pc, #72]	@ (80016d0 <MX_I2C3_Init+0x50>)
 8001686:	4a13      	ldr	r2, [pc, #76]	@ (80016d4 <MX_I2C3_Init+0x54>)
 8001688:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800168a:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <MX_I2C3_Init+0x50>)
 800168c:	4a12      	ldr	r2, [pc, #72]	@ (80016d8 <MX_I2C3_Init+0x58>)
 800168e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001690:	4b0f      	ldr	r3, [pc, #60]	@ (80016d0 <MX_I2C3_Init+0x50>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001696:	4b0e      	ldr	r3, [pc, #56]	@ (80016d0 <MX_I2C3_Init+0x50>)
 8001698:	2200      	movs	r2, #0
 800169a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800169c:	4b0c      	ldr	r3, [pc, #48]	@ (80016d0 <MX_I2C3_Init+0x50>)
 800169e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016a2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a4:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <MX_I2C3_Init+0x50>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80016aa:	4b09      	ldr	r3, [pc, #36]	@ (80016d0 <MX_I2C3_Init+0x50>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016b0:	4b07      	ldr	r3, [pc, #28]	@ (80016d0 <MX_I2C3_Init+0x50>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016b6:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <MX_I2C3_Init+0x50>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80016bc:	4804      	ldr	r0, [pc, #16]	@ (80016d0 <MX_I2C3_Init+0x50>)
 80016be:	f002 fc91 	bl	8003fe4 <HAL_I2C_Init>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80016c8:	f000 fb56 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	200002ec 	.word	0x200002ec
 80016d4:	40005c00 	.word	0x40005c00
 80016d8:	000186a0 	.word	0x000186a0

080016dc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08c      	sub	sp, #48	@ 0x30
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a42      	ldr	r2, [pc, #264]	@ (8001804 <HAL_I2C_MspInit+0x128>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d12c      	bne.n	8001758 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]
 8001702:	4b41      	ldr	r3, [pc, #260]	@ (8001808 <HAL_I2C_MspInit+0x12c>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	4a40      	ldr	r2, [pc, #256]	@ (8001808 <HAL_I2C_MspInit+0x12c>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	6313      	str	r3, [r2, #48]	@ 0x30
 800170e:	4b3e      	ldr	r3, [pc, #248]	@ (8001808 <HAL_I2C_MspInit+0x12c>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	61bb      	str	r3, [r7, #24]
 8001718:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_I2C_BMS_Pin|SDA_I2C_BMS_Pin;
 800171a:	23c0      	movs	r3, #192	@ 0xc0
 800171c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800171e:	2312      	movs	r3, #18
 8001720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001726:	2303      	movs	r3, #3
 8001728:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800172a:	2304      	movs	r3, #4
 800172c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800172e:	f107 031c 	add.w	r3, r7, #28
 8001732:	4619      	mov	r1, r3
 8001734:	4835      	ldr	r0, [pc, #212]	@ (800180c <HAL_I2C_MspInit+0x130>)
 8001736:	f002 fa9f 	bl	8003c78 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
 800173e:	4b32      	ldr	r3, [pc, #200]	@ (8001808 <HAL_I2C_MspInit+0x12c>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	4a31      	ldr	r2, [pc, #196]	@ (8001808 <HAL_I2C_MspInit+0x12c>)
 8001744:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001748:	6413      	str	r3, [r2, #64]	@ 0x40
 800174a:	4b2f      	ldr	r3, [pc, #188]	@ (8001808 <HAL_I2C_MspInit+0x12c>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001752:	617b      	str	r3, [r7, #20]
 8001754:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001756:	e050      	b.n	80017fa <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a2c      	ldr	r2, [pc, #176]	@ (8001810 <HAL_I2C_MspInit+0x134>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d14b      	bne.n	80017fa <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	4b28      	ldr	r3, [pc, #160]	@ (8001808 <HAL_I2C_MspInit+0x12c>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	4a27      	ldr	r2, [pc, #156]	@ (8001808 <HAL_I2C_MspInit+0x12c>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	6313      	str	r3, [r2, #48]	@ 0x30
 8001772:	4b25      	ldr	r3, [pc, #148]	@ (8001808 <HAL_I2C_MspInit+0x12c>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	4b21      	ldr	r3, [pc, #132]	@ (8001808 <HAL_I2C_MspInit+0x12c>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	4a20      	ldr	r2, [pc, #128]	@ (8001808 <HAL_I2C_MspInit+0x12c>)
 8001788:	f043 0301 	orr.w	r3, r3, #1
 800178c:	6313      	str	r3, [r2, #48]	@ 0x30
 800178e:	4b1e      	ldr	r3, [pc, #120]	@ (8001808 <HAL_I2C_MspInit+0x12c>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	60fb      	str	r3, [r7, #12]
 8001798:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SDA_I2C_COM_Pin;
 800179a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800179e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a0:	2312      	movs	r3, #18
 80017a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a8:	2303      	movs	r3, #3
 80017aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80017ac:	2304      	movs	r3, #4
 80017ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SDA_I2C_COM_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 031c 	add.w	r3, r7, #28
 80017b4:	4619      	mov	r1, r3
 80017b6:	4817      	ldr	r0, [pc, #92]	@ (8001814 <HAL_I2C_MspInit+0x138>)
 80017b8:	f002 fa5e 	bl	8003c78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCL_I2C_COM_Pin;
 80017bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017c2:	2312      	movs	r3, #18
 80017c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017c6:	2301      	movs	r3, #1
 80017c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ca:	2303      	movs	r3, #3
 80017cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80017ce:	2304      	movs	r3, #4
 80017d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SCL_I2C_COM_GPIO_Port, &GPIO_InitStruct);
 80017d2:	f107 031c 	add.w	r3, r7, #28
 80017d6:	4619      	mov	r1, r3
 80017d8:	480f      	ldr	r0, [pc, #60]	@ (8001818 <HAL_I2C_MspInit+0x13c>)
 80017da:	f002 fa4d 	bl	8003c78 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	4b09      	ldr	r3, [pc, #36]	@ (8001808 <HAL_I2C_MspInit+0x12c>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e6:	4a08      	ldr	r2, [pc, #32]	@ (8001808 <HAL_I2C_MspInit+0x12c>)
 80017e8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80017ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ee:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <HAL_I2C_MspInit+0x12c>)
 80017f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
}
 80017fa:	bf00      	nop
 80017fc:	3730      	adds	r7, #48	@ 0x30
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40005400 	.word	0x40005400
 8001808:	40023800 	.word	0x40023800
 800180c:	40020400 	.word	0x40020400
 8001810:	40005c00 	.word	0x40005c00
 8001814:	40020800 	.word	0x40020800
 8001818:	40020000 	.word	0x40020000

0800181c <sendI2CMsg>:
  /* USER CODE END I2C3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void sendI2CMsg(const char* label, float value) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b094      	sub	sp, #80	@ 0x50
 8001820:	af02      	add	r7, sp, #8
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	ed87 0a00 	vstr	s0, [r7]
    char buffer[BUFFER_SIZE];
    snprintf(buffer, BUFFER_SIZE, "%s %.2f\r\n", label, value);
 8001828:	6838      	ldr	r0, [r7, #0]
 800182a:	f7fe fe8d 	bl	8000548 <__aeabi_f2d>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	f107 0008 	add.w	r0, r7, #8
 8001836:	e9cd 2300 	strd	r2, r3, [sp]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a0d      	ldr	r2, [pc, #52]	@ (8001874 <sendI2CMsg+0x58>)
 800183e:	2140      	movs	r1, #64	@ 0x40
 8001840:	f006 f87e 	bl	8007940 <sniprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001844:	f107 0308 	add.w	r3, r7, #8
 8001848:	4618      	mov	r0, r3
 800184a:	f7fe fd11 	bl	8000270 <strlen>
 800184e:	4603      	mov	r3, r0
 8001850:	b29b      	uxth	r3, r3
 8001852:	f107 0208 	add.w	r2, r7, #8
 8001856:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800185a:	9100      	str	r1, [sp, #0]
 800185c:	2110      	movs	r1, #16
 800185e:	4806      	ldr	r0, [pc, #24]	@ (8001878 <sendI2CMsg+0x5c>)
 8001860:	f002 fd04 	bl	800426c <HAL_I2C_Master_Transmit>
    HAL_Delay(10);
 8001864:	200a      	movs	r0, #10
 8001866:	f001 f835 	bl	80028d4 <HAL_Delay>
}
 800186a:	bf00      	nop
 800186c:	3748      	adds	r7, #72	@ 0x48
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	08009da0 	.word	0x08009da0
 8001878:	200002ec 	.word	0x200002ec

0800187c <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 0 */

uint8_t convCompleted=0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
	convCompleted=1;
 8001884:	4b04      	ldr	r3, [pc, #16]	@ (8001898 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000340 	.word	0x20000340

0800189c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80018a2:	af04      	add	r7, sp, #16

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018a4:	f000 ffa4 	bl	80027f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Configure the system clock */
  SystemClock_Config();
 80018a8:	f000 f9fe 	bl	8001ca8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ac:	f7ff fdf0 	bl	8001490 <MX_GPIO_Init>
  MX_DMA_Init();
 80018b0:	f7ff fdce 	bl	8001450 <MX_DMA_Init>
  MX_ADC1_Init();
 80018b4:	f7ff fb10 	bl	8000ed8 <MX_ADC1_Init>
  MX_I2C3_Init();
 80018b8:	f7ff fee2 	bl	8001680 <MX_I2C3_Init>
  MX_TIM2_Init();
 80018bc:	f000 fca8 	bl	8002210 <MX_TIM2_Init>
  MX_TIM4_Init();
 80018c0:	f000 fcfe 	bl	80022c0 <MX_TIM4_Init>
  MX_TIM5_Init();
 80018c4:	f000 fd54 	bl	8002370 <MX_TIM5_Init>
  MX_UART4_Init();
 80018c8:	f000 fe7c 	bl	80025c4 <MX_UART4_Init>
  MX_USB_OTG_FS_PCD_Init();
 80018cc:	f000 feec 	bl	80026a8 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80018d0:	f7ff fea8 	bl	8001624 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  //MPPT Variables
  MPPT_Channel mpptX = MPPT_Create("Eje_x", &hadc1, ADC_CHANNEL_11, ADC_CHANNEL_10, &htim4, TIM_CHANNEL_4);
 80018d4:	f507 70dc 	add.w	r0, r7, #440	@ 0x1b8
 80018d8:	230c      	movs	r3, #12
 80018da:	9302      	str	r3, [sp, #8]
 80018dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001a14 <main+0x178>)
 80018de:	9301      	str	r3, [sp, #4]
 80018e0:	230a      	movs	r3, #10
 80018e2:	9300      	str	r3, [sp, #0]
 80018e4:	230b      	movs	r3, #11
 80018e6:	4a4c      	ldr	r2, [pc, #304]	@ (8001a18 <main+0x17c>)
 80018e8:	494c      	ldr	r1, [pc, #304]	@ (8001a1c <main+0x180>)
 80018ea:	f000 fa4b 	bl	8001d84 <MPPT_Create>
  MPPT_Channel mpptY = MPPT_Create("Eje_y", &hadc1, ADC_CHANNEL_13, ADC_CHANNEL_12, &htim2, TIM_CHANNEL_1);
 80018ee:	f507 70ca 	add.w	r0, r7, #404	@ 0x194
 80018f2:	2300      	movs	r3, #0
 80018f4:	9302      	str	r3, [sp, #8]
 80018f6:	4b4a      	ldr	r3, [pc, #296]	@ (8001a20 <main+0x184>)
 80018f8:	9301      	str	r3, [sp, #4]
 80018fa:	230c      	movs	r3, #12
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	230d      	movs	r3, #13
 8001900:	4a45      	ldr	r2, [pc, #276]	@ (8001a18 <main+0x17c>)
 8001902:	4948      	ldr	r1, [pc, #288]	@ (8001a24 <main+0x188>)
 8001904:	f000 fa3e 	bl	8001d84 <MPPT_Create>
  MPPT_Channel mpptZ = MPPT_Create("Eje_z", &hadc1, ADC_CHANNEL_2, ADC_CHANNEL_1, &htim5, TIM_CHANNEL_1);
 8001908:	f507 70b8 	add.w	r0, r7, #368	@ 0x170
 800190c:	2300      	movs	r3, #0
 800190e:	9302      	str	r3, [sp, #8]
 8001910:	4b45      	ldr	r3, [pc, #276]	@ (8001a28 <main+0x18c>)
 8001912:	9301      	str	r3, [sp, #4]
 8001914:	2301      	movs	r3, #1
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	2302      	movs	r3, #2
 800191a:	4a3f      	ldr	r2, [pc, #252]	@ (8001a18 <main+0x17c>)
 800191c:	4943      	ldr	r1, [pc, #268]	@ (8001a2c <main+0x190>)
 800191e:	f000 fa31 	bl	8001d84 <MPPT_Create>

  //PDU Variables
  PDU_Channel pdu_V5 = PDU_Create("V5", &hadc1, ADC_CHANNEL_14, ADC_CHANNEL_15, GPIOB, GPIO_PIN_2);
 8001922:	f507 70aa 	add.w	r0, r7, #340	@ 0x154
 8001926:	2304      	movs	r3, #4
 8001928:	9302      	str	r3, [sp, #8]
 800192a:	4b41      	ldr	r3, [pc, #260]	@ (8001a30 <main+0x194>)
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	230f      	movs	r3, #15
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	230e      	movs	r3, #14
 8001934:	4a38      	ldr	r2, [pc, #224]	@ (8001a18 <main+0x17c>)
 8001936:	493f      	ldr	r1, [pc, #252]	@ (8001a34 <main+0x198>)
 8001938:	f000 fade 	bl	8001ef8 <PDU_Create>
  PDU_Channel pdu_V5bis = PDU_Create("V5Bis", &hadc1, ADC_CHANNEL_5, ADC_CHANNEL_4, GPIOB, GPIO_PIN_12);
 800193c:	f507 709c 	add.w	r0, r7, #312	@ 0x138
 8001940:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001944:	9302      	str	r3, [sp, #8]
 8001946:	4b3a      	ldr	r3, [pc, #232]	@ (8001a30 <main+0x194>)
 8001948:	9301      	str	r3, [sp, #4]
 800194a:	2304      	movs	r3, #4
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	2305      	movs	r3, #5
 8001950:	4a31      	ldr	r2, [pc, #196]	@ (8001a18 <main+0x17c>)
 8001952:	4939      	ldr	r1, [pc, #228]	@ (8001a38 <main+0x19c>)
 8001954:	f000 fad0 	bl	8001ef8 <PDU_Create>
  PDU_Channel pdu_V3 = PDU_Create("V3", &hadc1, ADC_CHANNEL_6, ADC_CHANNEL_7, GPIOB, GPIO_PIN_11);
 8001958:	f507 708e 	add.w	r0, r7, #284	@ 0x11c
 800195c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001960:	9302      	str	r3, [sp, #8]
 8001962:	4b33      	ldr	r3, [pc, #204]	@ (8001a30 <main+0x194>)
 8001964:	9301      	str	r3, [sp, #4]
 8001966:	2307      	movs	r3, #7
 8001968:	9300      	str	r3, [sp, #0]
 800196a:	2306      	movs	r3, #6
 800196c:	4a2a      	ldr	r2, [pc, #168]	@ (8001a18 <main+0x17c>)
 800196e:	4933      	ldr	r1, [pc, #204]	@ (8001a3c <main+0x1a0>)
 8001970:	f000 fac2 	bl	8001ef8 <PDU_Create>
  PDU_Channel pdu_V3bis = PDU_Create("V3Bis", &hadc1, ADC_CHANNEL_8, ADC_CHANNEL_9, GPIOB, GPIO_PIN_10);
 8001974:	f507 7080 	add.w	r0, r7, #256	@ 0x100
 8001978:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800197c:	9302      	str	r3, [sp, #8]
 800197e:	4b2c      	ldr	r3, [pc, #176]	@ (8001a30 <main+0x194>)
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	2309      	movs	r3, #9
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	2308      	movs	r3, #8
 8001988:	4a23      	ldr	r2, [pc, #140]	@ (8001a18 <main+0x17c>)
 800198a:	492d      	ldr	r1, [pc, #180]	@ (8001a40 <main+0x1a4>)
 800198c:	f000 fab4 	bl	8001ef8 <PDU_Create>
  PDU_Channel pdu_BatOut = PDU_Create("VBatOut", NULL, 0, 0, GPIOA, GPIO_PIN_9);
 8001990:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001994:	f5a3 7086 	sub.w	r0, r3, #268	@ 0x10c
 8001998:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800199c:	9302      	str	r3, [sp, #8]
 800199e:	4b29      	ldr	r3, [pc, #164]	@ (8001a44 <main+0x1a8>)
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	2300      	movs	r3, #0
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	2300      	movs	r3, #0
 80019a8:	2200      	movs	r2, #0
 80019aa:	4927      	ldr	r1, [pc, #156]	@ (8001a48 <main+0x1ac>)
 80019ac:	f000 faa4 	bl	8001ef8 <PDU_Create>
  // BMS Variables
  //BQ29330_Device bms = { .hi2c = &hi2c1 };

  //ADC Variables
  uint16_t rawValues[14];
  HAL_ADC_Start_DMA(&hadc1,(uint32_t *) rawValues, 14);
 80019b0:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 80019b4:	220e      	movs	r2, #14
 80019b6:	4619      	mov	r1, r3
 80019b8:	4817      	ldr	r0, [pc, #92]	@ (8001a18 <main+0x17c>)
 80019ba:	f001 f903 	bl	8002bc4 <HAL_ADC_Start_DMA>


  //start PWMs
  //HAL_TIM_PWM_Start(mpptZ.htim, mpptZ.tim_channel);
  HAL_TIM_PWM_Start(mpptY.htim, mpptY.tim_channel);
 80019be:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80019c2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f004 f917 	bl	8005bfc <HAL_TIM_PWM_Start>
  //HAL_TIM_PWM_Start(mpptX.htim, mpptX.tim_channel);
  //__HAL_TIM_SET_COMPARE(mpptX.htim, mpptX.tim_channel, mpptX.dutyCycle); //mpptX.htim->CCR4=255*0.5 (SI ES TIMER 4)
  __HAL_TIM_SET_COMPARE(mpptY.htim, mpptY.tim_channel, mpptY.dutyCycle); //mpptY.htim->CCR1=255*0.5 (SI ES TIMER 1)
 80019ce:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d106      	bne.n	80019e4 <main+0x148>
 80019d6:	f897 21b0 	ldrb.w	r2, [r7, #432]	@ 0x1b0
 80019da:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80019e2:	e03a      	b.n	8001a5a <main+0x1be>
 80019e4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d107      	bne.n	80019fc <main+0x160>
 80019ec:	f897 11b0 	ldrb.w	r1, [r7, #432]	@ 0x1b0
 80019f0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	460b      	mov	r3, r1
 80019f8:	6393      	str	r3, [r2, #56]	@ 0x38
 80019fa:	e02e      	b.n	8001a5a <main+0x1be>
 80019fc:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8001a00:	2b08      	cmp	r3, #8
 8001a02:	d123      	bne.n	8001a4c <main+0x1b0>
 8001a04:	f897 11b0 	ldrb.w	r1, [r7, #432]	@ 0x1b0
 8001a08:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	460b      	mov	r3, r1
 8001a10:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001a12:	e022      	b.n	8001a5a <main+0x1be>
 8001a14:	20000390 	.word	0x20000390
 8001a18:	200001f0 	.word	0x200001f0
 8001a1c:	08009dac 	.word	0x08009dac
 8001a20:	20000348 	.word	0x20000348
 8001a24:	08009db4 	.word	0x08009db4
 8001a28:	200003d8 	.word	0x200003d8
 8001a2c:	08009dbc 	.word	0x08009dbc
 8001a30:	40020400 	.word	0x40020400
 8001a34:	08009dc4 	.word	0x08009dc4
 8001a38:	08009dc8 	.word	0x08009dc8
 8001a3c:	08009dd0 	.word	0x08009dd0
 8001a40:	08009dd4 	.word	0x08009dd4
 8001a44:	40020000 	.word	0x40020000
 8001a48:	08009ddc 	.word	0x08009ddc
 8001a4c:	f897 11b0 	ldrb.w	r1, [r7, #432]	@ 0x1b0
 8001a50:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	460b      	mov	r3, r1
 8001a58:	6413      	str	r3, [r2, #64]	@ 0x40
  //__HAL_TIM_SET_COMPARE(mpptZ.htim, mpptZ.tim_channel, mpptZ.dutyCycle); //mpptZ.htim->CCR1=255*0.5 (SI ES TIMER 1)

  //Configuro las salidas
  enablePDU(&pdu_V3);
 8001a5a:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f000 fa71 	bl	8001f46 <enablePDU>
  enablePDU(&pdu_V5bis);
 8001a64:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 fa6c 	bl	8001f46 <enablePDU>
  enablePDU(&pdu_BatOut);
 8001a6e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 fa67 	bl	8001f46 <enablePDU>
  disablePDU(&pdu_V5);
 8001a78:	f507 73aa 	add.w	r3, r7, #340	@ 0x154
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f000 fa72 	bl	8001f66 <disablePDU>
  disablePDU(&pdu_V3bis);
 8001a82:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 fa6d 	bl	8001f66 <disablePDU>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	//read all adcs
	while(!convCompleted);
 8001a8c:	bf00      	nop
 8001a8e:	4b7d      	ldr	r3, [pc, #500]	@ (8001c84 <main+0x3e8>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0fb      	beq.n	8001a8e <main+0x1f2>
	//factor de multiplicacion de la corriente en entradas mppt (50 x 33mohm)^-1
	//las tensiones se multiplican x2
	mpptZ.current = currentScale(rawValues[0]);
 8001a96:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001a9a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fbd9 	bl	8001258 <currentScale>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	f8a7 3186 	strh.w	r3, [r7, #390]	@ 0x186
	mpptZ.voltage = voltageScale(rawValues[1]);
 8001aac:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001ab0:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001ab4:	885b      	ldrh	r3, [r3, #2]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fbfa 	bl	80012b0 <voltageScale>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f8a7 3184 	strh.w	r3, [r7, #388]	@ 0x184

	pdu_V5bis.current = currentScale(rawValues[2]);
 8001ac2:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001ac6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001aca:	889b      	ldrh	r3, [r3, #4]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fbc3 	bl	8001258 <currentScale>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146
	pdu_V5bis.voltage = voltageScale(rawValues[3]);
 8001ad8:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001adc:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001ae0:	88db      	ldrh	r3, [r3, #6]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7ff fbe4 	bl	80012b0 <voltageScale>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
	pdu_V3.voltage = voltageScale(rawValues[4]);
 8001aee:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001af2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001af6:	891b      	ldrh	r3, [r3, #8]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fbd9 	bl	80012b0 <voltageScale>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f8a7 3128 	strh.w	r3, [r7, #296]	@ 0x128
	pdu_V3.current = currentScale(rawValues[5]);
 8001b04:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001b08:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001b0c:	895b      	ldrh	r3, [r3, #10]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fba2 	bl	8001258 <currentScale>
 8001b14:	4603      	mov	r3, r0
 8001b16:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a
	pdu_V3bis.voltage = voltageScale(rawValues[6]);
 8001b1a:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001b1e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001b22:	899b      	ldrh	r3, [r3, #12]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fbc3 	bl	80012b0 <voltageScale>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	f8a7 310c 	strh.w	r3, [r7, #268]	@ 0x10c
	pdu_V3bis.current = currentScale(rawValues[7]);
 8001b30:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001b34:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001b38:	89db      	ldrh	r3, [r3, #14]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fb8c 	bl	8001258 <currentScale>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e

	mpptX.current = currentScale(rawValues[8]);
 8001b46:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001b4a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001b4e:	8a1b      	ldrh	r3, [r3, #16]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff fb81 	bl	8001258 <currentScale>
 8001b56:	4603      	mov	r3, r0
 8001b58:	f8a7 31ce 	strh.w	r3, [r7, #462]	@ 0x1ce
	mpptX.voltage = voltageScale(rawValues[9]);
 8001b5c:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001b60:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001b64:	8a5b      	ldrh	r3, [r3, #18]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fba2 	bl	80012b0 <voltageScale>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f8a7 31cc 	strh.w	r3, [r7, #460]	@ 0x1cc
	mpptY.current = currentScale(rawValues[10]);
 8001b72:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001b76:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001b7a:	8a9b      	ldrh	r3, [r3, #20]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff fb6b 	bl	8001258 <currentScale>
 8001b82:	4603      	mov	r3, r0
 8001b84:	f8a7 31aa 	strh.w	r3, [r7, #426]	@ 0x1aa
	mpptY.voltage = voltageScale(rawValues[11]);
 8001b88:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001b8c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001b90:	8adb      	ldrh	r3, [r3, #22]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fb8c 	bl	80012b0 <voltageScale>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	f8a7 31a8 	strh.w	r3, [r7, #424]	@ 0x1a8

	pdu_V5.voltage = voltageScale(rawValues[12]);
 8001b9e:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001ba2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001ba6:	8b1b      	ldrh	r3, [r3, #24]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fb81 	bl	80012b0 <voltageScale>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f8a7 3160 	strh.w	r3, [r7, #352]	@ 0x160
	pdu_V5.current =  currentScale(rawValues[13]);
 8001bb4:	f507 73f8 	add.w	r3, r7, #496	@ 0x1f0
 8001bb8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001bbc:	8b5b      	ldrh	r3, [r3, #26]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fb4a 	bl	8001258 <currentScale>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	f8a7 3162 	strh.w	r3, [r7, #354]	@ 0x162

	// Imprimo cosas
	char buffer[STR_LEN];
	snprintf(buffer, STR_LEN, "\n \n I LIKE THE WAY YOU WORKING \n");
 8001bca:	463b      	mov	r3, r7
 8001bcc:	4a2e      	ldr	r2, [pc, #184]	@ (8001c88 <main+0x3ec>)
 8001bce:	21c8      	movs	r1, #200	@ 0xc8
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f005 feb5 	bl	8007940 <sniprintf>
	HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t *) buffer, strlen(buffer), HAL_MAX_DELAY);
 8001bd6:	463b      	mov	r3, r7
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fb49 	bl	8000270 <strlen>
 8001bde:	4603      	mov	r3, r0
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	463a      	mov	r2, r7
 8001be4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001be8:	9100      	str	r1, [sp, #0]
 8001bea:	2110      	movs	r1, #16
 8001bec:	4827      	ldr	r0, [pc, #156]	@ (8001c8c <main+0x3f0>)
 8001bee:	f002 fb3d 	bl	800426c <HAL_I2C_Master_Transmit>
	//printPDUData(&pdu_V5bis);
	//3.3 DATOS
	//printPDUData(&pdu_V3);

	//X DATOS
	printMPPTData(&mpptX);
 8001bf2:	f507 73dc 	add.w	r3, r7, #440	@ 0x1b8
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f908 	bl	8001e0c <printMPPTData>
	//Y DATOS
	printMPPTData(&mpptY);
 8001bfc:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8001c00:	4618      	mov	r0, r3
 8001c02:	f000 f903 	bl	8001e0c <printMPPTData>
	//Z DATOS
	printMPPTData(&mpptZ);
 8001c06:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f000 f8fe 	bl	8001e0c <printMPPTData>



	//BMS 29330

	float shuntVoltage = INA219_ReadShuntVoltage();
 8001c10:	f7ff fba8 	bl	8001364 <INA219_ReadShuntVoltage>
 8001c14:	ed87 0a7b 	vstr	s0, [r7, #492]	@ 0x1ec
	float busVoltage = INA219_ReadBusVoltage();
 8001c18:	f7ff fb76 	bl	8001308 <INA219_ReadBusVoltage>
 8001c1c:	ed87 0a7a 	vstr	s0, [r7, #488]	@ 0x1e8
	float current_mA = INA219_ReadCurrent();
 8001c20:	f7ff fbca 	bl	80013b8 <INA219_ReadCurrent>
 8001c24:	ed87 0a79 	vstr	s0, [r7, #484]	@ 0x1e4
	float power_mW = INA219_ReadPower();
 8001c28:	f7ff fbea 	bl	8001400 <INA219_ReadPower>
 8001c2c:	ed87 0a78 	vstr	s0, [r7, #480]	@ 0x1e0
	float loadVoltage = busVoltage + (shuntVoltage / 1000.0f);
 8001c30:	ed97 7a7b 	vldr	s14, [r7, #492]	@ 0x1ec
 8001c34:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8001c90 <main+0x3f4>
 8001c38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c3c:	ed97 7a7a 	vldr	s14, [r7, #488]	@ 0x1e8
 8001c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c44:	edc7 7a77 	vstr	s15, [r7, #476]	@ 0x1dc
	sendI2CMsg("Bus Voltage: ", busVoltage);
 8001c48:	ed97 0a7a 	vldr	s0, [r7, #488]	@ 0x1e8
 8001c4c:	4811      	ldr	r0, [pc, #68]	@ (8001c94 <main+0x3f8>)
 8001c4e:	f7ff fde5 	bl	800181c <sendI2CMsg>
	sendI2CMsg("Shunt Voltage: ", shuntVoltage);
 8001c52:	ed97 0a7b 	vldr	s0, [r7, #492]	@ 0x1ec
 8001c56:	4810      	ldr	r0, [pc, #64]	@ (8001c98 <main+0x3fc>)
 8001c58:	f7ff fde0 	bl	800181c <sendI2CMsg>
	sendI2CMsg("Load Voltage: ", loadVoltage);
 8001c5c:	ed97 0a77 	vldr	s0, [r7, #476]	@ 0x1dc
 8001c60:	480e      	ldr	r0, [pc, #56]	@ (8001c9c <main+0x400>)
 8001c62:	f7ff fddb 	bl	800181c <sendI2CMsg>
	sendI2CMsg("Current: ", current_mA);
 8001c66:	ed97 0a79 	vldr	s0, [r7, #484]	@ 0x1e4
 8001c6a:	480d      	ldr	r0, [pc, #52]	@ (8001ca0 <main+0x404>)
 8001c6c:	f7ff fdd6 	bl	800181c <sendI2CMsg>
	sendI2CMsg("Power: ", power_mW);
 8001c70:	ed97 0a78 	vldr	s0, [r7, #480]	@ 0x1e0
 8001c74:	480b      	ldr	r0, [pc, #44]	@ (8001ca4 <main+0x408>)
 8001c76:	f7ff fdd1 	bl	800181c <sendI2CMsg>

	//prendo y apago el led
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);

	HAL_Delay(DELAY);
 8001c7a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c7e:	f000 fe29 	bl	80028d4 <HAL_Delay>
  {
 8001c82:	e703      	b.n	8001a8c <main+0x1f0>
 8001c84:	20000340 	.word	0x20000340
 8001c88:	08009de4 	.word	0x08009de4
 8001c8c:	200002ec 	.word	0x200002ec
 8001c90:	447a0000 	.word	0x447a0000
 8001c94:	08009e08 	.word	0x08009e08
 8001c98:	08009e18 	.word	0x08009e18
 8001c9c:	08009e28 	.word	0x08009e28
 8001ca0:	08009e38 	.word	0x08009e38
 8001ca4:	08009e44 	.word	0x08009e44

08001ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b094      	sub	sp, #80	@ 0x50
 8001cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cae:	f107 0320 	add.w	r3, r7, #32
 8001cb2:	2230      	movs	r2, #48	@ 0x30
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f005 ff58 	bl	8007b6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cbc:	f107 030c 	add.w	r3, r7, #12
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	60da      	str	r2, [r3, #12]
 8001cca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	4b27      	ldr	r3, [pc, #156]	@ (8001d70 <SystemClock_Config+0xc8>)
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd4:	4a26      	ldr	r2, [pc, #152]	@ (8001d70 <SystemClock_Config+0xc8>)
 8001cd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cda:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cdc:	4b24      	ldr	r3, [pc, #144]	@ (8001d70 <SystemClock_Config+0xc8>)
 8001cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ce8:	2300      	movs	r3, #0
 8001cea:	607b      	str	r3, [r7, #4]
 8001cec:	4b21      	ldr	r3, [pc, #132]	@ (8001d74 <SystemClock_Config+0xcc>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a20      	ldr	r2, [pc, #128]	@ (8001d74 <SystemClock_Config+0xcc>)
 8001cf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d74 <SystemClock_Config+0xcc>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d04:	2301      	movs	r3, #1
 8001d06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d12:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001d18:	2304      	movs	r3, #4
 8001d1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001d1c:	2360      	movs	r3, #96	@ 0x60
 8001d1e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8001d20:	2306      	movs	r3, #6
 8001d22:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d24:	2304      	movs	r3, #4
 8001d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d28:	f107 0320 	add.w	r3, r7, #32
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f003 fa7d 	bl	800522c <HAL_RCC_OscConfig>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d38:	f000 f81e 	bl	8001d78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d3c:	230f      	movs	r3, #15
 8001d3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d40:	2302      	movs	r3, #2
 8001d42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001d44:	2380      	movs	r3, #128	@ 0x80
 8001d46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d52:	f107 030c 	add.w	r3, r7, #12
 8001d56:	2100      	movs	r1, #0
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 fcdf 	bl	800571c <HAL_RCC_ClockConfig>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001d64:	f000 f808 	bl	8001d78 <Error_Handler>
  }
}
 8001d68:	bf00      	nop
 8001d6a:	3750      	adds	r7, #80	@ 0x50
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40007000 	.word	0x40007000

08001d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d7c:	b672      	cpsid	i
}
 8001d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <Error_Handler+0x8>

08001d84 <MPPT_Create>:

#define MAX_DUTY htim2.Init.Period



MPPT_Channel MPPT_Create(char *label, ADC_HandleTypeDef *hadc, uint32_t v_channel, uint32_t i_channel, TIM_HandleTypeDef *htim, uint32_t tim_channel){
 8001d84:	b5b0      	push	{r4, r5, r7, lr}
 8001d86:	b08e      	sub	sp, #56	@ 0x38
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
    MPPT_Channel newMppt = {
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	61bb      	str	r3, [r7, #24]
 8001d9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d9c:	61fb      	str	r3, [r7, #28]
 8001d9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001da0:	623b      	str	r3, [r7, #32]
 8001da2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001da6:	2300      	movs	r3, #0
 8001da8:	853b      	strh	r3, [r7, #40]	@ 0x28
 8001daa:	2300      	movs	r3, #0
 8001dac:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8001dae:	2300      	movs	r3, #0
 8001db0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001db2:	2300      	movs	r3, #0
 8001db4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
        .tim_channel = tim_channel,
        .voltage = 0,
        .current = 0,
        .power = 0,
        .prevPower = 0,
        .dutyCycle = MAX_DUTY * 0.5,
 8001db6:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <MPPT_Create+0x80>)
 8001db8:	68db      	ldr	r3, [r3, #12]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fba2 	bl	8000504 <__aeabi_ui2d>
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	4b10      	ldr	r3, [pc, #64]	@ (8001e08 <MPPT_Create+0x84>)
 8001dc6:	f7fe fc17 	bl	80005f8 <__aeabi_dmul>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
    MPPT_Channel newMppt = {
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f7fe fee9 	bl	8000ba8 <__aeabi_d2uiz>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8001dde:	2300      	movs	r3, #0
 8001de0:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	637b      	str	r3, [r7, #52]	@ 0x34
        .ultimaVariacion = 0,
		.label = label
    };
	return newMppt;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	461d      	mov	r5, r3
 8001dec:	f107 0414 	add.w	r4, r7, #20
 8001df0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001df4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001df8:	6823      	ldr	r3, [r4, #0]
 8001dfa:	602b      	str	r3, [r5, #0]
}
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	3738      	adds	r7, #56	@ 0x38
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bdb0      	pop	{r4, r5, r7, pc}
 8001e04:	20000348 	.word	0x20000348
 8001e08:	3fe00000 	.word	0x3fe00000

08001e0c <printMPPTData>:
    // Actualizar el PWM en el canal correspondiente
    __HAL_TIM_SET_COMPARE(mppt->htim, mppt->tim_channel, mppt->dutyCycle);
}


void printMPPTData(MPPT_Channel *mppt) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b0b6      	sub	sp, #216	@ 0xd8
 8001e10:	af02      	add	r7, sp, #8
 8001e12:	6078      	str	r0, [r7, #4]
    char buffer[STR_LEN];

    sprintf(buffer,"%s: %u mV \n", mppt->label, mppt->voltage);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a1a      	ldr	r2, [r3, #32]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	8a9b      	ldrh	r3, [r3, #20]
 8001e1c:	f107 0008 	add.w	r0, r7, #8
 8001e20:	4930      	ldr	r1, [pc, #192]	@ (8001ee4 <printMPPTData+0xd8>)
 8001e22:	f005 fdc1 	bl	80079a8 <siprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001e26:	f107 0308 	add.w	r3, r7, #8
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe fa20 	bl	8000270 <strlen>
 8001e30:	4603      	mov	r3, r0
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	f107 0208 	add.w	r2, r7, #8
 8001e38:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e3c:	9100      	str	r1, [sp, #0]
 8001e3e:	2110      	movs	r1, #16
 8001e40:	4829      	ldr	r0, [pc, #164]	@ (8001ee8 <printMPPTData+0xdc>)
 8001e42:	f002 fa13 	bl	800426c <HAL_I2C_Master_Transmit>

    sprintf(buffer,"	%u mA \n", mppt->current);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	8adb      	ldrh	r3, [r3, #22]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	f107 0308 	add.w	r3, r7, #8
 8001e50:	4926      	ldr	r1, [pc, #152]	@ (8001eec <printMPPTData+0xe0>)
 8001e52:	4618      	mov	r0, r3
 8001e54:	f005 fda8 	bl	80079a8 <siprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001e58:	f107 0308 	add.w	r3, r7, #8
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe fa07 	bl	8000270 <strlen>
 8001e62:	4603      	mov	r3, r0
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	f107 0208 	add.w	r2, r7, #8
 8001e6a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e6e:	9100      	str	r1, [sp, #0]
 8001e70:	2110      	movs	r1, #16
 8001e72:	481d      	ldr	r0, [pc, #116]	@ (8001ee8 <printMPPTData+0xdc>)
 8001e74:	f002 f9fa 	bl	800426c <HAL_I2C_Master_Transmit>

    sprintf(buffer,"	%u mW\n",mppt->power);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	8b1b      	ldrh	r3, [r3, #24]
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	f107 0308 	add.w	r3, r7, #8
 8001e82:	491b      	ldr	r1, [pc, #108]	@ (8001ef0 <printMPPTData+0xe4>)
 8001e84:	4618      	mov	r0, r3
 8001e86:	f005 fd8f 	bl	80079a8 <siprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001e8a:	f107 0308 	add.w	r3, r7, #8
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe f9ee 	bl	8000270 <strlen>
 8001e94:	4603      	mov	r3, r0
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	f107 0208 	add.w	r2, r7, #8
 8001e9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ea0:	9100      	str	r1, [sp, #0]
 8001ea2:	2110      	movs	r1, #16
 8001ea4:	4810      	ldr	r0, [pc, #64]	@ (8001ee8 <printMPPTData+0xdc>)
 8001ea6:	f002 f9e1 	bl	800426c <HAL_I2C_Master_Transmit>

    sprintf(buffer,"	Duty: %u \n \n",mppt->dutyCycle);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7f1b      	ldrb	r3, [r3, #28]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	f107 0308 	add.w	r3, r7, #8
 8001eb4:	490f      	ldr	r1, [pc, #60]	@ (8001ef4 <printMPPTData+0xe8>)
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f005 fd76 	bl	80079a8 <siprintf>
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001ebc:	f107 0308 	add.w	r3, r7, #8
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe f9d5 	bl	8000270 <strlen>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	f107 0208 	add.w	r2, r7, #8
 8001ece:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ed2:	9100      	str	r1, [sp, #0]
 8001ed4:	2110      	movs	r1, #16
 8001ed6:	4804      	ldr	r0, [pc, #16]	@ (8001ee8 <printMPPTData+0xdc>)
 8001ed8:	f002 f9c8 	bl	800426c <HAL_I2C_Master_Transmit>

}
 8001edc:	bf00      	nop
 8001ede:	37d0      	adds	r7, #208	@ 0xd0
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	08009e4c 	.word	0x08009e4c
 8001ee8:	200002ec 	.word	0x200002ec
 8001eec:	08009e58 	.word	0x08009e58
 8001ef0:	08009e64 	.word	0x08009e64
 8001ef4:	08009e6c 	.word	0x08009e6c

08001ef8 <PDU_Create>:

#define VOLTAGE_STM32 3.3
#define ADC_RESOLUTION 4095.0 	//2^12 - 1


PDU_Channel PDU_Create(char *label, ADC_HandleTypeDef *hadc, uint32_t v_channel, uint32_t i_channel, GPIO_TypeDef *gpio_port, uint16_t gpio_pin) {
 8001ef8:	b4b0      	push	{r4, r5, r7}
 8001efa:	b08d      	sub	sp, #52	@ 0x34
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
 8001f04:	603b      	str	r3, [r7, #0]
    PDU_Channel newPdu = {
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	61bb      	str	r3, [r7, #24]
 8001f0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f10:	61fb      	str	r3, [r7, #28]
 8001f12:	2300      	movs	r3, #0
 8001f14:	843b      	strh	r3, [r7, #32]
 8001f16:	2300      	movs	r3, #0
 8001f18:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f22:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8001f26:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        .current = 0,
        .label = label,
        .gpio_port = gpio_port,
        .gpio_pin = gpio_pin
    };
    return newPdu;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	461d      	mov	r5, r3
 8001f2c:	f107 0414 	add.w	r4, r7, #20
 8001f30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f34:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001f38:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	3734      	adds	r7, #52	@ 0x34
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bcb0      	pop	{r4, r5, r7}
 8001f44:	4770      	bx	lr

08001f46 <enablePDU>:
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
}


// Habilitar la salida GPIO asociada a la fuente
void enablePDU(PDU_Channel *pdu) {
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b082      	sub	sp, #8
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(pdu->gpio_port, pdu->gpio_pin, GPIO_PIN_SET);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6958      	ldr	r0, [r3, #20]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	8b1b      	ldrh	r3, [r3, #24]
 8001f56:	2201      	movs	r2, #1
 8001f58:	4619      	mov	r1, r3
 8001f5a:	f002 f829 	bl	8003fb0 <HAL_GPIO_WritePin>
}
 8001f5e:	bf00      	nop
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <disablePDU>:

// Deshabilitar la salida GPIO asociada a la fuente
void disablePDU(PDU_Channel *pdu) {
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(pdu->gpio_port, pdu->gpio_pin, GPIO_PIN_RESET);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6958      	ldr	r0, [r3, #20]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	8b1b      	ldrh	r3, [r3, #24]
 8001f76:	2200      	movs	r2, #0
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f002 f819 	bl	8003fb0 <HAL_GPIO_WritePin>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	4b10      	ldr	r3, [pc, #64]	@ (8001fd4 <HAL_MspInit+0x4c>)
 8001f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f96:	4a0f      	ldr	r2, [pc, #60]	@ (8001fd4 <HAL_MspInit+0x4c>)
 8001f98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd4 <HAL_MspInit+0x4c>)
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fa6:	607b      	str	r3, [r7, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001faa:	2300      	movs	r3, #0
 8001fac:	603b      	str	r3, [r7, #0]
 8001fae:	4b09      	ldr	r3, [pc, #36]	@ (8001fd4 <HAL_MspInit+0x4c>)
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb2:	4a08      	ldr	r2, [pc, #32]	@ (8001fd4 <HAL_MspInit+0x4c>)
 8001fb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fba:	4b06      	ldr	r3, [pc, #24]	@ (8001fd4 <HAL_MspInit+0x4c>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fc2:	603b      	str	r3, [r7, #0]
 8001fc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800

08001fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <NMI_Handler+0x4>

08001fe0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fe4:	bf00      	nop
 8001fe6:	e7fd      	b.n	8001fe4 <HardFault_Handler+0x4>

08001fe8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fec:	bf00      	nop
 8001fee:	e7fd      	b.n	8001fec <MemManage_Handler+0x4>

08001ff0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <BusFault_Handler+0x4>

08001ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <UsageFault_Handler+0x4>

08002000 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800200e:	b480      	push	{r7}
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr

0800202a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800202e:	f000 fc31 	bl	8002894 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800203c:	4802      	ldr	r0, [pc, #8]	@ (8002048 <ADC_IRQHandler+0x10>)
 800203e:	f000 fcb0 	bl	80029a2 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	200001f0 	.word	0x200001f0

0800204c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002050:	4802      	ldr	r0, [pc, #8]	@ (800205c <DMA2_Stream0_IRQHandler+0x10>)
 8002052:	f001 fba7 	bl	80037a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000238 	.word	0x20000238

08002060 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return 1;
 8002064:	2301      	movs	r3, #1
}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <_kill>:

int _kill(int pid, int sig)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800207a:	f005 fd83 	bl	8007b84 <__errno>
 800207e:	4603      	mov	r3, r0
 8002080:	2216      	movs	r2, #22
 8002082:	601a      	str	r2, [r3, #0]
  return -1;
 8002084:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <_exit>:

void _exit (int status)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002098:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ffe7 	bl	8002070 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020a2:	bf00      	nop
 80020a4:	e7fd      	b.n	80020a2 <_exit+0x12>

080020a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b086      	sub	sp, #24
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	e00a      	b.n	80020ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020b8:	f3af 8000 	nop.w
 80020bc:	4601      	mov	r1, r0
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	60ba      	str	r2, [r7, #8]
 80020c4:	b2ca      	uxtb	r2, r1
 80020c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	3301      	adds	r3, #1
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	dbf0      	blt.n	80020b8 <_read+0x12>
  }

  return len;
 80020d6:	687b      	ldr	r3, [r7, #4]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	e009      	b.n	8002106 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	60ba      	str	r2, [r7, #8]
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	3301      	adds	r3, #1
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	429a      	cmp	r2, r3
 800210c:	dbf1      	blt.n	80020f2 <_write+0x12>
  }
  return len;
 800210e:	687b      	ldr	r3, [r7, #4]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <_close>:

int _close(int file)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002120:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002140:	605a      	str	r2, [r3, #4]
  return 0;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <_isatty>:

int _isatty(int file)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002158:	2301      	movs	r3, #1
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002166:	b480      	push	{r7}
 8002168:	b085      	sub	sp, #20
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002188:	4a14      	ldr	r2, [pc, #80]	@ (80021dc <_sbrk+0x5c>)
 800218a:	4b15      	ldr	r3, [pc, #84]	@ (80021e0 <_sbrk+0x60>)
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002194:	4b13      	ldr	r3, [pc, #76]	@ (80021e4 <_sbrk+0x64>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d102      	bne.n	80021a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800219c:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <_sbrk+0x64>)
 800219e:	4a12      	ldr	r2, [pc, #72]	@ (80021e8 <_sbrk+0x68>)
 80021a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021a2:	4b10      	ldr	r3, [pc, #64]	@ (80021e4 <_sbrk+0x64>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d207      	bcs.n	80021c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021b0:	f005 fce8 	bl	8007b84 <__errno>
 80021b4:	4603      	mov	r3, r0
 80021b6:	220c      	movs	r2, #12
 80021b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021be:	e009      	b.n	80021d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021c0:	4b08      	ldr	r3, [pc, #32]	@ (80021e4 <_sbrk+0x64>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021c6:	4b07      	ldr	r3, [pc, #28]	@ (80021e4 <_sbrk+0x64>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	4a05      	ldr	r2, [pc, #20]	@ (80021e4 <_sbrk+0x64>)
 80021d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021d2:	68fb      	ldr	r3, [r7, #12]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20020000 	.word	0x20020000
 80021e0:	00000400 	.word	0x00000400
 80021e4:	20000344 	.word	0x20000344
 80021e8:	20000aa0 	.word	0x20000aa0

080021ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021f0:	4b06      	ldr	r3, [pc, #24]	@ (800220c <SystemInit+0x20>)
 80021f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f6:	4a05      	ldr	r2, [pc, #20]	@ (800220c <SystemInit+0x20>)
 80021f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b08a      	sub	sp, #40	@ 0x28
 8002214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002216:	f107 0320 	add.w	r3, r7, #32
 800221a:	2200      	movs	r2, #0
 800221c:	601a      	str	r2, [r3, #0]
 800221e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002220:	1d3b      	adds	r3, r7, #4
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
 8002226:	605a      	str	r2, [r3, #4]
 8002228:	609a      	str	r2, [r3, #8]
 800222a:	60da      	str	r2, [r3, #12]
 800222c:	611a      	str	r2, [r3, #16]
 800222e:	615a      	str	r2, [r3, #20]
 8002230:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002232:	4b22      	ldr	r3, [pc, #136]	@ (80022bc <MX_TIM2_Init+0xac>)
 8002234:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002238:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800223a:	4b20      	ldr	r3, [pc, #128]	@ (80022bc <MX_TIM2_Init+0xac>)
 800223c:	2200      	movs	r2, #0
 800223e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002240:	4b1e      	ldr	r3, [pc, #120]	@ (80022bc <MX_TIM2_Init+0xac>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 80;
 8002246:	4b1d      	ldr	r3, [pc, #116]	@ (80022bc <MX_TIM2_Init+0xac>)
 8002248:	2250      	movs	r2, #80	@ 0x50
 800224a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800224c:	4b1b      	ldr	r3, [pc, #108]	@ (80022bc <MX_TIM2_Init+0xac>)
 800224e:	2200      	movs	r2, #0
 8002250:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002252:	4b1a      	ldr	r3, [pc, #104]	@ (80022bc <MX_TIM2_Init+0xac>)
 8002254:	2200      	movs	r2, #0
 8002256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002258:	4818      	ldr	r0, [pc, #96]	@ (80022bc <MX_TIM2_Init+0xac>)
 800225a:	f003 fc7f 	bl	8005b5c <HAL_TIM_PWM_Init>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002264:	f7ff fd88 	bl	8001d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002268:	2300      	movs	r3, #0
 800226a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800226c:	2300      	movs	r3, #0
 800226e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002270:	f107 0320 	add.w	r3, r7, #32
 8002274:	4619      	mov	r1, r3
 8002276:	4811      	ldr	r0, [pc, #68]	@ (80022bc <MX_TIM2_Init+0xac>)
 8002278:	f004 f8cc 	bl	8006414 <HAL_TIMEx_MasterConfigSynchronization>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8002282:	f7ff fd79 	bl	8001d78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002286:	2360      	movs	r3, #96	@ 0x60
 8002288:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002292:	2304      	movs	r3, #4
 8002294:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002296:	1d3b      	adds	r3, r7, #4
 8002298:	2200      	movs	r2, #0
 800229a:	4619      	mov	r1, r3
 800229c:	4807      	ldr	r0, [pc, #28]	@ (80022bc <MX_TIM2_Init+0xac>)
 800229e:	f003 fd75 	bl	8005d8c <HAL_TIM_PWM_ConfigChannel>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80022a8:	f7ff fd66 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80022ac:	4803      	ldr	r0, [pc, #12]	@ (80022bc <MX_TIM2_Init+0xac>)
 80022ae:	f000 f903 	bl	80024b8 <HAL_TIM_MspPostInit>

}
 80022b2:	bf00      	nop
 80022b4:	3728      	adds	r7, #40	@ 0x28
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	20000348 	.word	0x20000348

080022c0 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b08a      	sub	sp, #40	@ 0x28
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c6:	f107 0320 	add.w	r3, r7, #32
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
 80022d6:	605a      	str	r2, [r3, #4]
 80022d8:	609a      	str	r2, [r3, #8]
 80022da:	60da      	str	r2, [r3, #12]
 80022dc:	611a      	str	r2, [r3, #16]
 80022de:	615a      	str	r2, [r3, #20]
 80022e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022e2:	4b21      	ldr	r3, [pc, #132]	@ (8002368 <MX_TIM4_Init+0xa8>)
 80022e4:	4a21      	ldr	r2, [pc, #132]	@ (800236c <MX_TIM4_Init+0xac>)
 80022e6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 80022e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002368 <MX_TIM4_Init+0xa8>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002368 <MX_TIM4_Init+0xa8>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 80022f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002368 <MX_TIM4_Init+0xa8>)
 80022f6:	22ff      	movs	r2, #255	@ 0xff
 80022f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002368 <MX_TIM4_Init+0xa8>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002300:	4b19      	ldr	r3, [pc, #100]	@ (8002368 <MX_TIM4_Init+0xa8>)
 8002302:	2200      	movs	r2, #0
 8002304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002306:	4818      	ldr	r0, [pc, #96]	@ (8002368 <MX_TIM4_Init+0xa8>)
 8002308:	f003 fc28 	bl	8005b5c <HAL_TIM_PWM_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002312:	f7ff fd31 	bl	8001d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002316:	2300      	movs	r3, #0
 8002318:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800231e:	f107 0320 	add.w	r3, r7, #32
 8002322:	4619      	mov	r1, r3
 8002324:	4810      	ldr	r0, [pc, #64]	@ (8002368 <MX_TIM4_Init+0xa8>)
 8002326:	f004 f875 	bl	8006414 <HAL_TIMEx_MasterConfigSynchronization>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8002330:	f7ff fd22 	bl	8001d78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002334:	2360      	movs	r3, #96	@ 0x60
 8002336:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800233c:	2300      	movs	r3, #0
 800233e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002344:	1d3b      	adds	r3, r7, #4
 8002346:	220c      	movs	r2, #12
 8002348:	4619      	mov	r1, r3
 800234a:	4807      	ldr	r0, [pc, #28]	@ (8002368 <MX_TIM4_Init+0xa8>)
 800234c:	f003 fd1e 	bl	8005d8c <HAL_TIM_PWM_ConfigChannel>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8002356:	f7ff fd0f 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800235a:	4803      	ldr	r0, [pc, #12]	@ (8002368 <MX_TIM4_Init+0xa8>)
 800235c:	f000 f8ac 	bl	80024b8 <HAL_TIM_MspPostInit>

}
 8002360:	bf00      	nop
 8002362:	3728      	adds	r7, #40	@ 0x28
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000390 	.word	0x20000390
 800236c:	40000800 	.word	0x40000800

08002370 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08a      	sub	sp, #40	@ 0x28
 8002374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002376:	f107 0320 	add.w	r3, r7, #32
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002380:	1d3b      	adds	r3, r7, #4
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	60da      	str	r2, [r3, #12]
 800238c:	611a      	str	r2, [r3, #16]
 800238e:	615a      	str	r2, [r3, #20]
 8002390:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002392:	4b21      	ldr	r3, [pc, #132]	@ (8002418 <MX_TIM5_Init+0xa8>)
 8002394:	4a21      	ldr	r2, [pc, #132]	@ (800241c <MX_TIM5_Init+0xac>)
 8002396:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002398:	4b1f      	ldr	r3, [pc, #124]	@ (8002418 <MX_TIM5_Init+0xa8>)
 800239a:	2200      	movs	r2, #0
 800239c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800239e:	4b1e      	ldr	r3, [pc, #120]	@ (8002418 <MX_TIM5_Init+0xa8>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 255;
 80023a4:	4b1c      	ldr	r3, [pc, #112]	@ (8002418 <MX_TIM5_Init+0xa8>)
 80023a6:	22ff      	movs	r2, #255	@ 0xff
 80023a8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002418 <MX_TIM5_Init+0xa8>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b0:	4b19      	ldr	r3, [pc, #100]	@ (8002418 <MX_TIM5_Init+0xa8>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80023b6:	4818      	ldr	r0, [pc, #96]	@ (8002418 <MX_TIM5_Init+0xa8>)
 80023b8:	f003 fbd0 	bl	8005b5c <HAL_TIM_PWM_Init>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 80023c2:	f7ff fcd9 	bl	8001d78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c6:	2300      	movs	r3, #0
 80023c8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ca:	2300      	movs	r3, #0
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80023ce:	f107 0320 	add.w	r3, r7, #32
 80023d2:	4619      	mov	r1, r3
 80023d4:	4810      	ldr	r0, [pc, #64]	@ (8002418 <MX_TIM5_Init+0xa8>)
 80023d6:	f004 f81d 	bl	8006414 <HAL_TIMEx_MasterConfigSynchronization>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80023e0:	f7ff fcca 	bl	8001d78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023e4:	2360      	movs	r3, #96	@ 0x60
 80023e6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80023f0:	2304      	movs	r3, #4
 80023f2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023f4:	1d3b      	adds	r3, r7, #4
 80023f6:	220c      	movs	r2, #12
 80023f8:	4619      	mov	r1, r3
 80023fa:	4807      	ldr	r0, [pc, #28]	@ (8002418 <MX_TIM5_Init+0xa8>)
 80023fc:	f003 fcc6 	bl	8005d8c <HAL_TIM_PWM_ConfigChannel>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8002406:	f7ff fcb7 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800240a:	4803      	ldr	r0, [pc, #12]	@ (8002418 <MX_TIM5_Init+0xa8>)
 800240c:	f000 f854 	bl	80024b8 <HAL_TIM_MspPostInit>

}
 8002410:	bf00      	nop
 8002412:	3728      	adds	r7, #40	@ 0x28
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	200003d8 	.word	0x200003d8
 800241c:	40000c00 	.word	0x40000c00

08002420 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002420:	b480      	push	{r7}
 8002422:	b087      	sub	sp, #28
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002430:	d10e      	bne.n	8002450 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	4b1d      	ldr	r3, [pc, #116]	@ (80024ac <HAL_TIM_PWM_MspInit+0x8c>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	4a1c      	ldr	r2, [pc, #112]	@ (80024ac <HAL_TIM_PWM_MspInit+0x8c>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6413      	str	r3, [r2, #64]	@ 0x40
 8002442:	4b1a      	ldr	r3, [pc, #104]	@ (80024ac <HAL_TIM_PWM_MspInit+0x8c>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800244e:	e026      	b.n	800249e <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM4)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a16      	ldr	r2, [pc, #88]	@ (80024b0 <HAL_TIM_PWM_MspInit+0x90>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d10e      	bne.n	8002478 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	4b13      	ldr	r3, [pc, #76]	@ (80024ac <HAL_TIM_PWM_MspInit+0x8c>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002462:	4a12      	ldr	r2, [pc, #72]	@ (80024ac <HAL_TIM_PWM_MspInit+0x8c>)
 8002464:	f043 0304 	orr.w	r3, r3, #4
 8002468:	6413      	str	r3, [r2, #64]	@ 0x40
 800246a:	4b10      	ldr	r3, [pc, #64]	@ (80024ac <HAL_TIM_PWM_MspInit+0x8c>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	f003 0304 	and.w	r3, r3, #4
 8002472:	613b      	str	r3, [r7, #16]
 8002474:	693b      	ldr	r3, [r7, #16]
}
 8002476:	e012      	b.n	800249e <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM5)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a0d      	ldr	r2, [pc, #52]	@ (80024b4 <HAL_TIM_PWM_MspInit+0x94>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d10d      	bne.n	800249e <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	60fb      	str	r3, [r7, #12]
 8002486:	4b09      	ldr	r3, [pc, #36]	@ (80024ac <HAL_TIM_PWM_MspInit+0x8c>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	4a08      	ldr	r2, [pc, #32]	@ (80024ac <HAL_TIM_PWM_MspInit+0x8c>)
 800248c:	f043 0308 	orr.w	r3, r3, #8
 8002490:	6413      	str	r3, [r2, #64]	@ 0x40
 8002492:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <HAL_TIM_PWM_MspInit+0x8c>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	60fb      	str	r3, [r7, #12]
 800249c:	68fb      	ldr	r3, [r7, #12]
}
 800249e:	bf00      	nop
 80024a0:	371c      	adds	r7, #28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40000800 	.word	0x40000800
 80024b4:	40000c00 	.word	0x40000c00

080024b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b08a      	sub	sp, #40	@ 0x28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c0:	f107 0314 	add.w	r3, r7, #20
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024d8:	d11e      	bne.n	8002518 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	4b34      	ldr	r3, [pc, #208]	@ (80025b0 <HAL_TIM_MspPostInit+0xf8>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e2:	4a33      	ldr	r2, [pc, #204]	@ (80025b0 <HAL_TIM_MspPostInit+0xf8>)
 80024e4:	f043 0301 	orr.w	r3, r3, #1
 80024e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ea:	4b31      	ldr	r3, [pc, #196]	@ (80025b0 <HAL_TIM_MspPostInit+0xf8>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = MPPTYControl_Pin;
 80024f6:	2301      	movs	r3, #1
 80024f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024fa:	2302      	movs	r3, #2
 80024fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002502:	2300      	movs	r3, #0
 8002504:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002506:	2301      	movs	r3, #1
 8002508:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPPTYControl_GPIO_Port, &GPIO_InitStruct);
 800250a:	f107 0314 	add.w	r3, r7, #20
 800250e:	4619      	mov	r1, r3
 8002510:	4828      	ldr	r0, [pc, #160]	@ (80025b4 <HAL_TIM_MspPostInit+0xfc>)
 8002512:	f001 fbb1 	bl	8003c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002516:	e047      	b.n	80025a8 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a26      	ldr	r2, [pc, #152]	@ (80025b8 <HAL_TIM_MspPostInit+0x100>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d11f      	bne.n	8002562 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	4b22      	ldr	r3, [pc, #136]	@ (80025b0 <HAL_TIM_MspPostInit+0xf8>)
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	4a21      	ldr	r2, [pc, #132]	@ (80025b0 <HAL_TIM_MspPostInit+0xf8>)
 800252c:	f043 0302 	orr.w	r3, r3, #2
 8002530:	6313      	str	r3, [r2, #48]	@ 0x30
 8002532:	4b1f      	ldr	r3, [pc, #124]	@ (80025b0 <HAL_TIM_MspPostInit+0xf8>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	60fb      	str	r3, [r7, #12]
 800253c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MPPTXControl_Pin;
 800253e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002544:	2302      	movs	r3, #2
 8002546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254c:	2300      	movs	r3, #0
 800254e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002550:	2302      	movs	r3, #2
 8002552:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPPTXControl_GPIO_Port, &GPIO_InitStruct);
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	4619      	mov	r1, r3
 800255a:	4818      	ldr	r0, [pc, #96]	@ (80025bc <HAL_TIM_MspPostInit+0x104>)
 800255c:	f001 fb8c 	bl	8003c78 <HAL_GPIO_Init>
}
 8002560:	e022      	b.n	80025a8 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM5)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a16      	ldr	r2, [pc, #88]	@ (80025c0 <HAL_TIM_MspPostInit+0x108>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d11d      	bne.n	80025a8 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800256c:	2300      	movs	r3, #0
 800256e:	60bb      	str	r3, [r7, #8]
 8002570:	4b0f      	ldr	r3, [pc, #60]	@ (80025b0 <HAL_TIM_MspPostInit+0xf8>)
 8002572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002574:	4a0e      	ldr	r2, [pc, #56]	@ (80025b0 <HAL_TIM_MspPostInit+0xf8>)
 8002576:	f043 0301 	orr.w	r3, r3, #1
 800257a:	6313      	str	r3, [r2, #48]	@ 0x30
 800257c:	4b0c      	ldr	r3, [pc, #48]	@ (80025b0 <HAL_TIM_MspPostInit+0xf8>)
 800257e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	60bb      	str	r3, [r7, #8]
 8002586:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MPPTZControl_Pin;
 8002588:	2308      	movs	r3, #8
 800258a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258c:	2302      	movs	r3, #2
 800258e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002594:	2300      	movs	r3, #0
 8002596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002598:	2302      	movs	r3, #2
 800259a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPPTZControl_GPIO_Port, &GPIO_InitStruct);
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	4619      	mov	r1, r3
 80025a2:	4804      	ldr	r0, [pc, #16]	@ (80025b4 <HAL_TIM_MspPostInit+0xfc>)
 80025a4:	f001 fb68 	bl	8003c78 <HAL_GPIO_Init>
}
 80025a8:	bf00      	nop
 80025aa:	3728      	adds	r7, #40	@ 0x28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40020000 	.word	0x40020000
 80025b8:	40000800 	.word	0x40000800
 80025bc:	40020400 	.word	0x40020400
 80025c0:	40000c00 	.word	0x40000c00

080025c4 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80025c8:	4b11      	ldr	r3, [pc, #68]	@ (8002610 <MX_UART4_Init+0x4c>)
 80025ca:	4a12      	ldr	r2, [pc, #72]	@ (8002614 <MX_UART4_Init+0x50>)
 80025cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80025ce:	4b10      	ldr	r3, [pc, #64]	@ (8002610 <MX_UART4_Init+0x4c>)
 80025d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80025d4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80025d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002610 <MX_UART4_Init+0x4c>)
 80025d8:	2200      	movs	r2, #0
 80025da:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80025dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002610 <MX_UART4_Init+0x4c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80025e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002610 <MX_UART4_Init+0x4c>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80025e8:	4b09      	ldr	r3, [pc, #36]	@ (8002610 <MX_UART4_Init+0x4c>)
 80025ea:	220c      	movs	r2, #12
 80025ec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ee:	4b08      	ldr	r3, [pc, #32]	@ (8002610 <MX_UART4_Init+0x4c>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80025f4:	4b06      	ldr	r3, [pc, #24]	@ (8002610 <MX_UART4_Init+0x4c>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80025fa:	4805      	ldr	r0, [pc, #20]	@ (8002610 <MX_UART4_Init+0x4c>)
 80025fc:	f003 ff86 	bl	800650c <HAL_UART_Init>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002606:	f7ff fbb7 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	20000420 	.word	0x20000420
 8002614:	40004c00 	.word	0x40004c00

08002618 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08a      	sub	sp, #40	@ 0x28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002620:	f107 0314 	add.w	r3, r7, #20
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	605a      	str	r2, [r3, #4]
 800262a:	609a      	str	r2, [r3, #8]
 800262c:	60da      	str	r2, [r3, #12]
 800262e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a19      	ldr	r2, [pc, #100]	@ (800269c <HAL_UART_MspInit+0x84>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d12c      	bne.n	8002694 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	4b18      	ldr	r3, [pc, #96]	@ (80026a0 <HAL_UART_MspInit+0x88>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002642:	4a17      	ldr	r2, [pc, #92]	@ (80026a0 <HAL_UART_MspInit+0x88>)
 8002644:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002648:	6413      	str	r3, [r2, #64]	@ 0x40
 800264a:	4b15      	ldr	r3, [pc, #84]	@ (80026a0 <HAL_UART_MspInit+0x88>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002652:	613b      	str	r3, [r7, #16]
 8002654:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	4b11      	ldr	r3, [pc, #68]	@ (80026a0 <HAL_UART_MspInit+0x88>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	4a10      	ldr	r2, [pc, #64]	@ (80026a0 <HAL_UART_MspInit+0x88>)
 8002660:	f043 0304 	orr.w	r3, r3, #4
 8002664:	6313      	str	r3, [r2, #48]	@ 0x30
 8002666:	4b0e      	ldr	r3, [pc, #56]	@ (80026a0 <HAL_UART_MspInit+0x88>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	f003 0304 	and.w	r3, r3, #4
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8002672:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002678:	2302      	movs	r3, #2
 800267a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800267c:	2301      	movs	r3, #1
 800267e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002680:	2303      	movs	r3, #3
 8002682:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002684:	2308      	movs	r3, #8
 8002686:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002688:	f107 0314 	add.w	r3, r7, #20
 800268c:	4619      	mov	r1, r3
 800268e:	4805      	ldr	r0, [pc, #20]	@ (80026a4 <HAL_UART_MspInit+0x8c>)
 8002690:	f001 faf2 	bl	8003c78 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8002694:	bf00      	nop
 8002696:	3728      	adds	r7, #40	@ 0x28
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40004c00 	.word	0x40004c00
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40020800 	.word	0x40020800

080026a8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80026ac:	4b14      	ldr	r3, [pc, #80]	@ (8002700 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026ae:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80026b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80026b4:	4b12      	ldr	r3, [pc, #72]	@ (8002700 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026b6:	2204      	movs	r2, #4
 80026b8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80026ba:	4b11      	ldr	r3, [pc, #68]	@ (8002700 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026bc:	2202      	movs	r2, #2
 80026be:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80026c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002700 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80026c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002700 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026c8:	2202      	movs	r2, #2
 80026ca:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80026cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002700 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80026d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002700 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80026d8:	4b09      	ldr	r3, [pc, #36]	@ (8002700 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026da:	2200      	movs	r2, #0
 80026dc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80026de:	4b08      	ldr	r3, [pc, #32]	@ (8002700 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80026e4:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80026ea:	4805      	ldr	r0, [pc, #20]	@ (8002700 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80026ec:	f002 fc8e 	bl	800500c <HAL_PCD_Init>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80026f6:	f7ff fb3f 	bl	8001d78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000468 	.word	0x20000468

08002704 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b08a      	sub	sp, #40	@ 0x28
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800270c:	f107 0314 	add.w	r3, r7, #20
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002724:	d132      	bne.n	800278c <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	4b1a      	ldr	r3, [pc, #104]	@ (8002794 <HAL_PCD_MspInit+0x90>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	4a19      	ldr	r2, [pc, #100]	@ (8002794 <HAL_PCD_MspInit+0x90>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6313      	str	r3, [r2, #48]	@ 0x30
 8002736:	4b17      	ldr	r3, [pc, #92]	@ (8002794 <HAL_PCD_MspInit+0x90>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002742:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002748:	2302      	movs	r3, #2
 800274a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002750:	2303      	movs	r3, #3
 8002752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002754:	230a      	movs	r3, #10
 8002756:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	4619      	mov	r1, r3
 800275e:	480e      	ldr	r0, [pc, #56]	@ (8002798 <HAL_PCD_MspInit+0x94>)
 8002760:	f001 fa8a 	bl	8003c78 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002764:	4b0b      	ldr	r3, [pc, #44]	@ (8002794 <HAL_PCD_MspInit+0x90>)
 8002766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002768:	4a0a      	ldr	r2, [pc, #40]	@ (8002794 <HAL_PCD_MspInit+0x90>)
 800276a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800276e:	6353      	str	r3, [r2, #52]	@ 0x34
 8002770:	2300      	movs	r3, #0
 8002772:	60fb      	str	r3, [r7, #12]
 8002774:	4b07      	ldr	r3, [pc, #28]	@ (8002794 <HAL_PCD_MspInit+0x90>)
 8002776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002778:	4a06      	ldr	r2, [pc, #24]	@ (8002794 <HAL_PCD_MspInit+0x90>)
 800277a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800277e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002780:	4b04      	ldr	r3, [pc, #16]	@ (8002794 <HAL_PCD_MspInit+0x90>)
 8002782:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002784:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800278c:	bf00      	nop
 800278e:	3728      	adds	r7, #40	@ 0x28
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	40023800 	.word	0x40023800
 8002798:	40020000 	.word	0x40020000

0800279c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800279c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80027a0:	f7ff fd24 	bl	80021ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027a4:	480c      	ldr	r0, [pc, #48]	@ (80027d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027a6:	490d      	ldr	r1, [pc, #52]	@ (80027dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027a8:	4a0d      	ldr	r2, [pc, #52]	@ (80027e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027ac:	e002      	b.n	80027b4 <LoopCopyDataInit>

080027ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027b2:	3304      	adds	r3, #4

080027b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027b8:	d3f9      	bcc.n	80027ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ba:	4a0a      	ldr	r2, [pc, #40]	@ (80027e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027bc:	4c0a      	ldr	r4, [pc, #40]	@ (80027e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027c0:	e001      	b.n	80027c6 <LoopFillZerobss>

080027c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027c4:	3204      	adds	r2, #4

080027c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027c8:	d3fb      	bcc.n	80027c2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80027ca:	f005 f9e1 	bl	8007b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ce:	f7ff f865 	bl	800189c <main>
  bx  lr    
 80027d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80027d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027dc:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80027e0:	0800a220 	.word	0x0800a220
  ldr r2, =_sbss
 80027e4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80027e8:	20000a9c 	.word	0x20000a9c

080027ec <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027ec:	e7fe      	b.n	80027ec <CAN1_RX0_IRQHandler>
	...

080027f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002830 <HAL_Init+0x40>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002830 <HAL_Init+0x40>)
 80027fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002800:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <HAL_Init+0x40>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0a      	ldr	r2, [pc, #40]	@ (8002830 <HAL_Init+0x40>)
 8002806:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800280a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800280c:	4b08      	ldr	r3, [pc, #32]	@ (8002830 <HAL_Init+0x40>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a07      	ldr	r2, [pc, #28]	@ (8002830 <HAL_Init+0x40>)
 8002812:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002816:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002818:	2003      	movs	r0, #3
 800281a:	f000 fe7b 	bl	8003514 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800281e:	200f      	movs	r0, #15
 8002820:	f000 f808 	bl	8002834 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002824:	f7ff fbb0 	bl	8001f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40023c00 	.word	0x40023c00

08002834 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800283c:	4b12      	ldr	r3, [pc, #72]	@ (8002888 <HAL_InitTick+0x54>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	4b12      	ldr	r3, [pc, #72]	@ (800288c <HAL_InitTick+0x58>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	4619      	mov	r1, r3
 8002846:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800284a:	fbb3 f3f1 	udiv	r3, r3, r1
 800284e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002852:	4618      	mov	r0, r3
 8002854:	f000 fe93 	bl	800357e <HAL_SYSTICK_Config>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e00e      	b.n	8002880 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b0f      	cmp	r3, #15
 8002866:	d80a      	bhi.n	800287e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002868:	2200      	movs	r2, #0
 800286a:	6879      	ldr	r1, [r7, #4]
 800286c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002870:	f000 fe5b 	bl	800352a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002874:	4a06      	ldr	r2, [pc, #24]	@ (8002890 <HAL_InitTick+0x5c>)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	e000      	b.n	8002880 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20000000 	.word	0x20000000
 800288c:	20000008 	.word	0x20000008
 8002890:	20000004 	.word	0x20000004

08002894 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002898:	4b06      	ldr	r3, [pc, #24]	@ (80028b4 <HAL_IncTick+0x20>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	461a      	mov	r2, r3
 800289e:	4b06      	ldr	r3, [pc, #24]	@ (80028b8 <HAL_IncTick+0x24>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4413      	add	r3, r2
 80028a4:	4a04      	ldr	r2, [pc, #16]	@ (80028b8 <HAL_IncTick+0x24>)
 80028a6:	6013      	str	r3, [r2, #0]
}
 80028a8:	bf00      	nop
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000008 	.word	0x20000008
 80028b8:	2000094c 	.word	0x2000094c

080028bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return uwTick;
 80028c0:	4b03      	ldr	r3, [pc, #12]	@ (80028d0 <HAL_GetTick+0x14>)
 80028c2:	681b      	ldr	r3, [r3, #0]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	2000094c 	.word	0x2000094c

080028d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028dc:	f7ff ffee 	bl	80028bc <HAL_GetTick>
 80028e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028ec:	d005      	beq.n	80028fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002918 <HAL_Delay+0x44>)
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	461a      	mov	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4413      	add	r3, r2
 80028f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028fa:	bf00      	nop
 80028fc:	f7ff ffde 	bl	80028bc <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	68fa      	ldr	r2, [r7, #12]
 8002908:	429a      	cmp	r2, r3
 800290a:	d8f7      	bhi.n	80028fc <HAL_Delay+0x28>
  {
  }
}
 800290c:	bf00      	nop
 800290e:	bf00      	nop
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20000008 	.word	0x20000008

0800291c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002924:	2300      	movs	r3, #0
 8002926:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d101      	bne.n	8002932 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e033      	b.n	800299a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002936:	2b00      	cmp	r3, #0
 8002938:	d109      	bne.n	800294e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fe fbd4 	bl	80010e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	f003 0310 	and.w	r3, r3, #16
 8002956:	2b00      	cmp	r3, #0
 8002958:	d118      	bne.n	800298c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002962:	f023 0302 	bic.w	r3, r3, #2
 8002966:	f043 0202 	orr.w	r2, r3, #2
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fb78 	bl	8003064 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	f023 0303 	bic.w	r3, r3, #3
 8002982:	f043 0201 	orr.w	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	641a      	str	r2, [r3, #64]	@ 0x40
 800298a:	e001      	b.n	8002990 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002998:	7bfb      	ldrb	r3, [r7, #15]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b086      	sub	sp, #24
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d049      	beq.n	8002a6c <HAL_ADC_IRQHandler+0xca>
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d046      	beq.n	8002a6c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d105      	bne.n	80029f6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d12b      	bne.n	8002a5c <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d127      	bne.n	8002a5c <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a12:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d006      	beq.n	8002a28 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d119      	bne.n	8002a5c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	685a      	ldr	r2, [r3, #4]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f022 0220 	bic.w	r2, r2, #32
 8002a36:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d105      	bne.n	8002a5c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a54:	f043 0201 	orr.w	r2, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f7fe ff0d 	bl	800187c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f06f 0212 	mvn.w	r2, #18
 8002a6a:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 0304 	and.w	r3, r3, #4
 8002a72:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a7a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d057      	beq.n	8002b32 <HAL_ADC_IRQHandler+0x190>
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d054      	beq.n	8002b32 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8c:	f003 0310 	and.w	r3, r3, #16
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d105      	bne.n	8002aa0 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a98:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d139      	bne.n	8002b22 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d006      	beq.n	8002aca <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d12b      	bne.n	8002b22 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d124      	bne.n	8002b22 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d11d      	bne.n	8002b22 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d119      	bne.n	8002b22 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685a      	ldr	r2, [r3, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002afc:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b02:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d105      	bne.n	8002b22 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b1a:	f043 0201 	orr.w	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 fc1c 	bl	8003360 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 020c 	mvn.w	r2, #12
 8002b30:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b40:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d017      	beq.n	8002b78 <HAL_ADC_IRQHandler+0x1d6>
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d014      	beq.n	8002b78 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d10d      	bne.n	8002b78 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b60:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f945 	bl	8002df8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f06f 0201 	mvn.w	r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 0320 	and.w	r3, r3, #32
 8002b7e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b86:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d015      	beq.n	8002bba <HAL_ADC_IRQHandler+0x218>
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d012      	beq.n	8002bba <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b98:	f043 0202 	orr.w	r2, r3, #2
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f06f 0220 	mvn.w	r2, #32
 8002ba8:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f92e 	bl	8002e0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0220 	mvn.w	r2, #32
 8002bb8:	601a      	str	r2, [r3, #0]
  }
}
 8002bba:	bf00      	nop
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
	...

08002bc4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d101      	bne.n	8002be2 <HAL_ADC_Start_DMA+0x1e>
 8002bde:	2302      	movs	r3, #2
 8002be0:	e0e9      	b.n	8002db6 <HAL_ADC_Start_DMA+0x1f2>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d018      	beq.n	8002c2a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c08:	4b6d      	ldr	r3, [pc, #436]	@ (8002dc0 <HAL_ADC_Start_DMA+0x1fc>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a6d      	ldr	r2, [pc, #436]	@ (8002dc4 <HAL_ADC_Start_DMA+0x200>)
 8002c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c12:	0c9a      	lsrs	r2, r3, #18
 8002c14:	4613      	mov	r3, r2
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	4413      	add	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002c1c:	e002      	b.n	8002c24 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	3b01      	subs	r3, #1
 8002c22:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f9      	bne.n	8002c1e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c38:	d107      	bne.n	8002c4a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c48:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	f040 80a1 	bne.w	8002d9c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c5e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002c62:	f023 0301 	bic.w	r3, r3, #1
 8002c66:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d007      	beq.n	8002c8c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c80:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002c84:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c98:	d106      	bne.n	8002ca8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c9e:	f023 0206 	bic.w	r2, r3, #6
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ca6:	e002      	b.n	8002cae <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cb6:	4b44      	ldr	r3, [pc, #272]	@ (8002dc8 <HAL_ADC_Start_DMA+0x204>)
 8002cb8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cbe:	4a43      	ldr	r2, [pc, #268]	@ (8002dcc <HAL_ADC_Start_DMA+0x208>)
 8002cc0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc6:	4a42      	ldr	r2, [pc, #264]	@ (8002dd0 <HAL_ADC_Start_DMA+0x20c>)
 8002cc8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cce:	4a41      	ldr	r2, [pc, #260]	@ (8002dd4 <HAL_ADC_Start_DMA+0x210>)
 8002cd0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002cda:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002cea:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cfa:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	334c      	adds	r3, #76	@ 0x4c
 8002d06:	4619      	mov	r1, r3
 8002d08:	68ba      	ldr	r2, [r7, #8]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f000 fcf2 	bl	80036f4 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d12a      	bne.n	8002d72 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a2d      	ldr	r2, [pc, #180]	@ (8002dd8 <HAL_ADC_Start_DMA+0x214>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d015      	beq.n	8002d52 <HAL_ADC_Start_DMA+0x18e>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a2c      	ldr	r2, [pc, #176]	@ (8002ddc <HAL_ADC_Start_DMA+0x218>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d105      	bne.n	8002d3c <HAL_ADC_Start_DMA+0x178>
 8002d30:	4b25      	ldr	r3, [pc, #148]	@ (8002dc8 <HAL_ADC_Start_DMA+0x204>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 031f 	and.w	r3, r3, #31
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00a      	beq.n	8002d52 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a27      	ldr	r2, [pc, #156]	@ (8002de0 <HAL_ADC_Start_DMA+0x21c>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d136      	bne.n	8002db4 <HAL_ADC_Start_DMA+0x1f0>
 8002d46:	4b20      	ldr	r3, [pc, #128]	@ (8002dc8 <HAL_ADC_Start_DMA+0x204>)
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d130      	bne.n	8002db4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d129      	bne.n	8002db4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002d6e:	609a      	str	r2, [r3, #8]
 8002d70:	e020      	b.n	8002db4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a18      	ldr	r2, [pc, #96]	@ (8002dd8 <HAL_ADC_Start_DMA+0x214>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d11b      	bne.n	8002db4 <HAL_ADC_Start_DMA+0x1f0>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d114      	bne.n	8002db4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002d98:	609a      	str	r2, [r3, #8]
 8002d9a:	e00b      	b.n	8002db4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da0:	f043 0210 	orr.w	r2, r3, #16
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dac:	f043 0201 	orr.w	r2, r3, #1
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000000 	.word	0x20000000
 8002dc4:	431bde83 	.word	0x431bde83
 8002dc8:	40012300 	.word	0x40012300
 8002dcc:	0800325d 	.word	0x0800325d
 8002dd0:	08003317 	.word	0x08003317
 8002dd4:	08003333 	.word	0x08003333
 8002dd8:	40012000 	.word	0x40012000
 8002ddc:	40012100 	.word	0x40012100
 8002de0:	40012200 	.word	0x40012200

08002de4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x1c>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e105      	b.n	8003048 <HAL_ADC_ConfigChannel+0x228>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b09      	cmp	r3, #9
 8002e4a:	d925      	bls.n	8002e98 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68d9      	ldr	r1, [r3, #12]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	4413      	add	r3, r2
 8002e60:	3b1e      	subs	r3, #30
 8002e62:	2207      	movs	r2, #7
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43da      	mvns	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	400a      	ands	r2, r1
 8002e70:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68d9      	ldr	r1, [r3, #12]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	4618      	mov	r0, r3
 8002e84:	4603      	mov	r3, r0
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	4403      	add	r3, r0
 8002e8a:	3b1e      	subs	r3, #30
 8002e8c:	409a      	lsls	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	60da      	str	r2, [r3, #12]
 8002e96:	e022      	b.n	8002ede <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6919      	ldr	r1, [r3, #16]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	4413      	add	r3, r2
 8002eac:	2207      	movs	r2, #7
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43da      	mvns	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	400a      	ands	r2, r1
 8002eba:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6919      	ldr	r1, [r3, #16]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	689a      	ldr	r2, [r3, #8]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	4618      	mov	r0, r3
 8002ece:	4603      	mov	r3, r0
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	4403      	add	r3, r0
 8002ed4:	409a      	lsls	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	2b06      	cmp	r3, #6
 8002ee4:	d824      	bhi.n	8002f30 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	3b05      	subs	r3, #5
 8002ef8:	221f      	movs	r2, #31
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43da      	mvns	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	400a      	ands	r2, r1
 8002f06:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	4618      	mov	r0, r3
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	4413      	add	r3, r2
 8002f20:	3b05      	subs	r3, #5
 8002f22:	fa00 f203 	lsl.w	r2, r0, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002f2e:	e04c      	b.n	8002fca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b0c      	cmp	r3, #12
 8002f36:	d824      	bhi.n	8002f82 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	3b23      	subs	r3, #35	@ 0x23
 8002f4a:	221f      	movs	r2, #31
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	43da      	mvns	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	400a      	ands	r2, r1
 8002f58:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	b29b      	uxth	r3, r3
 8002f66:	4618      	mov	r0, r3
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4413      	add	r3, r2
 8002f72:	3b23      	subs	r3, #35	@ 0x23
 8002f74:	fa00 f203 	lsl.w	r2, r0, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	430a      	orrs	r2, r1
 8002f7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f80:	e023      	b.n	8002fca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685a      	ldr	r2, [r3, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	3b41      	subs	r3, #65	@ 0x41
 8002f94:	221f      	movs	r2, #31
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43da      	mvns	r2, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	400a      	ands	r2, r1
 8002fa2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685a      	ldr	r2, [r3, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	3b41      	subs	r3, #65	@ 0x41
 8002fbe:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fca:	4b22      	ldr	r3, [pc, #136]	@ (8003054 <HAL_ADC_ConfigChannel+0x234>)
 8002fcc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a21      	ldr	r2, [pc, #132]	@ (8003058 <HAL_ADC_ConfigChannel+0x238>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d109      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x1cc>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2b12      	cmp	r3, #18
 8002fde:	d105      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a19      	ldr	r2, [pc, #100]	@ (8003058 <HAL_ADC_ConfigChannel+0x238>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d123      	bne.n	800303e <HAL_ADC_ConfigChannel+0x21e>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b10      	cmp	r3, #16
 8002ffc:	d003      	beq.n	8003006 <HAL_ADC_ConfigChannel+0x1e6>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b11      	cmp	r3, #17
 8003004:	d11b      	bne.n	800303e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2b10      	cmp	r3, #16
 8003018:	d111      	bne.n	800303e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800301a:	4b10      	ldr	r3, [pc, #64]	@ (800305c <HAL_ADC_ConfigChannel+0x23c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a10      	ldr	r2, [pc, #64]	@ (8003060 <HAL_ADC_ConfigChannel+0x240>)
 8003020:	fba2 2303 	umull	r2, r3, r2, r3
 8003024:	0c9a      	lsrs	r2, r3, #18
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003030:	e002      	b.n	8003038 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	3b01      	subs	r3, #1
 8003036:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d1f9      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	40012300 	.word	0x40012300
 8003058:	40012000 	.word	0x40012000
 800305c:	20000000 	.word	0x20000000
 8003060:	431bde83 	.word	0x431bde83

08003064 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800306c:	4b79      	ldr	r3, [pc, #484]	@ (8003254 <ADC_Init+0x1f0>)
 800306e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	685a      	ldr	r2, [r3, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	431a      	orrs	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003098:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6859      	ldr	r1, [r3, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	021a      	lsls	r2, r3, #8
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80030bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6859      	ldr	r1, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6899      	ldr	r1, [r3, #8]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f6:	4a58      	ldr	r2, [pc, #352]	@ (8003258 <ADC_Init+0x1f4>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d022      	beq.n	8003142 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689a      	ldr	r2, [r3, #8]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800310a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	6899      	ldr	r1, [r3, #8]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689a      	ldr	r2, [r3, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800312c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6899      	ldr	r1, [r3, #8]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	430a      	orrs	r2, r1
 800313e:	609a      	str	r2, [r3, #8]
 8003140:	e00f      	b.n	8003162 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689a      	ldr	r2, [r3, #8]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003150:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003160:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0202 	bic.w	r2, r2, #2
 8003170:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6899      	ldr	r1, [r3, #8]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	7e1b      	ldrb	r3, [r3, #24]
 800317c:	005a      	lsls	r2, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	430a      	orrs	r2, r1
 8003184:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3020 	ldrb.w	r3, [r3, #32]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d01b      	beq.n	80031c8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800319e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685a      	ldr	r2, [r3, #4]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80031ae:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6859      	ldr	r1, [r3, #4]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ba:	3b01      	subs	r3, #1
 80031bc:	035a      	lsls	r2, r3, #13
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	605a      	str	r2, [r3, #4]
 80031c6:	e007      	b.n	80031d8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031d6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80031e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	3b01      	subs	r3, #1
 80031f4:	051a      	lsls	r2, r3, #20
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800320c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6899      	ldr	r1, [r3, #8]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800321a:	025a      	lsls	r2, r3, #9
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003232:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6899      	ldr	r1, [r3, #8]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	029a      	lsls	r2, r3, #10
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	609a      	str	r2, [r3, #8]
}
 8003248:	bf00      	nop
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr
 8003254:	40012300 	.word	0x40012300
 8003258:	0f000001 	.word	0x0f000001

0800325c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003268:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003272:	2b00      	cmp	r3, #0
 8003274:	d13c      	bne.n	80032f0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d12b      	bne.n	80032e8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003294:	2b00      	cmp	r3, #0
 8003296:	d127      	bne.n	80032e8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d006      	beq.n	80032b4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d119      	bne.n	80032e8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0220 	bic.w	r2, r2, #32
 80032c2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d105      	bne.n	80032e8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	f043 0201 	orr.w	r2, r3, #1
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032e8:	68f8      	ldr	r0, [r7, #12]
 80032ea:	f7fe fac7 	bl	800187c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80032ee:	e00e      	b.n	800330e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f7ff fd85 	bl	8002e0c <HAL_ADC_ErrorCallback>
}
 8003302:	e004      	b.n	800330e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003308:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	4798      	blx	r3
}
 800330e:	bf00      	nop
 8003310:	3710      	adds	r7, #16
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}

08003316 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003316:	b580      	push	{r7, lr}
 8003318:	b084      	sub	sp, #16
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003322:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f7ff fd5d 	bl	8002de4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800332a:	bf00      	nop
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800333e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2240      	movs	r2, #64	@ 0x40
 8003344:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334a:	f043 0204 	orr.w	r2, r3, #4
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f7ff fd5a 	bl	8002e0c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003358:	bf00      	nop
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003384:	4b0c      	ldr	r3, [pc, #48]	@ (80033b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800338a:	68ba      	ldr	r2, [r7, #8]
 800338c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003390:	4013      	ands	r3, r2
 8003392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800339c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033a6:	4a04      	ldr	r2, [pc, #16]	@ (80033b8 <__NVIC_SetPriorityGrouping+0x44>)
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	60d3      	str	r3, [r2, #12]
}
 80033ac:	bf00      	nop
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr
 80033b8:	e000ed00 	.word	0xe000ed00

080033bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033c0:	4b04      	ldr	r3, [pc, #16]	@ (80033d4 <__NVIC_GetPriorityGrouping+0x18>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	0a1b      	lsrs	r3, r3, #8
 80033c6:	f003 0307 	and.w	r3, r3, #7
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000ed00 	.word	0xe000ed00

080033d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	db0b      	blt.n	8003402 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ea:	79fb      	ldrb	r3, [r7, #7]
 80033ec:	f003 021f 	and.w	r2, r3, #31
 80033f0:	4907      	ldr	r1, [pc, #28]	@ (8003410 <__NVIC_EnableIRQ+0x38>)
 80033f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f6:	095b      	lsrs	r3, r3, #5
 80033f8:	2001      	movs	r0, #1
 80033fa:	fa00 f202 	lsl.w	r2, r0, r2
 80033fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	e000e100 	.word	0xe000e100

08003414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	4603      	mov	r3, r0
 800341c:	6039      	str	r1, [r7, #0]
 800341e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003424:	2b00      	cmp	r3, #0
 8003426:	db0a      	blt.n	800343e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	b2da      	uxtb	r2, r3
 800342c:	490c      	ldr	r1, [pc, #48]	@ (8003460 <__NVIC_SetPriority+0x4c>)
 800342e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003432:	0112      	lsls	r2, r2, #4
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	440b      	add	r3, r1
 8003438:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800343c:	e00a      	b.n	8003454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	b2da      	uxtb	r2, r3
 8003442:	4908      	ldr	r1, [pc, #32]	@ (8003464 <__NVIC_SetPriority+0x50>)
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	3b04      	subs	r3, #4
 800344c:	0112      	lsls	r2, r2, #4
 800344e:	b2d2      	uxtb	r2, r2
 8003450:	440b      	add	r3, r1
 8003452:	761a      	strb	r2, [r3, #24]
}
 8003454:	bf00      	nop
 8003456:	370c      	adds	r7, #12
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr
 8003460:	e000e100 	.word	0xe000e100
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003468:	b480      	push	{r7}
 800346a:	b089      	sub	sp, #36	@ 0x24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 0307 	and.w	r3, r3, #7
 800347a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	f1c3 0307 	rsb	r3, r3, #7
 8003482:	2b04      	cmp	r3, #4
 8003484:	bf28      	it	cs
 8003486:	2304      	movcs	r3, #4
 8003488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	3304      	adds	r3, #4
 800348e:	2b06      	cmp	r3, #6
 8003490:	d902      	bls.n	8003498 <NVIC_EncodePriority+0x30>
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	3b03      	subs	r3, #3
 8003496:	e000      	b.n	800349a <NVIC_EncodePriority+0x32>
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800349c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43da      	mvns	r2, r3
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	401a      	ands	r2, r3
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ba:	43d9      	mvns	r1, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c0:	4313      	orrs	r3, r2
         );
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3724      	adds	r7, #36	@ 0x24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	3b01      	subs	r3, #1
 80034dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034e0:	d301      	bcc.n	80034e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034e2:	2301      	movs	r3, #1
 80034e4:	e00f      	b.n	8003506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003510 <SysTick_Config+0x40>)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ee:	210f      	movs	r1, #15
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80034f4:	f7ff ff8e 	bl	8003414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034f8:	4b05      	ldr	r3, [pc, #20]	@ (8003510 <SysTick_Config+0x40>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034fe:	4b04      	ldr	r3, [pc, #16]	@ (8003510 <SysTick_Config+0x40>)
 8003500:	2207      	movs	r2, #7
 8003502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3708      	adds	r7, #8
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	e000e010 	.word	0xe000e010

08003514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f7ff ff29 	bl	8003374 <__NVIC_SetPriorityGrouping>
}
 8003522:	bf00      	nop
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800352a:	b580      	push	{r7, lr}
 800352c:	b086      	sub	sp, #24
 800352e:	af00      	add	r7, sp, #0
 8003530:	4603      	mov	r3, r0
 8003532:	60b9      	str	r1, [r7, #8]
 8003534:	607a      	str	r2, [r7, #4]
 8003536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800353c:	f7ff ff3e 	bl	80033bc <__NVIC_GetPriorityGrouping>
 8003540:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	6978      	ldr	r0, [r7, #20]
 8003548:	f7ff ff8e 	bl	8003468 <NVIC_EncodePriority>
 800354c:	4602      	mov	r2, r0
 800354e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003552:	4611      	mov	r1, r2
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff5d 	bl	8003414 <__NVIC_SetPriority>
}
 800355a:	bf00      	nop
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	4603      	mov	r3, r0
 800356a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800356c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff ff31 	bl	80033d8 <__NVIC_EnableIRQ>
}
 8003576:	bf00      	nop
 8003578:	3708      	adds	r7, #8
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f7ff ffa2 	bl	80034d0 <SysTick_Config>
 800358c:	4603      	mov	r3, r0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
	...

08003598 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035a4:	f7ff f98a 	bl	80028bc <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e099      	b.n	80036e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0201 	bic.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035d4:	e00f      	b.n	80035f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035d6:	f7ff f971 	bl	80028bc <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b05      	cmp	r3, #5
 80035e2:	d908      	bls.n	80035f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2220      	movs	r2, #32
 80035e8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2203      	movs	r2, #3
 80035ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e078      	b.n	80036e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0301 	and.w	r3, r3, #1
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1e8      	bne.n	80035d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	4b38      	ldr	r3, [pc, #224]	@ (80036f0 <HAL_DMA_Init+0x158>)
 8003610:	4013      	ands	r3, r2
 8003612:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003622:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800362e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800363a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6a1b      	ldr	r3, [r3, #32]
 8003640:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4313      	orrs	r3, r2
 8003646:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364c:	2b04      	cmp	r3, #4
 800364e:	d107      	bne.n	8003660 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003658:	4313      	orrs	r3, r2
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	697a      	ldr	r2, [r7, #20]
 8003666:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f023 0307 	bic.w	r3, r3, #7
 8003676:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	697a      	ldr	r2, [r7, #20]
 800367e:	4313      	orrs	r3, r2
 8003680:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003686:	2b04      	cmp	r3, #4
 8003688:	d117      	bne.n	80036ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4313      	orrs	r3, r2
 8003692:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00e      	beq.n	80036ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f000 fa6f 	bl	8003b80 <DMA_CheckFifoParam>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d008      	beq.n	80036ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2240      	movs	r2, #64	@ 0x40
 80036ac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80036b6:	2301      	movs	r3, #1
 80036b8:	e016      	b.n	80036e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 fa26 	bl	8003b14 <DMA_CalcBaseAndBitshift>
 80036c8:	4603      	mov	r3, r0
 80036ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d0:	223f      	movs	r2, #63	@ 0x3f
 80036d2:	409a      	lsls	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3718      	adds	r7, #24
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	f010803f 	.word	0xf010803f

080036f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003702:	2300      	movs	r3, #0
 8003704:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003712:	2b01      	cmp	r3, #1
 8003714:	d101      	bne.n	800371a <HAL_DMA_Start_IT+0x26>
 8003716:	2302      	movs	r3, #2
 8003718:	e040      	b.n	800379c <HAL_DMA_Start_IT+0xa8>
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b01      	cmp	r3, #1
 800372c:	d12f      	bne.n	800378e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2202      	movs	r2, #2
 8003732:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f9b8 	bl	8003ab8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374c:	223f      	movs	r2, #63	@ 0x3f
 800374e:	409a      	lsls	r2, r3
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0216 	orr.w	r2, r2, #22
 8003762:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003768:	2b00      	cmp	r3, #0
 800376a:	d007      	beq.n	800377c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0208 	orr.w	r2, r2, #8
 800377a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f042 0201 	orr.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	e005      	b.n	800379a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003796:	2302      	movs	r3, #2
 8003798:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800379a:	7dfb      	ldrb	r3, [r7, #23]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3718      	adds	r7, #24
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037b0:	4b8e      	ldr	r3, [pc, #568]	@ (80039ec <HAL_DMA_IRQHandler+0x248>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a8e      	ldr	r2, [pc, #568]	@ (80039f0 <HAL_DMA_IRQHandler+0x24c>)
 80037b6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ba:	0a9b      	lsrs	r3, r3, #10
 80037bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ce:	2208      	movs	r2, #8
 80037d0:	409a      	lsls	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d01a      	beq.n	8003810 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0304 	and.w	r3, r3, #4
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d013      	beq.n	8003810 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0204 	bic.w	r2, r2, #4
 80037f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037fc:	2208      	movs	r2, #8
 80037fe:	409a      	lsls	r2, r3
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003808:	f043 0201 	orr.w	r2, r3, #1
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003814:	2201      	movs	r2, #1
 8003816:	409a      	lsls	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	4013      	ands	r3, r2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d012      	beq.n	8003846 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003832:	2201      	movs	r2, #1
 8003834:	409a      	lsls	r2, r3
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800383e:	f043 0202 	orr.w	r2, r3, #2
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800384a:	2204      	movs	r2, #4
 800384c:	409a      	lsls	r2, r3
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	4013      	ands	r3, r2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d012      	beq.n	800387c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00b      	beq.n	800387c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003868:	2204      	movs	r2, #4
 800386a:	409a      	lsls	r2, r3
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003874:	f043 0204 	orr.w	r2, r3, #4
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003880:	2210      	movs	r2, #16
 8003882:	409a      	lsls	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4013      	ands	r3, r2
 8003888:	2b00      	cmp	r3, #0
 800388a:	d043      	beq.n	8003914 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0308 	and.w	r3, r3, #8
 8003896:	2b00      	cmp	r3, #0
 8003898:	d03c      	beq.n	8003914 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389e:	2210      	movs	r2, #16
 80038a0:	409a      	lsls	r2, r3
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d018      	beq.n	80038e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d108      	bne.n	80038d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d024      	beq.n	8003914 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	4798      	blx	r3
 80038d2:	e01f      	b.n	8003914 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d01b      	beq.n	8003914 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	4798      	blx	r3
 80038e4:	e016      	b.n	8003914 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d107      	bne.n	8003904 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f022 0208 	bic.w	r2, r2, #8
 8003902:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003908:	2b00      	cmp	r3, #0
 800390a:	d003      	beq.n	8003914 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003918:	2220      	movs	r2, #32
 800391a:	409a      	lsls	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4013      	ands	r3, r2
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 808f 	beq.w	8003a44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 8087 	beq.w	8003a44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800393a:	2220      	movs	r2, #32
 800393c:	409a      	lsls	r2, r3
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b05      	cmp	r3, #5
 800394c:	d136      	bne.n	80039bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0216 	bic.w	r2, r2, #22
 800395c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695a      	ldr	r2, [r3, #20]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800396c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d103      	bne.n	800397e <HAL_DMA_IRQHandler+0x1da>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800397a:	2b00      	cmp	r3, #0
 800397c:	d007      	beq.n	800398e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f022 0208 	bic.w	r2, r2, #8
 800398c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003992:	223f      	movs	r2, #63	@ 0x3f
 8003994:	409a      	lsls	r2, r3
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d07e      	beq.n	8003ab0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	4798      	blx	r3
        }
        return;
 80039ba:	e079      	b.n	8003ab0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d01d      	beq.n	8003a06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10d      	bne.n	80039f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d031      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	4798      	blx	r3
 80039e8:	e02c      	b.n	8003a44 <HAL_DMA_IRQHandler+0x2a0>
 80039ea:	bf00      	nop
 80039ec:	20000000 	.word	0x20000000
 80039f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d023      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	4798      	blx	r3
 8003a04:	e01e      	b.n	8003a44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10f      	bne.n	8003a34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0210 	bic.w	r2, r2, #16
 8003a22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d032      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d022      	beq.n	8003a9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2205      	movs	r2, #5
 8003a5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	3301      	adds	r3, #1
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d307      	bcc.n	8003a8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1f2      	bne.n	8003a70 <HAL_DMA_IRQHandler+0x2cc>
 8003a8a:	e000      	b.n	8003a8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003a8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d005      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	4798      	blx	r3
 8003aae:	e000      	b.n	8003ab2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ab0:	bf00      	nop
    }
  }
}
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
 8003ac4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ad4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	2b40      	cmp	r3, #64	@ 0x40
 8003ae4:	d108      	bne.n	8003af8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003af6:	e007      	b.n	8003b08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	60da      	str	r2, [r3, #12]
}
 8003b08:	bf00      	nop
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	3b10      	subs	r3, #16
 8003b24:	4a14      	ldr	r2, [pc, #80]	@ (8003b78 <DMA_CalcBaseAndBitshift+0x64>)
 8003b26:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2a:	091b      	lsrs	r3, r3, #4
 8003b2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b2e:	4a13      	ldr	r2, [pc, #76]	@ (8003b7c <DMA_CalcBaseAndBitshift+0x68>)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	4413      	add	r3, r2
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	d909      	bls.n	8003b56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003b4a:	f023 0303 	bic.w	r3, r3, #3
 8003b4e:	1d1a      	adds	r2, r3, #4
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b54:	e007      	b.n	8003b66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003b5e:	f023 0303 	bic.w	r3, r3, #3
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	aaaaaaab 	.word	0xaaaaaaab
 8003b7c:	08009e94 	.word	0x08009e94

08003b80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d11f      	bne.n	8003bda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d856      	bhi.n	8003c4e <DMA_CheckFifoParam+0xce>
 8003ba0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba8 <DMA_CheckFifoParam+0x28>)
 8003ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba6:	bf00      	nop
 8003ba8:	08003bb9 	.word	0x08003bb9
 8003bac:	08003bcb 	.word	0x08003bcb
 8003bb0:	08003bb9 	.word	0x08003bb9
 8003bb4:	08003c4f 	.word	0x08003c4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d046      	beq.n	8003c52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bc8:	e043      	b.n	8003c52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003bd2:	d140      	bne.n	8003c56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bd8:	e03d      	b.n	8003c56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003be2:	d121      	bne.n	8003c28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2b03      	cmp	r3, #3
 8003be8:	d837      	bhi.n	8003c5a <DMA_CheckFifoParam+0xda>
 8003bea:	a201      	add	r2, pc, #4	@ (adr r2, 8003bf0 <DMA_CheckFifoParam+0x70>)
 8003bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf0:	08003c01 	.word	0x08003c01
 8003bf4:	08003c07 	.word	0x08003c07
 8003bf8:	08003c01 	.word	0x08003c01
 8003bfc:	08003c19 	.word	0x08003c19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	73fb      	strb	r3, [r7, #15]
      break;
 8003c04:	e030      	b.n	8003c68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d025      	beq.n	8003c5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c16:	e022      	b.n	8003c5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c20:	d11f      	bne.n	8003c62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c26:	e01c      	b.n	8003c62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d903      	bls.n	8003c36 <DMA_CheckFifoParam+0xb6>
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	2b03      	cmp	r3, #3
 8003c32:	d003      	beq.n	8003c3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c34:	e018      	b.n	8003c68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	73fb      	strb	r3, [r7, #15]
      break;
 8003c3a:	e015      	b.n	8003c68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00e      	beq.n	8003c66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c4c:	e00b      	b.n	8003c66 <DMA_CheckFifoParam+0xe6>
      break;
 8003c4e:	bf00      	nop
 8003c50:	e00a      	b.n	8003c68 <DMA_CheckFifoParam+0xe8>
      break;
 8003c52:	bf00      	nop
 8003c54:	e008      	b.n	8003c68 <DMA_CheckFifoParam+0xe8>
      break;
 8003c56:	bf00      	nop
 8003c58:	e006      	b.n	8003c68 <DMA_CheckFifoParam+0xe8>
      break;
 8003c5a:	bf00      	nop
 8003c5c:	e004      	b.n	8003c68 <DMA_CheckFifoParam+0xe8>
      break;
 8003c5e:	bf00      	nop
 8003c60:	e002      	b.n	8003c68 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c62:	bf00      	nop
 8003c64:	e000      	b.n	8003c68 <DMA_CheckFifoParam+0xe8>
      break;
 8003c66:	bf00      	nop
    }
  } 
  
  return status; 
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop

08003c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b089      	sub	sp, #36	@ 0x24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61fb      	str	r3, [r7, #28]
 8003c92:	e16b      	b.n	8003f6c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c94:	2201      	movs	r2, #1
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	f040 815a 	bne.w	8003f66 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d005      	beq.n	8003cca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d130      	bne.n	8003d2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cda:	43db      	mvns	r3, r3
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	68da      	ldr	r2, [r3, #12]
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d00:	2201      	movs	r2, #1
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	f003 0201 	and.w	r2, r3, #1
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f003 0303 	and.w	r3, r3, #3
 8003d34:	2b03      	cmp	r3, #3
 8003d36:	d017      	beq.n	8003d68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	2203      	movs	r2, #3
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	43db      	mvns	r3, r3
 8003d4a:	69ba      	ldr	r2, [r7, #24]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d123      	bne.n	8003dbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	08da      	lsrs	r2, r3, #3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3208      	adds	r2, #8
 8003d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	220f      	movs	r2, #15
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4013      	ands	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	fa02 f303 	lsl.w	r3, r2, r3
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	08da      	lsrs	r2, r3, #3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	3208      	adds	r2, #8
 8003db6:	69b9      	ldr	r1, [r7, #24]
 8003db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	2203      	movs	r2, #3
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f003 0203 	and.w	r2, r3, #3
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	005b      	lsls	r3, r3, #1
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69ba      	ldr	r2, [r7, #24]
 8003dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 80b4 	beq.w	8003f66 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60fb      	str	r3, [r7, #12]
 8003e02:	4b60      	ldr	r3, [pc, #384]	@ (8003f84 <HAL_GPIO_Init+0x30c>)
 8003e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e06:	4a5f      	ldr	r2, [pc, #380]	@ (8003f84 <HAL_GPIO_Init+0x30c>)
 8003e08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e0e:	4b5d      	ldr	r3, [pc, #372]	@ (8003f84 <HAL_GPIO_Init+0x30c>)
 8003e10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e1a:	4a5b      	ldr	r2, [pc, #364]	@ (8003f88 <HAL_GPIO_Init+0x310>)
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	089b      	lsrs	r3, r3, #2
 8003e20:	3302      	adds	r3, #2
 8003e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f003 0303 	and.w	r3, r3, #3
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	220f      	movs	r2, #15
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43db      	mvns	r3, r3
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a52      	ldr	r2, [pc, #328]	@ (8003f8c <HAL_GPIO_Init+0x314>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d02b      	beq.n	8003e9e <HAL_GPIO_Init+0x226>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a51      	ldr	r2, [pc, #324]	@ (8003f90 <HAL_GPIO_Init+0x318>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d025      	beq.n	8003e9a <HAL_GPIO_Init+0x222>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a50      	ldr	r2, [pc, #320]	@ (8003f94 <HAL_GPIO_Init+0x31c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d01f      	beq.n	8003e96 <HAL_GPIO_Init+0x21e>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a4f      	ldr	r2, [pc, #316]	@ (8003f98 <HAL_GPIO_Init+0x320>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d019      	beq.n	8003e92 <HAL_GPIO_Init+0x21a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a4e      	ldr	r2, [pc, #312]	@ (8003f9c <HAL_GPIO_Init+0x324>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d013      	beq.n	8003e8e <HAL_GPIO_Init+0x216>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a4d      	ldr	r2, [pc, #308]	@ (8003fa0 <HAL_GPIO_Init+0x328>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d00d      	beq.n	8003e8a <HAL_GPIO_Init+0x212>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a4c      	ldr	r2, [pc, #304]	@ (8003fa4 <HAL_GPIO_Init+0x32c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d007      	beq.n	8003e86 <HAL_GPIO_Init+0x20e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a4b      	ldr	r2, [pc, #300]	@ (8003fa8 <HAL_GPIO_Init+0x330>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d101      	bne.n	8003e82 <HAL_GPIO_Init+0x20a>
 8003e7e:	2307      	movs	r3, #7
 8003e80:	e00e      	b.n	8003ea0 <HAL_GPIO_Init+0x228>
 8003e82:	2308      	movs	r3, #8
 8003e84:	e00c      	b.n	8003ea0 <HAL_GPIO_Init+0x228>
 8003e86:	2306      	movs	r3, #6
 8003e88:	e00a      	b.n	8003ea0 <HAL_GPIO_Init+0x228>
 8003e8a:	2305      	movs	r3, #5
 8003e8c:	e008      	b.n	8003ea0 <HAL_GPIO_Init+0x228>
 8003e8e:	2304      	movs	r3, #4
 8003e90:	e006      	b.n	8003ea0 <HAL_GPIO_Init+0x228>
 8003e92:	2303      	movs	r3, #3
 8003e94:	e004      	b.n	8003ea0 <HAL_GPIO_Init+0x228>
 8003e96:	2302      	movs	r3, #2
 8003e98:	e002      	b.n	8003ea0 <HAL_GPIO_Init+0x228>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <HAL_GPIO_Init+0x228>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	f002 0203 	and.w	r2, r2, #3
 8003ea6:	0092      	lsls	r2, r2, #2
 8003ea8:	4093      	lsls	r3, r2
 8003eaa:	69ba      	ldr	r2, [r7, #24]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003eb0:	4935      	ldr	r1, [pc, #212]	@ (8003f88 <HAL_GPIO_Init+0x310>)
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	089b      	lsrs	r3, r3, #2
 8003eb6:	3302      	adds	r3, #2
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8003fac <HAL_GPIO_Init+0x334>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	69ba      	ldr	r2, [r7, #24]
 8003eca:	4013      	ands	r3, r2
 8003ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d003      	beq.n	8003ee2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ee2:	4a32      	ldr	r2, [pc, #200]	@ (8003fac <HAL_GPIO_Init+0x334>)
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ee8:	4b30      	ldr	r3, [pc, #192]	@ (8003fac <HAL_GPIO_Init+0x334>)
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d003      	beq.n	8003f0c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f0c:	4a27      	ldr	r2, [pc, #156]	@ (8003fac <HAL_GPIO_Init+0x334>)
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f12:	4b26      	ldr	r3, [pc, #152]	@ (8003fac <HAL_GPIO_Init+0x334>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	43db      	mvns	r3, r3
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4013      	ands	r3, r2
 8003f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d003      	beq.n	8003f36 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f36:	4a1d      	ldr	r2, [pc, #116]	@ (8003fac <HAL_GPIO_Init+0x334>)
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003fac <HAL_GPIO_Init+0x334>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	43db      	mvns	r3, r3
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f60:	4a12      	ldr	r2, [pc, #72]	@ (8003fac <HAL_GPIO_Init+0x334>)
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	61fb      	str	r3, [r7, #28]
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	2b0f      	cmp	r3, #15
 8003f70:	f67f ae90 	bls.w	8003c94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop
 8003f78:	3724      	adds	r7, #36	@ 0x24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
 8003f82:	bf00      	nop
 8003f84:	40023800 	.word	0x40023800
 8003f88:	40013800 	.word	0x40013800
 8003f8c:	40020000 	.word	0x40020000
 8003f90:	40020400 	.word	0x40020400
 8003f94:	40020800 	.word	0x40020800
 8003f98:	40020c00 	.word	0x40020c00
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	40021400 	.word	0x40021400
 8003fa4:	40021800 	.word	0x40021800
 8003fa8:	40021c00 	.word	0x40021c00
 8003fac:	40013c00 	.word	0x40013c00

08003fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	807b      	strh	r3, [r7, #2]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fc0:	787b      	ldrb	r3, [r7, #1]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fc6:	887a      	ldrh	r2, [r7, #2]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003fcc:	e003      	b.n	8003fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003fce:	887b      	ldrh	r3, [r7, #2]
 8003fd0:	041a      	lsls	r2, r3, #16
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	619a      	str	r2, [r3, #24]
}
 8003fd6:	bf00      	nop
 8003fd8:	370c      	adds	r7, #12
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
	...

08003fe4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e12b      	b.n	800424e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d106      	bne.n	8004010 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f7fd fb66 	bl	80016dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2224      	movs	r2, #36	@ 0x24
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0201 	bic.w	r2, r2, #1
 8004026:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004036:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004046:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004048:	f001 fd60 	bl	8005b0c <HAL_RCC_GetPCLK1Freq>
 800404c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	4a81      	ldr	r2, [pc, #516]	@ (8004258 <HAL_I2C_Init+0x274>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d807      	bhi.n	8004068 <HAL_I2C_Init+0x84>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4a80      	ldr	r2, [pc, #512]	@ (800425c <HAL_I2C_Init+0x278>)
 800405c:	4293      	cmp	r3, r2
 800405e:	bf94      	ite	ls
 8004060:	2301      	movls	r3, #1
 8004062:	2300      	movhi	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	e006      	b.n	8004076 <HAL_I2C_Init+0x92>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4a7d      	ldr	r2, [pc, #500]	@ (8004260 <HAL_I2C_Init+0x27c>)
 800406c:	4293      	cmp	r3, r2
 800406e:	bf94      	ite	ls
 8004070:	2301      	movls	r3, #1
 8004072:	2300      	movhi	r3, #0
 8004074:	b2db      	uxtb	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e0e7      	b.n	800424e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4a78      	ldr	r2, [pc, #480]	@ (8004264 <HAL_I2C_Init+0x280>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	0c9b      	lsrs	r3, r3, #18
 8004088:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	430a      	orrs	r2, r1
 800409c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	4a6a      	ldr	r2, [pc, #424]	@ (8004258 <HAL_I2C_Init+0x274>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d802      	bhi.n	80040b8 <HAL_I2C_Init+0xd4>
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	3301      	adds	r3, #1
 80040b6:	e009      	b.n	80040cc <HAL_I2C_Init+0xe8>
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80040be:	fb02 f303 	mul.w	r3, r2, r3
 80040c2:	4a69      	ldr	r2, [pc, #420]	@ (8004268 <HAL_I2C_Init+0x284>)
 80040c4:	fba2 2303 	umull	r2, r3, r2, r3
 80040c8:	099b      	lsrs	r3, r3, #6
 80040ca:	3301      	adds	r3, #1
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6812      	ldr	r2, [r2, #0]
 80040d0:	430b      	orrs	r3, r1
 80040d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80040de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	495c      	ldr	r1, [pc, #368]	@ (8004258 <HAL_I2C_Init+0x274>)
 80040e8:	428b      	cmp	r3, r1
 80040ea:	d819      	bhi.n	8004120 <HAL_I2C_Init+0x13c>
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	1e59      	subs	r1, r3, #1
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80040fa:	1c59      	adds	r1, r3, #1
 80040fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004100:	400b      	ands	r3, r1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <HAL_I2C_Init+0x138>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	1e59      	subs	r1, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	fbb1 f3f3 	udiv	r3, r1, r3
 8004114:	3301      	adds	r3, #1
 8004116:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800411a:	e051      	b.n	80041c0 <HAL_I2C_Init+0x1dc>
 800411c:	2304      	movs	r3, #4
 800411e:	e04f      	b.n	80041c0 <HAL_I2C_Init+0x1dc>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d111      	bne.n	800414c <HAL_I2C_Init+0x168>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	1e58      	subs	r0, r3, #1
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6859      	ldr	r1, [r3, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	440b      	add	r3, r1
 8004136:	fbb0 f3f3 	udiv	r3, r0, r3
 800413a:	3301      	adds	r3, #1
 800413c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004140:	2b00      	cmp	r3, #0
 8004142:	bf0c      	ite	eq
 8004144:	2301      	moveq	r3, #1
 8004146:	2300      	movne	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	e012      	b.n	8004172 <HAL_I2C_Init+0x18e>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	1e58      	subs	r0, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	0099      	lsls	r1, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004162:	3301      	adds	r3, #1
 8004164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004168:	2b00      	cmp	r3, #0
 800416a:	bf0c      	ite	eq
 800416c:	2301      	moveq	r3, #1
 800416e:	2300      	movne	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <HAL_I2C_Init+0x196>
 8004176:	2301      	movs	r3, #1
 8004178:	e022      	b.n	80041c0 <HAL_I2C_Init+0x1dc>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d10e      	bne.n	80041a0 <HAL_I2C_Init+0x1bc>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1e58      	subs	r0, r3, #1
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6859      	ldr	r1, [r3, #4]
 800418a:	460b      	mov	r3, r1
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	440b      	add	r3, r1
 8004190:	fbb0 f3f3 	udiv	r3, r0, r3
 8004194:	3301      	adds	r3, #1
 8004196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800419a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800419e:	e00f      	b.n	80041c0 <HAL_I2C_Init+0x1dc>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	1e58      	subs	r0, r3, #1
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6859      	ldr	r1, [r3, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	0099      	lsls	r1, r3, #2
 80041b0:	440b      	add	r3, r1
 80041b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041b6:	3301      	adds	r3, #1
 80041b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041c0:	6879      	ldr	r1, [r7, #4]
 80041c2:	6809      	ldr	r1, [r1, #0]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69da      	ldr	r2, [r3, #28]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80041ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6911      	ldr	r1, [r2, #16]
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	68d2      	ldr	r2, [r2, #12]
 80041fa:	4311      	orrs	r1, r2
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6812      	ldr	r2, [r2, #0]
 8004200:	430b      	orrs	r3, r1
 8004202:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68db      	ldr	r3, [r3, #12]
 800420a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695a      	ldr	r2, [r3, #20]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	430a      	orrs	r2, r1
 800421e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 0201 	orr.w	r2, r2, #1
 800422e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800424c:	2300      	movs	r3, #0
}
 800424e:	4618      	mov	r0, r3
 8004250:	3710      	adds	r7, #16
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	000186a0 	.word	0x000186a0
 800425c:	001e847f 	.word	0x001e847f
 8004260:	003d08ff 	.word	0x003d08ff
 8004264:	431bde83 	.word	0x431bde83
 8004268:	10624dd3 	.word	0x10624dd3

0800426c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af02      	add	r7, sp, #8
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	607a      	str	r2, [r7, #4]
 8004276:	461a      	mov	r2, r3
 8004278:	460b      	mov	r3, r1
 800427a:	817b      	strh	r3, [r7, #10]
 800427c:	4613      	mov	r3, r2
 800427e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004280:	f7fe fb1c 	bl	80028bc <HAL_GetTick>
 8004284:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b20      	cmp	r3, #32
 8004290:	f040 80e0 	bne.w	8004454 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	2319      	movs	r3, #25
 800429a:	2201      	movs	r2, #1
 800429c:	4970      	ldr	r1, [pc, #448]	@ (8004460 <HAL_I2C_Master_Transmit+0x1f4>)
 800429e:	68f8      	ldr	r0, [r7, #12]
 80042a0:	f000 fc7e 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80042aa:	2302      	movs	r3, #2
 80042ac:	e0d3      	b.n	8004456 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d101      	bne.n	80042bc <HAL_I2C_Master_Transmit+0x50>
 80042b8:	2302      	movs	r3, #2
 80042ba:	e0cc      	b.n	8004456 <HAL_I2C_Master_Transmit+0x1ea>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d007      	beq.n	80042e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f042 0201 	orr.w	r2, r2, #1
 80042e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2221      	movs	r2, #33	@ 0x21
 80042f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2210      	movs	r2, #16
 80042fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	893a      	ldrh	r2, [r7, #8]
 8004312:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	4a50      	ldr	r2, [pc, #320]	@ (8004464 <HAL_I2C_Master_Transmit+0x1f8>)
 8004322:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004324:	8979      	ldrh	r1, [r7, #10]
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	6a3a      	ldr	r2, [r7, #32]
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 face 	bl	80048cc <I2C_MasterRequestWrite>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e08d      	b.n	8004456 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800433a:	2300      	movs	r3, #0
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	613b      	str	r3, [r7, #16]
 800434e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004350:	e066      	b.n	8004420 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004352:	697a      	ldr	r2, [r7, #20]
 8004354:	6a39      	ldr	r1, [r7, #32]
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f000 fd3c 	bl	8004dd4 <I2C_WaitOnTXEFlagUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00d      	beq.n	800437e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004366:	2b04      	cmp	r3, #4
 8004368:	d107      	bne.n	800437a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004378:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e06b      	b.n	8004456 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004382:	781a      	ldrb	r2, [r3, #0]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a6:	3b01      	subs	r3, #1
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	695b      	ldr	r3, [r3, #20]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b04      	cmp	r3, #4
 80043ba:	d11b      	bne.n	80043f4 <HAL_I2C_Master_Transmit+0x188>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d017      	beq.n	80043f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c8:	781a      	ldrb	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	6a39      	ldr	r1, [r7, #32]
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 fd33 	bl	8004e64 <I2C_WaitOnBTFFlagUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00d      	beq.n	8004420 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004408:	2b04      	cmp	r3, #4
 800440a:	d107      	bne.n	800441c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800441a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e01a      	b.n	8004456 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004424:	2b00      	cmp	r3, #0
 8004426:	d194      	bne.n	8004352 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004436:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	e000      	b.n	8004456 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004454:	2302      	movs	r3, #2
  }
}
 8004456:	4618      	mov	r0, r3
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	00100002 	.word	0x00100002
 8004464:	ffff0000 	.word	0xffff0000

08004468 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08c      	sub	sp, #48	@ 0x30
 800446c:	af02      	add	r7, sp, #8
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	4608      	mov	r0, r1
 8004472:	4611      	mov	r1, r2
 8004474:	461a      	mov	r2, r3
 8004476:	4603      	mov	r3, r0
 8004478:	817b      	strh	r3, [r7, #10]
 800447a:	460b      	mov	r3, r1
 800447c:	813b      	strh	r3, [r7, #8]
 800447e:	4613      	mov	r3, r2
 8004480:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004482:	f7fe fa1b 	bl	80028bc <HAL_GetTick>
 8004486:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b20      	cmp	r3, #32
 8004492:	f040 8214 	bne.w	80048be <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	2319      	movs	r3, #25
 800449c:	2201      	movs	r2, #1
 800449e:	497b      	ldr	r1, [pc, #492]	@ (800468c <HAL_I2C_Mem_Read+0x224>)
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 fb7d 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80044ac:	2302      	movs	r3, #2
 80044ae:	e207      	b.n	80048c0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_I2C_Mem_Read+0x56>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e200      	b.n	80048c0 <HAL_I2C_Mem_Read+0x458>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d007      	beq.n	80044e4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2222      	movs	r2, #34	@ 0x22
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2240      	movs	r2, #64	@ 0x40
 8004500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800450e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004514:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800451a:	b29a      	uxth	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4a5b      	ldr	r2, [pc, #364]	@ (8004690 <HAL_I2C_Mem_Read+0x228>)
 8004524:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004526:	88f8      	ldrh	r0, [r7, #6]
 8004528:	893a      	ldrh	r2, [r7, #8]
 800452a:	8979      	ldrh	r1, [r7, #10]
 800452c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452e:	9301      	str	r3, [sp, #4]
 8004530:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	4603      	mov	r3, r0
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 fa4a 	bl	80049d0 <I2C_RequestMemoryRead>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e1bc      	b.n	80048c0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800454a:	2b00      	cmp	r3, #0
 800454c:	d113      	bne.n	8004576 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800454e:	2300      	movs	r3, #0
 8004550:	623b      	str	r3, [r7, #32]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	695b      	ldr	r3, [r3, #20]
 8004558:	623b      	str	r3, [r7, #32]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	623b      	str	r3, [r7, #32]
 8004562:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004572:	601a      	str	r2, [r3, #0]
 8004574:	e190      	b.n	8004898 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800457a:	2b01      	cmp	r3, #1
 800457c:	d11b      	bne.n	80045b6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800458c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800458e:	2300      	movs	r3, #0
 8004590:	61fb      	str	r3, [r7, #28]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695b      	ldr	r3, [r3, #20]
 8004598:	61fb      	str	r3, [r7, #28]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699b      	ldr	r3, [r3, #24]
 80045a0:	61fb      	str	r3, [r7, #28]
 80045a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	e170      	b.n	8004898 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d11b      	bne.n	80045f6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045de:	2300      	movs	r3, #0
 80045e0:	61bb      	str	r3, [r7, #24]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	61bb      	str	r3, [r7, #24]
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	61bb      	str	r3, [r7, #24]
 80045f2:	69bb      	ldr	r3, [r7, #24]
 80045f4:	e150      	b.n	8004898 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045f6:	2300      	movs	r3, #0
 80045f8:	617b      	str	r3, [r7, #20]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	617b      	str	r3, [r7, #20]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	617b      	str	r3, [r7, #20]
 800460a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800460c:	e144      	b.n	8004898 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004612:	2b03      	cmp	r3, #3
 8004614:	f200 80f1 	bhi.w	80047fa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800461c:	2b01      	cmp	r3, #1
 800461e:	d123      	bne.n	8004668 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004620:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004622:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 fc65 	bl	8004ef4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e145      	b.n	80048c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004650:	3b01      	subs	r3, #1
 8004652:	b29a      	uxth	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800465c:	b29b      	uxth	r3, r3
 800465e:	3b01      	subs	r3, #1
 8004660:	b29a      	uxth	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004666:	e117      	b.n	8004898 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800466c:	2b02      	cmp	r3, #2
 800466e:	d14e      	bne.n	800470e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004672:	9300      	str	r3, [sp, #0]
 8004674:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004676:	2200      	movs	r2, #0
 8004678:	4906      	ldr	r1, [pc, #24]	@ (8004694 <HAL_I2C_Mem_Read+0x22c>)
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 fa90 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d008      	beq.n	8004698 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e11a      	b.n	80048c0 <HAL_I2C_Mem_Read+0x458>
 800468a:	bf00      	nop
 800468c:	00100002 	.word	0x00100002
 8004690:	ffff0000 	.word	0xffff0000
 8004694:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691a      	ldr	r2, [r3, #16]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	691a      	ldr	r2, [r3, #16]
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e4:	b2d2      	uxtb	r2, r2
 80046e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046f6:	3b01      	subs	r3, #1
 80046f8:	b29a      	uxth	r2, r3
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004702:	b29b      	uxth	r3, r3
 8004704:	3b01      	subs	r3, #1
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800470c:	e0c4      	b.n	8004898 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800470e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004710:	9300      	str	r3, [sp, #0]
 8004712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004714:	2200      	movs	r2, #0
 8004716:	496c      	ldr	r1, [pc, #432]	@ (80048c8 <HAL_I2C_Mem_Read+0x460>)
 8004718:	68f8      	ldr	r0, [r7, #12]
 800471a:	f000 fa41 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e0cb      	b.n	80048c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004736:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800474a:	1c5a      	adds	r2, r3, #1
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004754:	3b01      	subs	r3, #1
 8004756:	b29a      	uxth	r2, r3
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004770:	2200      	movs	r2, #0
 8004772:	4955      	ldr	r1, [pc, #340]	@ (80048c8 <HAL_I2C_Mem_Read+0x460>)
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 fa13 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d001      	beq.n	8004784 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e09d      	b.n	80048c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004792:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	691a      	ldr	r2, [r3, #16]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047b0:	3b01      	subs	r3, #1
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047bc:	b29b      	uxth	r3, r3
 80047be:	3b01      	subs	r3, #1
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d0:	b2d2      	uxtb	r2, r2
 80047d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e2:	3b01      	subs	r3, #1
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	3b01      	subs	r3, #1
 80047f2:	b29a      	uxth	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80047f8:	e04e      	b.n	8004898 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 fb78 	bl	8004ef4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e058      	b.n	80048c0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	691a      	ldr	r2, [r3, #16]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004818:	b2d2      	uxtb	r2, r2
 800481a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004820:	1c5a      	adds	r2, r3, #1
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800482a:	3b01      	subs	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004836:	b29b      	uxth	r3, r3
 8004838:	3b01      	subs	r3, #1
 800483a:	b29a      	uxth	r2, r3
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f003 0304 	and.w	r3, r3, #4
 800484a:	2b04      	cmp	r3, #4
 800484c:	d124      	bne.n	8004898 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004852:	2b03      	cmp	r3, #3
 8004854:	d107      	bne.n	8004866 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004864:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004882:	3b01      	subs	r3, #1
 8004884:	b29a      	uxth	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800489c:	2b00      	cmp	r3, #0
 800489e:	f47f aeb6 	bne.w	800460e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2220      	movs	r2, #32
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80048ba:	2300      	movs	r3, #0
 80048bc:	e000      	b.n	80048c0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80048be:	2302      	movs	r3, #2
  }
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3728      	adds	r7, #40	@ 0x28
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	00010004 	.word	0x00010004

080048cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b088      	sub	sp, #32
 80048d0:	af02      	add	r7, sp, #8
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	607a      	str	r2, [r7, #4]
 80048d6:	603b      	str	r3, [r7, #0]
 80048d8:	460b      	mov	r3, r1
 80048da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2b08      	cmp	r3, #8
 80048e6:	d006      	beq.n	80048f6 <I2C_MasterRequestWrite+0x2a>
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d003      	beq.n	80048f6 <I2C_MasterRequestWrite+0x2a>
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80048f4:	d108      	bne.n	8004908 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	e00b      	b.n	8004920 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490c:	2b12      	cmp	r3, #18
 800490e:	d107      	bne.n	8004920 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800491e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	9300      	str	r3, [sp, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800492c:	68f8      	ldr	r0, [r7, #12]
 800492e:	f000 f937 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00d      	beq.n	8004954 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004942:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004946:	d103      	bne.n	8004950 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800494e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e035      	b.n	80049c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800495c:	d108      	bne.n	8004970 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800495e:	897b      	ldrh	r3, [r7, #10]
 8004960:	b2db      	uxtb	r3, r3
 8004962:	461a      	mov	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800496c:	611a      	str	r2, [r3, #16]
 800496e:	e01b      	b.n	80049a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004970:	897b      	ldrh	r3, [r7, #10]
 8004972:	11db      	asrs	r3, r3, #7
 8004974:	b2db      	uxtb	r3, r3
 8004976:	f003 0306 	and.w	r3, r3, #6
 800497a:	b2db      	uxtb	r3, r3
 800497c:	f063 030f 	orn	r3, r3, #15
 8004980:	b2da      	uxtb	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	490e      	ldr	r1, [pc, #56]	@ (80049c8 <I2C_MasterRequestWrite+0xfc>)
 800498e:	68f8      	ldr	r0, [r7, #12]
 8004990:	f000 f980 	bl	8004c94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d001      	beq.n	800499e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e010      	b.n	80049c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800499e:	897b      	ldrh	r3, [r7, #10]
 80049a0:	b2da      	uxtb	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	4907      	ldr	r1, [pc, #28]	@ (80049cc <I2C_MasterRequestWrite+0x100>)
 80049ae:	68f8      	ldr	r0, [r7, #12]
 80049b0:	f000 f970 	bl	8004c94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e000      	b.n	80049c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	00010008 	.word	0x00010008
 80049cc:	00010002 	.word	0x00010002

080049d0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af02      	add	r7, sp, #8
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	4608      	mov	r0, r1
 80049da:	4611      	mov	r1, r2
 80049dc:	461a      	mov	r2, r3
 80049de:	4603      	mov	r3, r0
 80049e0:	817b      	strh	r3, [r7, #10]
 80049e2:	460b      	mov	r3, r1
 80049e4:	813b      	strh	r3, [r7, #8]
 80049e6:	4613      	mov	r3, r2
 80049e8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80049f8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0c:	9300      	str	r3, [sp, #0]
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	f000 f8c2 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00d      	beq.n	8004a3e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a30:	d103      	bne.n	8004a3a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a38:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e0aa      	b.n	8004b94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a3e:	897b      	ldrh	r3, [r7, #10]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	461a      	mov	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a50:	6a3a      	ldr	r2, [r7, #32]
 8004a52:	4952      	ldr	r1, [pc, #328]	@ (8004b9c <I2C_RequestMemoryRead+0x1cc>)
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f91d 	bl	8004c94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e097      	b.n	8004b94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a64:	2300      	movs	r3, #0
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	699b      	ldr	r3, [r3, #24]
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a7c:	6a39      	ldr	r1, [r7, #32]
 8004a7e:	68f8      	ldr	r0, [r7, #12]
 8004a80:	f000 f9a8 	bl	8004dd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00d      	beq.n	8004aa6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d107      	bne.n	8004aa2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aa0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e076      	b.n	8004b94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d105      	bne.n	8004ab8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004aac:	893b      	ldrh	r3, [r7, #8]
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	611a      	str	r2, [r3, #16]
 8004ab6:	e021      	b.n	8004afc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ab8:	893b      	ldrh	r3, [r7, #8]
 8004aba:	0a1b      	lsrs	r3, r3, #8
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	b2da      	uxtb	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ac8:	6a39      	ldr	r1, [r7, #32]
 8004aca:	68f8      	ldr	r0, [r7, #12]
 8004acc:	f000 f982 	bl	8004dd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00d      	beq.n	8004af2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d107      	bne.n	8004aee <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e050      	b.n	8004b94 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004af2:	893b      	ldrh	r3, [r7, #8]
 8004af4:	b2da      	uxtb	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004afc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004afe:	6a39      	ldr	r1, [r7, #32]
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 f967 	bl	8004dd4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00d      	beq.n	8004b28 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b10:	2b04      	cmp	r3, #4
 8004b12:	d107      	bne.n	8004b24 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b22:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e035      	b.n	8004b94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b36:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f000 f82b 	bl	8004ba0 <I2C_WaitOnFlagUntilTimeout>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d00d      	beq.n	8004b6c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b5e:	d103      	bne.n	8004b68 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e013      	b.n	8004b94 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004b6c:	897b      	ldrh	r3, [r7, #10]
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	f043 0301 	orr.w	r3, r3, #1
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7e:	6a3a      	ldr	r2, [r7, #32]
 8004b80:	4906      	ldr	r1, [pc, #24]	@ (8004b9c <I2C_RequestMemoryRead+0x1cc>)
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f000 f886 	bl	8004c94 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004b92:	2300      	movs	r3, #0
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	3718      	adds	r7, #24
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	00010002 	.word	0x00010002

08004ba0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	4613      	mov	r3, r2
 8004bae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bb0:	e048      	b.n	8004c44 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bb8:	d044      	beq.n	8004c44 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bba:	f7fd fe7f 	bl	80028bc <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d302      	bcc.n	8004bd0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d139      	bne.n	8004c44 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	0c1b      	lsrs	r3, r3, #16
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d10d      	bne.n	8004bf6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	43da      	mvns	r2, r3
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	4013      	ands	r3, r2
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	bf0c      	ite	eq
 8004bec:	2301      	moveq	r3, #1
 8004bee:	2300      	movne	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	e00c      	b.n	8004c10 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	43da      	mvns	r2, r3
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	4013      	ands	r3, r2
 8004c02:	b29b      	uxth	r3, r3
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	bf0c      	ite	eq
 8004c08:	2301      	moveq	r3, #1
 8004c0a:	2300      	movne	r3, #0
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	461a      	mov	r2, r3
 8004c10:	79fb      	ldrb	r3, [r7, #7]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d116      	bne.n	8004c44 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2220      	movs	r2, #32
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c30:	f043 0220 	orr.w	r2, r3, #32
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e023      	b.n	8004c8c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	0c1b      	lsrs	r3, r3, #16
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d10d      	bne.n	8004c6a <I2C_WaitOnFlagUntilTimeout+0xca>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	43da      	mvns	r2, r3
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bf0c      	ite	eq
 8004c60:	2301      	moveq	r3, #1
 8004c62:	2300      	movne	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	461a      	mov	r2, r3
 8004c68:	e00c      	b.n	8004c84 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	43da      	mvns	r2, r3
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	4013      	ands	r3, r2
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	bf0c      	ite	eq
 8004c7c:	2301      	moveq	r3, #1
 8004c7e:	2300      	movne	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	461a      	mov	r2, r3
 8004c84:	79fb      	ldrb	r3, [r7, #7]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d093      	beq.n	8004bb2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ca2:	e071      	b.n	8004d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cb2:	d123      	bne.n	8004cfc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cc2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004ccc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2220      	movs	r2, #32
 8004cd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce8:	f043 0204 	orr.w	r2, r3, #4
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e067      	b.n	8004dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d02:	d041      	beq.n	8004d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d04:	f7fd fdda 	bl	80028bc <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d302      	bcc.n	8004d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d136      	bne.n	8004d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	0c1b      	lsrs	r3, r3, #16
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d10c      	bne.n	8004d3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	695b      	ldr	r3, [r3, #20]
 8004d2a:	43da      	mvns	r2, r3
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	bf14      	ite	ne
 8004d36:	2301      	movne	r3, #1
 8004d38:	2300      	moveq	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	e00b      	b.n	8004d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	43da      	mvns	r2, r3
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bf14      	ite	ne
 8004d50:	2301      	movne	r3, #1
 8004d52:	2300      	moveq	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d016      	beq.n	8004d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d74:	f043 0220 	orr.w	r2, r3, #32
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e021      	b.n	8004dcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	0c1b      	lsrs	r3, r3, #16
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d10c      	bne.n	8004dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	43da      	mvns	r2, r3
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	4013      	ands	r3, r2
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	bf14      	ite	ne
 8004da4:	2301      	movne	r3, #1
 8004da6:	2300      	moveq	r3, #0
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	e00b      	b.n	8004dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	43da      	mvns	r2, r3
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	4013      	ands	r3, r2
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	bf14      	ite	ne
 8004dbe:	2301      	movne	r3, #1
 8004dc0:	2300      	moveq	r3, #0
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f47f af6d 	bne.w	8004ca4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004dca:	2300      	movs	r3, #0
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	3710      	adds	r7, #16
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004de0:	e034      	b.n	8004e4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 f8e3 	bl	8004fae <I2C_IsAcknowledgeFailed>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e034      	b.n	8004e5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004df8:	d028      	beq.n	8004e4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dfa:	f7fd fd5f 	bl	80028bc <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d302      	bcc.n	8004e10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d11d      	bne.n	8004e4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e1a:	2b80      	cmp	r3, #128	@ 0x80
 8004e1c:	d016      	beq.n	8004e4c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e38:	f043 0220 	orr.w	r2, r3, #32
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e007      	b.n	8004e5c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e56:	2b80      	cmp	r3, #128	@ 0x80
 8004e58:	d1c3      	bne.n	8004de2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004e70:	e034      	b.n	8004edc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 f89b 	bl	8004fae <I2C_IsAcknowledgeFailed>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e034      	b.n	8004eec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e88:	d028      	beq.n	8004edc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e8a:	f7fd fd17 	bl	80028bc <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d302      	bcc.n	8004ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d11d      	bne.n	8004edc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	f003 0304 	and.w	r3, r3, #4
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d016      	beq.n	8004edc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec8:	f043 0220 	orr.w	r2, r3, #32
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e007      	b.n	8004eec <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d1c3      	bne.n	8004e72 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3710      	adds	r7, #16
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f00:	e049      	b.n	8004f96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	695b      	ldr	r3, [r3, #20]
 8004f08:	f003 0310 	and.w	r3, r3, #16
 8004f0c:	2b10      	cmp	r3, #16
 8004f0e:	d119      	bne.n	8004f44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f06f 0210 	mvn.w	r2, #16
 8004f18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2220      	movs	r2, #32
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e030      	b.n	8004fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f44:	f7fd fcba 	bl	80028bc <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d302      	bcc.n	8004f5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d11d      	bne.n	8004f96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	695b      	ldr	r3, [r3, #20]
 8004f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f64:	2b40      	cmp	r3, #64	@ 0x40
 8004f66:	d016      	beq.n	8004f96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2220      	movs	r2, #32
 8004f72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f82:	f043 0220 	orr.w	r2, r3, #32
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e007      	b.n	8004fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fa0:	2b40      	cmp	r3, #64	@ 0x40
 8004fa2:	d1ae      	bne.n	8004f02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fc0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fc4:	d11b      	bne.n	8004ffe <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fce:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2220      	movs	r2, #32
 8004fda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fea:	f043 0204 	orr.w	r2, r3, #4
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e000      	b.n	8005000 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr

0800500c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af02      	add	r7, sp, #8
 8005012:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d101      	bne.n	800501e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e101      	b.n	8005222 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b00      	cmp	r3, #0
 800502e:	d106      	bne.n	800503e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7fd fb63 	bl	8002704 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2203      	movs	r2, #3
 8005042:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800504c:	d102      	bne.n	8005054 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4618      	mov	r0, r3
 800505a:	f001 fd7f 	bl	8006b5c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6818      	ldr	r0, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	7c1a      	ldrb	r2, [r3, #16]
 8005066:	f88d 2000 	strb.w	r2, [sp]
 800506a:	3304      	adds	r3, #4
 800506c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800506e:	f001 fd11 	bl	8006a94 <USB_CoreInit>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d005      	beq.n	8005084 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e0ce      	b.n	8005222 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	2100      	movs	r1, #0
 800508a:	4618      	mov	r0, r3
 800508c:	f001 fd77 	bl	8006b7e <USB_SetCurrentMode>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d005      	beq.n	80050a2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2202      	movs	r2, #2
 800509a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e0bf      	b.n	8005222 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050a2:	2300      	movs	r3, #0
 80050a4:	73fb      	strb	r3, [r7, #15]
 80050a6:	e04a      	b.n	800513e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80050a8:	7bfa      	ldrb	r2, [r7, #15]
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	4613      	mov	r3, r2
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	4413      	add	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	440b      	add	r3, r1
 80050b6:	3315      	adds	r3, #21
 80050b8:	2201      	movs	r2, #1
 80050ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80050bc:	7bfa      	ldrb	r2, [r7, #15]
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	4613      	mov	r3, r2
 80050c2:	00db      	lsls	r3, r3, #3
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	440b      	add	r3, r1
 80050ca:	3314      	adds	r3, #20
 80050cc:	7bfa      	ldrb	r2, [r7, #15]
 80050ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80050d0:	7bfa      	ldrb	r2, [r7, #15]
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
 80050d4:	b298      	uxth	r0, r3
 80050d6:	6879      	ldr	r1, [r7, #4]
 80050d8:	4613      	mov	r3, r2
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	4413      	add	r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	440b      	add	r3, r1
 80050e2:	332e      	adds	r3, #46	@ 0x2e
 80050e4:	4602      	mov	r2, r0
 80050e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80050e8:	7bfa      	ldrb	r2, [r7, #15]
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	4613      	mov	r3, r2
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	4413      	add	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	3318      	adds	r3, #24
 80050f8:	2200      	movs	r2, #0
 80050fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80050fc:	7bfa      	ldrb	r2, [r7, #15]
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	4613      	mov	r3, r2
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	4413      	add	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	440b      	add	r3, r1
 800510a:	331c      	adds	r3, #28
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005110:	7bfa      	ldrb	r2, [r7, #15]
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	4613      	mov	r3, r2
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	3320      	adds	r3, #32
 8005120:	2200      	movs	r2, #0
 8005122:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005124:	7bfa      	ldrb	r2, [r7, #15]
 8005126:	6879      	ldr	r1, [r7, #4]
 8005128:	4613      	mov	r3, r2
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	4413      	add	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	440b      	add	r3, r1
 8005132:	3324      	adds	r3, #36	@ 0x24
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	3301      	adds	r3, #1
 800513c:	73fb      	strb	r3, [r7, #15]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	791b      	ldrb	r3, [r3, #4]
 8005142:	7bfa      	ldrb	r2, [r7, #15]
 8005144:	429a      	cmp	r2, r3
 8005146:	d3af      	bcc.n	80050a8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005148:	2300      	movs	r3, #0
 800514a:	73fb      	strb	r3, [r7, #15]
 800514c:	e044      	b.n	80051d8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800514e:	7bfa      	ldrb	r2, [r7, #15]
 8005150:	6879      	ldr	r1, [r7, #4]
 8005152:	4613      	mov	r3, r2
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	4413      	add	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	440b      	add	r3, r1
 800515c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005160:	2200      	movs	r2, #0
 8005162:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005164:	7bfa      	ldrb	r2, [r7, #15]
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	4613      	mov	r3, r2
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	4413      	add	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	440b      	add	r3, r1
 8005172:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005176:	7bfa      	ldrb	r2, [r7, #15]
 8005178:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800517a:	7bfa      	ldrb	r2, [r7, #15]
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	4613      	mov	r3, r2
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	4413      	add	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	440b      	add	r3, r1
 8005188:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800518c:	2200      	movs	r2, #0
 800518e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005190:	7bfa      	ldrb	r2, [r7, #15]
 8005192:	6879      	ldr	r1, [r7, #4]
 8005194:	4613      	mov	r3, r2
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	4413      	add	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	440b      	add	r3, r1
 800519e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80051a6:	7bfa      	ldrb	r2, [r7, #15]
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	4613      	mov	r3, r2
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	440b      	add	r3, r1
 80051b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80051b8:	2200      	movs	r2, #0
 80051ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80051bc:	7bfa      	ldrb	r2, [r7, #15]
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	4613      	mov	r3, r2
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	440b      	add	r3, r1
 80051ca:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	3301      	adds	r3, #1
 80051d6:	73fb      	strb	r3, [r7, #15]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	791b      	ldrb	r3, [r3, #4]
 80051dc:	7bfa      	ldrb	r2, [r7, #15]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d3b5      	bcc.n	800514e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6818      	ldr	r0, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	7c1a      	ldrb	r2, [r3, #16]
 80051ea:	f88d 2000 	strb.w	r2, [sp]
 80051ee:	3304      	adds	r3, #4
 80051f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051f2:	f001 fd11 	bl	8006c18 <USB_DevInit>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d005      	beq.n	8005208 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	e00c      	b.n	8005222 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f001 fed9 	bl	8006fd2 <USB_DevDisconnect>

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e267      	b.n	800570e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d075      	beq.n	8005336 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800524a:	4b88      	ldr	r3, [pc, #544]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 030c 	and.w	r3, r3, #12
 8005252:	2b04      	cmp	r3, #4
 8005254:	d00c      	beq.n	8005270 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005256:	4b85      	ldr	r3, [pc, #532]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800525e:	2b08      	cmp	r3, #8
 8005260:	d112      	bne.n	8005288 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005262:	4b82      	ldr	r3, [pc, #520]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800526a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800526e:	d10b      	bne.n	8005288 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005270:	4b7e      	ldr	r3, [pc, #504]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d05b      	beq.n	8005334 <HAL_RCC_OscConfig+0x108>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d157      	bne.n	8005334 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e242      	b.n	800570e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005290:	d106      	bne.n	80052a0 <HAL_RCC_OscConfig+0x74>
 8005292:	4b76      	ldr	r3, [pc, #472]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a75      	ldr	r2, [pc, #468]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 8005298:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	e01d      	b.n	80052dc <HAL_RCC_OscConfig+0xb0>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052a8:	d10c      	bne.n	80052c4 <HAL_RCC_OscConfig+0x98>
 80052aa:	4b70      	ldr	r3, [pc, #448]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a6f      	ldr	r2, [pc, #444]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 80052b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052b4:	6013      	str	r3, [r2, #0]
 80052b6:	4b6d      	ldr	r3, [pc, #436]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a6c      	ldr	r2, [pc, #432]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 80052bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	e00b      	b.n	80052dc <HAL_RCC_OscConfig+0xb0>
 80052c4:	4b69      	ldr	r3, [pc, #420]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a68      	ldr	r2, [pc, #416]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 80052ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052ce:	6013      	str	r3, [r2, #0]
 80052d0:	4b66      	ldr	r3, [pc, #408]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a65      	ldr	r2, [pc, #404]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 80052d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d013      	beq.n	800530c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e4:	f7fd faea 	bl	80028bc <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052ec:	f7fd fae6 	bl	80028bc <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b64      	cmp	r3, #100	@ 0x64
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e207      	b.n	800570e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052fe:	4b5b      	ldr	r3, [pc, #364]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0f0      	beq.n	80052ec <HAL_RCC_OscConfig+0xc0>
 800530a:	e014      	b.n	8005336 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800530c:	f7fd fad6 	bl	80028bc <HAL_GetTick>
 8005310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005314:	f7fd fad2 	bl	80028bc <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b64      	cmp	r3, #100	@ 0x64
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e1f3      	b.n	800570e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005326:	4b51      	ldr	r3, [pc, #324]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1f0      	bne.n	8005314 <HAL_RCC_OscConfig+0xe8>
 8005332:	e000      	b.n	8005336 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d063      	beq.n	800540a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005342:	4b4a      	ldr	r3, [pc, #296]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 030c 	and.w	r3, r3, #12
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00b      	beq.n	8005366 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800534e:	4b47      	ldr	r3, [pc, #284]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005356:	2b08      	cmp	r3, #8
 8005358:	d11c      	bne.n	8005394 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800535a:	4b44      	ldr	r3, [pc, #272]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d116      	bne.n	8005394 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005366:	4b41      	ldr	r3, [pc, #260]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d005      	beq.n	800537e <HAL_RCC_OscConfig+0x152>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	2b01      	cmp	r3, #1
 8005378:	d001      	beq.n	800537e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e1c7      	b.n	800570e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800537e:	4b3b      	ldr	r3, [pc, #236]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	00db      	lsls	r3, r3, #3
 800538c:	4937      	ldr	r1, [pc, #220]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 800538e:	4313      	orrs	r3, r2
 8005390:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005392:	e03a      	b.n	800540a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d020      	beq.n	80053de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800539c:	4b34      	ldr	r3, [pc, #208]	@ (8005470 <HAL_RCC_OscConfig+0x244>)
 800539e:	2201      	movs	r2, #1
 80053a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a2:	f7fd fa8b 	bl	80028bc <HAL_GetTick>
 80053a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a8:	e008      	b.n	80053bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053aa:	f7fd fa87 	bl	80028bc <HAL_GetTick>
 80053ae:	4602      	mov	r2, r0
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d901      	bls.n	80053bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e1a8      	b.n	800570e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053bc:	4b2b      	ldr	r3, [pc, #172]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d0f0      	beq.n	80053aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053c8:	4b28      	ldr	r3, [pc, #160]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	691b      	ldr	r3, [r3, #16]
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	4925      	ldr	r1, [pc, #148]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	600b      	str	r3, [r1, #0]
 80053dc:	e015      	b.n	800540a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053de:	4b24      	ldr	r3, [pc, #144]	@ (8005470 <HAL_RCC_OscConfig+0x244>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e4:	f7fd fa6a 	bl	80028bc <HAL_GetTick>
 80053e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ea:	e008      	b.n	80053fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053ec:	f7fd fa66 	bl	80028bc <HAL_GetTick>
 80053f0:	4602      	mov	r2, r0
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d901      	bls.n	80053fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e187      	b.n	800570e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053fe:	4b1b      	ldr	r3, [pc, #108]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0302 	and.w	r3, r3, #2
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1f0      	bne.n	80053ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	2b00      	cmp	r3, #0
 8005414:	d036      	beq.n	8005484 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d016      	beq.n	800544c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800541e:	4b15      	ldr	r3, [pc, #84]	@ (8005474 <HAL_RCC_OscConfig+0x248>)
 8005420:	2201      	movs	r2, #1
 8005422:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005424:	f7fd fa4a 	bl	80028bc <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800542c:	f7fd fa46 	bl	80028bc <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b02      	cmp	r3, #2
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e167      	b.n	800570e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800543e:	4b0b      	ldr	r3, [pc, #44]	@ (800546c <HAL_RCC_OscConfig+0x240>)
 8005440:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005442:	f003 0302 	and.w	r3, r3, #2
 8005446:	2b00      	cmp	r3, #0
 8005448:	d0f0      	beq.n	800542c <HAL_RCC_OscConfig+0x200>
 800544a:	e01b      	b.n	8005484 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800544c:	4b09      	ldr	r3, [pc, #36]	@ (8005474 <HAL_RCC_OscConfig+0x248>)
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005452:	f7fd fa33 	bl	80028bc <HAL_GetTick>
 8005456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005458:	e00e      	b.n	8005478 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800545a:	f7fd fa2f 	bl	80028bc <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d907      	bls.n	8005478 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e150      	b.n	800570e <HAL_RCC_OscConfig+0x4e2>
 800546c:	40023800 	.word	0x40023800
 8005470:	42470000 	.word	0x42470000
 8005474:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005478:	4b88      	ldr	r3, [pc, #544]	@ (800569c <HAL_RCC_OscConfig+0x470>)
 800547a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800547c:	f003 0302 	and.w	r3, r3, #2
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1ea      	bne.n	800545a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b00      	cmp	r3, #0
 800548e:	f000 8097 	beq.w	80055c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005492:	2300      	movs	r3, #0
 8005494:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005496:	4b81      	ldr	r3, [pc, #516]	@ (800569c <HAL_RCC_OscConfig+0x470>)
 8005498:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800549a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10f      	bne.n	80054c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054a2:	2300      	movs	r3, #0
 80054a4:	60bb      	str	r3, [r7, #8]
 80054a6:	4b7d      	ldr	r3, [pc, #500]	@ (800569c <HAL_RCC_OscConfig+0x470>)
 80054a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054aa:	4a7c      	ldr	r2, [pc, #496]	@ (800569c <HAL_RCC_OscConfig+0x470>)
 80054ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80054b2:	4b7a      	ldr	r3, [pc, #488]	@ (800569c <HAL_RCC_OscConfig+0x470>)
 80054b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054ba:	60bb      	str	r3, [r7, #8]
 80054bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054be:	2301      	movs	r3, #1
 80054c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c2:	4b77      	ldr	r3, [pc, #476]	@ (80056a0 <HAL_RCC_OscConfig+0x474>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d118      	bne.n	8005500 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054ce:	4b74      	ldr	r3, [pc, #464]	@ (80056a0 <HAL_RCC_OscConfig+0x474>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a73      	ldr	r2, [pc, #460]	@ (80056a0 <HAL_RCC_OscConfig+0x474>)
 80054d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054da:	f7fd f9ef 	bl	80028bc <HAL_GetTick>
 80054de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e0:	e008      	b.n	80054f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054e2:	f7fd f9eb 	bl	80028bc <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e10c      	b.n	800570e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f4:	4b6a      	ldr	r3, [pc, #424]	@ (80056a0 <HAL_RCC_OscConfig+0x474>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0f0      	beq.n	80054e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	2b01      	cmp	r3, #1
 8005506:	d106      	bne.n	8005516 <HAL_RCC_OscConfig+0x2ea>
 8005508:	4b64      	ldr	r3, [pc, #400]	@ (800569c <HAL_RCC_OscConfig+0x470>)
 800550a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800550c:	4a63      	ldr	r2, [pc, #396]	@ (800569c <HAL_RCC_OscConfig+0x470>)
 800550e:	f043 0301 	orr.w	r3, r3, #1
 8005512:	6713      	str	r3, [r2, #112]	@ 0x70
 8005514:	e01c      	b.n	8005550 <HAL_RCC_OscConfig+0x324>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	2b05      	cmp	r3, #5
 800551c:	d10c      	bne.n	8005538 <HAL_RCC_OscConfig+0x30c>
 800551e:	4b5f      	ldr	r3, [pc, #380]	@ (800569c <HAL_RCC_OscConfig+0x470>)
 8005520:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005522:	4a5e      	ldr	r2, [pc, #376]	@ (800569c <HAL_RCC_OscConfig+0x470>)
 8005524:	f043 0304 	orr.w	r3, r3, #4
 8005528:	6713      	str	r3, [r2, #112]	@ 0x70
 800552a:	4b5c      	ldr	r3, [pc, #368]	@ (800569c <HAL_RCC_OscConfig+0x470>)
 800552c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800552e:	4a5b      	ldr	r2, [pc, #364]	@ (800569c <HAL_RCC_OscConfig+0x470>)
 8005530:	f043 0301 	orr.w	r3, r3, #1
 8005534:	6713      	str	r3, [r2, #112]	@ 0x70
 8005536:	e00b      	b.n	8005550 <HAL_RCC_OscConfig+0x324>
 8005538:	4b58      	ldr	r3, [pc, #352]	@ (800569c <HAL_RCC_OscConfig+0x470>)
 800553a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800553c:	4a57      	ldr	r2, [pc, #348]	@ (800569c <HAL_RCC_OscConfig+0x470>)
 800553e:	f023 0301 	bic.w	r3, r3, #1
 8005542:	6713      	str	r3, [r2, #112]	@ 0x70
 8005544:	4b55      	ldr	r3, [pc, #340]	@ (800569c <HAL_RCC_OscConfig+0x470>)
 8005546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005548:	4a54      	ldr	r2, [pc, #336]	@ (800569c <HAL_RCC_OscConfig+0x470>)
 800554a:	f023 0304 	bic.w	r3, r3, #4
 800554e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d015      	beq.n	8005584 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005558:	f7fd f9b0 	bl	80028bc <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800555e:	e00a      	b.n	8005576 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005560:	f7fd f9ac 	bl	80028bc <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800556e:	4293      	cmp	r3, r2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e0cb      	b.n	800570e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005576:	4b49      	ldr	r3, [pc, #292]	@ (800569c <HAL_RCC_OscConfig+0x470>)
 8005578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d0ee      	beq.n	8005560 <HAL_RCC_OscConfig+0x334>
 8005582:	e014      	b.n	80055ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005584:	f7fd f99a 	bl	80028bc <HAL_GetTick>
 8005588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800558a:	e00a      	b.n	80055a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800558c:	f7fd f996 	bl	80028bc <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800559a:	4293      	cmp	r3, r2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e0b5      	b.n	800570e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055a2:	4b3e      	ldr	r3, [pc, #248]	@ (800569c <HAL_RCC_OscConfig+0x470>)
 80055a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d1ee      	bne.n	800558c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055ae:	7dfb      	ldrb	r3, [r7, #23]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d105      	bne.n	80055c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b4:	4b39      	ldr	r3, [pc, #228]	@ (800569c <HAL_RCC_OscConfig+0x470>)
 80055b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b8:	4a38      	ldr	r2, [pc, #224]	@ (800569c <HAL_RCC_OscConfig+0x470>)
 80055ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	699b      	ldr	r3, [r3, #24]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 80a1 	beq.w	800570c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055ca:	4b34      	ldr	r3, [pc, #208]	@ (800569c <HAL_RCC_OscConfig+0x470>)
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f003 030c 	and.w	r3, r3, #12
 80055d2:	2b08      	cmp	r3, #8
 80055d4:	d05c      	beq.n	8005690 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d141      	bne.n	8005662 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055de:	4b31      	ldr	r3, [pc, #196]	@ (80056a4 <HAL_RCC_OscConfig+0x478>)
 80055e0:	2200      	movs	r2, #0
 80055e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e4:	f7fd f96a 	bl	80028bc <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055ec:	f7fd f966 	bl	80028bc <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e087      	b.n	800570e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055fe:	4b27      	ldr	r3, [pc, #156]	@ (800569c <HAL_RCC_OscConfig+0x470>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1f0      	bne.n	80055ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69da      	ldr	r2, [r3, #28]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	431a      	orrs	r2, r3
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005618:	019b      	lsls	r3, r3, #6
 800561a:	431a      	orrs	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005620:	085b      	lsrs	r3, r3, #1
 8005622:	3b01      	subs	r3, #1
 8005624:	041b      	lsls	r3, r3, #16
 8005626:	431a      	orrs	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562c:	061b      	lsls	r3, r3, #24
 800562e:	491b      	ldr	r1, [pc, #108]	@ (800569c <HAL_RCC_OscConfig+0x470>)
 8005630:	4313      	orrs	r3, r2
 8005632:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005634:	4b1b      	ldr	r3, [pc, #108]	@ (80056a4 <HAL_RCC_OscConfig+0x478>)
 8005636:	2201      	movs	r2, #1
 8005638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800563a:	f7fd f93f 	bl	80028bc <HAL_GetTick>
 800563e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005640:	e008      	b.n	8005654 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005642:	f7fd f93b 	bl	80028bc <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d901      	bls.n	8005654 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	e05c      	b.n	800570e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005654:	4b11      	ldr	r3, [pc, #68]	@ (800569c <HAL_RCC_OscConfig+0x470>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0f0      	beq.n	8005642 <HAL_RCC_OscConfig+0x416>
 8005660:	e054      	b.n	800570c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005662:	4b10      	ldr	r3, [pc, #64]	@ (80056a4 <HAL_RCC_OscConfig+0x478>)
 8005664:	2200      	movs	r2, #0
 8005666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005668:	f7fd f928 	bl	80028bc <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005670:	f7fd f924 	bl	80028bc <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e045      	b.n	800570e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005682:	4b06      	ldr	r3, [pc, #24]	@ (800569c <HAL_RCC_OscConfig+0x470>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1f0      	bne.n	8005670 <HAL_RCC_OscConfig+0x444>
 800568e:	e03d      	b.n	800570c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	699b      	ldr	r3, [r3, #24]
 8005694:	2b01      	cmp	r3, #1
 8005696:	d107      	bne.n	80056a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e038      	b.n	800570e <HAL_RCC_OscConfig+0x4e2>
 800569c:	40023800 	.word	0x40023800
 80056a0:	40007000 	.word	0x40007000
 80056a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80056a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005718 <HAL_RCC_OscConfig+0x4ec>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d028      	beq.n	8005708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d121      	bne.n	8005708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d11a      	bne.n	8005708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056d2:	68fa      	ldr	r2, [r7, #12]
 80056d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80056d8:	4013      	ands	r3, r2
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80056de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d111      	bne.n	8005708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ee:	085b      	lsrs	r3, r3, #1
 80056f0:	3b01      	subs	r3, #1
 80056f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d107      	bne.n	8005708 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005702:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005704:	429a      	cmp	r2, r3
 8005706:	d001      	beq.n	800570c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e000      	b.n	800570e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3718      	adds	r7, #24
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
 8005716:	bf00      	nop
 8005718:	40023800 	.word	0x40023800

0800571c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e0cc      	b.n	80058ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005730:	4b68      	ldr	r3, [pc, #416]	@ (80058d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0307 	and.w	r3, r3, #7
 8005738:	683a      	ldr	r2, [r7, #0]
 800573a:	429a      	cmp	r2, r3
 800573c:	d90c      	bls.n	8005758 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800573e:	4b65      	ldr	r3, [pc, #404]	@ (80058d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005740:	683a      	ldr	r2, [r7, #0]
 8005742:	b2d2      	uxtb	r2, r2
 8005744:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005746:	4b63      	ldr	r3, [pc, #396]	@ (80058d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0307 	and.w	r3, r3, #7
 800574e:	683a      	ldr	r2, [r7, #0]
 8005750:	429a      	cmp	r2, r3
 8005752:	d001      	beq.n	8005758 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005754:	2301      	movs	r3, #1
 8005756:	e0b8      	b.n	80058ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0302 	and.w	r3, r3, #2
 8005760:	2b00      	cmp	r3, #0
 8005762:	d020      	beq.n	80057a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0304 	and.w	r3, r3, #4
 800576c:	2b00      	cmp	r3, #0
 800576e:	d005      	beq.n	800577c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005770:	4b59      	ldr	r3, [pc, #356]	@ (80058d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	4a58      	ldr	r2, [pc, #352]	@ (80058d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005776:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800577a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0308 	and.w	r3, r3, #8
 8005784:	2b00      	cmp	r3, #0
 8005786:	d005      	beq.n	8005794 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005788:	4b53      	ldr	r3, [pc, #332]	@ (80058d8 <HAL_RCC_ClockConfig+0x1bc>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	4a52      	ldr	r2, [pc, #328]	@ (80058d8 <HAL_RCC_ClockConfig+0x1bc>)
 800578e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005792:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005794:	4b50      	ldr	r3, [pc, #320]	@ (80058d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	494d      	ldr	r1, [pc, #308]	@ (80058d8 <HAL_RCC_ClockConfig+0x1bc>)
 80057a2:	4313      	orrs	r3, r2
 80057a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d044      	beq.n	800583c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d107      	bne.n	80057ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057ba:	4b47      	ldr	r3, [pc, #284]	@ (80058d8 <HAL_RCC_ClockConfig+0x1bc>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d119      	bne.n	80057fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e07f      	b.n	80058ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d003      	beq.n	80057da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057d6:	2b03      	cmp	r3, #3
 80057d8:	d107      	bne.n	80057ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057da:	4b3f      	ldr	r3, [pc, #252]	@ (80058d8 <HAL_RCC_ClockConfig+0x1bc>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d109      	bne.n	80057fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e06f      	b.n	80058ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057ea:	4b3b      	ldr	r3, [pc, #236]	@ (80058d8 <HAL_RCC_ClockConfig+0x1bc>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 0302 	and.w	r3, r3, #2
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e067      	b.n	80058ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057fa:	4b37      	ldr	r3, [pc, #220]	@ (80058d8 <HAL_RCC_ClockConfig+0x1bc>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f023 0203 	bic.w	r2, r3, #3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	4934      	ldr	r1, [pc, #208]	@ (80058d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005808:	4313      	orrs	r3, r2
 800580a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800580c:	f7fd f856 	bl	80028bc <HAL_GetTick>
 8005810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005812:	e00a      	b.n	800582a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005814:	f7fd f852 	bl	80028bc <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005822:	4293      	cmp	r3, r2
 8005824:	d901      	bls.n	800582a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e04f      	b.n	80058ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800582a:	4b2b      	ldr	r3, [pc, #172]	@ (80058d8 <HAL_RCC_ClockConfig+0x1bc>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f003 020c 	and.w	r2, r3, #12
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	429a      	cmp	r2, r3
 800583a:	d1eb      	bne.n	8005814 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800583c:	4b25      	ldr	r3, [pc, #148]	@ (80058d4 <HAL_RCC_ClockConfig+0x1b8>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0307 	and.w	r3, r3, #7
 8005844:	683a      	ldr	r2, [r7, #0]
 8005846:	429a      	cmp	r2, r3
 8005848:	d20c      	bcs.n	8005864 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800584a:	4b22      	ldr	r3, [pc, #136]	@ (80058d4 <HAL_RCC_ClockConfig+0x1b8>)
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	b2d2      	uxtb	r2, r2
 8005850:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005852:	4b20      	ldr	r3, [pc, #128]	@ (80058d4 <HAL_RCC_ClockConfig+0x1b8>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	429a      	cmp	r2, r3
 800585e:	d001      	beq.n	8005864 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	e032      	b.n	80058ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0304 	and.w	r3, r3, #4
 800586c:	2b00      	cmp	r3, #0
 800586e:	d008      	beq.n	8005882 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005870:	4b19      	ldr	r3, [pc, #100]	@ (80058d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	4916      	ldr	r1, [pc, #88]	@ (80058d8 <HAL_RCC_ClockConfig+0x1bc>)
 800587e:	4313      	orrs	r3, r2
 8005880:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0308 	and.w	r3, r3, #8
 800588a:	2b00      	cmp	r3, #0
 800588c:	d009      	beq.n	80058a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800588e:	4b12      	ldr	r3, [pc, #72]	@ (80058d8 <HAL_RCC_ClockConfig+0x1bc>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	00db      	lsls	r3, r3, #3
 800589c:	490e      	ldr	r1, [pc, #56]	@ (80058d8 <HAL_RCC_ClockConfig+0x1bc>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80058a2:	f000 f821 	bl	80058e8 <HAL_RCC_GetSysClockFreq>
 80058a6:	4602      	mov	r2, r0
 80058a8:	4b0b      	ldr	r3, [pc, #44]	@ (80058d8 <HAL_RCC_ClockConfig+0x1bc>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	091b      	lsrs	r3, r3, #4
 80058ae:	f003 030f 	and.w	r3, r3, #15
 80058b2:	490a      	ldr	r1, [pc, #40]	@ (80058dc <HAL_RCC_ClockConfig+0x1c0>)
 80058b4:	5ccb      	ldrb	r3, [r1, r3]
 80058b6:	fa22 f303 	lsr.w	r3, r2, r3
 80058ba:	4a09      	ldr	r2, [pc, #36]	@ (80058e0 <HAL_RCC_ClockConfig+0x1c4>)
 80058bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80058be:	4b09      	ldr	r3, [pc, #36]	@ (80058e4 <HAL_RCC_ClockConfig+0x1c8>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fc ffb6 	bl	8002834 <HAL_InitTick>

  return HAL_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	40023c00 	.word	0x40023c00
 80058d8:	40023800 	.word	0x40023800
 80058dc:	08009e7c 	.word	0x08009e7c
 80058e0:	20000000 	.word	0x20000000
 80058e4:	20000004 	.word	0x20000004

080058e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058ec:	b094      	sub	sp, #80	@ 0x50
 80058ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80058f0:	2300      	movs	r3, #0
 80058f2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80058f4:	2300      	movs	r3, #0
 80058f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80058f8:	2300      	movs	r3, #0
 80058fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80058fc:	2300      	movs	r3, #0
 80058fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005900:	4b79      	ldr	r3, [pc, #484]	@ (8005ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	f003 030c 	and.w	r3, r3, #12
 8005908:	2b08      	cmp	r3, #8
 800590a:	d00d      	beq.n	8005928 <HAL_RCC_GetSysClockFreq+0x40>
 800590c:	2b08      	cmp	r3, #8
 800590e:	f200 80e1 	bhi.w	8005ad4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005912:	2b00      	cmp	r3, #0
 8005914:	d002      	beq.n	800591c <HAL_RCC_GetSysClockFreq+0x34>
 8005916:	2b04      	cmp	r3, #4
 8005918:	d003      	beq.n	8005922 <HAL_RCC_GetSysClockFreq+0x3a>
 800591a:	e0db      	b.n	8005ad4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800591c:	4b73      	ldr	r3, [pc, #460]	@ (8005aec <HAL_RCC_GetSysClockFreq+0x204>)
 800591e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005920:	e0db      	b.n	8005ada <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005922:	4b73      	ldr	r3, [pc, #460]	@ (8005af0 <HAL_RCC_GetSysClockFreq+0x208>)
 8005924:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005926:	e0d8      	b.n	8005ada <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005928:	4b6f      	ldr	r3, [pc, #444]	@ (8005ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005930:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005932:	4b6d      	ldr	r3, [pc, #436]	@ (8005ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d063      	beq.n	8005a06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800593e:	4b6a      	ldr	r3, [pc, #424]	@ (8005ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	099b      	lsrs	r3, r3, #6
 8005944:	2200      	movs	r2, #0
 8005946:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005948:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800594a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800594c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005950:	633b      	str	r3, [r7, #48]	@ 0x30
 8005952:	2300      	movs	r3, #0
 8005954:	637b      	str	r3, [r7, #52]	@ 0x34
 8005956:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800595a:	4622      	mov	r2, r4
 800595c:	462b      	mov	r3, r5
 800595e:	f04f 0000 	mov.w	r0, #0
 8005962:	f04f 0100 	mov.w	r1, #0
 8005966:	0159      	lsls	r1, r3, #5
 8005968:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800596c:	0150      	lsls	r0, r2, #5
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	4621      	mov	r1, r4
 8005974:	1a51      	subs	r1, r2, r1
 8005976:	6139      	str	r1, [r7, #16]
 8005978:	4629      	mov	r1, r5
 800597a:	eb63 0301 	sbc.w	r3, r3, r1
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	f04f 0200 	mov.w	r2, #0
 8005984:	f04f 0300 	mov.w	r3, #0
 8005988:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800598c:	4659      	mov	r1, fp
 800598e:	018b      	lsls	r3, r1, #6
 8005990:	4651      	mov	r1, sl
 8005992:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005996:	4651      	mov	r1, sl
 8005998:	018a      	lsls	r2, r1, #6
 800599a:	4651      	mov	r1, sl
 800599c:	ebb2 0801 	subs.w	r8, r2, r1
 80059a0:	4659      	mov	r1, fp
 80059a2:	eb63 0901 	sbc.w	r9, r3, r1
 80059a6:	f04f 0200 	mov.w	r2, #0
 80059aa:	f04f 0300 	mov.w	r3, #0
 80059ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80059b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80059b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80059ba:	4690      	mov	r8, r2
 80059bc:	4699      	mov	r9, r3
 80059be:	4623      	mov	r3, r4
 80059c0:	eb18 0303 	adds.w	r3, r8, r3
 80059c4:	60bb      	str	r3, [r7, #8]
 80059c6:	462b      	mov	r3, r5
 80059c8:	eb49 0303 	adc.w	r3, r9, r3
 80059cc:	60fb      	str	r3, [r7, #12]
 80059ce:	f04f 0200 	mov.w	r2, #0
 80059d2:	f04f 0300 	mov.w	r3, #0
 80059d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80059da:	4629      	mov	r1, r5
 80059dc:	024b      	lsls	r3, r1, #9
 80059de:	4621      	mov	r1, r4
 80059e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80059e4:	4621      	mov	r1, r4
 80059e6:	024a      	lsls	r2, r1, #9
 80059e8:	4610      	mov	r0, r2
 80059ea:	4619      	mov	r1, r3
 80059ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059ee:	2200      	movs	r2, #0
 80059f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80059f8:	f7fb f8f6 	bl	8000be8 <__aeabi_uldivmod>
 80059fc:	4602      	mov	r2, r0
 80059fe:	460b      	mov	r3, r1
 8005a00:	4613      	mov	r3, r2
 8005a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a04:	e058      	b.n	8005ab8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a06:	4b38      	ldr	r3, [pc, #224]	@ (8005ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	099b      	lsrs	r3, r3, #6
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	4618      	mov	r0, r3
 8005a10:	4611      	mov	r1, r2
 8005a12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005a16:	623b      	str	r3, [r7, #32]
 8005a18:	2300      	movs	r3, #0
 8005a1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005a20:	4642      	mov	r2, r8
 8005a22:	464b      	mov	r3, r9
 8005a24:	f04f 0000 	mov.w	r0, #0
 8005a28:	f04f 0100 	mov.w	r1, #0
 8005a2c:	0159      	lsls	r1, r3, #5
 8005a2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a32:	0150      	lsls	r0, r2, #5
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	4641      	mov	r1, r8
 8005a3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005a3e:	4649      	mov	r1, r9
 8005a40:	eb63 0b01 	sbc.w	fp, r3, r1
 8005a44:	f04f 0200 	mov.w	r2, #0
 8005a48:	f04f 0300 	mov.w	r3, #0
 8005a4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005a50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005a54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005a58:	ebb2 040a 	subs.w	r4, r2, sl
 8005a5c:	eb63 050b 	sbc.w	r5, r3, fp
 8005a60:	f04f 0200 	mov.w	r2, #0
 8005a64:	f04f 0300 	mov.w	r3, #0
 8005a68:	00eb      	lsls	r3, r5, #3
 8005a6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a6e:	00e2      	lsls	r2, r4, #3
 8005a70:	4614      	mov	r4, r2
 8005a72:	461d      	mov	r5, r3
 8005a74:	4643      	mov	r3, r8
 8005a76:	18e3      	adds	r3, r4, r3
 8005a78:	603b      	str	r3, [r7, #0]
 8005a7a:	464b      	mov	r3, r9
 8005a7c:	eb45 0303 	adc.w	r3, r5, r3
 8005a80:	607b      	str	r3, [r7, #4]
 8005a82:	f04f 0200 	mov.w	r2, #0
 8005a86:	f04f 0300 	mov.w	r3, #0
 8005a8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005a8e:	4629      	mov	r1, r5
 8005a90:	028b      	lsls	r3, r1, #10
 8005a92:	4621      	mov	r1, r4
 8005a94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005a98:	4621      	mov	r1, r4
 8005a9a:	028a      	lsls	r2, r1, #10
 8005a9c:	4610      	mov	r0, r2
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	61bb      	str	r3, [r7, #24]
 8005aa6:	61fa      	str	r2, [r7, #28]
 8005aa8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005aac:	f7fb f89c 	bl	8000be8 <__aeabi_uldivmod>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	460b      	mov	r3, r1
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005ab8:	4b0b      	ldr	r3, [pc, #44]	@ (8005ae8 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	0c1b      	lsrs	r3, r3, #16
 8005abe:	f003 0303 	and.w	r3, r3, #3
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005ac8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005aca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ad2:	e002      	b.n	8005ada <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ad4:	4b05      	ldr	r3, [pc, #20]	@ (8005aec <HAL_RCC_GetSysClockFreq+0x204>)
 8005ad6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ada:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3750      	adds	r7, #80	@ 0x50
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ae6:	bf00      	nop
 8005ae8:	40023800 	.word	0x40023800
 8005aec:	00f42400 	.word	0x00f42400
 8005af0:	007a1200 	.word	0x007a1200

08005af4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005af4:	b480      	push	{r7}
 8005af6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005af8:	4b03      	ldr	r3, [pc, #12]	@ (8005b08 <HAL_RCC_GetHCLKFreq+0x14>)
 8005afa:	681b      	ldr	r3, [r3, #0]
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	20000000 	.word	0x20000000

08005b0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b10:	f7ff fff0 	bl	8005af4 <HAL_RCC_GetHCLKFreq>
 8005b14:	4602      	mov	r2, r0
 8005b16:	4b05      	ldr	r3, [pc, #20]	@ (8005b2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	0a9b      	lsrs	r3, r3, #10
 8005b1c:	f003 0307 	and.w	r3, r3, #7
 8005b20:	4903      	ldr	r1, [pc, #12]	@ (8005b30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b22:	5ccb      	ldrb	r3, [r1, r3]
 8005b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	40023800 	.word	0x40023800
 8005b30:	08009e8c 	.word	0x08009e8c

08005b34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b38:	f7ff ffdc 	bl	8005af4 <HAL_RCC_GetHCLKFreq>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	4b05      	ldr	r3, [pc, #20]	@ (8005b54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	0b5b      	lsrs	r3, r3, #13
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	4903      	ldr	r1, [pc, #12]	@ (8005b58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b4a:	5ccb      	ldrb	r3, [r1, r3]
 8005b4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	40023800 	.word	0x40023800
 8005b58:	08009e8c 	.word	0x08009e8c

08005b5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d101      	bne.n	8005b6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e041      	b.n	8005bf2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d106      	bne.n	8005b88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7fc fc4c 	bl	8002420 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3304      	adds	r3, #4
 8005b98:	4619      	mov	r1, r3
 8005b9a:	4610      	mov	r0, r2
 8005b9c:	f000 f9b8 	bl	8005f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3708      	adds	r7, #8
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
	...

08005bfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d109      	bne.n	8005c20 <HAL_TIM_PWM_Start+0x24>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	bf14      	ite	ne
 8005c18:	2301      	movne	r3, #1
 8005c1a:	2300      	moveq	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
 8005c1e:	e022      	b.n	8005c66 <HAL_TIM_PWM_Start+0x6a>
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	d109      	bne.n	8005c3a <HAL_TIM_PWM_Start+0x3e>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	bf14      	ite	ne
 8005c32:	2301      	movne	r3, #1
 8005c34:	2300      	moveq	r3, #0
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	e015      	b.n	8005c66 <HAL_TIM_PWM_Start+0x6a>
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b08      	cmp	r3, #8
 8005c3e:	d109      	bne.n	8005c54 <HAL_TIM_PWM_Start+0x58>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	bf14      	ite	ne
 8005c4c:	2301      	movne	r3, #1
 8005c4e:	2300      	moveq	r3, #0
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	e008      	b.n	8005c66 <HAL_TIM_PWM_Start+0x6a>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	bf14      	ite	ne
 8005c60:	2301      	movne	r3, #1
 8005c62:	2300      	moveq	r3, #0
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d001      	beq.n	8005c6e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e07c      	b.n	8005d68 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d104      	bne.n	8005c7e <HAL_TIM_PWM_Start+0x82>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2202      	movs	r2, #2
 8005c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c7c:	e013      	b.n	8005ca6 <HAL_TIM_PWM_Start+0xaa>
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b04      	cmp	r3, #4
 8005c82:	d104      	bne.n	8005c8e <HAL_TIM_PWM_Start+0x92>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c8c:	e00b      	b.n	8005ca6 <HAL_TIM_PWM_Start+0xaa>
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b08      	cmp	r3, #8
 8005c92:	d104      	bne.n	8005c9e <HAL_TIM_PWM_Start+0xa2>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c9c:	e003      	b.n	8005ca6 <HAL_TIM_PWM_Start+0xaa>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2202      	movs	r2, #2
 8005ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2201      	movs	r2, #1
 8005cac:	6839      	ldr	r1, [r7, #0]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 fb8a 	bl	80063c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a2d      	ldr	r2, [pc, #180]	@ (8005d70 <HAL_TIM_PWM_Start+0x174>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d004      	beq.n	8005cc8 <HAL_TIM_PWM_Start+0xcc>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a2c      	ldr	r2, [pc, #176]	@ (8005d74 <HAL_TIM_PWM_Start+0x178>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d101      	bne.n	8005ccc <HAL_TIM_PWM_Start+0xd0>
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e000      	b.n	8005cce <HAL_TIM_PWM_Start+0xd2>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d007      	beq.n	8005ce2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ce0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a22      	ldr	r2, [pc, #136]	@ (8005d70 <HAL_TIM_PWM_Start+0x174>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d022      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x136>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005cf4:	d01d      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x136>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a1f      	ldr	r2, [pc, #124]	@ (8005d78 <HAL_TIM_PWM_Start+0x17c>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d018      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x136>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a1d      	ldr	r2, [pc, #116]	@ (8005d7c <HAL_TIM_PWM_Start+0x180>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d013      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x136>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a1c      	ldr	r2, [pc, #112]	@ (8005d80 <HAL_TIM_PWM_Start+0x184>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d00e      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x136>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a16      	ldr	r2, [pc, #88]	@ (8005d74 <HAL_TIM_PWM_Start+0x178>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d009      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x136>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a18      	ldr	r2, [pc, #96]	@ (8005d84 <HAL_TIM_PWM_Start+0x188>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d004      	beq.n	8005d32 <HAL_TIM_PWM_Start+0x136>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a16      	ldr	r2, [pc, #88]	@ (8005d88 <HAL_TIM_PWM_Start+0x18c>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d111      	bne.n	8005d56 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f003 0307 	and.w	r3, r3, #7
 8005d3c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2b06      	cmp	r3, #6
 8005d42:	d010      	beq.n	8005d66 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f042 0201 	orr.w	r2, r2, #1
 8005d52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d54:	e007      	b.n	8005d66 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f042 0201 	orr.w	r2, r2, #1
 8005d64:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	40010000 	.word	0x40010000
 8005d74:	40010400 	.word	0x40010400
 8005d78:	40000400 	.word	0x40000400
 8005d7c:	40000800 	.word	0x40000800
 8005d80:	40000c00 	.word	0x40000c00
 8005d84:	40014000 	.word	0x40014000
 8005d88:	40001800 	.word	0x40001800

08005d8c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b086      	sub	sp, #24
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d101      	bne.n	8005daa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005da6:	2302      	movs	r3, #2
 8005da8:	e0ae      	b.n	8005f08 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2b0c      	cmp	r3, #12
 8005db6:	f200 809f 	bhi.w	8005ef8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005dba:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc0:	08005df5 	.word	0x08005df5
 8005dc4:	08005ef9 	.word	0x08005ef9
 8005dc8:	08005ef9 	.word	0x08005ef9
 8005dcc:	08005ef9 	.word	0x08005ef9
 8005dd0:	08005e35 	.word	0x08005e35
 8005dd4:	08005ef9 	.word	0x08005ef9
 8005dd8:	08005ef9 	.word	0x08005ef9
 8005ddc:	08005ef9 	.word	0x08005ef9
 8005de0:	08005e77 	.word	0x08005e77
 8005de4:	08005ef9 	.word	0x08005ef9
 8005de8:	08005ef9 	.word	0x08005ef9
 8005dec:	08005ef9 	.word	0x08005ef9
 8005df0:	08005eb7 	.word	0x08005eb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68b9      	ldr	r1, [r7, #8]
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f000 f934 	bl	8006068 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699a      	ldr	r2, [r3, #24]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0208 	orr.w	r2, r2, #8
 8005e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	699a      	ldr	r2, [r3, #24]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0204 	bic.w	r2, r2, #4
 8005e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6999      	ldr	r1, [r3, #24]
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	691a      	ldr	r2, [r3, #16]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	619a      	str	r2, [r3, #24]
      break;
 8005e32:	e064      	b.n	8005efe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	68b9      	ldr	r1, [r7, #8]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f000 f984 	bl	8006148 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699a      	ldr	r2, [r3, #24]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699a      	ldr	r2, [r3, #24]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6999      	ldr	r1, [r3, #24]
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	021a      	lsls	r2, r3, #8
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	430a      	orrs	r2, r1
 8005e72:	619a      	str	r2, [r3, #24]
      break;
 8005e74:	e043      	b.n	8005efe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68b9      	ldr	r1, [r7, #8]
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f000 f9d9 	bl	8006234 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	69da      	ldr	r2, [r3, #28]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f042 0208 	orr.w	r2, r2, #8
 8005e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	69da      	ldr	r2, [r3, #28]
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0204 	bic.w	r2, r2, #4
 8005ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69d9      	ldr	r1, [r3, #28]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	691a      	ldr	r2, [r3, #16]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	61da      	str	r2, [r3, #28]
      break;
 8005eb4:	e023      	b.n	8005efe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68b9      	ldr	r1, [r7, #8]
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 fa2d 	bl	800631c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69da      	ldr	r2, [r3, #28]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69da      	ldr	r2, [r3, #28]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	69d9      	ldr	r1, [r3, #28]
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	021a      	lsls	r2, r3, #8
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	61da      	str	r2, [r3, #28]
      break;
 8005ef6:	e002      	b.n	8005efe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	75fb      	strb	r3, [r7, #23]
      break;
 8005efc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3718      	adds	r7, #24
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a46      	ldr	r2, [pc, #280]	@ (800603c <TIM_Base_SetConfig+0x12c>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d013      	beq.n	8005f50 <TIM_Base_SetConfig+0x40>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f2e:	d00f      	beq.n	8005f50 <TIM_Base_SetConfig+0x40>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a43      	ldr	r2, [pc, #268]	@ (8006040 <TIM_Base_SetConfig+0x130>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d00b      	beq.n	8005f50 <TIM_Base_SetConfig+0x40>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a42      	ldr	r2, [pc, #264]	@ (8006044 <TIM_Base_SetConfig+0x134>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d007      	beq.n	8005f50 <TIM_Base_SetConfig+0x40>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a41      	ldr	r2, [pc, #260]	@ (8006048 <TIM_Base_SetConfig+0x138>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d003      	beq.n	8005f50 <TIM_Base_SetConfig+0x40>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a40      	ldr	r2, [pc, #256]	@ (800604c <TIM_Base_SetConfig+0x13c>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d108      	bne.n	8005f62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a35      	ldr	r2, [pc, #212]	@ (800603c <TIM_Base_SetConfig+0x12c>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d02b      	beq.n	8005fc2 <TIM_Base_SetConfig+0xb2>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f70:	d027      	beq.n	8005fc2 <TIM_Base_SetConfig+0xb2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a32      	ldr	r2, [pc, #200]	@ (8006040 <TIM_Base_SetConfig+0x130>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d023      	beq.n	8005fc2 <TIM_Base_SetConfig+0xb2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a31      	ldr	r2, [pc, #196]	@ (8006044 <TIM_Base_SetConfig+0x134>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d01f      	beq.n	8005fc2 <TIM_Base_SetConfig+0xb2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a30      	ldr	r2, [pc, #192]	@ (8006048 <TIM_Base_SetConfig+0x138>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d01b      	beq.n	8005fc2 <TIM_Base_SetConfig+0xb2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a2f      	ldr	r2, [pc, #188]	@ (800604c <TIM_Base_SetConfig+0x13c>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d017      	beq.n	8005fc2 <TIM_Base_SetConfig+0xb2>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a2e      	ldr	r2, [pc, #184]	@ (8006050 <TIM_Base_SetConfig+0x140>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d013      	beq.n	8005fc2 <TIM_Base_SetConfig+0xb2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a2d      	ldr	r2, [pc, #180]	@ (8006054 <TIM_Base_SetConfig+0x144>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d00f      	beq.n	8005fc2 <TIM_Base_SetConfig+0xb2>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a2c      	ldr	r2, [pc, #176]	@ (8006058 <TIM_Base_SetConfig+0x148>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00b      	beq.n	8005fc2 <TIM_Base_SetConfig+0xb2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a2b      	ldr	r2, [pc, #172]	@ (800605c <TIM_Base_SetConfig+0x14c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d007      	beq.n	8005fc2 <TIM_Base_SetConfig+0xb2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a2a      	ldr	r2, [pc, #168]	@ (8006060 <TIM_Base_SetConfig+0x150>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d003      	beq.n	8005fc2 <TIM_Base_SetConfig+0xb2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a29      	ldr	r2, [pc, #164]	@ (8006064 <TIM_Base_SetConfig+0x154>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d108      	bne.n	8005fd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a10      	ldr	r2, [pc, #64]	@ (800603c <TIM_Base_SetConfig+0x12c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d003      	beq.n	8006008 <TIM_Base_SetConfig+0xf8>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a12      	ldr	r2, [pc, #72]	@ (800604c <TIM_Base_SetConfig+0x13c>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d103      	bne.n	8006010 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	691a      	ldr	r2, [r3, #16]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	691b      	ldr	r3, [r3, #16]
 800601a:	f003 0301 	and.w	r3, r3, #1
 800601e:	2b01      	cmp	r3, #1
 8006020:	d105      	bne.n	800602e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	f023 0201 	bic.w	r2, r3, #1
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	611a      	str	r2, [r3, #16]
  }
}
 800602e:	bf00      	nop
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	40010000 	.word	0x40010000
 8006040:	40000400 	.word	0x40000400
 8006044:	40000800 	.word	0x40000800
 8006048:	40000c00 	.word	0x40000c00
 800604c:	40010400 	.word	0x40010400
 8006050:	40014000 	.word	0x40014000
 8006054:	40014400 	.word	0x40014400
 8006058:	40014800 	.word	0x40014800
 800605c:	40001800 	.word	0x40001800
 8006060:	40001c00 	.word	0x40001c00
 8006064:	40002000 	.word	0x40002000

08006068 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	f023 0201 	bic.w	r2, r3, #1
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f023 0303 	bic.w	r3, r3, #3
 800609e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f023 0302 	bic.w	r3, r3, #2
 80060b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a20      	ldr	r2, [pc, #128]	@ (8006140 <TIM_OC1_SetConfig+0xd8>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d003      	beq.n	80060cc <TIM_OC1_SetConfig+0x64>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a1f      	ldr	r2, [pc, #124]	@ (8006144 <TIM_OC1_SetConfig+0xdc>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d10c      	bne.n	80060e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	f023 0308 	bic.w	r3, r3, #8
 80060d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	68db      	ldr	r3, [r3, #12]
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	4313      	orrs	r3, r2
 80060dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f023 0304 	bic.w	r3, r3, #4
 80060e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a15      	ldr	r2, [pc, #84]	@ (8006140 <TIM_OC1_SetConfig+0xd8>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d003      	beq.n	80060f6 <TIM_OC1_SetConfig+0x8e>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a14      	ldr	r2, [pc, #80]	@ (8006144 <TIM_OC1_SetConfig+0xdc>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d111      	bne.n	800611a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80060fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006104:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	4313      	orrs	r3, r2
 800610e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	699b      	ldr	r3, [r3, #24]
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	4313      	orrs	r3, r2
 8006118:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	621a      	str	r2, [r3, #32]
}
 8006134:	bf00      	nop
 8006136:	371c      	adds	r7, #28
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr
 8006140:	40010000 	.word	0x40010000
 8006144:	40010400 	.word	0x40010400

08006148 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006148:	b480      	push	{r7}
 800614a:	b087      	sub	sp, #28
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a1b      	ldr	r3, [r3, #32]
 8006156:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a1b      	ldr	r3, [r3, #32]
 800615c:	f023 0210 	bic.w	r2, r3, #16
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006176:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800617e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	021b      	lsls	r3, r3, #8
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	4313      	orrs	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f023 0320 	bic.w	r3, r3, #32
 8006192:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	011b      	lsls	r3, r3, #4
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	4313      	orrs	r3, r2
 800619e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a22      	ldr	r2, [pc, #136]	@ (800622c <TIM_OC2_SetConfig+0xe4>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d003      	beq.n	80061b0 <TIM_OC2_SetConfig+0x68>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a21      	ldr	r2, [pc, #132]	@ (8006230 <TIM_OC2_SetConfig+0xe8>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d10d      	bne.n	80061cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80061b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	011b      	lsls	r3, r3, #4
 80061be:	697a      	ldr	r2, [r7, #20]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4a17      	ldr	r2, [pc, #92]	@ (800622c <TIM_OC2_SetConfig+0xe4>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d003      	beq.n	80061dc <TIM_OC2_SetConfig+0x94>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a16      	ldr	r2, [pc, #88]	@ (8006230 <TIM_OC2_SetConfig+0xe8>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d113      	bne.n	8006204 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	693a      	ldr	r2, [r7, #16]
 8006200:	4313      	orrs	r3, r2
 8006202:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	621a      	str	r2, [r3, #32]
}
 800621e:	bf00      	nop
 8006220:	371c      	adds	r7, #28
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	40010000 	.word	0x40010000
 8006230:	40010400 	.word	0x40010400

08006234 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006234:	b480      	push	{r7}
 8006236:	b087      	sub	sp, #28
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a1b      	ldr	r3, [r3, #32]
 8006248:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	69db      	ldr	r3, [r3, #28]
 800625a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	f023 0303 	bic.w	r3, r3, #3
 800626a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	4313      	orrs	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800627c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	021b      	lsls	r3, r3, #8
 8006284:	697a      	ldr	r2, [r7, #20]
 8006286:	4313      	orrs	r3, r2
 8006288:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a21      	ldr	r2, [pc, #132]	@ (8006314 <TIM_OC3_SetConfig+0xe0>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d003      	beq.n	800629a <TIM_OC3_SetConfig+0x66>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a20      	ldr	r2, [pc, #128]	@ (8006318 <TIM_OC3_SetConfig+0xe4>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d10d      	bne.n	80062b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80062a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	021b      	lsls	r3, r3, #8
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80062b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a16      	ldr	r2, [pc, #88]	@ (8006314 <TIM_OC3_SetConfig+0xe0>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d003      	beq.n	80062c6 <TIM_OC3_SetConfig+0x92>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a15      	ldr	r2, [pc, #84]	@ (8006318 <TIM_OC3_SetConfig+0xe4>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d113      	bne.n	80062ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80062d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	011b      	lsls	r3, r3, #4
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	4313      	orrs	r3, r2
 80062e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	699b      	ldr	r3, [r3, #24]
 80062e6:	011b      	lsls	r3, r3, #4
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	621a      	str	r2, [r3, #32]
}
 8006308:	bf00      	nop
 800630a:	371c      	adds	r7, #28
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	40010000 	.word	0x40010000
 8006318:	40010400 	.word	0x40010400

0800631c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800631c:	b480      	push	{r7}
 800631e:	b087      	sub	sp, #28
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	69db      	ldr	r3, [r3, #28]
 8006342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800634a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	021b      	lsls	r3, r3, #8
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	4313      	orrs	r3, r2
 800635e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	031b      	lsls	r3, r3, #12
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	4313      	orrs	r3, r2
 8006372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a12      	ldr	r2, [pc, #72]	@ (80063c0 <TIM_OC4_SetConfig+0xa4>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d003      	beq.n	8006384 <TIM_OC4_SetConfig+0x68>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4a11      	ldr	r2, [pc, #68]	@ (80063c4 <TIM_OC4_SetConfig+0xa8>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d109      	bne.n	8006398 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800638a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	695b      	ldr	r3, [r3, #20]
 8006390:	019b      	lsls	r3, r3, #6
 8006392:	697a      	ldr	r2, [r7, #20]
 8006394:	4313      	orrs	r3, r2
 8006396:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	697a      	ldr	r2, [r7, #20]
 800639c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	68fa      	ldr	r2, [r7, #12]
 80063a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	693a      	ldr	r2, [r7, #16]
 80063b0:	621a      	str	r2, [r3, #32]
}
 80063b2:	bf00      	nop
 80063b4:	371c      	adds	r7, #28
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	40010000 	.word	0x40010000
 80063c4:	40010400 	.word	0x40010400

080063c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	f003 031f 	and.w	r3, r3, #31
 80063da:	2201      	movs	r2, #1
 80063dc:	fa02 f303 	lsl.w	r3, r2, r3
 80063e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6a1a      	ldr	r2, [r3, #32]
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	43db      	mvns	r3, r3
 80063ea:	401a      	ands	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6a1a      	ldr	r2, [r3, #32]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	f003 031f 	and.w	r3, r3, #31
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006400:	431a      	orrs	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	621a      	str	r2, [r3, #32]
}
 8006406:	bf00      	nop
 8006408:	371c      	adds	r7, #28
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
	...

08006414 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006424:	2b01      	cmp	r3, #1
 8006426:	d101      	bne.n	800642c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006428:	2302      	movs	r3, #2
 800642a:	e05a      	b.n	80064e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006452:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	4313      	orrs	r3, r2
 800645c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a21      	ldr	r2, [pc, #132]	@ (80064f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d022      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006478:	d01d      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1d      	ldr	r2, [pc, #116]	@ (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d018      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a1b      	ldr	r2, [pc, #108]	@ (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d013      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a1a      	ldr	r2, [pc, #104]	@ (80064fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00e      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a18      	ldr	r2, [pc, #96]	@ (8006500 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d009      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a17      	ldr	r2, [pc, #92]	@ (8006504 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d004      	beq.n	80064b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a15      	ldr	r2, [pc, #84]	@ (8006508 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d10c      	bne.n	80064d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	68ba      	ldr	r2, [r7, #8]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3714      	adds	r7, #20
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	40010000 	.word	0x40010000
 80064f4:	40000400 	.word	0x40000400
 80064f8:	40000800 	.word	0x40000800
 80064fc:	40000c00 	.word	0x40000c00
 8006500:	40010400 	.word	0x40010400
 8006504:	40014000 	.word	0x40014000
 8006508:	40001800 	.word	0x40001800

0800650c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d101      	bne.n	800651e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e042      	b.n	80065a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d106      	bne.n	8006538 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7fc f870 	bl	8002618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2224      	movs	r2, #36	@ 0x24
 800653c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68da      	ldr	r2, [r3, #12]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800654e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 f82b 	bl	80065ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	691a      	ldr	r2, [r3, #16]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006564:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	695a      	ldr	r2, [r3, #20]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006574:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68da      	ldr	r2, [r3, #12]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006584:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2200      	movs	r2, #0
 800658a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2220      	movs	r2, #32
 8006590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2220      	movs	r2, #32
 8006598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3708      	adds	r7, #8
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}

080065ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065b0:	b0c0      	sub	sp, #256	@ 0x100
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	691b      	ldr	r3, [r3, #16]
 80065c0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80065c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065c8:	68d9      	ldr	r1, [r3, #12]
 80065ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	ea40 0301 	orr.w	r3, r0, r1
 80065d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065da:	689a      	ldr	r2, [r3, #8]
 80065dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	431a      	orrs	r2, r3
 80065e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	431a      	orrs	r2, r3
 80065ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065f0:	69db      	ldr	r3, [r3, #28]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80065f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006604:	f021 010c 	bic.w	r1, r1, #12
 8006608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006612:	430b      	orrs	r3, r1
 8006614:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006626:	6999      	ldr	r1, [r3, #24]
 8006628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	ea40 0301 	orr.w	r3, r0, r1
 8006632:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	4b8f      	ldr	r3, [pc, #572]	@ (8006878 <UART_SetConfig+0x2cc>)
 800663c:	429a      	cmp	r2, r3
 800663e:	d005      	beq.n	800664c <UART_SetConfig+0xa0>
 8006640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	4b8d      	ldr	r3, [pc, #564]	@ (800687c <UART_SetConfig+0x2d0>)
 8006648:	429a      	cmp	r2, r3
 800664a:	d104      	bne.n	8006656 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800664c:	f7ff fa72 	bl	8005b34 <HAL_RCC_GetPCLK2Freq>
 8006650:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006654:	e003      	b.n	800665e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006656:	f7ff fa59 	bl	8005b0c <HAL_RCC_GetPCLK1Freq>
 800665a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800665e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006662:	69db      	ldr	r3, [r3, #28]
 8006664:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006668:	f040 810c 	bne.w	8006884 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800666c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006670:	2200      	movs	r2, #0
 8006672:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006676:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800667a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800667e:	4622      	mov	r2, r4
 8006680:	462b      	mov	r3, r5
 8006682:	1891      	adds	r1, r2, r2
 8006684:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006686:	415b      	adcs	r3, r3
 8006688:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800668a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800668e:	4621      	mov	r1, r4
 8006690:	eb12 0801 	adds.w	r8, r2, r1
 8006694:	4629      	mov	r1, r5
 8006696:	eb43 0901 	adc.w	r9, r3, r1
 800669a:	f04f 0200 	mov.w	r2, #0
 800669e:	f04f 0300 	mov.w	r3, #0
 80066a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066ae:	4690      	mov	r8, r2
 80066b0:	4699      	mov	r9, r3
 80066b2:	4623      	mov	r3, r4
 80066b4:	eb18 0303 	adds.w	r3, r8, r3
 80066b8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80066bc:	462b      	mov	r3, r5
 80066be:	eb49 0303 	adc.w	r3, r9, r3
 80066c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80066c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066d2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80066d6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80066da:	460b      	mov	r3, r1
 80066dc:	18db      	adds	r3, r3, r3
 80066de:	653b      	str	r3, [r7, #80]	@ 0x50
 80066e0:	4613      	mov	r3, r2
 80066e2:	eb42 0303 	adc.w	r3, r2, r3
 80066e6:	657b      	str	r3, [r7, #84]	@ 0x54
 80066e8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80066ec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80066f0:	f7fa fa7a 	bl	8000be8 <__aeabi_uldivmod>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	4b61      	ldr	r3, [pc, #388]	@ (8006880 <UART_SetConfig+0x2d4>)
 80066fa:	fba3 2302 	umull	r2, r3, r3, r2
 80066fe:	095b      	lsrs	r3, r3, #5
 8006700:	011c      	lsls	r4, r3, #4
 8006702:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006706:	2200      	movs	r2, #0
 8006708:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800670c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006710:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006714:	4642      	mov	r2, r8
 8006716:	464b      	mov	r3, r9
 8006718:	1891      	adds	r1, r2, r2
 800671a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800671c:	415b      	adcs	r3, r3
 800671e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006720:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006724:	4641      	mov	r1, r8
 8006726:	eb12 0a01 	adds.w	sl, r2, r1
 800672a:	4649      	mov	r1, r9
 800672c:	eb43 0b01 	adc.w	fp, r3, r1
 8006730:	f04f 0200 	mov.w	r2, #0
 8006734:	f04f 0300 	mov.w	r3, #0
 8006738:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800673c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006740:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006744:	4692      	mov	sl, r2
 8006746:	469b      	mov	fp, r3
 8006748:	4643      	mov	r3, r8
 800674a:	eb1a 0303 	adds.w	r3, sl, r3
 800674e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006752:	464b      	mov	r3, r9
 8006754:	eb4b 0303 	adc.w	r3, fp, r3
 8006758:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800675c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006768:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800676c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006770:	460b      	mov	r3, r1
 8006772:	18db      	adds	r3, r3, r3
 8006774:	643b      	str	r3, [r7, #64]	@ 0x40
 8006776:	4613      	mov	r3, r2
 8006778:	eb42 0303 	adc.w	r3, r2, r3
 800677c:	647b      	str	r3, [r7, #68]	@ 0x44
 800677e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006782:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006786:	f7fa fa2f 	bl	8000be8 <__aeabi_uldivmod>
 800678a:	4602      	mov	r2, r0
 800678c:	460b      	mov	r3, r1
 800678e:	4611      	mov	r1, r2
 8006790:	4b3b      	ldr	r3, [pc, #236]	@ (8006880 <UART_SetConfig+0x2d4>)
 8006792:	fba3 2301 	umull	r2, r3, r3, r1
 8006796:	095b      	lsrs	r3, r3, #5
 8006798:	2264      	movs	r2, #100	@ 0x64
 800679a:	fb02 f303 	mul.w	r3, r2, r3
 800679e:	1acb      	subs	r3, r1, r3
 80067a0:	00db      	lsls	r3, r3, #3
 80067a2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80067a6:	4b36      	ldr	r3, [pc, #216]	@ (8006880 <UART_SetConfig+0x2d4>)
 80067a8:	fba3 2302 	umull	r2, r3, r3, r2
 80067ac:	095b      	lsrs	r3, r3, #5
 80067ae:	005b      	lsls	r3, r3, #1
 80067b0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80067b4:	441c      	add	r4, r3
 80067b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067ba:	2200      	movs	r2, #0
 80067bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067c0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80067c4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80067c8:	4642      	mov	r2, r8
 80067ca:	464b      	mov	r3, r9
 80067cc:	1891      	adds	r1, r2, r2
 80067ce:	63b9      	str	r1, [r7, #56]	@ 0x38
 80067d0:	415b      	adcs	r3, r3
 80067d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80067d8:	4641      	mov	r1, r8
 80067da:	1851      	adds	r1, r2, r1
 80067dc:	6339      	str	r1, [r7, #48]	@ 0x30
 80067de:	4649      	mov	r1, r9
 80067e0:	414b      	adcs	r3, r1
 80067e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80067e4:	f04f 0200 	mov.w	r2, #0
 80067e8:	f04f 0300 	mov.w	r3, #0
 80067ec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80067f0:	4659      	mov	r1, fp
 80067f2:	00cb      	lsls	r3, r1, #3
 80067f4:	4651      	mov	r1, sl
 80067f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80067fa:	4651      	mov	r1, sl
 80067fc:	00ca      	lsls	r2, r1, #3
 80067fe:	4610      	mov	r0, r2
 8006800:	4619      	mov	r1, r3
 8006802:	4603      	mov	r3, r0
 8006804:	4642      	mov	r2, r8
 8006806:	189b      	adds	r3, r3, r2
 8006808:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800680c:	464b      	mov	r3, r9
 800680e:	460a      	mov	r2, r1
 8006810:	eb42 0303 	adc.w	r3, r2, r3
 8006814:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006824:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006828:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800682c:	460b      	mov	r3, r1
 800682e:	18db      	adds	r3, r3, r3
 8006830:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006832:	4613      	mov	r3, r2
 8006834:	eb42 0303 	adc.w	r3, r2, r3
 8006838:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800683a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800683e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006842:	f7fa f9d1 	bl	8000be8 <__aeabi_uldivmod>
 8006846:	4602      	mov	r2, r0
 8006848:	460b      	mov	r3, r1
 800684a:	4b0d      	ldr	r3, [pc, #52]	@ (8006880 <UART_SetConfig+0x2d4>)
 800684c:	fba3 1302 	umull	r1, r3, r3, r2
 8006850:	095b      	lsrs	r3, r3, #5
 8006852:	2164      	movs	r1, #100	@ 0x64
 8006854:	fb01 f303 	mul.w	r3, r1, r3
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	00db      	lsls	r3, r3, #3
 800685c:	3332      	adds	r3, #50	@ 0x32
 800685e:	4a08      	ldr	r2, [pc, #32]	@ (8006880 <UART_SetConfig+0x2d4>)
 8006860:	fba2 2303 	umull	r2, r3, r2, r3
 8006864:	095b      	lsrs	r3, r3, #5
 8006866:	f003 0207 	and.w	r2, r3, #7
 800686a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4422      	add	r2, r4
 8006872:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006874:	e106      	b.n	8006a84 <UART_SetConfig+0x4d8>
 8006876:	bf00      	nop
 8006878:	40011000 	.word	0x40011000
 800687c:	40011400 	.word	0x40011400
 8006880:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006884:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006888:	2200      	movs	r2, #0
 800688a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800688e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006892:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006896:	4642      	mov	r2, r8
 8006898:	464b      	mov	r3, r9
 800689a:	1891      	adds	r1, r2, r2
 800689c:	6239      	str	r1, [r7, #32]
 800689e:	415b      	adcs	r3, r3
 80068a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80068a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068a6:	4641      	mov	r1, r8
 80068a8:	1854      	adds	r4, r2, r1
 80068aa:	4649      	mov	r1, r9
 80068ac:	eb43 0501 	adc.w	r5, r3, r1
 80068b0:	f04f 0200 	mov.w	r2, #0
 80068b4:	f04f 0300 	mov.w	r3, #0
 80068b8:	00eb      	lsls	r3, r5, #3
 80068ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068be:	00e2      	lsls	r2, r4, #3
 80068c0:	4614      	mov	r4, r2
 80068c2:	461d      	mov	r5, r3
 80068c4:	4643      	mov	r3, r8
 80068c6:	18e3      	adds	r3, r4, r3
 80068c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80068cc:	464b      	mov	r3, r9
 80068ce:	eb45 0303 	adc.w	r3, r5, r3
 80068d2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80068d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80068e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80068e6:	f04f 0200 	mov.w	r2, #0
 80068ea:	f04f 0300 	mov.w	r3, #0
 80068ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80068f2:	4629      	mov	r1, r5
 80068f4:	008b      	lsls	r3, r1, #2
 80068f6:	4621      	mov	r1, r4
 80068f8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068fc:	4621      	mov	r1, r4
 80068fe:	008a      	lsls	r2, r1, #2
 8006900:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006904:	f7fa f970 	bl	8000be8 <__aeabi_uldivmod>
 8006908:	4602      	mov	r2, r0
 800690a:	460b      	mov	r3, r1
 800690c:	4b60      	ldr	r3, [pc, #384]	@ (8006a90 <UART_SetConfig+0x4e4>)
 800690e:	fba3 2302 	umull	r2, r3, r3, r2
 8006912:	095b      	lsrs	r3, r3, #5
 8006914:	011c      	lsls	r4, r3, #4
 8006916:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800691a:	2200      	movs	r2, #0
 800691c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006920:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006924:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006928:	4642      	mov	r2, r8
 800692a:	464b      	mov	r3, r9
 800692c:	1891      	adds	r1, r2, r2
 800692e:	61b9      	str	r1, [r7, #24]
 8006930:	415b      	adcs	r3, r3
 8006932:	61fb      	str	r3, [r7, #28]
 8006934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006938:	4641      	mov	r1, r8
 800693a:	1851      	adds	r1, r2, r1
 800693c:	6139      	str	r1, [r7, #16]
 800693e:	4649      	mov	r1, r9
 8006940:	414b      	adcs	r3, r1
 8006942:	617b      	str	r3, [r7, #20]
 8006944:	f04f 0200 	mov.w	r2, #0
 8006948:	f04f 0300 	mov.w	r3, #0
 800694c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006950:	4659      	mov	r1, fp
 8006952:	00cb      	lsls	r3, r1, #3
 8006954:	4651      	mov	r1, sl
 8006956:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800695a:	4651      	mov	r1, sl
 800695c:	00ca      	lsls	r2, r1, #3
 800695e:	4610      	mov	r0, r2
 8006960:	4619      	mov	r1, r3
 8006962:	4603      	mov	r3, r0
 8006964:	4642      	mov	r2, r8
 8006966:	189b      	adds	r3, r3, r2
 8006968:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800696c:	464b      	mov	r3, r9
 800696e:	460a      	mov	r2, r1
 8006970:	eb42 0303 	adc.w	r3, r2, r3
 8006974:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006982:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006984:	f04f 0200 	mov.w	r2, #0
 8006988:	f04f 0300 	mov.w	r3, #0
 800698c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006990:	4649      	mov	r1, r9
 8006992:	008b      	lsls	r3, r1, #2
 8006994:	4641      	mov	r1, r8
 8006996:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800699a:	4641      	mov	r1, r8
 800699c:	008a      	lsls	r2, r1, #2
 800699e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80069a2:	f7fa f921 	bl	8000be8 <__aeabi_uldivmod>
 80069a6:	4602      	mov	r2, r0
 80069a8:	460b      	mov	r3, r1
 80069aa:	4611      	mov	r1, r2
 80069ac:	4b38      	ldr	r3, [pc, #224]	@ (8006a90 <UART_SetConfig+0x4e4>)
 80069ae:	fba3 2301 	umull	r2, r3, r3, r1
 80069b2:	095b      	lsrs	r3, r3, #5
 80069b4:	2264      	movs	r2, #100	@ 0x64
 80069b6:	fb02 f303 	mul.w	r3, r2, r3
 80069ba:	1acb      	subs	r3, r1, r3
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	3332      	adds	r3, #50	@ 0x32
 80069c0:	4a33      	ldr	r2, [pc, #204]	@ (8006a90 <UART_SetConfig+0x4e4>)
 80069c2:	fba2 2303 	umull	r2, r3, r2, r3
 80069c6:	095b      	lsrs	r3, r3, #5
 80069c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80069cc:	441c      	add	r4, r3
 80069ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069d2:	2200      	movs	r2, #0
 80069d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80069d6:	677a      	str	r2, [r7, #116]	@ 0x74
 80069d8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80069dc:	4642      	mov	r2, r8
 80069de:	464b      	mov	r3, r9
 80069e0:	1891      	adds	r1, r2, r2
 80069e2:	60b9      	str	r1, [r7, #8]
 80069e4:	415b      	adcs	r3, r3
 80069e6:	60fb      	str	r3, [r7, #12]
 80069e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80069ec:	4641      	mov	r1, r8
 80069ee:	1851      	adds	r1, r2, r1
 80069f0:	6039      	str	r1, [r7, #0]
 80069f2:	4649      	mov	r1, r9
 80069f4:	414b      	adcs	r3, r1
 80069f6:	607b      	str	r3, [r7, #4]
 80069f8:	f04f 0200 	mov.w	r2, #0
 80069fc:	f04f 0300 	mov.w	r3, #0
 8006a00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a04:	4659      	mov	r1, fp
 8006a06:	00cb      	lsls	r3, r1, #3
 8006a08:	4651      	mov	r1, sl
 8006a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a0e:	4651      	mov	r1, sl
 8006a10:	00ca      	lsls	r2, r1, #3
 8006a12:	4610      	mov	r0, r2
 8006a14:	4619      	mov	r1, r3
 8006a16:	4603      	mov	r3, r0
 8006a18:	4642      	mov	r2, r8
 8006a1a:	189b      	adds	r3, r3, r2
 8006a1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a1e:	464b      	mov	r3, r9
 8006a20:	460a      	mov	r2, r1
 8006a22:	eb42 0303 	adc.w	r3, r2, r3
 8006a26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a32:	667a      	str	r2, [r7, #100]	@ 0x64
 8006a34:	f04f 0200 	mov.w	r2, #0
 8006a38:	f04f 0300 	mov.w	r3, #0
 8006a3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006a40:	4649      	mov	r1, r9
 8006a42:	008b      	lsls	r3, r1, #2
 8006a44:	4641      	mov	r1, r8
 8006a46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a4a:	4641      	mov	r1, r8
 8006a4c:	008a      	lsls	r2, r1, #2
 8006a4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006a52:	f7fa f8c9 	bl	8000be8 <__aeabi_uldivmod>
 8006a56:	4602      	mov	r2, r0
 8006a58:	460b      	mov	r3, r1
 8006a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a90 <UART_SetConfig+0x4e4>)
 8006a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a60:	095b      	lsrs	r3, r3, #5
 8006a62:	2164      	movs	r1, #100	@ 0x64
 8006a64:	fb01 f303 	mul.w	r3, r1, r3
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	011b      	lsls	r3, r3, #4
 8006a6c:	3332      	adds	r3, #50	@ 0x32
 8006a6e:	4a08      	ldr	r2, [pc, #32]	@ (8006a90 <UART_SetConfig+0x4e4>)
 8006a70:	fba2 2303 	umull	r2, r3, r2, r3
 8006a74:	095b      	lsrs	r3, r3, #5
 8006a76:	f003 020f 	and.w	r2, r3, #15
 8006a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4422      	add	r2, r4
 8006a82:	609a      	str	r2, [r3, #8]
}
 8006a84:	bf00      	nop
 8006a86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a90:	51eb851f 	.word	0x51eb851f

08006a94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a94:	b084      	sub	sp, #16
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b084      	sub	sp, #16
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	6078      	str	r0, [r7, #4]
 8006a9e:	f107 001c 	add.w	r0, r7, #28
 8006aa2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006aa6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d123      	bne.n	8006af6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006ac2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ad6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d105      	bne.n	8006aea <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 faa0 	bl	8007030 <USB_CoreReset>
 8006af0:	4603      	mov	r3, r0
 8006af2:	73fb      	strb	r3, [r7, #15]
 8006af4:	e01b      	b.n	8006b2e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fa94 	bl	8007030 <USB_CoreReset>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006b0c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d106      	bne.n	8006b22 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b18:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006b20:	e005      	b.n	8006b2e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b26:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006b2e:	7fbb      	ldrb	r3, [r7, #30]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d10b      	bne.n	8006b4c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f043 0206 	orr.w	r2, r3, #6
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	f043 0220 	orr.w	r2, r3, #32
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b58:	b004      	add	sp, #16
 8006b5a:	4770      	bx	lr

08006b5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	689b      	ldr	r3, [r3, #8]
 8006b68:	f023 0201 	bic.w	r2, r3, #1
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b084      	sub	sp, #16
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	460b      	mov	r3, r1
 8006b88:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b9a:	78fb      	ldrb	r3, [r7, #3]
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d115      	bne.n	8006bcc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006bac:	200a      	movs	r0, #10
 8006bae:	f7fb fe91 	bl	80028d4 <HAL_Delay>
      ms += 10U;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	330a      	adds	r3, #10
 8006bb6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fa2b 	bl	8007014 <USB_GetMode>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d01e      	beq.n	8006c02 <USB_SetCurrentMode+0x84>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2bc7      	cmp	r3, #199	@ 0xc7
 8006bc8:	d9f0      	bls.n	8006bac <USB_SetCurrentMode+0x2e>
 8006bca:	e01a      	b.n	8006c02 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006bcc:	78fb      	ldrb	r3, [r7, #3]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d115      	bne.n	8006bfe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68db      	ldr	r3, [r3, #12]
 8006bd6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006bde:	200a      	movs	r0, #10
 8006be0:	f7fb fe78 	bl	80028d4 <HAL_Delay>
      ms += 10U;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	330a      	adds	r3, #10
 8006be8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fa12 	bl	8007014 <USB_GetMode>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d005      	beq.n	8006c02 <USB_SetCurrentMode+0x84>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2bc7      	cmp	r3, #199	@ 0xc7
 8006bfa:	d9f0      	bls.n	8006bde <USB_SetCurrentMode+0x60>
 8006bfc:	e001      	b.n	8006c02 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e005      	b.n	8006c0e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2bc8      	cmp	r3, #200	@ 0xc8
 8006c06:	d101      	bne.n	8006c0c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e000      	b.n	8006c0e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
	...

08006c18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c18:	b084      	sub	sp, #16
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b086      	sub	sp, #24
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006c26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c32:	2300      	movs	r3, #0
 8006c34:	613b      	str	r3, [r7, #16]
 8006c36:	e009      	b.n	8006c4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	3340      	adds	r3, #64	@ 0x40
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	4413      	add	r3, r2
 8006c42:	2200      	movs	r2, #0
 8006c44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	3301      	adds	r3, #1
 8006c4a:	613b      	str	r3, [r7, #16]
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	2b0e      	cmp	r3, #14
 8006c50:	d9f2      	bls.n	8006c38 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c52:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d11c      	bne.n	8006c94 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c68:	f043 0302 	orr.w	r3, r3, #2
 8006c6c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c72:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c8a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c92:	e00b      	b.n	8006cac <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c98:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006cb8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d10d      	bne.n	8006cdc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d104      	bne.n	8006cd2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006cc8:	2100      	movs	r1, #0
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f968 	bl	8006fa0 <USB_SetDevSpeed>
 8006cd0:	e008      	b.n	8006ce4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006cd2:	2101      	movs	r1, #1
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 f963 	bl	8006fa0 <USB_SetDevSpeed>
 8006cda:	e003      	b.n	8006ce4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006cdc:	2103      	movs	r1, #3
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f000 f95e 	bl	8006fa0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ce4:	2110      	movs	r1, #16
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f8fa 	bl	8006ee0 <USB_FlushTxFifo>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 f924 	bl	8006f44 <USB_FlushRxFifo>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d001      	beq.n	8006d06 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	2300      	movs	r3, #0
 8006d10:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d18:	461a      	mov	r2, r3
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d24:	461a      	mov	r2, r3
 8006d26:	2300      	movs	r3, #0
 8006d28:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	613b      	str	r3, [r7, #16]
 8006d2e:	e043      	b.n	8006db8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006d42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006d46:	d118      	bne.n	8006d7a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d10a      	bne.n	8006d64 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	015a      	lsls	r2, r3, #5
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	4413      	add	r3, r2
 8006d56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006d60:	6013      	str	r3, [r2, #0]
 8006d62:	e013      	b.n	8006d8c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d70:	461a      	mov	r2, r3
 8006d72:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006d76:	6013      	str	r3, [r2, #0]
 8006d78:	e008      	b.n	8006d8c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d86:	461a      	mov	r2, r3
 8006d88:	2300      	movs	r3, #0
 8006d8a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d98:	461a      	mov	r2, r3
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	015a      	lsls	r2, r3, #5
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	4413      	add	r3, r2
 8006da6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006daa:	461a      	mov	r2, r3
 8006dac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006db0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	3301      	adds	r3, #1
 8006db6:	613b      	str	r3, [r7, #16]
 8006db8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d3b5      	bcc.n	8006d30 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	613b      	str	r3, [r7, #16]
 8006dc8:	e043      	b.n	8006e52 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	015a      	lsls	r2, r3, #5
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ddc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006de0:	d118      	bne.n	8006e14 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d10a      	bne.n	8006dfe <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006df4:	461a      	mov	r2, r3
 8006df6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	e013      	b.n	8006e26 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	015a      	lsls	r2, r3, #5
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	4413      	add	r3, r2
 8006e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006e10:	6013      	str	r3, [r2, #0]
 8006e12:	e008      	b.n	8006e26 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	015a      	lsls	r2, r3, #5
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e20:	461a      	mov	r2, r3
 8006e22:	2300      	movs	r3, #0
 8006e24:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	015a      	lsls	r2, r3, #5
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e32:	461a      	mov	r2, r3
 8006e34:	2300      	movs	r3, #0
 8006e36:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	015a      	lsls	r2, r3, #5
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e44:	461a      	mov	r2, r3
 8006e46:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006e4a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	613b      	str	r3, [r7, #16]
 8006e52:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006e56:	461a      	mov	r2, r3
 8006e58:	693b      	ldr	r3, [r7, #16]
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d3b5      	bcc.n	8006dca <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e70:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006e7e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d105      	bne.n	8006e94 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	f043 0210 	orr.w	r2, r3, #16
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	699a      	ldr	r2, [r3, #24]
 8006e98:	4b10      	ldr	r3, [pc, #64]	@ (8006edc <USB_DevInit+0x2c4>)
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ea0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d005      	beq.n	8006eb4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	699b      	ldr	r3, [r3, #24]
 8006eac:	f043 0208 	orr.w	r2, r3, #8
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006eb4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d107      	bne.n	8006ecc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006ec4:	f043 0304 	orr.w	r3, r3, #4
 8006ec8:	687a      	ldr	r2, [r7, #4]
 8006eca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ed8:	b004      	add	sp, #16
 8006eda:	4770      	bx	lr
 8006edc:	803c3800 	.word	0x803c3800

08006ee0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b085      	sub	sp, #20
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006eea:	2300      	movs	r3, #0
 8006eec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006efa:	d901      	bls.n	8006f00 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	e01b      	b.n	8006f38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	daf2      	bge.n	8006eee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	019b      	lsls	r3, r3, #6
 8006f10:	f043 0220 	orr.w	r2, r3, #32
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f24:	d901      	bls.n	8006f2a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006f26:	2303      	movs	r3, #3
 8006f28:	e006      	b.n	8006f38 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	f003 0320 	and.w	r3, r3, #32
 8006f32:	2b20      	cmp	r3, #32
 8006f34:	d0f0      	beq.n	8006f18 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3714      	adds	r7, #20
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	3301      	adds	r3, #1
 8006f54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f5c:	d901      	bls.n	8006f62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e018      	b.n	8006f94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	daf2      	bge.n	8006f50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2210      	movs	r2, #16
 8006f72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	3301      	adds	r3, #1
 8006f78:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f80:	d901      	bls.n	8006f86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e006      	b.n	8006f94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	691b      	ldr	r3, [r3, #16]
 8006f8a:	f003 0310 	and.w	r3, r3, #16
 8006f8e:	2b10      	cmp	r3, #16
 8006f90:	d0f0      	beq.n	8006f74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3714      	adds	r7, #20
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b085      	sub	sp, #20
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
 8006fa8:	460b      	mov	r3, r1
 8006faa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	78fb      	ldrb	r3, [r7, #3]
 8006fba:	68f9      	ldr	r1, [r7, #12]
 8006fbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3714      	adds	r7, #20
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b085      	sub	sp, #20
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006fec:	f023 0303 	bic.w	r3, r3, #3
 8006ff0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007000:	f043 0302 	orr.w	r3, r3, #2
 8007004:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr

08007014 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007014:	b480      	push	{r7}
 8007016:	b083      	sub	sp, #12
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	695b      	ldr	r3, [r3, #20]
 8007020:	f003 0301 	and.w	r3, r3, #1
}
 8007024:	4618      	mov	r0, r3
 8007026:	370c      	adds	r7, #12
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007038:	2300      	movs	r3, #0
 800703a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	3301      	adds	r3, #1
 8007040:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007048:	d901      	bls.n	800704e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800704a:	2303      	movs	r3, #3
 800704c:	e01b      	b.n	8007086 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	daf2      	bge.n	800703c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007056:	2300      	movs	r3, #0
 8007058:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	f043 0201 	orr.w	r2, r3, #1
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	3301      	adds	r3, #1
 800706a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007072:	d901      	bls.n	8007078 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e006      	b.n	8007086 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	f003 0301 	and.w	r3, r3, #1
 8007080:	2b01      	cmp	r3, #1
 8007082:	d0f0      	beq.n	8007066 <USB_CoreReset+0x36>

  return HAL_OK;
 8007084:	2300      	movs	r3, #0
}
 8007086:	4618      	mov	r0, r3
 8007088:	3714      	adds	r7, #20
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr

08007092 <__cvt>:
 8007092:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007096:	ec57 6b10 	vmov	r6, r7, d0
 800709a:	2f00      	cmp	r7, #0
 800709c:	460c      	mov	r4, r1
 800709e:	4619      	mov	r1, r3
 80070a0:	463b      	mov	r3, r7
 80070a2:	bfbb      	ittet	lt
 80070a4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80070a8:	461f      	movlt	r7, r3
 80070aa:	2300      	movge	r3, #0
 80070ac:	232d      	movlt	r3, #45	@ 0x2d
 80070ae:	700b      	strb	r3, [r1, #0]
 80070b0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80070b2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80070b6:	4691      	mov	r9, r2
 80070b8:	f023 0820 	bic.w	r8, r3, #32
 80070bc:	bfbc      	itt	lt
 80070be:	4632      	movlt	r2, r6
 80070c0:	4616      	movlt	r6, r2
 80070c2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80070c6:	d005      	beq.n	80070d4 <__cvt+0x42>
 80070c8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80070cc:	d100      	bne.n	80070d0 <__cvt+0x3e>
 80070ce:	3401      	adds	r4, #1
 80070d0:	2102      	movs	r1, #2
 80070d2:	e000      	b.n	80070d6 <__cvt+0x44>
 80070d4:	2103      	movs	r1, #3
 80070d6:	ab03      	add	r3, sp, #12
 80070d8:	9301      	str	r3, [sp, #4]
 80070da:	ab02      	add	r3, sp, #8
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	ec47 6b10 	vmov	d0, r6, r7
 80070e2:	4653      	mov	r3, sl
 80070e4:	4622      	mov	r2, r4
 80070e6:	f000 fe03 	bl	8007cf0 <_dtoa_r>
 80070ea:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80070ee:	4605      	mov	r5, r0
 80070f0:	d119      	bne.n	8007126 <__cvt+0x94>
 80070f2:	f019 0f01 	tst.w	r9, #1
 80070f6:	d00e      	beq.n	8007116 <__cvt+0x84>
 80070f8:	eb00 0904 	add.w	r9, r0, r4
 80070fc:	2200      	movs	r2, #0
 80070fe:	2300      	movs	r3, #0
 8007100:	4630      	mov	r0, r6
 8007102:	4639      	mov	r1, r7
 8007104:	f7f9 fce0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007108:	b108      	cbz	r0, 800710e <__cvt+0x7c>
 800710a:	f8cd 900c 	str.w	r9, [sp, #12]
 800710e:	2230      	movs	r2, #48	@ 0x30
 8007110:	9b03      	ldr	r3, [sp, #12]
 8007112:	454b      	cmp	r3, r9
 8007114:	d31e      	bcc.n	8007154 <__cvt+0xc2>
 8007116:	9b03      	ldr	r3, [sp, #12]
 8007118:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800711a:	1b5b      	subs	r3, r3, r5
 800711c:	4628      	mov	r0, r5
 800711e:	6013      	str	r3, [r2, #0]
 8007120:	b004      	add	sp, #16
 8007122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007126:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800712a:	eb00 0904 	add.w	r9, r0, r4
 800712e:	d1e5      	bne.n	80070fc <__cvt+0x6a>
 8007130:	7803      	ldrb	r3, [r0, #0]
 8007132:	2b30      	cmp	r3, #48	@ 0x30
 8007134:	d10a      	bne.n	800714c <__cvt+0xba>
 8007136:	2200      	movs	r2, #0
 8007138:	2300      	movs	r3, #0
 800713a:	4630      	mov	r0, r6
 800713c:	4639      	mov	r1, r7
 800713e:	f7f9 fcc3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007142:	b918      	cbnz	r0, 800714c <__cvt+0xba>
 8007144:	f1c4 0401 	rsb	r4, r4, #1
 8007148:	f8ca 4000 	str.w	r4, [sl]
 800714c:	f8da 3000 	ldr.w	r3, [sl]
 8007150:	4499      	add	r9, r3
 8007152:	e7d3      	b.n	80070fc <__cvt+0x6a>
 8007154:	1c59      	adds	r1, r3, #1
 8007156:	9103      	str	r1, [sp, #12]
 8007158:	701a      	strb	r2, [r3, #0]
 800715a:	e7d9      	b.n	8007110 <__cvt+0x7e>

0800715c <__exponent>:
 800715c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800715e:	2900      	cmp	r1, #0
 8007160:	bfba      	itte	lt
 8007162:	4249      	neglt	r1, r1
 8007164:	232d      	movlt	r3, #45	@ 0x2d
 8007166:	232b      	movge	r3, #43	@ 0x2b
 8007168:	2909      	cmp	r1, #9
 800716a:	7002      	strb	r2, [r0, #0]
 800716c:	7043      	strb	r3, [r0, #1]
 800716e:	dd29      	ble.n	80071c4 <__exponent+0x68>
 8007170:	f10d 0307 	add.w	r3, sp, #7
 8007174:	461d      	mov	r5, r3
 8007176:	270a      	movs	r7, #10
 8007178:	461a      	mov	r2, r3
 800717a:	fbb1 f6f7 	udiv	r6, r1, r7
 800717e:	fb07 1416 	mls	r4, r7, r6, r1
 8007182:	3430      	adds	r4, #48	@ 0x30
 8007184:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007188:	460c      	mov	r4, r1
 800718a:	2c63      	cmp	r4, #99	@ 0x63
 800718c:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007190:	4631      	mov	r1, r6
 8007192:	dcf1      	bgt.n	8007178 <__exponent+0x1c>
 8007194:	3130      	adds	r1, #48	@ 0x30
 8007196:	1e94      	subs	r4, r2, #2
 8007198:	f803 1c01 	strb.w	r1, [r3, #-1]
 800719c:	1c41      	adds	r1, r0, #1
 800719e:	4623      	mov	r3, r4
 80071a0:	42ab      	cmp	r3, r5
 80071a2:	d30a      	bcc.n	80071ba <__exponent+0x5e>
 80071a4:	f10d 0309 	add.w	r3, sp, #9
 80071a8:	1a9b      	subs	r3, r3, r2
 80071aa:	42ac      	cmp	r4, r5
 80071ac:	bf88      	it	hi
 80071ae:	2300      	movhi	r3, #0
 80071b0:	3302      	adds	r3, #2
 80071b2:	4403      	add	r3, r0
 80071b4:	1a18      	subs	r0, r3, r0
 80071b6:	b003      	add	sp, #12
 80071b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071ba:	f813 6b01 	ldrb.w	r6, [r3], #1
 80071be:	f801 6f01 	strb.w	r6, [r1, #1]!
 80071c2:	e7ed      	b.n	80071a0 <__exponent+0x44>
 80071c4:	2330      	movs	r3, #48	@ 0x30
 80071c6:	3130      	adds	r1, #48	@ 0x30
 80071c8:	7083      	strb	r3, [r0, #2]
 80071ca:	70c1      	strb	r1, [r0, #3]
 80071cc:	1d03      	adds	r3, r0, #4
 80071ce:	e7f1      	b.n	80071b4 <__exponent+0x58>

080071d0 <_printf_float>:
 80071d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d4:	b08d      	sub	sp, #52	@ 0x34
 80071d6:	460c      	mov	r4, r1
 80071d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80071dc:	4616      	mov	r6, r2
 80071de:	461f      	mov	r7, r3
 80071e0:	4605      	mov	r5, r0
 80071e2:	f000 fccb 	bl	8007b7c <_localeconv_r>
 80071e6:	6803      	ldr	r3, [r0, #0]
 80071e8:	9304      	str	r3, [sp, #16]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7f9 f840 	bl	8000270 <strlen>
 80071f0:	2300      	movs	r3, #0
 80071f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80071f4:	f8d8 3000 	ldr.w	r3, [r8]
 80071f8:	9005      	str	r0, [sp, #20]
 80071fa:	3307      	adds	r3, #7
 80071fc:	f023 0307 	bic.w	r3, r3, #7
 8007200:	f103 0208 	add.w	r2, r3, #8
 8007204:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007208:	f8d4 b000 	ldr.w	fp, [r4]
 800720c:	f8c8 2000 	str.w	r2, [r8]
 8007210:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007214:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007218:	9307      	str	r3, [sp, #28]
 800721a:	f8cd 8018 	str.w	r8, [sp, #24]
 800721e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007222:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007226:	4b9c      	ldr	r3, [pc, #624]	@ (8007498 <_printf_float+0x2c8>)
 8007228:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800722c:	f7f9 fc7e 	bl	8000b2c <__aeabi_dcmpun>
 8007230:	bb70      	cbnz	r0, 8007290 <_printf_float+0xc0>
 8007232:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007236:	4b98      	ldr	r3, [pc, #608]	@ (8007498 <_printf_float+0x2c8>)
 8007238:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800723c:	f7f9 fc58 	bl	8000af0 <__aeabi_dcmple>
 8007240:	bb30      	cbnz	r0, 8007290 <_printf_float+0xc0>
 8007242:	2200      	movs	r2, #0
 8007244:	2300      	movs	r3, #0
 8007246:	4640      	mov	r0, r8
 8007248:	4649      	mov	r1, r9
 800724a:	f7f9 fc47 	bl	8000adc <__aeabi_dcmplt>
 800724e:	b110      	cbz	r0, 8007256 <_printf_float+0x86>
 8007250:	232d      	movs	r3, #45	@ 0x2d
 8007252:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007256:	4a91      	ldr	r2, [pc, #580]	@ (800749c <_printf_float+0x2cc>)
 8007258:	4b91      	ldr	r3, [pc, #580]	@ (80074a0 <_printf_float+0x2d0>)
 800725a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800725e:	bf94      	ite	ls
 8007260:	4690      	movls	r8, r2
 8007262:	4698      	movhi	r8, r3
 8007264:	2303      	movs	r3, #3
 8007266:	6123      	str	r3, [r4, #16]
 8007268:	f02b 0304 	bic.w	r3, fp, #4
 800726c:	6023      	str	r3, [r4, #0]
 800726e:	f04f 0900 	mov.w	r9, #0
 8007272:	9700      	str	r7, [sp, #0]
 8007274:	4633      	mov	r3, r6
 8007276:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007278:	4621      	mov	r1, r4
 800727a:	4628      	mov	r0, r5
 800727c:	f000 f9d2 	bl	8007624 <_printf_common>
 8007280:	3001      	adds	r0, #1
 8007282:	f040 808d 	bne.w	80073a0 <_printf_float+0x1d0>
 8007286:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800728a:	b00d      	add	sp, #52	@ 0x34
 800728c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007290:	4642      	mov	r2, r8
 8007292:	464b      	mov	r3, r9
 8007294:	4640      	mov	r0, r8
 8007296:	4649      	mov	r1, r9
 8007298:	f7f9 fc48 	bl	8000b2c <__aeabi_dcmpun>
 800729c:	b140      	cbz	r0, 80072b0 <_printf_float+0xe0>
 800729e:	464b      	mov	r3, r9
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	bfbc      	itt	lt
 80072a4:	232d      	movlt	r3, #45	@ 0x2d
 80072a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80072aa:	4a7e      	ldr	r2, [pc, #504]	@ (80074a4 <_printf_float+0x2d4>)
 80072ac:	4b7e      	ldr	r3, [pc, #504]	@ (80074a8 <_printf_float+0x2d8>)
 80072ae:	e7d4      	b.n	800725a <_printf_float+0x8a>
 80072b0:	6863      	ldr	r3, [r4, #4]
 80072b2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80072b6:	9206      	str	r2, [sp, #24]
 80072b8:	1c5a      	adds	r2, r3, #1
 80072ba:	d13b      	bne.n	8007334 <_printf_float+0x164>
 80072bc:	2306      	movs	r3, #6
 80072be:	6063      	str	r3, [r4, #4]
 80072c0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80072c4:	2300      	movs	r3, #0
 80072c6:	6022      	str	r2, [r4, #0]
 80072c8:	9303      	str	r3, [sp, #12]
 80072ca:	ab0a      	add	r3, sp, #40	@ 0x28
 80072cc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80072d0:	ab09      	add	r3, sp, #36	@ 0x24
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	6861      	ldr	r1, [r4, #4]
 80072d6:	ec49 8b10 	vmov	d0, r8, r9
 80072da:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80072de:	4628      	mov	r0, r5
 80072e0:	f7ff fed7 	bl	8007092 <__cvt>
 80072e4:	9b06      	ldr	r3, [sp, #24]
 80072e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80072e8:	2b47      	cmp	r3, #71	@ 0x47
 80072ea:	4680      	mov	r8, r0
 80072ec:	d129      	bne.n	8007342 <_printf_float+0x172>
 80072ee:	1cc8      	adds	r0, r1, #3
 80072f0:	db02      	blt.n	80072f8 <_printf_float+0x128>
 80072f2:	6863      	ldr	r3, [r4, #4]
 80072f4:	4299      	cmp	r1, r3
 80072f6:	dd41      	ble.n	800737c <_printf_float+0x1ac>
 80072f8:	f1aa 0a02 	sub.w	sl, sl, #2
 80072fc:	fa5f fa8a 	uxtb.w	sl, sl
 8007300:	3901      	subs	r1, #1
 8007302:	4652      	mov	r2, sl
 8007304:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007308:	9109      	str	r1, [sp, #36]	@ 0x24
 800730a:	f7ff ff27 	bl	800715c <__exponent>
 800730e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007310:	1813      	adds	r3, r2, r0
 8007312:	2a01      	cmp	r2, #1
 8007314:	4681      	mov	r9, r0
 8007316:	6123      	str	r3, [r4, #16]
 8007318:	dc02      	bgt.n	8007320 <_printf_float+0x150>
 800731a:	6822      	ldr	r2, [r4, #0]
 800731c:	07d2      	lsls	r2, r2, #31
 800731e:	d501      	bpl.n	8007324 <_printf_float+0x154>
 8007320:	3301      	adds	r3, #1
 8007322:	6123      	str	r3, [r4, #16]
 8007324:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007328:	2b00      	cmp	r3, #0
 800732a:	d0a2      	beq.n	8007272 <_printf_float+0xa2>
 800732c:	232d      	movs	r3, #45	@ 0x2d
 800732e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007332:	e79e      	b.n	8007272 <_printf_float+0xa2>
 8007334:	9a06      	ldr	r2, [sp, #24]
 8007336:	2a47      	cmp	r2, #71	@ 0x47
 8007338:	d1c2      	bne.n	80072c0 <_printf_float+0xf0>
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1c0      	bne.n	80072c0 <_printf_float+0xf0>
 800733e:	2301      	movs	r3, #1
 8007340:	e7bd      	b.n	80072be <_printf_float+0xee>
 8007342:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007346:	d9db      	bls.n	8007300 <_printf_float+0x130>
 8007348:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800734c:	d118      	bne.n	8007380 <_printf_float+0x1b0>
 800734e:	2900      	cmp	r1, #0
 8007350:	6863      	ldr	r3, [r4, #4]
 8007352:	dd0b      	ble.n	800736c <_printf_float+0x19c>
 8007354:	6121      	str	r1, [r4, #16]
 8007356:	b913      	cbnz	r3, 800735e <_printf_float+0x18e>
 8007358:	6822      	ldr	r2, [r4, #0]
 800735a:	07d0      	lsls	r0, r2, #31
 800735c:	d502      	bpl.n	8007364 <_printf_float+0x194>
 800735e:	3301      	adds	r3, #1
 8007360:	440b      	add	r3, r1
 8007362:	6123      	str	r3, [r4, #16]
 8007364:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007366:	f04f 0900 	mov.w	r9, #0
 800736a:	e7db      	b.n	8007324 <_printf_float+0x154>
 800736c:	b913      	cbnz	r3, 8007374 <_printf_float+0x1a4>
 800736e:	6822      	ldr	r2, [r4, #0]
 8007370:	07d2      	lsls	r2, r2, #31
 8007372:	d501      	bpl.n	8007378 <_printf_float+0x1a8>
 8007374:	3302      	adds	r3, #2
 8007376:	e7f4      	b.n	8007362 <_printf_float+0x192>
 8007378:	2301      	movs	r3, #1
 800737a:	e7f2      	b.n	8007362 <_printf_float+0x192>
 800737c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007380:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007382:	4299      	cmp	r1, r3
 8007384:	db05      	blt.n	8007392 <_printf_float+0x1c2>
 8007386:	6823      	ldr	r3, [r4, #0]
 8007388:	6121      	str	r1, [r4, #16]
 800738a:	07d8      	lsls	r0, r3, #31
 800738c:	d5ea      	bpl.n	8007364 <_printf_float+0x194>
 800738e:	1c4b      	adds	r3, r1, #1
 8007390:	e7e7      	b.n	8007362 <_printf_float+0x192>
 8007392:	2900      	cmp	r1, #0
 8007394:	bfd4      	ite	le
 8007396:	f1c1 0202 	rsble	r2, r1, #2
 800739a:	2201      	movgt	r2, #1
 800739c:	4413      	add	r3, r2
 800739e:	e7e0      	b.n	8007362 <_printf_float+0x192>
 80073a0:	6823      	ldr	r3, [r4, #0]
 80073a2:	055a      	lsls	r2, r3, #21
 80073a4:	d407      	bmi.n	80073b6 <_printf_float+0x1e6>
 80073a6:	6923      	ldr	r3, [r4, #16]
 80073a8:	4642      	mov	r2, r8
 80073aa:	4631      	mov	r1, r6
 80073ac:	4628      	mov	r0, r5
 80073ae:	47b8      	blx	r7
 80073b0:	3001      	adds	r0, #1
 80073b2:	d12b      	bne.n	800740c <_printf_float+0x23c>
 80073b4:	e767      	b.n	8007286 <_printf_float+0xb6>
 80073b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80073ba:	f240 80dd 	bls.w	8007578 <_printf_float+0x3a8>
 80073be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80073c2:	2200      	movs	r2, #0
 80073c4:	2300      	movs	r3, #0
 80073c6:	f7f9 fb7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	d033      	beq.n	8007436 <_printf_float+0x266>
 80073ce:	4a37      	ldr	r2, [pc, #220]	@ (80074ac <_printf_float+0x2dc>)
 80073d0:	2301      	movs	r3, #1
 80073d2:	4631      	mov	r1, r6
 80073d4:	4628      	mov	r0, r5
 80073d6:	47b8      	blx	r7
 80073d8:	3001      	adds	r0, #1
 80073da:	f43f af54 	beq.w	8007286 <_printf_float+0xb6>
 80073de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80073e2:	4543      	cmp	r3, r8
 80073e4:	db02      	blt.n	80073ec <_printf_float+0x21c>
 80073e6:	6823      	ldr	r3, [r4, #0]
 80073e8:	07d8      	lsls	r0, r3, #31
 80073ea:	d50f      	bpl.n	800740c <_printf_float+0x23c>
 80073ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073f0:	4631      	mov	r1, r6
 80073f2:	4628      	mov	r0, r5
 80073f4:	47b8      	blx	r7
 80073f6:	3001      	adds	r0, #1
 80073f8:	f43f af45 	beq.w	8007286 <_printf_float+0xb6>
 80073fc:	f04f 0900 	mov.w	r9, #0
 8007400:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007404:	f104 0a1a 	add.w	sl, r4, #26
 8007408:	45c8      	cmp	r8, r9
 800740a:	dc09      	bgt.n	8007420 <_printf_float+0x250>
 800740c:	6823      	ldr	r3, [r4, #0]
 800740e:	079b      	lsls	r3, r3, #30
 8007410:	f100 8103 	bmi.w	800761a <_printf_float+0x44a>
 8007414:	68e0      	ldr	r0, [r4, #12]
 8007416:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007418:	4298      	cmp	r0, r3
 800741a:	bfb8      	it	lt
 800741c:	4618      	movlt	r0, r3
 800741e:	e734      	b.n	800728a <_printf_float+0xba>
 8007420:	2301      	movs	r3, #1
 8007422:	4652      	mov	r2, sl
 8007424:	4631      	mov	r1, r6
 8007426:	4628      	mov	r0, r5
 8007428:	47b8      	blx	r7
 800742a:	3001      	adds	r0, #1
 800742c:	f43f af2b 	beq.w	8007286 <_printf_float+0xb6>
 8007430:	f109 0901 	add.w	r9, r9, #1
 8007434:	e7e8      	b.n	8007408 <_printf_float+0x238>
 8007436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007438:	2b00      	cmp	r3, #0
 800743a:	dc39      	bgt.n	80074b0 <_printf_float+0x2e0>
 800743c:	4a1b      	ldr	r2, [pc, #108]	@ (80074ac <_printf_float+0x2dc>)
 800743e:	2301      	movs	r3, #1
 8007440:	4631      	mov	r1, r6
 8007442:	4628      	mov	r0, r5
 8007444:	47b8      	blx	r7
 8007446:	3001      	adds	r0, #1
 8007448:	f43f af1d 	beq.w	8007286 <_printf_float+0xb6>
 800744c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007450:	ea59 0303 	orrs.w	r3, r9, r3
 8007454:	d102      	bne.n	800745c <_printf_float+0x28c>
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	07d9      	lsls	r1, r3, #31
 800745a:	d5d7      	bpl.n	800740c <_printf_float+0x23c>
 800745c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007460:	4631      	mov	r1, r6
 8007462:	4628      	mov	r0, r5
 8007464:	47b8      	blx	r7
 8007466:	3001      	adds	r0, #1
 8007468:	f43f af0d 	beq.w	8007286 <_printf_float+0xb6>
 800746c:	f04f 0a00 	mov.w	sl, #0
 8007470:	f104 0b1a 	add.w	fp, r4, #26
 8007474:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007476:	425b      	negs	r3, r3
 8007478:	4553      	cmp	r3, sl
 800747a:	dc01      	bgt.n	8007480 <_printf_float+0x2b0>
 800747c:	464b      	mov	r3, r9
 800747e:	e793      	b.n	80073a8 <_printf_float+0x1d8>
 8007480:	2301      	movs	r3, #1
 8007482:	465a      	mov	r2, fp
 8007484:	4631      	mov	r1, r6
 8007486:	4628      	mov	r0, r5
 8007488:	47b8      	blx	r7
 800748a:	3001      	adds	r0, #1
 800748c:	f43f aefb 	beq.w	8007286 <_printf_float+0xb6>
 8007490:	f10a 0a01 	add.w	sl, sl, #1
 8007494:	e7ee      	b.n	8007474 <_printf_float+0x2a4>
 8007496:	bf00      	nop
 8007498:	7fefffff 	.word	0x7fefffff
 800749c:	08009e9c 	.word	0x08009e9c
 80074a0:	08009ea0 	.word	0x08009ea0
 80074a4:	08009ea4 	.word	0x08009ea4
 80074a8:	08009ea8 	.word	0x08009ea8
 80074ac:	08009eac 	.word	0x08009eac
 80074b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80074b2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80074b6:	4553      	cmp	r3, sl
 80074b8:	bfa8      	it	ge
 80074ba:	4653      	movge	r3, sl
 80074bc:	2b00      	cmp	r3, #0
 80074be:	4699      	mov	r9, r3
 80074c0:	dc36      	bgt.n	8007530 <_printf_float+0x360>
 80074c2:	f04f 0b00 	mov.w	fp, #0
 80074c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074ca:	f104 021a 	add.w	r2, r4, #26
 80074ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80074d0:	9306      	str	r3, [sp, #24]
 80074d2:	eba3 0309 	sub.w	r3, r3, r9
 80074d6:	455b      	cmp	r3, fp
 80074d8:	dc31      	bgt.n	800753e <_printf_float+0x36e>
 80074da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074dc:	459a      	cmp	sl, r3
 80074de:	dc3a      	bgt.n	8007556 <_printf_float+0x386>
 80074e0:	6823      	ldr	r3, [r4, #0]
 80074e2:	07da      	lsls	r2, r3, #31
 80074e4:	d437      	bmi.n	8007556 <_printf_float+0x386>
 80074e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074e8:	ebaa 0903 	sub.w	r9, sl, r3
 80074ec:	9b06      	ldr	r3, [sp, #24]
 80074ee:	ebaa 0303 	sub.w	r3, sl, r3
 80074f2:	4599      	cmp	r9, r3
 80074f4:	bfa8      	it	ge
 80074f6:	4699      	movge	r9, r3
 80074f8:	f1b9 0f00 	cmp.w	r9, #0
 80074fc:	dc33      	bgt.n	8007566 <_printf_float+0x396>
 80074fe:	f04f 0800 	mov.w	r8, #0
 8007502:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007506:	f104 0b1a 	add.w	fp, r4, #26
 800750a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800750c:	ebaa 0303 	sub.w	r3, sl, r3
 8007510:	eba3 0309 	sub.w	r3, r3, r9
 8007514:	4543      	cmp	r3, r8
 8007516:	f77f af79 	ble.w	800740c <_printf_float+0x23c>
 800751a:	2301      	movs	r3, #1
 800751c:	465a      	mov	r2, fp
 800751e:	4631      	mov	r1, r6
 8007520:	4628      	mov	r0, r5
 8007522:	47b8      	blx	r7
 8007524:	3001      	adds	r0, #1
 8007526:	f43f aeae 	beq.w	8007286 <_printf_float+0xb6>
 800752a:	f108 0801 	add.w	r8, r8, #1
 800752e:	e7ec      	b.n	800750a <_printf_float+0x33a>
 8007530:	4642      	mov	r2, r8
 8007532:	4631      	mov	r1, r6
 8007534:	4628      	mov	r0, r5
 8007536:	47b8      	blx	r7
 8007538:	3001      	adds	r0, #1
 800753a:	d1c2      	bne.n	80074c2 <_printf_float+0x2f2>
 800753c:	e6a3      	b.n	8007286 <_printf_float+0xb6>
 800753e:	2301      	movs	r3, #1
 8007540:	4631      	mov	r1, r6
 8007542:	4628      	mov	r0, r5
 8007544:	9206      	str	r2, [sp, #24]
 8007546:	47b8      	blx	r7
 8007548:	3001      	adds	r0, #1
 800754a:	f43f ae9c 	beq.w	8007286 <_printf_float+0xb6>
 800754e:	9a06      	ldr	r2, [sp, #24]
 8007550:	f10b 0b01 	add.w	fp, fp, #1
 8007554:	e7bb      	b.n	80074ce <_printf_float+0x2fe>
 8007556:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800755a:	4631      	mov	r1, r6
 800755c:	4628      	mov	r0, r5
 800755e:	47b8      	blx	r7
 8007560:	3001      	adds	r0, #1
 8007562:	d1c0      	bne.n	80074e6 <_printf_float+0x316>
 8007564:	e68f      	b.n	8007286 <_printf_float+0xb6>
 8007566:	9a06      	ldr	r2, [sp, #24]
 8007568:	464b      	mov	r3, r9
 800756a:	4442      	add	r2, r8
 800756c:	4631      	mov	r1, r6
 800756e:	4628      	mov	r0, r5
 8007570:	47b8      	blx	r7
 8007572:	3001      	adds	r0, #1
 8007574:	d1c3      	bne.n	80074fe <_printf_float+0x32e>
 8007576:	e686      	b.n	8007286 <_printf_float+0xb6>
 8007578:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800757c:	f1ba 0f01 	cmp.w	sl, #1
 8007580:	dc01      	bgt.n	8007586 <_printf_float+0x3b6>
 8007582:	07db      	lsls	r3, r3, #31
 8007584:	d536      	bpl.n	80075f4 <_printf_float+0x424>
 8007586:	2301      	movs	r3, #1
 8007588:	4642      	mov	r2, r8
 800758a:	4631      	mov	r1, r6
 800758c:	4628      	mov	r0, r5
 800758e:	47b8      	blx	r7
 8007590:	3001      	adds	r0, #1
 8007592:	f43f ae78 	beq.w	8007286 <_printf_float+0xb6>
 8007596:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800759a:	4631      	mov	r1, r6
 800759c:	4628      	mov	r0, r5
 800759e:	47b8      	blx	r7
 80075a0:	3001      	adds	r0, #1
 80075a2:	f43f ae70 	beq.w	8007286 <_printf_float+0xb6>
 80075a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80075aa:	2200      	movs	r2, #0
 80075ac:	2300      	movs	r3, #0
 80075ae:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80075b2:	f7f9 fa89 	bl	8000ac8 <__aeabi_dcmpeq>
 80075b6:	b9c0      	cbnz	r0, 80075ea <_printf_float+0x41a>
 80075b8:	4653      	mov	r3, sl
 80075ba:	f108 0201 	add.w	r2, r8, #1
 80075be:	4631      	mov	r1, r6
 80075c0:	4628      	mov	r0, r5
 80075c2:	47b8      	blx	r7
 80075c4:	3001      	adds	r0, #1
 80075c6:	d10c      	bne.n	80075e2 <_printf_float+0x412>
 80075c8:	e65d      	b.n	8007286 <_printf_float+0xb6>
 80075ca:	2301      	movs	r3, #1
 80075cc:	465a      	mov	r2, fp
 80075ce:	4631      	mov	r1, r6
 80075d0:	4628      	mov	r0, r5
 80075d2:	47b8      	blx	r7
 80075d4:	3001      	adds	r0, #1
 80075d6:	f43f ae56 	beq.w	8007286 <_printf_float+0xb6>
 80075da:	f108 0801 	add.w	r8, r8, #1
 80075de:	45d0      	cmp	r8, sl
 80075e0:	dbf3      	blt.n	80075ca <_printf_float+0x3fa>
 80075e2:	464b      	mov	r3, r9
 80075e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80075e8:	e6df      	b.n	80073aa <_printf_float+0x1da>
 80075ea:	f04f 0800 	mov.w	r8, #0
 80075ee:	f104 0b1a 	add.w	fp, r4, #26
 80075f2:	e7f4      	b.n	80075de <_printf_float+0x40e>
 80075f4:	2301      	movs	r3, #1
 80075f6:	4642      	mov	r2, r8
 80075f8:	e7e1      	b.n	80075be <_printf_float+0x3ee>
 80075fa:	2301      	movs	r3, #1
 80075fc:	464a      	mov	r2, r9
 80075fe:	4631      	mov	r1, r6
 8007600:	4628      	mov	r0, r5
 8007602:	47b8      	blx	r7
 8007604:	3001      	adds	r0, #1
 8007606:	f43f ae3e 	beq.w	8007286 <_printf_float+0xb6>
 800760a:	f108 0801 	add.w	r8, r8, #1
 800760e:	68e3      	ldr	r3, [r4, #12]
 8007610:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007612:	1a5b      	subs	r3, r3, r1
 8007614:	4543      	cmp	r3, r8
 8007616:	dcf0      	bgt.n	80075fa <_printf_float+0x42a>
 8007618:	e6fc      	b.n	8007414 <_printf_float+0x244>
 800761a:	f04f 0800 	mov.w	r8, #0
 800761e:	f104 0919 	add.w	r9, r4, #25
 8007622:	e7f4      	b.n	800760e <_printf_float+0x43e>

08007624 <_printf_common>:
 8007624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007628:	4616      	mov	r6, r2
 800762a:	4698      	mov	r8, r3
 800762c:	688a      	ldr	r2, [r1, #8]
 800762e:	690b      	ldr	r3, [r1, #16]
 8007630:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007634:	4293      	cmp	r3, r2
 8007636:	bfb8      	it	lt
 8007638:	4613      	movlt	r3, r2
 800763a:	6033      	str	r3, [r6, #0]
 800763c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007640:	4607      	mov	r7, r0
 8007642:	460c      	mov	r4, r1
 8007644:	b10a      	cbz	r2, 800764a <_printf_common+0x26>
 8007646:	3301      	adds	r3, #1
 8007648:	6033      	str	r3, [r6, #0]
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	0699      	lsls	r1, r3, #26
 800764e:	bf42      	ittt	mi
 8007650:	6833      	ldrmi	r3, [r6, #0]
 8007652:	3302      	addmi	r3, #2
 8007654:	6033      	strmi	r3, [r6, #0]
 8007656:	6825      	ldr	r5, [r4, #0]
 8007658:	f015 0506 	ands.w	r5, r5, #6
 800765c:	d106      	bne.n	800766c <_printf_common+0x48>
 800765e:	f104 0a19 	add.w	sl, r4, #25
 8007662:	68e3      	ldr	r3, [r4, #12]
 8007664:	6832      	ldr	r2, [r6, #0]
 8007666:	1a9b      	subs	r3, r3, r2
 8007668:	42ab      	cmp	r3, r5
 800766a:	dc26      	bgt.n	80076ba <_printf_common+0x96>
 800766c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007670:	6822      	ldr	r2, [r4, #0]
 8007672:	3b00      	subs	r3, #0
 8007674:	bf18      	it	ne
 8007676:	2301      	movne	r3, #1
 8007678:	0692      	lsls	r2, r2, #26
 800767a:	d42b      	bmi.n	80076d4 <_printf_common+0xb0>
 800767c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007680:	4641      	mov	r1, r8
 8007682:	4638      	mov	r0, r7
 8007684:	47c8      	blx	r9
 8007686:	3001      	adds	r0, #1
 8007688:	d01e      	beq.n	80076c8 <_printf_common+0xa4>
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	6922      	ldr	r2, [r4, #16]
 800768e:	f003 0306 	and.w	r3, r3, #6
 8007692:	2b04      	cmp	r3, #4
 8007694:	bf02      	ittt	eq
 8007696:	68e5      	ldreq	r5, [r4, #12]
 8007698:	6833      	ldreq	r3, [r6, #0]
 800769a:	1aed      	subeq	r5, r5, r3
 800769c:	68a3      	ldr	r3, [r4, #8]
 800769e:	bf0c      	ite	eq
 80076a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076a4:	2500      	movne	r5, #0
 80076a6:	4293      	cmp	r3, r2
 80076a8:	bfc4      	itt	gt
 80076aa:	1a9b      	subgt	r3, r3, r2
 80076ac:	18ed      	addgt	r5, r5, r3
 80076ae:	2600      	movs	r6, #0
 80076b0:	341a      	adds	r4, #26
 80076b2:	42b5      	cmp	r5, r6
 80076b4:	d11a      	bne.n	80076ec <_printf_common+0xc8>
 80076b6:	2000      	movs	r0, #0
 80076b8:	e008      	b.n	80076cc <_printf_common+0xa8>
 80076ba:	2301      	movs	r3, #1
 80076bc:	4652      	mov	r2, sl
 80076be:	4641      	mov	r1, r8
 80076c0:	4638      	mov	r0, r7
 80076c2:	47c8      	blx	r9
 80076c4:	3001      	adds	r0, #1
 80076c6:	d103      	bne.n	80076d0 <_printf_common+0xac>
 80076c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d0:	3501      	adds	r5, #1
 80076d2:	e7c6      	b.n	8007662 <_printf_common+0x3e>
 80076d4:	18e1      	adds	r1, r4, r3
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	2030      	movs	r0, #48	@ 0x30
 80076da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076de:	4422      	add	r2, r4
 80076e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076e8:	3302      	adds	r3, #2
 80076ea:	e7c7      	b.n	800767c <_printf_common+0x58>
 80076ec:	2301      	movs	r3, #1
 80076ee:	4622      	mov	r2, r4
 80076f0:	4641      	mov	r1, r8
 80076f2:	4638      	mov	r0, r7
 80076f4:	47c8      	blx	r9
 80076f6:	3001      	adds	r0, #1
 80076f8:	d0e6      	beq.n	80076c8 <_printf_common+0xa4>
 80076fa:	3601      	adds	r6, #1
 80076fc:	e7d9      	b.n	80076b2 <_printf_common+0x8e>
	...

08007700 <_printf_i>:
 8007700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007704:	7e0f      	ldrb	r7, [r1, #24]
 8007706:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007708:	2f78      	cmp	r7, #120	@ 0x78
 800770a:	4691      	mov	r9, r2
 800770c:	4680      	mov	r8, r0
 800770e:	460c      	mov	r4, r1
 8007710:	469a      	mov	sl, r3
 8007712:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007716:	d807      	bhi.n	8007728 <_printf_i+0x28>
 8007718:	2f62      	cmp	r7, #98	@ 0x62
 800771a:	d80a      	bhi.n	8007732 <_printf_i+0x32>
 800771c:	2f00      	cmp	r7, #0
 800771e:	f000 80d2 	beq.w	80078c6 <_printf_i+0x1c6>
 8007722:	2f58      	cmp	r7, #88	@ 0x58
 8007724:	f000 80b9 	beq.w	800789a <_printf_i+0x19a>
 8007728:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800772c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007730:	e03a      	b.n	80077a8 <_printf_i+0xa8>
 8007732:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007736:	2b15      	cmp	r3, #21
 8007738:	d8f6      	bhi.n	8007728 <_printf_i+0x28>
 800773a:	a101      	add	r1, pc, #4	@ (adr r1, 8007740 <_printf_i+0x40>)
 800773c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007740:	08007799 	.word	0x08007799
 8007744:	080077ad 	.word	0x080077ad
 8007748:	08007729 	.word	0x08007729
 800774c:	08007729 	.word	0x08007729
 8007750:	08007729 	.word	0x08007729
 8007754:	08007729 	.word	0x08007729
 8007758:	080077ad 	.word	0x080077ad
 800775c:	08007729 	.word	0x08007729
 8007760:	08007729 	.word	0x08007729
 8007764:	08007729 	.word	0x08007729
 8007768:	08007729 	.word	0x08007729
 800776c:	080078ad 	.word	0x080078ad
 8007770:	080077d7 	.word	0x080077d7
 8007774:	08007867 	.word	0x08007867
 8007778:	08007729 	.word	0x08007729
 800777c:	08007729 	.word	0x08007729
 8007780:	080078cf 	.word	0x080078cf
 8007784:	08007729 	.word	0x08007729
 8007788:	080077d7 	.word	0x080077d7
 800778c:	08007729 	.word	0x08007729
 8007790:	08007729 	.word	0x08007729
 8007794:	0800786f 	.word	0x0800786f
 8007798:	6833      	ldr	r3, [r6, #0]
 800779a:	1d1a      	adds	r2, r3, #4
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6032      	str	r2, [r6, #0]
 80077a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80077a8:	2301      	movs	r3, #1
 80077aa:	e09d      	b.n	80078e8 <_printf_i+0x1e8>
 80077ac:	6833      	ldr	r3, [r6, #0]
 80077ae:	6820      	ldr	r0, [r4, #0]
 80077b0:	1d19      	adds	r1, r3, #4
 80077b2:	6031      	str	r1, [r6, #0]
 80077b4:	0606      	lsls	r6, r0, #24
 80077b6:	d501      	bpl.n	80077bc <_printf_i+0xbc>
 80077b8:	681d      	ldr	r5, [r3, #0]
 80077ba:	e003      	b.n	80077c4 <_printf_i+0xc4>
 80077bc:	0645      	lsls	r5, r0, #25
 80077be:	d5fb      	bpl.n	80077b8 <_printf_i+0xb8>
 80077c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80077c4:	2d00      	cmp	r5, #0
 80077c6:	da03      	bge.n	80077d0 <_printf_i+0xd0>
 80077c8:	232d      	movs	r3, #45	@ 0x2d
 80077ca:	426d      	negs	r5, r5
 80077cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077d0:	4859      	ldr	r0, [pc, #356]	@ (8007938 <_printf_i+0x238>)
 80077d2:	230a      	movs	r3, #10
 80077d4:	e011      	b.n	80077fa <_printf_i+0xfa>
 80077d6:	6821      	ldr	r1, [r4, #0]
 80077d8:	6833      	ldr	r3, [r6, #0]
 80077da:	0608      	lsls	r0, r1, #24
 80077dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80077e0:	d402      	bmi.n	80077e8 <_printf_i+0xe8>
 80077e2:	0649      	lsls	r1, r1, #25
 80077e4:	bf48      	it	mi
 80077e6:	b2ad      	uxthmi	r5, r5
 80077e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80077ea:	4853      	ldr	r0, [pc, #332]	@ (8007938 <_printf_i+0x238>)
 80077ec:	6033      	str	r3, [r6, #0]
 80077ee:	bf14      	ite	ne
 80077f0:	230a      	movne	r3, #10
 80077f2:	2308      	moveq	r3, #8
 80077f4:	2100      	movs	r1, #0
 80077f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80077fa:	6866      	ldr	r6, [r4, #4]
 80077fc:	60a6      	str	r6, [r4, #8]
 80077fe:	2e00      	cmp	r6, #0
 8007800:	bfa2      	ittt	ge
 8007802:	6821      	ldrge	r1, [r4, #0]
 8007804:	f021 0104 	bicge.w	r1, r1, #4
 8007808:	6021      	strge	r1, [r4, #0]
 800780a:	b90d      	cbnz	r5, 8007810 <_printf_i+0x110>
 800780c:	2e00      	cmp	r6, #0
 800780e:	d04b      	beq.n	80078a8 <_printf_i+0x1a8>
 8007810:	4616      	mov	r6, r2
 8007812:	fbb5 f1f3 	udiv	r1, r5, r3
 8007816:	fb03 5711 	mls	r7, r3, r1, r5
 800781a:	5dc7      	ldrb	r7, [r0, r7]
 800781c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007820:	462f      	mov	r7, r5
 8007822:	42bb      	cmp	r3, r7
 8007824:	460d      	mov	r5, r1
 8007826:	d9f4      	bls.n	8007812 <_printf_i+0x112>
 8007828:	2b08      	cmp	r3, #8
 800782a:	d10b      	bne.n	8007844 <_printf_i+0x144>
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	07df      	lsls	r7, r3, #31
 8007830:	d508      	bpl.n	8007844 <_printf_i+0x144>
 8007832:	6923      	ldr	r3, [r4, #16]
 8007834:	6861      	ldr	r1, [r4, #4]
 8007836:	4299      	cmp	r1, r3
 8007838:	bfde      	ittt	le
 800783a:	2330      	movle	r3, #48	@ 0x30
 800783c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007840:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007844:	1b92      	subs	r2, r2, r6
 8007846:	6122      	str	r2, [r4, #16]
 8007848:	f8cd a000 	str.w	sl, [sp]
 800784c:	464b      	mov	r3, r9
 800784e:	aa03      	add	r2, sp, #12
 8007850:	4621      	mov	r1, r4
 8007852:	4640      	mov	r0, r8
 8007854:	f7ff fee6 	bl	8007624 <_printf_common>
 8007858:	3001      	adds	r0, #1
 800785a:	d14a      	bne.n	80078f2 <_printf_i+0x1f2>
 800785c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007860:	b004      	add	sp, #16
 8007862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007866:	6823      	ldr	r3, [r4, #0]
 8007868:	f043 0320 	orr.w	r3, r3, #32
 800786c:	6023      	str	r3, [r4, #0]
 800786e:	4833      	ldr	r0, [pc, #204]	@ (800793c <_printf_i+0x23c>)
 8007870:	2778      	movs	r7, #120	@ 0x78
 8007872:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007876:	6823      	ldr	r3, [r4, #0]
 8007878:	6831      	ldr	r1, [r6, #0]
 800787a:	061f      	lsls	r7, r3, #24
 800787c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007880:	d402      	bmi.n	8007888 <_printf_i+0x188>
 8007882:	065f      	lsls	r7, r3, #25
 8007884:	bf48      	it	mi
 8007886:	b2ad      	uxthmi	r5, r5
 8007888:	6031      	str	r1, [r6, #0]
 800788a:	07d9      	lsls	r1, r3, #31
 800788c:	bf44      	itt	mi
 800788e:	f043 0320 	orrmi.w	r3, r3, #32
 8007892:	6023      	strmi	r3, [r4, #0]
 8007894:	b11d      	cbz	r5, 800789e <_printf_i+0x19e>
 8007896:	2310      	movs	r3, #16
 8007898:	e7ac      	b.n	80077f4 <_printf_i+0xf4>
 800789a:	4827      	ldr	r0, [pc, #156]	@ (8007938 <_printf_i+0x238>)
 800789c:	e7e9      	b.n	8007872 <_printf_i+0x172>
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	f023 0320 	bic.w	r3, r3, #32
 80078a4:	6023      	str	r3, [r4, #0]
 80078a6:	e7f6      	b.n	8007896 <_printf_i+0x196>
 80078a8:	4616      	mov	r6, r2
 80078aa:	e7bd      	b.n	8007828 <_printf_i+0x128>
 80078ac:	6833      	ldr	r3, [r6, #0]
 80078ae:	6825      	ldr	r5, [r4, #0]
 80078b0:	6961      	ldr	r1, [r4, #20]
 80078b2:	1d18      	adds	r0, r3, #4
 80078b4:	6030      	str	r0, [r6, #0]
 80078b6:	062e      	lsls	r6, r5, #24
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	d501      	bpl.n	80078c0 <_printf_i+0x1c0>
 80078bc:	6019      	str	r1, [r3, #0]
 80078be:	e002      	b.n	80078c6 <_printf_i+0x1c6>
 80078c0:	0668      	lsls	r0, r5, #25
 80078c2:	d5fb      	bpl.n	80078bc <_printf_i+0x1bc>
 80078c4:	8019      	strh	r1, [r3, #0]
 80078c6:	2300      	movs	r3, #0
 80078c8:	6123      	str	r3, [r4, #16]
 80078ca:	4616      	mov	r6, r2
 80078cc:	e7bc      	b.n	8007848 <_printf_i+0x148>
 80078ce:	6833      	ldr	r3, [r6, #0]
 80078d0:	1d1a      	adds	r2, r3, #4
 80078d2:	6032      	str	r2, [r6, #0]
 80078d4:	681e      	ldr	r6, [r3, #0]
 80078d6:	6862      	ldr	r2, [r4, #4]
 80078d8:	2100      	movs	r1, #0
 80078da:	4630      	mov	r0, r6
 80078dc:	f7f8 fc78 	bl	80001d0 <memchr>
 80078e0:	b108      	cbz	r0, 80078e6 <_printf_i+0x1e6>
 80078e2:	1b80      	subs	r0, r0, r6
 80078e4:	6060      	str	r0, [r4, #4]
 80078e6:	6863      	ldr	r3, [r4, #4]
 80078e8:	6123      	str	r3, [r4, #16]
 80078ea:	2300      	movs	r3, #0
 80078ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078f0:	e7aa      	b.n	8007848 <_printf_i+0x148>
 80078f2:	6923      	ldr	r3, [r4, #16]
 80078f4:	4632      	mov	r2, r6
 80078f6:	4649      	mov	r1, r9
 80078f8:	4640      	mov	r0, r8
 80078fa:	47d0      	blx	sl
 80078fc:	3001      	adds	r0, #1
 80078fe:	d0ad      	beq.n	800785c <_printf_i+0x15c>
 8007900:	6823      	ldr	r3, [r4, #0]
 8007902:	079b      	lsls	r3, r3, #30
 8007904:	d413      	bmi.n	800792e <_printf_i+0x22e>
 8007906:	68e0      	ldr	r0, [r4, #12]
 8007908:	9b03      	ldr	r3, [sp, #12]
 800790a:	4298      	cmp	r0, r3
 800790c:	bfb8      	it	lt
 800790e:	4618      	movlt	r0, r3
 8007910:	e7a6      	b.n	8007860 <_printf_i+0x160>
 8007912:	2301      	movs	r3, #1
 8007914:	4632      	mov	r2, r6
 8007916:	4649      	mov	r1, r9
 8007918:	4640      	mov	r0, r8
 800791a:	47d0      	blx	sl
 800791c:	3001      	adds	r0, #1
 800791e:	d09d      	beq.n	800785c <_printf_i+0x15c>
 8007920:	3501      	adds	r5, #1
 8007922:	68e3      	ldr	r3, [r4, #12]
 8007924:	9903      	ldr	r1, [sp, #12]
 8007926:	1a5b      	subs	r3, r3, r1
 8007928:	42ab      	cmp	r3, r5
 800792a:	dcf2      	bgt.n	8007912 <_printf_i+0x212>
 800792c:	e7eb      	b.n	8007906 <_printf_i+0x206>
 800792e:	2500      	movs	r5, #0
 8007930:	f104 0619 	add.w	r6, r4, #25
 8007934:	e7f5      	b.n	8007922 <_printf_i+0x222>
 8007936:	bf00      	nop
 8007938:	08009eae 	.word	0x08009eae
 800793c:	08009ebf 	.word	0x08009ebf

08007940 <sniprintf>:
 8007940:	b40c      	push	{r2, r3}
 8007942:	b530      	push	{r4, r5, lr}
 8007944:	4b17      	ldr	r3, [pc, #92]	@ (80079a4 <sniprintf+0x64>)
 8007946:	1e0c      	subs	r4, r1, #0
 8007948:	681d      	ldr	r5, [r3, #0]
 800794a:	b09d      	sub	sp, #116	@ 0x74
 800794c:	da08      	bge.n	8007960 <sniprintf+0x20>
 800794e:	238b      	movs	r3, #139	@ 0x8b
 8007950:	602b      	str	r3, [r5, #0]
 8007952:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007956:	b01d      	add	sp, #116	@ 0x74
 8007958:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800795c:	b002      	add	sp, #8
 800795e:	4770      	bx	lr
 8007960:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007964:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007968:	bf14      	ite	ne
 800796a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800796e:	4623      	moveq	r3, r4
 8007970:	9304      	str	r3, [sp, #16]
 8007972:	9307      	str	r3, [sp, #28]
 8007974:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007978:	9002      	str	r0, [sp, #8]
 800797a:	9006      	str	r0, [sp, #24]
 800797c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007980:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007982:	ab21      	add	r3, sp, #132	@ 0x84
 8007984:	a902      	add	r1, sp, #8
 8007986:	4628      	mov	r0, r5
 8007988:	9301      	str	r3, [sp, #4]
 800798a:	f000 ffd1 	bl	8008930 <_svfiprintf_r>
 800798e:	1c43      	adds	r3, r0, #1
 8007990:	bfbc      	itt	lt
 8007992:	238b      	movlt	r3, #139	@ 0x8b
 8007994:	602b      	strlt	r3, [r5, #0]
 8007996:	2c00      	cmp	r4, #0
 8007998:	d0dd      	beq.n	8007956 <sniprintf+0x16>
 800799a:	9b02      	ldr	r3, [sp, #8]
 800799c:	2200      	movs	r2, #0
 800799e:	701a      	strb	r2, [r3, #0]
 80079a0:	e7d9      	b.n	8007956 <sniprintf+0x16>
 80079a2:	bf00      	nop
 80079a4:	20000018 	.word	0x20000018

080079a8 <siprintf>:
 80079a8:	b40e      	push	{r1, r2, r3}
 80079aa:	b500      	push	{lr}
 80079ac:	b09c      	sub	sp, #112	@ 0x70
 80079ae:	ab1d      	add	r3, sp, #116	@ 0x74
 80079b0:	9002      	str	r0, [sp, #8]
 80079b2:	9006      	str	r0, [sp, #24]
 80079b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80079b8:	4809      	ldr	r0, [pc, #36]	@ (80079e0 <siprintf+0x38>)
 80079ba:	9107      	str	r1, [sp, #28]
 80079bc:	9104      	str	r1, [sp, #16]
 80079be:	4909      	ldr	r1, [pc, #36]	@ (80079e4 <siprintf+0x3c>)
 80079c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80079c4:	9105      	str	r1, [sp, #20]
 80079c6:	6800      	ldr	r0, [r0, #0]
 80079c8:	9301      	str	r3, [sp, #4]
 80079ca:	a902      	add	r1, sp, #8
 80079cc:	f000 ffb0 	bl	8008930 <_svfiprintf_r>
 80079d0:	9b02      	ldr	r3, [sp, #8]
 80079d2:	2200      	movs	r2, #0
 80079d4:	701a      	strb	r2, [r3, #0]
 80079d6:	b01c      	add	sp, #112	@ 0x70
 80079d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80079dc:	b003      	add	sp, #12
 80079de:	4770      	bx	lr
 80079e0:	20000018 	.word	0x20000018
 80079e4:	ffff0208 	.word	0xffff0208

080079e8 <std>:
 80079e8:	2300      	movs	r3, #0
 80079ea:	b510      	push	{r4, lr}
 80079ec:	4604      	mov	r4, r0
 80079ee:	e9c0 3300 	strd	r3, r3, [r0]
 80079f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80079f6:	6083      	str	r3, [r0, #8]
 80079f8:	8181      	strh	r1, [r0, #12]
 80079fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80079fc:	81c2      	strh	r2, [r0, #14]
 80079fe:	6183      	str	r3, [r0, #24]
 8007a00:	4619      	mov	r1, r3
 8007a02:	2208      	movs	r2, #8
 8007a04:	305c      	adds	r0, #92	@ 0x5c
 8007a06:	f000 f8b1 	bl	8007b6c <memset>
 8007a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8007a40 <std+0x58>)
 8007a0c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a44 <std+0x5c>)
 8007a10:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007a12:	4b0d      	ldr	r3, [pc, #52]	@ (8007a48 <std+0x60>)
 8007a14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007a16:	4b0d      	ldr	r3, [pc, #52]	@ (8007a4c <std+0x64>)
 8007a18:	6323      	str	r3, [r4, #48]	@ 0x30
 8007a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007a50 <std+0x68>)
 8007a1c:	6224      	str	r4, [r4, #32]
 8007a1e:	429c      	cmp	r4, r3
 8007a20:	d006      	beq.n	8007a30 <std+0x48>
 8007a22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007a26:	4294      	cmp	r4, r2
 8007a28:	d002      	beq.n	8007a30 <std+0x48>
 8007a2a:	33d0      	adds	r3, #208	@ 0xd0
 8007a2c:	429c      	cmp	r4, r3
 8007a2e:	d105      	bne.n	8007a3c <std+0x54>
 8007a30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a38:	f000 b8ce 	b.w	8007bd8 <__retarget_lock_init_recursive>
 8007a3c:	bd10      	pop	{r4, pc}
 8007a3e:	bf00      	nop
 8007a40:	080094f1 	.word	0x080094f1
 8007a44:	08009513 	.word	0x08009513
 8007a48:	0800954b 	.word	0x0800954b
 8007a4c:	0800956f 	.word	0x0800956f
 8007a50:	20000950 	.word	0x20000950

08007a54 <stdio_exit_handler>:
 8007a54:	4a02      	ldr	r2, [pc, #8]	@ (8007a60 <stdio_exit_handler+0xc>)
 8007a56:	4903      	ldr	r1, [pc, #12]	@ (8007a64 <stdio_exit_handler+0x10>)
 8007a58:	4803      	ldr	r0, [pc, #12]	@ (8007a68 <stdio_exit_handler+0x14>)
 8007a5a:	f000 b869 	b.w	8007b30 <_fwalk_sglue>
 8007a5e:	bf00      	nop
 8007a60:	2000000c 	.word	0x2000000c
 8007a64:	08008d85 	.word	0x08008d85
 8007a68:	2000001c 	.word	0x2000001c

08007a6c <cleanup_stdio>:
 8007a6c:	6841      	ldr	r1, [r0, #4]
 8007a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8007aa0 <cleanup_stdio+0x34>)
 8007a70:	4299      	cmp	r1, r3
 8007a72:	b510      	push	{r4, lr}
 8007a74:	4604      	mov	r4, r0
 8007a76:	d001      	beq.n	8007a7c <cleanup_stdio+0x10>
 8007a78:	f001 f984 	bl	8008d84 <_fflush_r>
 8007a7c:	68a1      	ldr	r1, [r4, #8]
 8007a7e:	4b09      	ldr	r3, [pc, #36]	@ (8007aa4 <cleanup_stdio+0x38>)
 8007a80:	4299      	cmp	r1, r3
 8007a82:	d002      	beq.n	8007a8a <cleanup_stdio+0x1e>
 8007a84:	4620      	mov	r0, r4
 8007a86:	f001 f97d 	bl	8008d84 <_fflush_r>
 8007a8a:	68e1      	ldr	r1, [r4, #12]
 8007a8c:	4b06      	ldr	r3, [pc, #24]	@ (8007aa8 <cleanup_stdio+0x3c>)
 8007a8e:	4299      	cmp	r1, r3
 8007a90:	d004      	beq.n	8007a9c <cleanup_stdio+0x30>
 8007a92:	4620      	mov	r0, r4
 8007a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a98:	f001 b974 	b.w	8008d84 <_fflush_r>
 8007a9c:	bd10      	pop	{r4, pc}
 8007a9e:	bf00      	nop
 8007aa0:	20000950 	.word	0x20000950
 8007aa4:	200009b8 	.word	0x200009b8
 8007aa8:	20000a20 	.word	0x20000a20

08007aac <global_stdio_init.part.0>:
 8007aac:	b510      	push	{r4, lr}
 8007aae:	4b0b      	ldr	r3, [pc, #44]	@ (8007adc <global_stdio_init.part.0+0x30>)
 8007ab0:	4c0b      	ldr	r4, [pc, #44]	@ (8007ae0 <global_stdio_init.part.0+0x34>)
 8007ab2:	4a0c      	ldr	r2, [pc, #48]	@ (8007ae4 <global_stdio_init.part.0+0x38>)
 8007ab4:	601a      	str	r2, [r3, #0]
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	2200      	movs	r2, #0
 8007aba:	2104      	movs	r1, #4
 8007abc:	f7ff ff94 	bl	80079e8 <std>
 8007ac0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	2109      	movs	r1, #9
 8007ac8:	f7ff ff8e 	bl	80079e8 <std>
 8007acc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007ad0:	2202      	movs	r2, #2
 8007ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ad6:	2112      	movs	r1, #18
 8007ad8:	f7ff bf86 	b.w	80079e8 <std>
 8007adc:	20000a88 	.word	0x20000a88
 8007ae0:	20000950 	.word	0x20000950
 8007ae4:	08007a55 	.word	0x08007a55

08007ae8 <__sfp_lock_acquire>:
 8007ae8:	4801      	ldr	r0, [pc, #4]	@ (8007af0 <__sfp_lock_acquire+0x8>)
 8007aea:	f000 b876 	b.w	8007bda <__retarget_lock_acquire_recursive>
 8007aee:	bf00      	nop
 8007af0:	20000a8d 	.word	0x20000a8d

08007af4 <__sfp_lock_release>:
 8007af4:	4801      	ldr	r0, [pc, #4]	@ (8007afc <__sfp_lock_release+0x8>)
 8007af6:	f000 b871 	b.w	8007bdc <__retarget_lock_release_recursive>
 8007afa:	bf00      	nop
 8007afc:	20000a8d 	.word	0x20000a8d

08007b00 <__sinit>:
 8007b00:	b510      	push	{r4, lr}
 8007b02:	4604      	mov	r4, r0
 8007b04:	f7ff fff0 	bl	8007ae8 <__sfp_lock_acquire>
 8007b08:	6a23      	ldr	r3, [r4, #32]
 8007b0a:	b11b      	cbz	r3, 8007b14 <__sinit+0x14>
 8007b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b10:	f7ff bff0 	b.w	8007af4 <__sfp_lock_release>
 8007b14:	4b04      	ldr	r3, [pc, #16]	@ (8007b28 <__sinit+0x28>)
 8007b16:	6223      	str	r3, [r4, #32]
 8007b18:	4b04      	ldr	r3, [pc, #16]	@ (8007b2c <__sinit+0x2c>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d1f5      	bne.n	8007b0c <__sinit+0xc>
 8007b20:	f7ff ffc4 	bl	8007aac <global_stdio_init.part.0>
 8007b24:	e7f2      	b.n	8007b0c <__sinit+0xc>
 8007b26:	bf00      	nop
 8007b28:	08007a6d 	.word	0x08007a6d
 8007b2c:	20000a88 	.word	0x20000a88

08007b30 <_fwalk_sglue>:
 8007b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b34:	4607      	mov	r7, r0
 8007b36:	4688      	mov	r8, r1
 8007b38:	4614      	mov	r4, r2
 8007b3a:	2600      	movs	r6, #0
 8007b3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b40:	f1b9 0901 	subs.w	r9, r9, #1
 8007b44:	d505      	bpl.n	8007b52 <_fwalk_sglue+0x22>
 8007b46:	6824      	ldr	r4, [r4, #0]
 8007b48:	2c00      	cmp	r4, #0
 8007b4a:	d1f7      	bne.n	8007b3c <_fwalk_sglue+0xc>
 8007b4c:	4630      	mov	r0, r6
 8007b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b52:	89ab      	ldrh	r3, [r5, #12]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d907      	bls.n	8007b68 <_fwalk_sglue+0x38>
 8007b58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	d003      	beq.n	8007b68 <_fwalk_sglue+0x38>
 8007b60:	4629      	mov	r1, r5
 8007b62:	4638      	mov	r0, r7
 8007b64:	47c0      	blx	r8
 8007b66:	4306      	orrs	r6, r0
 8007b68:	3568      	adds	r5, #104	@ 0x68
 8007b6a:	e7e9      	b.n	8007b40 <_fwalk_sglue+0x10>

08007b6c <memset>:
 8007b6c:	4402      	add	r2, r0
 8007b6e:	4603      	mov	r3, r0
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d100      	bne.n	8007b76 <memset+0xa>
 8007b74:	4770      	bx	lr
 8007b76:	f803 1b01 	strb.w	r1, [r3], #1
 8007b7a:	e7f9      	b.n	8007b70 <memset+0x4>

08007b7c <_localeconv_r>:
 8007b7c:	4800      	ldr	r0, [pc, #0]	@ (8007b80 <_localeconv_r+0x4>)
 8007b7e:	4770      	bx	lr
 8007b80:	20000158 	.word	0x20000158

08007b84 <__errno>:
 8007b84:	4b01      	ldr	r3, [pc, #4]	@ (8007b8c <__errno+0x8>)
 8007b86:	6818      	ldr	r0, [r3, #0]
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	20000018 	.word	0x20000018

08007b90 <__libc_init_array>:
 8007b90:	b570      	push	{r4, r5, r6, lr}
 8007b92:	4d0d      	ldr	r5, [pc, #52]	@ (8007bc8 <__libc_init_array+0x38>)
 8007b94:	4c0d      	ldr	r4, [pc, #52]	@ (8007bcc <__libc_init_array+0x3c>)
 8007b96:	1b64      	subs	r4, r4, r5
 8007b98:	10a4      	asrs	r4, r4, #2
 8007b9a:	2600      	movs	r6, #0
 8007b9c:	42a6      	cmp	r6, r4
 8007b9e:	d109      	bne.n	8007bb4 <__libc_init_array+0x24>
 8007ba0:	4d0b      	ldr	r5, [pc, #44]	@ (8007bd0 <__libc_init_array+0x40>)
 8007ba2:	4c0c      	ldr	r4, [pc, #48]	@ (8007bd4 <__libc_init_array+0x44>)
 8007ba4:	f002 f8ee 	bl	8009d84 <_init>
 8007ba8:	1b64      	subs	r4, r4, r5
 8007baa:	10a4      	asrs	r4, r4, #2
 8007bac:	2600      	movs	r6, #0
 8007bae:	42a6      	cmp	r6, r4
 8007bb0:	d105      	bne.n	8007bbe <__libc_init_array+0x2e>
 8007bb2:	bd70      	pop	{r4, r5, r6, pc}
 8007bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bb8:	4798      	blx	r3
 8007bba:	3601      	adds	r6, #1
 8007bbc:	e7ee      	b.n	8007b9c <__libc_init_array+0xc>
 8007bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bc2:	4798      	blx	r3
 8007bc4:	3601      	adds	r6, #1
 8007bc6:	e7f2      	b.n	8007bae <__libc_init_array+0x1e>
 8007bc8:	0800a218 	.word	0x0800a218
 8007bcc:	0800a218 	.word	0x0800a218
 8007bd0:	0800a218 	.word	0x0800a218
 8007bd4:	0800a21c 	.word	0x0800a21c

08007bd8 <__retarget_lock_init_recursive>:
 8007bd8:	4770      	bx	lr

08007bda <__retarget_lock_acquire_recursive>:
 8007bda:	4770      	bx	lr

08007bdc <__retarget_lock_release_recursive>:
 8007bdc:	4770      	bx	lr

08007bde <quorem>:
 8007bde:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007be2:	6903      	ldr	r3, [r0, #16]
 8007be4:	690c      	ldr	r4, [r1, #16]
 8007be6:	42a3      	cmp	r3, r4
 8007be8:	4607      	mov	r7, r0
 8007bea:	db7e      	blt.n	8007cea <quorem+0x10c>
 8007bec:	3c01      	subs	r4, #1
 8007bee:	f101 0814 	add.w	r8, r1, #20
 8007bf2:	00a3      	lsls	r3, r4, #2
 8007bf4:	f100 0514 	add.w	r5, r0, #20
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bfe:	9301      	str	r3, [sp, #4]
 8007c00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007c04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007c10:	fbb2 f6f3 	udiv	r6, r2, r3
 8007c14:	d32e      	bcc.n	8007c74 <quorem+0x96>
 8007c16:	f04f 0a00 	mov.w	sl, #0
 8007c1a:	46c4      	mov	ip, r8
 8007c1c:	46ae      	mov	lr, r5
 8007c1e:	46d3      	mov	fp, sl
 8007c20:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007c24:	b298      	uxth	r0, r3
 8007c26:	fb06 a000 	mla	r0, r6, r0, sl
 8007c2a:	0c02      	lsrs	r2, r0, #16
 8007c2c:	0c1b      	lsrs	r3, r3, #16
 8007c2e:	fb06 2303 	mla	r3, r6, r3, r2
 8007c32:	f8de 2000 	ldr.w	r2, [lr]
 8007c36:	b280      	uxth	r0, r0
 8007c38:	b292      	uxth	r2, r2
 8007c3a:	1a12      	subs	r2, r2, r0
 8007c3c:	445a      	add	r2, fp
 8007c3e:	f8de 0000 	ldr.w	r0, [lr]
 8007c42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007c4c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007c50:	b292      	uxth	r2, r2
 8007c52:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007c56:	45e1      	cmp	r9, ip
 8007c58:	f84e 2b04 	str.w	r2, [lr], #4
 8007c5c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007c60:	d2de      	bcs.n	8007c20 <quorem+0x42>
 8007c62:	9b00      	ldr	r3, [sp, #0]
 8007c64:	58eb      	ldr	r3, [r5, r3]
 8007c66:	b92b      	cbnz	r3, 8007c74 <quorem+0x96>
 8007c68:	9b01      	ldr	r3, [sp, #4]
 8007c6a:	3b04      	subs	r3, #4
 8007c6c:	429d      	cmp	r5, r3
 8007c6e:	461a      	mov	r2, r3
 8007c70:	d32f      	bcc.n	8007cd2 <quorem+0xf4>
 8007c72:	613c      	str	r4, [r7, #16]
 8007c74:	4638      	mov	r0, r7
 8007c76:	f001 fb33 	bl	80092e0 <__mcmp>
 8007c7a:	2800      	cmp	r0, #0
 8007c7c:	db25      	blt.n	8007cca <quorem+0xec>
 8007c7e:	4629      	mov	r1, r5
 8007c80:	2000      	movs	r0, #0
 8007c82:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c86:	f8d1 c000 	ldr.w	ip, [r1]
 8007c8a:	fa1f fe82 	uxth.w	lr, r2
 8007c8e:	fa1f f38c 	uxth.w	r3, ip
 8007c92:	eba3 030e 	sub.w	r3, r3, lr
 8007c96:	4403      	add	r3, r0
 8007c98:	0c12      	lsrs	r2, r2, #16
 8007c9a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007c9e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ca8:	45c1      	cmp	r9, r8
 8007caa:	f841 3b04 	str.w	r3, [r1], #4
 8007cae:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007cb2:	d2e6      	bcs.n	8007c82 <quorem+0xa4>
 8007cb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007cb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007cbc:	b922      	cbnz	r2, 8007cc8 <quorem+0xea>
 8007cbe:	3b04      	subs	r3, #4
 8007cc0:	429d      	cmp	r5, r3
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	d30b      	bcc.n	8007cde <quorem+0x100>
 8007cc6:	613c      	str	r4, [r7, #16]
 8007cc8:	3601      	adds	r6, #1
 8007cca:	4630      	mov	r0, r6
 8007ccc:	b003      	add	sp, #12
 8007cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd2:	6812      	ldr	r2, [r2, #0]
 8007cd4:	3b04      	subs	r3, #4
 8007cd6:	2a00      	cmp	r2, #0
 8007cd8:	d1cb      	bne.n	8007c72 <quorem+0x94>
 8007cda:	3c01      	subs	r4, #1
 8007cdc:	e7c6      	b.n	8007c6c <quorem+0x8e>
 8007cde:	6812      	ldr	r2, [r2, #0]
 8007ce0:	3b04      	subs	r3, #4
 8007ce2:	2a00      	cmp	r2, #0
 8007ce4:	d1ef      	bne.n	8007cc6 <quorem+0xe8>
 8007ce6:	3c01      	subs	r4, #1
 8007ce8:	e7ea      	b.n	8007cc0 <quorem+0xe2>
 8007cea:	2000      	movs	r0, #0
 8007cec:	e7ee      	b.n	8007ccc <quorem+0xee>
	...

08007cf0 <_dtoa_r>:
 8007cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf4:	69c7      	ldr	r7, [r0, #28]
 8007cf6:	b099      	sub	sp, #100	@ 0x64
 8007cf8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007cfc:	ec55 4b10 	vmov	r4, r5, d0
 8007d00:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007d02:	9109      	str	r1, [sp, #36]	@ 0x24
 8007d04:	4683      	mov	fp, r0
 8007d06:	920e      	str	r2, [sp, #56]	@ 0x38
 8007d08:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d0a:	b97f      	cbnz	r7, 8007d2c <_dtoa_r+0x3c>
 8007d0c:	2010      	movs	r0, #16
 8007d0e:	f000 ff0b 	bl	8008b28 <malloc>
 8007d12:	4602      	mov	r2, r0
 8007d14:	f8cb 001c 	str.w	r0, [fp, #28]
 8007d18:	b920      	cbnz	r0, 8007d24 <_dtoa_r+0x34>
 8007d1a:	4ba7      	ldr	r3, [pc, #668]	@ (8007fb8 <_dtoa_r+0x2c8>)
 8007d1c:	21ef      	movs	r1, #239	@ 0xef
 8007d1e:	48a7      	ldr	r0, [pc, #668]	@ (8007fbc <_dtoa_r+0x2cc>)
 8007d20:	f001 fcd6 	bl	80096d0 <__assert_func>
 8007d24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007d28:	6007      	str	r7, [r0, #0]
 8007d2a:	60c7      	str	r7, [r0, #12]
 8007d2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d30:	6819      	ldr	r1, [r3, #0]
 8007d32:	b159      	cbz	r1, 8007d4c <_dtoa_r+0x5c>
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	604a      	str	r2, [r1, #4]
 8007d38:	2301      	movs	r3, #1
 8007d3a:	4093      	lsls	r3, r2
 8007d3c:	608b      	str	r3, [r1, #8]
 8007d3e:	4658      	mov	r0, fp
 8007d40:	f001 f894 	bl	8008e6c <_Bfree>
 8007d44:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	601a      	str	r2, [r3, #0]
 8007d4c:	1e2b      	subs	r3, r5, #0
 8007d4e:	bfb9      	ittee	lt
 8007d50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007d54:	9303      	strlt	r3, [sp, #12]
 8007d56:	2300      	movge	r3, #0
 8007d58:	6033      	strge	r3, [r6, #0]
 8007d5a:	9f03      	ldr	r7, [sp, #12]
 8007d5c:	4b98      	ldr	r3, [pc, #608]	@ (8007fc0 <_dtoa_r+0x2d0>)
 8007d5e:	bfbc      	itt	lt
 8007d60:	2201      	movlt	r2, #1
 8007d62:	6032      	strlt	r2, [r6, #0]
 8007d64:	43bb      	bics	r3, r7
 8007d66:	d112      	bne.n	8007d8e <_dtoa_r+0x9e>
 8007d68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007d6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007d6e:	6013      	str	r3, [r2, #0]
 8007d70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007d74:	4323      	orrs	r3, r4
 8007d76:	f000 854d 	beq.w	8008814 <_dtoa_r+0xb24>
 8007d7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007fd4 <_dtoa_r+0x2e4>
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 854f 	beq.w	8008824 <_dtoa_r+0xb34>
 8007d86:	f10a 0303 	add.w	r3, sl, #3
 8007d8a:	f000 bd49 	b.w	8008820 <_dtoa_r+0xb30>
 8007d8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007d92:	2200      	movs	r2, #0
 8007d94:	ec51 0b17 	vmov	r0, r1, d7
 8007d98:	2300      	movs	r3, #0
 8007d9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007d9e:	f7f8 fe93 	bl	8000ac8 <__aeabi_dcmpeq>
 8007da2:	4680      	mov	r8, r0
 8007da4:	b158      	cbz	r0, 8007dbe <_dtoa_r+0xce>
 8007da6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007da8:	2301      	movs	r3, #1
 8007daa:	6013      	str	r3, [r2, #0]
 8007dac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007dae:	b113      	cbz	r3, 8007db6 <_dtoa_r+0xc6>
 8007db0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007db2:	4b84      	ldr	r3, [pc, #528]	@ (8007fc4 <_dtoa_r+0x2d4>)
 8007db4:	6013      	str	r3, [r2, #0]
 8007db6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007fd8 <_dtoa_r+0x2e8>
 8007dba:	f000 bd33 	b.w	8008824 <_dtoa_r+0xb34>
 8007dbe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007dc2:	aa16      	add	r2, sp, #88	@ 0x58
 8007dc4:	a917      	add	r1, sp, #92	@ 0x5c
 8007dc6:	4658      	mov	r0, fp
 8007dc8:	f001 fb3a 	bl	8009440 <__d2b>
 8007dcc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007dd0:	4681      	mov	r9, r0
 8007dd2:	2e00      	cmp	r6, #0
 8007dd4:	d077      	beq.n	8007ec6 <_dtoa_r+0x1d6>
 8007dd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007dd8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007de0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007de4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007de8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007dec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007df0:	4619      	mov	r1, r3
 8007df2:	2200      	movs	r2, #0
 8007df4:	4b74      	ldr	r3, [pc, #464]	@ (8007fc8 <_dtoa_r+0x2d8>)
 8007df6:	f7f8 fa47 	bl	8000288 <__aeabi_dsub>
 8007dfa:	a369      	add	r3, pc, #420	@ (adr r3, 8007fa0 <_dtoa_r+0x2b0>)
 8007dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e00:	f7f8 fbfa 	bl	80005f8 <__aeabi_dmul>
 8007e04:	a368      	add	r3, pc, #416	@ (adr r3, 8007fa8 <_dtoa_r+0x2b8>)
 8007e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0a:	f7f8 fa3f 	bl	800028c <__adddf3>
 8007e0e:	4604      	mov	r4, r0
 8007e10:	4630      	mov	r0, r6
 8007e12:	460d      	mov	r5, r1
 8007e14:	f7f8 fb86 	bl	8000524 <__aeabi_i2d>
 8007e18:	a365      	add	r3, pc, #404	@ (adr r3, 8007fb0 <_dtoa_r+0x2c0>)
 8007e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1e:	f7f8 fbeb 	bl	80005f8 <__aeabi_dmul>
 8007e22:	4602      	mov	r2, r0
 8007e24:	460b      	mov	r3, r1
 8007e26:	4620      	mov	r0, r4
 8007e28:	4629      	mov	r1, r5
 8007e2a:	f7f8 fa2f 	bl	800028c <__adddf3>
 8007e2e:	4604      	mov	r4, r0
 8007e30:	460d      	mov	r5, r1
 8007e32:	f7f8 fe91 	bl	8000b58 <__aeabi_d2iz>
 8007e36:	2200      	movs	r2, #0
 8007e38:	4607      	mov	r7, r0
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	4629      	mov	r1, r5
 8007e40:	f7f8 fe4c 	bl	8000adc <__aeabi_dcmplt>
 8007e44:	b140      	cbz	r0, 8007e58 <_dtoa_r+0x168>
 8007e46:	4638      	mov	r0, r7
 8007e48:	f7f8 fb6c 	bl	8000524 <__aeabi_i2d>
 8007e4c:	4622      	mov	r2, r4
 8007e4e:	462b      	mov	r3, r5
 8007e50:	f7f8 fe3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e54:	b900      	cbnz	r0, 8007e58 <_dtoa_r+0x168>
 8007e56:	3f01      	subs	r7, #1
 8007e58:	2f16      	cmp	r7, #22
 8007e5a:	d851      	bhi.n	8007f00 <_dtoa_r+0x210>
 8007e5c:	4b5b      	ldr	r3, [pc, #364]	@ (8007fcc <_dtoa_r+0x2dc>)
 8007e5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e6a:	f7f8 fe37 	bl	8000adc <__aeabi_dcmplt>
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d048      	beq.n	8007f04 <_dtoa_r+0x214>
 8007e72:	3f01      	subs	r7, #1
 8007e74:	2300      	movs	r3, #0
 8007e76:	9312      	str	r3, [sp, #72]	@ 0x48
 8007e78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007e7a:	1b9b      	subs	r3, r3, r6
 8007e7c:	1e5a      	subs	r2, r3, #1
 8007e7e:	bf44      	itt	mi
 8007e80:	f1c3 0801 	rsbmi	r8, r3, #1
 8007e84:	2300      	movmi	r3, #0
 8007e86:	9208      	str	r2, [sp, #32]
 8007e88:	bf54      	ite	pl
 8007e8a:	f04f 0800 	movpl.w	r8, #0
 8007e8e:	9308      	strmi	r3, [sp, #32]
 8007e90:	2f00      	cmp	r7, #0
 8007e92:	db39      	blt.n	8007f08 <_dtoa_r+0x218>
 8007e94:	9b08      	ldr	r3, [sp, #32]
 8007e96:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007e98:	443b      	add	r3, r7
 8007e9a:	9308      	str	r3, [sp, #32]
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ea2:	2b09      	cmp	r3, #9
 8007ea4:	d864      	bhi.n	8007f70 <_dtoa_r+0x280>
 8007ea6:	2b05      	cmp	r3, #5
 8007ea8:	bfc4      	itt	gt
 8007eaa:	3b04      	subgt	r3, #4
 8007eac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007eae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eb0:	f1a3 0302 	sub.w	r3, r3, #2
 8007eb4:	bfcc      	ite	gt
 8007eb6:	2400      	movgt	r4, #0
 8007eb8:	2401      	movle	r4, #1
 8007eba:	2b03      	cmp	r3, #3
 8007ebc:	d863      	bhi.n	8007f86 <_dtoa_r+0x296>
 8007ebe:	e8df f003 	tbb	[pc, r3]
 8007ec2:	372a      	.short	0x372a
 8007ec4:	5535      	.short	0x5535
 8007ec6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007eca:	441e      	add	r6, r3
 8007ecc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007ed0:	2b20      	cmp	r3, #32
 8007ed2:	bfc1      	itttt	gt
 8007ed4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007ed8:	409f      	lslgt	r7, r3
 8007eda:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007ede:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007ee2:	bfd6      	itet	le
 8007ee4:	f1c3 0320 	rsble	r3, r3, #32
 8007ee8:	ea47 0003 	orrgt.w	r0, r7, r3
 8007eec:	fa04 f003 	lslle.w	r0, r4, r3
 8007ef0:	f7f8 fb08 	bl	8000504 <__aeabi_ui2d>
 8007ef4:	2201      	movs	r2, #1
 8007ef6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007efa:	3e01      	subs	r6, #1
 8007efc:	9214      	str	r2, [sp, #80]	@ 0x50
 8007efe:	e777      	b.n	8007df0 <_dtoa_r+0x100>
 8007f00:	2301      	movs	r3, #1
 8007f02:	e7b8      	b.n	8007e76 <_dtoa_r+0x186>
 8007f04:	9012      	str	r0, [sp, #72]	@ 0x48
 8007f06:	e7b7      	b.n	8007e78 <_dtoa_r+0x188>
 8007f08:	427b      	negs	r3, r7
 8007f0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	eba8 0807 	sub.w	r8, r8, r7
 8007f12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007f14:	e7c4      	b.n	8007ea0 <_dtoa_r+0x1b0>
 8007f16:	2300      	movs	r3, #0
 8007f18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	dc35      	bgt.n	8007f8c <_dtoa_r+0x29c>
 8007f20:	2301      	movs	r3, #1
 8007f22:	9300      	str	r3, [sp, #0]
 8007f24:	9307      	str	r3, [sp, #28]
 8007f26:	461a      	mov	r2, r3
 8007f28:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f2a:	e00b      	b.n	8007f44 <_dtoa_r+0x254>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	e7f3      	b.n	8007f18 <_dtoa_r+0x228>
 8007f30:	2300      	movs	r3, #0
 8007f32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f36:	18fb      	adds	r3, r7, r3
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	9307      	str	r3, [sp, #28]
 8007f40:	bfb8      	it	lt
 8007f42:	2301      	movlt	r3, #1
 8007f44:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007f48:	2100      	movs	r1, #0
 8007f4a:	2204      	movs	r2, #4
 8007f4c:	f102 0514 	add.w	r5, r2, #20
 8007f50:	429d      	cmp	r5, r3
 8007f52:	d91f      	bls.n	8007f94 <_dtoa_r+0x2a4>
 8007f54:	6041      	str	r1, [r0, #4]
 8007f56:	4658      	mov	r0, fp
 8007f58:	f000 ff48 	bl	8008dec <_Balloc>
 8007f5c:	4682      	mov	sl, r0
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	d13c      	bne.n	8007fdc <_dtoa_r+0x2ec>
 8007f62:	4b1b      	ldr	r3, [pc, #108]	@ (8007fd0 <_dtoa_r+0x2e0>)
 8007f64:	4602      	mov	r2, r0
 8007f66:	f240 11af 	movw	r1, #431	@ 0x1af
 8007f6a:	e6d8      	b.n	8007d1e <_dtoa_r+0x2e>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e7e0      	b.n	8007f32 <_dtoa_r+0x242>
 8007f70:	2401      	movs	r4, #1
 8007f72:	2300      	movs	r3, #0
 8007f74:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f76:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007f78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f7c:	9300      	str	r3, [sp, #0]
 8007f7e:	9307      	str	r3, [sp, #28]
 8007f80:	2200      	movs	r2, #0
 8007f82:	2312      	movs	r3, #18
 8007f84:	e7d0      	b.n	8007f28 <_dtoa_r+0x238>
 8007f86:	2301      	movs	r3, #1
 8007f88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f8a:	e7f5      	b.n	8007f78 <_dtoa_r+0x288>
 8007f8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	9307      	str	r3, [sp, #28]
 8007f92:	e7d7      	b.n	8007f44 <_dtoa_r+0x254>
 8007f94:	3101      	adds	r1, #1
 8007f96:	0052      	lsls	r2, r2, #1
 8007f98:	e7d8      	b.n	8007f4c <_dtoa_r+0x25c>
 8007f9a:	bf00      	nop
 8007f9c:	f3af 8000 	nop.w
 8007fa0:	636f4361 	.word	0x636f4361
 8007fa4:	3fd287a7 	.word	0x3fd287a7
 8007fa8:	8b60c8b3 	.word	0x8b60c8b3
 8007fac:	3fc68a28 	.word	0x3fc68a28
 8007fb0:	509f79fb 	.word	0x509f79fb
 8007fb4:	3fd34413 	.word	0x3fd34413
 8007fb8:	08009edd 	.word	0x08009edd
 8007fbc:	08009ef4 	.word	0x08009ef4
 8007fc0:	7ff00000 	.word	0x7ff00000
 8007fc4:	08009ead 	.word	0x08009ead
 8007fc8:	3ff80000 	.word	0x3ff80000
 8007fcc:	0800a000 	.word	0x0800a000
 8007fd0:	08009f4c 	.word	0x08009f4c
 8007fd4:	08009ed9 	.word	0x08009ed9
 8007fd8:	08009eac 	.word	0x08009eac
 8007fdc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007fe0:	6018      	str	r0, [r3, #0]
 8007fe2:	9b07      	ldr	r3, [sp, #28]
 8007fe4:	2b0e      	cmp	r3, #14
 8007fe6:	f200 80a4 	bhi.w	8008132 <_dtoa_r+0x442>
 8007fea:	2c00      	cmp	r4, #0
 8007fec:	f000 80a1 	beq.w	8008132 <_dtoa_r+0x442>
 8007ff0:	2f00      	cmp	r7, #0
 8007ff2:	dd33      	ble.n	800805c <_dtoa_r+0x36c>
 8007ff4:	4bad      	ldr	r3, [pc, #692]	@ (80082ac <_dtoa_r+0x5bc>)
 8007ff6:	f007 020f 	and.w	r2, r7, #15
 8007ffa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ffe:	ed93 7b00 	vldr	d7, [r3]
 8008002:	05f8      	lsls	r0, r7, #23
 8008004:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008008:	ea4f 1427 	mov.w	r4, r7, asr #4
 800800c:	d516      	bpl.n	800803c <_dtoa_r+0x34c>
 800800e:	4ba8      	ldr	r3, [pc, #672]	@ (80082b0 <_dtoa_r+0x5c0>)
 8008010:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008014:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008018:	f7f8 fc18 	bl	800084c <__aeabi_ddiv>
 800801c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008020:	f004 040f 	and.w	r4, r4, #15
 8008024:	2603      	movs	r6, #3
 8008026:	4da2      	ldr	r5, [pc, #648]	@ (80082b0 <_dtoa_r+0x5c0>)
 8008028:	b954      	cbnz	r4, 8008040 <_dtoa_r+0x350>
 800802a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800802e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008032:	f7f8 fc0b 	bl	800084c <__aeabi_ddiv>
 8008036:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800803a:	e028      	b.n	800808e <_dtoa_r+0x39e>
 800803c:	2602      	movs	r6, #2
 800803e:	e7f2      	b.n	8008026 <_dtoa_r+0x336>
 8008040:	07e1      	lsls	r1, r4, #31
 8008042:	d508      	bpl.n	8008056 <_dtoa_r+0x366>
 8008044:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008048:	e9d5 2300 	ldrd	r2, r3, [r5]
 800804c:	f7f8 fad4 	bl	80005f8 <__aeabi_dmul>
 8008050:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008054:	3601      	adds	r6, #1
 8008056:	1064      	asrs	r4, r4, #1
 8008058:	3508      	adds	r5, #8
 800805a:	e7e5      	b.n	8008028 <_dtoa_r+0x338>
 800805c:	f000 80d2 	beq.w	8008204 <_dtoa_r+0x514>
 8008060:	427c      	negs	r4, r7
 8008062:	4b92      	ldr	r3, [pc, #584]	@ (80082ac <_dtoa_r+0x5bc>)
 8008064:	4d92      	ldr	r5, [pc, #584]	@ (80082b0 <_dtoa_r+0x5c0>)
 8008066:	f004 020f 	and.w	r2, r4, #15
 800806a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800806e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008072:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008076:	f7f8 fabf 	bl	80005f8 <__aeabi_dmul>
 800807a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800807e:	1124      	asrs	r4, r4, #4
 8008080:	2300      	movs	r3, #0
 8008082:	2602      	movs	r6, #2
 8008084:	2c00      	cmp	r4, #0
 8008086:	f040 80b2 	bne.w	80081ee <_dtoa_r+0x4fe>
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1d3      	bne.n	8008036 <_dtoa_r+0x346>
 800808e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008090:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008094:	2b00      	cmp	r3, #0
 8008096:	f000 80b7 	beq.w	8008208 <_dtoa_r+0x518>
 800809a:	4b86      	ldr	r3, [pc, #536]	@ (80082b4 <_dtoa_r+0x5c4>)
 800809c:	2200      	movs	r2, #0
 800809e:	4620      	mov	r0, r4
 80080a0:	4629      	mov	r1, r5
 80080a2:	f7f8 fd1b 	bl	8000adc <__aeabi_dcmplt>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	f000 80ae 	beq.w	8008208 <_dtoa_r+0x518>
 80080ac:	9b07      	ldr	r3, [sp, #28]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	f000 80aa 	beq.w	8008208 <_dtoa_r+0x518>
 80080b4:	9b00      	ldr	r3, [sp, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	dd37      	ble.n	800812a <_dtoa_r+0x43a>
 80080ba:	1e7b      	subs	r3, r7, #1
 80080bc:	9304      	str	r3, [sp, #16]
 80080be:	4620      	mov	r0, r4
 80080c0:	4b7d      	ldr	r3, [pc, #500]	@ (80082b8 <_dtoa_r+0x5c8>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	4629      	mov	r1, r5
 80080c6:	f7f8 fa97 	bl	80005f8 <__aeabi_dmul>
 80080ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80080ce:	9c00      	ldr	r4, [sp, #0]
 80080d0:	3601      	adds	r6, #1
 80080d2:	4630      	mov	r0, r6
 80080d4:	f7f8 fa26 	bl	8000524 <__aeabi_i2d>
 80080d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80080dc:	f7f8 fa8c 	bl	80005f8 <__aeabi_dmul>
 80080e0:	4b76      	ldr	r3, [pc, #472]	@ (80082bc <_dtoa_r+0x5cc>)
 80080e2:	2200      	movs	r2, #0
 80080e4:	f7f8 f8d2 	bl	800028c <__adddf3>
 80080e8:	4605      	mov	r5, r0
 80080ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80080ee:	2c00      	cmp	r4, #0
 80080f0:	f040 808d 	bne.w	800820e <_dtoa_r+0x51e>
 80080f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080f8:	4b71      	ldr	r3, [pc, #452]	@ (80082c0 <_dtoa_r+0x5d0>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	f7f8 f8c4 	bl	8000288 <__aeabi_dsub>
 8008100:	4602      	mov	r2, r0
 8008102:	460b      	mov	r3, r1
 8008104:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008108:	462a      	mov	r2, r5
 800810a:	4633      	mov	r3, r6
 800810c:	f7f8 fd04 	bl	8000b18 <__aeabi_dcmpgt>
 8008110:	2800      	cmp	r0, #0
 8008112:	f040 828b 	bne.w	800862c <_dtoa_r+0x93c>
 8008116:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800811a:	462a      	mov	r2, r5
 800811c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008120:	f7f8 fcdc 	bl	8000adc <__aeabi_dcmplt>
 8008124:	2800      	cmp	r0, #0
 8008126:	f040 8128 	bne.w	800837a <_dtoa_r+0x68a>
 800812a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800812e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008132:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008134:	2b00      	cmp	r3, #0
 8008136:	f2c0 815a 	blt.w	80083ee <_dtoa_r+0x6fe>
 800813a:	2f0e      	cmp	r7, #14
 800813c:	f300 8157 	bgt.w	80083ee <_dtoa_r+0x6fe>
 8008140:	4b5a      	ldr	r3, [pc, #360]	@ (80082ac <_dtoa_r+0x5bc>)
 8008142:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008146:	ed93 7b00 	vldr	d7, [r3]
 800814a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800814c:	2b00      	cmp	r3, #0
 800814e:	ed8d 7b00 	vstr	d7, [sp]
 8008152:	da03      	bge.n	800815c <_dtoa_r+0x46c>
 8008154:	9b07      	ldr	r3, [sp, #28]
 8008156:	2b00      	cmp	r3, #0
 8008158:	f340 8101 	ble.w	800835e <_dtoa_r+0x66e>
 800815c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008160:	4656      	mov	r6, sl
 8008162:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008166:	4620      	mov	r0, r4
 8008168:	4629      	mov	r1, r5
 800816a:	f7f8 fb6f 	bl	800084c <__aeabi_ddiv>
 800816e:	f7f8 fcf3 	bl	8000b58 <__aeabi_d2iz>
 8008172:	4680      	mov	r8, r0
 8008174:	f7f8 f9d6 	bl	8000524 <__aeabi_i2d>
 8008178:	e9dd 2300 	ldrd	r2, r3, [sp]
 800817c:	f7f8 fa3c 	bl	80005f8 <__aeabi_dmul>
 8008180:	4602      	mov	r2, r0
 8008182:	460b      	mov	r3, r1
 8008184:	4620      	mov	r0, r4
 8008186:	4629      	mov	r1, r5
 8008188:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800818c:	f7f8 f87c 	bl	8000288 <__aeabi_dsub>
 8008190:	f806 4b01 	strb.w	r4, [r6], #1
 8008194:	9d07      	ldr	r5, [sp, #28]
 8008196:	eba6 040a 	sub.w	r4, r6, sl
 800819a:	42a5      	cmp	r5, r4
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	f040 8117 	bne.w	80083d2 <_dtoa_r+0x6e2>
 80081a4:	f7f8 f872 	bl	800028c <__adddf3>
 80081a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081ac:	4604      	mov	r4, r0
 80081ae:	460d      	mov	r5, r1
 80081b0:	f7f8 fcb2 	bl	8000b18 <__aeabi_dcmpgt>
 80081b4:	2800      	cmp	r0, #0
 80081b6:	f040 80f9 	bne.w	80083ac <_dtoa_r+0x6bc>
 80081ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80081be:	4620      	mov	r0, r4
 80081c0:	4629      	mov	r1, r5
 80081c2:	f7f8 fc81 	bl	8000ac8 <__aeabi_dcmpeq>
 80081c6:	b118      	cbz	r0, 80081d0 <_dtoa_r+0x4e0>
 80081c8:	f018 0f01 	tst.w	r8, #1
 80081cc:	f040 80ee 	bne.w	80083ac <_dtoa_r+0x6bc>
 80081d0:	4649      	mov	r1, r9
 80081d2:	4658      	mov	r0, fp
 80081d4:	f000 fe4a 	bl	8008e6c <_Bfree>
 80081d8:	2300      	movs	r3, #0
 80081da:	7033      	strb	r3, [r6, #0]
 80081dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80081de:	3701      	adds	r7, #1
 80081e0:	601f      	str	r7, [r3, #0]
 80081e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	f000 831d 	beq.w	8008824 <_dtoa_r+0xb34>
 80081ea:	601e      	str	r6, [r3, #0]
 80081ec:	e31a      	b.n	8008824 <_dtoa_r+0xb34>
 80081ee:	07e2      	lsls	r2, r4, #31
 80081f0:	d505      	bpl.n	80081fe <_dtoa_r+0x50e>
 80081f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80081f6:	f7f8 f9ff 	bl	80005f8 <__aeabi_dmul>
 80081fa:	3601      	adds	r6, #1
 80081fc:	2301      	movs	r3, #1
 80081fe:	1064      	asrs	r4, r4, #1
 8008200:	3508      	adds	r5, #8
 8008202:	e73f      	b.n	8008084 <_dtoa_r+0x394>
 8008204:	2602      	movs	r6, #2
 8008206:	e742      	b.n	800808e <_dtoa_r+0x39e>
 8008208:	9c07      	ldr	r4, [sp, #28]
 800820a:	9704      	str	r7, [sp, #16]
 800820c:	e761      	b.n	80080d2 <_dtoa_r+0x3e2>
 800820e:	4b27      	ldr	r3, [pc, #156]	@ (80082ac <_dtoa_r+0x5bc>)
 8008210:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008212:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008216:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800821a:	4454      	add	r4, sl
 800821c:	2900      	cmp	r1, #0
 800821e:	d053      	beq.n	80082c8 <_dtoa_r+0x5d8>
 8008220:	4928      	ldr	r1, [pc, #160]	@ (80082c4 <_dtoa_r+0x5d4>)
 8008222:	2000      	movs	r0, #0
 8008224:	f7f8 fb12 	bl	800084c <__aeabi_ddiv>
 8008228:	4633      	mov	r3, r6
 800822a:	462a      	mov	r2, r5
 800822c:	f7f8 f82c 	bl	8000288 <__aeabi_dsub>
 8008230:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008234:	4656      	mov	r6, sl
 8008236:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800823a:	f7f8 fc8d 	bl	8000b58 <__aeabi_d2iz>
 800823e:	4605      	mov	r5, r0
 8008240:	f7f8 f970 	bl	8000524 <__aeabi_i2d>
 8008244:	4602      	mov	r2, r0
 8008246:	460b      	mov	r3, r1
 8008248:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800824c:	f7f8 f81c 	bl	8000288 <__aeabi_dsub>
 8008250:	3530      	adds	r5, #48	@ 0x30
 8008252:	4602      	mov	r2, r0
 8008254:	460b      	mov	r3, r1
 8008256:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800825a:	f806 5b01 	strb.w	r5, [r6], #1
 800825e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008262:	f7f8 fc3b 	bl	8000adc <__aeabi_dcmplt>
 8008266:	2800      	cmp	r0, #0
 8008268:	d171      	bne.n	800834e <_dtoa_r+0x65e>
 800826a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800826e:	4911      	ldr	r1, [pc, #68]	@ (80082b4 <_dtoa_r+0x5c4>)
 8008270:	2000      	movs	r0, #0
 8008272:	f7f8 f809 	bl	8000288 <__aeabi_dsub>
 8008276:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800827a:	f7f8 fc2f 	bl	8000adc <__aeabi_dcmplt>
 800827e:	2800      	cmp	r0, #0
 8008280:	f040 8095 	bne.w	80083ae <_dtoa_r+0x6be>
 8008284:	42a6      	cmp	r6, r4
 8008286:	f43f af50 	beq.w	800812a <_dtoa_r+0x43a>
 800828a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800828e:	4b0a      	ldr	r3, [pc, #40]	@ (80082b8 <_dtoa_r+0x5c8>)
 8008290:	2200      	movs	r2, #0
 8008292:	f7f8 f9b1 	bl	80005f8 <__aeabi_dmul>
 8008296:	4b08      	ldr	r3, [pc, #32]	@ (80082b8 <_dtoa_r+0x5c8>)
 8008298:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800829c:	2200      	movs	r2, #0
 800829e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082a2:	f7f8 f9a9 	bl	80005f8 <__aeabi_dmul>
 80082a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082aa:	e7c4      	b.n	8008236 <_dtoa_r+0x546>
 80082ac:	0800a000 	.word	0x0800a000
 80082b0:	08009fd8 	.word	0x08009fd8
 80082b4:	3ff00000 	.word	0x3ff00000
 80082b8:	40240000 	.word	0x40240000
 80082bc:	401c0000 	.word	0x401c0000
 80082c0:	40140000 	.word	0x40140000
 80082c4:	3fe00000 	.word	0x3fe00000
 80082c8:	4631      	mov	r1, r6
 80082ca:	4628      	mov	r0, r5
 80082cc:	f7f8 f994 	bl	80005f8 <__aeabi_dmul>
 80082d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80082d4:	9415      	str	r4, [sp, #84]	@ 0x54
 80082d6:	4656      	mov	r6, sl
 80082d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082dc:	f7f8 fc3c 	bl	8000b58 <__aeabi_d2iz>
 80082e0:	4605      	mov	r5, r0
 80082e2:	f7f8 f91f 	bl	8000524 <__aeabi_i2d>
 80082e6:	4602      	mov	r2, r0
 80082e8:	460b      	mov	r3, r1
 80082ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082ee:	f7f7 ffcb 	bl	8000288 <__aeabi_dsub>
 80082f2:	3530      	adds	r5, #48	@ 0x30
 80082f4:	f806 5b01 	strb.w	r5, [r6], #1
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	42a6      	cmp	r6, r4
 80082fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008302:	f04f 0200 	mov.w	r2, #0
 8008306:	d124      	bne.n	8008352 <_dtoa_r+0x662>
 8008308:	4bac      	ldr	r3, [pc, #688]	@ (80085bc <_dtoa_r+0x8cc>)
 800830a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800830e:	f7f7 ffbd 	bl	800028c <__adddf3>
 8008312:	4602      	mov	r2, r0
 8008314:	460b      	mov	r3, r1
 8008316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800831a:	f7f8 fbfd 	bl	8000b18 <__aeabi_dcmpgt>
 800831e:	2800      	cmp	r0, #0
 8008320:	d145      	bne.n	80083ae <_dtoa_r+0x6be>
 8008322:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008326:	49a5      	ldr	r1, [pc, #660]	@ (80085bc <_dtoa_r+0x8cc>)
 8008328:	2000      	movs	r0, #0
 800832a:	f7f7 ffad 	bl	8000288 <__aeabi_dsub>
 800832e:	4602      	mov	r2, r0
 8008330:	460b      	mov	r3, r1
 8008332:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008336:	f7f8 fbd1 	bl	8000adc <__aeabi_dcmplt>
 800833a:	2800      	cmp	r0, #0
 800833c:	f43f aef5 	beq.w	800812a <_dtoa_r+0x43a>
 8008340:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008342:	1e73      	subs	r3, r6, #1
 8008344:	9315      	str	r3, [sp, #84]	@ 0x54
 8008346:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800834a:	2b30      	cmp	r3, #48	@ 0x30
 800834c:	d0f8      	beq.n	8008340 <_dtoa_r+0x650>
 800834e:	9f04      	ldr	r7, [sp, #16]
 8008350:	e73e      	b.n	80081d0 <_dtoa_r+0x4e0>
 8008352:	4b9b      	ldr	r3, [pc, #620]	@ (80085c0 <_dtoa_r+0x8d0>)
 8008354:	f7f8 f950 	bl	80005f8 <__aeabi_dmul>
 8008358:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800835c:	e7bc      	b.n	80082d8 <_dtoa_r+0x5e8>
 800835e:	d10c      	bne.n	800837a <_dtoa_r+0x68a>
 8008360:	4b98      	ldr	r3, [pc, #608]	@ (80085c4 <_dtoa_r+0x8d4>)
 8008362:	2200      	movs	r2, #0
 8008364:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008368:	f7f8 f946 	bl	80005f8 <__aeabi_dmul>
 800836c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008370:	f7f8 fbc8 	bl	8000b04 <__aeabi_dcmpge>
 8008374:	2800      	cmp	r0, #0
 8008376:	f000 8157 	beq.w	8008628 <_dtoa_r+0x938>
 800837a:	2400      	movs	r4, #0
 800837c:	4625      	mov	r5, r4
 800837e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008380:	43db      	mvns	r3, r3
 8008382:	9304      	str	r3, [sp, #16]
 8008384:	4656      	mov	r6, sl
 8008386:	2700      	movs	r7, #0
 8008388:	4621      	mov	r1, r4
 800838a:	4658      	mov	r0, fp
 800838c:	f000 fd6e 	bl	8008e6c <_Bfree>
 8008390:	2d00      	cmp	r5, #0
 8008392:	d0dc      	beq.n	800834e <_dtoa_r+0x65e>
 8008394:	b12f      	cbz	r7, 80083a2 <_dtoa_r+0x6b2>
 8008396:	42af      	cmp	r7, r5
 8008398:	d003      	beq.n	80083a2 <_dtoa_r+0x6b2>
 800839a:	4639      	mov	r1, r7
 800839c:	4658      	mov	r0, fp
 800839e:	f000 fd65 	bl	8008e6c <_Bfree>
 80083a2:	4629      	mov	r1, r5
 80083a4:	4658      	mov	r0, fp
 80083a6:	f000 fd61 	bl	8008e6c <_Bfree>
 80083aa:	e7d0      	b.n	800834e <_dtoa_r+0x65e>
 80083ac:	9704      	str	r7, [sp, #16]
 80083ae:	4633      	mov	r3, r6
 80083b0:	461e      	mov	r6, r3
 80083b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083b6:	2a39      	cmp	r2, #57	@ 0x39
 80083b8:	d107      	bne.n	80083ca <_dtoa_r+0x6da>
 80083ba:	459a      	cmp	sl, r3
 80083bc:	d1f8      	bne.n	80083b0 <_dtoa_r+0x6c0>
 80083be:	9a04      	ldr	r2, [sp, #16]
 80083c0:	3201      	adds	r2, #1
 80083c2:	9204      	str	r2, [sp, #16]
 80083c4:	2230      	movs	r2, #48	@ 0x30
 80083c6:	f88a 2000 	strb.w	r2, [sl]
 80083ca:	781a      	ldrb	r2, [r3, #0]
 80083cc:	3201      	adds	r2, #1
 80083ce:	701a      	strb	r2, [r3, #0]
 80083d0:	e7bd      	b.n	800834e <_dtoa_r+0x65e>
 80083d2:	4b7b      	ldr	r3, [pc, #492]	@ (80085c0 <_dtoa_r+0x8d0>)
 80083d4:	2200      	movs	r2, #0
 80083d6:	f7f8 f90f 	bl	80005f8 <__aeabi_dmul>
 80083da:	2200      	movs	r2, #0
 80083dc:	2300      	movs	r3, #0
 80083de:	4604      	mov	r4, r0
 80083e0:	460d      	mov	r5, r1
 80083e2:	f7f8 fb71 	bl	8000ac8 <__aeabi_dcmpeq>
 80083e6:	2800      	cmp	r0, #0
 80083e8:	f43f aebb 	beq.w	8008162 <_dtoa_r+0x472>
 80083ec:	e6f0      	b.n	80081d0 <_dtoa_r+0x4e0>
 80083ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80083f0:	2a00      	cmp	r2, #0
 80083f2:	f000 80db 	beq.w	80085ac <_dtoa_r+0x8bc>
 80083f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083f8:	2a01      	cmp	r2, #1
 80083fa:	f300 80bf 	bgt.w	800857c <_dtoa_r+0x88c>
 80083fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008400:	2a00      	cmp	r2, #0
 8008402:	f000 80b7 	beq.w	8008574 <_dtoa_r+0x884>
 8008406:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800840a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800840c:	4646      	mov	r6, r8
 800840e:	9a08      	ldr	r2, [sp, #32]
 8008410:	2101      	movs	r1, #1
 8008412:	441a      	add	r2, r3
 8008414:	4658      	mov	r0, fp
 8008416:	4498      	add	r8, r3
 8008418:	9208      	str	r2, [sp, #32]
 800841a:	f000 fddb 	bl	8008fd4 <__i2b>
 800841e:	4605      	mov	r5, r0
 8008420:	b15e      	cbz	r6, 800843a <_dtoa_r+0x74a>
 8008422:	9b08      	ldr	r3, [sp, #32]
 8008424:	2b00      	cmp	r3, #0
 8008426:	dd08      	ble.n	800843a <_dtoa_r+0x74a>
 8008428:	42b3      	cmp	r3, r6
 800842a:	9a08      	ldr	r2, [sp, #32]
 800842c:	bfa8      	it	ge
 800842e:	4633      	movge	r3, r6
 8008430:	eba8 0803 	sub.w	r8, r8, r3
 8008434:	1af6      	subs	r6, r6, r3
 8008436:	1ad3      	subs	r3, r2, r3
 8008438:	9308      	str	r3, [sp, #32]
 800843a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800843c:	b1f3      	cbz	r3, 800847c <_dtoa_r+0x78c>
 800843e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008440:	2b00      	cmp	r3, #0
 8008442:	f000 80b7 	beq.w	80085b4 <_dtoa_r+0x8c4>
 8008446:	b18c      	cbz	r4, 800846c <_dtoa_r+0x77c>
 8008448:	4629      	mov	r1, r5
 800844a:	4622      	mov	r2, r4
 800844c:	4658      	mov	r0, fp
 800844e:	f000 fe81 	bl	8009154 <__pow5mult>
 8008452:	464a      	mov	r2, r9
 8008454:	4601      	mov	r1, r0
 8008456:	4605      	mov	r5, r0
 8008458:	4658      	mov	r0, fp
 800845a:	f000 fdd1 	bl	8009000 <__multiply>
 800845e:	4649      	mov	r1, r9
 8008460:	9004      	str	r0, [sp, #16]
 8008462:	4658      	mov	r0, fp
 8008464:	f000 fd02 	bl	8008e6c <_Bfree>
 8008468:	9b04      	ldr	r3, [sp, #16]
 800846a:	4699      	mov	r9, r3
 800846c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800846e:	1b1a      	subs	r2, r3, r4
 8008470:	d004      	beq.n	800847c <_dtoa_r+0x78c>
 8008472:	4649      	mov	r1, r9
 8008474:	4658      	mov	r0, fp
 8008476:	f000 fe6d 	bl	8009154 <__pow5mult>
 800847a:	4681      	mov	r9, r0
 800847c:	2101      	movs	r1, #1
 800847e:	4658      	mov	r0, fp
 8008480:	f000 fda8 	bl	8008fd4 <__i2b>
 8008484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008486:	4604      	mov	r4, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 81cf 	beq.w	800882c <_dtoa_r+0xb3c>
 800848e:	461a      	mov	r2, r3
 8008490:	4601      	mov	r1, r0
 8008492:	4658      	mov	r0, fp
 8008494:	f000 fe5e 	bl	8009154 <__pow5mult>
 8008498:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800849a:	2b01      	cmp	r3, #1
 800849c:	4604      	mov	r4, r0
 800849e:	f300 8095 	bgt.w	80085cc <_dtoa_r+0x8dc>
 80084a2:	9b02      	ldr	r3, [sp, #8]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f040 8087 	bne.w	80085b8 <_dtoa_r+0x8c8>
 80084aa:	9b03      	ldr	r3, [sp, #12]
 80084ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f040 8089 	bne.w	80085c8 <_dtoa_r+0x8d8>
 80084b6:	9b03      	ldr	r3, [sp, #12]
 80084b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80084bc:	0d1b      	lsrs	r3, r3, #20
 80084be:	051b      	lsls	r3, r3, #20
 80084c0:	b12b      	cbz	r3, 80084ce <_dtoa_r+0x7de>
 80084c2:	9b08      	ldr	r3, [sp, #32]
 80084c4:	3301      	adds	r3, #1
 80084c6:	9308      	str	r3, [sp, #32]
 80084c8:	f108 0801 	add.w	r8, r8, #1
 80084cc:	2301      	movs	r3, #1
 80084ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80084d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	f000 81b0 	beq.w	8008838 <_dtoa_r+0xb48>
 80084d8:	6923      	ldr	r3, [r4, #16]
 80084da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80084de:	6918      	ldr	r0, [r3, #16]
 80084e0:	f000 fd2c 	bl	8008f3c <__hi0bits>
 80084e4:	f1c0 0020 	rsb	r0, r0, #32
 80084e8:	9b08      	ldr	r3, [sp, #32]
 80084ea:	4418      	add	r0, r3
 80084ec:	f010 001f 	ands.w	r0, r0, #31
 80084f0:	d077      	beq.n	80085e2 <_dtoa_r+0x8f2>
 80084f2:	f1c0 0320 	rsb	r3, r0, #32
 80084f6:	2b04      	cmp	r3, #4
 80084f8:	dd6b      	ble.n	80085d2 <_dtoa_r+0x8e2>
 80084fa:	9b08      	ldr	r3, [sp, #32]
 80084fc:	f1c0 001c 	rsb	r0, r0, #28
 8008500:	4403      	add	r3, r0
 8008502:	4480      	add	r8, r0
 8008504:	4406      	add	r6, r0
 8008506:	9308      	str	r3, [sp, #32]
 8008508:	f1b8 0f00 	cmp.w	r8, #0
 800850c:	dd05      	ble.n	800851a <_dtoa_r+0x82a>
 800850e:	4649      	mov	r1, r9
 8008510:	4642      	mov	r2, r8
 8008512:	4658      	mov	r0, fp
 8008514:	f000 fe78 	bl	8009208 <__lshift>
 8008518:	4681      	mov	r9, r0
 800851a:	9b08      	ldr	r3, [sp, #32]
 800851c:	2b00      	cmp	r3, #0
 800851e:	dd05      	ble.n	800852c <_dtoa_r+0x83c>
 8008520:	4621      	mov	r1, r4
 8008522:	461a      	mov	r2, r3
 8008524:	4658      	mov	r0, fp
 8008526:	f000 fe6f 	bl	8009208 <__lshift>
 800852a:	4604      	mov	r4, r0
 800852c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800852e:	2b00      	cmp	r3, #0
 8008530:	d059      	beq.n	80085e6 <_dtoa_r+0x8f6>
 8008532:	4621      	mov	r1, r4
 8008534:	4648      	mov	r0, r9
 8008536:	f000 fed3 	bl	80092e0 <__mcmp>
 800853a:	2800      	cmp	r0, #0
 800853c:	da53      	bge.n	80085e6 <_dtoa_r+0x8f6>
 800853e:	1e7b      	subs	r3, r7, #1
 8008540:	9304      	str	r3, [sp, #16]
 8008542:	4649      	mov	r1, r9
 8008544:	2300      	movs	r3, #0
 8008546:	220a      	movs	r2, #10
 8008548:	4658      	mov	r0, fp
 800854a:	f000 fcb1 	bl	8008eb0 <__multadd>
 800854e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008550:	4681      	mov	r9, r0
 8008552:	2b00      	cmp	r3, #0
 8008554:	f000 8172 	beq.w	800883c <_dtoa_r+0xb4c>
 8008558:	2300      	movs	r3, #0
 800855a:	4629      	mov	r1, r5
 800855c:	220a      	movs	r2, #10
 800855e:	4658      	mov	r0, fp
 8008560:	f000 fca6 	bl	8008eb0 <__multadd>
 8008564:	9b00      	ldr	r3, [sp, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	4605      	mov	r5, r0
 800856a:	dc67      	bgt.n	800863c <_dtoa_r+0x94c>
 800856c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800856e:	2b02      	cmp	r3, #2
 8008570:	dc41      	bgt.n	80085f6 <_dtoa_r+0x906>
 8008572:	e063      	b.n	800863c <_dtoa_r+0x94c>
 8008574:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008576:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800857a:	e746      	b.n	800840a <_dtoa_r+0x71a>
 800857c:	9b07      	ldr	r3, [sp, #28]
 800857e:	1e5c      	subs	r4, r3, #1
 8008580:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008582:	42a3      	cmp	r3, r4
 8008584:	bfbf      	itttt	lt
 8008586:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008588:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800858a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800858c:	1ae3      	sublt	r3, r4, r3
 800858e:	bfb4      	ite	lt
 8008590:	18d2      	addlt	r2, r2, r3
 8008592:	1b1c      	subge	r4, r3, r4
 8008594:	9b07      	ldr	r3, [sp, #28]
 8008596:	bfbc      	itt	lt
 8008598:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800859a:	2400      	movlt	r4, #0
 800859c:	2b00      	cmp	r3, #0
 800859e:	bfb5      	itete	lt
 80085a0:	eba8 0603 	sublt.w	r6, r8, r3
 80085a4:	9b07      	ldrge	r3, [sp, #28]
 80085a6:	2300      	movlt	r3, #0
 80085a8:	4646      	movge	r6, r8
 80085aa:	e730      	b.n	800840e <_dtoa_r+0x71e>
 80085ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80085ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80085b0:	4646      	mov	r6, r8
 80085b2:	e735      	b.n	8008420 <_dtoa_r+0x730>
 80085b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80085b6:	e75c      	b.n	8008472 <_dtoa_r+0x782>
 80085b8:	2300      	movs	r3, #0
 80085ba:	e788      	b.n	80084ce <_dtoa_r+0x7de>
 80085bc:	3fe00000 	.word	0x3fe00000
 80085c0:	40240000 	.word	0x40240000
 80085c4:	40140000 	.word	0x40140000
 80085c8:	9b02      	ldr	r3, [sp, #8]
 80085ca:	e780      	b.n	80084ce <_dtoa_r+0x7de>
 80085cc:	2300      	movs	r3, #0
 80085ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80085d0:	e782      	b.n	80084d8 <_dtoa_r+0x7e8>
 80085d2:	d099      	beq.n	8008508 <_dtoa_r+0x818>
 80085d4:	9a08      	ldr	r2, [sp, #32]
 80085d6:	331c      	adds	r3, #28
 80085d8:	441a      	add	r2, r3
 80085da:	4498      	add	r8, r3
 80085dc:	441e      	add	r6, r3
 80085de:	9208      	str	r2, [sp, #32]
 80085e0:	e792      	b.n	8008508 <_dtoa_r+0x818>
 80085e2:	4603      	mov	r3, r0
 80085e4:	e7f6      	b.n	80085d4 <_dtoa_r+0x8e4>
 80085e6:	9b07      	ldr	r3, [sp, #28]
 80085e8:	9704      	str	r7, [sp, #16]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	dc20      	bgt.n	8008630 <_dtoa_r+0x940>
 80085ee:	9300      	str	r3, [sp, #0]
 80085f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085f2:	2b02      	cmp	r3, #2
 80085f4:	dd1e      	ble.n	8008634 <_dtoa_r+0x944>
 80085f6:	9b00      	ldr	r3, [sp, #0]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	f47f aec0 	bne.w	800837e <_dtoa_r+0x68e>
 80085fe:	4621      	mov	r1, r4
 8008600:	2205      	movs	r2, #5
 8008602:	4658      	mov	r0, fp
 8008604:	f000 fc54 	bl	8008eb0 <__multadd>
 8008608:	4601      	mov	r1, r0
 800860a:	4604      	mov	r4, r0
 800860c:	4648      	mov	r0, r9
 800860e:	f000 fe67 	bl	80092e0 <__mcmp>
 8008612:	2800      	cmp	r0, #0
 8008614:	f77f aeb3 	ble.w	800837e <_dtoa_r+0x68e>
 8008618:	4656      	mov	r6, sl
 800861a:	2331      	movs	r3, #49	@ 0x31
 800861c:	f806 3b01 	strb.w	r3, [r6], #1
 8008620:	9b04      	ldr	r3, [sp, #16]
 8008622:	3301      	adds	r3, #1
 8008624:	9304      	str	r3, [sp, #16]
 8008626:	e6ae      	b.n	8008386 <_dtoa_r+0x696>
 8008628:	9c07      	ldr	r4, [sp, #28]
 800862a:	9704      	str	r7, [sp, #16]
 800862c:	4625      	mov	r5, r4
 800862e:	e7f3      	b.n	8008618 <_dtoa_r+0x928>
 8008630:	9b07      	ldr	r3, [sp, #28]
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008636:	2b00      	cmp	r3, #0
 8008638:	f000 8104 	beq.w	8008844 <_dtoa_r+0xb54>
 800863c:	2e00      	cmp	r6, #0
 800863e:	dd05      	ble.n	800864c <_dtoa_r+0x95c>
 8008640:	4629      	mov	r1, r5
 8008642:	4632      	mov	r2, r6
 8008644:	4658      	mov	r0, fp
 8008646:	f000 fddf 	bl	8009208 <__lshift>
 800864a:	4605      	mov	r5, r0
 800864c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800864e:	2b00      	cmp	r3, #0
 8008650:	d05a      	beq.n	8008708 <_dtoa_r+0xa18>
 8008652:	6869      	ldr	r1, [r5, #4]
 8008654:	4658      	mov	r0, fp
 8008656:	f000 fbc9 	bl	8008dec <_Balloc>
 800865a:	4606      	mov	r6, r0
 800865c:	b928      	cbnz	r0, 800866a <_dtoa_r+0x97a>
 800865e:	4b84      	ldr	r3, [pc, #528]	@ (8008870 <_dtoa_r+0xb80>)
 8008660:	4602      	mov	r2, r0
 8008662:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008666:	f7ff bb5a 	b.w	8007d1e <_dtoa_r+0x2e>
 800866a:	692a      	ldr	r2, [r5, #16]
 800866c:	3202      	adds	r2, #2
 800866e:	0092      	lsls	r2, r2, #2
 8008670:	f105 010c 	add.w	r1, r5, #12
 8008674:	300c      	adds	r0, #12
 8008676:	f001 f81d 	bl	80096b4 <memcpy>
 800867a:	2201      	movs	r2, #1
 800867c:	4631      	mov	r1, r6
 800867e:	4658      	mov	r0, fp
 8008680:	f000 fdc2 	bl	8009208 <__lshift>
 8008684:	f10a 0301 	add.w	r3, sl, #1
 8008688:	9307      	str	r3, [sp, #28]
 800868a:	9b00      	ldr	r3, [sp, #0]
 800868c:	4453      	add	r3, sl
 800868e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008690:	9b02      	ldr	r3, [sp, #8]
 8008692:	f003 0301 	and.w	r3, r3, #1
 8008696:	462f      	mov	r7, r5
 8008698:	930a      	str	r3, [sp, #40]	@ 0x28
 800869a:	4605      	mov	r5, r0
 800869c:	9b07      	ldr	r3, [sp, #28]
 800869e:	4621      	mov	r1, r4
 80086a0:	3b01      	subs	r3, #1
 80086a2:	4648      	mov	r0, r9
 80086a4:	9300      	str	r3, [sp, #0]
 80086a6:	f7ff fa9a 	bl	8007bde <quorem>
 80086aa:	4639      	mov	r1, r7
 80086ac:	9002      	str	r0, [sp, #8]
 80086ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80086b2:	4648      	mov	r0, r9
 80086b4:	f000 fe14 	bl	80092e0 <__mcmp>
 80086b8:	462a      	mov	r2, r5
 80086ba:	9008      	str	r0, [sp, #32]
 80086bc:	4621      	mov	r1, r4
 80086be:	4658      	mov	r0, fp
 80086c0:	f000 fe2a 	bl	8009318 <__mdiff>
 80086c4:	68c2      	ldr	r2, [r0, #12]
 80086c6:	4606      	mov	r6, r0
 80086c8:	bb02      	cbnz	r2, 800870c <_dtoa_r+0xa1c>
 80086ca:	4601      	mov	r1, r0
 80086cc:	4648      	mov	r0, r9
 80086ce:	f000 fe07 	bl	80092e0 <__mcmp>
 80086d2:	4602      	mov	r2, r0
 80086d4:	4631      	mov	r1, r6
 80086d6:	4658      	mov	r0, fp
 80086d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80086da:	f000 fbc7 	bl	8008e6c <_Bfree>
 80086de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80086e2:	9e07      	ldr	r6, [sp, #28]
 80086e4:	ea43 0102 	orr.w	r1, r3, r2
 80086e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086ea:	4319      	orrs	r1, r3
 80086ec:	d110      	bne.n	8008710 <_dtoa_r+0xa20>
 80086ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80086f2:	d029      	beq.n	8008748 <_dtoa_r+0xa58>
 80086f4:	9b08      	ldr	r3, [sp, #32]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	dd02      	ble.n	8008700 <_dtoa_r+0xa10>
 80086fa:	9b02      	ldr	r3, [sp, #8]
 80086fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008700:	9b00      	ldr	r3, [sp, #0]
 8008702:	f883 8000 	strb.w	r8, [r3]
 8008706:	e63f      	b.n	8008388 <_dtoa_r+0x698>
 8008708:	4628      	mov	r0, r5
 800870a:	e7bb      	b.n	8008684 <_dtoa_r+0x994>
 800870c:	2201      	movs	r2, #1
 800870e:	e7e1      	b.n	80086d4 <_dtoa_r+0x9e4>
 8008710:	9b08      	ldr	r3, [sp, #32]
 8008712:	2b00      	cmp	r3, #0
 8008714:	db04      	blt.n	8008720 <_dtoa_r+0xa30>
 8008716:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008718:	430b      	orrs	r3, r1
 800871a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800871c:	430b      	orrs	r3, r1
 800871e:	d120      	bne.n	8008762 <_dtoa_r+0xa72>
 8008720:	2a00      	cmp	r2, #0
 8008722:	dded      	ble.n	8008700 <_dtoa_r+0xa10>
 8008724:	4649      	mov	r1, r9
 8008726:	2201      	movs	r2, #1
 8008728:	4658      	mov	r0, fp
 800872a:	f000 fd6d 	bl	8009208 <__lshift>
 800872e:	4621      	mov	r1, r4
 8008730:	4681      	mov	r9, r0
 8008732:	f000 fdd5 	bl	80092e0 <__mcmp>
 8008736:	2800      	cmp	r0, #0
 8008738:	dc03      	bgt.n	8008742 <_dtoa_r+0xa52>
 800873a:	d1e1      	bne.n	8008700 <_dtoa_r+0xa10>
 800873c:	f018 0f01 	tst.w	r8, #1
 8008740:	d0de      	beq.n	8008700 <_dtoa_r+0xa10>
 8008742:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008746:	d1d8      	bne.n	80086fa <_dtoa_r+0xa0a>
 8008748:	9a00      	ldr	r2, [sp, #0]
 800874a:	2339      	movs	r3, #57	@ 0x39
 800874c:	7013      	strb	r3, [r2, #0]
 800874e:	4633      	mov	r3, r6
 8008750:	461e      	mov	r6, r3
 8008752:	3b01      	subs	r3, #1
 8008754:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008758:	2a39      	cmp	r2, #57	@ 0x39
 800875a:	d052      	beq.n	8008802 <_dtoa_r+0xb12>
 800875c:	3201      	adds	r2, #1
 800875e:	701a      	strb	r2, [r3, #0]
 8008760:	e612      	b.n	8008388 <_dtoa_r+0x698>
 8008762:	2a00      	cmp	r2, #0
 8008764:	dd07      	ble.n	8008776 <_dtoa_r+0xa86>
 8008766:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800876a:	d0ed      	beq.n	8008748 <_dtoa_r+0xa58>
 800876c:	9a00      	ldr	r2, [sp, #0]
 800876e:	f108 0301 	add.w	r3, r8, #1
 8008772:	7013      	strb	r3, [r2, #0]
 8008774:	e608      	b.n	8008388 <_dtoa_r+0x698>
 8008776:	9b07      	ldr	r3, [sp, #28]
 8008778:	9a07      	ldr	r2, [sp, #28]
 800877a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800877e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008780:	4293      	cmp	r3, r2
 8008782:	d028      	beq.n	80087d6 <_dtoa_r+0xae6>
 8008784:	4649      	mov	r1, r9
 8008786:	2300      	movs	r3, #0
 8008788:	220a      	movs	r2, #10
 800878a:	4658      	mov	r0, fp
 800878c:	f000 fb90 	bl	8008eb0 <__multadd>
 8008790:	42af      	cmp	r7, r5
 8008792:	4681      	mov	r9, r0
 8008794:	f04f 0300 	mov.w	r3, #0
 8008798:	f04f 020a 	mov.w	r2, #10
 800879c:	4639      	mov	r1, r7
 800879e:	4658      	mov	r0, fp
 80087a0:	d107      	bne.n	80087b2 <_dtoa_r+0xac2>
 80087a2:	f000 fb85 	bl	8008eb0 <__multadd>
 80087a6:	4607      	mov	r7, r0
 80087a8:	4605      	mov	r5, r0
 80087aa:	9b07      	ldr	r3, [sp, #28]
 80087ac:	3301      	adds	r3, #1
 80087ae:	9307      	str	r3, [sp, #28]
 80087b0:	e774      	b.n	800869c <_dtoa_r+0x9ac>
 80087b2:	f000 fb7d 	bl	8008eb0 <__multadd>
 80087b6:	4629      	mov	r1, r5
 80087b8:	4607      	mov	r7, r0
 80087ba:	2300      	movs	r3, #0
 80087bc:	220a      	movs	r2, #10
 80087be:	4658      	mov	r0, fp
 80087c0:	f000 fb76 	bl	8008eb0 <__multadd>
 80087c4:	4605      	mov	r5, r0
 80087c6:	e7f0      	b.n	80087aa <_dtoa_r+0xaba>
 80087c8:	9b00      	ldr	r3, [sp, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	bfcc      	ite	gt
 80087ce:	461e      	movgt	r6, r3
 80087d0:	2601      	movle	r6, #1
 80087d2:	4456      	add	r6, sl
 80087d4:	2700      	movs	r7, #0
 80087d6:	4649      	mov	r1, r9
 80087d8:	2201      	movs	r2, #1
 80087da:	4658      	mov	r0, fp
 80087dc:	f000 fd14 	bl	8009208 <__lshift>
 80087e0:	4621      	mov	r1, r4
 80087e2:	4681      	mov	r9, r0
 80087e4:	f000 fd7c 	bl	80092e0 <__mcmp>
 80087e8:	2800      	cmp	r0, #0
 80087ea:	dcb0      	bgt.n	800874e <_dtoa_r+0xa5e>
 80087ec:	d102      	bne.n	80087f4 <_dtoa_r+0xb04>
 80087ee:	f018 0f01 	tst.w	r8, #1
 80087f2:	d1ac      	bne.n	800874e <_dtoa_r+0xa5e>
 80087f4:	4633      	mov	r3, r6
 80087f6:	461e      	mov	r6, r3
 80087f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087fc:	2a30      	cmp	r2, #48	@ 0x30
 80087fe:	d0fa      	beq.n	80087f6 <_dtoa_r+0xb06>
 8008800:	e5c2      	b.n	8008388 <_dtoa_r+0x698>
 8008802:	459a      	cmp	sl, r3
 8008804:	d1a4      	bne.n	8008750 <_dtoa_r+0xa60>
 8008806:	9b04      	ldr	r3, [sp, #16]
 8008808:	3301      	adds	r3, #1
 800880a:	9304      	str	r3, [sp, #16]
 800880c:	2331      	movs	r3, #49	@ 0x31
 800880e:	f88a 3000 	strb.w	r3, [sl]
 8008812:	e5b9      	b.n	8008388 <_dtoa_r+0x698>
 8008814:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008816:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008874 <_dtoa_r+0xb84>
 800881a:	b11b      	cbz	r3, 8008824 <_dtoa_r+0xb34>
 800881c:	f10a 0308 	add.w	r3, sl, #8
 8008820:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008822:	6013      	str	r3, [r2, #0]
 8008824:	4650      	mov	r0, sl
 8008826:	b019      	add	sp, #100	@ 0x64
 8008828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800882c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800882e:	2b01      	cmp	r3, #1
 8008830:	f77f ae37 	ble.w	80084a2 <_dtoa_r+0x7b2>
 8008834:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008836:	930a      	str	r3, [sp, #40]	@ 0x28
 8008838:	2001      	movs	r0, #1
 800883a:	e655      	b.n	80084e8 <_dtoa_r+0x7f8>
 800883c:	9b00      	ldr	r3, [sp, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	f77f aed6 	ble.w	80085f0 <_dtoa_r+0x900>
 8008844:	4656      	mov	r6, sl
 8008846:	4621      	mov	r1, r4
 8008848:	4648      	mov	r0, r9
 800884a:	f7ff f9c8 	bl	8007bde <quorem>
 800884e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008852:	f806 8b01 	strb.w	r8, [r6], #1
 8008856:	9b00      	ldr	r3, [sp, #0]
 8008858:	eba6 020a 	sub.w	r2, r6, sl
 800885c:	4293      	cmp	r3, r2
 800885e:	ddb3      	ble.n	80087c8 <_dtoa_r+0xad8>
 8008860:	4649      	mov	r1, r9
 8008862:	2300      	movs	r3, #0
 8008864:	220a      	movs	r2, #10
 8008866:	4658      	mov	r0, fp
 8008868:	f000 fb22 	bl	8008eb0 <__multadd>
 800886c:	4681      	mov	r9, r0
 800886e:	e7ea      	b.n	8008846 <_dtoa_r+0xb56>
 8008870:	08009f4c 	.word	0x08009f4c
 8008874:	08009ed0 	.word	0x08009ed0

08008878 <__ssputs_r>:
 8008878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800887c:	688e      	ldr	r6, [r1, #8]
 800887e:	461f      	mov	r7, r3
 8008880:	42be      	cmp	r6, r7
 8008882:	680b      	ldr	r3, [r1, #0]
 8008884:	4682      	mov	sl, r0
 8008886:	460c      	mov	r4, r1
 8008888:	4690      	mov	r8, r2
 800888a:	d82d      	bhi.n	80088e8 <__ssputs_r+0x70>
 800888c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008890:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008894:	d026      	beq.n	80088e4 <__ssputs_r+0x6c>
 8008896:	6965      	ldr	r5, [r4, #20]
 8008898:	6909      	ldr	r1, [r1, #16]
 800889a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800889e:	eba3 0901 	sub.w	r9, r3, r1
 80088a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80088a6:	1c7b      	adds	r3, r7, #1
 80088a8:	444b      	add	r3, r9
 80088aa:	106d      	asrs	r5, r5, #1
 80088ac:	429d      	cmp	r5, r3
 80088ae:	bf38      	it	cc
 80088b0:	461d      	movcc	r5, r3
 80088b2:	0553      	lsls	r3, r2, #21
 80088b4:	d527      	bpl.n	8008906 <__ssputs_r+0x8e>
 80088b6:	4629      	mov	r1, r5
 80088b8:	f000 f960 	bl	8008b7c <_malloc_r>
 80088bc:	4606      	mov	r6, r0
 80088be:	b360      	cbz	r0, 800891a <__ssputs_r+0xa2>
 80088c0:	6921      	ldr	r1, [r4, #16]
 80088c2:	464a      	mov	r2, r9
 80088c4:	f000 fef6 	bl	80096b4 <memcpy>
 80088c8:	89a3      	ldrh	r3, [r4, #12]
 80088ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80088ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088d2:	81a3      	strh	r3, [r4, #12]
 80088d4:	6126      	str	r6, [r4, #16]
 80088d6:	6165      	str	r5, [r4, #20]
 80088d8:	444e      	add	r6, r9
 80088da:	eba5 0509 	sub.w	r5, r5, r9
 80088de:	6026      	str	r6, [r4, #0]
 80088e0:	60a5      	str	r5, [r4, #8]
 80088e2:	463e      	mov	r6, r7
 80088e4:	42be      	cmp	r6, r7
 80088e6:	d900      	bls.n	80088ea <__ssputs_r+0x72>
 80088e8:	463e      	mov	r6, r7
 80088ea:	6820      	ldr	r0, [r4, #0]
 80088ec:	4632      	mov	r2, r6
 80088ee:	4641      	mov	r1, r8
 80088f0:	f000 fe6f 	bl	80095d2 <memmove>
 80088f4:	68a3      	ldr	r3, [r4, #8]
 80088f6:	1b9b      	subs	r3, r3, r6
 80088f8:	60a3      	str	r3, [r4, #8]
 80088fa:	6823      	ldr	r3, [r4, #0]
 80088fc:	4433      	add	r3, r6
 80088fe:	6023      	str	r3, [r4, #0]
 8008900:	2000      	movs	r0, #0
 8008902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008906:	462a      	mov	r2, r5
 8008908:	f000 fe35 	bl	8009576 <_realloc_r>
 800890c:	4606      	mov	r6, r0
 800890e:	2800      	cmp	r0, #0
 8008910:	d1e0      	bne.n	80088d4 <__ssputs_r+0x5c>
 8008912:	6921      	ldr	r1, [r4, #16]
 8008914:	4650      	mov	r0, sl
 8008916:	f000 ff0d 	bl	8009734 <_free_r>
 800891a:	230c      	movs	r3, #12
 800891c:	f8ca 3000 	str.w	r3, [sl]
 8008920:	89a3      	ldrh	r3, [r4, #12]
 8008922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008926:	81a3      	strh	r3, [r4, #12]
 8008928:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800892c:	e7e9      	b.n	8008902 <__ssputs_r+0x8a>
	...

08008930 <_svfiprintf_r>:
 8008930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008934:	4698      	mov	r8, r3
 8008936:	898b      	ldrh	r3, [r1, #12]
 8008938:	061b      	lsls	r3, r3, #24
 800893a:	b09d      	sub	sp, #116	@ 0x74
 800893c:	4607      	mov	r7, r0
 800893e:	460d      	mov	r5, r1
 8008940:	4614      	mov	r4, r2
 8008942:	d510      	bpl.n	8008966 <_svfiprintf_r+0x36>
 8008944:	690b      	ldr	r3, [r1, #16]
 8008946:	b973      	cbnz	r3, 8008966 <_svfiprintf_r+0x36>
 8008948:	2140      	movs	r1, #64	@ 0x40
 800894a:	f000 f917 	bl	8008b7c <_malloc_r>
 800894e:	6028      	str	r0, [r5, #0]
 8008950:	6128      	str	r0, [r5, #16]
 8008952:	b930      	cbnz	r0, 8008962 <_svfiprintf_r+0x32>
 8008954:	230c      	movs	r3, #12
 8008956:	603b      	str	r3, [r7, #0]
 8008958:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800895c:	b01d      	add	sp, #116	@ 0x74
 800895e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008962:	2340      	movs	r3, #64	@ 0x40
 8008964:	616b      	str	r3, [r5, #20]
 8008966:	2300      	movs	r3, #0
 8008968:	9309      	str	r3, [sp, #36]	@ 0x24
 800896a:	2320      	movs	r3, #32
 800896c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008970:	f8cd 800c 	str.w	r8, [sp, #12]
 8008974:	2330      	movs	r3, #48	@ 0x30
 8008976:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008b14 <_svfiprintf_r+0x1e4>
 800897a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800897e:	f04f 0901 	mov.w	r9, #1
 8008982:	4623      	mov	r3, r4
 8008984:	469a      	mov	sl, r3
 8008986:	f813 2b01 	ldrb.w	r2, [r3], #1
 800898a:	b10a      	cbz	r2, 8008990 <_svfiprintf_r+0x60>
 800898c:	2a25      	cmp	r2, #37	@ 0x25
 800898e:	d1f9      	bne.n	8008984 <_svfiprintf_r+0x54>
 8008990:	ebba 0b04 	subs.w	fp, sl, r4
 8008994:	d00b      	beq.n	80089ae <_svfiprintf_r+0x7e>
 8008996:	465b      	mov	r3, fp
 8008998:	4622      	mov	r2, r4
 800899a:	4629      	mov	r1, r5
 800899c:	4638      	mov	r0, r7
 800899e:	f7ff ff6b 	bl	8008878 <__ssputs_r>
 80089a2:	3001      	adds	r0, #1
 80089a4:	f000 80a7 	beq.w	8008af6 <_svfiprintf_r+0x1c6>
 80089a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089aa:	445a      	add	r2, fp
 80089ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80089ae:	f89a 3000 	ldrb.w	r3, [sl]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f000 809f 	beq.w	8008af6 <_svfiprintf_r+0x1c6>
 80089b8:	2300      	movs	r3, #0
 80089ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80089be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80089c2:	f10a 0a01 	add.w	sl, sl, #1
 80089c6:	9304      	str	r3, [sp, #16]
 80089c8:	9307      	str	r3, [sp, #28]
 80089ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80089ce:	931a      	str	r3, [sp, #104]	@ 0x68
 80089d0:	4654      	mov	r4, sl
 80089d2:	2205      	movs	r2, #5
 80089d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089d8:	484e      	ldr	r0, [pc, #312]	@ (8008b14 <_svfiprintf_r+0x1e4>)
 80089da:	f7f7 fbf9 	bl	80001d0 <memchr>
 80089de:	9a04      	ldr	r2, [sp, #16]
 80089e0:	b9d8      	cbnz	r0, 8008a1a <_svfiprintf_r+0xea>
 80089e2:	06d0      	lsls	r0, r2, #27
 80089e4:	bf44      	itt	mi
 80089e6:	2320      	movmi	r3, #32
 80089e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089ec:	0711      	lsls	r1, r2, #28
 80089ee:	bf44      	itt	mi
 80089f0:	232b      	movmi	r3, #43	@ 0x2b
 80089f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80089f6:	f89a 3000 	ldrb.w	r3, [sl]
 80089fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80089fc:	d015      	beq.n	8008a2a <_svfiprintf_r+0xfa>
 80089fe:	9a07      	ldr	r2, [sp, #28]
 8008a00:	4654      	mov	r4, sl
 8008a02:	2000      	movs	r0, #0
 8008a04:	f04f 0c0a 	mov.w	ip, #10
 8008a08:	4621      	mov	r1, r4
 8008a0a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a0e:	3b30      	subs	r3, #48	@ 0x30
 8008a10:	2b09      	cmp	r3, #9
 8008a12:	d94b      	bls.n	8008aac <_svfiprintf_r+0x17c>
 8008a14:	b1b0      	cbz	r0, 8008a44 <_svfiprintf_r+0x114>
 8008a16:	9207      	str	r2, [sp, #28]
 8008a18:	e014      	b.n	8008a44 <_svfiprintf_r+0x114>
 8008a1a:	eba0 0308 	sub.w	r3, r0, r8
 8008a1e:	fa09 f303 	lsl.w	r3, r9, r3
 8008a22:	4313      	orrs	r3, r2
 8008a24:	9304      	str	r3, [sp, #16]
 8008a26:	46a2      	mov	sl, r4
 8008a28:	e7d2      	b.n	80089d0 <_svfiprintf_r+0xa0>
 8008a2a:	9b03      	ldr	r3, [sp, #12]
 8008a2c:	1d19      	adds	r1, r3, #4
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	9103      	str	r1, [sp, #12]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	bfbb      	ittet	lt
 8008a36:	425b      	neglt	r3, r3
 8008a38:	f042 0202 	orrlt.w	r2, r2, #2
 8008a3c:	9307      	strge	r3, [sp, #28]
 8008a3e:	9307      	strlt	r3, [sp, #28]
 8008a40:	bfb8      	it	lt
 8008a42:	9204      	strlt	r2, [sp, #16]
 8008a44:	7823      	ldrb	r3, [r4, #0]
 8008a46:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a48:	d10a      	bne.n	8008a60 <_svfiprintf_r+0x130>
 8008a4a:	7863      	ldrb	r3, [r4, #1]
 8008a4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a4e:	d132      	bne.n	8008ab6 <_svfiprintf_r+0x186>
 8008a50:	9b03      	ldr	r3, [sp, #12]
 8008a52:	1d1a      	adds	r2, r3, #4
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	9203      	str	r2, [sp, #12]
 8008a58:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a5c:	3402      	adds	r4, #2
 8008a5e:	9305      	str	r3, [sp, #20]
 8008a60:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008b24 <_svfiprintf_r+0x1f4>
 8008a64:	7821      	ldrb	r1, [r4, #0]
 8008a66:	2203      	movs	r2, #3
 8008a68:	4650      	mov	r0, sl
 8008a6a:	f7f7 fbb1 	bl	80001d0 <memchr>
 8008a6e:	b138      	cbz	r0, 8008a80 <_svfiprintf_r+0x150>
 8008a70:	9b04      	ldr	r3, [sp, #16]
 8008a72:	eba0 000a 	sub.w	r0, r0, sl
 8008a76:	2240      	movs	r2, #64	@ 0x40
 8008a78:	4082      	lsls	r2, r0
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	3401      	adds	r4, #1
 8008a7e:	9304      	str	r3, [sp, #16]
 8008a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a84:	4824      	ldr	r0, [pc, #144]	@ (8008b18 <_svfiprintf_r+0x1e8>)
 8008a86:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a8a:	2206      	movs	r2, #6
 8008a8c:	f7f7 fba0 	bl	80001d0 <memchr>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d036      	beq.n	8008b02 <_svfiprintf_r+0x1d2>
 8008a94:	4b21      	ldr	r3, [pc, #132]	@ (8008b1c <_svfiprintf_r+0x1ec>)
 8008a96:	bb1b      	cbnz	r3, 8008ae0 <_svfiprintf_r+0x1b0>
 8008a98:	9b03      	ldr	r3, [sp, #12]
 8008a9a:	3307      	adds	r3, #7
 8008a9c:	f023 0307 	bic.w	r3, r3, #7
 8008aa0:	3308      	adds	r3, #8
 8008aa2:	9303      	str	r3, [sp, #12]
 8008aa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aa6:	4433      	add	r3, r6
 8008aa8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008aaa:	e76a      	b.n	8008982 <_svfiprintf_r+0x52>
 8008aac:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ab0:	460c      	mov	r4, r1
 8008ab2:	2001      	movs	r0, #1
 8008ab4:	e7a8      	b.n	8008a08 <_svfiprintf_r+0xd8>
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	3401      	adds	r4, #1
 8008aba:	9305      	str	r3, [sp, #20]
 8008abc:	4619      	mov	r1, r3
 8008abe:	f04f 0c0a 	mov.w	ip, #10
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ac8:	3a30      	subs	r2, #48	@ 0x30
 8008aca:	2a09      	cmp	r2, #9
 8008acc:	d903      	bls.n	8008ad6 <_svfiprintf_r+0x1a6>
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d0c6      	beq.n	8008a60 <_svfiprintf_r+0x130>
 8008ad2:	9105      	str	r1, [sp, #20]
 8008ad4:	e7c4      	b.n	8008a60 <_svfiprintf_r+0x130>
 8008ad6:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ada:	4604      	mov	r4, r0
 8008adc:	2301      	movs	r3, #1
 8008ade:	e7f0      	b.n	8008ac2 <_svfiprintf_r+0x192>
 8008ae0:	ab03      	add	r3, sp, #12
 8008ae2:	9300      	str	r3, [sp, #0]
 8008ae4:	462a      	mov	r2, r5
 8008ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8008b20 <_svfiprintf_r+0x1f0>)
 8008ae8:	a904      	add	r1, sp, #16
 8008aea:	4638      	mov	r0, r7
 8008aec:	f7fe fb70 	bl	80071d0 <_printf_float>
 8008af0:	1c42      	adds	r2, r0, #1
 8008af2:	4606      	mov	r6, r0
 8008af4:	d1d6      	bne.n	8008aa4 <_svfiprintf_r+0x174>
 8008af6:	89ab      	ldrh	r3, [r5, #12]
 8008af8:	065b      	lsls	r3, r3, #25
 8008afa:	f53f af2d 	bmi.w	8008958 <_svfiprintf_r+0x28>
 8008afe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b00:	e72c      	b.n	800895c <_svfiprintf_r+0x2c>
 8008b02:	ab03      	add	r3, sp, #12
 8008b04:	9300      	str	r3, [sp, #0]
 8008b06:	462a      	mov	r2, r5
 8008b08:	4b05      	ldr	r3, [pc, #20]	@ (8008b20 <_svfiprintf_r+0x1f0>)
 8008b0a:	a904      	add	r1, sp, #16
 8008b0c:	4638      	mov	r0, r7
 8008b0e:	f7fe fdf7 	bl	8007700 <_printf_i>
 8008b12:	e7ed      	b.n	8008af0 <_svfiprintf_r+0x1c0>
 8008b14:	08009f5d 	.word	0x08009f5d
 8008b18:	08009f67 	.word	0x08009f67
 8008b1c:	080071d1 	.word	0x080071d1
 8008b20:	08008879 	.word	0x08008879
 8008b24:	08009f63 	.word	0x08009f63

08008b28 <malloc>:
 8008b28:	4b02      	ldr	r3, [pc, #8]	@ (8008b34 <malloc+0xc>)
 8008b2a:	4601      	mov	r1, r0
 8008b2c:	6818      	ldr	r0, [r3, #0]
 8008b2e:	f000 b825 	b.w	8008b7c <_malloc_r>
 8008b32:	bf00      	nop
 8008b34:	20000018 	.word	0x20000018

08008b38 <sbrk_aligned>:
 8008b38:	b570      	push	{r4, r5, r6, lr}
 8008b3a:	4e0f      	ldr	r6, [pc, #60]	@ (8008b78 <sbrk_aligned+0x40>)
 8008b3c:	460c      	mov	r4, r1
 8008b3e:	6831      	ldr	r1, [r6, #0]
 8008b40:	4605      	mov	r5, r0
 8008b42:	b911      	cbnz	r1, 8008b4a <sbrk_aligned+0x12>
 8008b44:	f000 fd94 	bl	8009670 <_sbrk_r>
 8008b48:	6030      	str	r0, [r6, #0]
 8008b4a:	4621      	mov	r1, r4
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	f000 fd8f 	bl	8009670 <_sbrk_r>
 8008b52:	1c43      	adds	r3, r0, #1
 8008b54:	d103      	bne.n	8008b5e <sbrk_aligned+0x26>
 8008b56:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	bd70      	pop	{r4, r5, r6, pc}
 8008b5e:	1cc4      	adds	r4, r0, #3
 8008b60:	f024 0403 	bic.w	r4, r4, #3
 8008b64:	42a0      	cmp	r0, r4
 8008b66:	d0f8      	beq.n	8008b5a <sbrk_aligned+0x22>
 8008b68:	1a21      	subs	r1, r4, r0
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	f000 fd80 	bl	8009670 <_sbrk_r>
 8008b70:	3001      	adds	r0, #1
 8008b72:	d1f2      	bne.n	8008b5a <sbrk_aligned+0x22>
 8008b74:	e7ef      	b.n	8008b56 <sbrk_aligned+0x1e>
 8008b76:	bf00      	nop
 8008b78:	20000a90 	.word	0x20000a90

08008b7c <_malloc_r>:
 8008b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b80:	1ccd      	adds	r5, r1, #3
 8008b82:	f025 0503 	bic.w	r5, r5, #3
 8008b86:	3508      	adds	r5, #8
 8008b88:	2d0c      	cmp	r5, #12
 8008b8a:	bf38      	it	cc
 8008b8c:	250c      	movcc	r5, #12
 8008b8e:	2d00      	cmp	r5, #0
 8008b90:	4606      	mov	r6, r0
 8008b92:	db01      	blt.n	8008b98 <_malloc_r+0x1c>
 8008b94:	42a9      	cmp	r1, r5
 8008b96:	d904      	bls.n	8008ba2 <_malloc_r+0x26>
 8008b98:	230c      	movs	r3, #12
 8008b9a:	6033      	str	r3, [r6, #0]
 8008b9c:	2000      	movs	r0, #0
 8008b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ba2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c78 <_malloc_r+0xfc>
 8008ba6:	f000 f915 	bl	8008dd4 <__malloc_lock>
 8008baa:	f8d8 3000 	ldr.w	r3, [r8]
 8008bae:	461c      	mov	r4, r3
 8008bb0:	bb44      	cbnz	r4, 8008c04 <_malloc_r+0x88>
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	f7ff ffbf 	bl	8008b38 <sbrk_aligned>
 8008bba:	1c43      	adds	r3, r0, #1
 8008bbc:	4604      	mov	r4, r0
 8008bbe:	d158      	bne.n	8008c72 <_malloc_r+0xf6>
 8008bc0:	f8d8 4000 	ldr.w	r4, [r8]
 8008bc4:	4627      	mov	r7, r4
 8008bc6:	2f00      	cmp	r7, #0
 8008bc8:	d143      	bne.n	8008c52 <_malloc_r+0xd6>
 8008bca:	2c00      	cmp	r4, #0
 8008bcc:	d04b      	beq.n	8008c66 <_malloc_r+0xea>
 8008bce:	6823      	ldr	r3, [r4, #0]
 8008bd0:	4639      	mov	r1, r7
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	eb04 0903 	add.w	r9, r4, r3
 8008bd8:	f000 fd4a 	bl	8009670 <_sbrk_r>
 8008bdc:	4581      	cmp	r9, r0
 8008bde:	d142      	bne.n	8008c66 <_malloc_r+0xea>
 8008be0:	6821      	ldr	r1, [r4, #0]
 8008be2:	1a6d      	subs	r5, r5, r1
 8008be4:	4629      	mov	r1, r5
 8008be6:	4630      	mov	r0, r6
 8008be8:	f7ff ffa6 	bl	8008b38 <sbrk_aligned>
 8008bec:	3001      	adds	r0, #1
 8008bee:	d03a      	beq.n	8008c66 <_malloc_r+0xea>
 8008bf0:	6823      	ldr	r3, [r4, #0]
 8008bf2:	442b      	add	r3, r5
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	f8d8 3000 	ldr.w	r3, [r8]
 8008bfa:	685a      	ldr	r2, [r3, #4]
 8008bfc:	bb62      	cbnz	r2, 8008c58 <_malloc_r+0xdc>
 8008bfe:	f8c8 7000 	str.w	r7, [r8]
 8008c02:	e00f      	b.n	8008c24 <_malloc_r+0xa8>
 8008c04:	6822      	ldr	r2, [r4, #0]
 8008c06:	1b52      	subs	r2, r2, r5
 8008c08:	d420      	bmi.n	8008c4c <_malloc_r+0xd0>
 8008c0a:	2a0b      	cmp	r2, #11
 8008c0c:	d917      	bls.n	8008c3e <_malloc_r+0xc2>
 8008c0e:	1961      	adds	r1, r4, r5
 8008c10:	42a3      	cmp	r3, r4
 8008c12:	6025      	str	r5, [r4, #0]
 8008c14:	bf18      	it	ne
 8008c16:	6059      	strne	r1, [r3, #4]
 8008c18:	6863      	ldr	r3, [r4, #4]
 8008c1a:	bf08      	it	eq
 8008c1c:	f8c8 1000 	streq.w	r1, [r8]
 8008c20:	5162      	str	r2, [r4, r5]
 8008c22:	604b      	str	r3, [r1, #4]
 8008c24:	4630      	mov	r0, r6
 8008c26:	f000 f8db 	bl	8008de0 <__malloc_unlock>
 8008c2a:	f104 000b 	add.w	r0, r4, #11
 8008c2e:	1d23      	adds	r3, r4, #4
 8008c30:	f020 0007 	bic.w	r0, r0, #7
 8008c34:	1ac2      	subs	r2, r0, r3
 8008c36:	bf1c      	itt	ne
 8008c38:	1a1b      	subne	r3, r3, r0
 8008c3a:	50a3      	strne	r3, [r4, r2]
 8008c3c:	e7af      	b.n	8008b9e <_malloc_r+0x22>
 8008c3e:	6862      	ldr	r2, [r4, #4]
 8008c40:	42a3      	cmp	r3, r4
 8008c42:	bf0c      	ite	eq
 8008c44:	f8c8 2000 	streq.w	r2, [r8]
 8008c48:	605a      	strne	r2, [r3, #4]
 8008c4a:	e7eb      	b.n	8008c24 <_malloc_r+0xa8>
 8008c4c:	4623      	mov	r3, r4
 8008c4e:	6864      	ldr	r4, [r4, #4]
 8008c50:	e7ae      	b.n	8008bb0 <_malloc_r+0x34>
 8008c52:	463c      	mov	r4, r7
 8008c54:	687f      	ldr	r7, [r7, #4]
 8008c56:	e7b6      	b.n	8008bc6 <_malloc_r+0x4a>
 8008c58:	461a      	mov	r2, r3
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	42a3      	cmp	r3, r4
 8008c5e:	d1fb      	bne.n	8008c58 <_malloc_r+0xdc>
 8008c60:	2300      	movs	r3, #0
 8008c62:	6053      	str	r3, [r2, #4]
 8008c64:	e7de      	b.n	8008c24 <_malloc_r+0xa8>
 8008c66:	230c      	movs	r3, #12
 8008c68:	6033      	str	r3, [r6, #0]
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	f000 f8b8 	bl	8008de0 <__malloc_unlock>
 8008c70:	e794      	b.n	8008b9c <_malloc_r+0x20>
 8008c72:	6005      	str	r5, [r0, #0]
 8008c74:	e7d6      	b.n	8008c24 <_malloc_r+0xa8>
 8008c76:	bf00      	nop
 8008c78:	20000a94 	.word	0x20000a94

08008c7c <__sflush_r>:
 8008c7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c84:	0716      	lsls	r6, r2, #28
 8008c86:	4605      	mov	r5, r0
 8008c88:	460c      	mov	r4, r1
 8008c8a:	d454      	bmi.n	8008d36 <__sflush_r+0xba>
 8008c8c:	684b      	ldr	r3, [r1, #4]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	dc02      	bgt.n	8008c98 <__sflush_r+0x1c>
 8008c92:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	dd48      	ble.n	8008d2a <__sflush_r+0xae>
 8008c98:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008c9a:	2e00      	cmp	r6, #0
 8008c9c:	d045      	beq.n	8008d2a <__sflush_r+0xae>
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008ca4:	682f      	ldr	r7, [r5, #0]
 8008ca6:	6a21      	ldr	r1, [r4, #32]
 8008ca8:	602b      	str	r3, [r5, #0]
 8008caa:	d030      	beq.n	8008d0e <__sflush_r+0x92>
 8008cac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008cae:	89a3      	ldrh	r3, [r4, #12]
 8008cb0:	0759      	lsls	r1, r3, #29
 8008cb2:	d505      	bpl.n	8008cc0 <__sflush_r+0x44>
 8008cb4:	6863      	ldr	r3, [r4, #4]
 8008cb6:	1ad2      	subs	r2, r2, r3
 8008cb8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008cba:	b10b      	cbz	r3, 8008cc0 <__sflush_r+0x44>
 8008cbc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008cbe:	1ad2      	subs	r2, r2, r3
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008cc4:	6a21      	ldr	r1, [r4, #32]
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	47b0      	blx	r6
 8008cca:	1c43      	adds	r3, r0, #1
 8008ccc:	89a3      	ldrh	r3, [r4, #12]
 8008cce:	d106      	bne.n	8008cde <__sflush_r+0x62>
 8008cd0:	6829      	ldr	r1, [r5, #0]
 8008cd2:	291d      	cmp	r1, #29
 8008cd4:	d82b      	bhi.n	8008d2e <__sflush_r+0xb2>
 8008cd6:	4a2a      	ldr	r2, [pc, #168]	@ (8008d80 <__sflush_r+0x104>)
 8008cd8:	410a      	asrs	r2, r1
 8008cda:	07d6      	lsls	r6, r2, #31
 8008cdc:	d427      	bmi.n	8008d2e <__sflush_r+0xb2>
 8008cde:	2200      	movs	r2, #0
 8008ce0:	6062      	str	r2, [r4, #4]
 8008ce2:	04d9      	lsls	r1, r3, #19
 8008ce4:	6922      	ldr	r2, [r4, #16]
 8008ce6:	6022      	str	r2, [r4, #0]
 8008ce8:	d504      	bpl.n	8008cf4 <__sflush_r+0x78>
 8008cea:	1c42      	adds	r2, r0, #1
 8008cec:	d101      	bne.n	8008cf2 <__sflush_r+0x76>
 8008cee:	682b      	ldr	r3, [r5, #0]
 8008cf0:	b903      	cbnz	r3, 8008cf4 <__sflush_r+0x78>
 8008cf2:	6560      	str	r0, [r4, #84]	@ 0x54
 8008cf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008cf6:	602f      	str	r7, [r5, #0]
 8008cf8:	b1b9      	cbz	r1, 8008d2a <__sflush_r+0xae>
 8008cfa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cfe:	4299      	cmp	r1, r3
 8008d00:	d002      	beq.n	8008d08 <__sflush_r+0x8c>
 8008d02:	4628      	mov	r0, r5
 8008d04:	f000 fd16 	bl	8009734 <_free_r>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d0c:	e00d      	b.n	8008d2a <__sflush_r+0xae>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	4628      	mov	r0, r5
 8008d12:	47b0      	blx	r6
 8008d14:	4602      	mov	r2, r0
 8008d16:	1c50      	adds	r0, r2, #1
 8008d18:	d1c9      	bne.n	8008cae <__sflush_r+0x32>
 8008d1a:	682b      	ldr	r3, [r5, #0]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d0c6      	beq.n	8008cae <__sflush_r+0x32>
 8008d20:	2b1d      	cmp	r3, #29
 8008d22:	d001      	beq.n	8008d28 <__sflush_r+0xac>
 8008d24:	2b16      	cmp	r3, #22
 8008d26:	d11e      	bne.n	8008d66 <__sflush_r+0xea>
 8008d28:	602f      	str	r7, [r5, #0]
 8008d2a:	2000      	movs	r0, #0
 8008d2c:	e022      	b.n	8008d74 <__sflush_r+0xf8>
 8008d2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d32:	b21b      	sxth	r3, r3
 8008d34:	e01b      	b.n	8008d6e <__sflush_r+0xf2>
 8008d36:	690f      	ldr	r7, [r1, #16]
 8008d38:	2f00      	cmp	r7, #0
 8008d3a:	d0f6      	beq.n	8008d2a <__sflush_r+0xae>
 8008d3c:	0793      	lsls	r3, r2, #30
 8008d3e:	680e      	ldr	r6, [r1, #0]
 8008d40:	bf08      	it	eq
 8008d42:	694b      	ldreq	r3, [r1, #20]
 8008d44:	600f      	str	r7, [r1, #0]
 8008d46:	bf18      	it	ne
 8008d48:	2300      	movne	r3, #0
 8008d4a:	eba6 0807 	sub.w	r8, r6, r7
 8008d4e:	608b      	str	r3, [r1, #8]
 8008d50:	f1b8 0f00 	cmp.w	r8, #0
 8008d54:	dde9      	ble.n	8008d2a <__sflush_r+0xae>
 8008d56:	6a21      	ldr	r1, [r4, #32]
 8008d58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008d5a:	4643      	mov	r3, r8
 8008d5c:	463a      	mov	r2, r7
 8008d5e:	4628      	mov	r0, r5
 8008d60:	47b0      	blx	r6
 8008d62:	2800      	cmp	r0, #0
 8008d64:	dc08      	bgt.n	8008d78 <__sflush_r+0xfc>
 8008d66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d6e:	81a3      	strh	r3, [r4, #12]
 8008d70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d78:	4407      	add	r7, r0
 8008d7a:	eba8 0800 	sub.w	r8, r8, r0
 8008d7e:	e7e7      	b.n	8008d50 <__sflush_r+0xd4>
 8008d80:	dfbffffe 	.word	0xdfbffffe

08008d84 <_fflush_r>:
 8008d84:	b538      	push	{r3, r4, r5, lr}
 8008d86:	690b      	ldr	r3, [r1, #16]
 8008d88:	4605      	mov	r5, r0
 8008d8a:	460c      	mov	r4, r1
 8008d8c:	b913      	cbnz	r3, 8008d94 <_fflush_r+0x10>
 8008d8e:	2500      	movs	r5, #0
 8008d90:	4628      	mov	r0, r5
 8008d92:	bd38      	pop	{r3, r4, r5, pc}
 8008d94:	b118      	cbz	r0, 8008d9e <_fflush_r+0x1a>
 8008d96:	6a03      	ldr	r3, [r0, #32]
 8008d98:	b90b      	cbnz	r3, 8008d9e <_fflush_r+0x1a>
 8008d9a:	f7fe feb1 	bl	8007b00 <__sinit>
 8008d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d0f3      	beq.n	8008d8e <_fflush_r+0xa>
 8008da6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008da8:	07d0      	lsls	r0, r2, #31
 8008daa:	d404      	bmi.n	8008db6 <_fflush_r+0x32>
 8008dac:	0599      	lsls	r1, r3, #22
 8008dae:	d402      	bmi.n	8008db6 <_fflush_r+0x32>
 8008db0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008db2:	f7fe ff12 	bl	8007bda <__retarget_lock_acquire_recursive>
 8008db6:	4628      	mov	r0, r5
 8008db8:	4621      	mov	r1, r4
 8008dba:	f7ff ff5f 	bl	8008c7c <__sflush_r>
 8008dbe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008dc0:	07da      	lsls	r2, r3, #31
 8008dc2:	4605      	mov	r5, r0
 8008dc4:	d4e4      	bmi.n	8008d90 <_fflush_r+0xc>
 8008dc6:	89a3      	ldrh	r3, [r4, #12]
 8008dc8:	059b      	lsls	r3, r3, #22
 8008dca:	d4e1      	bmi.n	8008d90 <_fflush_r+0xc>
 8008dcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dce:	f7fe ff05 	bl	8007bdc <__retarget_lock_release_recursive>
 8008dd2:	e7dd      	b.n	8008d90 <_fflush_r+0xc>

08008dd4 <__malloc_lock>:
 8008dd4:	4801      	ldr	r0, [pc, #4]	@ (8008ddc <__malloc_lock+0x8>)
 8008dd6:	f7fe bf00 	b.w	8007bda <__retarget_lock_acquire_recursive>
 8008dda:	bf00      	nop
 8008ddc:	20000a8c 	.word	0x20000a8c

08008de0 <__malloc_unlock>:
 8008de0:	4801      	ldr	r0, [pc, #4]	@ (8008de8 <__malloc_unlock+0x8>)
 8008de2:	f7fe befb 	b.w	8007bdc <__retarget_lock_release_recursive>
 8008de6:	bf00      	nop
 8008de8:	20000a8c 	.word	0x20000a8c

08008dec <_Balloc>:
 8008dec:	b570      	push	{r4, r5, r6, lr}
 8008dee:	69c6      	ldr	r6, [r0, #28]
 8008df0:	4604      	mov	r4, r0
 8008df2:	460d      	mov	r5, r1
 8008df4:	b976      	cbnz	r6, 8008e14 <_Balloc+0x28>
 8008df6:	2010      	movs	r0, #16
 8008df8:	f7ff fe96 	bl	8008b28 <malloc>
 8008dfc:	4602      	mov	r2, r0
 8008dfe:	61e0      	str	r0, [r4, #28]
 8008e00:	b920      	cbnz	r0, 8008e0c <_Balloc+0x20>
 8008e02:	4b18      	ldr	r3, [pc, #96]	@ (8008e64 <_Balloc+0x78>)
 8008e04:	4818      	ldr	r0, [pc, #96]	@ (8008e68 <_Balloc+0x7c>)
 8008e06:	216b      	movs	r1, #107	@ 0x6b
 8008e08:	f000 fc62 	bl	80096d0 <__assert_func>
 8008e0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e10:	6006      	str	r6, [r0, #0]
 8008e12:	60c6      	str	r6, [r0, #12]
 8008e14:	69e6      	ldr	r6, [r4, #28]
 8008e16:	68f3      	ldr	r3, [r6, #12]
 8008e18:	b183      	cbz	r3, 8008e3c <_Balloc+0x50>
 8008e1a:	69e3      	ldr	r3, [r4, #28]
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008e22:	b9b8      	cbnz	r0, 8008e54 <_Balloc+0x68>
 8008e24:	2101      	movs	r1, #1
 8008e26:	fa01 f605 	lsl.w	r6, r1, r5
 8008e2a:	1d72      	adds	r2, r6, #5
 8008e2c:	0092      	lsls	r2, r2, #2
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f000 fc6c 	bl	800970c <_calloc_r>
 8008e34:	b160      	cbz	r0, 8008e50 <_Balloc+0x64>
 8008e36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008e3a:	e00e      	b.n	8008e5a <_Balloc+0x6e>
 8008e3c:	2221      	movs	r2, #33	@ 0x21
 8008e3e:	2104      	movs	r1, #4
 8008e40:	4620      	mov	r0, r4
 8008e42:	f000 fc63 	bl	800970c <_calloc_r>
 8008e46:	69e3      	ldr	r3, [r4, #28]
 8008e48:	60f0      	str	r0, [r6, #12]
 8008e4a:	68db      	ldr	r3, [r3, #12]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d1e4      	bne.n	8008e1a <_Balloc+0x2e>
 8008e50:	2000      	movs	r0, #0
 8008e52:	bd70      	pop	{r4, r5, r6, pc}
 8008e54:	6802      	ldr	r2, [r0, #0]
 8008e56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008e60:	e7f7      	b.n	8008e52 <_Balloc+0x66>
 8008e62:	bf00      	nop
 8008e64:	08009edd 	.word	0x08009edd
 8008e68:	08009f6e 	.word	0x08009f6e

08008e6c <_Bfree>:
 8008e6c:	b570      	push	{r4, r5, r6, lr}
 8008e6e:	69c6      	ldr	r6, [r0, #28]
 8008e70:	4605      	mov	r5, r0
 8008e72:	460c      	mov	r4, r1
 8008e74:	b976      	cbnz	r6, 8008e94 <_Bfree+0x28>
 8008e76:	2010      	movs	r0, #16
 8008e78:	f7ff fe56 	bl	8008b28 <malloc>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	61e8      	str	r0, [r5, #28]
 8008e80:	b920      	cbnz	r0, 8008e8c <_Bfree+0x20>
 8008e82:	4b09      	ldr	r3, [pc, #36]	@ (8008ea8 <_Bfree+0x3c>)
 8008e84:	4809      	ldr	r0, [pc, #36]	@ (8008eac <_Bfree+0x40>)
 8008e86:	218f      	movs	r1, #143	@ 0x8f
 8008e88:	f000 fc22 	bl	80096d0 <__assert_func>
 8008e8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008e90:	6006      	str	r6, [r0, #0]
 8008e92:	60c6      	str	r6, [r0, #12]
 8008e94:	b13c      	cbz	r4, 8008ea6 <_Bfree+0x3a>
 8008e96:	69eb      	ldr	r3, [r5, #28]
 8008e98:	6862      	ldr	r2, [r4, #4]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ea0:	6021      	str	r1, [r4, #0]
 8008ea2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ea6:	bd70      	pop	{r4, r5, r6, pc}
 8008ea8:	08009edd 	.word	0x08009edd
 8008eac:	08009f6e 	.word	0x08009f6e

08008eb0 <__multadd>:
 8008eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008eb4:	690d      	ldr	r5, [r1, #16]
 8008eb6:	4607      	mov	r7, r0
 8008eb8:	460c      	mov	r4, r1
 8008eba:	461e      	mov	r6, r3
 8008ebc:	f101 0c14 	add.w	ip, r1, #20
 8008ec0:	2000      	movs	r0, #0
 8008ec2:	f8dc 3000 	ldr.w	r3, [ip]
 8008ec6:	b299      	uxth	r1, r3
 8008ec8:	fb02 6101 	mla	r1, r2, r1, r6
 8008ecc:	0c1e      	lsrs	r6, r3, #16
 8008ece:	0c0b      	lsrs	r3, r1, #16
 8008ed0:	fb02 3306 	mla	r3, r2, r6, r3
 8008ed4:	b289      	uxth	r1, r1
 8008ed6:	3001      	adds	r0, #1
 8008ed8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008edc:	4285      	cmp	r5, r0
 8008ede:	f84c 1b04 	str.w	r1, [ip], #4
 8008ee2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008ee6:	dcec      	bgt.n	8008ec2 <__multadd+0x12>
 8008ee8:	b30e      	cbz	r6, 8008f2e <__multadd+0x7e>
 8008eea:	68a3      	ldr	r3, [r4, #8]
 8008eec:	42ab      	cmp	r3, r5
 8008eee:	dc19      	bgt.n	8008f24 <__multadd+0x74>
 8008ef0:	6861      	ldr	r1, [r4, #4]
 8008ef2:	4638      	mov	r0, r7
 8008ef4:	3101      	adds	r1, #1
 8008ef6:	f7ff ff79 	bl	8008dec <_Balloc>
 8008efa:	4680      	mov	r8, r0
 8008efc:	b928      	cbnz	r0, 8008f0a <__multadd+0x5a>
 8008efe:	4602      	mov	r2, r0
 8008f00:	4b0c      	ldr	r3, [pc, #48]	@ (8008f34 <__multadd+0x84>)
 8008f02:	480d      	ldr	r0, [pc, #52]	@ (8008f38 <__multadd+0x88>)
 8008f04:	21ba      	movs	r1, #186	@ 0xba
 8008f06:	f000 fbe3 	bl	80096d0 <__assert_func>
 8008f0a:	6922      	ldr	r2, [r4, #16]
 8008f0c:	3202      	adds	r2, #2
 8008f0e:	f104 010c 	add.w	r1, r4, #12
 8008f12:	0092      	lsls	r2, r2, #2
 8008f14:	300c      	adds	r0, #12
 8008f16:	f000 fbcd 	bl	80096b4 <memcpy>
 8008f1a:	4621      	mov	r1, r4
 8008f1c:	4638      	mov	r0, r7
 8008f1e:	f7ff ffa5 	bl	8008e6c <_Bfree>
 8008f22:	4644      	mov	r4, r8
 8008f24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008f28:	3501      	adds	r5, #1
 8008f2a:	615e      	str	r6, [r3, #20]
 8008f2c:	6125      	str	r5, [r4, #16]
 8008f2e:	4620      	mov	r0, r4
 8008f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f34:	08009f4c 	.word	0x08009f4c
 8008f38:	08009f6e 	.word	0x08009f6e

08008f3c <__hi0bits>:
 8008f3c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008f40:	4603      	mov	r3, r0
 8008f42:	bf36      	itet	cc
 8008f44:	0403      	lslcc	r3, r0, #16
 8008f46:	2000      	movcs	r0, #0
 8008f48:	2010      	movcc	r0, #16
 8008f4a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008f4e:	bf3c      	itt	cc
 8008f50:	021b      	lslcc	r3, r3, #8
 8008f52:	3008      	addcc	r0, #8
 8008f54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f58:	bf3c      	itt	cc
 8008f5a:	011b      	lslcc	r3, r3, #4
 8008f5c:	3004      	addcc	r0, #4
 8008f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f62:	bf3c      	itt	cc
 8008f64:	009b      	lslcc	r3, r3, #2
 8008f66:	3002      	addcc	r0, #2
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	db05      	blt.n	8008f78 <__hi0bits+0x3c>
 8008f6c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008f70:	f100 0001 	add.w	r0, r0, #1
 8008f74:	bf08      	it	eq
 8008f76:	2020      	moveq	r0, #32
 8008f78:	4770      	bx	lr

08008f7a <__lo0bits>:
 8008f7a:	6803      	ldr	r3, [r0, #0]
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	f013 0007 	ands.w	r0, r3, #7
 8008f82:	d00b      	beq.n	8008f9c <__lo0bits+0x22>
 8008f84:	07d9      	lsls	r1, r3, #31
 8008f86:	d421      	bmi.n	8008fcc <__lo0bits+0x52>
 8008f88:	0798      	lsls	r0, r3, #30
 8008f8a:	bf49      	itett	mi
 8008f8c:	085b      	lsrmi	r3, r3, #1
 8008f8e:	089b      	lsrpl	r3, r3, #2
 8008f90:	2001      	movmi	r0, #1
 8008f92:	6013      	strmi	r3, [r2, #0]
 8008f94:	bf5c      	itt	pl
 8008f96:	6013      	strpl	r3, [r2, #0]
 8008f98:	2002      	movpl	r0, #2
 8008f9a:	4770      	bx	lr
 8008f9c:	b299      	uxth	r1, r3
 8008f9e:	b909      	cbnz	r1, 8008fa4 <__lo0bits+0x2a>
 8008fa0:	0c1b      	lsrs	r3, r3, #16
 8008fa2:	2010      	movs	r0, #16
 8008fa4:	b2d9      	uxtb	r1, r3
 8008fa6:	b909      	cbnz	r1, 8008fac <__lo0bits+0x32>
 8008fa8:	3008      	adds	r0, #8
 8008faa:	0a1b      	lsrs	r3, r3, #8
 8008fac:	0719      	lsls	r1, r3, #28
 8008fae:	bf04      	itt	eq
 8008fb0:	091b      	lsreq	r3, r3, #4
 8008fb2:	3004      	addeq	r0, #4
 8008fb4:	0799      	lsls	r1, r3, #30
 8008fb6:	bf04      	itt	eq
 8008fb8:	089b      	lsreq	r3, r3, #2
 8008fba:	3002      	addeq	r0, #2
 8008fbc:	07d9      	lsls	r1, r3, #31
 8008fbe:	d403      	bmi.n	8008fc8 <__lo0bits+0x4e>
 8008fc0:	085b      	lsrs	r3, r3, #1
 8008fc2:	f100 0001 	add.w	r0, r0, #1
 8008fc6:	d003      	beq.n	8008fd0 <__lo0bits+0x56>
 8008fc8:	6013      	str	r3, [r2, #0]
 8008fca:	4770      	bx	lr
 8008fcc:	2000      	movs	r0, #0
 8008fce:	4770      	bx	lr
 8008fd0:	2020      	movs	r0, #32
 8008fd2:	4770      	bx	lr

08008fd4 <__i2b>:
 8008fd4:	b510      	push	{r4, lr}
 8008fd6:	460c      	mov	r4, r1
 8008fd8:	2101      	movs	r1, #1
 8008fda:	f7ff ff07 	bl	8008dec <_Balloc>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	b928      	cbnz	r0, 8008fee <__i2b+0x1a>
 8008fe2:	4b05      	ldr	r3, [pc, #20]	@ (8008ff8 <__i2b+0x24>)
 8008fe4:	4805      	ldr	r0, [pc, #20]	@ (8008ffc <__i2b+0x28>)
 8008fe6:	f240 1145 	movw	r1, #325	@ 0x145
 8008fea:	f000 fb71 	bl	80096d0 <__assert_func>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	6144      	str	r4, [r0, #20]
 8008ff2:	6103      	str	r3, [r0, #16]
 8008ff4:	bd10      	pop	{r4, pc}
 8008ff6:	bf00      	nop
 8008ff8:	08009f4c 	.word	0x08009f4c
 8008ffc:	08009f6e 	.word	0x08009f6e

08009000 <__multiply>:
 8009000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009004:	4614      	mov	r4, r2
 8009006:	690a      	ldr	r2, [r1, #16]
 8009008:	6923      	ldr	r3, [r4, #16]
 800900a:	429a      	cmp	r2, r3
 800900c:	bfa8      	it	ge
 800900e:	4623      	movge	r3, r4
 8009010:	460f      	mov	r7, r1
 8009012:	bfa4      	itt	ge
 8009014:	460c      	movge	r4, r1
 8009016:	461f      	movge	r7, r3
 8009018:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800901c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009020:	68a3      	ldr	r3, [r4, #8]
 8009022:	6861      	ldr	r1, [r4, #4]
 8009024:	eb0a 0609 	add.w	r6, sl, r9
 8009028:	42b3      	cmp	r3, r6
 800902a:	b085      	sub	sp, #20
 800902c:	bfb8      	it	lt
 800902e:	3101      	addlt	r1, #1
 8009030:	f7ff fedc 	bl	8008dec <_Balloc>
 8009034:	b930      	cbnz	r0, 8009044 <__multiply+0x44>
 8009036:	4602      	mov	r2, r0
 8009038:	4b44      	ldr	r3, [pc, #272]	@ (800914c <__multiply+0x14c>)
 800903a:	4845      	ldr	r0, [pc, #276]	@ (8009150 <__multiply+0x150>)
 800903c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009040:	f000 fb46 	bl	80096d0 <__assert_func>
 8009044:	f100 0514 	add.w	r5, r0, #20
 8009048:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800904c:	462b      	mov	r3, r5
 800904e:	2200      	movs	r2, #0
 8009050:	4543      	cmp	r3, r8
 8009052:	d321      	bcc.n	8009098 <__multiply+0x98>
 8009054:	f107 0114 	add.w	r1, r7, #20
 8009058:	f104 0214 	add.w	r2, r4, #20
 800905c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009060:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009064:	9302      	str	r3, [sp, #8]
 8009066:	1b13      	subs	r3, r2, r4
 8009068:	3b15      	subs	r3, #21
 800906a:	f023 0303 	bic.w	r3, r3, #3
 800906e:	3304      	adds	r3, #4
 8009070:	f104 0715 	add.w	r7, r4, #21
 8009074:	42ba      	cmp	r2, r7
 8009076:	bf38      	it	cc
 8009078:	2304      	movcc	r3, #4
 800907a:	9301      	str	r3, [sp, #4]
 800907c:	9b02      	ldr	r3, [sp, #8]
 800907e:	9103      	str	r1, [sp, #12]
 8009080:	428b      	cmp	r3, r1
 8009082:	d80c      	bhi.n	800909e <__multiply+0x9e>
 8009084:	2e00      	cmp	r6, #0
 8009086:	dd03      	ble.n	8009090 <__multiply+0x90>
 8009088:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800908c:	2b00      	cmp	r3, #0
 800908e:	d05b      	beq.n	8009148 <__multiply+0x148>
 8009090:	6106      	str	r6, [r0, #16]
 8009092:	b005      	add	sp, #20
 8009094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009098:	f843 2b04 	str.w	r2, [r3], #4
 800909c:	e7d8      	b.n	8009050 <__multiply+0x50>
 800909e:	f8b1 a000 	ldrh.w	sl, [r1]
 80090a2:	f1ba 0f00 	cmp.w	sl, #0
 80090a6:	d024      	beq.n	80090f2 <__multiply+0xf2>
 80090a8:	f104 0e14 	add.w	lr, r4, #20
 80090ac:	46a9      	mov	r9, r5
 80090ae:	f04f 0c00 	mov.w	ip, #0
 80090b2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80090b6:	f8d9 3000 	ldr.w	r3, [r9]
 80090ba:	fa1f fb87 	uxth.w	fp, r7
 80090be:	b29b      	uxth	r3, r3
 80090c0:	fb0a 330b 	mla	r3, sl, fp, r3
 80090c4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80090c8:	f8d9 7000 	ldr.w	r7, [r9]
 80090cc:	4463      	add	r3, ip
 80090ce:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80090d2:	fb0a c70b 	mla	r7, sl, fp, ip
 80090d6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80090da:	b29b      	uxth	r3, r3
 80090dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80090e0:	4572      	cmp	r2, lr
 80090e2:	f849 3b04 	str.w	r3, [r9], #4
 80090e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80090ea:	d8e2      	bhi.n	80090b2 <__multiply+0xb2>
 80090ec:	9b01      	ldr	r3, [sp, #4]
 80090ee:	f845 c003 	str.w	ip, [r5, r3]
 80090f2:	9b03      	ldr	r3, [sp, #12]
 80090f4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80090f8:	3104      	adds	r1, #4
 80090fa:	f1b9 0f00 	cmp.w	r9, #0
 80090fe:	d021      	beq.n	8009144 <__multiply+0x144>
 8009100:	682b      	ldr	r3, [r5, #0]
 8009102:	f104 0c14 	add.w	ip, r4, #20
 8009106:	46ae      	mov	lr, r5
 8009108:	f04f 0a00 	mov.w	sl, #0
 800910c:	f8bc b000 	ldrh.w	fp, [ip]
 8009110:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009114:	fb09 770b 	mla	r7, r9, fp, r7
 8009118:	4457      	add	r7, sl
 800911a:	b29b      	uxth	r3, r3
 800911c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009120:	f84e 3b04 	str.w	r3, [lr], #4
 8009124:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009128:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800912c:	f8be 3000 	ldrh.w	r3, [lr]
 8009130:	fb09 330a 	mla	r3, r9, sl, r3
 8009134:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009138:	4562      	cmp	r2, ip
 800913a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800913e:	d8e5      	bhi.n	800910c <__multiply+0x10c>
 8009140:	9f01      	ldr	r7, [sp, #4]
 8009142:	51eb      	str	r3, [r5, r7]
 8009144:	3504      	adds	r5, #4
 8009146:	e799      	b.n	800907c <__multiply+0x7c>
 8009148:	3e01      	subs	r6, #1
 800914a:	e79b      	b.n	8009084 <__multiply+0x84>
 800914c:	08009f4c 	.word	0x08009f4c
 8009150:	08009f6e 	.word	0x08009f6e

08009154 <__pow5mult>:
 8009154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009158:	4615      	mov	r5, r2
 800915a:	f012 0203 	ands.w	r2, r2, #3
 800915e:	4607      	mov	r7, r0
 8009160:	460e      	mov	r6, r1
 8009162:	d007      	beq.n	8009174 <__pow5mult+0x20>
 8009164:	4c25      	ldr	r4, [pc, #148]	@ (80091fc <__pow5mult+0xa8>)
 8009166:	3a01      	subs	r2, #1
 8009168:	2300      	movs	r3, #0
 800916a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800916e:	f7ff fe9f 	bl	8008eb0 <__multadd>
 8009172:	4606      	mov	r6, r0
 8009174:	10ad      	asrs	r5, r5, #2
 8009176:	d03d      	beq.n	80091f4 <__pow5mult+0xa0>
 8009178:	69fc      	ldr	r4, [r7, #28]
 800917a:	b97c      	cbnz	r4, 800919c <__pow5mult+0x48>
 800917c:	2010      	movs	r0, #16
 800917e:	f7ff fcd3 	bl	8008b28 <malloc>
 8009182:	4602      	mov	r2, r0
 8009184:	61f8      	str	r0, [r7, #28]
 8009186:	b928      	cbnz	r0, 8009194 <__pow5mult+0x40>
 8009188:	4b1d      	ldr	r3, [pc, #116]	@ (8009200 <__pow5mult+0xac>)
 800918a:	481e      	ldr	r0, [pc, #120]	@ (8009204 <__pow5mult+0xb0>)
 800918c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009190:	f000 fa9e 	bl	80096d0 <__assert_func>
 8009194:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009198:	6004      	str	r4, [r0, #0]
 800919a:	60c4      	str	r4, [r0, #12]
 800919c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80091a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80091a4:	b94c      	cbnz	r4, 80091ba <__pow5mult+0x66>
 80091a6:	f240 2171 	movw	r1, #625	@ 0x271
 80091aa:	4638      	mov	r0, r7
 80091ac:	f7ff ff12 	bl	8008fd4 <__i2b>
 80091b0:	2300      	movs	r3, #0
 80091b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80091b6:	4604      	mov	r4, r0
 80091b8:	6003      	str	r3, [r0, #0]
 80091ba:	f04f 0900 	mov.w	r9, #0
 80091be:	07eb      	lsls	r3, r5, #31
 80091c0:	d50a      	bpl.n	80091d8 <__pow5mult+0x84>
 80091c2:	4631      	mov	r1, r6
 80091c4:	4622      	mov	r2, r4
 80091c6:	4638      	mov	r0, r7
 80091c8:	f7ff ff1a 	bl	8009000 <__multiply>
 80091cc:	4631      	mov	r1, r6
 80091ce:	4680      	mov	r8, r0
 80091d0:	4638      	mov	r0, r7
 80091d2:	f7ff fe4b 	bl	8008e6c <_Bfree>
 80091d6:	4646      	mov	r6, r8
 80091d8:	106d      	asrs	r5, r5, #1
 80091da:	d00b      	beq.n	80091f4 <__pow5mult+0xa0>
 80091dc:	6820      	ldr	r0, [r4, #0]
 80091de:	b938      	cbnz	r0, 80091f0 <__pow5mult+0x9c>
 80091e0:	4622      	mov	r2, r4
 80091e2:	4621      	mov	r1, r4
 80091e4:	4638      	mov	r0, r7
 80091e6:	f7ff ff0b 	bl	8009000 <__multiply>
 80091ea:	6020      	str	r0, [r4, #0]
 80091ec:	f8c0 9000 	str.w	r9, [r0]
 80091f0:	4604      	mov	r4, r0
 80091f2:	e7e4      	b.n	80091be <__pow5mult+0x6a>
 80091f4:	4630      	mov	r0, r6
 80091f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091fa:	bf00      	nop
 80091fc:	08009fc8 	.word	0x08009fc8
 8009200:	08009edd 	.word	0x08009edd
 8009204:	08009f6e 	.word	0x08009f6e

08009208 <__lshift>:
 8009208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800920c:	460c      	mov	r4, r1
 800920e:	6849      	ldr	r1, [r1, #4]
 8009210:	6923      	ldr	r3, [r4, #16]
 8009212:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009216:	68a3      	ldr	r3, [r4, #8]
 8009218:	4607      	mov	r7, r0
 800921a:	4691      	mov	r9, r2
 800921c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009220:	f108 0601 	add.w	r6, r8, #1
 8009224:	42b3      	cmp	r3, r6
 8009226:	db0b      	blt.n	8009240 <__lshift+0x38>
 8009228:	4638      	mov	r0, r7
 800922a:	f7ff fddf 	bl	8008dec <_Balloc>
 800922e:	4605      	mov	r5, r0
 8009230:	b948      	cbnz	r0, 8009246 <__lshift+0x3e>
 8009232:	4602      	mov	r2, r0
 8009234:	4b28      	ldr	r3, [pc, #160]	@ (80092d8 <__lshift+0xd0>)
 8009236:	4829      	ldr	r0, [pc, #164]	@ (80092dc <__lshift+0xd4>)
 8009238:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800923c:	f000 fa48 	bl	80096d0 <__assert_func>
 8009240:	3101      	adds	r1, #1
 8009242:	005b      	lsls	r3, r3, #1
 8009244:	e7ee      	b.n	8009224 <__lshift+0x1c>
 8009246:	2300      	movs	r3, #0
 8009248:	f100 0114 	add.w	r1, r0, #20
 800924c:	f100 0210 	add.w	r2, r0, #16
 8009250:	4618      	mov	r0, r3
 8009252:	4553      	cmp	r3, sl
 8009254:	db33      	blt.n	80092be <__lshift+0xb6>
 8009256:	6920      	ldr	r0, [r4, #16]
 8009258:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800925c:	f104 0314 	add.w	r3, r4, #20
 8009260:	f019 091f 	ands.w	r9, r9, #31
 8009264:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009268:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800926c:	d02b      	beq.n	80092c6 <__lshift+0xbe>
 800926e:	f1c9 0e20 	rsb	lr, r9, #32
 8009272:	468a      	mov	sl, r1
 8009274:	2200      	movs	r2, #0
 8009276:	6818      	ldr	r0, [r3, #0]
 8009278:	fa00 f009 	lsl.w	r0, r0, r9
 800927c:	4310      	orrs	r0, r2
 800927e:	f84a 0b04 	str.w	r0, [sl], #4
 8009282:	f853 2b04 	ldr.w	r2, [r3], #4
 8009286:	459c      	cmp	ip, r3
 8009288:	fa22 f20e 	lsr.w	r2, r2, lr
 800928c:	d8f3      	bhi.n	8009276 <__lshift+0x6e>
 800928e:	ebac 0304 	sub.w	r3, ip, r4
 8009292:	3b15      	subs	r3, #21
 8009294:	f023 0303 	bic.w	r3, r3, #3
 8009298:	3304      	adds	r3, #4
 800929a:	f104 0015 	add.w	r0, r4, #21
 800929e:	4584      	cmp	ip, r0
 80092a0:	bf38      	it	cc
 80092a2:	2304      	movcc	r3, #4
 80092a4:	50ca      	str	r2, [r1, r3]
 80092a6:	b10a      	cbz	r2, 80092ac <__lshift+0xa4>
 80092a8:	f108 0602 	add.w	r6, r8, #2
 80092ac:	3e01      	subs	r6, #1
 80092ae:	4638      	mov	r0, r7
 80092b0:	612e      	str	r6, [r5, #16]
 80092b2:	4621      	mov	r1, r4
 80092b4:	f7ff fdda 	bl	8008e6c <_Bfree>
 80092b8:	4628      	mov	r0, r5
 80092ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092be:	f842 0f04 	str.w	r0, [r2, #4]!
 80092c2:	3301      	adds	r3, #1
 80092c4:	e7c5      	b.n	8009252 <__lshift+0x4a>
 80092c6:	3904      	subs	r1, #4
 80092c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80092cc:	f841 2f04 	str.w	r2, [r1, #4]!
 80092d0:	459c      	cmp	ip, r3
 80092d2:	d8f9      	bhi.n	80092c8 <__lshift+0xc0>
 80092d4:	e7ea      	b.n	80092ac <__lshift+0xa4>
 80092d6:	bf00      	nop
 80092d8:	08009f4c 	.word	0x08009f4c
 80092dc:	08009f6e 	.word	0x08009f6e

080092e0 <__mcmp>:
 80092e0:	690a      	ldr	r2, [r1, #16]
 80092e2:	4603      	mov	r3, r0
 80092e4:	6900      	ldr	r0, [r0, #16]
 80092e6:	1a80      	subs	r0, r0, r2
 80092e8:	b530      	push	{r4, r5, lr}
 80092ea:	d10e      	bne.n	800930a <__mcmp+0x2a>
 80092ec:	3314      	adds	r3, #20
 80092ee:	3114      	adds	r1, #20
 80092f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80092f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80092f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80092fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009300:	4295      	cmp	r5, r2
 8009302:	d003      	beq.n	800930c <__mcmp+0x2c>
 8009304:	d205      	bcs.n	8009312 <__mcmp+0x32>
 8009306:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800930a:	bd30      	pop	{r4, r5, pc}
 800930c:	42a3      	cmp	r3, r4
 800930e:	d3f3      	bcc.n	80092f8 <__mcmp+0x18>
 8009310:	e7fb      	b.n	800930a <__mcmp+0x2a>
 8009312:	2001      	movs	r0, #1
 8009314:	e7f9      	b.n	800930a <__mcmp+0x2a>
	...

08009318 <__mdiff>:
 8009318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800931c:	4689      	mov	r9, r1
 800931e:	4606      	mov	r6, r0
 8009320:	4611      	mov	r1, r2
 8009322:	4648      	mov	r0, r9
 8009324:	4614      	mov	r4, r2
 8009326:	f7ff ffdb 	bl	80092e0 <__mcmp>
 800932a:	1e05      	subs	r5, r0, #0
 800932c:	d112      	bne.n	8009354 <__mdiff+0x3c>
 800932e:	4629      	mov	r1, r5
 8009330:	4630      	mov	r0, r6
 8009332:	f7ff fd5b 	bl	8008dec <_Balloc>
 8009336:	4602      	mov	r2, r0
 8009338:	b928      	cbnz	r0, 8009346 <__mdiff+0x2e>
 800933a:	4b3f      	ldr	r3, [pc, #252]	@ (8009438 <__mdiff+0x120>)
 800933c:	f240 2137 	movw	r1, #567	@ 0x237
 8009340:	483e      	ldr	r0, [pc, #248]	@ (800943c <__mdiff+0x124>)
 8009342:	f000 f9c5 	bl	80096d0 <__assert_func>
 8009346:	2301      	movs	r3, #1
 8009348:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800934c:	4610      	mov	r0, r2
 800934e:	b003      	add	sp, #12
 8009350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009354:	bfbc      	itt	lt
 8009356:	464b      	movlt	r3, r9
 8009358:	46a1      	movlt	r9, r4
 800935a:	4630      	mov	r0, r6
 800935c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009360:	bfba      	itte	lt
 8009362:	461c      	movlt	r4, r3
 8009364:	2501      	movlt	r5, #1
 8009366:	2500      	movge	r5, #0
 8009368:	f7ff fd40 	bl	8008dec <_Balloc>
 800936c:	4602      	mov	r2, r0
 800936e:	b918      	cbnz	r0, 8009378 <__mdiff+0x60>
 8009370:	4b31      	ldr	r3, [pc, #196]	@ (8009438 <__mdiff+0x120>)
 8009372:	f240 2145 	movw	r1, #581	@ 0x245
 8009376:	e7e3      	b.n	8009340 <__mdiff+0x28>
 8009378:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800937c:	6926      	ldr	r6, [r4, #16]
 800937e:	60c5      	str	r5, [r0, #12]
 8009380:	f109 0310 	add.w	r3, r9, #16
 8009384:	f109 0514 	add.w	r5, r9, #20
 8009388:	f104 0e14 	add.w	lr, r4, #20
 800938c:	f100 0b14 	add.w	fp, r0, #20
 8009390:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009394:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009398:	9301      	str	r3, [sp, #4]
 800939a:	46d9      	mov	r9, fp
 800939c:	f04f 0c00 	mov.w	ip, #0
 80093a0:	9b01      	ldr	r3, [sp, #4]
 80093a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80093a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80093aa:	9301      	str	r3, [sp, #4]
 80093ac:	fa1f f38a 	uxth.w	r3, sl
 80093b0:	4619      	mov	r1, r3
 80093b2:	b283      	uxth	r3, r0
 80093b4:	1acb      	subs	r3, r1, r3
 80093b6:	0c00      	lsrs	r0, r0, #16
 80093b8:	4463      	add	r3, ip
 80093ba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80093be:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80093c2:	b29b      	uxth	r3, r3
 80093c4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80093c8:	4576      	cmp	r6, lr
 80093ca:	f849 3b04 	str.w	r3, [r9], #4
 80093ce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80093d2:	d8e5      	bhi.n	80093a0 <__mdiff+0x88>
 80093d4:	1b33      	subs	r3, r6, r4
 80093d6:	3b15      	subs	r3, #21
 80093d8:	f023 0303 	bic.w	r3, r3, #3
 80093dc:	3415      	adds	r4, #21
 80093de:	3304      	adds	r3, #4
 80093e0:	42a6      	cmp	r6, r4
 80093e2:	bf38      	it	cc
 80093e4:	2304      	movcc	r3, #4
 80093e6:	441d      	add	r5, r3
 80093e8:	445b      	add	r3, fp
 80093ea:	461e      	mov	r6, r3
 80093ec:	462c      	mov	r4, r5
 80093ee:	4544      	cmp	r4, r8
 80093f0:	d30e      	bcc.n	8009410 <__mdiff+0xf8>
 80093f2:	f108 0103 	add.w	r1, r8, #3
 80093f6:	1b49      	subs	r1, r1, r5
 80093f8:	f021 0103 	bic.w	r1, r1, #3
 80093fc:	3d03      	subs	r5, #3
 80093fe:	45a8      	cmp	r8, r5
 8009400:	bf38      	it	cc
 8009402:	2100      	movcc	r1, #0
 8009404:	440b      	add	r3, r1
 8009406:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800940a:	b191      	cbz	r1, 8009432 <__mdiff+0x11a>
 800940c:	6117      	str	r7, [r2, #16]
 800940e:	e79d      	b.n	800934c <__mdiff+0x34>
 8009410:	f854 1b04 	ldr.w	r1, [r4], #4
 8009414:	46e6      	mov	lr, ip
 8009416:	0c08      	lsrs	r0, r1, #16
 8009418:	fa1c fc81 	uxtah	ip, ip, r1
 800941c:	4471      	add	r1, lr
 800941e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009422:	b289      	uxth	r1, r1
 8009424:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009428:	f846 1b04 	str.w	r1, [r6], #4
 800942c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009430:	e7dd      	b.n	80093ee <__mdiff+0xd6>
 8009432:	3f01      	subs	r7, #1
 8009434:	e7e7      	b.n	8009406 <__mdiff+0xee>
 8009436:	bf00      	nop
 8009438:	08009f4c 	.word	0x08009f4c
 800943c:	08009f6e 	.word	0x08009f6e

08009440 <__d2b>:
 8009440:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009444:	460f      	mov	r7, r1
 8009446:	2101      	movs	r1, #1
 8009448:	ec59 8b10 	vmov	r8, r9, d0
 800944c:	4616      	mov	r6, r2
 800944e:	f7ff fccd 	bl	8008dec <_Balloc>
 8009452:	4604      	mov	r4, r0
 8009454:	b930      	cbnz	r0, 8009464 <__d2b+0x24>
 8009456:	4602      	mov	r2, r0
 8009458:	4b23      	ldr	r3, [pc, #140]	@ (80094e8 <__d2b+0xa8>)
 800945a:	4824      	ldr	r0, [pc, #144]	@ (80094ec <__d2b+0xac>)
 800945c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009460:	f000 f936 	bl	80096d0 <__assert_func>
 8009464:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009468:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800946c:	b10d      	cbz	r5, 8009472 <__d2b+0x32>
 800946e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009472:	9301      	str	r3, [sp, #4]
 8009474:	f1b8 0300 	subs.w	r3, r8, #0
 8009478:	d023      	beq.n	80094c2 <__d2b+0x82>
 800947a:	4668      	mov	r0, sp
 800947c:	9300      	str	r3, [sp, #0]
 800947e:	f7ff fd7c 	bl	8008f7a <__lo0bits>
 8009482:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009486:	b1d0      	cbz	r0, 80094be <__d2b+0x7e>
 8009488:	f1c0 0320 	rsb	r3, r0, #32
 800948c:	fa02 f303 	lsl.w	r3, r2, r3
 8009490:	430b      	orrs	r3, r1
 8009492:	40c2      	lsrs	r2, r0
 8009494:	6163      	str	r3, [r4, #20]
 8009496:	9201      	str	r2, [sp, #4]
 8009498:	9b01      	ldr	r3, [sp, #4]
 800949a:	61a3      	str	r3, [r4, #24]
 800949c:	2b00      	cmp	r3, #0
 800949e:	bf0c      	ite	eq
 80094a0:	2201      	moveq	r2, #1
 80094a2:	2202      	movne	r2, #2
 80094a4:	6122      	str	r2, [r4, #16]
 80094a6:	b1a5      	cbz	r5, 80094d2 <__d2b+0x92>
 80094a8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80094ac:	4405      	add	r5, r0
 80094ae:	603d      	str	r5, [r7, #0]
 80094b0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80094b4:	6030      	str	r0, [r6, #0]
 80094b6:	4620      	mov	r0, r4
 80094b8:	b003      	add	sp, #12
 80094ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80094be:	6161      	str	r1, [r4, #20]
 80094c0:	e7ea      	b.n	8009498 <__d2b+0x58>
 80094c2:	a801      	add	r0, sp, #4
 80094c4:	f7ff fd59 	bl	8008f7a <__lo0bits>
 80094c8:	9b01      	ldr	r3, [sp, #4]
 80094ca:	6163      	str	r3, [r4, #20]
 80094cc:	3020      	adds	r0, #32
 80094ce:	2201      	movs	r2, #1
 80094d0:	e7e8      	b.n	80094a4 <__d2b+0x64>
 80094d2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80094d6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80094da:	6038      	str	r0, [r7, #0]
 80094dc:	6918      	ldr	r0, [r3, #16]
 80094de:	f7ff fd2d 	bl	8008f3c <__hi0bits>
 80094e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80094e6:	e7e5      	b.n	80094b4 <__d2b+0x74>
 80094e8:	08009f4c 	.word	0x08009f4c
 80094ec:	08009f6e 	.word	0x08009f6e

080094f0 <__sread>:
 80094f0:	b510      	push	{r4, lr}
 80094f2:	460c      	mov	r4, r1
 80094f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094f8:	f000 f8a8 	bl	800964c <_read_r>
 80094fc:	2800      	cmp	r0, #0
 80094fe:	bfab      	itete	ge
 8009500:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009502:	89a3      	ldrhlt	r3, [r4, #12]
 8009504:	181b      	addge	r3, r3, r0
 8009506:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800950a:	bfac      	ite	ge
 800950c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800950e:	81a3      	strhlt	r3, [r4, #12]
 8009510:	bd10      	pop	{r4, pc}

08009512 <__swrite>:
 8009512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009516:	461f      	mov	r7, r3
 8009518:	898b      	ldrh	r3, [r1, #12]
 800951a:	05db      	lsls	r3, r3, #23
 800951c:	4605      	mov	r5, r0
 800951e:	460c      	mov	r4, r1
 8009520:	4616      	mov	r6, r2
 8009522:	d505      	bpl.n	8009530 <__swrite+0x1e>
 8009524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009528:	2302      	movs	r3, #2
 800952a:	2200      	movs	r2, #0
 800952c:	f000 f87c 	bl	8009628 <_lseek_r>
 8009530:	89a3      	ldrh	r3, [r4, #12]
 8009532:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009536:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800953a:	81a3      	strh	r3, [r4, #12]
 800953c:	4632      	mov	r2, r6
 800953e:	463b      	mov	r3, r7
 8009540:	4628      	mov	r0, r5
 8009542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009546:	f000 b8a3 	b.w	8009690 <_write_r>

0800954a <__sseek>:
 800954a:	b510      	push	{r4, lr}
 800954c:	460c      	mov	r4, r1
 800954e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009552:	f000 f869 	bl	8009628 <_lseek_r>
 8009556:	1c43      	adds	r3, r0, #1
 8009558:	89a3      	ldrh	r3, [r4, #12]
 800955a:	bf15      	itete	ne
 800955c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800955e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009562:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009566:	81a3      	strheq	r3, [r4, #12]
 8009568:	bf18      	it	ne
 800956a:	81a3      	strhne	r3, [r4, #12]
 800956c:	bd10      	pop	{r4, pc}

0800956e <__sclose>:
 800956e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009572:	f000 b849 	b.w	8009608 <_close_r>

08009576 <_realloc_r>:
 8009576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800957a:	4680      	mov	r8, r0
 800957c:	4615      	mov	r5, r2
 800957e:	460c      	mov	r4, r1
 8009580:	b921      	cbnz	r1, 800958c <_realloc_r+0x16>
 8009582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009586:	4611      	mov	r1, r2
 8009588:	f7ff baf8 	b.w	8008b7c <_malloc_r>
 800958c:	b92a      	cbnz	r2, 800959a <_realloc_r+0x24>
 800958e:	f000 f8d1 	bl	8009734 <_free_r>
 8009592:	2400      	movs	r4, #0
 8009594:	4620      	mov	r0, r4
 8009596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800959a:	f000 f927 	bl	80097ec <_malloc_usable_size_r>
 800959e:	4285      	cmp	r5, r0
 80095a0:	4606      	mov	r6, r0
 80095a2:	d802      	bhi.n	80095aa <_realloc_r+0x34>
 80095a4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80095a8:	d8f4      	bhi.n	8009594 <_realloc_r+0x1e>
 80095aa:	4629      	mov	r1, r5
 80095ac:	4640      	mov	r0, r8
 80095ae:	f7ff fae5 	bl	8008b7c <_malloc_r>
 80095b2:	4607      	mov	r7, r0
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d0ec      	beq.n	8009592 <_realloc_r+0x1c>
 80095b8:	42b5      	cmp	r5, r6
 80095ba:	462a      	mov	r2, r5
 80095bc:	4621      	mov	r1, r4
 80095be:	bf28      	it	cs
 80095c0:	4632      	movcs	r2, r6
 80095c2:	f000 f877 	bl	80096b4 <memcpy>
 80095c6:	4621      	mov	r1, r4
 80095c8:	4640      	mov	r0, r8
 80095ca:	f000 f8b3 	bl	8009734 <_free_r>
 80095ce:	463c      	mov	r4, r7
 80095d0:	e7e0      	b.n	8009594 <_realloc_r+0x1e>

080095d2 <memmove>:
 80095d2:	4288      	cmp	r0, r1
 80095d4:	b510      	push	{r4, lr}
 80095d6:	eb01 0402 	add.w	r4, r1, r2
 80095da:	d902      	bls.n	80095e2 <memmove+0x10>
 80095dc:	4284      	cmp	r4, r0
 80095de:	4623      	mov	r3, r4
 80095e0:	d807      	bhi.n	80095f2 <memmove+0x20>
 80095e2:	1e43      	subs	r3, r0, #1
 80095e4:	42a1      	cmp	r1, r4
 80095e6:	d008      	beq.n	80095fa <memmove+0x28>
 80095e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095f0:	e7f8      	b.n	80095e4 <memmove+0x12>
 80095f2:	4402      	add	r2, r0
 80095f4:	4601      	mov	r1, r0
 80095f6:	428a      	cmp	r2, r1
 80095f8:	d100      	bne.n	80095fc <memmove+0x2a>
 80095fa:	bd10      	pop	{r4, pc}
 80095fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009600:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009604:	e7f7      	b.n	80095f6 <memmove+0x24>
	...

08009608 <_close_r>:
 8009608:	b538      	push	{r3, r4, r5, lr}
 800960a:	4d06      	ldr	r5, [pc, #24]	@ (8009624 <_close_r+0x1c>)
 800960c:	2300      	movs	r3, #0
 800960e:	4604      	mov	r4, r0
 8009610:	4608      	mov	r0, r1
 8009612:	602b      	str	r3, [r5, #0]
 8009614:	f7f8 fd80 	bl	8002118 <_close>
 8009618:	1c43      	adds	r3, r0, #1
 800961a:	d102      	bne.n	8009622 <_close_r+0x1a>
 800961c:	682b      	ldr	r3, [r5, #0]
 800961e:	b103      	cbz	r3, 8009622 <_close_r+0x1a>
 8009620:	6023      	str	r3, [r4, #0]
 8009622:	bd38      	pop	{r3, r4, r5, pc}
 8009624:	20000a98 	.word	0x20000a98

08009628 <_lseek_r>:
 8009628:	b538      	push	{r3, r4, r5, lr}
 800962a:	4d07      	ldr	r5, [pc, #28]	@ (8009648 <_lseek_r+0x20>)
 800962c:	4604      	mov	r4, r0
 800962e:	4608      	mov	r0, r1
 8009630:	4611      	mov	r1, r2
 8009632:	2200      	movs	r2, #0
 8009634:	602a      	str	r2, [r5, #0]
 8009636:	461a      	mov	r2, r3
 8009638:	f7f8 fd95 	bl	8002166 <_lseek>
 800963c:	1c43      	adds	r3, r0, #1
 800963e:	d102      	bne.n	8009646 <_lseek_r+0x1e>
 8009640:	682b      	ldr	r3, [r5, #0]
 8009642:	b103      	cbz	r3, 8009646 <_lseek_r+0x1e>
 8009644:	6023      	str	r3, [r4, #0]
 8009646:	bd38      	pop	{r3, r4, r5, pc}
 8009648:	20000a98 	.word	0x20000a98

0800964c <_read_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	4d07      	ldr	r5, [pc, #28]	@ (800966c <_read_r+0x20>)
 8009650:	4604      	mov	r4, r0
 8009652:	4608      	mov	r0, r1
 8009654:	4611      	mov	r1, r2
 8009656:	2200      	movs	r2, #0
 8009658:	602a      	str	r2, [r5, #0]
 800965a:	461a      	mov	r2, r3
 800965c:	f7f8 fd23 	bl	80020a6 <_read>
 8009660:	1c43      	adds	r3, r0, #1
 8009662:	d102      	bne.n	800966a <_read_r+0x1e>
 8009664:	682b      	ldr	r3, [r5, #0]
 8009666:	b103      	cbz	r3, 800966a <_read_r+0x1e>
 8009668:	6023      	str	r3, [r4, #0]
 800966a:	bd38      	pop	{r3, r4, r5, pc}
 800966c:	20000a98 	.word	0x20000a98

08009670 <_sbrk_r>:
 8009670:	b538      	push	{r3, r4, r5, lr}
 8009672:	4d06      	ldr	r5, [pc, #24]	@ (800968c <_sbrk_r+0x1c>)
 8009674:	2300      	movs	r3, #0
 8009676:	4604      	mov	r4, r0
 8009678:	4608      	mov	r0, r1
 800967a:	602b      	str	r3, [r5, #0]
 800967c:	f7f8 fd80 	bl	8002180 <_sbrk>
 8009680:	1c43      	adds	r3, r0, #1
 8009682:	d102      	bne.n	800968a <_sbrk_r+0x1a>
 8009684:	682b      	ldr	r3, [r5, #0]
 8009686:	b103      	cbz	r3, 800968a <_sbrk_r+0x1a>
 8009688:	6023      	str	r3, [r4, #0]
 800968a:	bd38      	pop	{r3, r4, r5, pc}
 800968c:	20000a98 	.word	0x20000a98

08009690 <_write_r>:
 8009690:	b538      	push	{r3, r4, r5, lr}
 8009692:	4d07      	ldr	r5, [pc, #28]	@ (80096b0 <_write_r+0x20>)
 8009694:	4604      	mov	r4, r0
 8009696:	4608      	mov	r0, r1
 8009698:	4611      	mov	r1, r2
 800969a:	2200      	movs	r2, #0
 800969c:	602a      	str	r2, [r5, #0]
 800969e:	461a      	mov	r2, r3
 80096a0:	f7f8 fd1e 	bl	80020e0 <_write>
 80096a4:	1c43      	adds	r3, r0, #1
 80096a6:	d102      	bne.n	80096ae <_write_r+0x1e>
 80096a8:	682b      	ldr	r3, [r5, #0]
 80096aa:	b103      	cbz	r3, 80096ae <_write_r+0x1e>
 80096ac:	6023      	str	r3, [r4, #0]
 80096ae:	bd38      	pop	{r3, r4, r5, pc}
 80096b0:	20000a98 	.word	0x20000a98

080096b4 <memcpy>:
 80096b4:	440a      	add	r2, r1
 80096b6:	4291      	cmp	r1, r2
 80096b8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80096bc:	d100      	bne.n	80096c0 <memcpy+0xc>
 80096be:	4770      	bx	lr
 80096c0:	b510      	push	{r4, lr}
 80096c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096ca:	4291      	cmp	r1, r2
 80096cc:	d1f9      	bne.n	80096c2 <memcpy+0xe>
 80096ce:	bd10      	pop	{r4, pc}

080096d0 <__assert_func>:
 80096d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096d2:	4614      	mov	r4, r2
 80096d4:	461a      	mov	r2, r3
 80096d6:	4b09      	ldr	r3, [pc, #36]	@ (80096fc <__assert_func+0x2c>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4605      	mov	r5, r0
 80096dc:	68d8      	ldr	r0, [r3, #12]
 80096de:	b954      	cbnz	r4, 80096f6 <__assert_func+0x26>
 80096e0:	4b07      	ldr	r3, [pc, #28]	@ (8009700 <__assert_func+0x30>)
 80096e2:	461c      	mov	r4, r3
 80096e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80096e8:	9100      	str	r1, [sp, #0]
 80096ea:	462b      	mov	r3, r5
 80096ec:	4905      	ldr	r1, [pc, #20]	@ (8009704 <__assert_func+0x34>)
 80096ee:	f000 f885 	bl	80097fc <fiprintf>
 80096f2:	f000 f8a2 	bl	800983a <abort>
 80096f6:	4b04      	ldr	r3, [pc, #16]	@ (8009708 <__assert_func+0x38>)
 80096f8:	e7f4      	b.n	80096e4 <__assert_func+0x14>
 80096fa:	bf00      	nop
 80096fc:	20000018 	.word	0x20000018
 8009700:	0800a20e 	.word	0x0800a20e
 8009704:	0800a1e0 	.word	0x0800a1e0
 8009708:	0800a1d3 	.word	0x0800a1d3

0800970c <_calloc_r>:
 800970c:	b570      	push	{r4, r5, r6, lr}
 800970e:	fba1 5402 	umull	r5, r4, r1, r2
 8009712:	b93c      	cbnz	r4, 8009724 <_calloc_r+0x18>
 8009714:	4629      	mov	r1, r5
 8009716:	f7ff fa31 	bl	8008b7c <_malloc_r>
 800971a:	4606      	mov	r6, r0
 800971c:	b928      	cbnz	r0, 800972a <_calloc_r+0x1e>
 800971e:	2600      	movs	r6, #0
 8009720:	4630      	mov	r0, r6
 8009722:	bd70      	pop	{r4, r5, r6, pc}
 8009724:	220c      	movs	r2, #12
 8009726:	6002      	str	r2, [r0, #0]
 8009728:	e7f9      	b.n	800971e <_calloc_r+0x12>
 800972a:	462a      	mov	r2, r5
 800972c:	4621      	mov	r1, r4
 800972e:	f7fe fa1d 	bl	8007b6c <memset>
 8009732:	e7f5      	b.n	8009720 <_calloc_r+0x14>

08009734 <_free_r>:
 8009734:	b538      	push	{r3, r4, r5, lr}
 8009736:	4605      	mov	r5, r0
 8009738:	2900      	cmp	r1, #0
 800973a:	d041      	beq.n	80097c0 <_free_r+0x8c>
 800973c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009740:	1f0c      	subs	r4, r1, #4
 8009742:	2b00      	cmp	r3, #0
 8009744:	bfb8      	it	lt
 8009746:	18e4      	addlt	r4, r4, r3
 8009748:	f7ff fb44 	bl	8008dd4 <__malloc_lock>
 800974c:	4a1d      	ldr	r2, [pc, #116]	@ (80097c4 <_free_r+0x90>)
 800974e:	6813      	ldr	r3, [r2, #0]
 8009750:	b933      	cbnz	r3, 8009760 <_free_r+0x2c>
 8009752:	6063      	str	r3, [r4, #4]
 8009754:	6014      	str	r4, [r2, #0]
 8009756:	4628      	mov	r0, r5
 8009758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800975c:	f7ff bb40 	b.w	8008de0 <__malloc_unlock>
 8009760:	42a3      	cmp	r3, r4
 8009762:	d908      	bls.n	8009776 <_free_r+0x42>
 8009764:	6820      	ldr	r0, [r4, #0]
 8009766:	1821      	adds	r1, r4, r0
 8009768:	428b      	cmp	r3, r1
 800976a:	bf01      	itttt	eq
 800976c:	6819      	ldreq	r1, [r3, #0]
 800976e:	685b      	ldreq	r3, [r3, #4]
 8009770:	1809      	addeq	r1, r1, r0
 8009772:	6021      	streq	r1, [r4, #0]
 8009774:	e7ed      	b.n	8009752 <_free_r+0x1e>
 8009776:	461a      	mov	r2, r3
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	b10b      	cbz	r3, 8009780 <_free_r+0x4c>
 800977c:	42a3      	cmp	r3, r4
 800977e:	d9fa      	bls.n	8009776 <_free_r+0x42>
 8009780:	6811      	ldr	r1, [r2, #0]
 8009782:	1850      	adds	r0, r2, r1
 8009784:	42a0      	cmp	r0, r4
 8009786:	d10b      	bne.n	80097a0 <_free_r+0x6c>
 8009788:	6820      	ldr	r0, [r4, #0]
 800978a:	4401      	add	r1, r0
 800978c:	1850      	adds	r0, r2, r1
 800978e:	4283      	cmp	r3, r0
 8009790:	6011      	str	r1, [r2, #0]
 8009792:	d1e0      	bne.n	8009756 <_free_r+0x22>
 8009794:	6818      	ldr	r0, [r3, #0]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	6053      	str	r3, [r2, #4]
 800979a:	4408      	add	r0, r1
 800979c:	6010      	str	r0, [r2, #0]
 800979e:	e7da      	b.n	8009756 <_free_r+0x22>
 80097a0:	d902      	bls.n	80097a8 <_free_r+0x74>
 80097a2:	230c      	movs	r3, #12
 80097a4:	602b      	str	r3, [r5, #0]
 80097a6:	e7d6      	b.n	8009756 <_free_r+0x22>
 80097a8:	6820      	ldr	r0, [r4, #0]
 80097aa:	1821      	adds	r1, r4, r0
 80097ac:	428b      	cmp	r3, r1
 80097ae:	bf04      	itt	eq
 80097b0:	6819      	ldreq	r1, [r3, #0]
 80097b2:	685b      	ldreq	r3, [r3, #4]
 80097b4:	6063      	str	r3, [r4, #4]
 80097b6:	bf04      	itt	eq
 80097b8:	1809      	addeq	r1, r1, r0
 80097ba:	6021      	streq	r1, [r4, #0]
 80097bc:	6054      	str	r4, [r2, #4]
 80097be:	e7ca      	b.n	8009756 <_free_r+0x22>
 80097c0:	bd38      	pop	{r3, r4, r5, pc}
 80097c2:	bf00      	nop
 80097c4:	20000a94 	.word	0x20000a94

080097c8 <__ascii_mbtowc>:
 80097c8:	b082      	sub	sp, #8
 80097ca:	b901      	cbnz	r1, 80097ce <__ascii_mbtowc+0x6>
 80097cc:	a901      	add	r1, sp, #4
 80097ce:	b142      	cbz	r2, 80097e2 <__ascii_mbtowc+0x1a>
 80097d0:	b14b      	cbz	r3, 80097e6 <__ascii_mbtowc+0x1e>
 80097d2:	7813      	ldrb	r3, [r2, #0]
 80097d4:	600b      	str	r3, [r1, #0]
 80097d6:	7812      	ldrb	r2, [r2, #0]
 80097d8:	1e10      	subs	r0, r2, #0
 80097da:	bf18      	it	ne
 80097dc:	2001      	movne	r0, #1
 80097de:	b002      	add	sp, #8
 80097e0:	4770      	bx	lr
 80097e2:	4610      	mov	r0, r2
 80097e4:	e7fb      	b.n	80097de <__ascii_mbtowc+0x16>
 80097e6:	f06f 0001 	mvn.w	r0, #1
 80097ea:	e7f8      	b.n	80097de <__ascii_mbtowc+0x16>

080097ec <_malloc_usable_size_r>:
 80097ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097f0:	1f18      	subs	r0, r3, #4
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	bfbc      	itt	lt
 80097f6:	580b      	ldrlt	r3, [r1, r0]
 80097f8:	18c0      	addlt	r0, r0, r3
 80097fa:	4770      	bx	lr

080097fc <fiprintf>:
 80097fc:	b40e      	push	{r1, r2, r3}
 80097fe:	b503      	push	{r0, r1, lr}
 8009800:	4601      	mov	r1, r0
 8009802:	ab03      	add	r3, sp, #12
 8009804:	4805      	ldr	r0, [pc, #20]	@ (800981c <fiprintf+0x20>)
 8009806:	f853 2b04 	ldr.w	r2, [r3], #4
 800980a:	6800      	ldr	r0, [r0, #0]
 800980c:	9301      	str	r3, [sp, #4]
 800980e:	f000 f845 	bl	800989c <_vfiprintf_r>
 8009812:	b002      	add	sp, #8
 8009814:	f85d eb04 	ldr.w	lr, [sp], #4
 8009818:	b003      	add	sp, #12
 800981a:	4770      	bx	lr
 800981c:	20000018 	.word	0x20000018

08009820 <__ascii_wctomb>:
 8009820:	4603      	mov	r3, r0
 8009822:	4608      	mov	r0, r1
 8009824:	b141      	cbz	r1, 8009838 <__ascii_wctomb+0x18>
 8009826:	2aff      	cmp	r2, #255	@ 0xff
 8009828:	d904      	bls.n	8009834 <__ascii_wctomb+0x14>
 800982a:	228a      	movs	r2, #138	@ 0x8a
 800982c:	601a      	str	r2, [r3, #0]
 800982e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009832:	4770      	bx	lr
 8009834:	700a      	strb	r2, [r1, #0]
 8009836:	2001      	movs	r0, #1
 8009838:	4770      	bx	lr

0800983a <abort>:
 800983a:	b508      	push	{r3, lr}
 800983c:	2006      	movs	r0, #6
 800983e:	f000 fa85 	bl	8009d4c <raise>
 8009842:	2001      	movs	r0, #1
 8009844:	f7f8 fc24 	bl	8002090 <_exit>

08009848 <__sfputc_r>:
 8009848:	6893      	ldr	r3, [r2, #8]
 800984a:	3b01      	subs	r3, #1
 800984c:	2b00      	cmp	r3, #0
 800984e:	b410      	push	{r4}
 8009850:	6093      	str	r3, [r2, #8]
 8009852:	da08      	bge.n	8009866 <__sfputc_r+0x1e>
 8009854:	6994      	ldr	r4, [r2, #24]
 8009856:	42a3      	cmp	r3, r4
 8009858:	db01      	blt.n	800985e <__sfputc_r+0x16>
 800985a:	290a      	cmp	r1, #10
 800985c:	d103      	bne.n	8009866 <__sfputc_r+0x1e>
 800985e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009862:	f000 b933 	b.w	8009acc <__swbuf_r>
 8009866:	6813      	ldr	r3, [r2, #0]
 8009868:	1c58      	adds	r0, r3, #1
 800986a:	6010      	str	r0, [r2, #0]
 800986c:	7019      	strb	r1, [r3, #0]
 800986e:	4608      	mov	r0, r1
 8009870:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009874:	4770      	bx	lr

08009876 <__sfputs_r>:
 8009876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009878:	4606      	mov	r6, r0
 800987a:	460f      	mov	r7, r1
 800987c:	4614      	mov	r4, r2
 800987e:	18d5      	adds	r5, r2, r3
 8009880:	42ac      	cmp	r4, r5
 8009882:	d101      	bne.n	8009888 <__sfputs_r+0x12>
 8009884:	2000      	movs	r0, #0
 8009886:	e007      	b.n	8009898 <__sfputs_r+0x22>
 8009888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800988c:	463a      	mov	r2, r7
 800988e:	4630      	mov	r0, r6
 8009890:	f7ff ffda 	bl	8009848 <__sfputc_r>
 8009894:	1c43      	adds	r3, r0, #1
 8009896:	d1f3      	bne.n	8009880 <__sfputs_r+0xa>
 8009898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800989c <_vfiprintf_r>:
 800989c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a0:	460d      	mov	r5, r1
 80098a2:	b09d      	sub	sp, #116	@ 0x74
 80098a4:	4614      	mov	r4, r2
 80098a6:	4698      	mov	r8, r3
 80098a8:	4606      	mov	r6, r0
 80098aa:	b118      	cbz	r0, 80098b4 <_vfiprintf_r+0x18>
 80098ac:	6a03      	ldr	r3, [r0, #32]
 80098ae:	b90b      	cbnz	r3, 80098b4 <_vfiprintf_r+0x18>
 80098b0:	f7fe f926 	bl	8007b00 <__sinit>
 80098b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098b6:	07d9      	lsls	r1, r3, #31
 80098b8:	d405      	bmi.n	80098c6 <_vfiprintf_r+0x2a>
 80098ba:	89ab      	ldrh	r3, [r5, #12]
 80098bc:	059a      	lsls	r2, r3, #22
 80098be:	d402      	bmi.n	80098c6 <_vfiprintf_r+0x2a>
 80098c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098c2:	f7fe f98a 	bl	8007bda <__retarget_lock_acquire_recursive>
 80098c6:	89ab      	ldrh	r3, [r5, #12]
 80098c8:	071b      	lsls	r3, r3, #28
 80098ca:	d501      	bpl.n	80098d0 <_vfiprintf_r+0x34>
 80098cc:	692b      	ldr	r3, [r5, #16]
 80098ce:	b99b      	cbnz	r3, 80098f8 <_vfiprintf_r+0x5c>
 80098d0:	4629      	mov	r1, r5
 80098d2:	4630      	mov	r0, r6
 80098d4:	f000 f938 	bl	8009b48 <__swsetup_r>
 80098d8:	b170      	cbz	r0, 80098f8 <_vfiprintf_r+0x5c>
 80098da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098dc:	07dc      	lsls	r4, r3, #31
 80098de:	d504      	bpl.n	80098ea <_vfiprintf_r+0x4e>
 80098e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098e4:	b01d      	add	sp, #116	@ 0x74
 80098e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ea:	89ab      	ldrh	r3, [r5, #12]
 80098ec:	0598      	lsls	r0, r3, #22
 80098ee:	d4f7      	bmi.n	80098e0 <_vfiprintf_r+0x44>
 80098f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098f2:	f7fe f973 	bl	8007bdc <__retarget_lock_release_recursive>
 80098f6:	e7f3      	b.n	80098e0 <_vfiprintf_r+0x44>
 80098f8:	2300      	movs	r3, #0
 80098fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80098fc:	2320      	movs	r3, #32
 80098fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009902:	f8cd 800c 	str.w	r8, [sp, #12]
 8009906:	2330      	movs	r3, #48	@ 0x30
 8009908:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009ab8 <_vfiprintf_r+0x21c>
 800990c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009910:	f04f 0901 	mov.w	r9, #1
 8009914:	4623      	mov	r3, r4
 8009916:	469a      	mov	sl, r3
 8009918:	f813 2b01 	ldrb.w	r2, [r3], #1
 800991c:	b10a      	cbz	r2, 8009922 <_vfiprintf_r+0x86>
 800991e:	2a25      	cmp	r2, #37	@ 0x25
 8009920:	d1f9      	bne.n	8009916 <_vfiprintf_r+0x7a>
 8009922:	ebba 0b04 	subs.w	fp, sl, r4
 8009926:	d00b      	beq.n	8009940 <_vfiprintf_r+0xa4>
 8009928:	465b      	mov	r3, fp
 800992a:	4622      	mov	r2, r4
 800992c:	4629      	mov	r1, r5
 800992e:	4630      	mov	r0, r6
 8009930:	f7ff ffa1 	bl	8009876 <__sfputs_r>
 8009934:	3001      	adds	r0, #1
 8009936:	f000 80a7 	beq.w	8009a88 <_vfiprintf_r+0x1ec>
 800993a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800993c:	445a      	add	r2, fp
 800993e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009940:	f89a 3000 	ldrb.w	r3, [sl]
 8009944:	2b00      	cmp	r3, #0
 8009946:	f000 809f 	beq.w	8009a88 <_vfiprintf_r+0x1ec>
 800994a:	2300      	movs	r3, #0
 800994c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009950:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009954:	f10a 0a01 	add.w	sl, sl, #1
 8009958:	9304      	str	r3, [sp, #16]
 800995a:	9307      	str	r3, [sp, #28]
 800995c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009960:	931a      	str	r3, [sp, #104]	@ 0x68
 8009962:	4654      	mov	r4, sl
 8009964:	2205      	movs	r2, #5
 8009966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800996a:	4853      	ldr	r0, [pc, #332]	@ (8009ab8 <_vfiprintf_r+0x21c>)
 800996c:	f7f6 fc30 	bl	80001d0 <memchr>
 8009970:	9a04      	ldr	r2, [sp, #16]
 8009972:	b9d8      	cbnz	r0, 80099ac <_vfiprintf_r+0x110>
 8009974:	06d1      	lsls	r1, r2, #27
 8009976:	bf44      	itt	mi
 8009978:	2320      	movmi	r3, #32
 800997a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800997e:	0713      	lsls	r3, r2, #28
 8009980:	bf44      	itt	mi
 8009982:	232b      	movmi	r3, #43	@ 0x2b
 8009984:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009988:	f89a 3000 	ldrb.w	r3, [sl]
 800998c:	2b2a      	cmp	r3, #42	@ 0x2a
 800998e:	d015      	beq.n	80099bc <_vfiprintf_r+0x120>
 8009990:	9a07      	ldr	r2, [sp, #28]
 8009992:	4654      	mov	r4, sl
 8009994:	2000      	movs	r0, #0
 8009996:	f04f 0c0a 	mov.w	ip, #10
 800999a:	4621      	mov	r1, r4
 800999c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099a0:	3b30      	subs	r3, #48	@ 0x30
 80099a2:	2b09      	cmp	r3, #9
 80099a4:	d94b      	bls.n	8009a3e <_vfiprintf_r+0x1a2>
 80099a6:	b1b0      	cbz	r0, 80099d6 <_vfiprintf_r+0x13a>
 80099a8:	9207      	str	r2, [sp, #28]
 80099aa:	e014      	b.n	80099d6 <_vfiprintf_r+0x13a>
 80099ac:	eba0 0308 	sub.w	r3, r0, r8
 80099b0:	fa09 f303 	lsl.w	r3, r9, r3
 80099b4:	4313      	orrs	r3, r2
 80099b6:	9304      	str	r3, [sp, #16]
 80099b8:	46a2      	mov	sl, r4
 80099ba:	e7d2      	b.n	8009962 <_vfiprintf_r+0xc6>
 80099bc:	9b03      	ldr	r3, [sp, #12]
 80099be:	1d19      	adds	r1, r3, #4
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	9103      	str	r1, [sp, #12]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	bfbb      	ittet	lt
 80099c8:	425b      	neglt	r3, r3
 80099ca:	f042 0202 	orrlt.w	r2, r2, #2
 80099ce:	9307      	strge	r3, [sp, #28]
 80099d0:	9307      	strlt	r3, [sp, #28]
 80099d2:	bfb8      	it	lt
 80099d4:	9204      	strlt	r2, [sp, #16]
 80099d6:	7823      	ldrb	r3, [r4, #0]
 80099d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80099da:	d10a      	bne.n	80099f2 <_vfiprintf_r+0x156>
 80099dc:	7863      	ldrb	r3, [r4, #1]
 80099de:	2b2a      	cmp	r3, #42	@ 0x2a
 80099e0:	d132      	bne.n	8009a48 <_vfiprintf_r+0x1ac>
 80099e2:	9b03      	ldr	r3, [sp, #12]
 80099e4:	1d1a      	adds	r2, r3, #4
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	9203      	str	r2, [sp, #12]
 80099ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099ee:	3402      	adds	r4, #2
 80099f0:	9305      	str	r3, [sp, #20]
 80099f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009ac8 <_vfiprintf_r+0x22c>
 80099f6:	7821      	ldrb	r1, [r4, #0]
 80099f8:	2203      	movs	r2, #3
 80099fa:	4650      	mov	r0, sl
 80099fc:	f7f6 fbe8 	bl	80001d0 <memchr>
 8009a00:	b138      	cbz	r0, 8009a12 <_vfiprintf_r+0x176>
 8009a02:	9b04      	ldr	r3, [sp, #16]
 8009a04:	eba0 000a 	sub.w	r0, r0, sl
 8009a08:	2240      	movs	r2, #64	@ 0x40
 8009a0a:	4082      	lsls	r2, r0
 8009a0c:	4313      	orrs	r3, r2
 8009a0e:	3401      	adds	r4, #1
 8009a10:	9304      	str	r3, [sp, #16]
 8009a12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a16:	4829      	ldr	r0, [pc, #164]	@ (8009abc <_vfiprintf_r+0x220>)
 8009a18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a1c:	2206      	movs	r2, #6
 8009a1e:	f7f6 fbd7 	bl	80001d0 <memchr>
 8009a22:	2800      	cmp	r0, #0
 8009a24:	d03f      	beq.n	8009aa6 <_vfiprintf_r+0x20a>
 8009a26:	4b26      	ldr	r3, [pc, #152]	@ (8009ac0 <_vfiprintf_r+0x224>)
 8009a28:	bb1b      	cbnz	r3, 8009a72 <_vfiprintf_r+0x1d6>
 8009a2a:	9b03      	ldr	r3, [sp, #12]
 8009a2c:	3307      	adds	r3, #7
 8009a2e:	f023 0307 	bic.w	r3, r3, #7
 8009a32:	3308      	adds	r3, #8
 8009a34:	9303      	str	r3, [sp, #12]
 8009a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a38:	443b      	add	r3, r7
 8009a3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a3c:	e76a      	b.n	8009914 <_vfiprintf_r+0x78>
 8009a3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a42:	460c      	mov	r4, r1
 8009a44:	2001      	movs	r0, #1
 8009a46:	e7a8      	b.n	800999a <_vfiprintf_r+0xfe>
 8009a48:	2300      	movs	r3, #0
 8009a4a:	3401      	adds	r4, #1
 8009a4c:	9305      	str	r3, [sp, #20]
 8009a4e:	4619      	mov	r1, r3
 8009a50:	f04f 0c0a 	mov.w	ip, #10
 8009a54:	4620      	mov	r0, r4
 8009a56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a5a:	3a30      	subs	r2, #48	@ 0x30
 8009a5c:	2a09      	cmp	r2, #9
 8009a5e:	d903      	bls.n	8009a68 <_vfiprintf_r+0x1cc>
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d0c6      	beq.n	80099f2 <_vfiprintf_r+0x156>
 8009a64:	9105      	str	r1, [sp, #20]
 8009a66:	e7c4      	b.n	80099f2 <_vfiprintf_r+0x156>
 8009a68:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a6c:	4604      	mov	r4, r0
 8009a6e:	2301      	movs	r3, #1
 8009a70:	e7f0      	b.n	8009a54 <_vfiprintf_r+0x1b8>
 8009a72:	ab03      	add	r3, sp, #12
 8009a74:	9300      	str	r3, [sp, #0]
 8009a76:	462a      	mov	r2, r5
 8009a78:	4b12      	ldr	r3, [pc, #72]	@ (8009ac4 <_vfiprintf_r+0x228>)
 8009a7a:	a904      	add	r1, sp, #16
 8009a7c:	4630      	mov	r0, r6
 8009a7e:	f7fd fba7 	bl	80071d0 <_printf_float>
 8009a82:	4607      	mov	r7, r0
 8009a84:	1c78      	adds	r0, r7, #1
 8009a86:	d1d6      	bne.n	8009a36 <_vfiprintf_r+0x19a>
 8009a88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a8a:	07d9      	lsls	r1, r3, #31
 8009a8c:	d405      	bmi.n	8009a9a <_vfiprintf_r+0x1fe>
 8009a8e:	89ab      	ldrh	r3, [r5, #12]
 8009a90:	059a      	lsls	r2, r3, #22
 8009a92:	d402      	bmi.n	8009a9a <_vfiprintf_r+0x1fe>
 8009a94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a96:	f7fe f8a1 	bl	8007bdc <__retarget_lock_release_recursive>
 8009a9a:	89ab      	ldrh	r3, [r5, #12]
 8009a9c:	065b      	lsls	r3, r3, #25
 8009a9e:	f53f af1f 	bmi.w	80098e0 <_vfiprintf_r+0x44>
 8009aa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009aa4:	e71e      	b.n	80098e4 <_vfiprintf_r+0x48>
 8009aa6:	ab03      	add	r3, sp, #12
 8009aa8:	9300      	str	r3, [sp, #0]
 8009aaa:	462a      	mov	r2, r5
 8009aac:	4b05      	ldr	r3, [pc, #20]	@ (8009ac4 <_vfiprintf_r+0x228>)
 8009aae:	a904      	add	r1, sp, #16
 8009ab0:	4630      	mov	r0, r6
 8009ab2:	f7fd fe25 	bl	8007700 <_printf_i>
 8009ab6:	e7e4      	b.n	8009a82 <_vfiprintf_r+0x1e6>
 8009ab8:	08009f5d 	.word	0x08009f5d
 8009abc:	08009f67 	.word	0x08009f67
 8009ac0:	080071d1 	.word	0x080071d1
 8009ac4:	08009877 	.word	0x08009877
 8009ac8:	08009f63 	.word	0x08009f63

08009acc <__swbuf_r>:
 8009acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ace:	460e      	mov	r6, r1
 8009ad0:	4614      	mov	r4, r2
 8009ad2:	4605      	mov	r5, r0
 8009ad4:	b118      	cbz	r0, 8009ade <__swbuf_r+0x12>
 8009ad6:	6a03      	ldr	r3, [r0, #32]
 8009ad8:	b90b      	cbnz	r3, 8009ade <__swbuf_r+0x12>
 8009ada:	f7fe f811 	bl	8007b00 <__sinit>
 8009ade:	69a3      	ldr	r3, [r4, #24]
 8009ae0:	60a3      	str	r3, [r4, #8]
 8009ae2:	89a3      	ldrh	r3, [r4, #12]
 8009ae4:	071a      	lsls	r2, r3, #28
 8009ae6:	d501      	bpl.n	8009aec <__swbuf_r+0x20>
 8009ae8:	6923      	ldr	r3, [r4, #16]
 8009aea:	b943      	cbnz	r3, 8009afe <__swbuf_r+0x32>
 8009aec:	4621      	mov	r1, r4
 8009aee:	4628      	mov	r0, r5
 8009af0:	f000 f82a 	bl	8009b48 <__swsetup_r>
 8009af4:	b118      	cbz	r0, 8009afe <__swbuf_r+0x32>
 8009af6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009afa:	4638      	mov	r0, r7
 8009afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009afe:	6823      	ldr	r3, [r4, #0]
 8009b00:	6922      	ldr	r2, [r4, #16]
 8009b02:	1a98      	subs	r0, r3, r2
 8009b04:	6963      	ldr	r3, [r4, #20]
 8009b06:	b2f6      	uxtb	r6, r6
 8009b08:	4283      	cmp	r3, r0
 8009b0a:	4637      	mov	r7, r6
 8009b0c:	dc05      	bgt.n	8009b1a <__swbuf_r+0x4e>
 8009b0e:	4621      	mov	r1, r4
 8009b10:	4628      	mov	r0, r5
 8009b12:	f7ff f937 	bl	8008d84 <_fflush_r>
 8009b16:	2800      	cmp	r0, #0
 8009b18:	d1ed      	bne.n	8009af6 <__swbuf_r+0x2a>
 8009b1a:	68a3      	ldr	r3, [r4, #8]
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	60a3      	str	r3, [r4, #8]
 8009b20:	6823      	ldr	r3, [r4, #0]
 8009b22:	1c5a      	adds	r2, r3, #1
 8009b24:	6022      	str	r2, [r4, #0]
 8009b26:	701e      	strb	r6, [r3, #0]
 8009b28:	6962      	ldr	r2, [r4, #20]
 8009b2a:	1c43      	adds	r3, r0, #1
 8009b2c:	429a      	cmp	r2, r3
 8009b2e:	d004      	beq.n	8009b3a <__swbuf_r+0x6e>
 8009b30:	89a3      	ldrh	r3, [r4, #12]
 8009b32:	07db      	lsls	r3, r3, #31
 8009b34:	d5e1      	bpl.n	8009afa <__swbuf_r+0x2e>
 8009b36:	2e0a      	cmp	r6, #10
 8009b38:	d1df      	bne.n	8009afa <__swbuf_r+0x2e>
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	f7ff f921 	bl	8008d84 <_fflush_r>
 8009b42:	2800      	cmp	r0, #0
 8009b44:	d0d9      	beq.n	8009afa <__swbuf_r+0x2e>
 8009b46:	e7d6      	b.n	8009af6 <__swbuf_r+0x2a>

08009b48 <__swsetup_r>:
 8009b48:	b538      	push	{r3, r4, r5, lr}
 8009b4a:	4b29      	ldr	r3, [pc, #164]	@ (8009bf0 <__swsetup_r+0xa8>)
 8009b4c:	4605      	mov	r5, r0
 8009b4e:	6818      	ldr	r0, [r3, #0]
 8009b50:	460c      	mov	r4, r1
 8009b52:	b118      	cbz	r0, 8009b5c <__swsetup_r+0x14>
 8009b54:	6a03      	ldr	r3, [r0, #32]
 8009b56:	b90b      	cbnz	r3, 8009b5c <__swsetup_r+0x14>
 8009b58:	f7fd ffd2 	bl	8007b00 <__sinit>
 8009b5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b60:	0719      	lsls	r1, r3, #28
 8009b62:	d422      	bmi.n	8009baa <__swsetup_r+0x62>
 8009b64:	06da      	lsls	r2, r3, #27
 8009b66:	d407      	bmi.n	8009b78 <__swsetup_r+0x30>
 8009b68:	2209      	movs	r2, #9
 8009b6a:	602a      	str	r2, [r5, #0]
 8009b6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b70:	81a3      	strh	r3, [r4, #12]
 8009b72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009b76:	e033      	b.n	8009be0 <__swsetup_r+0x98>
 8009b78:	0758      	lsls	r0, r3, #29
 8009b7a:	d512      	bpl.n	8009ba2 <__swsetup_r+0x5a>
 8009b7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b7e:	b141      	cbz	r1, 8009b92 <__swsetup_r+0x4a>
 8009b80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b84:	4299      	cmp	r1, r3
 8009b86:	d002      	beq.n	8009b8e <__swsetup_r+0x46>
 8009b88:	4628      	mov	r0, r5
 8009b8a:	f7ff fdd3 	bl	8009734 <_free_r>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b92:	89a3      	ldrh	r3, [r4, #12]
 8009b94:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009b98:	81a3      	strh	r3, [r4, #12]
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	6063      	str	r3, [r4, #4]
 8009b9e:	6923      	ldr	r3, [r4, #16]
 8009ba0:	6023      	str	r3, [r4, #0]
 8009ba2:	89a3      	ldrh	r3, [r4, #12]
 8009ba4:	f043 0308 	orr.w	r3, r3, #8
 8009ba8:	81a3      	strh	r3, [r4, #12]
 8009baa:	6923      	ldr	r3, [r4, #16]
 8009bac:	b94b      	cbnz	r3, 8009bc2 <__swsetup_r+0x7a>
 8009bae:	89a3      	ldrh	r3, [r4, #12]
 8009bb0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bb8:	d003      	beq.n	8009bc2 <__swsetup_r+0x7a>
 8009bba:	4621      	mov	r1, r4
 8009bbc:	4628      	mov	r0, r5
 8009bbe:	f000 f83f 	bl	8009c40 <__smakebuf_r>
 8009bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bc6:	f013 0201 	ands.w	r2, r3, #1
 8009bca:	d00a      	beq.n	8009be2 <__swsetup_r+0x9a>
 8009bcc:	2200      	movs	r2, #0
 8009bce:	60a2      	str	r2, [r4, #8]
 8009bd0:	6962      	ldr	r2, [r4, #20]
 8009bd2:	4252      	negs	r2, r2
 8009bd4:	61a2      	str	r2, [r4, #24]
 8009bd6:	6922      	ldr	r2, [r4, #16]
 8009bd8:	b942      	cbnz	r2, 8009bec <__swsetup_r+0xa4>
 8009bda:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009bde:	d1c5      	bne.n	8009b6c <__swsetup_r+0x24>
 8009be0:	bd38      	pop	{r3, r4, r5, pc}
 8009be2:	0799      	lsls	r1, r3, #30
 8009be4:	bf58      	it	pl
 8009be6:	6962      	ldrpl	r2, [r4, #20]
 8009be8:	60a2      	str	r2, [r4, #8]
 8009bea:	e7f4      	b.n	8009bd6 <__swsetup_r+0x8e>
 8009bec:	2000      	movs	r0, #0
 8009bee:	e7f7      	b.n	8009be0 <__swsetup_r+0x98>
 8009bf0:	20000018 	.word	0x20000018

08009bf4 <__swhatbuf_r>:
 8009bf4:	b570      	push	{r4, r5, r6, lr}
 8009bf6:	460c      	mov	r4, r1
 8009bf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009bfc:	2900      	cmp	r1, #0
 8009bfe:	b096      	sub	sp, #88	@ 0x58
 8009c00:	4615      	mov	r5, r2
 8009c02:	461e      	mov	r6, r3
 8009c04:	da0d      	bge.n	8009c22 <__swhatbuf_r+0x2e>
 8009c06:	89a3      	ldrh	r3, [r4, #12]
 8009c08:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009c0c:	f04f 0100 	mov.w	r1, #0
 8009c10:	bf14      	ite	ne
 8009c12:	2340      	movne	r3, #64	@ 0x40
 8009c14:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009c18:	2000      	movs	r0, #0
 8009c1a:	6031      	str	r1, [r6, #0]
 8009c1c:	602b      	str	r3, [r5, #0]
 8009c1e:	b016      	add	sp, #88	@ 0x58
 8009c20:	bd70      	pop	{r4, r5, r6, pc}
 8009c22:	466a      	mov	r2, sp
 8009c24:	f000 f848 	bl	8009cb8 <_fstat_r>
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	dbec      	blt.n	8009c06 <__swhatbuf_r+0x12>
 8009c2c:	9901      	ldr	r1, [sp, #4]
 8009c2e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009c32:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009c36:	4259      	negs	r1, r3
 8009c38:	4159      	adcs	r1, r3
 8009c3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c3e:	e7eb      	b.n	8009c18 <__swhatbuf_r+0x24>

08009c40 <__smakebuf_r>:
 8009c40:	898b      	ldrh	r3, [r1, #12]
 8009c42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c44:	079d      	lsls	r5, r3, #30
 8009c46:	4606      	mov	r6, r0
 8009c48:	460c      	mov	r4, r1
 8009c4a:	d507      	bpl.n	8009c5c <__smakebuf_r+0x1c>
 8009c4c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009c50:	6023      	str	r3, [r4, #0]
 8009c52:	6123      	str	r3, [r4, #16]
 8009c54:	2301      	movs	r3, #1
 8009c56:	6163      	str	r3, [r4, #20]
 8009c58:	b003      	add	sp, #12
 8009c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c5c:	ab01      	add	r3, sp, #4
 8009c5e:	466a      	mov	r2, sp
 8009c60:	f7ff ffc8 	bl	8009bf4 <__swhatbuf_r>
 8009c64:	9f00      	ldr	r7, [sp, #0]
 8009c66:	4605      	mov	r5, r0
 8009c68:	4639      	mov	r1, r7
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	f7fe ff86 	bl	8008b7c <_malloc_r>
 8009c70:	b948      	cbnz	r0, 8009c86 <__smakebuf_r+0x46>
 8009c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c76:	059a      	lsls	r2, r3, #22
 8009c78:	d4ee      	bmi.n	8009c58 <__smakebuf_r+0x18>
 8009c7a:	f023 0303 	bic.w	r3, r3, #3
 8009c7e:	f043 0302 	orr.w	r3, r3, #2
 8009c82:	81a3      	strh	r3, [r4, #12]
 8009c84:	e7e2      	b.n	8009c4c <__smakebuf_r+0xc>
 8009c86:	89a3      	ldrh	r3, [r4, #12]
 8009c88:	6020      	str	r0, [r4, #0]
 8009c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c8e:	81a3      	strh	r3, [r4, #12]
 8009c90:	9b01      	ldr	r3, [sp, #4]
 8009c92:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009c96:	b15b      	cbz	r3, 8009cb0 <__smakebuf_r+0x70>
 8009c98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c9c:	4630      	mov	r0, r6
 8009c9e:	f000 f81d 	bl	8009cdc <_isatty_r>
 8009ca2:	b128      	cbz	r0, 8009cb0 <__smakebuf_r+0x70>
 8009ca4:	89a3      	ldrh	r3, [r4, #12]
 8009ca6:	f023 0303 	bic.w	r3, r3, #3
 8009caa:	f043 0301 	orr.w	r3, r3, #1
 8009cae:	81a3      	strh	r3, [r4, #12]
 8009cb0:	89a3      	ldrh	r3, [r4, #12]
 8009cb2:	431d      	orrs	r5, r3
 8009cb4:	81a5      	strh	r5, [r4, #12]
 8009cb6:	e7cf      	b.n	8009c58 <__smakebuf_r+0x18>

08009cb8 <_fstat_r>:
 8009cb8:	b538      	push	{r3, r4, r5, lr}
 8009cba:	4d07      	ldr	r5, [pc, #28]	@ (8009cd8 <_fstat_r+0x20>)
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	4604      	mov	r4, r0
 8009cc0:	4608      	mov	r0, r1
 8009cc2:	4611      	mov	r1, r2
 8009cc4:	602b      	str	r3, [r5, #0]
 8009cc6:	f7f8 fa33 	bl	8002130 <_fstat>
 8009cca:	1c43      	adds	r3, r0, #1
 8009ccc:	d102      	bne.n	8009cd4 <_fstat_r+0x1c>
 8009cce:	682b      	ldr	r3, [r5, #0]
 8009cd0:	b103      	cbz	r3, 8009cd4 <_fstat_r+0x1c>
 8009cd2:	6023      	str	r3, [r4, #0]
 8009cd4:	bd38      	pop	{r3, r4, r5, pc}
 8009cd6:	bf00      	nop
 8009cd8:	20000a98 	.word	0x20000a98

08009cdc <_isatty_r>:
 8009cdc:	b538      	push	{r3, r4, r5, lr}
 8009cde:	4d06      	ldr	r5, [pc, #24]	@ (8009cf8 <_isatty_r+0x1c>)
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	4604      	mov	r4, r0
 8009ce4:	4608      	mov	r0, r1
 8009ce6:	602b      	str	r3, [r5, #0]
 8009ce8:	f7f8 fa32 	bl	8002150 <_isatty>
 8009cec:	1c43      	adds	r3, r0, #1
 8009cee:	d102      	bne.n	8009cf6 <_isatty_r+0x1a>
 8009cf0:	682b      	ldr	r3, [r5, #0]
 8009cf2:	b103      	cbz	r3, 8009cf6 <_isatty_r+0x1a>
 8009cf4:	6023      	str	r3, [r4, #0]
 8009cf6:	bd38      	pop	{r3, r4, r5, pc}
 8009cf8:	20000a98 	.word	0x20000a98

08009cfc <_raise_r>:
 8009cfc:	291f      	cmp	r1, #31
 8009cfe:	b538      	push	{r3, r4, r5, lr}
 8009d00:	4605      	mov	r5, r0
 8009d02:	460c      	mov	r4, r1
 8009d04:	d904      	bls.n	8009d10 <_raise_r+0x14>
 8009d06:	2316      	movs	r3, #22
 8009d08:	6003      	str	r3, [r0, #0]
 8009d0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d0e:	bd38      	pop	{r3, r4, r5, pc}
 8009d10:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009d12:	b112      	cbz	r2, 8009d1a <_raise_r+0x1e>
 8009d14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009d18:	b94b      	cbnz	r3, 8009d2e <_raise_r+0x32>
 8009d1a:	4628      	mov	r0, r5
 8009d1c:	f000 f830 	bl	8009d80 <_getpid_r>
 8009d20:	4622      	mov	r2, r4
 8009d22:	4601      	mov	r1, r0
 8009d24:	4628      	mov	r0, r5
 8009d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d2a:	f000 b817 	b.w	8009d5c <_kill_r>
 8009d2e:	2b01      	cmp	r3, #1
 8009d30:	d00a      	beq.n	8009d48 <_raise_r+0x4c>
 8009d32:	1c59      	adds	r1, r3, #1
 8009d34:	d103      	bne.n	8009d3e <_raise_r+0x42>
 8009d36:	2316      	movs	r3, #22
 8009d38:	6003      	str	r3, [r0, #0]
 8009d3a:	2001      	movs	r0, #1
 8009d3c:	e7e7      	b.n	8009d0e <_raise_r+0x12>
 8009d3e:	2100      	movs	r1, #0
 8009d40:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009d44:	4620      	mov	r0, r4
 8009d46:	4798      	blx	r3
 8009d48:	2000      	movs	r0, #0
 8009d4a:	e7e0      	b.n	8009d0e <_raise_r+0x12>

08009d4c <raise>:
 8009d4c:	4b02      	ldr	r3, [pc, #8]	@ (8009d58 <raise+0xc>)
 8009d4e:	4601      	mov	r1, r0
 8009d50:	6818      	ldr	r0, [r3, #0]
 8009d52:	f7ff bfd3 	b.w	8009cfc <_raise_r>
 8009d56:	bf00      	nop
 8009d58:	20000018 	.word	0x20000018

08009d5c <_kill_r>:
 8009d5c:	b538      	push	{r3, r4, r5, lr}
 8009d5e:	4d07      	ldr	r5, [pc, #28]	@ (8009d7c <_kill_r+0x20>)
 8009d60:	2300      	movs	r3, #0
 8009d62:	4604      	mov	r4, r0
 8009d64:	4608      	mov	r0, r1
 8009d66:	4611      	mov	r1, r2
 8009d68:	602b      	str	r3, [r5, #0]
 8009d6a:	f7f8 f981 	bl	8002070 <_kill>
 8009d6e:	1c43      	adds	r3, r0, #1
 8009d70:	d102      	bne.n	8009d78 <_kill_r+0x1c>
 8009d72:	682b      	ldr	r3, [r5, #0]
 8009d74:	b103      	cbz	r3, 8009d78 <_kill_r+0x1c>
 8009d76:	6023      	str	r3, [r4, #0]
 8009d78:	bd38      	pop	{r3, r4, r5, pc}
 8009d7a:	bf00      	nop
 8009d7c:	20000a98 	.word	0x20000a98

08009d80 <_getpid_r>:
 8009d80:	f7f8 b96e 	b.w	8002060 <_getpid>

08009d84 <_init>:
 8009d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d86:	bf00      	nop
 8009d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d8a:	bc08      	pop	{r3}
 8009d8c:	469e      	mov	lr, r3
 8009d8e:	4770      	bx	lr

08009d90 <_fini>:
 8009d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d92:	bf00      	nop
 8009d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d96:	bc08      	pop	{r3}
 8009d98:	469e      	mov	lr, r3
 8009d9a:	4770      	bx	lr
