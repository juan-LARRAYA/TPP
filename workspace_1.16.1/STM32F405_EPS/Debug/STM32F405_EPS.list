
STM32F405_EPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a140  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  0800a2d0  0800a2d0  0000b2d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7a8  0800a7a8  0000c214  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7a8  0800a7a8  0000b7a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7b0  0800a7b0  0000c214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7b0  0800a7b0  0000b7b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a7b4  0800a7b4  0000b7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000214  20000000  0800a7b8  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c214  2**0
                  CONTENTS
 10 .bss          000009dc  20000214  20000214  0000c214  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000bf0  20000bf0  0000c214  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c214  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019b5b  00000000  00000000  0000c244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003cf3  00000000  00000000  00025d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d8  00000000  00000000  00029a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ff  00000000  00000000  0002b070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024bd9  00000000  00000000  0002c16f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020686  00000000  00000000  00050d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d48b5  00000000  00000000  000713ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00145c83  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d30  00000000  00000000  00145cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0014c9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000214 	.word	0x20000214
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a2b8 	.word	0x0800a2b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000218 	.word	0x20000218
 80001cc:	0800a2b8 	.word	0x0800a2b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b96a 	b.w	8000ed4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	460c      	mov	r4, r1
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d14e      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c24:	4694      	mov	ip, r2
 8000c26:	458c      	cmp	ip, r1
 8000c28:	4686      	mov	lr, r0
 8000c2a:	fab2 f282 	clz	r2, r2
 8000c2e:	d962      	bls.n	8000cf6 <__udivmoddi4+0xde>
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0320 	rsb	r3, r2, #32
 8000c36:	4091      	lsls	r1, r2
 8000c38:	fa20 f303 	lsr.w	r3, r0, r3
 8000c3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c40:	4319      	orrs	r1, r3
 8000c42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f f68c 	uxth.w	r6, ip
 8000c4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb07 1114 	mls	r1, r7, r4, r1
 8000c5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5e:	fb04 f106 	mul.w	r1, r4, r6
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c6e:	f080 8112 	bcs.w	8000e96 <__udivmoddi4+0x27e>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 810f 	bls.w	8000e96 <__udivmoddi4+0x27e>
 8000c78:	3c02      	subs	r4, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a59      	subs	r1, r3, r1
 8000c7e:	fa1f f38e 	uxth.w	r3, lr
 8000c82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c86:	fb07 1110 	mls	r1, r7, r0, r1
 8000c8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c8e:	fb00 f606 	mul.w	r6, r0, r6
 8000c92:	429e      	cmp	r6, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x94>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c9e:	f080 80fc 	bcs.w	8000e9a <__udivmoddi4+0x282>
 8000ca2:	429e      	cmp	r6, r3
 8000ca4:	f240 80f9 	bls.w	8000e9a <__udivmoddi4+0x282>
 8000ca8:	4463      	add	r3, ip
 8000caa:	3802      	subs	r0, #2
 8000cac:	1b9b      	subs	r3, r3, r6
 8000cae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	b11d      	cbz	r5, 8000cbe <__udivmoddi4+0xa6>
 8000cb6:	40d3      	lsrs	r3, r2
 8000cb8:	2200      	movs	r2, #0
 8000cba:	e9c5 3200 	strd	r3, r2, [r5]
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d905      	bls.n	8000cd2 <__udivmoddi4+0xba>
 8000cc6:	b10d      	cbz	r5, 8000ccc <__udivmoddi4+0xb4>
 8000cc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4608      	mov	r0, r1
 8000cd0:	e7f5      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d146      	bne.n	8000d68 <__udivmoddi4+0x150>
 8000cda:	42a3      	cmp	r3, r4
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0xcc>
 8000cde:	4290      	cmp	r0, r2
 8000ce0:	f0c0 80f0 	bcc.w	8000ec4 <__udivmoddi4+0x2ac>
 8000ce4:	1a86      	subs	r6, r0, r2
 8000ce6:	eb64 0303 	sbc.w	r3, r4, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	2d00      	cmp	r5, #0
 8000cee:	d0e6      	beq.n	8000cbe <__udivmoddi4+0xa6>
 8000cf0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cf4:	e7e3      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000cf6:	2a00      	cmp	r2, #0
 8000cf8:	f040 8090 	bne.w	8000e1c <__udivmoddi4+0x204>
 8000cfc:	eba1 040c 	sub.w	r4, r1, ip
 8000d00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d04:	fa1f f78c 	uxth.w	r7, ip
 8000d08:	2101      	movs	r1, #1
 8000d0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb08 4416 	mls	r4, r8, r6, r4
 8000d16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d1a:	fb07 f006 	mul.w	r0, r7, r6
 8000d1e:	4298      	cmp	r0, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x11c>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x11a>
 8000d2c:	4298      	cmp	r0, r3
 8000d2e:	f200 80cd 	bhi.w	8000ecc <__udivmoddi4+0x2b4>
 8000d32:	4626      	mov	r6, r4
 8000d34:	1a1c      	subs	r4, r3, r0
 8000d36:	fa1f f38e 	uxth.w	r3, lr
 8000d3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000d42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d46:	fb00 f707 	mul.w	r7, r0, r7
 8000d4a:	429f      	cmp	r7, r3
 8000d4c:	d908      	bls.n	8000d60 <__udivmoddi4+0x148>
 8000d4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0x146>
 8000d58:	429f      	cmp	r7, r3
 8000d5a:	f200 80b0 	bhi.w	8000ebe <__udivmoddi4+0x2a6>
 8000d5e:	4620      	mov	r0, r4
 8000d60:	1bdb      	subs	r3, r3, r7
 8000d62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d66:	e7a5      	b.n	8000cb4 <__udivmoddi4+0x9c>
 8000d68:	f1c1 0620 	rsb	r6, r1, #32
 8000d6c:	408b      	lsls	r3, r1
 8000d6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d72:	431f      	orrs	r7, r3
 8000d74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d78:	fa04 f301 	lsl.w	r3, r4, r1
 8000d7c:	ea43 030c 	orr.w	r3, r3, ip
 8000d80:	40f4      	lsrs	r4, r6
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	0c38      	lsrs	r0, r7, #16
 8000d88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d90:	fa1f fc87 	uxth.w	ip, r7
 8000d94:	fb00 441e 	mls	r4, r0, lr, r4
 8000d98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000da0:	45a1      	cmp	r9, r4
 8000da2:	fa02 f201 	lsl.w	r2, r2, r1
 8000da6:	d90a      	bls.n	8000dbe <__udivmoddi4+0x1a6>
 8000da8:	193c      	adds	r4, r7, r4
 8000daa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000dae:	f080 8084 	bcs.w	8000eba <__udivmoddi4+0x2a2>
 8000db2:	45a1      	cmp	r9, r4
 8000db4:	f240 8081 	bls.w	8000eba <__udivmoddi4+0x2a2>
 8000db8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dbc:	443c      	add	r4, r7
 8000dbe:	eba4 0409 	sub.w	r4, r4, r9
 8000dc2:	fa1f f983 	uxth.w	r9, r3
 8000dc6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dca:	fb00 4413 	mls	r4, r0, r3, r4
 8000dce:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dd2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd6:	45a4      	cmp	ip, r4
 8000dd8:	d907      	bls.n	8000dea <__udivmoddi4+0x1d2>
 8000dda:	193c      	adds	r4, r7, r4
 8000ddc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000de0:	d267      	bcs.n	8000eb2 <__udivmoddi4+0x29a>
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d965      	bls.n	8000eb2 <__udivmoddi4+0x29a>
 8000de6:	3b02      	subs	r3, #2
 8000de8:	443c      	add	r4, r7
 8000dea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dee:	fba0 9302 	umull	r9, r3, r0, r2
 8000df2:	eba4 040c 	sub.w	r4, r4, ip
 8000df6:	429c      	cmp	r4, r3
 8000df8:	46ce      	mov	lr, r9
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	d351      	bcc.n	8000ea2 <__udivmoddi4+0x28a>
 8000dfe:	d04e      	beq.n	8000e9e <__udivmoddi4+0x286>
 8000e00:	b155      	cbz	r5, 8000e18 <__udivmoddi4+0x200>
 8000e02:	ebb8 030e 	subs.w	r3, r8, lr
 8000e06:	eb64 040c 	sbc.w	r4, r4, ip
 8000e0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0e:	40cb      	lsrs	r3, r1
 8000e10:	431e      	orrs	r6, r3
 8000e12:	40cc      	lsrs	r4, r1
 8000e14:	e9c5 6400 	strd	r6, r4, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	e750      	b.n	8000cbe <__udivmoddi4+0xa6>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f103 	lsr.w	r1, r0, r3
 8000e24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e28:	fa24 f303 	lsr.w	r3, r4, r3
 8000e2c:	4094      	lsls	r4, r2
 8000e2e:	430c      	orrs	r4, r1
 8000e30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e38:	fa1f f78c 	uxth.w	r7, ip
 8000e3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e40:	fb08 3110 	mls	r1, r8, r0, r3
 8000e44:	0c23      	lsrs	r3, r4, #16
 8000e46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e4a:	fb00 f107 	mul.w	r1, r0, r7
 8000e4e:	4299      	cmp	r1, r3
 8000e50:	d908      	bls.n	8000e64 <__udivmoddi4+0x24c>
 8000e52:	eb1c 0303 	adds.w	r3, ip, r3
 8000e56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e5a:	d22c      	bcs.n	8000eb6 <__udivmoddi4+0x29e>
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	d92a      	bls.n	8000eb6 <__udivmoddi4+0x29e>
 8000e60:	3802      	subs	r0, #2
 8000e62:	4463      	add	r3, ip
 8000e64:	1a5b      	subs	r3, r3, r1
 8000e66:	b2a4      	uxth	r4, r4
 8000e68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e74:	fb01 f307 	mul.w	r3, r1, r7
 8000e78:	42a3      	cmp	r3, r4
 8000e7a:	d908      	bls.n	8000e8e <__udivmoddi4+0x276>
 8000e7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e84:	d213      	bcs.n	8000eae <__udivmoddi4+0x296>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d911      	bls.n	8000eae <__udivmoddi4+0x296>
 8000e8a:	3902      	subs	r1, #2
 8000e8c:	4464      	add	r4, ip
 8000e8e:	1ae4      	subs	r4, r4, r3
 8000e90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e94:	e739      	b.n	8000d0a <__udivmoddi4+0xf2>
 8000e96:	4604      	mov	r4, r0
 8000e98:	e6f0      	b.n	8000c7c <__udivmoddi4+0x64>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e706      	b.n	8000cac <__udivmoddi4+0x94>
 8000e9e:	45c8      	cmp	r8, r9
 8000ea0:	d2ae      	bcs.n	8000e00 <__udivmoddi4+0x1e8>
 8000ea2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ea6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eaa:	3801      	subs	r0, #1
 8000eac:	e7a8      	b.n	8000e00 <__udivmoddi4+0x1e8>
 8000eae:	4631      	mov	r1, r6
 8000eb0:	e7ed      	b.n	8000e8e <__udivmoddi4+0x276>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	e799      	b.n	8000dea <__udivmoddi4+0x1d2>
 8000eb6:	4630      	mov	r0, r6
 8000eb8:	e7d4      	b.n	8000e64 <__udivmoddi4+0x24c>
 8000eba:	46d6      	mov	lr, sl
 8000ebc:	e77f      	b.n	8000dbe <__udivmoddi4+0x1a6>
 8000ebe:	4463      	add	r3, ip
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	e74d      	b.n	8000d60 <__udivmoddi4+0x148>
 8000ec4:	4606      	mov	r6, r0
 8000ec6:	4623      	mov	r3, r4
 8000ec8:	4608      	mov	r0, r1
 8000eca:	e70f      	b.n	8000cec <__udivmoddi4+0xd4>
 8000ecc:	3e02      	subs	r6, #2
 8000ece:	4463      	add	r3, ip
 8000ed0:	e730      	b.n	8000d34 <__udivmoddi4+0x11c>
 8000ed2:	bf00      	nop

08000ed4 <__aeabi_idiv0>:
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ede:	463b      	mov	r3, r7
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eea:	4b7c      	ldr	r3, [pc, #496]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000eec:	4a7c      	ldr	r2, [pc, #496]	@ (80010e0 <MX_ADC1_Init+0x208>)
 8000eee:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ef0:	4b7a      	ldr	r3, [pc, #488]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef6:	4b79      	ldr	r3, [pc, #484]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000efc:	4b77      	ldr	r3, [pc, #476]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f02:	4b76      	ldr	r3, [pc, #472]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f08:	4b74      	ldr	r3, [pc, #464]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f10:	4b72      	ldr	r3, [pc, #456]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f16:	4b71      	ldr	r3, [pc, #452]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f18:	4a72      	ldr	r2, [pc, #456]	@ (80010e4 <MX_ADC1_Init+0x20c>)
 8000f1a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f1c:	4b6f      	ldr	r3, [pc, #444]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 14;
 8000f22:	4b6e      	ldr	r3, [pc, #440]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f24:	220e      	movs	r2, #14
 8000f26:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f28:	4b6c      	ldr	r3, [pc, #432]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f30:	4b6a      	ldr	r3, [pc, #424]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f36:	4869      	ldr	r0, [pc, #420]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f38:	f001 ffc4 	bl	8002ec4 <HAL_ADC_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f42:	f001 fa7b 	bl	800243c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f46:	2301      	movs	r3, #1
 8000f48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f4e:	2307      	movs	r3, #7
 8000f50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f52:	463b      	mov	r3, r7
 8000f54:	4619      	mov	r1, r3
 8000f56:	4861      	ldr	r0, [pc, #388]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f58:	f002 fa36 	bl	80033c8 <HAL_ADC_ConfigChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f62:	f001 fa6b 	bl	800243c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f66:	2302      	movs	r3, #2
 8000f68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4619      	mov	r1, r3
 8000f72:	485a      	ldr	r0, [pc, #360]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f74:	f002 fa28 	bl	80033c8 <HAL_ADC_ConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000f7e:	f001 fa5d 	bl	800243c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f82:	2304      	movs	r3, #4
 8000f84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f86:	2303      	movs	r3, #3
 8000f88:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4853      	ldr	r0, [pc, #332]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000f90:	f002 fa1a 	bl	80033c8 <HAL_ADC_ConfigChannel>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000f9a:	f001 fa4f 	bl	800243c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f9e:	2305      	movs	r3, #5
 8000fa0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	4619      	mov	r1, r3
 8000faa:	484c      	ldr	r0, [pc, #304]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000fac:	f002 fa0c 	bl	80033c8 <HAL_ADC_ConfigChannel>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000fb6:	f001 fa41 	bl	800243c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fba:	2306      	movs	r3, #6
 8000fbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000fbe:	2305      	movs	r3, #5
 8000fc0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4845      	ldr	r0, [pc, #276]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000fc8:	f002 f9fe 	bl	80033c8 <HAL_ADC_ConfigChannel>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000fd2:	f001 fa33 	bl	800243c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000fda:	2306      	movs	r3, #6
 8000fdc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fde:	463b      	mov	r3, r7
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	483e      	ldr	r0, [pc, #248]	@ (80010dc <MX_ADC1_Init+0x204>)
 8000fe4:	f002 f9f0 	bl	80033c8 <HAL_ADC_ConfigChannel>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000fee:	f001 fa25 	bl	800243c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ff2:	2308      	movs	r3, #8
 8000ff4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000ff6:	2307      	movs	r3, #7
 8000ff8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4837      	ldr	r0, [pc, #220]	@ (80010dc <MX_ADC1_Init+0x204>)
 8001000:	f002 f9e2 	bl	80033c8 <HAL_ADC_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 800100a:	f001 fa17 	bl	800243c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800100e:	2309      	movs	r3, #9
 8001010:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001012:	2308      	movs	r3, #8
 8001014:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001016:	463b      	mov	r3, r7
 8001018:	4619      	mov	r1, r3
 800101a:	4830      	ldr	r0, [pc, #192]	@ (80010dc <MX_ADC1_Init+0x204>)
 800101c:	f002 f9d4 	bl	80033c8 <HAL_ADC_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8001026:	f001 fa09 	bl	800243c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800102a:	230a      	movs	r3, #10
 800102c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800102e:	2309      	movs	r3, #9
 8001030:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001032:	463b      	mov	r3, r7
 8001034:	4619      	mov	r1, r3
 8001036:	4829      	ldr	r0, [pc, #164]	@ (80010dc <MX_ADC1_Init+0x204>)
 8001038:	f002 f9c6 	bl	80033c8 <HAL_ADC_ConfigChannel>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8001042:	f001 f9fb 	bl	800243c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001046:	230b      	movs	r3, #11
 8001048:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 800104a:	230a      	movs	r3, #10
 800104c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800104e:	463b      	mov	r3, r7
 8001050:	4619      	mov	r1, r3
 8001052:	4822      	ldr	r0, [pc, #136]	@ (80010dc <MX_ADC1_Init+0x204>)
 8001054:	f002 f9b8 	bl	80033c8 <HAL_ADC_ConfigChannel>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 800105e:	f001 f9ed 	bl	800243c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001062:	230c      	movs	r3, #12
 8001064:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8001066:	230b      	movs	r3, #11
 8001068:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106a:	463b      	mov	r3, r7
 800106c:	4619      	mov	r1, r3
 800106e:	481b      	ldr	r0, [pc, #108]	@ (80010dc <MX_ADC1_Init+0x204>)
 8001070:	f002 f9aa 	bl	80033c8 <HAL_ADC_ConfigChannel>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0x1a6>
  {
    Error_Handler();
 800107a:	f001 f9df 	bl	800243c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800107e:	230d      	movs	r3, #13
 8001080:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8001082:	230c      	movs	r3, #12
 8001084:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001086:	463b      	mov	r3, r7
 8001088:	4619      	mov	r1, r3
 800108a:	4814      	ldr	r0, [pc, #80]	@ (80010dc <MX_ADC1_Init+0x204>)
 800108c:	f002 f99c 	bl	80033c8 <HAL_ADC_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_ADC1_Init+0x1c2>
  {
    Error_Handler();
 8001096:	f001 f9d1 	bl	800243c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800109a:	230e      	movs	r3, #14
 800109c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 800109e:	230d      	movs	r3, #13
 80010a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	4619      	mov	r1, r3
 80010a6:	480d      	ldr	r0, [pc, #52]	@ (80010dc <MX_ADC1_Init+0x204>)
 80010a8:	f002 f98e 	bl	80033c8 <HAL_ADC_ConfigChannel>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_ADC1_Init+0x1de>
  {
    Error_Handler();
 80010b2:	f001 f9c3 	bl	800243c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80010b6:	230f      	movs	r3, #15
 80010b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80010ba:	230e      	movs	r3, #14
 80010bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010be:	463b      	mov	r3, r7
 80010c0:	4619      	mov	r1, r3
 80010c2:	4806      	ldr	r0, [pc, #24]	@ (80010dc <MX_ADC1_Init+0x204>)
 80010c4:	f002 f980 	bl	80033c8 <HAL_ADC_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_ADC1_Init+0x1fa>
  {
    Error_Handler();
 80010ce:	f001 f9b5 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000230 	.word	0x20000230
 80010e0:	40012000 	.word	0x40012000
 80010e4:	0f000001 	.word	0x0f000001

080010e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	@ 0x30
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 031c 	add.w	r3, r7, #28
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a4d      	ldr	r2, [pc, #308]	@ (800123c <HAL_ADC_MspInit+0x154>)
 8001106:	4293      	cmp	r3, r2
 8001108:	f040 8094 	bne.w	8001234 <HAL_ADC_MspInit+0x14c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	61bb      	str	r3, [r7, #24]
 8001110:	4b4b      	ldr	r3, [pc, #300]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 8001112:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001114:	4a4a      	ldr	r2, [pc, #296]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 8001116:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800111a:	6453      	str	r3, [r2, #68]	@ 0x44
 800111c:	4b48      	ldr	r3, [pc, #288]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 800111e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001128:	2300      	movs	r3, #0
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	4b44      	ldr	r3, [pc, #272]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 800112e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001130:	4a43      	ldr	r2, [pc, #268]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 8001132:	f043 0304 	orr.w	r3, r3, #4
 8001136:	6313      	str	r3, [r2, #48]	@ 0x30
 8001138:	4b41      	ldr	r3, [pc, #260]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 800113a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113c:	f003 0304 	and.w	r3, r3, #4
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001144:	2300      	movs	r3, #0
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	4b3d      	ldr	r3, [pc, #244]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 800114a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114c:	4a3c      	ldr	r2, [pc, #240]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 800114e:	f043 0301 	orr.w	r3, r3, #1
 8001152:	6313      	str	r3, [r2, #48]	@ 0x30
 8001154:	4b3a      	ldr	r3, [pc, #232]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 8001156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	4b36      	ldr	r3, [pc, #216]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 8001166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001168:	4a35      	ldr	r2, [pc, #212]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 800116a:	f043 0302 	orr.w	r3, r3, #2
 800116e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001170:	4b33      	ldr	r3, [pc, #204]	@ (8001240 <HAL_ADC_MspInit+0x158>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800117c:	233f      	movs	r3, #63	@ 0x3f
 800117e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001180:	2303      	movs	r3, #3
 8001182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	482d      	ldr	r0, [pc, #180]	@ (8001244 <HAL_ADC_MspInit+0x15c>)
 8001190:	f003 f846 	bl	8004220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5
 8001194:	23f6      	movs	r3, #246	@ 0xf6
 8001196:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001198:	2303      	movs	r3, #3
 800119a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	4619      	mov	r1, r3
 80011a6:	4828      	ldr	r0, [pc, #160]	@ (8001248 <HAL_ADC_MspInit+0x160>)
 80011a8:	f003 f83a 	bl	8004220 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011ac:	2303      	movs	r3, #3
 80011ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b0:	2303      	movs	r3, #3
 80011b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b8:	f107 031c 	add.w	r3, r7, #28
 80011bc:	4619      	mov	r1, r3
 80011be:	4823      	ldr	r0, [pc, #140]	@ (800124c <HAL_ADC_MspInit+0x164>)
 80011c0:	f003 f82e 	bl	8004220 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011c4:	4b22      	ldr	r3, [pc, #136]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011c6:	4a23      	ldr	r2, [pc, #140]	@ (8001254 <HAL_ADC_MspInit+0x16c>)
 80011c8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011ca:	4b21      	ldr	r3, [pc, #132]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011dc:	4b1c      	ldr	r3, [pc, #112]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011e2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011e6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80011ea:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011ec:	4b18      	ldr	r3, [pc, #96]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011ee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011f2:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011f4:	4b16      	ldr	r3, [pc, #88]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011fa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011fc:	4b14      	ldr	r3, [pc, #80]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 80011fe:	2200      	movs	r2, #0
 8001200:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001202:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 8001204:	2200      	movs	r2, #0
 8001206:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001208:	4811      	ldr	r0, [pc, #68]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 800120a:	f002 fc99 	bl	8003b40 <HAL_DMA_Init>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <HAL_ADC_MspInit+0x130>
    {
      Error_Handler();
 8001214:	f001 f912 	bl	800243c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	4a0d      	ldr	r2, [pc, #52]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 800121c:	639a      	str	r2, [r3, #56]	@ 0x38
 800121e:	4a0c      	ldr	r2, [pc, #48]	@ (8001250 <HAL_ADC_MspInit+0x168>)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001224:	2200      	movs	r2, #0
 8001226:	2100      	movs	r1, #0
 8001228:	2012      	movs	r0, #18
 800122a:	f002 fc52 	bl	8003ad2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800122e:	2012      	movs	r0, #18
 8001230:	f002 fc6b 	bl	8003b0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001234:	bf00      	nop
 8001236:	3730      	adds	r7, #48	@ 0x30
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40012000 	.word	0x40012000
 8001240:	40023800 	.word	0x40023800
 8001244:	40020800 	.word	0x40020800
 8001248:	40020000 	.word	0x40020000
 800124c:	40020400 	.word	0x40020400
 8001250:	20000278 	.word	0x20000278
 8001254:	40026410 	.word	0x40026410

08001258 <BQ76905_WriteSubcommand>:
#include "bms.h"
#include "i2c.h"
#include "usart.h"

// Función para enviar un subcomando al BQ76905 (no requiere checksum)
HAL_StatusTypeDef BQ76905_WriteSubcommand(BQ76905_Device *bms, BQ76905_Registers subcmd) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af02      	add	r7, sp, #8
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	807b      	strh	r3, [r7, #2]
    uint8_t tx[3] = {BASE_SUBCOMMAND_ADDRESS, (uint8_t)(subcmd & 0xFF), (uint8_t)(subcmd >> 8)};
 8001264:	233e      	movs	r3, #62	@ 0x3e
 8001266:	733b      	strb	r3, [r7, #12]
 8001268:	887b      	ldrh	r3, [r7, #2]
 800126a:	b2db      	uxtb	r3, r3
 800126c:	737b      	strb	r3, [r7, #13]
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	0a1b      	lsrs	r3, r3, #8
 8001272:	b29b      	uxth	r3, r3
 8001274:	b2db      	uxtb	r3, r3
 8001276:	73bb      	strb	r3, [r7, #14]
    return HAL_I2C_Master_Transmit(bms->hi2c, BQ76905_I2C_ADDR, tx, 3, HAL_MAX_DELAY);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	f107 020c 	add.w	r2, r7, #12
 8001280:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2303      	movs	r3, #3
 8001288:	2110      	movs	r1, #16
 800128a:	f003 fac3 	bl	8004814 <HAL_I2C_Master_Transmit>
 800128e:	4603      	mov	r3, r0
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <BQ76905_WriteRegister>:


// Función para escribir en un registro (requiere checksum si es de memoria)
HAL_StatusTypeDef BQ76905_WriteRegister(BQ76905_Device *bms, BQ76905_Registers reg, uint8_t *data, uint8_t len) {
 8001298:	b580      	push	{r7, lr}
 800129a:	b090      	sub	sp, #64	@ 0x40
 800129c:	af02      	add	r7, sp, #8
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	607a      	str	r2, [r7, #4]
 80012a2:	461a      	mov	r2, r3
 80012a4:	460b      	mov	r3, r1
 80012a6:	817b      	strh	r3, [r7, #10]
 80012a8:	4613      	mov	r3, r2
 80012aa:	727b      	strb	r3, [r7, #9]
    uint8_t tx[32];
    tx[0] = BASE_SUBCOMMAND_ADDRESS; // Dirección base
 80012ac:	233e      	movs	r3, #62	@ 0x3e
 80012ae:	753b      	strb	r3, [r7, #20]
    tx[1] = (uint8_t)(reg & 0xFF);  // LSB del registro
 80012b0:	897b      	ldrh	r3, [r7, #10]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	757b      	strb	r3, [r7, #21]
    tx[2] = (uint8_t)(reg >> 8);    // MSB del registro
 80012b6:	897b      	ldrh	r3, [r7, #10]
 80012b8:	0a1b      	lsrs	r3, r3, #8
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	75bb      	strb	r3, [r7, #22]

    // Copiar datos al buffer de transmisión
    memcpy(&tx[3], data, len);
 80012c0:	7a7a      	ldrb	r2, [r7, #9]
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	3303      	adds	r3, #3
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f006 ff21 	bl	8008112 <memcpy>

    // Enviar datos al registro
    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(bms->hi2c, BQ76905_I2C_ADDR, tx, len + 3, HAL_MAX_DELAY);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6818      	ldr	r0, [r3, #0]
 80012d4:	7a7b      	ldrb	r3, [r7, #9]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	3303      	adds	r3, #3
 80012da:	b29b      	uxth	r3, r3
 80012dc:	f107 0214 	add.w	r2, r7, #20
 80012e0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012e4:	9100      	str	r1, [sp, #0]
 80012e6:	2110      	movs	r1, #16
 80012e8:	f003 fa94 	bl	8004814 <HAL_I2C_Master_Transmit>
 80012ec:	4603      	mov	r3, r0
 80012ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (ret != HAL_OK) return ret;
 80012f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d002      	beq.n	8001300 <BQ76905_WriteRegister+0x68>
 80012fa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80012fe:	e006      	b.n	800130e <BQ76905_WriteRegister+0x76>

    // Si el registro pertenece a la memoria, escribir checksum
    return BQ76905_WriteChecksum(bms, reg, data, len);
 8001300:	7a7b      	ldrb	r3, [r7, #9]
 8001302:	8979      	ldrh	r1, [r7, #10]
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	68f8      	ldr	r0, [r7, #12]
 8001308:	f000 f805 	bl	8001316 <BQ76905_WriteChecksum>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3738      	adds	r7, #56	@ 0x38
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <BQ76905_WriteChecksum>:

// Función para calcular y escribir el checksum
HAL_StatusTypeDef BQ76905_WriteChecksum(BQ76905_Device *bms, BQ76905_Registers reg, uint8_t *data, uint8_t len) {
 8001316:	b580      	push	{r7, lr}
 8001318:	b088      	sub	sp, #32
 800131a:	af02      	add	r7, sp, #8
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	607a      	str	r2, [r7, #4]
 8001320:	461a      	mov	r2, r3
 8001322:	460b      	mov	r3, r1
 8001324:	817b      	strh	r3, [r7, #10]
 8001326:	4613      	mov	r3, r2
 8001328:	727b      	strb	r3, [r7, #9]
    uint8_t sum = (uint8_t)(reg & 0xFF) + (uint8_t)(reg >> 8);
 800132a:	897b      	ldrh	r3, [r7, #10]
 800132c:	b2da      	uxtb	r2, r3
 800132e:	897b      	ldrh	r3, [r7, #10]
 8001330:	0a1b      	lsrs	r3, r3, #8
 8001332:	b29b      	uxth	r3, r3
 8001334:	b2db      	uxtb	r3, r3
 8001336:	4413      	add	r3, r2
 8001338:	75fb      	strb	r3, [r7, #23]

    for (uint8_t i = 0; i < len; i++) {
 800133a:	2300      	movs	r3, #0
 800133c:	75bb      	strb	r3, [r7, #22]
 800133e:	e009      	b.n	8001354 <BQ76905_WriteChecksum+0x3e>
        sum += data[i];
 8001340:	7dbb      	ldrb	r3, [r7, #22]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	781a      	ldrb	r2, [r3, #0]
 8001348:	7dfb      	ldrb	r3, [r7, #23]
 800134a:	4413      	add	r3, r2
 800134c:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < len; i++) {
 800134e:	7dbb      	ldrb	r3, [r7, #22]
 8001350:	3301      	adds	r3, #1
 8001352:	75bb      	strb	r3, [r7, #22]
 8001354:	7dba      	ldrb	r2, [r7, #22]
 8001356:	7a7b      	ldrb	r3, [r7, #9]
 8001358:	429a      	cmp	r2, r3
 800135a:	d3f1      	bcc.n	8001340 <BQ76905_WriteChecksum+0x2a>
    }

    uint8_t chksum = ~sum;      // Invertimos el complemento a uno
 800135c:	7dfb      	ldrb	r3, [r7, #23]
 800135e:	43db      	mvns	r3, r3
 8001360:	757b      	strb	r3, [r7, #21]
    uint8_t lengthVal = len + 4;  // Longitud = datos + dirección + (checksum + longitud)
 8001362:	7a7b      	ldrb	r3, [r7, #9]
 8001364:	3304      	adds	r3, #4
 8001366:	753b      	strb	r3, [r7, #20]

    uint8_t tx[3] = {0x60, chksum, lengthVal};  // Dirección del checksum
 8001368:	2360      	movs	r3, #96	@ 0x60
 800136a:	743b      	strb	r3, [r7, #16]
 800136c:	7d7b      	ldrb	r3, [r7, #21]
 800136e:	747b      	strb	r3, [r7, #17]
 8001370:	7d3b      	ldrb	r3, [r7, #20]
 8001372:	74bb      	strb	r3, [r7, #18]
    return HAL_I2C_Master_Transmit(bms->hi2c, BQ76905_I2C_ADDR, tx, 3, HAL_MAX_DELAY);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6818      	ldr	r0, [r3, #0]
 8001378:	f107 0210 	add.w	r2, r7, #16
 800137c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2303      	movs	r3, #3
 8001384:	2110      	movs	r1, #16
 8001386:	f003 fa45 	bl	8004814 <HAL_I2C_Master_Transmit>
 800138a:	4603      	mov	r3, r0
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <BQ76905_ReadRegister>:


// Función para leer un registro
HAL_StatusTypeDef BQ76905_ReadRegister(BQ76905_Device *bms, BQ76905_Registers reg, uint8_t *rxData, uint8_t len) {
 8001394:	b580      	push	{r7, lr}
 8001396:	b088      	sub	sp, #32
 8001398:	af02      	add	r7, sp, #8
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	607a      	str	r2, [r7, #4]
 800139e:	461a      	mov	r2, r3
 80013a0:	460b      	mov	r3, r1
 80013a2:	817b      	strh	r3, [r7, #10]
 80013a4:	4613      	mov	r3, r2
 80013a6:	727b      	strb	r3, [r7, #9]
    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(bms->hi2c, BQ76905_I2C_ADDR, (uint8_t*)&reg, 1, HAL_MAX_DELAY);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6818      	ldr	r0, [r3, #0]
 80013ac:	f107 020a 	add.w	r2, r7, #10
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2301      	movs	r3, #1
 80013b8:	2110      	movs	r1, #16
 80013ba:	f003 fa2b 	bl	8004814 <HAL_I2C_Master_Transmit>
 80013be:	4603      	mov	r3, r0
 80013c0:	75fb      	strb	r3, [r7, #23]
    if (ret != HAL_OK) return ret;
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <BQ76905_ReadRegister+0x38>
 80013c8:	7dfb      	ldrb	r3, [r7, #23]
 80013ca:	e00b      	b.n	80013e4 <BQ76905_ReadRegister+0x50>
    return HAL_I2C_Master_Receive(bms->hi2c, BQ76905_I2C_ADDR, rxData, len, HAL_MAX_DELAY);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6818      	ldr	r0, [r3, #0]
 80013d0:	7a7b      	ldrb	r3, [r7, #9]
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013d8:	9200      	str	r2, [sp, #0]
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	2110      	movs	r1, #16
 80013de:	f003 fb17 	bl	8004a10 <HAL_I2C_Master_Receive>
 80013e2:	4603      	mov	r3, r0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <BQ76905_Configure>:


// Función para configurar el BQ76905
void BQ76905_Configure(BQ76905_Device *bms) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af02      	add	r7, sp, #8
 80013f2:	6078      	str	r0, [r7, #4]
    uint8_t data[3];

    // Entrar en modo CONFIG_UPDATE
    BQ76905_WriteSubcommand(bms, CONFIG_UPDATE);
 80013f4:	2190      	movs	r1, #144	@ 0x90
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff ff2e 	bl	8001258 <BQ76905_WriteSubcommand>

    // Configurar VCell Mode (2 celdas)
    data[0] = 0x02;
 80013fc:	2302      	movs	r3, #2
 80013fe:	733b      	strb	r3, [r7, #12]
    BQ76905_WriteRegister(bms, VCELL_MODE, data, 1);
 8001400:	f107 020c 	add.w	r2, r7, #12
 8001404:	2301      	movs	r3, #1
 8001406:	f249 011b 	movw	r1, #36891	@ 0x901b
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ff44 	bl	8001298 <BQ76905_WriteRegister>

    // Habilita protecciones OCC, OCD, SCD y COV
    data[0] = 0xE1;	//11100001
 8001410:	23e1      	movs	r3, #225	@ 0xe1
 8001412:	733b      	strb	r3, [r7, #12]
    BQ76905_WriteRegister(bms, ENABLED_PROT_A, data, 1);
 8001414:	f107 020c 	add.w	r2, r7, #12
 8001418:	2301      	movs	r3, #1
 800141a:	f249 0124 	movw	r1, #36900	@ 0x9024
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff ff3a 	bl	8001298 <BQ76905_WriteRegister>

    // Umbral de bajo voltaje (en mV) 0x0B *256 + 0x8b = 3000 mV
    data[0] = 0xB8;
 8001424:	23b8      	movs	r3, #184	@ 0xb8
 8001426:	733b      	strb	r3, [r7, #12]
    data[1] = 0x0B;
 8001428:	230b      	movs	r3, #11
 800142a:	737b      	strb	r3, [r7, #13]
    BQ76905_WriteRegister(bms, CELL_UNDERVOLTAGE_THRESHOLD, data, 2);
 800142c:	f107 020c 	add.w	r2, r7, #12
 8001430:	2302      	movs	r3, #2
 8001432:	f249 012e 	movw	r1, #36910	@ 0x902e
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ff2e 	bl	8001298 <BQ76905_WriteRegister>

    BQ76905_WriteRegister(bms, OVERCURRENT_DISCHARGE_1, data, 1);
 800143c:	f107 020c 	add.w	r2, r7, #12
 8001440:	2301      	movs	r3, #1
 8001442:	f249 0138 	movw	r1, #36920	@ 0x9038
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff ff26 	bl	8001298 <BQ76905_WriteRegister>

    data[0] = 50;
 800144c:	2332      	movs	r3, #50	@ 0x32
 800144e:	733b      	strb	r3, [r7, #12]
    BQ76905_WriteRegister(bms, OVERCURRENT_CHARGE_THRESHOLD, data, 1);
 8001450:	f107 020c 	add.w	r2, r7, #12
 8001454:	2301      	movs	r3, #1
 8001456:	f249 0136 	movw	r1, #36918	@ 0x9036
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff ff1c 	bl	8001298 <BQ76905_WriteRegister>
    data[0] = 75;
 8001460:	234b      	movs	r3, #75	@ 0x4b
 8001462:	733b      	strb	r3, [r7, #12]
    BQ76905_WriteRegister(bms, OVERCURRENT_DISCHARGE_1, data, 1);
 8001464:	f107 020c 	add.w	r2, r7, #12
 8001468:	2301      	movs	r3, #1
 800146a:	f249 0138 	movw	r1, #36920	@ 0x9038
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ff12 	bl	8001298 <BQ76905_WriteRegister>
    data[0] = 75;
 8001474:	234b      	movs	r3, #75	@ 0x4b
 8001476:	733b      	strb	r3, [r7, #12]

    BQ76905_WriteRegister(bms, OVERCURRENT_DISCHARGE_2, data, 1);
 8001478:	f107 020c 	add.w	r2, r7, #12
 800147c:	2301      	movs	r3, #1
 800147e:	f249 013a 	movw	r1, #36922	@ 0x903a
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff ff08 	bl	8001298 <BQ76905_WriteRegister>



    // Salir de modo CONFIG_UPDATE
    BQ76905_WriteSubcommand(bms, CONFIG_EXIT);
 8001488:	2192      	movs	r1, #146	@ 0x92
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff fee4 	bl	8001258 <BQ76905_WriteSubcommand>

	//----------------------------------------------------------------------------------------
	// (Opcional) 6) Forzar manualmente DSG_ON: Comando directo 0x68 => 1 byte con bit0=1
	//----------------------------------------------------------------------------------------

	data[0] = 0x68;   // FET Control
 8001490:	2368      	movs	r3, #104	@ 0x68
 8001492:	733b      	strb	r3, [r7, #12]
	data[1] = 0x03;   // 0b00000001 => DSG_ON=1
 8001494:	2303      	movs	r3, #3
 8001496:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, 0x10, data, 2, 100);
 8001498:	f107 020c 	add.w	r2, r7, #12
 800149c:	2364      	movs	r3, #100	@ 0x64
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2302      	movs	r3, #2
 80014a2:	2110      	movs	r1, #16
 80014a4:	480a      	ldr	r0, [pc, #40]	@ (80014d0 <BQ76905_Configure+0xe4>)
 80014a6:	f003 f9b5 	bl	8004814 <HAL_I2C_Master_Transmit>

	data[0] = 0x66;  // Dirección de Alarm Enable
 80014aa:	2366      	movs	r3, #102	@ 0x66
 80014ac:	733b      	strb	r3, [r7, #12]
	data[1] = 0x60;  // LSB del valor 0x0060 (FULLSCAN, ADSCAN)
 80014ae:	2360      	movs	r3, #96	@ 0x60
 80014b0:	737b      	strb	r3, [r7, #13]
	data[2] = 0x00;  // MSB del valor 0x0060
 80014b2:	2300      	movs	r3, #0
 80014b4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c1, 0x10, data, 3, 100);
 80014b6:	f107 020c 	add.w	r2, r7, #12
 80014ba:	2364      	movs	r3, #100	@ 0x64
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	2303      	movs	r3, #3
 80014c0:	2110      	movs	r1, #16
 80014c2:	4803      	ldr	r0, [pc, #12]	@ (80014d0 <BQ76905_Configure+0xe4>)
 80014c4:	f003 f9a6 	bl	8004814 <HAL_I2C_Master_Transmit>





}
 80014c8:	bf00      	nop
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200002d8 	.word	0x200002d8

080014d4 <BQ76905_ReadData>:

// Función para leer datos desde el BQ76905
void BQ76905_ReadData(BQ76905_Device *bms) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
    uint8_t rx[6]; // Buffer temporal de lectura

    //  Leer voltaje de todas las celdas (hasta 5 celdas)
    for (uint8_t i = 0; i < MAX_CELLS; i++) {
 80014dc:	2300      	movs	r3, #0
 80014de:	73fb      	strb	r3, [r7, #15]
 80014e0:	e01b      	b.n	800151a <BQ76905_ReadData+0x46>
        BQ76905_ReadRegister(bms, CELL1_VOLTAGE + (i * 2), rx, 2);
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	330a      	adds	r3, #10
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	005b      	lsls	r3, r3, #1
 80014ea:	b299      	uxth	r1, r3
 80014ec:	f107 0208 	add.w	r2, r7, #8
 80014f0:	2302      	movs	r3, #2
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f7ff ff4e 	bl	8001394 <BQ76905_ReadRegister>
        bms->cell_voltages[i] = rx[0] | (rx[1] << 8);
 80014f8:	7a3b      	ldrb	r3, [r7, #8]
 80014fa:	b21a      	sxth	r2, r3
 80014fc:	7a7b      	ldrb	r3, [r7, #9]
 80014fe:	021b      	lsls	r3, r3, #8
 8001500:	b21b      	sxth	r3, r3
 8001502:	4313      	orrs	r3, r2
 8001504:	b21a      	sxth	r2, r3
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	b291      	uxth	r1, r2
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	4413      	add	r3, r2
 8001510:	460a      	mov	r2, r1
 8001512:	809a      	strh	r2, [r3, #4]
    for (uint8_t i = 0; i < MAX_CELLS; i++) {
 8001514:	7bfb      	ldrb	r3, [r7, #15]
 8001516:	3301      	adds	r3, #1
 8001518:	73fb      	strb	r3, [r7, #15]
 800151a:	7bfb      	ldrb	r3, [r7, #15]
 800151c:	2b04      	cmp	r3, #4
 800151e:	d9e0      	bls.n	80014e2 <BQ76905_ReadData+0xe>
    }

    //  Leer voltaje total del pack
    BQ76905_ReadRegister(bms, STACK_VOLTAGE, rx, 2);
 8001520:	f107 0208 	add.w	r2, r7, #8
 8001524:	2302      	movs	r3, #2
 8001526:	2126      	movs	r1, #38	@ 0x26
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff ff33 	bl	8001394 <BQ76905_ReadRegister>
    bms->stack_voltage = rx[0] | (rx[1] << 8);
 800152e:	7a3b      	ldrb	r3, [r7, #8]
 8001530:	b21a      	sxth	r2, r3
 8001532:	7a7b      	ldrb	r3, [r7, #9]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	b21b      	sxth	r3, r3
 8001538:	4313      	orrs	r3, r2
 800153a:	b21b      	sxth	r3, r3
 800153c:	b29a      	uxth	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	81da      	strh	r2, [r3, #14]

    //  Leer voltaje de referencia interna (1.8V)
    BQ76905_ReadRegister(bms, REG18_VOLTAGE, rx, 2);
 8001542:	f107 0208 	add.w	r2, r7, #8
 8001546:	2302      	movs	r3, #2
 8001548:	2122      	movs	r1, #34	@ 0x22
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff ff22 	bl	8001394 <BQ76905_ReadRegister>
    bms->reg18_voltage = rx[0] | (rx[1] << 8);
 8001550:	7a3b      	ldrb	r3, [r7, #8]
 8001552:	b21a      	sxth	r2, r3
 8001554:	7a7b      	ldrb	r3, [r7, #9]
 8001556:	021b      	lsls	r3, r3, #8
 8001558:	b21b      	sxth	r3, r3
 800155a:	4313      	orrs	r3, r2
 800155c:	b21b      	sxth	r3, r3
 800155e:	b29a      	uxth	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	821a      	strh	r2, [r3, #16]

    //  Leer medición de referencia de tierra
    BQ76905_ReadRegister(bms, VSS_VOLTAGE, rx, 2);
 8001564:	f107 0208 	add.w	r2, r7, #8
 8001568:	2302      	movs	r3, #2
 800156a:	2124      	movs	r1, #36	@ 0x24
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff11 	bl	8001394 <BQ76905_ReadRegister>
    bms->vss_voltage = rx[0] | (rx[1] << 8);
 8001572:	7a3b      	ldrb	r3, [r7, #8]
 8001574:	b21a      	sxth	r2, r3
 8001576:	7a7b      	ldrb	r3, [r7, #9]
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	b21b      	sxth	r3, r3
 800157c:	4313      	orrs	r3, r2
 800157e:	b21b      	sxth	r3, r3
 8001580:	b29a      	uxth	r2, r3
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	825a      	strh	r2, [r3, #18]

    //  Leer temperatura interna
    BQ76905_ReadRegister(bms, INT_TEMPERATURE, rx, 2);
 8001586:	f107 0208 	add.w	r2, r7, #8
 800158a:	2302      	movs	r3, #2
 800158c:	2128      	movs	r1, #40	@ 0x28
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f7ff ff00 	bl	8001394 <BQ76905_ReadRegister>
    bms->internal_temperature = rx[0] | (rx[1] << 8);
 8001594:	7a3b      	ldrb	r3, [r7, #8]
 8001596:	b21a      	sxth	r2, r3
 8001598:	7a7b      	ldrb	r3, [r7, #9]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b21b      	sxth	r3, r3
 800159e:	4313      	orrs	r3, r2
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	829a      	strh	r2, [r3, #20]

    //  Leer temperatura del sensor externo (TS)
    BQ76905_ReadRegister(bms, TS_MEASUREMENT, rx, 2);
 80015a6:	f107 0208 	add.w	r2, r7, #8
 80015aa:	2302      	movs	r3, #2
 80015ac:	212a      	movs	r1, #42	@ 0x2a
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f7ff fef0 	bl	8001394 <BQ76905_ReadRegister>
    bms->ts_measurement = rx[0] | (rx[1] << 8);
 80015b4:	7a3b      	ldrb	r3, [r7, #8]
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	7a7b      	ldrb	r3, [r7, #9]
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	b21b      	sxth	r3, r3
 80015be:	4313      	orrs	r3, r2
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	82da      	strh	r2, [r3, #22]

    //  Leer medición de corriente cruda (32 bits)
    BQ76905_ReadRegister(bms, RAW_CURRENT, rx, 4);
 80015c8:	f107 0208 	add.w	r2, r7, #8
 80015cc:	2304      	movs	r3, #4
 80015ce:	2136      	movs	r1, #54	@ 0x36
 80015d0:	6878      	ldr	r0, [r7, #4]
 80015d2:	f7ff fedf 	bl	8001394 <BQ76905_ReadRegister>
    bms->raw_current = (int32_t)(rx[0] | (rx[1] << 8) | (rx[2] << 16) | (rx[3] << 24));
 80015d6:	7a3b      	ldrb	r3, [r7, #8]
 80015d8:	461a      	mov	r2, r3
 80015da:	7a7b      	ldrb	r3, [r7, #9]
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	431a      	orrs	r2, r3
 80015e0:	7abb      	ldrb	r3, [r7, #10]
 80015e2:	041b      	lsls	r3, r3, #16
 80015e4:	431a      	orrs	r2, r3
 80015e6:	7afb      	ldrb	r3, [r7, #11]
 80015e8:	061b      	lsls	r3, r3, #24
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	619a      	str	r2, [r3, #24]

    //  Leer corriente CC2 (16 bits)
    BQ76905_ReadRegister(bms, CURRENT_MEASUREMENT, rx, 2);
 80015f0:	f107 0208 	add.w	r2, r7, #8
 80015f4:	2302      	movs	r3, #2
 80015f6:	213a      	movs	r1, #58	@ 0x3a
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff fecb 	bl	8001394 <BQ76905_ReadRegister>
    bms->current = (int16_t)(rx[0] | (rx[1] << 8));
 80015fe:	7a3b      	ldrb	r3, [r7, #8]
 8001600:	b21a      	sxth	r2, r3
 8001602:	7a7b      	ldrb	r3, [r7, #9]
 8001604:	021b      	lsls	r3, r3, #8
 8001606:	b21b      	sxth	r3, r3
 8001608:	4313      	orrs	r3, r2
 800160a:	b21a      	sxth	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	839a      	strh	r2, [r3, #28]

    //  Leer corriente CC1 (16 bits)
    BQ76905_ReadRegister(bms, CC1_CURRENT_MEASUREMENT, rx, 2);
 8001610:	f107 0208 	add.w	r2, r7, #8
 8001614:	2302      	movs	r3, #2
 8001616:	213c      	movs	r1, #60	@ 0x3c
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff febb 	bl	8001394 <BQ76905_ReadRegister>
    bms->cc1_current = (int16_t)(rx[0] | (rx[1] << 8));
 800161e:	7a3b      	ldrb	r3, [r7, #8]
 8001620:	b21a      	sxth	r2, r3
 8001622:	7a7b      	ldrb	r3, [r7, #9]
 8001624:	021b      	lsls	r3, r3, #8
 8001626:	b21b      	sxth	r3, r3
 8001628:	4313      	orrs	r3, r2
 800162a:	b21a      	sxth	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	83da      	strh	r2, [r3, #30]

    //  Leer estado de la batería
    BQ76905_ReadRegister(bms, BATTERY_STATUS, rx, 2);
 8001630:	f107 0208 	add.w	r2, r7, #8
 8001634:	2302      	movs	r3, #2
 8001636:	2112      	movs	r1, #18
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff feab 	bl	8001394 <BQ76905_ReadRegister>
    bms->battery_status = rx[0] | (rx[1] << 8);
 800163e:	7a3b      	ldrb	r3, [r7, #8]
 8001640:	b25a      	sxtb	r2, r3
 8001642:	7a7b      	ldrb	r3, [r7, #9]
 8001644:	021b      	lsls	r3, r3, #8
 8001646:	b25b      	sxtb	r3, r3
 8001648:	4313      	orrs	r3, r2
 800164a:	b25b      	sxtb	r3, r3
 800164c:	b2da      	uxtb	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f883 2020 	strb.w	r2, [r3, #32]

    //  Leer estado de alarmas y protecciones
    BQ76905_ReadRegister(bms, ALARM_STATUS, &bms->alarm_status, 1);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 800165a:	2301      	movs	r3, #1
 800165c:	2162      	movs	r1, #98	@ 0x62
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff fe98 	bl	8001394 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, ALARM_RAW_STATUS, &bms->alarm_raw_status, 1);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 800166a:	2301      	movs	r3, #1
 800166c:	2164      	movs	r1, #100	@ 0x64
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff fe90 	bl	8001394 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, ENABLED_PROT_A, &bms->enabled_protections, 1);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f103 0223 	add.w	r2, r3, #35	@ 0x23
 800167a:	2301      	movs	r3, #1
 800167c:	f249 0124 	movw	r1, #36900	@ 0x9024
 8001680:	6878      	ldr	r0, [r7, #4]
 8001682:	f7ff fe87 	bl	8001394 <BQ76905_ReadRegister>

    //  Leer umbrales de protección por voltaje
    BQ76905_ReadRegister(bms, CELL_UNDERVOLTAGE_THRESHOLD, rx, 2);
 8001686:	f107 0208 	add.w	r2, r7, #8
 800168a:	2302      	movs	r3, #2
 800168c:	f249 012e 	movw	r1, #36910	@ 0x902e
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fe7f 	bl	8001394 <BQ76905_ReadRegister>
    bms->cell_undervoltage_threshold = rx[0] | (rx[1] << 8);
 8001696:	7a3b      	ldrb	r3, [r7, #8]
 8001698:	b21a      	sxth	r2, r3
 800169a:	7a7b      	ldrb	r3, [r7, #9]
 800169c:	021b      	lsls	r3, r3, #8
 800169e:	b21b      	sxth	r3, r3
 80016a0:	4313      	orrs	r3, r2
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	b29a      	uxth	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	849a      	strh	r2, [r3, #36]	@ 0x24

    BQ76905_ReadRegister(bms, CELL_OVERVOLTAGE_THRESHOLD, rx, 2);
 80016aa:	f107 0208 	add.w	r2, r7, #8
 80016ae:	2302      	movs	r3, #2
 80016b0:	f249 0132 	movw	r1, #36914	@ 0x9032
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff fe6d 	bl	8001394 <BQ76905_ReadRegister>
    bms->cell_overvoltage_threshold = rx[0] | (rx[1] << 8);
 80016ba:	7a3b      	ldrb	r3, [r7, #8]
 80016bc:	b21a      	sxth	r2, r3
 80016be:	7a7b      	ldrb	r3, [r7, #9]
 80016c0:	021b      	lsls	r3, r3, #8
 80016c2:	b21b      	sxth	r3, r3
 80016c4:	4313      	orrs	r3, r2
 80016c6:	b21b      	sxth	r3, r3
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	84da      	strh	r2, [r3, #38]	@ 0x26

    //  Leer protecciones de sobrecorriente y cortocircuito
    BQ76905_ReadRegister(bms, OVERCURRENT_CHARGE_THRESHOLD, &bms->overcurrent_charge_threshold, 1);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 80016d4:	2301      	movs	r3, #1
 80016d6:	f249 0136 	movw	r1, #36918	@ 0x9036
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff fe5a 	bl	8001394 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, OVERCURRENT_DISCHARGE_1, &bms->overcurrent_discharge_1, 1);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f103 0229 	add.w	r2, r3, #41	@ 0x29
 80016e6:	2301      	movs	r3, #1
 80016e8:	f249 0138 	movw	r1, #36920	@ 0x9038
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f7ff fe51 	bl	8001394 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, OVERCURRENT_DISCHARGE_2, &bms->overcurrent_discharge_2, 1);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 80016f8:	2301      	movs	r3, #1
 80016fa:	f249 013a 	movw	r1, #36922	@ 0x903a
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff fe48 	bl	8001394 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, SHORT_CIRCUIT_DISCHARGE, &bms->short_circuit_discharge, 1);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	f103 022b 	add.w	r2, r3, #43	@ 0x2b
 800170a:	2301      	movs	r3, #1
 800170c:	f249 013c 	movw	r1, #36924	@ 0x903c
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff fe3f 	bl	8001394 <BQ76905_ReadRegister>

    //  Leer protecciones de temperatura
    BQ76905_ReadRegister(bms, OVERTEMP_CHARGE_THRESHOLD, &bms->overtemp_charge_threshold, 1);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f103 022c 	add.w	r2, r3, #44	@ 0x2c
 800171c:	2301      	movs	r3, #1
 800171e:	f249 0140 	movw	r1, #36928	@ 0x9040
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f7ff fe36 	bl	8001394 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, UNDERTEMP_CHARGE_THRESHOLD, &bms->undertemp_charge_threshold, 1);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f103 022d 	add.w	r2, r3, #45	@ 0x2d
 800172e:	2301      	movs	r3, #1
 8001730:	f249 0143 	movw	r1, #36931	@ 0x9043
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff fe2d 	bl	8001394 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, OVERTEMP_DISCHARGE_THRESHOLD, &bms->overtemp_discharge_threshold, 1);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f103 022e 	add.w	r2, r3, #46	@ 0x2e
 8001740:	2301      	movs	r3, #1
 8001742:	f249 0146 	movw	r1, #36934	@ 0x9046
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fe24 	bl	8001394 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, UNDERTEMP_DISCHARGE_THRESHOLD, &bms->undertemp_discharge_threshold, 1);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f103 022f 	add.w	r2, r3, #47	@ 0x2f
 8001752:	2301      	movs	r3, #1
 8001754:	f249 0149 	movw	r1, #36937	@ 0x9049
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f7ff fe1b 	bl	8001394 <BQ76905_ReadRegister>
    BQ76905_ReadRegister(bms, INTERNAL_OVERTEMP_THRESHOLD, &bms->internal_overtemp_threshold, 1);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8001764:	2301      	movs	r3, #1
 8001766:	f249 014c 	movw	r1, #36940	@ 0x904c
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff fe12 	bl	8001394 <BQ76905_ReadRegister>
}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <MX_DMA_Init+0x3c>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	4a0b      	ldr	r2, [pc, #44]	@ (80017b4 <MX_DMA_Init+0x3c>)
 8001788:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800178c:	6313      	str	r3, [r2, #48]	@ 0x30
 800178e:	4b09      	ldr	r3, [pc, #36]	@ (80017b4 <MX_DMA_Init+0x3c>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	2038      	movs	r0, #56	@ 0x38
 80017a0:	f002 f997 	bl	8003ad2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80017a4:	2038      	movs	r0, #56	@ 0x38
 80017a6:	f002 f9b0 	bl	8003b0a <HAL_NVIC_EnableIRQ>

}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800

080017b8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08a      	sub	sp, #40	@ 0x28
 80017bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	2200      	movs	r2, #0
 80017c4:	601a      	str	r2, [r3, #0]
 80017c6:	605a      	str	r2, [r3, #4]
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	60da      	str	r2, [r3, #12]
 80017cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	4b59      	ldr	r3, [pc, #356]	@ (8001938 <MX_GPIO_Init+0x180>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	4a58      	ldr	r2, [pc, #352]	@ (8001938 <MX_GPIO_Init+0x180>)
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017de:	4b56      	ldr	r3, [pc, #344]	@ (8001938 <MX_GPIO_Init+0x180>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	4b52      	ldr	r3, [pc, #328]	@ (8001938 <MX_GPIO_Init+0x180>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4a51      	ldr	r2, [pc, #324]	@ (8001938 <MX_GPIO_Init+0x180>)
 80017f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4b4f      	ldr	r3, [pc, #316]	@ (8001938 <MX_GPIO_Init+0x180>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001802:	60fb      	str	r3, [r7, #12]
 8001804:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	4b4b      	ldr	r3, [pc, #300]	@ (8001938 <MX_GPIO_Init+0x180>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	4a4a      	ldr	r2, [pc, #296]	@ (8001938 <MX_GPIO_Init+0x180>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6313      	str	r3, [r2, #48]	@ 0x30
 8001816:	4b48      	ldr	r3, [pc, #288]	@ (8001938 <MX_GPIO_Init+0x180>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	4b44      	ldr	r3, [pc, #272]	@ (8001938 <MX_GPIO_Init+0x180>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	4a43      	ldr	r2, [pc, #268]	@ (8001938 <MX_GPIO_Init+0x180>)
 800182c:	f043 0302 	orr.w	r3, r3, #2
 8001830:	6313      	str	r3, [r2, #48]	@ 0x30
 8001832:	4b41      	ldr	r3, [pc, #260]	@ (8001938 <MX_GPIO_Init+0x180>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	4b3d      	ldr	r3, [pc, #244]	@ (8001938 <MX_GPIO_Init+0x180>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	4a3c      	ldr	r2, [pc, #240]	@ (8001938 <MX_GPIO_Init+0x180>)
 8001848:	f043 0308 	orr.w	r3, r3, #8
 800184c:	6313      	str	r3, [r2, #48]	@ 0x30
 800184e:	4b3a      	ldr	r3, [pc, #232]	@ (8001938 <MX_GPIO_Init+0x180>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Enable5V_Pin|Enable3_3VBis_Pin|Enable3_3V_Pin|Enable5VBis_Pin
 800185a:	2200      	movs	r2, #0
 800185c:	f645 4104 	movw	r1, #23556	@ 0x5c04
 8001860:	4836      	ldr	r0, [pc, #216]	@ (800193c <MX_GPIO_Init+0x184>)
 8001862:	f002 fe79 	bl	8004558 <HAL_GPIO_WritePin>
                          |EnableCalefactor_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EnableBatOut_GPIO_Port, EnableBatOut_Pin, GPIO_PIN_RESET);
 8001866:	2200      	movs	r2, #0
 8001868:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800186c:	4834      	ldr	r0, [pc, #208]	@ (8001940 <MX_GPIO_Init+0x188>)
 800186e:	f002 fe73 	bl	8004558 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC7 PC8 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 8001872:	f24f 13c0 	movw	r3, #61888	@ 0xf1c0
 8001876:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001878:	2303      	movs	r3, #3
 800187a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	4619      	mov	r1, r3
 8001886:	482f      	ldr	r0, [pc, #188]	@ (8001944 <MX_GPIO_Init+0x18c>)
 8001888:	f002 fcca 	bl	8004220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Enable5V_Pin|Enable3_3VBis_Pin|Enable3_3V_Pin|Enable5VBis_Pin
 800188c:	f645 4304 	movw	r3, #23556	@ 0x5c04
 8001890:	617b      	str	r3, [r7, #20]
                          |EnableCalefactor_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001892:	2301      	movs	r3, #1
 8001894:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001896:	2301      	movs	r3, #1
 8001898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4619      	mov	r1, r3
 80018a4:	4825      	ldr	r0, [pc, #148]	@ (800193c <MX_GPIO_Init+0x184>)
 80018a6:	f002 fcbb 	bl	8004220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
 80018aa:	f24a 0338 	movw	r3, #41016	@ 0xa038
 80018ae:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018b0:	2303      	movs	r3, #3
 80018b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	4619      	mov	r1, r3
 80018be:	481f      	ldr	r0, [pc, #124]	@ (800193c <MX_GPIO_Init+0x184>)
 80018c0:	f002 fcae 	bl	8004220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EnableBatOut_Pin;
 80018c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ca:	2301      	movs	r3, #1
 80018cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80018ce:	2301      	movs	r3, #1
 80018d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d2:	2300      	movs	r3, #0
 80018d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EnableBatOut_GPIO_Port, &GPIO_InitStruct);
 80018d6:	f107 0314 	add.w	r3, r7, #20
 80018da:	4619      	mov	r1, r3
 80018dc:	4818      	ldr	r0, [pc, #96]	@ (8001940 <MX_GPIO_Init+0x188>)
 80018de:	f002 fc9f 	bl	8004220 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80018e2:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 80018e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018e8:	2303      	movs	r3, #3
 80018ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	4619      	mov	r1, r3
 80018f6:	4812      	ldr	r0, [pc, #72]	@ (8001940 <MX_GPIO_Init+0x188>)
 80018f8:	f002 fc92 	bl	8004220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018fc:	2304      	movs	r3, #4
 80018fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001900:	2303      	movs	r3, #3
 8001902:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	4619      	mov	r1, r3
 800190e:	480e      	ldr	r0, [pc, #56]	@ (8001948 <MX_GPIO_Init+0x190>)
 8001910:	f002 fc86 	bl	8004220 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMS_Alert_Pin;
 8001914:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001918:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800191a:	2300      	movs	r3, #0
 800191c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800191e:	2301      	movs	r3, #1
 8001920:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BMS_Alert_GPIO_Port, &GPIO_InitStruct);
 8001922:	f107 0314 	add.w	r3, r7, #20
 8001926:	4619      	mov	r1, r3
 8001928:	4804      	ldr	r0, [pc, #16]	@ (800193c <MX_GPIO_Init+0x184>)
 800192a:	f002 fc79 	bl	8004220 <HAL_GPIO_Init>

}
 800192e:	bf00      	nop
 8001930:	3728      	adds	r7, #40	@ 0x28
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800
 800193c:	40020400 	.word	0x40020400
 8001940:	40020000 	.word	0x40020000
 8001944:	40020800 	.word	0x40020800
 8001948:	40020c00 	.word	0x40020c00

0800194c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001950:	4b12      	ldr	r3, [pc, #72]	@ (800199c <MX_I2C1_Init+0x50>)
 8001952:	4a13      	ldr	r2, [pc, #76]	@ (80019a0 <MX_I2C1_Init+0x54>)
 8001954:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001956:	4b11      	ldr	r3, [pc, #68]	@ (800199c <MX_I2C1_Init+0x50>)
 8001958:	4a12      	ldr	r2, [pc, #72]	@ (80019a4 <MX_I2C1_Init+0x58>)
 800195a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800195c:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <MX_I2C1_Init+0x50>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001962:	4b0e      	ldr	r3, [pc, #56]	@ (800199c <MX_I2C1_Init+0x50>)
 8001964:	2200      	movs	r2, #0
 8001966:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001968:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <MX_I2C1_Init+0x50>)
 800196a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800196e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001970:	4b0a      	ldr	r3, [pc, #40]	@ (800199c <MX_I2C1_Init+0x50>)
 8001972:	2200      	movs	r2, #0
 8001974:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001976:	4b09      	ldr	r3, [pc, #36]	@ (800199c <MX_I2C1_Init+0x50>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800197c:	4b07      	ldr	r3, [pc, #28]	@ (800199c <MX_I2C1_Init+0x50>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001982:	4b06      	ldr	r3, [pc, #24]	@ (800199c <MX_I2C1_Init+0x50>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001988:	4804      	ldr	r0, [pc, #16]	@ (800199c <MX_I2C1_Init+0x50>)
 800198a:	f002 fdff 	bl	800458c <HAL_I2C_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001994:	f000 fd52 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200002d8 	.word	0x200002d8
 80019a0:	40005400 	.word	0x40005400
 80019a4:	00061a80 	.word	0x00061a80

080019a8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80019ac:	4b12      	ldr	r3, [pc, #72]	@ (80019f8 <MX_I2C3_Init+0x50>)
 80019ae:	4a13      	ldr	r2, [pc, #76]	@ (80019fc <MX_I2C3_Init+0x54>)
 80019b0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80019b2:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <MX_I2C3_Init+0x50>)
 80019b4:	4a12      	ldr	r2, [pc, #72]	@ (8001a00 <MX_I2C3_Init+0x58>)
 80019b6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019b8:	4b0f      	ldr	r3, [pc, #60]	@ (80019f8 <MX_I2C3_Init+0x50>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80019be:	4b0e      	ldr	r3, [pc, #56]	@ (80019f8 <MX_I2C3_Init+0x50>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019c4:	4b0c      	ldr	r3, [pc, #48]	@ (80019f8 <MX_I2C3_Init+0x50>)
 80019c6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019ca:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019cc:	4b0a      	ldr	r3, [pc, #40]	@ (80019f8 <MX_I2C3_Init+0x50>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80019d2:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <MX_I2C3_Init+0x50>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019d8:	4b07      	ldr	r3, [pc, #28]	@ (80019f8 <MX_I2C3_Init+0x50>)
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019de:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <MX_I2C3_Init+0x50>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80019e4:	4804      	ldr	r0, [pc, #16]	@ (80019f8 <MX_I2C3_Init+0x50>)
 80019e6:	f002 fdd1 	bl	800458c <HAL_I2C_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80019f0:	f000 fd24 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	2000032c 	.word	0x2000032c
 80019fc:	40005c00 	.word	0x40005c00
 8001a00:	000186a0 	.word	0x000186a0

08001a04 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08c      	sub	sp, #48	@ 0x30
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a42      	ldr	r2, [pc, #264]	@ (8001b2c <HAL_I2C_MspInit+0x128>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d12c      	bne.n	8001a80 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	61bb      	str	r3, [r7, #24]
 8001a2a:	4b41      	ldr	r3, [pc, #260]	@ (8001b30 <HAL_I2C_MspInit+0x12c>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	4a40      	ldr	r2, [pc, #256]	@ (8001b30 <HAL_I2C_MspInit+0x12c>)
 8001a30:	f043 0302 	orr.w	r3, r3, #2
 8001a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a36:	4b3e      	ldr	r3, [pc, #248]	@ (8001b30 <HAL_I2C_MspInit+0x12c>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	61bb      	str	r3, [r7, #24]
 8001a40:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_I2C_BMS_Pin|SDA_I2C_BMS_Pin;
 8001a42:	23c0      	movs	r3, #192	@ 0xc0
 8001a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a46:	2312      	movs	r3, #18
 8001a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a52:	2304      	movs	r3, #4
 8001a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a56:	f107 031c 	add.w	r3, r7, #28
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4835      	ldr	r0, [pc, #212]	@ (8001b34 <HAL_I2C_MspInit+0x130>)
 8001a5e:	f002 fbdf 	bl	8004220 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	617b      	str	r3, [r7, #20]
 8001a66:	4b32      	ldr	r3, [pc, #200]	@ (8001b30 <HAL_I2C_MspInit+0x12c>)
 8001a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6a:	4a31      	ldr	r2, [pc, #196]	@ (8001b30 <HAL_I2C_MspInit+0x12c>)
 8001a6c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a70:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a72:	4b2f      	ldr	r3, [pc, #188]	@ (8001b30 <HAL_I2C_MspInit+0x12c>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a76:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a7a:	617b      	str	r3, [r7, #20]
 8001a7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001a7e:	e050      	b.n	8001b22 <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a2c      	ldr	r2, [pc, #176]	@ (8001b38 <HAL_I2C_MspInit+0x134>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d14b      	bne.n	8001b22 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	4b28      	ldr	r3, [pc, #160]	@ (8001b30 <HAL_I2C_MspInit+0x12c>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	4a27      	ldr	r2, [pc, #156]	@ (8001b30 <HAL_I2C_MspInit+0x12c>)
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9a:	4b25      	ldr	r3, [pc, #148]	@ (8001b30 <HAL_I2C_MspInit+0x12c>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	4b21      	ldr	r3, [pc, #132]	@ (8001b30 <HAL_I2C_MspInit+0x12c>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	4a20      	ldr	r2, [pc, #128]	@ (8001b30 <HAL_I2C_MspInit+0x12c>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b30 <HAL_I2C_MspInit+0x12c>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SDA_I2C_COM_Pin;
 8001ac2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac8:	2312      	movs	r3, #18
 8001aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001acc:	2301      	movs	r3, #1
 8001ace:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ad4:	2304      	movs	r3, #4
 8001ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SDA_I2C_COM_GPIO_Port, &GPIO_InitStruct);
 8001ad8:	f107 031c 	add.w	r3, r7, #28
 8001adc:	4619      	mov	r1, r3
 8001ade:	4817      	ldr	r0, [pc, #92]	@ (8001b3c <HAL_I2C_MspInit+0x138>)
 8001ae0:	f002 fb9e 	bl	8004220 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCL_I2C_COM_Pin;
 8001ae4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001aea:	2312      	movs	r3, #18
 8001aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af2:	2303      	movs	r3, #3
 8001af4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001af6:	2304      	movs	r3, #4
 8001af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SCL_I2C_COM_GPIO_Port, &GPIO_InitStruct);
 8001afa:	f107 031c 	add.w	r3, r7, #28
 8001afe:	4619      	mov	r1, r3
 8001b00:	480f      	ldr	r0, [pc, #60]	@ (8001b40 <HAL_I2C_MspInit+0x13c>)
 8001b02:	f002 fb8d 	bl	8004220 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b06:	2300      	movs	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	4b09      	ldr	r3, [pc, #36]	@ (8001b30 <HAL_I2C_MspInit+0x12c>)
 8001b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0e:	4a08      	ldr	r2, [pc, #32]	@ (8001b30 <HAL_I2C_MspInit+0x12c>)
 8001b10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b16:	4b06      	ldr	r3, [pc, #24]	@ (8001b30 <HAL_I2C_MspInit+0x12c>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b1e:	60bb      	str	r3, [r7, #8]
 8001b20:	68bb      	ldr	r3, [r7, #8]
}
 8001b22:	bf00      	nop
 8001b24:	3730      	adds	r7, #48	@ 0x30
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40005400 	.word	0x40005400
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40020400 	.word	0x40020400
 8001b38:	40005c00 	.word	0x40005c00
 8001b3c:	40020800 	.word	0x40020800
 8001b40:	40020000 	.word	0x40020000

08001b44 <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 0 */

uint8_t convCompleted=0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	convCompleted=1;
 8001b4c:	4b04      	ldr	r3, [pc, #16]	@ (8001b60 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001b4e:	2201      	movs	r2, #1
 8001b50:	701a      	strb	r2, [r3, #0]
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	20000494 	.word	0x20000494

08001b64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b64:	b5b0      	push	{r4, r5, r7, lr}
 8001b66:	b0a8      	sub	sp, #160	@ 0xa0
 8001b68:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b6a:	f001 f915 	bl	8002d98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b6e:	f000 fbfb 	bl	8002368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b72:	f7ff fe21 	bl	80017b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001b76:	f7ff fdff 	bl	8001778 <MX_DMA_Init>
  MX_ADC1_Init();
 8001b7a:	f7ff f9ad 	bl	8000ed8 <MX_ADC1_Init>
  MX_I2C3_Init();
 8001b7e:	f7ff ff13 	bl	80019a8 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001b82:	f000 fe19 	bl	80027b8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001b86:	f000 fe6f 	bl	8002868 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001b8a:	f000 fec5 	bl	8002918 <MX_TIM5_Init>
  MX_UART4_Init();
 8001b8e:	f000 ffed 	bl	8002b6c <MX_UART4_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001b92:	f001 f85d 	bl	8002c50 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001b96:	f7ff fed9 	bl	800194c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
   mpptX = MPPT_Create("Eje_x", &hadc1, ADC_CHANNEL_11, ADC_CHANNEL_10, &htim4, TIM_CHANNEL_4);
 8001b9a:	4c97      	ldr	r4, [pc, #604]	@ (8001df8 <main+0x294>)
 8001b9c:	4638      	mov	r0, r7
 8001b9e:	230c      	movs	r3, #12
 8001ba0:	9302      	str	r3, [sp, #8]
 8001ba2:	4b96      	ldr	r3, [pc, #600]	@ (8001dfc <main+0x298>)
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	230a      	movs	r3, #10
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	230b      	movs	r3, #11
 8001bac:	4a94      	ldr	r2, [pc, #592]	@ (8001e00 <main+0x29c>)
 8001bae:	4995      	ldr	r1, [pc, #596]	@ (8001e04 <main+0x2a0>)
 8001bb0:	f000 fc4a 	bl	8002448 <MPPT_Create>
 8001bb4:	4625      	mov	r5, r4
 8001bb6:	463c      	mov	r4, r7
 8001bb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bbe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bc0:	6823      	ldr	r3, [r4, #0]
 8001bc2:	602b      	str	r3, [r5, #0]
   mpptY = MPPT_Create("Eje_y", &hadc1, ADC_CHANNEL_13, ADC_CHANNEL_12, &htim2, TIM_CHANNEL_1);
 8001bc4:	4c90      	ldr	r4, [pc, #576]	@ (8001e08 <main+0x2a4>)
 8001bc6:	4638      	mov	r0, r7
 8001bc8:	2300      	movs	r3, #0
 8001bca:	9302      	str	r3, [sp, #8]
 8001bcc:	4b8f      	ldr	r3, [pc, #572]	@ (8001e0c <main+0x2a8>)
 8001bce:	9301      	str	r3, [sp, #4]
 8001bd0:	230c      	movs	r3, #12
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	230d      	movs	r3, #13
 8001bd6:	4a8a      	ldr	r2, [pc, #552]	@ (8001e00 <main+0x29c>)
 8001bd8:	498d      	ldr	r1, [pc, #564]	@ (8001e10 <main+0x2ac>)
 8001bda:	f000 fc35 	bl	8002448 <MPPT_Create>
 8001bde:	4625      	mov	r5, r4
 8001be0:	463c      	mov	r4, r7
 8001be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001be4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001be6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001be8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bea:	6823      	ldr	r3, [r4, #0]
 8001bec:	602b      	str	r3, [r5, #0]
   mpptZ = MPPT_Create("Eje_z", &hadc1, ADC_CHANNEL_2, ADC_CHANNEL_1, &htim5, TIM_CHANNEL_1);
 8001bee:	4c89      	ldr	r4, [pc, #548]	@ (8001e14 <main+0x2b0>)
 8001bf0:	4638      	mov	r0, r7
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	9302      	str	r3, [sp, #8]
 8001bf6:	4b88      	ldr	r3, [pc, #544]	@ (8001e18 <main+0x2b4>)
 8001bf8:	9301      	str	r3, [sp, #4]
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	2302      	movs	r3, #2
 8001c00:	4a7f      	ldr	r2, [pc, #508]	@ (8001e00 <main+0x29c>)
 8001c02:	4986      	ldr	r1, [pc, #536]	@ (8001e1c <main+0x2b8>)
 8001c04:	f000 fc20 	bl	8002448 <MPPT_Create>
 8001c08:	4625      	mov	r5, r4
 8001c0a:	463c      	mov	r4, r7
 8001c0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c14:	6823      	ldr	r3, [r4, #0]
 8001c16:	602b      	str	r3, [r5, #0]

//PDU Variables
   pdu_V5 = PDU_Create("V5", &hadc1, ADC_CHANNEL_14, ADC_CHANNEL_15, GPIOB, GPIO_PIN_2);
 8001c18:	4c81      	ldr	r4, [pc, #516]	@ (8001e20 <main+0x2bc>)
 8001c1a:	4638      	mov	r0, r7
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	9302      	str	r3, [sp, #8]
 8001c20:	4b80      	ldr	r3, [pc, #512]	@ (8001e24 <main+0x2c0>)
 8001c22:	9301      	str	r3, [sp, #4]
 8001c24:	230f      	movs	r3, #15
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	230e      	movs	r3, #14
 8001c2a:	4a75      	ldr	r2, [pc, #468]	@ (8001e00 <main+0x29c>)
 8001c2c:	497e      	ldr	r1, [pc, #504]	@ (8001e28 <main+0x2c4>)
 8001c2e:	f000 fc38 	bl	80024a2 <PDU_Create>
 8001c32:	4625      	mov	r5, r4
 8001c34:	463c      	mov	r4, r7
 8001c36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c3a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001c3e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   pdu_V5bis = PDU_Create("V5Bis", &hadc1, ADC_CHANNEL_5, ADC_CHANNEL_4, GPIOB, GPIO_PIN_12);
 8001c42:	4c7a      	ldr	r4, [pc, #488]	@ (8001e2c <main+0x2c8>)
 8001c44:	4638      	mov	r0, r7
 8001c46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c4a:	9302      	str	r3, [sp, #8]
 8001c4c:	4b75      	ldr	r3, [pc, #468]	@ (8001e24 <main+0x2c0>)
 8001c4e:	9301      	str	r3, [sp, #4]
 8001c50:	2304      	movs	r3, #4
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	2305      	movs	r3, #5
 8001c56:	4a6a      	ldr	r2, [pc, #424]	@ (8001e00 <main+0x29c>)
 8001c58:	4975      	ldr	r1, [pc, #468]	@ (8001e30 <main+0x2cc>)
 8001c5a:	f000 fc22 	bl	80024a2 <PDU_Create>
 8001c5e:	4625      	mov	r5, r4
 8001c60:	463c      	mov	r4, r7
 8001c62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c66:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001c6a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   pdu_V3 = PDU_Create("V3", &hadc1, ADC_CHANNEL_6, ADC_CHANNEL_7, GPIOB, GPIO_PIN_11);
 8001c6e:	4c71      	ldr	r4, [pc, #452]	@ (8001e34 <main+0x2d0>)
 8001c70:	4638      	mov	r0, r7
 8001c72:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c76:	9302      	str	r3, [sp, #8]
 8001c78:	4b6a      	ldr	r3, [pc, #424]	@ (8001e24 <main+0x2c0>)
 8001c7a:	9301      	str	r3, [sp, #4]
 8001c7c:	2307      	movs	r3, #7
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	2306      	movs	r3, #6
 8001c82:	4a5f      	ldr	r2, [pc, #380]	@ (8001e00 <main+0x29c>)
 8001c84:	496c      	ldr	r1, [pc, #432]	@ (8001e38 <main+0x2d4>)
 8001c86:	f000 fc0c 	bl	80024a2 <PDU_Create>
 8001c8a:	4625      	mov	r5, r4
 8001c8c:	463c      	mov	r4, r7
 8001c8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c92:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001c96:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   pdu_V3bis = PDU_Create("V3Bis", &hadc1, ADC_CHANNEL_8, ADC_CHANNEL_9, GPIOB, GPIO_PIN_10);
 8001c9a:	4c68      	ldr	r4, [pc, #416]	@ (8001e3c <main+0x2d8>)
 8001c9c:	4638      	mov	r0, r7
 8001c9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ca2:	9302      	str	r3, [sp, #8]
 8001ca4:	4b5f      	ldr	r3, [pc, #380]	@ (8001e24 <main+0x2c0>)
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	2309      	movs	r3, #9
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2308      	movs	r3, #8
 8001cae:	4a54      	ldr	r2, [pc, #336]	@ (8001e00 <main+0x29c>)
 8001cb0:	4963      	ldr	r1, [pc, #396]	@ (8001e40 <main+0x2dc>)
 8001cb2:	f000 fbf6 	bl	80024a2 <PDU_Create>
 8001cb6:	4625      	mov	r5, r4
 8001cb8:	463c      	mov	r4, r7
 8001cba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cbe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001cc2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
   pdu_BatOut = PDU_Create("VBatOut", NULL, 0, 0, GPIOA, GPIO_PIN_9);
 8001cc6:	4c5f      	ldr	r4, [pc, #380]	@ (8001e44 <main+0x2e0>)
 8001cc8:	4638      	mov	r0, r7
 8001cca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cce:	9302      	str	r3, [sp, #8]
 8001cd0:	4b5d      	ldr	r3, [pc, #372]	@ (8001e48 <main+0x2e4>)
 8001cd2:	9301      	str	r3, [sp, #4]
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	2200      	movs	r2, #0
 8001cdc:	495b      	ldr	r1, [pc, #364]	@ (8001e4c <main+0x2e8>)
 8001cde:	f000 fbe0 	bl	80024a2 <PDU_Create>
 8001ce2:	4625      	mov	r5, r4
 8001ce4:	463c      	mov	r4, r7
 8001ce6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ce8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cea:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001cee:	e885 0007 	stmia.w	r5, {r0, r1, r2}


  HAL_TIM_PWM_Start(mpptZ.htim, mpptZ.tim_channel);
 8001cf2:	4b48      	ldr	r3, [pc, #288]	@ (8001e14 <main+0x2b0>)
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	4a47      	ldr	r2, [pc, #284]	@ (8001e14 <main+0x2b0>)
 8001cf8:	6912      	ldr	r2, [r2, #16]
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f004 fa37 	bl	8006170 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(mpptY.htim, mpptY.tim_channel);
 8001d02:	4b41      	ldr	r3, [pc, #260]	@ (8001e08 <main+0x2a4>)
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	4a40      	ldr	r2, [pc, #256]	@ (8001e08 <main+0x2a4>)
 8001d08:	6912      	ldr	r2, [r2, #16]
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f004 fa2f 	bl	8006170 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(mpptX.htim, mpptX.tim_channel);
 8001d12:	4b39      	ldr	r3, [pc, #228]	@ (8001df8 <main+0x294>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	4a38      	ldr	r2, [pc, #224]	@ (8001df8 <main+0x294>)
 8001d18:	6912      	ldr	r2, [r2, #16]
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f004 fa27 	bl	8006170 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(mpptX.htim, mpptX.tim_channel, mpptX.dutyCycle); //mpptX.htim->CCR4=255*0.5 (SI ES TIMER 4)
 8001d22:	4b35      	ldr	r3, [pc, #212]	@ (8001df8 <main+0x294>)
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d106      	bne.n	8001d38 <main+0x1d4>
 8001d2a:	4b33      	ldr	r3, [pc, #204]	@ (8001df8 <main+0x294>)
 8001d2c:	7f1a      	ldrb	r2, [r3, #28]
 8001d2e:	4b32      	ldr	r3, [pc, #200]	@ (8001df8 <main+0x294>)
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d36:	e01e      	b.n	8001d76 <main+0x212>
 8001d38:	4b2f      	ldr	r3, [pc, #188]	@ (8001df8 <main+0x294>)
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d107      	bne.n	8001d50 <main+0x1ec>
 8001d40:	4b2d      	ldr	r3, [pc, #180]	@ (8001df8 <main+0x294>)
 8001d42:	7f19      	ldrb	r1, [r3, #28]
 8001d44:	4b2c      	ldr	r3, [pc, #176]	@ (8001df8 <main+0x294>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	6393      	str	r3, [r2, #56]	@ 0x38
 8001d4e:	e012      	b.n	8001d76 <main+0x212>
 8001d50:	4b29      	ldr	r3, [pc, #164]	@ (8001df8 <main+0x294>)
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d107      	bne.n	8001d68 <main+0x204>
 8001d58:	4b27      	ldr	r3, [pc, #156]	@ (8001df8 <main+0x294>)
 8001d5a:	7f19      	ldrb	r1, [r3, #28]
 8001d5c:	4b26      	ldr	r3, [pc, #152]	@ (8001df8 <main+0x294>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	460b      	mov	r3, r1
 8001d64:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001d66:	e006      	b.n	8001d76 <main+0x212>
 8001d68:	4b23      	ldr	r3, [pc, #140]	@ (8001df8 <main+0x294>)
 8001d6a:	7f19      	ldrb	r1, [r3, #28]
 8001d6c:	4b22      	ldr	r3, [pc, #136]	@ (8001df8 <main+0x294>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	460b      	mov	r3, r1
 8001d74:	6413      	str	r3, [r2, #64]	@ 0x40
  __HAL_TIM_SET_COMPARE(mpptY.htim, mpptY.tim_channel, mpptY.dutyCycle); //mpptY.htim->CCR1=255*0.5 (SI ES TIMER 1)
 8001d76:	4b24      	ldr	r3, [pc, #144]	@ (8001e08 <main+0x2a4>)
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d106      	bne.n	8001d8c <main+0x228>
 8001d7e:	4b22      	ldr	r3, [pc, #136]	@ (8001e08 <main+0x2a4>)
 8001d80:	7f1a      	ldrb	r2, [r3, #28]
 8001d82:	4b21      	ldr	r3, [pc, #132]	@ (8001e08 <main+0x2a4>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	635a      	str	r2, [r3, #52]	@ 0x34
 8001d8a:	e01e      	b.n	8001dca <main+0x266>
 8001d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001e08 <main+0x2a4>)
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d107      	bne.n	8001da4 <main+0x240>
 8001d94:	4b1c      	ldr	r3, [pc, #112]	@ (8001e08 <main+0x2a4>)
 8001d96:	7f19      	ldrb	r1, [r3, #28]
 8001d98:	4b1b      	ldr	r3, [pc, #108]	@ (8001e08 <main+0x2a4>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	6393      	str	r3, [r2, #56]	@ 0x38
 8001da2:	e012      	b.n	8001dca <main+0x266>
 8001da4:	4b18      	ldr	r3, [pc, #96]	@ (8001e08 <main+0x2a4>)
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	2b08      	cmp	r3, #8
 8001daa:	d107      	bne.n	8001dbc <main+0x258>
 8001dac:	4b16      	ldr	r3, [pc, #88]	@ (8001e08 <main+0x2a4>)
 8001dae:	7f19      	ldrb	r1, [r3, #28]
 8001db0:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <main+0x2a4>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	460b      	mov	r3, r1
 8001db8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001dba:	e006      	b.n	8001dca <main+0x266>
 8001dbc:	4b12      	ldr	r3, [pc, #72]	@ (8001e08 <main+0x2a4>)
 8001dbe:	7f19      	ldrb	r1, [r3, #28]
 8001dc0:	4b11      	ldr	r3, [pc, #68]	@ (8001e08 <main+0x2a4>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	6413      	str	r3, [r2, #64]	@ 0x40
  __HAL_TIM_SET_COMPARE(mpptZ.htim, mpptZ.tim_channel, mpptZ.dutyCycle); //mpptZ.htim->CCR1=255*0.5 (SI ES TIMER 1)
 8001dca:	4b12      	ldr	r3, [pc, #72]	@ (8001e14 <main+0x2b0>)
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d106      	bne.n	8001de0 <main+0x27c>
 8001dd2:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <main+0x2b0>)
 8001dd4:	7f1a      	ldrb	r2, [r3, #28]
 8001dd6:	4b0f      	ldr	r3, [pc, #60]	@ (8001e14 <main+0x2b0>)
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dde:	e04c      	b.n	8001e7a <main+0x316>
 8001de0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e14 <main+0x2b0>)
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d133      	bne.n	8001e50 <main+0x2ec>
 8001de8:	4b0a      	ldr	r3, [pc, #40]	@ (8001e14 <main+0x2b0>)
 8001dea:	7f19      	ldrb	r1, [r3, #28]
 8001dec:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <main+0x2b0>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	460b      	mov	r3, r1
 8001df4:	6393      	str	r3, [r2, #56]	@ 0x38
 8001df6:	e040      	b.n	8001e7a <main+0x316>
 8001df8:	20000380 	.word	0x20000380
 8001dfc:	200004e4 	.word	0x200004e4
 8001e00:	20000230 	.word	0x20000230
 8001e04:	0800a2d0 	.word	0x0800a2d0
 8001e08:	200003a4 	.word	0x200003a4
 8001e0c:	2000049c 	.word	0x2000049c
 8001e10:	0800a2d8 	.word	0x0800a2d8
 8001e14:	200003c8 	.word	0x200003c8
 8001e18:	2000052c 	.word	0x2000052c
 8001e1c:	0800a2e0 	.word	0x0800a2e0
 8001e20:	200003ec 	.word	0x200003ec
 8001e24:	40020400 	.word	0x40020400
 8001e28:	0800a2e8 	.word	0x0800a2e8
 8001e2c:	20000408 	.word	0x20000408
 8001e30:	0800a2ec 	.word	0x0800a2ec
 8001e34:	20000424 	.word	0x20000424
 8001e38:	0800a2f4 	.word	0x0800a2f4
 8001e3c:	20000440 	.word	0x20000440
 8001e40:	0800a2f8 	.word	0x0800a2f8
 8001e44:	2000045c 	.word	0x2000045c
 8001e48:	40020000 	.word	0x40020000
 8001e4c:	0800a300 	.word	0x0800a300
 8001e50:	4b05      	ldr	r3, [pc, #20]	@ (8001e68 <main+0x304>)
 8001e52:	691b      	ldr	r3, [r3, #16]
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d109      	bne.n	8001e6c <main+0x308>
 8001e58:	4b03      	ldr	r3, [pc, #12]	@ (8001e68 <main+0x304>)
 8001e5a:	7f19      	ldrb	r1, [r3, #28]
 8001e5c:	4b02      	ldr	r3, [pc, #8]	@ (8001e68 <main+0x304>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	460b      	mov	r3, r1
 8001e64:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8001e66:	e008      	b.n	8001e7a <main+0x316>
 8001e68:	200003c8 	.word	0x200003c8
 8001e6c:	4bb7      	ldr	r3, [pc, #732]	@ (800214c <main+0x5e8>)
 8001e6e:	7f19      	ldrb	r1, [r3, #28]
 8001e70:	4bb6      	ldr	r3, [pc, #728]	@ (800214c <main+0x5e8>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	681a      	ldr	r2, [r3, #0]
 8001e76:	460b      	mov	r3, r1
 8001e78:	6413      	str	r3, [r2, #64]	@ 0x40

//Configuro las salidas
  disablePDU(&pdu_V3bis);				//a veces prende y a veces no
 8001e7a:	48b5      	ldr	r0, [pc, #724]	@ (8002150 <main+0x5ec>)
 8001e7c:	f000 fb48 	bl	8002510 <disablePDU>
  enablePDU(&pdu_V3);
 8001e80:	48b4      	ldr	r0, [pc, #720]	@ (8002154 <main+0x5f0>)
 8001e82:	f000 fb35 	bl	80024f0 <enablePDU>
  enablePDU(&pdu_V5bis); 				//a veces prende y a veces no
 8001e86:	48b4      	ldr	r0, [pc, #720]	@ (8002158 <main+0x5f4>)
 8001e88:	f000 fb32 	bl	80024f0 <enablePDU>
  disablePDU(&pdu_V5);		//5V  		//NO ANDA Y METE RUIDO
 8001e8c:	48b3      	ldr	r0, [pc, #716]	@ (800215c <main+0x5f8>)
 8001e8e:	f000 fb3f 	bl	8002510 <disablePDU>
  disablePDU(&pdu_BatOut);
 8001e92:	48b3      	ldr	r0, [pc, #716]	@ (8002160 <main+0x5fc>)
 8001e94:	f000 fb3c 	bl	8002510 <disablePDU>

  BQ76905_Configure(&bms);
 8001e98:	48b2      	ldr	r0, [pc, #712]	@ (8002164 <main+0x600>)
 8001e9a:	f7ff faa7 	bl	80013ec <BQ76905_Configure>

  HAL_ADC_Start_DMA(&hadc1,(uint32_t *) rawValues, 14);
 8001e9e:	220e      	movs	r2, #14
 8001ea0:	49b1      	ldr	r1, [pc, #708]	@ (8002168 <main+0x604>)
 8001ea2:	48b2      	ldr	r0, [pc, #712]	@ (800216c <main+0x608>)
 8001ea4:	f001 f962 	bl	800316c <HAL_ADC_Start_DMA>
  uint8_t counter = 0;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	  	//MPPT
        updateMPPT(&mpptX);
        updateMPPT(&mpptY);
        updateMPPT(&mpptZ);
*/
		while(!convCompleted);
 8001eae:	bf00      	nop
 8001eb0:	4baf      	ldr	r3, [pc, #700]	@ (8002170 <main+0x60c>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0fb      	beq.n	8001eb0 <main+0x34c>
		mpptZ.current = (uint16_t)rawValues[0]; // * 0.606;
 8001eb8:	4bab      	ldr	r3, [pc, #684]	@ (8002168 <main+0x604>)
 8001eba:	881a      	ldrh	r2, [r3, #0]
 8001ebc:	4ba3      	ldr	r3, [pc, #652]	@ (800214c <main+0x5e8>)
 8001ebe:	82da      	strh	r2, [r3, #22]
		mpptZ.voltage = (uint16_t)rawValues[1] * 2 * conversionFactor; //las tensiones se multiplican x2
 8001ec0:	4ba9      	ldr	r3, [pc, #676]	@ (8002168 <main+0x604>)
 8001ec2:	885b      	ldrh	r3, [r3, #2]
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7fe fb2c 	bl	8000524 <__aeabi_i2d>
 8001ecc:	4ba9      	ldr	r3, [pc, #676]	@ (8002174 <main+0x610>)
 8001ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed2:	f7fe fb91 	bl	80005f8 <__aeabi_dmul>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	460b      	mov	r3, r1
 8001eda:	4610      	mov	r0, r2
 8001edc:	4619      	mov	r1, r3
 8001ede:	f7fe fe63 	bl	8000ba8 <__aeabi_d2uiz>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	4b99      	ldr	r3, [pc, #612]	@ (800214c <main+0x5e8>)
 8001ee8:	829a      	strh	r2, [r3, #20]

		pdu_V5bis.current = (uint16_t) rawValues[2];//* 0.606 * conversionFactor; //* 0.606;
 8001eea:	4b9f      	ldr	r3, [pc, #636]	@ (8002168 <main+0x604>)
 8001eec:	889a      	ldrh	r2, [r3, #4]
 8001eee:	4b9a      	ldr	r3, [pc, #616]	@ (8002158 <main+0x5f4>)
 8001ef0:	81da      	strh	r2, [r3, #14]
		pdu_V5bis.voltage = (uint16_t) rawValues[3] * 2 * conversionFactor; //las tensiones se multiplican x2
 8001ef2:	4b9d      	ldr	r3, [pc, #628]	@ (8002168 <main+0x604>)
 8001ef4:	88db      	ldrh	r3, [r3, #6]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fb13 	bl	8000524 <__aeabi_i2d>
 8001efe:	4b9d      	ldr	r3, [pc, #628]	@ (8002174 <main+0x610>)
 8001f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f04:	f7fe fb78 	bl	80005f8 <__aeabi_dmul>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4610      	mov	r0, r2
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f7fe fe4a 	bl	8000ba8 <__aeabi_d2uiz>
 8001f14:	4603      	mov	r3, r0
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	4b8f      	ldr	r3, [pc, #572]	@ (8002158 <main+0x5f4>)
 8001f1a:	819a      	strh	r2, [r3, #12]
		pdu_V3.voltage = (uint16_t)rawValues[4]  * 2 * conversionFactor; //las tensiones se multiplican x2
 8001f1c:	4b92      	ldr	r3, [pc, #584]	@ (8002168 <main+0x604>)
 8001f1e:	891b      	ldrh	r3, [r3, #8]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe fafe 	bl	8000524 <__aeabi_i2d>
 8001f28:	4b92      	ldr	r3, [pc, #584]	@ (8002174 <main+0x610>)
 8001f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2e:	f7fe fb63 	bl	80005f8 <__aeabi_dmul>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	f7fe fe35 	bl	8000ba8 <__aeabi_d2uiz>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	4b84      	ldr	r3, [pc, #528]	@ (8002154 <main+0x5f0>)
 8001f44:	819a      	strh	r2, [r3, #12]
		pdu_V3.current = (uint16_t)rawValues[5];// * 0.606;
 8001f46:	4b88      	ldr	r3, [pc, #544]	@ (8002168 <main+0x604>)
 8001f48:	895a      	ldrh	r2, [r3, #10]
 8001f4a:	4b82      	ldr	r3, [pc, #520]	@ (8002154 <main+0x5f0>)
 8001f4c:	81da      	strh	r2, [r3, #14]
		pdu_V3bis.voltage = (uint16_t)rawValues[6] * 2 * conversionFactor;
 8001f4e:	4b86      	ldr	r3, [pc, #536]	@ (8002168 <main+0x604>)
 8001f50:	899b      	ldrh	r3, [r3, #12]
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7fe fae5 	bl	8000524 <__aeabi_i2d>
 8001f5a:	4b86      	ldr	r3, [pc, #536]	@ (8002174 <main+0x610>)
 8001f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f60:	f7fe fb4a 	bl	80005f8 <__aeabi_dmul>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4610      	mov	r0, r2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f7fe fe1c 	bl	8000ba8 <__aeabi_d2uiz>
 8001f70:	4603      	mov	r3, r0
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	4b76      	ldr	r3, [pc, #472]	@ (8002150 <main+0x5ec>)
 8001f76:	819a      	strh	r2, [r3, #12]
		pdu_V3bis.current = (uint16_t)rawValues[7]; //factor de multiplicacion de la corriente en entradas mppt (50 x 33mohm)^-1
 8001f78:	4b7b      	ldr	r3, [pc, #492]	@ (8002168 <main+0x604>)
 8001f7a:	89da      	ldrh	r2, [r3, #14]
 8001f7c:	4b74      	ldr	r3, [pc, #464]	@ (8002150 <main+0x5ec>)
 8001f7e:	81da      	strh	r2, [r3, #14]

		mpptX.current = (uint16_t)rawValues[8]; // * 0.606;
 8001f80:	4b79      	ldr	r3, [pc, #484]	@ (8002168 <main+0x604>)
 8001f82:	8a1a      	ldrh	r2, [r3, #16]
 8001f84:	4b7c      	ldr	r3, [pc, #496]	@ (8002178 <main+0x614>)
 8001f86:	82da      	strh	r2, [r3, #22]
		mpptX.voltage = (uint16_t)rawValues[9] * 2 * conversionFactor;
 8001f88:	4b77      	ldr	r3, [pc, #476]	@ (8002168 <main+0x604>)
 8001f8a:	8a5b      	ldrh	r3, [r3, #18]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fac8 	bl	8000524 <__aeabi_i2d>
 8001f94:	4b77      	ldr	r3, [pc, #476]	@ (8002174 <main+0x610>)
 8001f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f9a:	f7fe fb2d 	bl	80005f8 <__aeabi_dmul>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f7fe fdff 	bl	8000ba8 <__aeabi_d2uiz>
 8001faa:	4603      	mov	r3, r0
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	4b72      	ldr	r3, [pc, #456]	@ (8002178 <main+0x614>)
 8001fb0:	829a      	strh	r2, [r3, #20]
		mpptY.current = (uint16_t) rawValues[10];//* 0.606 * conversionFactor;// * 0.606; //factor de multiplicacion de la corriente en entradas mppt (50 x 33mohm)^-1
 8001fb2:	4b6d      	ldr	r3, [pc, #436]	@ (8002168 <main+0x604>)
 8001fb4:	8a9a      	ldrh	r2, [r3, #20]
 8001fb6:	4b71      	ldr	r3, [pc, #452]	@ (800217c <main+0x618>)
 8001fb8:	82da      	strh	r2, [r3, #22]
		mpptY.voltage = (uint16_t) rawValues[11]* 2 * conversionFactor;
 8001fba:	4b6b      	ldr	r3, [pc, #428]	@ (8002168 <main+0x604>)
 8001fbc:	8adb      	ldrh	r3, [r3, #22]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe faaf 	bl	8000524 <__aeabi_i2d>
 8001fc6:	4b6b      	ldr	r3, [pc, #428]	@ (8002174 <main+0x610>)
 8001fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fcc:	f7fe fb14 	bl	80005f8 <__aeabi_dmul>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	f7fe fde6 	bl	8000ba8 <__aeabi_d2uiz>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	4b66      	ldr	r3, [pc, #408]	@ (800217c <main+0x618>)
 8001fe2:	829a      	strh	r2, [r3, #20]

		pdu_V5.voltage = (uint16_t) rawValues[12]* 2 * conversionFactor;
 8001fe4:	4b60      	ldr	r3, [pc, #384]	@ (8002168 <main+0x604>)
 8001fe6:	8b1b      	ldrh	r3, [r3, #24]
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7fe fa9a 	bl	8000524 <__aeabi_i2d>
 8001ff0:	4b60      	ldr	r3, [pc, #384]	@ (8002174 <main+0x610>)
 8001ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ff6:	f7fe faff 	bl	80005f8 <__aeabi_dmul>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	4610      	mov	r0, r2
 8002000:	4619      	mov	r1, r3
 8002002:	f7fe fdd1 	bl	8000ba8 <__aeabi_d2uiz>
 8002006:	4603      	mov	r3, r0
 8002008:	b29a      	uxth	r2, r3
 800200a:	4b54      	ldr	r3, [pc, #336]	@ (800215c <main+0x5f8>)
 800200c:	819a      	strh	r2, [r3, #12]
		pdu_V5.current = (uint16_t) rawValues[13];//* 0.606 * conversionFactor; // * 0.606;
 800200e:	4b56      	ldr	r3, [pc, #344]	@ (8002168 <main+0x604>)
 8002010:	8b5a      	ldrh	r2, [r3, #26]
 8002012:	4b52      	ldr	r3, [pc, #328]	@ (800215c <main+0x5f8>)
 8002014:	81da      	strh	r2, [r3, #14]


//		HAL_ADC_Stop_DMA(&hadc1);
	if(counter == 2){
 8002016:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800201a:	2b02      	cmp	r3, #2
 800201c:	f040 8162 	bne.w	80022e4 <main+0x780>
	    char buffer[STR_LEN];

	    snprintf(buffer, STR_LEN, "\n \n I LIKE THE WAY YOU WORKING \n");
 8002020:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002024:	4a56      	ldr	r2, [pc, #344]	@ (8002180 <main+0x61c>)
 8002026:	2164      	movs	r1, #100	@ 0x64
 8002028:	4618      	mov	r0, r3
 800202a:	f005 ff43 	bl	8007eb4 <sniprintf>
	  	HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t *) buffer, strlen(buffer), HAL_MAX_DELAY);
 800202e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe f91c 	bl	8000270 <strlen>
 8002038:	4603      	mov	r3, r0
 800203a:	b29b      	uxth	r3, r3
 800203c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002040:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002044:	9100      	str	r1, [sp, #0]
 8002046:	2110      	movs	r1, #16
 8002048:	484e      	ldr	r0, [pc, #312]	@ (8002184 <main+0x620>)
 800204a:	f002 fbe3 	bl	8004814 <HAL_I2C_Master_Transmit>

	    //5BIS DATOS
	    snprintf(buffer, STR_LEN, "V5bis.current: %d \n", pdu_V5bis.current);
 800204e:	4b42      	ldr	r3, [pc, #264]	@ (8002158 <main+0x5f4>)
 8002050:	89db      	ldrh	r3, [r3, #14]
 8002052:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002056:	4a4c      	ldr	r2, [pc, #304]	@ (8002188 <main+0x624>)
 8002058:	2164      	movs	r1, #100	@ 0x64
 800205a:	f005 ff2b 	bl	8007eb4 <sniprintf>
	   	HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t *) buffer, strlen(buffer), HAL_MAX_DELAY);
 800205e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe f904 	bl	8000270 <strlen>
 8002068:	4603      	mov	r3, r0
 800206a:	b29b      	uxth	r3, r3
 800206c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002070:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002074:	9100      	str	r1, [sp, #0]
 8002076:	2110      	movs	r1, #16
 8002078:	4842      	ldr	r0, [pc, #264]	@ (8002184 <main+0x620>)
 800207a:	f002 fbcb 	bl	8004814 <HAL_I2C_Master_Transmit>
	    snprintf(buffer, STR_LEN, "V5bis.voltage: %d \n", pdu_V5bis.voltage);
 800207e:	4b36      	ldr	r3, [pc, #216]	@ (8002158 <main+0x5f4>)
 8002080:	899b      	ldrh	r3, [r3, #12]
 8002082:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002086:	4a41      	ldr	r2, [pc, #260]	@ (800218c <main+0x628>)
 8002088:	2164      	movs	r1, #100	@ 0x64
 800208a:	f005 ff13 	bl	8007eb4 <sniprintf>
	    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t *) buffer, strlen(buffer), HAL_MAX_DELAY);
 800208e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002092:	4618      	mov	r0, r3
 8002094:	f7fe f8ec 	bl	8000270 <strlen>
 8002098:	4603      	mov	r3, r0
 800209a:	b29b      	uxth	r3, r3
 800209c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80020a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020a4:	9100      	str	r1, [sp, #0]
 80020a6:	2110      	movs	r1, #16
 80020a8:	4836      	ldr	r0, [pc, #216]	@ (8002184 <main+0x620>)
 80020aa:	f002 fbb3 	bl	8004814 <HAL_I2C_Master_Transmit>
	    //3.3 DATOS

	    snprintf(buffer, STR_LEN, "V3.current: %d \n", pdu_V3.current);
 80020ae:	4b29      	ldr	r3, [pc, #164]	@ (8002154 <main+0x5f0>)
 80020b0:	89db      	ldrh	r3, [r3, #14]
 80020b2:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80020b6:	4a36      	ldr	r2, [pc, #216]	@ (8002190 <main+0x62c>)
 80020b8:	2164      	movs	r1, #100	@ 0x64
 80020ba:	f005 fefb 	bl	8007eb4 <sniprintf>
	   	HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t *) buffer, strlen(buffer), HAL_MAX_DELAY);
 80020be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe f8d4 	bl	8000270 <strlen>
 80020c8:	4603      	mov	r3, r0
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80020d0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020d4:	9100      	str	r1, [sp, #0]
 80020d6:	2110      	movs	r1, #16
 80020d8:	482a      	ldr	r0, [pc, #168]	@ (8002184 <main+0x620>)
 80020da:	f002 fb9b 	bl	8004814 <HAL_I2C_Master_Transmit>
	    snprintf(buffer, STR_LEN, "V3.V: %d \n", pdu_V3.voltage);
 80020de:	4b1d      	ldr	r3, [pc, #116]	@ (8002154 <main+0x5f0>)
 80020e0:	899b      	ldrh	r3, [r3, #12]
 80020e2:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80020e6:	4a2b      	ldr	r2, [pc, #172]	@ (8002194 <main+0x630>)
 80020e8:	2164      	movs	r1, #100	@ 0x64
 80020ea:	f005 fee3 	bl	8007eb4 <sniprintf>
	    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t *) buffer, strlen(buffer), HAL_MAX_DELAY);
 80020ee:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe f8bc 	bl	8000270 <strlen>
 80020f8:	4603      	mov	r3, r0
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002100:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002104:	9100      	str	r1, [sp, #0]
 8002106:	2110      	movs	r1, #16
 8002108:	481e      	ldr	r0, [pc, #120]	@ (8002184 <main+0x620>)
 800210a:	f002 fb83 	bl	8004814 <HAL_I2C_Master_Transmit>
	    //X DATOS
	    snprintf(buffer, STR_LEN, "mpptX.current: %d\n", mpptX.current);
 800210e:	4b1a      	ldr	r3, [pc, #104]	@ (8002178 <main+0x614>)
 8002110:	8adb      	ldrh	r3, [r3, #22]
 8002112:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002116:	4a20      	ldr	r2, [pc, #128]	@ (8002198 <main+0x634>)
 8002118:	2164      	movs	r1, #100	@ 0x64
 800211a:	f005 fecb 	bl	8007eb4 <sniprintf>
	    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t *) buffer, strlen(buffer), HAL_MAX_DELAY);
 800211e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe f8a4 	bl	8000270 <strlen>
 8002128:	4603      	mov	r3, r0
 800212a:	b29b      	uxth	r3, r3
 800212c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002130:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002134:	9100      	str	r1, [sp, #0]
 8002136:	2110      	movs	r1, #16
 8002138:	4812      	ldr	r0, [pc, #72]	@ (8002184 <main+0x620>)
 800213a:	f002 fb6b 	bl	8004814 <HAL_I2C_Master_Transmit>
	    snprintf(buffer, STR_LEN, "mpptX.voltage: %d\n", mpptX.voltage);
 800213e:	4b0e      	ldr	r3, [pc, #56]	@ (8002178 <main+0x614>)
 8002140:	8a9b      	ldrh	r3, [r3, #20]
 8002142:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002146:	4a15      	ldr	r2, [pc, #84]	@ (800219c <main+0x638>)
 8002148:	2164      	movs	r1, #100	@ 0x64
 800214a:	e029      	b.n	80021a0 <main+0x63c>
 800214c:	200003c8 	.word	0x200003c8
 8002150:	20000440 	.word	0x20000440
 8002154:	20000424 	.word	0x20000424
 8002158:	20000408 	.word	0x20000408
 800215c:	200003ec 	.word	0x200003ec
 8002160:	2000045c 	.word	0x2000045c
 8002164:	20000000 	.word	0x20000000
 8002168:	20000478 	.word	0x20000478
 800216c:	20000230 	.word	0x20000230
 8002170:	20000494 	.word	0x20000494
 8002174:	20000038 	.word	0x20000038
 8002178:	20000380 	.word	0x20000380
 800217c:	200003a4 	.word	0x200003a4
 8002180:	0800a308 	.word	0x0800a308
 8002184:	2000032c 	.word	0x2000032c
 8002188:	0800a32c 	.word	0x0800a32c
 800218c:	0800a340 	.word	0x0800a340
 8002190:	0800a354 	.word	0x0800a354
 8002194:	0800a368 	.word	0x0800a368
 8002198:	0800a374 	.word	0x0800a374
 800219c:	0800a388 	.word	0x0800a388
 80021a0:	f005 fe88 	bl	8007eb4 <sniprintf>
	    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t *) buffer, strlen(buffer), HAL_MAX_DELAY);
 80021a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7fe f861 	bl	8000270 <strlen>
 80021ae:	4603      	mov	r3, r0
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80021b6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021ba:	9100      	str	r1, [sp, #0]
 80021bc:	2110      	movs	r1, #16
 80021be:	485c      	ldr	r0, [pc, #368]	@ (8002330 <main+0x7cc>)
 80021c0:	f002 fb28 	bl	8004814 <HAL_I2C_Master_Transmit>


	    //Y DATOS
	    snprintf(buffer, STR_LEN, "mpptY.current: %d \n", mpptY.current);
 80021c4:	4b5b      	ldr	r3, [pc, #364]	@ (8002334 <main+0x7d0>)
 80021c6:	8adb      	ldrh	r3, [r3, #22]
 80021c8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80021cc:	4a5a      	ldr	r2, [pc, #360]	@ (8002338 <main+0x7d4>)
 80021ce:	2164      	movs	r1, #100	@ 0x64
 80021d0:	f005 fe70 	bl	8007eb4 <sniprintf>
	    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t *) buffer, strlen(buffer), HAL_MAX_DELAY);
 80021d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe f849 	bl	8000270 <strlen>
 80021de:	4603      	mov	r3, r0
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80021e6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021ea:	9100      	str	r1, [sp, #0]
 80021ec:	2110      	movs	r1, #16
 80021ee:	4850      	ldr	r0, [pc, #320]	@ (8002330 <main+0x7cc>)
 80021f0:	f002 fb10 	bl	8004814 <HAL_I2C_Master_Transmit>
	    snprintf(buffer, STR_LEN, "mpptY.voltage: %d\n", mpptY.voltage);
 80021f4:	4b4f      	ldr	r3, [pc, #316]	@ (8002334 <main+0x7d0>)
 80021f6:	8a9b      	ldrh	r3, [r3, #20]
 80021f8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80021fc:	4a4f      	ldr	r2, [pc, #316]	@ (800233c <main+0x7d8>)
 80021fe:	2164      	movs	r1, #100	@ 0x64
 8002200:	f005 fe58 	bl	8007eb4 <sniprintf>
	    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t *) buffer, strlen(buffer), HAL_MAX_DELAY);
 8002204:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002208:	4618      	mov	r0, r3
 800220a:	f7fe f831 	bl	8000270 <strlen>
 800220e:	4603      	mov	r3, r0
 8002210:	b29b      	uxth	r3, r3
 8002212:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002216:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800221a:	9100      	str	r1, [sp, #0]
 800221c:	2110      	movs	r1, #16
 800221e:	4844      	ldr	r0, [pc, #272]	@ (8002330 <main+0x7cc>)
 8002220:	f002 faf8 	bl	8004814 <HAL_I2C_Master_Transmit>

	    snprintf(buffer, STR_LEN, "pdu_V5.voltage: %d \n", pdu_V5.voltage);
 8002224:	4b46      	ldr	r3, [pc, #280]	@ (8002340 <main+0x7dc>)
 8002226:	899b      	ldrh	r3, [r3, #12]
 8002228:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800222c:	4a45      	ldr	r2, [pc, #276]	@ (8002344 <main+0x7e0>)
 800222e:	2164      	movs	r1, #100	@ 0x64
 8002230:	f005 fe40 	bl	8007eb4 <sniprintf>
	    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t *) buffer, strlen(buffer), HAL_MAX_DELAY);
 8002234:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe f819 	bl	8000270 <strlen>
 800223e:	4603      	mov	r3, r0
 8002240:	b29b      	uxth	r3, r3
 8002242:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002246:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800224a:	9100      	str	r1, [sp, #0]
 800224c:	2110      	movs	r1, #16
 800224e:	4838      	ldr	r0, [pc, #224]	@ (8002330 <main+0x7cc>)
 8002250:	f002 fae0 	bl	8004814 <HAL_I2C_Master_Transmit>
	    snprintf(buffer, STR_LEN, "pdu_V5.current: %d\n", pdu_V5.current);
 8002254:	4b3a      	ldr	r3, [pc, #232]	@ (8002340 <main+0x7dc>)
 8002256:	89db      	ldrh	r3, [r3, #14]
 8002258:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800225c:	4a3a      	ldr	r2, [pc, #232]	@ (8002348 <main+0x7e4>)
 800225e:	2164      	movs	r1, #100	@ 0x64
 8002260:	f005 fe28 	bl	8007eb4 <sniprintf>
	    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t *) buffer, strlen(buffer), HAL_MAX_DELAY);
 8002264:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe f801 	bl	8000270 <strlen>
 800226e:	4603      	mov	r3, r0
 8002270:	b29b      	uxth	r3, r3
 8002272:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002276:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800227a:	9100      	str	r1, [sp, #0]
 800227c:	2110      	movs	r1, #16
 800227e:	482c      	ldr	r0, [pc, #176]	@ (8002330 <main+0x7cc>)
 8002280:	f002 fac8 	bl	8004814 <HAL_I2C_Master_Transmit>
	    //Z DATOS
	    snprintf(buffer, STR_LEN, "mpptZ.current: %d \n", mpptZ.current);
 8002284:	4b31      	ldr	r3, [pc, #196]	@ (800234c <main+0x7e8>)
 8002286:	8adb      	ldrh	r3, [r3, #22]
 8002288:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800228c:	4a30      	ldr	r2, [pc, #192]	@ (8002350 <main+0x7ec>)
 800228e:	2164      	movs	r1, #100	@ 0x64
 8002290:	f005 fe10 	bl	8007eb4 <sniprintf>
	    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t *) buffer, strlen(buffer), HAL_MAX_DELAY);
 8002294:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002298:	4618      	mov	r0, r3
 800229a:	f7fd ffe9 	bl	8000270 <strlen>
 800229e:	4603      	mov	r3, r0
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80022a6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022aa:	9100      	str	r1, [sp, #0]
 80022ac:	2110      	movs	r1, #16
 80022ae:	4820      	ldr	r0, [pc, #128]	@ (8002330 <main+0x7cc>)
 80022b0:	f002 fab0 	bl	8004814 <HAL_I2C_Master_Transmit>
	    snprintf(buffer, STR_LEN, "mpptZ.voltage: %d\n", mpptZ.voltage);
 80022b4:	4b25      	ldr	r3, [pc, #148]	@ (800234c <main+0x7e8>)
 80022b6:	8a9b      	ldrh	r3, [r3, #20]
 80022b8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80022bc:	4a25      	ldr	r2, [pc, #148]	@ (8002354 <main+0x7f0>)
 80022be:	2164      	movs	r1, #100	@ 0x64
 80022c0:	f005 fdf8 	bl	8007eb4 <sniprintf>
	    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t *) buffer, strlen(buffer), HAL_MAX_DELAY);
 80022c4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fd ffd1 	bl	8000270 <strlen>
 80022ce:	4603      	mov	r3, r0
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80022d6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80022da:	9100      	str	r1, [sp, #0]
 80022dc:	2110      	movs	r1, #16
 80022de:	4814      	ldr	r0, [pc, #80]	@ (8002330 <main+0x7cc>)
 80022e0:	f002 fa98 	bl	8004814 <HAL_I2C_Master_Transmit>
	}
	counter++;
 80022e4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80022e8:	3301      	adds	r3, #1
 80022ea:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
	counter = counter%3;
 80022ee:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 80022f2:	4b19      	ldr	r3, [pc, #100]	@ (8002358 <main+0x7f4>)
 80022f4:	fba3 1302 	umull	r1, r3, r3, r2
 80022f8:	0859      	lsrs	r1, r3, #1
 80022fa:	460b      	mov	r3, r1
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	440b      	add	r3, r1
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
			- [ ] limites de voltage UV Y OV
			- [ ] limites de corrinte (over current in discharge and OCIC)
			- [ ] short circuit detection
			- [ ] roteccion por temperatura alta o baja en carga y descarga
         */
        BQ76905_ReadData(&bms);
 8002306:	4815      	ldr	r0, [pc, #84]	@ (800235c <main+0x7f8>)
 8002308:	f7ff f8e4 	bl	80014d4 <BQ76905_ReadData>
        //sendBMSDataI2C(&bms);

        BQ76905_ReadRegister(&bms, FET_CONTROL, &bms.fet_control, 1); //funcion para leer registros del BMS y guardarlos en una variable
 800230c:	2301      	movs	r3, #1
 800230e:	4a14      	ldr	r2, [pc, #80]	@ (8002360 <main+0x7fc>)
 8002310:	2168      	movs	r1, #104	@ 0x68
 8002312:	4812      	ldr	r0, [pc, #72]	@ (800235c <main+0x7f8>)
 8002314:	f7ff f83e 	bl	8001394 <BQ76905_ReadRegister>


		//CALENTAMIENTO Y CONTROL DE TEMPERATURA //por ahora prendo un led para debuging

		//MODO BAJO CONSUMO
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8002318:	2200      	movs	r2, #0
 800231a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800231e:	4811      	ldr	r0, [pc, #68]	@ (8002364 <main+0x800>)
 8002320:	f002 f91a 	bl	8004558 <HAL_GPIO_WritePin>
    	HAL_Delay(DELAY);
 8002324:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002328:	f000 fda8 	bl	8002e7c <HAL_Delay>
		while(!convCompleted);
 800232c:	e5bf      	b.n	8001eae <main+0x34a>
 800232e:	bf00      	nop
 8002330:	2000032c 	.word	0x2000032c
 8002334:	200003a4 	.word	0x200003a4
 8002338:	0800a39c 	.word	0x0800a39c
 800233c:	0800a3b0 	.word	0x0800a3b0
 8002340:	200003ec 	.word	0x200003ec
 8002344:	0800a3c4 	.word	0x0800a3c4
 8002348:	0800a3dc 	.word	0x0800a3dc
 800234c:	200003c8 	.word	0x200003c8
 8002350:	0800a3f0 	.word	0x0800a3f0
 8002354:	0800a404 	.word	0x0800a404
 8002358:	aaaaaaab 	.word	0xaaaaaaab
 800235c:	20000000 	.word	0x20000000
 8002360:	20000031 	.word	0x20000031
 8002364:	40020400 	.word	0x40020400

08002368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b094      	sub	sp, #80	@ 0x50
 800236c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800236e:	f107 0320 	add.w	r3, r7, #32
 8002372:	2230      	movs	r2, #48	@ 0x30
 8002374:	2100      	movs	r1, #0
 8002376:	4618      	mov	r0, r3
 8002378:	f005 fe92 	bl	80080a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800237c:	f107 030c 	add.w	r3, r7, #12
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800238c:	2300      	movs	r3, #0
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	4b28      	ldr	r3, [pc, #160]	@ (8002434 <SystemClock_Config+0xcc>)
 8002392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002394:	4a27      	ldr	r2, [pc, #156]	@ (8002434 <SystemClock_Config+0xcc>)
 8002396:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800239a:	6413      	str	r3, [r2, #64]	@ 0x40
 800239c:	4b25      	ldr	r3, [pc, #148]	@ (8002434 <SystemClock_Config+0xcc>)
 800239e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a4:	60bb      	str	r3, [r7, #8]
 80023a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023a8:	2300      	movs	r3, #0
 80023aa:	607b      	str	r3, [r7, #4]
 80023ac:	4b22      	ldr	r3, [pc, #136]	@ (8002438 <SystemClock_Config+0xd0>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a21      	ldr	r2, [pc, #132]	@ (8002438 <SystemClock_Config+0xd0>)
 80023b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023b6:	6013      	str	r3, [r2, #0]
 80023b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002438 <SystemClock_Config+0xd0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c0:	607b      	str	r3, [r7, #4]
 80023c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023c4:	2301      	movs	r3, #1
 80023c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023cc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023ce:	2302      	movs	r3, #2
 80023d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80023d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80023d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80023d8:	2304      	movs	r3, #4
 80023da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 80023dc:	2360      	movs	r3, #96	@ 0x60
 80023de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80023e0:	2306      	movs	r3, #6
 80023e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80023e4:	2304      	movs	r3, #4
 80023e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023e8:	f107 0320 	add.w	r3, r7, #32
 80023ec:	4618      	mov	r0, r3
 80023ee:	f003 f9d7 	bl	80057a0 <HAL_RCC_OscConfig>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80023f8:	f000 f820 	bl	800243c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023fc:	230f      	movs	r3, #15
 80023fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002400:	2302      	movs	r3, #2
 8002402:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002404:	2380      	movs	r3, #128	@ 0x80
 8002406:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002408:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800240c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800240e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002412:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002414:	f107 030c 	add.w	r3, r7, #12
 8002418:	2100      	movs	r1, #0
 800241a:	4618      	mov	r0, r3
 800241c:	f003 fc38 	bl	8005c90 <HAL_RCC_ClockConfig>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002426:	f000 f809 	bl	800243c <Error_Handler>
  }
}
 800242a:	bf00      	nop
 800242c:	3750      	adds	r7, #80	@ 0x50
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40023800 	.word	0x40023800
 8002438:	40007000 	.word	0x40007000

0800243c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800243c:	b480      	push	{r7}
 800243e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002440:	b672      	cpsid	i
}
 8002442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <Error_Handler+0x8>

08002448 <MPPT_Create>:


#define MAX_DUTY 255


MPPT_Channel MPPT_Create(char *label, ADC_HandleTypeDef *hadc, uint32_t v_channel, uint32_t i_channel, TIM_HandleTypeDef *htim, uint32_t tim_channel){
 8002448:	b4b0      	push	{r4, r5, r7}
 800244a:	b08f      	sub	sp, #60	@ 0x3c
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	603b      	str	r3, [r7, #0]
    MPPT_Channel newMppt = {
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	61bb      	str	r3, [r7, #24]
 800245e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002464:	623b      	str	r3, [r7, #32]
 8002466:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002468:	627b      	str	r3, [r7, #36]	@ 0x24
 800246a:	2300      	movs	r3, #0
 800246c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800246e:	2300      	movs	r3, #0
 8002470:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8002472:	2300      	movs	r3, #0
 8002474:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8002476:	2300      	movs	r3, #0
 8002478:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800247a:	2300      	movs	r3, #0
 800247c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	637b      	str	r3, [r7, #52]	@ 0x34
        .power = 0,
        .prevPower = 0,
        .dutyCycle = 0,
        .label = label
    };
	return newMppt;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	461d      	mov	r5, r3
 8002488:	f107 0414 	add.w	r4, r7, #20
 800248c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800248e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002490:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002492:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002494:	6823      	ldr	r3, [r4, #0]
 8002496:	602b      	str	r3, [r5, #0]
}
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	373c      	adds	r7, #60	@ 0x3c
 800249c:	46bd      	mov	sp, r7
 800249e:	bcb0      	pop	{r4, r5, r7}
 80024a0:	4770      	bx	lr

080024a2 <PDU_Create>:

#define VOLTAGE_STM32 3.3
#define ADC_RESOLUTION 4095.0 	//2^12 - 1


PDU_Channel PDU_Create(char *label, ADC_HandleTypeDef *hadc, uint32_t v_channel, uint32_t i_channel, GPIO_TypeDef *gpio_port, uint16_t gpio_pin) {
 80024a2:	b4b0      	push	{r4, r5, r7}
 80024a4:	b08d      	sub	sp, #52	@ 0x34
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	603b      	str	r3, [r7, #0]
    PDU_Channel newPdu = {
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	617b      	str	r3, [r7, #20]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024ba:	61fb      	str	r3, [r7, #28]
 80024bc:	2300      	movs	r3, #0
 80024be:	843b      	strh	r3, [r7, #32]
 80024c0:	2300      	movs	r3, #0
 80024c2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80024c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024cc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80024d0:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        .current = 0,
        .label = label,
        .gpio_port = gpio_port,
        .gpio_pin = gpio_pin
    };
    return newPdu;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	461d      	mov	r5, r3
 80024d6:	f107 0414 	add.w	r4, r7, #20
 80024da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024de:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80024e2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	3734      	adds	r7, #52	@ 0x34
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bcb0      	pop	{r4, r5, r7}
 80024ee:	4770      	bx	lr

080024f0 <enablePDU>:
    HAL_I2C_Master_Transmit(&hi2c3, ARDUINO_I2C_ADDRESS << 1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
}


// Habilitar la salida GPIO asociada a la fuente
void enablePDU(PDU_Channel *pdu) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(pdu->gpio_port, pdu->gpio_pin, GPIO_PIN_SET);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6958      	ldr	r0, [r3, #20]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	8b1b      	ldrh	r3, [r3, #24]
 8002500:	2201      	movs	r2, #1
 8002502:	4619      	mov	r1, r3
 8002504:	f002 f828 	bl	8004558 <HAL_GPIO_WritePin>
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <disablePDU>:

// Deshabilitar la salida GPIO asociada a la fuente
void disablePDU(PDU_Channel *pdu) {
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(pdu->gpio_port, pdu->gpio_pin, GPIO_PIN_RESET);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6958      	ldr	r0, [r3, #20]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	8b1b      	ldrh	r3, [r3, #24]
 8002520:	2200      	movs	r2, #0
 8002522:	4619      	mov	r1, r3
 8002524:	f002 f818 	bl	8004558 <HAL_GPIO_WritePin>
}
 8002528:	bf00      	nop
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	607b      	str	r3, [r7, #4]
 800253a:	4b10      	ldr	r3, [pc, #64]	@ (800257c <HAL_MspInit+0x4c>)
 800253c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253e:	4a0f      	ldr	r2, [pc, #60]	@ (800257c <HAL_MspInit+0x4c>)
 8002540:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002544:	6453      	str	r3, [r2, #68]	@ 0x44
 8002546:	4b0d      	ldr	r3, [pc, #52]	@ (800257c <HAL_MspInit+0x4c>)
 8002548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800254e:	607b      	str	r3, [r7, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	603b      	str	r3, [r7, #0]
 8002556:	4b09      	ldr	r3, [pc, #36]	@ (800257c <HAL_MspInit+0x4c>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	4a08      	ldr	r2, [pc, #32]	@ (800257c <HAL_MspInit+0x4c>)
 800255c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002560:	6413      	str	r3, [r2, #64]	@ 0x40
 8002562:	4b06      	ldr	r3, [pc, #24]	@ (800257c <HAL_MspInit+0x4c>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800256a:	603b      	str	r3, [r7, #0]
 800256c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800256e:	bf00      	nop
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800

08002580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002584:	bf00      	nop
 8002586:	e7fd      	b.n	8002584 <NMI_Handler+0x4>

08002588 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800258c:	bf00      	nop
 800258e:	e7fd      	b.n	800258c <HardFault_Handler+0x4>

08002590 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002594:	bf00      	nop
 8002596:	e7fd      	b.n	8002594 <MemManage_Handler+0x4>

08002598 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800259c:	bf00      	nop
 800259e:	e7fd      	b.n	800259c <BusFault_Handler+0x4>

080025a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025a4:	bf00      	nop
 80025a6:	e7fd      	b.n	80025a4 <UsageFault_Handler+0x4>

080025a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025b6:	b480      	push	{r7}
 80025b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025d6:	f000 fc31 	bl	8002e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025da:	bf00      	nop
 80025dc:	bd80      	pop	{r7, pc}
	...

080025e0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80025e4:	4802      	ldr	r0, [pc, #8]	@ (80025f0 <ADC_IRQHandler+0x10>)
 80025e6:	f000 fcb0 	bl	8002f4a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	20000230 	.word	0x20000230

080025f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025f8:	4802      	ldr	r0, [pc, #8]	@ (8002604 <DMA2_Stream0_IRQHandler+0x10>)
 80025fa:	f001 fba7 	bl	8003d4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	20000278 	.word	0x20000278

08002608 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return 1;
 800260c:	2301      	movs	r3, #1
}
 800260e:	4618      	mov	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <_kill>:

int _kill(int pid, int sig)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002622:	f005 fd49 	bl	80080b8 <__errno>
 8002626:	4603      	mov	r3, r0
 8002628:	2216      	movs	r2, #22
 800262a:	601a      	str	r2, [r3, #0]
  return -1;
 800262c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <_exit>:

void _exit (int status)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002640:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff ffe7 	bl	8002618 <_kill>
  while (1) {}    /* Make sure we hang here */
 800264a:	bf00      	nop
 800264c:	e7fd      	b.n	800264a <_exit+0x12>

0800264e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b086      	sub	sp, #24
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	e00a      	b.n	8002676 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002660:	f3af 8000 	nop.w
 8002664:	4601      	mov	r1, r0
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	60ba      	str	r2, [r7, #8]
 800266c:	b2ca      	uxtb	r2, r1
 800266e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	3301      	adds	r3, #1
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	429a      	cmp	r2, r3
 800267c:	dbf0      	blt.n	8002660 <_read+0x12>
  }

  return len;
 800267e:	687b      	ldr	r3, [r7, #4]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	e009      	b.n	80026ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	60ba      	str	r2, [r7, #8]
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	3301      	adds	r3, #1
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	dbf1      	blt.n	800269a <_write+0x12>
  }
  return len;
 80026b6:	687b      	ldr	r3, [r7, #4]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <_close>:

int _close(int file)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026e8:	605a      	str	r2, [r3, #4]
  return 0;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <_isatty>:

int _isatty(int file)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002700:	2301      	movs	r3, #1
}
 8002702:	4618      	mov	r0, r3
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800270e:	b480      	push	{r7}
 8002710:	b085      	sub	sp, #20
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002730:	4a14      	ldr	r2, [pc, #80]	@ (8002784 <_sbrk+0x5c>)
 8002732:	4b15      	ldr	r3, [pc, #84]	@ (8002788 <_sbrk+0x60>)
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800273c:	4b13      	ldr	r3, [pc, #76]	@ (800278c <_sbrk+0x64>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d102      	bne.n	800274a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002744:	4b11      	ldr	r3, [pc, #68]	@ (800278c <_sbrk+0x64>)
 8002746:	4a12      	ldr	r2, [pc, #72]	@ (8002790 <_sbrk+0x68>)
 8002748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800274a:	4b10      	ldr	r3, [pc, #64]	@ (800278c <_sbrk+0x64>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4413      	add	r3, r2
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	429a      	cmp	r2, r3
 8002756:	d207      	bcs.n	8002768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002758:	f005 fcae 	bl	80080b8 <__errno>
 800275c:	4603      	mov	r3, r0
 800275e:	220c      	movs	r2, #12
 8002760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002762:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002766:	e009      	b.n	800277c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002768:	4b08      	ldr	r3, [pc, #32]	@ (800278c <_sbrk+0x64>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800276e:	4b07      	ldr	r3, [pc, #28]	@ (800278c <_sbrk+0x64>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	4a05      	ldr	r2, [pc, #20]	@ (800278c <_sbrk+0x64>)
 8002778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800277a:	68fb      	ldr	r3, [r7, #12]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20020000 	.word	0x20020000
 8002788:	00000400 	.word	0x00000400
 800278c:	20000498 	.word	0x20000498
 8002790:	20000bf0 	.word	0x20000bf0

08002794 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002798:	4b06      	ldr	r3, [pc, #24]	@ (80027b4 <SystemInit+0x20>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279e:	4a05      	ldr	r2, [pc, #20]	@ (80027b4 <SystemInit+0x20>)
 80027a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08a      	sub	sp, #40	@ 0x28
 80027bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027be:	f107 0320 	add.w	r3, r7, #32
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027c8:	1d3b      	adds	r3, r7, #4
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]
 80027ce:	605a      	str	r2, [r3, #4]
 80027d0:	609a      	str	r2, [r3, #8]
 80027d2:	60da      	str	r2, [r3, #12]
 80027d4:	611a      	str	r2, [r3, #16]
 80027d6:	615a      	str	r2, [r3, #20]
 80027d8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027da:	4b22      	ldr	r3, [pc, #136]	@ (8002864 <MX_TIM2_Init+0xac>)
 80027dc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80027e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80027e2:	4b20      	ldr	r3, [pc, #128]	@ (8002864 <MX_TIM2_Init+0xac>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002864 <MX_TIM2_Init+0xac>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80027ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002864 <MX_TIM2_Init+0xac>)
 80027f0:	22ff      	movs	r2, #255	@ 0xff
 80027f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002864 <MX_TIM2_Init+0xac>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002864 <MX_TIM2_Init+0xac>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002800:	4818      	ldr	r0, [pc, #96]	@ (8002864 <MX_TIM2_Init+0xac>)
 8002802:	f003 fc65 	bl	80060d0 <HAL_TIM_PWM_Init>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800280c:	f7ff fe16 	bl	800243c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002810:	2300      	movs	r3, #0
 8002812:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002814:	2300      	movs	r3, #0
 8002816:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002818:	f107 0320 	add.w	r3, r7, #32
 800281c:	4619      	mov	r1, r3
 800281e:	4811      	ldr	r0, [pc, #68]	@ (8002864 <MX_TIM2_Init+0xac>)
 8002820:	f004 f8b2 	bl	8006988 <HAL_TIMEx_MasterConfigSynchronization>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 800282a:	f7ff fe07 	bl	800243c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800282e:	2360      	movs	r3, #96	@ 0x60
 8002830:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002832:	2300      	movs	r3, #0
 8002834:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 800283a:	2304      	movs	r3, #4
 800283c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800283e:	1d3b      	adds	r3, r7, #4
 8002840:	2200      	movs	r2, #0
 8002842:	4619      	mov	r1, r3
 8002844:	4807      	ldr	r0, [pc, #28]	@ (8002864 <MX_TIM2_Init+0xac>)
 8002846:	f003 fd5b 	bl	8006300 <HAL_TIM_PWM_ConfigChannel>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8002850:	f7ff fdf4 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002854:	4803      	ldr	r0, [pc, #12]	@ (8002864 <MX_TIM2_Init+0xac>)
 8002856:	f000 f903 	bl	8002a60 <HAL_TIM_MspPostInit>

}
 800285a:	bf00      	nop
 800285c:	3728      	adds	r7, #40	@ 0x28
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	2000049c 	.word	0x2000049c

08002868 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08a      	sub	sp, #40	@ 0x28
 800286c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800286e:	f107 0320 	add.w	r3, r7, #32
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002878:	1d3b      	adds	r3, r7, #4
 800287a:	2200      	movs	r2, #0
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	605a      	str	r2, [r3, #4]
 8002880:	609a      	str	r2, [r3, #8]
 8002882:	60da      	str	r2, [r3, #12]
 8002884:	611a      	str	r2, [r3, #16]
 8002886:	615a      	str	r2, [r3, #20]
 8002888:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800288a:	4b21      	ldr	r3, [pc, #132]	@ (8002910 <MX_TIM4_Init+0xa8>)
 800288c:	4a21      	ldr	r2, [pc, #132]	@ (8002914 <MX_TIM4_Init+0xac>)
 800288e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8002890:	4b1f      	ldr	r3, [pc, #124]	@ (8002910 <MX_TIM4_Init+0xa8>)
 8002892:	2201      	movs	r2, #1
 8002894:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002896:	4b1e      	ldr	r3, [pc, #120]	@ (8002910 <MX_TIM4_Init+0xa8>)
 8002898:	2200      	movs	r2, #0
 800289a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 255;
 800289c:	4b1c      	ldr	r3, [pc, #112]	@ (8002910 <MX_TIM4_Init+0xa8>)
 800289e:	22ff      	movs	r2, #255	@ 0xff
 80028a0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002910 <MX_TIM4_Init+0xa8>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028a8:	4b19      	ldr	r3, [pc, #100]	@ (8002910 <MX_TIM4_Init+0xa8>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80028ae:	4818      	ldr	r0, [pc, #96]	@ (8002910 <MX_TIM4_Init+0xa8>)
 80028b0:	f003 fc0e 	bl	80060d0 <HAL_TIM_PWM_Init>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80028ba:	f7ff fdbf 	bl	800243c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028be:	2300      	movs	r3, #0
 80028c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028c6:	f107 0320 	add.w	r3, r7, #32
 80028ca:	4619      	mov	r1, r3
 80028cc:	4810      	ldr	r0, [pc, #64]	@ (8002910 <MX_TIM4_Init+0xa8>)
 80028ce:	f004 f85b 	bl	8006988 <HAL_TIMEx_MasterConfigSynchronization>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80028d8:	f7ff fdb0 	bl	800243c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028dc:	2360      	movs	r3, #96	@ 0x60
 80028de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80028ec:	1d3b      	adds	r3, r7, #4
 80028ee:	220c      	movs	r2, #12
 80028f0:	4619      	mov	r1, r3
 80028f2:	4807      	ldr	r0, [pc, #28]	@ (8002910 <MX_TIM4_Init+0xa8>)
 80028f4:	f003 fd04 	bl	8006300 <HAL_TIM_PWM_ConfigChannel>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80028fe:	f7ff fd9d 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002902:	4803      	ldr	r0, [pc, #12]	@ (8002910 <MX_TIM4_Init+0xa8>)
 8002904:	f000 f8ac 	bl	8002a60 <HAL_TIM_MspPostInit>

}
 8002908:	bf00      	nop
 800290a:	3728      	adds	r7, #40	@ 0x28
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	200004e4 	.word	0x200004e4
 8002914:	40000800 	.word	0x40000800

08002918 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b08a      	sub	sp, #40	@ 0x28
 800291c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800291e:	f107 0320 	add.w	r3, r7, #32
 8002922:	2200      	movs	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002928:	1d3b      	adds	r3, r7, #4
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	605a      	str	r2, [r3, #4]
 8002930:	609a      	str	r2, [r3, #8]
 8002932:	60da      	str	r2, [r3, #12]
 8002934:	611a      	str	r2, [r3, #16]
 8002936:	615a      	str	r2, [r3, #20]
 8002938:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800293a:	4b21      	ldr	r3, [pc, #132]	@ (80029c0 <MX_TIM5_Init+0xa8>)
 800293c:	4a21      	ldr	r2, [pc, #132]	@ (80029c4 <MX_TIM5_Init+0xac>)
 800293e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002940:	4b1f      	ldr	r3, [pc, #124]	@ (80029c0 <MX_TIM5_Init+0xa8>)
 8002942:	2200      	movs	r2, #0
 8002944:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002946:	4b1e      	ldr	r3, [pc, #120]	@ (80029c0 <MX_TIM5_Init+0xa8>)
 8002948:	2200      	movs	r2, #0
 800294a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 255;
 800294c:	4b1c      	ldr	r3, [pc, #112]	@ (80029c0 <MX_TIM5_Init+0xa8>)
 800294e:	22ff      	movs	r2, #255	@ 0xff
 8002950:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002952:	4b1b      	ldr	r3, [pc, #108]	@ (80029c0 <MX_TIM5_Init+0xa8>)
 8002954:	2200      	movs	r2, #0
 8002956:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002958:	4b19      	ldr	r3, [pc, #100]	@ (80029c0 <MX_TIM5_Init+0xa8>)
 800295a:	2200      	movs	r2, #0
 800295c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800295e:	4818      	ldr	r0, [pc, #96]	@ (80029c0 <MX_TIM5_Init+0xa8>)
 8002960:	f003 fbb6 	bl	80060d0 <HAL_TIM_PWM_Init>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 800296a:	f7ff fd67 	bl	800243c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800296e:	2300      	movs	r3, #0
 8002970:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002972:	2300      	movs	r3, #0
 8002974:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002976:	f107 0320 	add.w	r3, r7, #32
 800297a:	4619      	mov	r1, r3
 800297c:	4810      	ldr	r0, [pc, #64]	@ (80029c0 <MX_TIM5_Init+0xa8>)
 800297e:	f004 f803 	bl	8006988 <HAL_TIMEx_MasterConfigSynchronization>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8002988:	f7ff fd58 	bl	800243c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800298c:	2360      	movs	r3, #96	@ 0x60
 800298e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8002998:	2304      	movs	r3, #4
 800299a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800299c:	1d3b      	adds	r3, r7, #4
 800299e:	220c      	movs	r2, #12
 80029a0:	4619      	mov	r1, r3
 80029a2:	4807      	ldr	r0, [pc, #28]	@ (80029c0 <MX_TIM5_Init+0xa8>)
 80029a4:	f003 fcac 	bl	8006300 <HAL_TIM_PWM_ConfigChannel>
 80029a8:	4603      	mov	r3, r0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d001      	beq.n	80029b2 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 80029ae:	f7ff fd45 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80029b2:	4803      	ldr	r0, [pc, #12]	@ (80029c0 <MX_TIM5_Init+0xa8>)
 80029b4:	f000 f854 	bl	8002a60 <HAL_TIM_MspPostInit>

}
 80029b8:	bf00      	nop
 80029ba:	3728      	adds	r7, #40	@ 0x28
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	2000052c 	.word	0x2000052c
 80029c4:	40000c00 	.word	0x40000c00

080029c8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b087      	sub	sp, #28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029d8:	d10e      	bne.n	80029f8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	4b1d      	ldr	r3, [pc, #116]	@ (8002a54 <HAL_TIM_PWM_MspInit+0x8c>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002a54 <HAL_TIM_PWM_MspInit+0x8c>)
 80029e4:	f043 0301 	orr.w	r3, r3, #1
 80029e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002a54 <HAL_TIM_PWM_MspInit+0x8c>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80029f6:	e026      	b.n	8002a46 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM4)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a16      	ldr	r2, [pc, #88]	@ (8002a58 <HAL_TIM_PWM_MspInit+0x90>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d10e      	bne.n	8002a20 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
 8002a06:	4b13      	ldr	r3, [pc, #76]	@ (8002a54 <HAL_TIM_PWM_MspInit+0x8c>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	4a12      	ldr	r2, [pc, #72]	@ (8002a54 <HAL_TIM_PWM_MspInit+0x8c>)
 8002a0c:	f043 0304 	orr.w	r3, r3, #4
 8002a10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a12:	4b10      	ldr	r3, [pc, #64]	@ (8002a54 <HAL_TIM_PWM_MspInit+0x8c>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	613b      	str	r3, [r7, #16]
 8002a1c:	693b      	ldr	r3, [r7, #16]
}
 8002a1e:	e012      	b.n	8002a46 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM5)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a0d      	ldr	r2, [pc, #52]	@ (8002a5c <HAL_TIM_PWM_MspInit+0x94>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d10d      	bne.n	8002a46 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60fb      	str	r3, [r7, #12]
 8002a2e:	4b09      	ldr	r3, [pc, #36]	@ (8002a54 <HAL_TIM_PWM_MspInit+0x8c>)
 8002a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a32:	4a08      	ldr	r2, [pc, #32]	@ (8002a54 <HAL_TIM_PWM_MspInit+0x8c>)
 8002a34:	f043 0308 	orr.w	r3, r3, #8
 8002a38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a3a:	4b06      	ldr	r3, [pc, #24]	@ (8002a54 <HAL_TIM_PWM_MspInit+0x8c>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	60fb      	str	r3, [r7, #12]
 8002a44:	68fb      	ldr	r3, [r7, #12]
}
 8002a46:	bf00      	nop
 8002a48:	371c      	adds	r7, #28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40000800 	.word	0x40000800
 8002a5c:	40000c00 	.word	0x40000c00

08002a60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08a      	sub	sp, #40	@ 0x28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a68:	f107 0314 	add.w	r3, r7, #20
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	60da      	str	r2, [r3, #12]
 8002a76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a80:	d11e      	bne.n	8002ac0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	4b34      	ldr	r3, [pc, #208]	@ (8002b58 <HAL_TIM_MspPostInit+0xf8>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8a:	4a33      	ldr	r2, [pc, #204]	@ (8002b58 <HAL_TIM_MspPostInit+0xf8>)
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a92:	4b31      	ldr	r3, [pc, #196]	@ (8002b58 <HAL_TIM_MspPostInit+0xf8>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	613b      	str	r3, [r7, #16]
 8002a9c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = MPPTYControl_Pin;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPPTYControl_GPIO_Port, &GPIO_InitStruct);
 8002ab2:	f107 0314 	add.w	r3, r7, #20
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	4828      	ldr	r0, [pc, #160]	@ (8002b5c <HAL_TIM_MspPostInit+0xfc>)
 8002aba:	f001 fbb1 	bl	8004220 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002abe:	e047      	b.n	8002b50 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a26      	ldr	r2, [pc, #152]	@ (8002b60 <HAL_TIM_MspPostInit+0x100>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d11f      	bne.n	8002b0a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	4b22      	ldr	r3, [pc, #136]	@ (8002b58 <HAL_TIM_MspPostInit+0xf8>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad2:	4a21      	ldr	r2, [pc, #132]	@ (8002b58 <HAL_TIM_MspPostInit+0xf8>)
 8002ad4:	f043 0302 	orr.w	r3, r3, #2
 8002ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ada:	4b1f      	ldr	r3, [pc, #124]	@ (8002b58 <HAL_TIM_MspPostInit+0xf8>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MPPTXControl_Pin;
 8002ae6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002aea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aec:	2302      	movs	r3, #2
 8002aee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af4:	2300      	movs	r3, #0
 8002af6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002af8:	2302      	movs	r3, #2
 8002afa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPPTXControl_GPIO_Port, &GPIO_InitStruct);
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	4619      	mov	r1, r3
 8002b02:	4818      	ldr	r0, [pc, #96]	@ (8002b64 <HAL_TIM_MspPostInit+0x104>)
 8002b04:	f001 fb8c 	bl	8004220 <HAL_GPIO_Init>
}
 8002b08:	e022      	b.n	8002b50 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM5)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a16      	ldr	r2, [pc, #88]	@ (8002b68 <HAL_TIM_MspPostInit+0x108>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d11d      	bne.n	8002b50 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b14:	2300      	movs	r3, #0
 8002b16:	60bb      	str	r3, [r7, #8]
 8002b18:	4b0f      	ldr	r3, [pc, #60]	@ (8002b58 <HAL_TIM_MspPostInit+0xf8>)
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1c:	4a0e      	ldr	r2, [pc, #56]	@ (8002b58 <HAL_TIM_MspPostInit+0xf8>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b24:	4b0c      	ldr	r3, [pc, #48]	@ (8002b58 <HAL_TIM_MspPostInit+0xf8>)
 8002b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	60bb      	str	r3, [r7, #8]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MPPTZControl_Pin;
 8002b30:	2308      	movs	r3, #8
 8002b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b34:	2302      	movs	r3, #2
 8002b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002b40:	2302      	movs	r3, #2
 8002b42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPPTZControl_GPIO_Port, &GPIO_InitStruct);
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	4619      	mov	r1, r3
 8002b4a:	4804      	ldr	r0, [pc, #16]	@ (8002b5c <HAL_TIM_MspPostInit+0xfc>)
 8002b4c:	f001 fb68 	bl	8004220 <HAL_GPIO_Init>
}
 8002b50:	bf00      	nop
 8002b52:	3728      	adds	r7, #40	@ 0x28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40020000 	.word	0x40020000
 8002b60:	40000800 	.word	0x40000800
 8002b64:	40020400 	.word	0x40020400
 8002b68:	40000c00 	.word	0x40000c00

08002b6c <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002b70:	4b11      	ldr	r3, [pc, #68]	@ (8002bb8 <MX_UART4_Init+0x4c>)
 8002b72:	4a12      	ldr	r2, [pc, #72]	@ (8002bbc <MX_UART4_Init+0x50>)
 8002b74:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002b76:	4b10      	ldr	r3, [pc, #64]	@ (8002bb8 <MX_UART4_Init+0x4c>)
 8002b78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002b7c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8002bb8 <MX_UART4_Init+0x4c>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002b84:	4b0c      	ldr	r3, [pc, #48]	@ (8002bb8 <MX_UART4_Init+0x4c>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb8 <MX_UART4_Init+0x4c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002b90:	4b09      	ldr	r3, [pc, #36]	@ (8002bb8 <MX_UART4_Init+0x4c>)
 8002b92:	220c      	movs	r2, #12
 8002b94:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b96:	4b08      	ldr	r3, [pc, #32]	@ (8002bb8 <MX_UART4_Init+0x4c>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b9c:	4b06      	ldr	r3, [pc, #24]	@ (8002bb8 <MX_UART4_Init+0x4c>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002ba2:	4805      	ldr	r0, [pc, #20]	@ (8002bb8 <MX_UART4_Init+0x4c>)
 8002ba4:	f003 ff6c 	bl	8006a80 <HAL_UART_Init>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002bae:	f7ff fc45 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000574 	.word	0x20000574
 8002bbc:	40004c00 	.word	0x40004c00

08002bc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08a      	sub	sp, #40	@ 0x28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc8:	f107 0314 	add.w	r3, r7, #20
 8002bcc:	2200      	movs	r2, #0
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	605a      	str	r2, [r3, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	60da      	str	r2, [r3, #12]
 8002bd6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a19      	ldr	r2, [pc, #100]	@ (8002c44 <HAL_UART_MspInit+0x84>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d12c      	bne.n	8002c3c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	4b18      	ldr	r3, [pc, #96]	@ (8002c48 <HAL_UART_MspInit+0x88>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	4a17      	ldr	r2, [pc, #92]	@ (8002c48 <HAL_UART_MspInit+0x88>)
 8002bec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002bf0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bf2:	4b15      	ldr	r3, [pc, #84]	@ (8002c48 <HAL_UART_MspInit+0x88>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bfa:	613b      	str	r3, [r7, #16]
 8002bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bfe:	2300      	movs	r3, #0
 8002c00:	60fb      	str	r3, [r7, #12]
 8002c02:	4b11      	ldr	r3, [pc, #68]	@ (8002c48 <HAL_UART_MspInit+0x88>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c06:	4a10      	ldr	r2, [pc, #64]	@ (8002c48 <HAL_UART_MspInit+0x88>)
 8002c08:	f043 0304 	orr.w	r3, r3, #4
 8002c0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c48 <HAL_UART_MspInit+0x88>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c12:	f003 0304 	and.w	r3, r3, #4
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8002c1a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c20:	2302      	movs	r3, #2
 8002c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c24:	2301      	movs	r3, #1
 8002c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002c2c:	2308      	movs	r3, #8
 8002c2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c30:	f107 0314 	add.w	r3, r7, #20
 8002c34:	4619      	mov	r1, r3
 8002c36:	4805      	ldr	r0, [pc, #20]	@ (8002c4c <HAL_UART_MspInit+0x8c>)
 8002c38:	f001 faf2 	bl	8004220 <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8002c3c:	bf00      	nop
 8002c3e:	3728      	adds	r7, #40	@ 0x28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40004c00 	.word	0x40004c00
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40020800 	.word	0x40020800

08002c50 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002c54:	4b14      	ldr	r3, [pc, #80]	@ (8002ca8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c56:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8002c5a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002c5c:	4b12      	ldr	r3, [pc, #72]	@ (8002ca8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c5e:	2204      	movs	r2, #4
 8002c60:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002c62:	4b11      	ldr	r3, [pc, #68]	@ (8002ca8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c64:	2202      	movs	r2, #2
 8002c66:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002c68:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c70:	2202      	movs	r2, #2
 8002c72:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002c74:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002c80:	4b09      	ldr	r3, [pc, #36]	@ (8002ca8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002c86:	4b08      	ldr	r3, [pc, #32]	@ (8002ca8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002c8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ca8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002c92:	4805      	ldr	r0, [pc, #20]	@ (8002ca8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002c94:	f002 fc74 	bl	8005580 <HAL_PCD_Init>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002c9e:	f7ff fbcd 	bl	800243c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	200005bc 	.word	0x200005bc

08002cac <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	@ 0x28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb4:	f107 0314 	add.w	r3, r7, #20
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	609a      	str	r2, [r3, #8]
 8002cc0:	60da      	str	r2, [r3, #12]
 8002cc2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ccc:	d132      	bne.n	8002d34 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d3c <HAL_PCD_MspInit+0x90>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd6:	4a19      	ldr	r2, [pc, #100]	@ (8002d3c <HAL_PCD_MspInit+0x90>)
 8002cd8:	f043 0301 	orr.w	r3, r3, #1
 8002cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cde:	4b17      	ldr	r3, [pc, #92]	@ (8002d3c <HAL_PCD_MspInit+0x90>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002cea:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002cfc:	230a      	movs	r3, #10
 8002cfe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d00:	f107 0314 	add.w	r3, r7, #20
 8002d04:	4619      	mov	r1, r3
 8002d06:	480e      	ldr	r0, [pc, #56]	@ (8002d40 <HAL_PCD_MspInit+0x94>)
 8002d08:	f001 fa8a 	bl	8004220 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d3c <HAL_PCD_MspInit+0x90>)
 8002d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d10:	4a0a      	ldr	r2, [pc, #40]	@ (8002d3c <HAL_PCD_MspInit+0x90>)
 8002d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d16:	6353      	str	r3, [r2, #52]	@ 0x34
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	4b07      	ldr	r3, [pc, #28]	@ (8002d3c <HAL_PCD_MspInit+0x90>)
 8002d1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d20:	4a06      	ldr	r2, [pc, #24]	@ (8002d3c <HAL_PCD_MspInit+0x90>)
 8002d22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d26:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d28:	4b04      	ldr	r3, [pc, #16]	@ (8002d3c <HAL_PCD_MspInit+0x90>)
 8002d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d2c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002d34:	bf00      	nop
 8002d36:	3728      	adds	r7, #40	@ 0x28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40020000 	.word	0x40020000

08002d44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d48:	f7ff fd24 	bl	8002794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d4c:	480c      	ldr	r0, [pc, #48]	@ (8002d80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d4e:	490d      	ldr	r1, [pc, #52]	@ (8002d84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d50:	4a0d      	ldr	r2, [pc, #52]	@ (8002d88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d54:	e002      	b.n	8002d5c <LoopCopyDataInit>

08002d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d5a:	3304      	adds	r3, #4

08002d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d60:	d3f9      	bcc.n	8002d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d62:	4a0a      	ldr	r2, [pc, #40]	@ (8002d8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d64:	4c0a      	ldr	r4, [pc, #40]	@ (8002d90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d68:	e001      	b.n	8002d6e <LoopFillZerobss>

08002d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d6c:	3204      	adds	r2, #4

08002d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d70:	d3fb      	bcc.n	8002d6a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002d72:	f005 f9a7 	bl	80080c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d76:	f7fe fef5 	bl	8001b64 <main>
  bx  lr    
 8002d7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d84:	20000214 	.word	0x20000214
  ldr r2, =_sidata
 8002d88:	0800a7b8 	.word	0x0800a7b8
  ldr r2, =_sbss
 8002d8c:	20000214 	.word	0x20000214
  ldr r4, =_ebss
 8002d90:	20000bf0 	.word	0x20000bf0

08002d94 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d94:	e7fe      	b.n	8002d94 <CAN1_RX0_IRQHandler>
	...

08002d98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd8 <HAL_Init+0x40>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd8 <HAL_Init+0x40>)
 8002da2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002da6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002da8:	4b0b      	ldr	r3, [pc, #44]	@ (8002dd8 <HAL_Init+0x40>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd8 <HAL_Init+0x40>)
 8002dae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002db2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002db4:	4b08      	ldr	r3, [pc, #32]	@ (8002dd8 <HAL_Init+0x40>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a07      	ldr	r2, [pc, #28]	@ (8002dd8 <HAL_Init+0x40>)
 8002dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dc0:	2003      	movs	r0, #3
 8002dc2:	f000 fe7b 	bl	8003abc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dc6:	200f      	movs	r0, #15
 8002dc8:	f000 f808 	bl	8002ddc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dcc:	f7ff fbb0 	bl	8002530 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40023c00 	.word	0x40023c00

08002ddc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002de4:	4b12      	ldr	r3, [pc, #72]	@ (8002e30 <HAL_InitTick+0x54>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4b12      	ldr	r3, [pc, #72]	@ (8002e34 <HAL_InitTick+0x58>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	4619      	mov	r1, r3
 8002dee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fe93 	bl	8003b26 <HAL_SYSTICK_Config>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e00e      	b.n	8002e28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2b0f      	cmp	r3, #15
 8002e0e:	d80a      	bhi.n	8002e26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e10:	2200      	movs	r2, #0
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e18:	f000 fe5b 	bl	8003ad2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e1c:	4a06      	ldr	r2, [pc, #24]	@ (8002e38 <HAL_InitTick+0x5c>)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	e000      	b.n	8002e28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	20000040 	.word	0x20000040
 8002e34:	20000048 	.word	0x20000048
 8002e38:	20000044 	.word	0x20000044

08002e3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e40:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <HAL_IncTick+0x20>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b06      	ldr	r3, [pc, #24]	@ (8002e60 <HAL_IncTick+0x24>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	4a04      	ldr	r2, [pc, #16]	@ (8002e60 <HAL_IncTick+0x24>)
 8002e4e:	6013      	str	r3, [r2, #0]
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	20000048 	.word	0x20000048
 8002e60:	20000aa0 	.word	0x20000aa0

08002e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return uwTick;
 8002e68:	4b03      	ldr	r3, [pc, #12]	@ (8002e78 <HAL_GetTick+0x14>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000aa0 	.word	0x20000aa0

08002e7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e84:	f7ff ffee 	bl	8002e64 <HAL_GetTick>
 8002e88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e94:	d005      	beq.n	8002ea2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e96:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec0 <HAL_Delay+0x44>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ea2:	bf00      	nop
 8002ea4:	f7ff ffde 	bl	8002e64 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d8f7      	bhi.n	8002ea4 <HAL_Delay+0x28>
  {
  }
}
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	20000048 	.word	0x20000048

08002ec4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e033      	b.n	8002f42 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d109      	bne.n	8002ef6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7fe f900 	bl	80010e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d118      	bne.n	8002f34 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f06:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002f0a:	f023 0302 	bic.w	r3, r3, #2
 8002f0e:	f043 0202 	orr.w	r2, r3, #2
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 fb78 	bl	800360c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	f023 0303 	bic.w	r3, r3, #3
 8002f2a:	f043 0201 	orr.w	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f32:	e001      	b.n	8002f38 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b086      	sub	sp, #24
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002f52:	2300      	movs	r3, #0
 8002f54:	617b      	str	r3, [r7, #20]
 8002f56:	2300      	movs	r3, #0
 8002f58:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	f003 0320 	and.w	r3, r3, #32
 8002f78:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d049      	beq.n	8003014 <HAL_ADC_IRQHandler+0xca>
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d046      	beq.n	8003014 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d105      	bne.n	8002f9e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f96:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d12b      	bne.n	8003004 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d127      	bne.n	8003004 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fba:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d006      	beq.n	8002fd0 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d119      	bne.n	8003004 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0220 	bic.w	r2, r2, #32
 8002fde:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d105      	bne.n	8003004 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffc:	f043 0201 	orr.w	r2, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f7fe fd9d 	bl	8001b44 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f06f 0212 	mvn.w	r2, #18
 8003012:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f003 0304 	and.w	r3, r3, #4
 800301a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003022:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d057      	beq.n	80030da <HAL_ADC_IRQHandler+0x190>
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d054      	beq.n	80030da <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003034:	f003 0310 	and.w	r3, r3, #16
 8003038:	2b00      	cmp	r3, #0
 800303a:	d105      	bne.n	8003048 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003040:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d139      	bne.n	80030ca <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800305c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003060:	2b00      	cmp	r3, #0
 8003062:	d006      	beq.n	8003072 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800306e:	2b00      	cmp	r3, #0
 8003070:	d12b      	bne.n	80030ca <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800307c:	2b00      	cmp	r3, #0
 800307e:	d124      	bne.n	80030ca <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800308a:	2b00      	cmp	r3, #0
 800308c:	d11d      	bne.n	80030ca <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003092:	2b00      	cmp	r3, #0
 8003094:	d119      	bne.n	80030ca <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	685a      	ldr	r2, [r3, #4]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030a4:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d105      	bne.n	80030ca <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c2:	f043 0201 	orr.w	r2, r3, #1
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 fc1c 	bl	8003908 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 020c 	mvn.w	r2, #12
 80030d8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f003 0301 	and.w	r3, r3, #1
 80030e0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d017      	beq.n	8003120 <HAL_ADC_IRQHandler+0x1d6>
 80030f0:	693b      	ldr	r3, [r7, #16]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d014      	beq.n	8003120 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b01      	cmp	r3, #1
 8003102:	d10d      	bne.n	8003120 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003108:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	f000 f945 	bl	80033a0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f06f 0201 	mvn.w	r2, #1
 800311e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800312e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d015      	beq.n	8003162 <HAL_ADC_IRQHandler+0x218>
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d012      	beq.n	8003162 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003140:	f043 0202 	orr.w	r2, r3, #2
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0220 	mvn.w	r2, #32
 8003150:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f92e 	bl	80033b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0220 	mvn.w	r2, #32
 8003160:	601a      	str	r2, [r3, #0]
  }
}
 8003162:	bf00      	nop
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003182:	2b01      	cmp	r3, #1
 8003184:	d101      	bne.n	800318a <HAL_ADC_Start_DMA+0x1e>
 8003186:	2302      	movs	r3, #2
 8003188:	e0e9      	b.n	800335e <HAL_ADC_Start_DMA+0x1f2>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b01      	cmp	r3, #1
 800319e:	d018      	beq.n	80031d2 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689a      	ldr	r2, [r3, #8]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f042 0201 	orr.w	r2, r2, #1
 80031ae:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031b0:	4b6d      	ldr	r3, [pc, #436]	@ (8003368 <HAL_ADC_Start_DMA+0x1fc>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a6d      	ldr	r2, [pc, #436]	@ (800336c <HAL_ADC_Start_DMA+0x200>)
 80031b6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ba:	0c9a      	lsrs	r2, r3, #18
 80031bc:	4613      	mov	r3, r2
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	4413      	add	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80031c4:	e002      	b.n	80031cc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	3b01      	subs	r3, #1
 80031ca:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f9      	bne.n	80031c6 <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031e0:	d107      	bne.n	80031f2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80031f0:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	f040 80a1 	bne.w	8003344 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003206:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800320a:	f023 0301 	bic.w	r3, r3, #1
 800320e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003220:	2b00      	cmp	r3, #0
 8003222:	d007      	beq.n	8003234 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003228:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800322c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003238:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800323c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003240:	d106      	bne.n	8003250 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003246:	f023 0206 	bic.w	r2, r3, #6
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	645a      	str	r2, [r3, #68]	@ 0x44
 800324e:	e002      	b.n	8003256 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800325e:	4b44      	ldr	r3, [pc, #272]	@ (8003370 <HAL_ADC_Start_DMA+0x204>)
 8003260:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003266:	4a43      	ldr	r2, [pc, #268]	@ (8003374 <HAL_ADC_Start_DMA+0x208>)
 8003268:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800326e:	4a42      	ldr	r2, [pc, #264]	@ (8003378 <HAL_ADC_Start_DMA+0x20c>)
 8003270:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003276:	4a41      	ldr	r2, [pc, #260]	@ (800337c <HAL_ADC_Start_DMA+0x210>)
 8003278:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003282:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	685a      	ldr	r2, [r3, #4]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003292:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032a2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	334c      	adds	r3, #76	@ 0x4c
 80032ae:	4619      	mov	r1, r3
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f000 fcf2 	bl	8003c9c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f003 031f 	and.w	r3, r3, #31
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d12a      	bne.n	800331a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a2d      	ldr	r2, [pc, #180]	@ (8003380 <HAL_ADC_Start_DMA+0x214>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d015      	beq.n	80032fa <HAL_ADC_Start_DMA+0x18e>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a2c      	ldr	r2, [pc, #176]	@ (8003384 <HAL_ADC_Start_DMA+0x218>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d105      	bne.n	80032e4 <HAL_ADC_Start_DMA+0x178>
 80032d8:	4b25      	ldr	r3, [pc, #148]	@ (8003370 <HAL_ADC_Start_DMA+0x204>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a27      	ldr	r2, [pc, #156]	@ (8003388 <HAL_ADC_Start_DMA+0x21c>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d136      	bne.n	800335c <HAL_ADC_Start_DMA+0x1f0>
 80032ee:	4b20      	ldr	r3, [pc, #128]	@ (8003370 <HAL_ADC_Start_DMA+0x204>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d130      	bne.n	800335c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d129      	bne.n	800335c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003316:	609a      	str	r2, [r3, #8]
 8003318:	e020      	b.n	800335c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a18      	ldr	r2, [pc, #96]	@ (8003380 <HAL_ADC_Start_DMA+0x214>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d11b      	bne.n	800335c <HAL_ADC_Start_DMA+0x1f0>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d114      	bne.n	800335c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003340:	609a      	str	r2, [r3, #8]
 8003342:	e00b      	b.n	800335c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003348:	f043 0210 	orr.w	r2, r3, #16
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003354:	f043 0201 	orr.w	r2, r3, #1
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20000040 	.word	0x20000040
 800336c:	431bde83 	.word	0x431bde83
 8003370:	40012300 	.word	0x40012300
 8003374:	08003805 	.word	0x08003805
 8003378:	080038bf 	.word	0x080038bf
 800337c:	080038db 	.word	0x080038db
 8003380:	40012000 	.word	0x40012000
 8003384:	40012100 	.word	0x40012100
 8003388:	40012200 	.word	0x40012200

0800338c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_ADC_ConfigChannel+0x1c>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e105      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x228>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b09      	cmp	r3, #9
 80033f2:	d925      	bls.n	8003440 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68d9      	ldr	r1, [r3, #12]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	461a      	mov	r2, r3
 8003402:	4613      	mov	r3, r2
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	4413      	add	r3, r2
 8003408:	3b1e      	subs	r3, #30
 800340a:	2207      	movs	r2, #7
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43da      	mvns	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	400a      	ands	r2, r1
 8003418:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68d9      	ldr	r1, [r3, #12]
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689a      	ldr	r2, [r3, #8]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	b29b      	uxth	r3, r3
 800342a:	4618      	mov	r0, r3
 800342c:	4603      	mov	r3, r0
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	4403      	add	r3, r0
 8003432:	3b1e      	subs	r3, #30
 8003434:	409a      	lsls	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	60da      	str	r2, [r3, #12]
 800343e:	e022      	b.n	8003486 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6919      	ldr	r1, [r3, #16]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	b29b      	uxth	r3, r3
 800344c:	461a      	mov	r2, r3
 800344e:	4613      	mov	r3, r2
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	4413      	add	r3, r2
 8003454:	2207      	movs	r2, #7
 8003456:	fa02 f303 	lsl.w	r3, r2, r3
 800345a:	43da      	mvns	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	400a      	ands	r2, r1
 8003462:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6919      	ldr	r1, [r3, #16]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	b29b      	uxth	r3, r3
 8003474:	4618      	mov	r0, r3
 8003476:	4603      	mov	r3, r0
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	4403      	add	r3, r0
 800347c:	409a      	lsls	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	2b06      	cmp	r3, #6
 800348c:	d824      	bhi.n	80034d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	4413      	add	r3, r2
 800349e:	3b05      	subs	r3, #5
 80034a0:	221f      	movs	r2, #31
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43da      	mvns	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	400a      	ands	r2, r1
 80034ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	4618      	mov	r0, r3
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	685a      	ldr	r2, [r3, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	3b05      	subs	r3, #5
 80034ca:	fa00 f203 	lsl.w	r2, r0, r3
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	430a      	orrs	r2, r1
 80034d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80034d6:	e04c      	b.n	8003572 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	2b0c      	cmp	r3, #12
 80034de:	d824      	bhi.n	800352a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	4413      	add	r3, r2
 80034f0:	3b23      	subs	r3, #35	@ 0x23
 80034f2:	221f      	movs	r2, #31
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43da      	mvns	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	400a      	ands	r2, r1
 8003500:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	b29b      	uxth	r3, r3
 800350e:	4618      	mov	r0, r3
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	4413      	add	r3, r2
 800351a:	3b23      	subs	r3, #35	@ 0x23
 800351c:	fa00 f203 	lsl.w	r2, r0, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	631a      	str	r2, [r3, #48]	@ 0x30
 8003528:	e023      	b.n	8003572 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	4413      	add	r3, r2
 800353a:	3b41      	subs	r3, #65	@ 0x41
 800353c:	221f      	movs	r2, #31
 800353e:	fa02 f303 	lsl.w	r3, r2, r3
 8003542:	43da      	mvns	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	400a      	ands	r2, r1
 800354a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	b29b      	uxth	r3, r3
 8003558:	4618      	mov	r0, r3
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	3b41      	subs	r3, #65	@ 0x41
 8003566:	fa00 f203 	lsl.w	r2, r0, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003572:	4b22      	ldr	r3, [pc, #136]	@ (80035fc <HAL_ADC_ConfigChannel+0x234>)
 8003574:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a21      	ldr	r2, [pc, #132]	@ (8003600 <HAL_ADC_ConfigChannel+0x238>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d109      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x1cc>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b12      	cmp	r3, #18
 8003586:	d105      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a19      	ldr	r2, [pc, #100]	@ (8003600 <HAL_ADC_ConfigChannel+0x238>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d123      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x21e>
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2b10      	cmp	r3, #16
 80035a4:	d003      	beq.n	80035ae <HAL_ADC_ConfigChannel+0x1e6>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b11      	cmp	r3, #17
 80035ac:	d11b      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b10      	cmp	r3, #16
 80035c0:	d111      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80035c2:	4b10      	ldr	r3, [pc, #64]	@ (8003604 <HAL_ADC_ConfigChannel+0x23c>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a10      	ldr	r2, [pc, #64]	@ (8003608 <HAL_ADC_ConfigChannel+0x240>)
 80035c8:	fba2 2303 	umull	r2, r3, r2, r3
 80035cc:	0c9a      	lsrs	r2, r3, #18
 80035ce:	4613      	mov	r3, r2
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80035d8:	e002      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	3b01      	subs	r3, #1
 80035de:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f9      	bne.n	80035da <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	40012300 	.word	0x40012300
 8003600:	40012000 	.word	0x40012000
 8003604:	20000040 	.word	0x20000040
 8003608:	431bde83 	.word	0x431bde83

0800360c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003614:	4b79      	ldr	r3, [pc, #484]	@ (80037fc <ADC_Init+0x1f0>)
 8003616:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	685a      	ldr	r2, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	431a      	orrs	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003640:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6859      	ldr	r1, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	021a      	lsls	r2, r3, #8
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003664:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6859      	ldr	r1, [r3, #4]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689a      	ldr	r2, [r3, #8]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003686:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6899      	ldr	r1, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68da      	ldr	r2, [r3, #12]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800369e:	4a58      	ldr	r2, [pc, #352]	@ (8003800 <ADC_Init+0x1f4>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d022      	beq.n	80036ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6899      	ldr	r1, [r3, #8]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	430a      	orrs	r2, r1
 80036c4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80036d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6899      	ldr	r1, [r3, #8]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	430a      	orrs	r2, r1
 80036e6:	609a      	str	r2, [r3, #8]
 80036e8:	e00f      	b.n	800370a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689a      	ldr	r2, [r3, #8]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003708:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0202 	bic.w	r2, r2, #2
 8003718:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6899      	ldr	r1, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	7e1b      	ldrb	r3, [r3, #24]
 8003724:	005a      	lsls	r2, r3, #1
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d01b      	beq.n	8003770 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003746:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003756:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6859      	ldr	r1, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003762:	3b01      	subs	r3, #1
 8003764:	035a      	lsls	r2, r3, #13
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	e007      	b.n	8003780 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800377e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800378e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	3b01      	subs	r3, #1
 800379c:	051a      	lsls	r2, r3, #20
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80037b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6899      	ldr	r1, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80037c2:	025a      	lsls	r2, r3, #9
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6899      	ldr	r1, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	029a      	lsls	r2, r3, #10
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	609a      	str	r2, [r3, #8]
}
 80037f0:	bf00      	nop
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	40012300 	.word	0x40012300
 8003800:	0f000001 	.word	0x0f000001

08003804 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003810:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003816:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800381a:	2b00      	cmp	r3, #0
 800381c:	d13c      	bne.n	8003898 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003822:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d12b      	bne.n	8003890 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800383c:	2b00      	cmp	r3, #0
 800383e:	d127      	bne.n	8003890 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003846:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800384a:	2b00      	cmp	r3, #0
 800384c:	d006      	beq.n	800385c <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003858:	2b00      	cmp	r3, #0
 800385a:	d119      	bne.n	8003890 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 0220 	bic.w	r2, r2, #32
 800386a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003870:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d105      	bne.n	8003890 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003888:	f043 0201 	orr.w	r2, r3, #1
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f7fe f957 	bl	8001b44 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003896:	e00e      	b.n	80038b6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d003      	beq.n	80038ac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f7ff fd85 	bl	80033b4 <HAL_ADC_ErrorCallback>
}
 80038aa:	e004      	b.n	80038b6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	4798      	blx	r3
}
 80038b6:	bf00      	nop
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b084      	sub	sp, #16
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ca:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f7ff fd5d 	bl	800338c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80038d2:	bf00      	nop
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b084      	sub	sp, #16
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e6:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2240      	movs	r2, #64	@ 0x40
 80038ec:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f2:	f043 0204 	orr.w	r2, r3, #4
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f7ff fd5a 	bl	80033b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003900:	bf00      	nop
 8003902:	3710      	adds	r7, #16
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800391c:	b480      	push	{r7}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f003 0307 	and.w	r3, r3, #7
 800392a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800392c:	4b0c      	ldr	r3, [pc, #48]	@ (8003960 <__NVIC_SetPriorityGrouping+0x44>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003938:	4013      	ands	r3, r2
 800393a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003944:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800394c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800394e:	4a04      	ldr	r2, [pc, #16]	@ (8003960 <__NVIC_SetPriorityGrouping+0x44>)
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	60d3      	str	r3, [r2, #12]
}
 8003954:	bf00      	nop
 8003956:	3714      	adds	r7, #20
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	e000ed00 	.word	0xe000ed00

08003964 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003968:	4b04      	ldr	r3, [pc, #16]	@ (800397c <__NVIC_GetPriorityGrouping+0x18>)
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	0a1b      	lsrs	r3, r3, #8
 800396e:	f003 0307 	and.w	r3, r3, #7
}
 8003972:	4618      	mov	r0, r3
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	e000ed00 	.word	0xe000ed00

08003980 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	4603      	mov	r3, r0
 8003988:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800398a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398e:	2b00      	cmp	r3, #0
 8003990:	db0b      	blt.n	80039aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	f003 021f 	and.w	r2, r3, #31
 8003998:	4907      	ldr	r1, [pc, #28]	@ (80039b8 <__NVIC_EnableIRQ+0x38>)
 800399a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800399e:	095b      	lsrs	r3, r3, #5
 80039a0:	2001      	movs	r0, #1
 80039a2:	fa00 f202 	lsl.w	r2, r0, r2
 80039a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	e000e100 	.word	0xe000e100

080039bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	4603      	mov	r3, r0
 80039c4:	6039      	str	r1, [r7, #0]
 80039c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	db0a      	blt.n	80039e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	b2da      	uxtb	r2, r3
 80039d4:	490c      	ldr	r1, [pc, #48]	@ (8003a08 <__NVIC_SetPriority+0x4c>)
 80039d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039da:	0112      	lsls	r2, r2, #4
 80039dc:	b2d2      	uxtb	r2, r2
 80039de:	440b      	add	r3, r1
 80039e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039e4:	e00a      	b.n	80039fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	4908      	ldr	r1, [pc, #32]	@ (8003a0c <__NVIC_SetPriority+0x50>)
 80039ec:	79fb      	ldrb	r3, [r7, #7]
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	3b04      	subs	r3, #4
 80039f4:	0112      	lsls	r2, r2, #4
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	440b      	add	r3, r1
 80039fa:	761a      	strb	r2, [r3, #24]
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	e000e100 	.word	0xe000e100
 8003a0c:	e000ed00 	.word	0xe000ed00

08003a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b089      	sub	sp, #36	@ 0x24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	f1c3 0307 	rsb	r3, r3, #7
 8003a2a:	2b04      	cmp	r3, #4
 8003a2c:	bf28      	it	cs
 8003a2e:	2304      	movcs	r3, #4
 8003a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	3304      	adds	r3, #4
 8003a36:	2b06      	cmp	r3, #6
 8003a38:	d902      	bls.n	8003a40 <NVIC_EncodePriority+0x30>
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	3b03      	subs	r3, #3
 8003a3e:	e000      	b.n	8003a42 <NVIC_EncodePriority+0x32>
 8003a40:	2300      	movs	r3, #0
 8003a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4e:	43da      	mvns	r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	401a      	ands	r2, r3
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a62:	43d9      	mvns	r1, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a68:	4313      	orrs	r3, r2
         );
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3724      	adds	r7, #36	@ 0x24
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
	...

08003a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3b01      	subs	r3, #1
 8003a84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a88:	d301      	bcc.n	8003a8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e00f      	b.n	8003aae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ab8 <SysTick_Config+0x40>)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3b01      	subs	r3, #1
 8003a94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a96:	210f      	movs	r1, #15
 8003a98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a9c:	f7ff ff8e 	bl	80039bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003aa0:	4b05      	ldr	r3, [pc, #20]	@ (8003ab8 <SysTick_Config+0x40>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003aa6:	4b04      	ldr	r3, [pc, #16]	@ (8003ab8 <SysTick_Config+0x40>)
 8003aa8:	2207      	movs	r2, #7
 8003aaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3708      	adds	r7, #8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	e000e010 	.word	0xe000e010

08003abc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff ff29 	bl	800391c <__NVIC_SetPriorityGrouping>
}
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b086      	sub	sp, #24
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	4603      	mov	r3, r0
 8003ada:	60b9      	str	r1, [r7, #8]
 8003adc:	607a      	str	r2, [r7, #4]
 8003ade:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ae4:	f7ff ff3e 	bl	8003964 <__NVIC_GetPriorityGrouping>
 8003ae8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68b9      	ldr	r1, [r7, #8]
 8003aee:	6978      	ldr	r0, [r7, #20]
 8003af0:	f7ff ff8e 	bl	8003a10 <NVIC_EncodePriority>
 8003af4:	4602      	mov	r2, r0
 8003af6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003afa:	4611      	mov	r1, r2
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff ff5d 	bl	80039bc <__NVIC_SetPriority>
}
 8003b02:	bf00      	nop
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b082      	sub	sp, #8
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	4603      	mov	r3, r0
 8003b12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f7ff ff31 	bl	8003980 <__NVIC_EnableIRQ>
}
 8003b1e:	bf00      	nop
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}

08003b26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b26:	b580      	push	{r7, lr}
 8003b28:	b082      	sub	sp, #8
 8003b2a:	af00      	add	r7, sp, #0
 8003b2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff ffa2 	bl	8003a78 <SysTick_Config>
 8003b34:	4603      	mov	r3, r0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003b4c:	f7ff f98a 	bl	8002e64 <HAL_GetTick>
 8003b50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d101      	bne.n	8003b5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e099      	b.n	8003c90 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2202      	movs	r2, #2
 8003b60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f022 0201 	bic.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b7c:	e00f      	b.n	8003b9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b7e:	f7ff f971 	bl	8002e64 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	2b05      	cmp	r3, #5
 8003b8a:	d908      	bls.n	8003b9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2203      	movs	r2, #3
 8003b96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e078      	b.n	8003c90 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1e8      	bne.n	8003b7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	4b38      	ldr	r3, [pc, #224]	@ (8003c98 <HAL_DMA_Init+0x158>)
 8003bb8:	4013      	ands	r3, r2
 8003bba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003be2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf4:	2b04      	cmp	r3, #4
 8003bf6:	d107      	bne.n	8003c08 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c00:	4313      	orrs	r3, r2
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	695b      	ldr	r3, [r3, #20]
 8003c16:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f023 0307 	bic.w	r3, r3, #7
 8003c1e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d117      	bne.n	8003c62 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00e      	beq.n	8003c62 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 fa6f 	bl	8004128 <DMA_CheckFifoParam>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d008      	beq.n	8003c62 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2240      	movs	r2, #64	@ 0x40
 8003c54:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e016      	b.n	8003c90 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 fa26 	bl	80040bc <DMA_CalcBaseAndBitshift>
 8003c70:	4603      	mov	r3, r0
 8003c72:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c78:	223f      	movs	r2, #63	@ 0x3f
 8003c7a:	409a      	lsls	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2200      	movs	r2, #0
 8003c84:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3718      	adds	r7, #24
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	f010803f 	.word	0xf010803f

08003c9c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d101      	bne.n	8003cc2 <HAL_DMA_Start_IT+0x26>
 8003cbe:	2302      	movs	r3, #2
 8003cc0:	e040      	b.n	8003d44 <HAL_DMA_Start_IT+0xa8>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d12f      	bne.n	8003d36 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2202      	movs	r2, #2
 8003cda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68b9      	ldr	r1, [r7, #8]
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f9b8 	bl	8004060 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf4:	223f      	movs	r2, #63	@ 0x3f
 8003cf6:	409a      	lsls	r2, r3
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0216 	orr.w	r2, r2, #22
 8003d0a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d007      	beq.n	8003d24 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0208 	orr.w	r2, r2, #8
 8003d22:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0201 	orr.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
 8003d34:	e005      	b.n	8003d42 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003d3e:	2302      	movs	r3, #2
 8003d40:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d58:	4b8e      	ldr	r3, [pc, #568]	@ (8003f94 <HAL_DMA_IRQHandler+0x248>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a8e      	ldr	r2, [pc, #568]	@ (8003f98 <HAL_DMA_IRQHandler+0x24c>)
 8003d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d62:	0a9b      	lsrs	r3, r3, #10
 8003d64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d76:	2208      	movs	r2, #8
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d01a      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d013      	beq.n	8003db8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0204 	bic.w	r2, r2, #4
 8003d9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da4:	2208      	movs	r2, #8
 8003da6:	409a      	lsls	r2, r3
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003db0:	f043 0201 	orr.w	r2, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	409a      	lsls	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d012      	beq.n	8003dee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00b      	beq.n	8003dee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dda:	2201      	movs	r2, #1
 8003ddc:	409a      	lsls	r2, r3
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003de6:	f043 0202 	orr.w	r2, r3, #2
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003df2:	2204      	movs	r2, #4
 8003df4:	409a      	lsls	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d012      	beq.n	8003e24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00b      	beq.n	8003e24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e10:	2204      	movs	r2, #4
 8003e12:	409a      	lsls	r2, r3
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e1c:	f043 0204 	orr.w	r2, r3, #4
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e28:	2210      	movs	r2, #16
 8003e2a:	409a      	lsls	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d043      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d03c      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e46:	2210      	movs	r2, #16
 8003e48:	409a      	lsls	r2, r3
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d018      	beq.n	8003e8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d108      	bne.n	8003e7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d024      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	4798      	blx	r3
 8003e7a:	e01f      	b.n	8003ebc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d01b      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	4798      	blx	r3
 8003e8c:	e016      	b.n	8003ebc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d107      	bne.n	8003eac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0208 	bic.w	r2, r2, #8
 8003eaa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec0:	2220      	movs	r2, #32
 8003ec2:	409a      	lsls	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 808f 	beq.w	8003fec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0310 	and.w	r3, r3, #16
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 8087 	beq.w	8003fec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	409a      	lsls	r2, r3
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b05      	cmp	r3, #5
 8003ef4:	d136      	bne.n	8003f64 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0216 	bic.w	r2, r2, #22
 8003f04:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	695a      	ldr	r2, [r3, #20]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f14:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d103      	bne.n	8003f26 <HAL_DMA_IRQHandler+0x1da>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d007      	beq.n	8003f36 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 0208 	bic.w	r2, r2, #8
 8003f34:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f3a:	223f      	movs	r2, #63	@ 0x3f
 8003f3c:	409a      	lsls	r2, r3
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d07e      	beq.n	8004058 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	4798      	blx	r3
        }
        return;
 8003f62:	e079      	b.n	8004058 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01d      	beq.n	8003fae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10d      	bne.n	8003f9c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d031      	beq.n	8003fec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	4798      	blx	r3
 8003f90:	e02c      	b.n	8003fec <HAL_DMA_IRQHandler+0x2a0>
 8003f92:	bf00      	nop
 8003f94:	20000040 	.word	0x20000040
 8003f98:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d023      	beq.n	8003fec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	4798      	blx	r3
 8003fac:	e01e      	b.n	8003fec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10f      	bne.n	8003fdc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0210 	bic.w	r2, r2, #16
 8003fca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d032      	beq.n	800405a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d022      	beq.n	8004046 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2205      	movs	r2, #5
 8004004:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0201 	bic.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	3301      	adds	r3, #1
 800401c:	60bb      	str	r3, [r7, #8]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	429a      	cmp	r2, r3
 8004022:	d307      	bcc.n	8004034 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f2      	bne.n	8004018 <HAL_DMA_IRQHandler+0x2cc>
 8004032:	e000      	b.n	8004036 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004034:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2201      	movs	r2, #1
 800403a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800404a:	2b00      	cmp	r3, #0
 800404c:	d005      	beq.n	800405a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	4798      	blx	r3
 8004056:	e000      	b.n	800405a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004058:	bf00      	nop
    }
  }
}
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
 800406c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800407c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	2b40      	cmp	r3, #64	@ 0x40
 800408c:	d108      	bne.n	80040a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800409e:	e007      	b.n	80040b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68ba      	ldr	r2, [r7, #8]
 80040a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	60da      	str	r2, [r3, #12]
}
 80040b0:	bf00      	nop
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	3b10      	subs	r3, #16
 80040cc:	4a14      	ldr	r2, [pc, #80]	@ (8004120 <DMA_CalcBaseAndBitshift+0x64>)
 80040ce:	fba2 2303 	umull	r2, r3, r2, r3
 80040d2:	091b      	lsrs	r3, r3, #4
 80040d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80040d6:	4a13      	ldr	r2, [pc, #76]	@ (8004124 <DMA_CalcBaseAndBitshift+0x68>)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	4413      	add	r3, r2
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	461a      	mov	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	d909      	bls.n	80040fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80040f2:	f023 0303 	bic.w	r3, r3, #3
 80040f6:	1d1a      	adds	r2, r3, #4
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	659a      	str	r2, [r3, #88]	@ 0x58
 80040fc:	e007      	b.n	800410e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004106:	f023 0303 	bic.w	r3, r3, #3
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004112:	4618      	mov	r0, r3
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	aaaaaaab 	.word	0xaaaaaaab
 8004124:	0800a430 	.word	0x0800a430

08004128 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004138:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d11f      	bne.n	8004182 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b03      	cmp	r3, #3
 8004146:	d856      	bhi.n	80041f6 <DMA_CheckFifoParam+0xce>
 8004148:	a201      	add	r2, pc, #4	@ (adr r2, 8004150 <DMA_CheckFifoParam+0x28>)
 800414a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414e:	bf00      	nop
 8004150:	08004161 	.word	0x08004161
 8004154:	08004173 	.word	0x08004173
 8004158:	08004161 	.word	0x08004161
 800415c:	080041f7 	.word	0x080041f7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004164:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d046      	beq.n	80041fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004170:	e043      	b.n	80041fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004176:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800417a:	d140      	bne.n	80041fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004180:	e03d      	b.n	80041fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800418a:	d121      	bne.n	80041d0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	2b03      	cmp	r3, #3
 8004190:	d837      	bhi.n	8004202 <DMA_CheckFifoParam+0xda>
 8004192:	a201      	add	r2, pc, #4	@ (adr r2, 8004198 <DMA_CheckFifoParam+0x70>)
 8004194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004198:	080041a9 	.word	0x080041a9
 800419c:	080041af 	.word	0x080041af
 80041a0:	080041a9 	.word	0x080041a9
 80041a4:	080041c1 	.word	0x080041c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	73fb      	strb	r3, [r7, #15]
      break;
 80041ac:	e030      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d025      	beq.n	8004206 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80041be:	e022      	b.n	8004206 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041c4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041c8:	d11f      	bne.n	800420a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80041ce:	e01c      	b.n	800420a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d903      	bls.n	80041de <DMA_CheckFifoParam+0xb6>
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d003      	beq.n	80041e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80041dc:	e018      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	73fb      	strb	r3, [r7, #15]
      break;
 80041e2:	e015      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00e      	beq.n	800420e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
      break;
 80041f4:	e00b      	b.n	800420e <DMA_CheckFifoParam+0xe6>
      break;
 80041f6:	bf00      	nop
 80041f8:	e00a      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
      break;
 80041fa:	bf00      	nop
 80041fc:	e008      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
      break;
 80041fe:	bf00      	nop
 8004200:	e006      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
      break;
 8004202:	bf00      	nop
 8004204:	e004      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
      break;
 8004206:	bf00      	nop
 8004208:	e002      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
      break;   
 800420a:	bf00      	nop
 800420c:	e000      	b.n	8004210 <DMA_CheckFifoParam+0xe8>
      break;
 800420e:	bf00      	nop
    }
  } 
  
  return status; 
 8004210:	7bfb      	ldrb	r3, [r7, #15]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop

08004220 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004220:	b480      	push	{r7}
 8004222:	b089      	sub	sp, #36	@ 0x24
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800422a:	2300      	movs	r3, #0
 800422c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800422e:	2300      	movs	r3, #0
 8004230:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004232:	2300      	movs	r3, #0
 8004234:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004236:	2300      	movs	r3, #0
 8004238:	61fb      	str	r3, [r7, #28]
 800423a:	e16b      	b.n	8004514 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800423c:	2201      	movs	r2, #1
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	4013      	ands	r3, r2
 800424e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	429a      	cmp	r2, r3
 8004256:	f040 815a 	bne.w	800450e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	2b01      	cmp	r3, #1
 8004264:	d005      	beq.n	8004272 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800426e:	2b02      	cmp	r3, #2
 8004270:	d130      	bne.n	80042d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	2203      	movs	r2, #3
 800427e:	fa02 f303 	lsl.w	r3, r2, r3
 8004282:	43db      	mvns	r3, r3
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	4013      	ands	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	4313      	orrs	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80042a8:	2201      	movs	r2, #1
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	fa02 f303 	lsl.w	r3, r2, r3
 80042b0:	43db      	mvns	r3, r3
 80042b2:	69ba      	ldr	r2, [r7, #24]
 80042b4:	4013      	ands	r3, r2
 80042b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	091b      	lsrs	r3, r3, #4
 80042be:	f003 0201 	and.w	r2, r3, #1
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	fa02 f303 	lsl.w	r3, r2, r3
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 0303 	and.w	r3, r3, #3
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d017      	beq.n	8004310 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	68db      	ldr	r3, [r3, #12]
 80042e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	2203      	movs	r2, #3
 80042ec:	fa02 f303 	lsl.w	r3, r2, r3
 80042f0:	43db      	mvns	r3, r3
 80042f2:	69ba      	ldr	r2, [r7, #24]
 80042f4:	4013      	ands	r3, r2
 80042f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	689a      	ldr	r2, [r3, #8]
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	fa02 f303 	lsl.w	r3, r2, r3
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	4313      	orrs	r3, r2
 8004308:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f003 0303 	and.w	r3, r3, #3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d123      	bne.n	8004364 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	08da      	lsrs	r2, r3, #3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3208      	adds	r2, #8
 8004324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004328:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	220f      	movs	r2, #15
 8004334:	fa02 f303 	lsl.w	r3, r2, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	69ba      	ldr	r2, [r7, #24]
 800433c:	4013      	ands	r3, r2
 800433e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	691a      	ldr	r2, [r3, #16]
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	fa02 f303 	lsl.w	r3, r2, r3
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	4313      	orrs	r3, r2
 8004354:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	08da      	lsrs	r2, r3, #3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3208      	adds	r2, #8
 800435e:	69b9      	ldr	r1, [r7, #24]
 8004360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	2203      	movs	r2, #3
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	43db      	mvns	r3, r3
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	4013      	ands	r3, r2
 800437a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f003 0203 	and.w	r2, r3, #3
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	fa02 f303 	lsl.w	r3, r2, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4313      	orrs	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 80b4 	beq.w	800450e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043a6:	2300      	movs	r3, #0
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	4b60      	ldr	r3, [pc, #384]	@ (800452c <HAL_GPIO_Init+0x30c>)
 80043ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ae:	4a5f      	ldr	r2, [pc, #380]	@ (800452c <HAL_GPIO_Init+0x30c>)
 80043b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80043b6:	4b5d      	ldr	r3, [pc, #372]	@ (800452c <HAL_GPIO_Init+0x30c>)
 80043b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80043be:	60fb      	str	r3, [r7, #12]
 80043c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043c2:	4a5b      	ldr	r2, [pc, #364]	@ (8004530 <HAL_GPIO_Init+0x310>)
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	089b      	lsrs	r3, r3, #2
 80043c8:	3302      	adds	r3, #2
 80043ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	220f      	movs	r2, #15
 80043da:	fa02 f303 	lsl.w	r3, r2, r3
 80043de:	43db      	mvns	r3, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4013      	ands	r3, r2
 80043e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a52      	ldr	r2, [pc, #328]	@ (8004534 <HAL_GPIO_Init+0x314>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d02b      	beq.n	8004446 <HAL_GPIO_Init+0x226>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a51      	ldr	r2, [pc, #324]	@ (8004538 <HAL_GPIO_Init+0x318>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d025      	beq.n	8004442 <HAL_GPIO_Init+0x222>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a50      	ldr	r2, [pc, #320]	@ (800453c <HAL_GPIO_Init+0x31c>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d01f      	beq.n	800443e <HAL_GPIO_Init+0x21e>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a4f      	ldr	r2, [pc, #316]	@ (8004540 <HAL_GPIO_Init+0x320>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d019      	beq.n	800443a <HAL_GPIO_Init+0x21a>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a4e      	ldr	r2, [pc, #312]	@ (8004544 <HAL_GPIO_Init+0x324>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d013      	beq.n	8004436 <HAL_GPIO_Init+0x216>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a4d      	ldr	r2, [pc, #308]	@ (8004548 <HAL_GPIO_Init+0x328>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00d      	beq.n	8004432 <HAL_GPIO_Init+0x212>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a4c      	ldr	r2, [pc, #304]	@ (800454c <HAL_GPIO_Init+0x32c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d007      	beq.n	800442e <HAL_GPIO_Init+0x20e>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a4b      	ldr	r2, [pc, #300]	@ (8004550 <HAL_GPIO_Init+0x330>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d101      	bne.n	800442a <HAL_GPIO_Init+0x20a>
 8004426:	2307      	movs	r3, #7
 8004428:	e00e      	b.n	8004448 <HAL_GPIO_Init+0x228>
 800442a:	2308      	movs	r3, #8
 800442c:	e00c      	b.n	8004448 <HAL_GPIO_Init+0x228>
 800442e:	2306      	movs	r3, #6
 8004430:	e00a      	b.n	8004448 <HAL_GPIO_Init+0x228>
 8004432:	2305      	movs	r3, #5
 8004434:	e008      	b.n	8004448 <HAL_GPIO_Init+0x228>
 8004436:	2304      	movs	r3, #4
 8004438:	e006      	b.n	8004448 <HAL_GPIO_Init+0x228>
 800443a:	2303      	movs	r3, #3
 800443c:	e004      	b.n	8004448 <HAL_GPIO_Init+0x228>
 800443e:	2302      	movs	r3, #2
 8004440:	e002      	b.n	8004448 <HAL_GPIO_Init+0x228>
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <HAL_GPIO_Init+0x228>
 8004446:	2300      	movs	r3, #0
 8004448:	69fa      	ldr	r2, [r7, #28]
 800444a:	f002 0203 	and.w	r2, r2, #3
 800444e:	0092      	lsls	r2, r2, #2
 8004450:	4093      	lsls	r3, r2
 8004452:	69ba      	ldr	r2, [r7, #24]
 8004454:	4313      	orrs	r3, r2
 8004456:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004458:	4935      	ldr	r1, [pc, #212]	@ (8004530 <HAL_GPIO_Init+0x310>)
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	089b      	lsrs	r3, r3, #2
 800445e:	3302      	adds	r3, #2
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004466:	4b3b      	ldr	r3, [pc, #236]	@ (8004554 <HAL_GPIO_Init+0x334>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	43db      	mvns	r3, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4013      	ands	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d003      	beq.n	800448a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004482:	69ba      	ldr	r2, [r7, #24]
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800448a:	4a32      	ldr	r2, [pc, #200]	@ (8004554 <HAL_GPIO_Init+0x334>)
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004490:	4b30      	ldr	r3, [pc, #192]	@ (8004554 <HAL_GPIO_Init+0x334>)
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	43db      	mvns	r3, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4013      	ands	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80044b4:	4a27      	ldr	r2, [pc, #156]	@ (8004554 <HAL_GPIO_Init+0x334>)
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80044ba:	4b26      	ldr	r3, [pc, #152]	@ (8004554 <HAL_GPIO_Init+0x334>)
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	43db      	mvns	r3, r3
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4013      	ands	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80044de:	4a1d      	ldr	r2, [pc, #116]	@ (8004554 <HAL_GPIO_Init+0x334>)
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004554 <HAL_GPIO_Init+0x334>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	43db      	mvns	r3, r3
 80044ee:	69ba      	ldr	r2, [r7, #24]
 80044f0:	4013      	ands	r3, r2
 80044f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004500:	69ba      	ldr	r2, [r7, #24]
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004508:	4a12      	ldr	r2, [pc, #72]	@ (8004554 <HAL_GPIO_Init+0x334>)
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	3301      	adds	r3, #1
 8004512:	61fb      	str	r3, [r7, #28]
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	2b0f      	cmp	r3, #15
 8004518:	f67f ae90 	bls.w	800423c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800451c:	bf00      	nop
 800451e:	bf00      	nop
 8004520:	3724      	adds	r7, #36	@ 0x24
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40023800 	.word	0x40023800
 8004530:	40013800 	.word	0x40013800
 8004534:	40020000 	.word	0x40020000
 8004538:	40020400 	.word	0x40020400
 800453c:	40020800 	.word	0x40020800
 8004540:	40020c00 	.word	0x40020c00
 8004544:	40021000 	.word	0x40021000
 8004548:	40021400 	.word	0x40021400
 800454c:	40021800 	.word	0x40021800
 8004550:	40021c00 	.word	0x40021c00
 8004554:	40013c00 	.word	0x40013c00

08004558 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	460b      	mov	r3, r1
 8004562:	807b      	strh	r3, [r7, #2]
 8004564:	4613      	mov	r3, r2
 8004566:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004568:	787b      	ldrb	r3, [r7, #1]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800456e:	887a      	ldrh	r2, [r7, #2]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004574:	e003      	b.n	800457e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004576:	887b      	ldrh	r3, [r7, #2]
 8004578:	041a      	lsls	r2, r3, #16
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	619a      	str	r2, [r3, #24]
}
 800457e:	bf00      	nop
 8004580:	370c      	adds	r7, #12
 8004582:	46bd      	mov	sp, r7
 8004584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004588:	4770      	bx	lr
	...

0800458c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e12b      	b.n	80047f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7fd fa26 	bl	8001a04 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2224      	movs	r2, #36	@ 0x24
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0201 	bic.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80045f0:	f001 fd46 	bl	8006080 <HAL_RCC_GetPCLK1Freq>
 80045f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	4a81      	ldr	r2, [pc, #516]	@ (8004800 <HAL_I2C_Init+0x274>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d807      	bhi.n	8004610 <HAL_I2C_Init+0x84>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	4a80      	ldr	r2, [pc, #512]	@ (8004804 <HAL_I2C_Init+0x278>)
 8004604:	4293      	cmp	r3, r2
 8004606:	bf94      	ite	ls
 8004608:	2301      	movls	r3, #1
 800460a:	2300      	movhi	r3, #0
 800460c:	b2db      	uxtb	r3, r3
 800460e:	e006      	b.n	800461e <HAL_I2C_Init+0x92>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4a7d      	ldr	r2, [pc, #500]	@ (8004808 <HAL_I2C_Init+0x27c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	bf94      	ite	ls
 8004618:	2301      	movls	r3, #1
 800461a:	2300      	movhi	r3, #0
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e0e7      	b.n	80047f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	4a78      	ldr	r2, [pc, #480]	@ (800480c <HAL_I2C_Init+0x280>)
 800462a:	fba2 2303 	umull	r2, r3, r2, r3
 800462e:	0c9b      	lsrs	r3, r3, #18
 8004630:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	4a6a      	ldr	r2, [pc, #424]	@ (8004800 <HAL_I2C_Init+0x274>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d802      	bhi.n	8004660 <HAL_I2C_Init+0xd4>
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	3301      	adds	r3, #1
 800465e:	e009      	b.n	8004674 <HAL_I2C_Init+0xe8>
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004666:	fb02 f303 	mul.w	r3, r2, r3
 800466a:	4a69      	ldr	r2, [pc, #420]	@ (8004810 <HAL_I2C_Init+0x284>)
 800466c:	fba2 2303 	umull	r2, r3, r2, r3
 8004670:	099b      	lsrs	r3, r3, #6
 8004672:	3301      	adds	r3, #1
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	430b      	orrs	r3, r1
 800467a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004686:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	495c      	ldr	r1, [pc, #368]	@ (8004800 <HAL_I2C_Init+0x274>)
 8004690:	428b      	cmp	r3, r1
 8004692:	d819      	bhi.n	80046c8 <HAL_I2C_Init+0x13c>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	1e59      	subs	r1, r3, #1
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	005b      	lsls	r3, r3, #1
 800469e:	fbb1 f3f3 	udiv	r3, r1, r3
 80046a2:	1c59      	adds	r1, r3, #1
 80046a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80046a8:	400b      	ands	r3, r1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <HAL_I2C_Init+0x138>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	1e59      	subs	r1, r3, #1
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	005b      	lsls	r3, r3, #1
 80046b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80046bc:	3301      	adds	r3, #1
 80046be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c2:	e051      	b.n	8004768 <HAL_I2C_Init+0x1dc>
 80046c4:	2304      	movs	r3, #4
 80046c6:	e04f      	b.n	8004768 <HAL_I2C_Init+0x1dc>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d111      	bne.n	80046f4 <HAL_I2C_Init+0x168>
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	1e58      	subs	r0, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6859      	ldr	r1, [r3, #4]
 80046d8:	460b      	mov	r3, r1
 80046da:	005b      	lsls	r3, r3, #1
 80046dc:	440b      	add	r3, r1
 80046de:	fbb0 f3f3 	udiv	r3, r0, r3
 80046e2:	3301      	adds	r3, #1
 80046e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	bf0c      	ite	eq
 80046ec:	2301      	moveq	r3, #1
 80046ee:	2300      	movne	r3, #0
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	e012      	b.n	800471a <HAL_I2C_Init+0x18e>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	1e58      	subs	r0, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6859      	ldr	r1, [r3, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	0099      	lsls	r1, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	fbb0 f3f3 	udiv	r3, r0, r3
 800470a:	3301      	adds	r3, #1
 800470c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004710:	2b00      	cmp	r3, #0
 8004712:	bf0c      	ite	eq
 8004714:	2301      	moveq	r3, #1
 8004716:	2300      	movne	r3, #0
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <HAL_I2C_Init+0x196>
 800471e:	2301      	movs	r3, #1
 8004720:	e022      	b.n	8004768 <HAL_I2C_Init+0x1dc>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10e      	bne.n	8004748 <HAL_I2C_Init+0x1bc>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	1e58      	subs	r0, r3, #1
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6859      	ldr	r1, [r3, #4]
 8004732:	460b      	mov	r3, r1
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	440b      	add	r3, r1
 8004738:	fbb0 f3f3 	udiv	r3, r0, r3
 800473c:	3301      	adds	r3, #1
 800473e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004742:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004746:	e00f      	b.n	8004768 <HAL_I2C_Init+0x1dc>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	1e58      	subs	r0, r3, #1
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6859      	ldr	r1, [r3, #4]
 8004750:	460b      	mov	r3, r1
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	0099      	lsls	r1, r3, #2
 8004758:	440b      	add	r3, r1
 800475a:	fbb0 f3f3 	udiv	r3, r0, r3
 800475e:	3301      	adds	r3, #1
 8004760:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004764:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	6809      	ldr	r1, [r1, #0]
 800476c:	4313      	orrs	r3, r2
 800476e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69da      	ldr	r2, [r3, #28]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004796:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	6911      	ldr	r1, [r2, #16]
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	68d2      	ldr	r2, [r2, #12]
 80047a2:	4311      	orrs	r1, r2
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6812      	ldr	r2, [r2, #0]
 80047a8:	430b      	orrs	r3, r1
 80047aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	695a      	ldr	r2, [r3, #20]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	431a      	orrs	r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	430a      	orrs	r2, r1
 80047c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0201 	orr.w	r2, r2, #1
 80047d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	000186a0 	.word	0x000186a0
 8004804:	001e847f 	.word	0x001e847f
 8004808:	003d08ff 	.word	0x003d08ff
 800480c:	431bde83 	.word	0x431bde83
 8004810:	10624dd3 	.word	0x10624dd3

08004814 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af02      	add	r7, sp, #8
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	607a      	str	r2, [r7, #4]
 800481e:	461a      	mov	r2, r3
 8004820:	460b      	mov	r3, r1
 8004822:	817b      	strh	r3, [r7, #10]
 8004824:	4613      	mov	r3, r2
 8004826:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004828:	f7fe fb1c 	bl	8002e64 <HAL_GetTick>
 800482c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b20      	cmp	r3, #32
 8004838:	f040 80e0 	bne.w	80049fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	2319      	movs	r3, #25
 8004842:	2201      	movs	r2, #1
 8004844:	4970      	ldr	r1, [pc, #448]	@ (8004a08 <HAL_I2C_Master_Transmit+0x1f4>)
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 fc64 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 800484c:	4603      	mov	r3, r0
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004852:	2302      	movs	r3, #2
 8004854:	e0d3      	b.n	80049fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800485c:	2b01      	cmp	r3, #1
 800485e:	d101      	bne.n	8004864 <HAL_I2C_Master_Transmit+0x50>
 8004860:	2302      	movs	r3, #2
 8004862:	e0cc      	b.n	80049fe <HAL_I2C_Master_Transmit+0x1ea>
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	2b01      	cmp	r3, #1
 8004878:	d007      	beq.n	800488a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f042 0201 	orr.w	r2, r2, #1
 8004888:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004898:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2221      	movs	r2, #33	@ 0x21
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2210      	movs	r2, #16
 80048a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	687a      	ldr	r2, [r7, #4]
 80048b4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	893a      	ldrh	r2, [r7, #8]
 80048ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4a50      	ldr	r2, [pc, #320]	@ (8004a0c <HAL_I2C_Master_Transmit+0x1f8>)
 80048ca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80048cc:	8979      	ldrh	r1, [r7, #10]
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	6a3a      	ldr	r2, [r7, #32]
 80048d2:	68f8      	ldr	r0, [r7, #12]
 80048d4:	f000 face 	bl	8004e74 <I2C_MasterRequestWrite>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d001      	beq.n	80048e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e08d      	b.n	80049fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048e2:	2300      	movs	r3, #0
 80048e4:	613b      	str	r3, [r7, #16]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	613b      	str	r3, [r7, #16]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	613b      	str	r3, [r7, #16]
 80048f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80048f8:	e066      	b.n	80049c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048fa:	697a      	ldr	r2, [r7, #20]
 80048fc:	6a39      	ldr	r1, [r7, #32]
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 fd22 	bl	8005348 <I2C_WaitOnTXEFlagUntilTimeout>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00d      	beq.n	8004926 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490e:	2b04      	cmp	r3, #4
 8004910:	d107      	bne.n	8004922 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004920:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e06b      	b.n	80049fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492a:	781a      	ldrb	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004940:	b29b      	uxth	r3, r3
 8004942:	3b01      	subs	r3, #1
 8004944:	b29a      	uxth	r2, r3
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800494e:	3b01      	subs	r3, #1
 8004950:	b29a      	uxth	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b04      	cmp	r3, #4
 8004962:	d11b      	bne.n	800499c <HAL_I2C_Master_Transmit+0x188>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004968:	2b00      	cmp	r3, #0
 800496a:	d017      	beq.n	800499c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004970:	781a      	ldrb	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004986:	b29b      	uxth	r3, r3
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004994:	3b01      	subs	r3, #1
 8004996:	b29a      	uxth	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	6a39      	ldr	r1, [r7, #32]
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 fd19 	bl	80053d8 <I2C_WaitOnBTFFlagUntilTimeout>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00d      	beq.n	80049c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b0:	2b04      	cmp	r3, #4
 80049b2:	d107      	bne.n	80049c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e01a      	b.n	80049fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d194      	bne.n	80048fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2220      	movs	r2, #32
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80049f8:	2300      	movs	r3, #0
 80049fa:	e000      	b.n	80049fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80049fc:	2302      	movs	r3, #2
  }
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3718      	adds	r7, #24
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	00100002 	.word	0x00100002
 8004a0c:	ffff0000 	.word	0xffff0000

08004a10 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08c      	sub	sp, #48	@ 0x30
 8004a14:	af02      	add	r7, sp, #8
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	607a      	str	r2, [r7, #4]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	817b      	strh	r3, [r7, #10]
 8004a20:	4613      	mov	r3, r2
 8004a22:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a24:	f7fe fa1e 	bl	8002e64 <HAL_GetTick>
 8004a28:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b20      	cmp	r3, #32
 8004a34:	f040 8217 	bne.w	8004e66 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	2319      	movs	r3, #25
 8004a3e:	2201      	movs	r2, #1
 8004a40:	497c      	ldr	r1, [pc, #496]	@ (8004c34 <HAL_I2C_Master_Receive+0x224>)
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 fb66 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004a4e:	2302      	movs	r3, #2
 8004a50:	e20a      	b.n	8004e68 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d101      	bne.n	8004a60 <HAL_I2C_Master_Receive+0x50>
 8004a5c:	2302      	movs	r3, #2
 8004a5e:	e203      	b.n	8004e68 <HAL_I2C_Master_Receive+0x458>
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d007      	beq.n	8004a86 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f042 0201 	orr.w	r2, r2, #1
 8004a84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a94:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2222      	movs	r2, #34	@ 0x22
 8004a9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2210      	movs	r2, #16
 8004aa2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	893a      	ldrh	r2, [r7, #8]
 8004ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	4a5c      	ldr	r2, [pc, #368]	@ (8004c38 <HAL_I2C_Master_Receive+0x228>)
 8004ac6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ac8:	8979      	ldrh	r1, [r7, #10]
 8004aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 fa52 	bl	8004f78 <I2C_MasterRequestRead>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e1c4      	b.n	8004e68 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d113      	bne.n	8004b0e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	623b      	str	r3, [r7, #32]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	623b      	str	r3, [r7, #32]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	623b      	str	r3, [r7, #32]
 8004afa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b0a:	601a      	str	r2, [r3, #0]
 8004b0c:	e198      	b.n	8004e40 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d11b      	bne.n	8004b4e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b26:	2300      	movs	r3, #0
 8004b28:	61fb      	str	r3, [r7, #28]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	61fb      	str	r3, [r7, #28]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	61fb      	str	r3, [r7, #28]
 8004b3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b4a:	601a      	str	r2, [r3, #0]
 8004b4c:	e178      	b.n	8004e40 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b52:	2b02      	cmp	r3, #2
 8004b54:	d11b      	bne.n	8004b8e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b76:	2300      	movs	r3, #0
 8004b78:	61bb      	str	r3, [r7, #24]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	695b      	ldr	r3, [r3, #20]
 8004b80:	61bb      	str	r3, [r7, #24]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	61bb      	str	r3, [r7, #24]
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	e158      	b.n	8004e40 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b9c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	695b      	ldr	r3, [r3, #20]
 8004ba8:	617b      	str	r3, [r7, #20]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004bb4:	e144      	b.n	8004e40 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bba:	2b03      	cmp	r3, #3
 8004bbc:	f200 80f1 	bhi.w	8004da2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d123      	bne.n	8004c10 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004bcc:	68f8      	ldr	r0, [r7, #12]
 8004bce:	f000 fc4b 	bl	8005468 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d001      	beq.n	8004bdc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e145      	b.n	8004e68 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691a      	ldr	r2, [r3, #16]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bf8:	3b01      	subs	r3, #1
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	3b01      	subs	r3, #1
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c0e:	e117      	b.n	8004e40 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d14e      	bne.n	8004cb6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1a:	9300      	str	r3, [sp, #0]
 8004c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1e:	2200      	movs	r2, #0
 8004c20:	4906      	ldr	r1, [pc, #24]	@ (8004c3c <HAL_I2C_Master_Receive+0x22c>)
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 fa76 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d008      	beq.n	8004c40 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e11a      	b.n	8004e68 <HAL_I2C_Master_Receive+0x458>
 8004c32:	bf00      	nop
 8004c34:	00100002 	.word	0x00100002
 8004c38:	ffff0000 	.word	0xffff0000
 8004c3c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691a      	ldr	r2, [r3, #16]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5a:	b2d2      	uxtb	r2, r2
 8004c5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	691a      	ldr	r2, [r3, #16]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	3b01      	subs	r3, #1
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004cb4:	e0c4      	b.n	8004e40 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	496c      	ldr	r1, [pc, #432]	@ (8004e70 <HAL_I2C_Master_Receive+0x460>)
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 fa27 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e0cb      	b.n	8004e68 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691a      	ldr	r2, [r3, #16]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d14:	9300      	str	r3, [sp, #0]
 8004d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d18:	2200      	movs	r2, #0
 8004d1a:	4955      	ldr	r1, [pc, #340]	@ (8004e70 <HAL_I2C_Master_Receive+0x460>)
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f000 f9f9 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d001      	beq.n	8004d2c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e09d      	b.n	8004e68 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	691a      	ldr	r2, [r3, #16]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29a      	uxth	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004da0:	e04e      	b.n	8004e40 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004da4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004da6:	68f8      	ldr	r0, [r7, #12]
 8004da8:	f000 fb5e 	bl	8005468 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e058      	b.n	8004e68 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc8:	1c5a      	adds	r2, r3, #1
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dde:	b29b      	uxth	r3, r3
 8004de0:	3b01      	subs	r3, #1
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	d124      	bne.n	8004e40 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dfa:	2b03      	cmp	r3, #3
 8004dfc:	d107      	bne.n	8004e0e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e0c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	691a      	ldr	r2, [r3, #16]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e18:	b2d2      	uxtb	r2, r2
 8004e1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e20:	1c5a      	adds	r2, r3, #1
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	b29a      	uxth	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	b29a      	uxth	r2, r3
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f47f aeb6 	bne.w	8004bb6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004e62:	2300      	movs	r3, #0
 8004e64:	e000      	b.n	8004e68 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004e66:	2302      	movs	r3, #2
  }
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3728      	adds	r7, #40	@ 0x28
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	00010004 	.word	0x00010004

08004e74 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b088      	sub	sp, #32
 8004e78:	af02      	add	r7, sp, #8
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	607a      	str	r2, [r7, #4]
 8004e7e:	603b      	str	r3, [r7, #0]
 8004e80:	460b      	mov	r3, r1
 8004e82:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e88:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d006      	beq.n	8004e9e <I2C_MasterRequestWrite+0x2a>
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d003      	beq.n	8004e9e <I2C_MasterRequestWrite+0x2a>
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e9c:	d108      	bne.n	8004eb0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	e00b      	b.n	8004ec8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb4:	2b12      	cmp	r3, #18
 8004eb6:	d107      	bne.n	8004ec8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ec6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f000 f91d 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00d      	beq.n	8004efc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004eea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eee:	d103      	bne.n	8004ef8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ef6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e035      	b.n	8004f68 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f04:	d108      	bne.n	8004f18 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004f06:	897b      	ldrh	r3, [r7, #10]
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004f14:	611a      	str	r2, [r3, #16]
 8004f16:	e01b      	b.n	8004f50 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004f18:	897b      	ldrh	r3, [r7, #10]
 8004f1a:	11db      	asrs	r3, r3, #7
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	f003 0306 	and.w	r3, r3, #6
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	f063 030f 	orn	r3, r3, #15
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	490e      	ldr	r1, [pc, #56]	@ (8004f70 <I2C_MasterRequestWrite+0xfc>)
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f000 f966 	bl	8005208 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e010      	b.n	8004f68 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f46:	897b      	ldrh	r3, [r7, #10]
 8004f48:	b2da      	uxtb	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	4907      	ldr	r1, [pc, #28]	@ (8004f74 <I2C_MasterRequestWrite+0x100>)
 8004f56:	68f8      	ldr	r0, [r7, #12]
 8004f58:	f000 f956 	bl	8005208 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3718      	adds	r7, #24
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	00010008 	.word	0x00010008
 8004f74:	00010002 	.word	0x00010002

08004f78 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b088      	sub	sp, #32
 8004f7c:	af02      	add	r7, sp, #8
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	607a      	str	r2, [r7, #4]
 8004f82:	603b      	str	r3, [r7, #0]
 8004f84:	460b      	mov	r3, r1
 8004f86:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f9c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	d006      	beq.n	8004fb2 <I2C_MasterRequestRead+0x3a>
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d003      	beq.n	8004fb2 <I2C_MasterRequestRead+0x3a>
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004fb0:	d108      	bne.n	8004fc4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	e00b      	b.n	8004fdc <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fc8:	2b11      	cmp	r3, #17
 8004fca:	d107      	bne.n	8004fdc <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	9300      	str	r3, [sp, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 f893 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00d      	beq.n	8005010 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ffe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005002:	d103      	bne.n	800500c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800500a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e079      	b.n	8005104 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	691b      	ldr	r3, [r3, #16]
 8005014:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005018:	d108      	bne.n	800502c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800501a:	897b      	ldrh	r3, [r7, #10]
 800501c:	b2db      	uxtb	r3, r3
 800501e:	f043 0301 	orr.w	r3, r3, #1
 8005022:	b2da      	uxtb	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	611a      	str	r2, [r3, #16]
 800502a:	e05f      	b.n	80050ec <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800502c:	897b      	ldrh	r3, [r7, #10]
 800502e:	11db      	asrs	r3, r3, #7
 8005030:	b2db      	uxtb	r3, r3
 8005032:	f003 0306 	and.w	r3, r3, #6
 8005036:	b2db      	uxtb	r3, r3
 8005038:	f063 030f 	orn	r3, r3, #15
 800503c:	b2da      	uxtb	r2, r3
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	4930      	ldr	r1, [pc, #192]	@ (800510c <I2C_MasterRequestRead+0x194>)
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 f8dc 	bl	8005208 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e054      	b.n	8005104 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800505a:	897b      	ldrh	r3, [r7, #10]
 800505c:	b2da      	uxtb	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	4929      	ldr	r1, [pc, #164]	@ (8005110 <I2C_MasterRequestRead+0x198>)
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f000 f8cc 	bl	8005208 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e044      	b.n	8005104 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800507a:	2300      	movs	r3, #0
 800507c:	613b      	str	r3, [r7, #16]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	613b      	str	r3, [r7, #16]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	613b      	str	r3, [r7, #16]
 800508e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800509e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f831 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d00d      	beq.n	80050d4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050c6:	d103      	bne.n	80050d0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050ce:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e017      	b.n	8005104 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80050d4:	897b      	ldrh	r3, [r7, #10]
 80050d6:	11db      	asrs	r3, r3, #7
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	f003 0306 	and.w	r3, r3, #6
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	f063 030e 	orn	r3, r3, #14
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	687a      	ldr	r2, [r7, #4]
 80050f0:	4907      	ldr	r1, [pc, #28]	@ (8005110 <I2C_MasterRequestRead+0x198>)
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f000 f888 	bl	8005208 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e000      	b.n	8005104 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3718      	adds	r7, #24
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}
 800510c:	00010008 	.word	0x00010008
 8005110:	00010002 	.word	0x00010002

08005114 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	4613      	mov	r3, r2
 8005122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005124:	e048      	b.n	80051b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800512c:	d044      	beq.n	80051b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800512e:	f7fd fe99 	bl	8002e64 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d302      	bcc.n	8005144 <I2C_WaitOnFlagUntilTimeout+0x30>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d139      	bne.n	80051b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	0c1b      	lsrs	r3, r3, #16
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b01      	cmp	r3, #1
 800514c:	d10d      	bne.n	800516a <I2C_WaitOnFlagUntilTimeout+0x56>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	43da      	mvns	r2, r3
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	4013      	ands	r3, r2
 800515a:	b29b      	uxth	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	bf0c      	ite	eq
 8005160:	2301      	moveq	r3, #1
 8005162:	2300      	movne	r3, #0
 8005164:	b2db      	uxtb	r3, r3
 8005166:	461a      	mov	r2, r3
 8005168:	e00c      	b.n	8005184 <I2C_WaitOnFlagUntilTimeout+0x70>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	43da      	mvns	r2, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	4013      	ands	r3, r2
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	bf0c      	ite	eq
 800517c:	2301      	moveq	r3, #1
 800517e:	2300      	movne	r3, #0
 8005180:	b2db      	uxtb	r3, r3
 8005182:	461a      	mov	r2, r3
 8005184:	79fb      	ldrb	r3, [r7, #7]
 8005186:	429a      	cmp	r2, r3
 8005188:	d116      	bne.n	80051b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a4:	f043 0220 	orr.w	r2, r3, #32
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e023      	b.n	8005200 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	0c1b      	lsrs	r3, r3, #16
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d10d      	bne.n	80051de <I2C_WaitOnFlagUntilTimeout+0xca>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	43da      	mvns	r2, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	4013      	ands	r3, r2
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	bf0c      	ite	eq
 80051d4:	2301      	moveq	r3, #1
 80051d6:	2300      	movne	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	461a      	mov	r2, r3
 80051dc:	e00c      	b.n	80051f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	43da      	mvns	r2, r3
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	4013      	ands	r3, r2
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	bf0c      	ite	eq
 80051f0:	2301      	moveq	r3, #1
 80051f2:	2300      	movne	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	461a      	mov	r2, r3
 80051f8:	79fb      	ldrb	r3, [r7, #7]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d093      	beq.n	8005126 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005216:	e071      	b.n	80052fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005226:	d123      	bne.n	8005270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005236:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005240:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525c:	f043 0204 	orr.w	r2, r3, #4
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e067      	b.n	8005340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005276:	d041      	beq.n	80052fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005278:	f7fd fdf4 	bl	8002e64 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	429a      	cmp	r2, r3
 8005286:	d302      	bcc.n	800528e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d136      	bne.n	80052fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	0c1b      	lsrs	r3, r3, #16
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b01      	cmp	r3, #1
 8005296:	d10c      	bne.n	80052b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	43da      	mvns	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4013      	ands	r3, r2
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	bf14      	ite	ne
 80052aa:	2301      	movne	r3, #1
 80052ac:	2300      	moveq	r3, #0
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	e00b      	b.n	80052ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	43da      	mvns	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	4013      	ands	r3, r2
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bf14      	ite	ne
 80052c4:	2301      	movne	r3, #1
 80052c6:	2300      	moveq	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d016      	beq.n	80052fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e8:	f043 0220 	orr.w	r2, r3, #32
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e021      	b.n	8005340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	0c1b      	lsrs	r3, r3, #16
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b01      	cmp	r3, #1
 8005304:	d10c      	bne.n	8005320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	43da      	mvns	r2, r3
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	4013      	ands	r3, r2
 8005312:	b29b      	uxth	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	bf14      	ite	ne
 8005318:	2301      	movne	r3, #1
 800531a:	2300      	moveq	r3, #0
 800531c:	b2db      	uxtb	r3, r3
 800531e:	e00b      	b.n	8005338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	43da      	mvns	r2, r3
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4013      	ands	r3, r2
 800532c:	b29b      	uxth	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	bf14      	ite	ne
 8005332:	2301      	movne	r3, #1
 8005334:	2300      	moveq	r3, #0
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	f47f af6d 	bne.w	8005218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005354:	e034      	b.n	80053c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 f8e3 	bl	8005522 <I2C_IsAcknowledgeFailed>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e034      	b.n	80053d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800536c:	d028      	beq.n	80053c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536e:	f7fd fd79 	bl	8002e64 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	429a      	cmp	r2, r3
 800537c:	d302      	bcc.n	8005384 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d11d      	bne.n	80053c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800538e:	2b80      	cmp	r3, #128	@ 0x80
 8005390:	d016      	beq.n	80053c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2220      	movs	r2, #32
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ac:	f043 0220 	orr.w	r2, r3, #32
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e007      	b.n	80053d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ca:	2b80      	cmp	r3, #128	@ 0x80
 80053cc:	d1c3      	bne.n	8005356 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053e4:	e034      	b.n	8005450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 f89b 	bl	8005522 <I2C_IsAcknowledgeFailed>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e034      	b.n	8005460 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053fc:	d028      	beq.n	8005450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053fe:	f7fd fd31 	bl	8002e64 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	429a      	cmp	r2, r3
 800540c:	d302      	bcc.n	8005414 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d11d      	bne.n	8005450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	2b04      	cmp	r3, #4
 8005420:	d016      	beq.n	8005450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2220      	movs	r2, #32
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543c:	f043 0220 	orr.w	r2, r3, #32
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e007      	b.n	8005460 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b04      	cmp	r3, #4
 800545c:	d1c3      	bne.n	80053e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005474:	e049      	b.n	800550a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	f003 0310 	and.w	r3, r3, #16
 8005480:	2b10      	cmp	r3, #16
 8005482:	d119      	bne.n	80054b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f06f 0210 	mvn.w	r2, #16
 800548c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2220      	movs	r2, #32
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e030      	b.n	800551a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b8:	f7fd fcd4 	bl	8002e64 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d302      	bcc.n	80054ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d11d      	bne.n	800550a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d8:	2b40      	cmp	r3, #64	@ 0x40
 80054da:	d016      	beq.n	800550a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f6:	f043 0220 	orr.w	r2, r3, #32
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e007      	b.n	800551a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005514:	2b40      	cmp	r3, #64	@ 0x40
 8005516:	d1ae      	bne.n	8005476 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005538:	d11b      	bne.n	8005572 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005542:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2220      	movs	r2, #32
 800554e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555e:	f043 0204 	orr.w	r2, r3, #4
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e000      	b.n	8005574 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b086      	sub	sp, #24
 8005584:	af02      	add	r7, sp, #8
 8005586:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e101      	b.n	8005796 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d106      	bne.n	80055b2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7fd fb7d 	bl	8002cac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2203      	movs	r2, #3
 80055b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80055c0:	d102      	bne.n	80055c8 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f001 fd7f 	bl	80070d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	7c1a      	ldrb	r2, [r3, #16]
 80055da:	f88d 2000 	strb.w	r2, [sp]
 80055de:	3304      	adds	r3, #4
 80055e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055e2:	f001 fd11 	bl	8007008 <USB_CoreInit>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d005      	beq.n	80055f8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e0ce      	b.n	8005796 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2100      	movs	r1, #0
 80055fe:	4618      	mov	r0, r3
 8005600:	f001 fd77 	bl	80070f2 <USB_SetCurrentMode>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d005      	beq.n	8005616 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2202      	movs	r2, #2
 800560e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e0bf      	b.n	8005796 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005616:	2300      	movs	r3, #0
 8005618:	73fb      	strb	r3, [r7, #15]
 800561a:	e04a      	b.n	80056b2 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800561c:	7bfa      	ldrb	r2, [r7, #15]
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	4613      	mov	r3, r2
 8005622:	00db      	lsls	r3, r3, #3
 8005624:	4413      	add	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	440b      	add	r3, r1
 800562a:	3315      	adds	r3, #21
 800562c:	2201      	movs	r2, #1
 800562e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005630:	7bfa      	ldrb	r2, [r7, #15]
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	4613      	mov	r3, r2
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	4413      	add	r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	440b      	add	r3, r1
 800563e:	3314      	adds	r3, #20
 8005640:	7bfa      	ldrb	r2, [r7, #15]
 8005642:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005644:	7bfa      	ldrb	r2, [r7, #15]
 8005646:	7bfb      	ldrb	r3, [r7, #15]
 8005648:	b298      	uxth	r0, r3
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	4613      	mov	r3, r2
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	4413      	add	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	332e      	adds	r3, #46	@ 0x2e
 8005658:	4602      	mov	r2, r0
 800565a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800565c:	7bfa      	ldrb	r2, [r7, #15]
 800565e:	6879      	ldr	r1, [r7, #4]
 8005660:	4613      	mov	r3, r2
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	4413      	add	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	440b      	add	r3, r1
 800566a:	3318      	adds	r3, #24
 800566c:	2200      	movs	r2, #0
 800566e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005670:	7bfa      	ldrb	r2, [r7, #15]
 8005672:	6879      	ldr	r1, [r7, #4]
 8005674:	4613      	mov	r3, r2
 8005676:	00db      	lsls	r3, r3, #3
 8005678:	4413      	add	r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	440b      	add	r3, r1
 800567e:	331c      	adds	r3, #28
 8005680:	2200      	movs	r2, #0
 8005682:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005684:	7bfa      	ldrb	r2, [r7, #15]
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	4613      	mov	r3, r2
 800568a:	00db      	lsls	r3, r3, #3
 800568c:	4413      	add	r3, r2
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	440b      	add	r3, r1
 8005692:	3320      	adds	r3, #32
 8005694:	2200      	movs	r2, #0
 8005696:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005698:	7bfa      	ldrb	r2, [r7, #15]
 800569a:	6879      	ldr	r1, [r7, #4]
 800569c:	4613      	mov	r3, r2
 800569e:	00db      	lsls	r3, r3, #3
 80056a0:	4413      	add	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	440b      	add	r3, r1
 80056a6:	3324      	adds	r3, #36	@ 0x24
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	3301      	adds	r3, #1
 80056b0:	73fb      	strb	r3, [r7, #15]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	791b      	ldrb	r3, [r3, #4]
 80056b6:	7bfa      	ldrb	r2, [r7, #15]
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d3af      	bcc.n	800561c <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056bc:	2300      	movs	r3, #0
 80056be:	73fb      	strb	r3, [r7, #15]
 80056c0:	e044      	b.n	800574c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80056c2:	7bfa      	ldrb	r2, [r7, #15]
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	4613      	mov	r3, r2
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	4413      	add	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	440b      	add	r3, r1
 80056d0:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80056d4:	2200      	movs	r2, #0
 80056d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80056d8:	7bfa      	ldrb	r2, [r7, #15]
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	4613      	mov	r3, r2
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	4413      	add	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	440b      	add	r3, r1
 80056e6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80056ea:	7bfa      	ldrb	r2, [r7, #15]
 80056ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80056ee:	7bfa      	ldrb	r2, [r7, #15]
 80056f0:	6879      	ldr	r1, [r7, #4]
 80056f2:	4613      	mov	r3, r2
 80056f4:	00db      	lsls	r3, r3, #3
 80056f6:	4413      	add	r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	440b      	add	r3, r1
 80056fc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005700:	2200      	movs	r2, #0
 8005702:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005704:	7bfa      	ldrb	r2, [r7, #15]
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	4613      	mov	r3, r2
 800570a:	00db      	lsls	r3, r3, #3
 800570c:	4413      	add	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	440b      	add	r3, r1
 8005712:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005716:	2200      	movs	r2, #0
 8005718:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800571a:	7bfa      	ldrb	r2, [r7, #15]
 800571c:	6879      	ldr	r1, [r7, #4]
 800571e:	4613      	mov	r3, r2
 8005720:	00db      	lsls	r3, r3, #3
 8005722:	4413      	add	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	440b      	add	r3, r1
 8005728:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800572c:	2200      	movs	r2, #0
 800572e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005730:	7bfa      	ldrb	r2, [r7, #15]
 8005732:	6879      	ldr	r1, [r7, #4]
 8005734:	4613      	mov	r3, r2
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	4413      	add	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	440b      	add	r3, r1
 800573e:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005742:	2200      	movs	r2, #0
 8005744:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005746:	7bfb      	ldrb	r3, [r7, #15]
 8005748:	3301      	adds	r3, #1
 800574a:	73fb      	strb	r3, [r7, #15]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	791b      	ldrb	r3, [r3, #4]
 8005750:	7bfa      	ldrb	r2, [r7, #15]
 8005752:	429a      	cmp	r2, r3
 8005754:	d3b5      	bcc.n	80056c2 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	7c1a      	ldrb	r2, [r3, #16]
 800575e:	f88d 2000 	strb.w	r2, [sp]
 8005762:	3304      	adds	r3, #4
 8005764:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005766:	f001 fd11 	bl	800718c <USB_DevInit>
 800576a:	4603      	mov	r3, r0
 800576c:	2b00      	cmp	r3, #0
 800576e:	d005      	beq.n	800577c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e00c      	b.n	8005796 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4618      	mov	r0, r3
 8005790:	f001 fed9 	bl	8007546 <USB_DevDisconnect>

  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
	...

080057a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e267      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d075      	beq.n	80058aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80057be:	4b88      	ldr	r3, [pc, #544]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f003 030c 	and.w	r3, r3, #12
 80057c6:	2b04      	cmp	r3, #4
 80057c8:	d00c      	beq.n	80057e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057ca:	4b85      	ldr	r3, [pc, #532]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80057d2:	2b08      	cmp	r3, #8
 80057d4:	d112      	bne.n	80057fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057d6:	4b82      	ldr	r3, [pc, #520]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80057e2:	d10b      	bne.n	80057fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057e4:	4b7e      	ldr	r3, [pc, #504]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d05b      	beq.n	80058a8 <HAL_RCC_OscConfig+0x108>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d157      	bne.n	80058a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e242      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005804:	d106      	bne.n	8005814 <HAL_RCC_OscConfig+0x74>
 8005806:	4b76      	ldr	r3, [pc, #472]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a75      	ldr	r2, [pc, #468]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 800580c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	e01d      	b.n	8005850 <HAL_RCC_OscConfig+0xb0>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800581c:	d10c      	bne.n	8005838 <HAL_RCC_OscConfig+0x98>
 800581e:	4b70      	ldr	r3, [pc, #448]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a6f      	ldr	r2, [pc, #444]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005824:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005828:	6013      	str	r3, [r2, #0]
 800582a:	4b6d      	ldr	r3, [pc, #436]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a6c      	ldr	r2, [pc, #432]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	e00b      	b.n	8005850 <HAL_RCC_OscConfig+0xb0>
 8005838:	4b69      	ldr	r3, [pc, #420]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a68      	ldr	r2, [pc, #416]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 800583e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005842:	6013      	str	r3, [r2, #0]
 8005844:	4b66      	ldr	r3, [pc, #408]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a65      	ldr	r2, [pc, #404]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 800584a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800584e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d013      	beq.n	8005880 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005858:	f7fd fb04 	bl	8002e64 <HAL_GetTick>
 800585c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800585e:	e008      	b.n	8005872 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005860:	f7fd fb00 	bl	8002e64 <HAL_GetTick>
 8005864:	4602      	mov	r2, r0
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	2b64      	cmp	r3, #100	@ 0x64
 800586c:	d901      	bls.n	8005872 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800586e:	2303      	movs	r3, #3
 8005870:	e207      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005872:	4b5b      	ldr	r3, [pc, #364]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0f0      	beq.n	8005860 <HAL_RCC_OscConfig+0xc0>
 800587e:	e014      	b.n	80058aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005880:	f7fd faf0 	bl	8002e64 <HAL_GetTick>
 8005884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005886:	e008      	b.n	800589a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005888:	f7fd faec 	bl	8002e64 <HAL_GetTick>
 800588c:	4602      	mov	r2, r0
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	1ad3      	subs	r3, r2, r3
 8005892:	2b64      	cmp	r3, #100	@ 0x64
 8005894:	d901      	bls.n	800589a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005896:	2303      	movs	r3, #3
 8005898:	e1f3      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800589a:	4b51      	ldr	r3, [pc, #324]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1f0      	bne.n	8005888 <HAL_RCC_OscConfig+0xe8>
 80058a6:	e000      	b.n	80058aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d063      	beq.n	800597e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80058b6:	4b4a      	ldr	r3, [pc, #296]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	f003 030c 	and.w	r3, r3, #12
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00b      	beq.n	80058da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058c2:	4b47      	ldr	r3, [pc, #284]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80058ca:	2b08      	cmp	r3, #8
 80058cc:	d11c      	bne.n	8005908 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058ce:	4b44      	ldr	r3, [pc, #272]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d116      	bne.n	8005908 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058da:	4b41      	ldr	r3, [pc, #260]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d005      	beq.n	80058f2 <HAL_RCC_OscConfig+0x152>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d001      	beq.n	80058f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e1c7      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058f2:	4b3b      	ldr	r3, [pc, #236]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	4937      	ldr	r1, [pc, #220]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005902:	4313      	orrs	r3, r2
 8005904:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005906:	e03a      	b.n	800597e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d020      	beq.n	8005952 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005910:	4b34      	ldr	r3, [pc, #208]	@ (80059e4 <HAL_RCC_OscConfig+0x244>)
 8005912:	2201      	movs	r2, #1
 8005914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005916:	f7fd faa5 	bl	8002e64 <HAL_GetTick>
 800591a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800591c:	e008      	b.n	8005930 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800591e:	f7fd faa1 	bl	8002e64 <HAL_GetTick>
 8005922:	4602      	mov	r2, r0
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	1ad3      	subs	r3, r2, r3
 8005928:	2b02      	cmp	r3, #2
 800592a:	d901      	bls.n	8005930 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e1a8      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005930:	4b2b      	ldr	r3, [pc, #172]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d0f0      	beq.n	800591e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800593c:	4b28      	ldr	r3, [pc, #160]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	691b      	ldr	r3, [r3, #16]
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	4925      	ldr	r1, [pc, #148]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 800594c:	4313      	orrs	r3, r2
 800594e:	600b      	str	r3, [r1, #0]
 8005950:	e015      	b.n	800597e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005952:	4b24      	ldr	r3, [pc, #144]	@ (80059e4 <HAL_RCC_OscConfig+0x244>)
 8005954:	2200      	movs	r2, #0
 8005956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005958:	f7fd fa84 	bl	8002e64 <HAL_GetTick>
 800595c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800595e:	e008      	b.n	8005972 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005960:	f7fd fa80 	bl	8002e64 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b02      	cmp	r3, #2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e187      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005972:	4b1b      	ldr	r3, [pc, #108]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1f0      	bne.n	8005960 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0308 	and.w	r3, r3, #8
 8005986:	2b00      	cmp	r3, #0
 8005988:	d036      	beq.n	80059f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d016      	beq.n	80059c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005992:	4b15      	ldr	r3, [pc, #84]	@ (80059e8 <HAL_RCC_OscConfig+0x248>)
 8005994:	2201      	movs	r2, #1
 8005996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005998:	f7fd fa64 	bl	8002e64 <HAL_GetTick>
 800599c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800599e:	e008      	b.n	80059b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059a0:	f7fd fa60 	bl	8002e64 <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e167      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059b2:	4b0b      	ldr	r3, [pc, #44]	@ (80059e0 <HAL_RCC_OscConfig+0x240>)
 80059b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d0f0      	beq.n	80059a0 <HAL_RCC_OscConfig+0x200>
 80059be:	e01b      	b.n	80059f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059c0:	4b09      	ldr	r3, [pc, #36]	@ (80059e8 <HAL_RCC_OscConfig+0x248>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059c6:	f7fd fa4d 	bl	8002e64 <HAL_GetTick>
 80059ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059cc:	e00e      	b.n	80059ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059ce:	f7fd fa49 	bl	8002e64 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d907      	bls.n	80059ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e150      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
 80059e0:	40023800 	.word	0x40023800
 80059e4:	42470000 	.word	0x42470000
 80059e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059ec:	4b88      	ldr	r3, [pc, #544]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 80059ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059f0:	f003 0302 	and.w	r3, r3, #2
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d1ea      	bne.n	80059ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0304 	and.w	r3, r3, #4
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 8097 	beq.w	8005b34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a06:	2300      	movs	r3, #0
 8005a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a0a:	4b81      	ldr	r3, [pc, #516]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10f      	bne.n	8005a36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a16:	2300      	movs	r3, #0
 8005a18:	60bb      	str	r3, [r7, #8]
 8005a1a:	4b7d      	ldr	r3, [pc, #500]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1e:	4a7c      	ldr	r2, [pc, #496]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a24:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a26:	4b7a      	ldr	r3, [pc, #488]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a2e:	60bb      	str	r3, [r7, #8]
 8005a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a32:	2301      	movs	r3, #1
 8005a34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a36:	4b77      	ldr	r3, [pc, #476]	@ (8005c14 <HAL_RCC_OscConfig+0x474>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d118      	bne.n	8005a74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a42:	4b74      	ldr	r3, [pc, #464]	@ (8005c14 <HAL_RCC_OscConfig+0x474>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a73      	ldr	r2, [pc, #460]	@ (8005c14 <HAL_RCC_OscConfig+0x474>)
 8005a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a4e:	f7fd fa09 	bl	8002e64 <HAL_GetTick>
 8005a52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a54:	e008      	b.n	8005a68 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a56:	f7fd fa05 	bl	8002e64 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d901      	bls.n	8005a68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e10c      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a68:	4b6a      	ldr	r3, [pc, #424]	@ (8005c14 <HAL_RCC_OscConfig+0x474>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d0f0      	beq.n	8005a56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d106      	bne.n	8005a8a <HAL_RCC_OscConfig+0x2ea>
 8005a7c:	4b64      	ldr	r3, [pc, #400]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a80:	4a63      	ldr	r2, [pc, #396]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005a82:	f043 0301 	orr.w	r3, r3, #1
 8005a86:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a88:	e01c      	b.n	8005ac4 <HAL_RCC_OscConfig+0x324>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	2b05      	cmp	r3, #5
 8005a90:	d10c      	bne.n	8005aac <HAL_RCC_OscConfig+0x30c>
 8005a92:	4b5f      	ldr	r3, [pc, #380]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a96:	4a5e      	ldr	r2, [pc, #376]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005a98:	f043 0304 	orr.w	r3, r3, #4
 8005a9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005a9e:	4b5c      	ldr	r3, [pc, #368]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aa2:	4a5b      	ldr	r2, [pc, #364]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005aa4:	f043 0301 	orr.w	r3, r3, #1
 8005aa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005aaa:	e00b      	b.n	8005ac4 <HAL_RCC_OscConfig+0x324>
 8005aac:	4b58      	ldr	r3, [pc, #352]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ab0:	4a57      	ldr	r2, [pc, #348]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005ab2:	f023 0301 	bic.w	r3, r3, #1
 8005ab6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ab8:	4b55      	ldr	r3, [pc, #340]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005abc:	4a54      	ldr	r2, [pc, #336]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005abe:	f023 0304 	bic.w	r3, r3, #4
 8005ac2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d015      	beq.n	8005af8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005acc:	f7fd f9ca 	bl	8002e64 <HAL_GetTick>
 8005ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ad2:	e00a      	b.n	8005aea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ad4:	f7fd f9c6 	bl	8002e64 <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e0cb      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005aea:	4b49      	ldr	r3, [pc, #292]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0ee      	beq.n	8005ad4 <HAL_RCC_OscConfig+0x334>
 8005af6:	e014      	b.n	8005b22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005af8:	f7fd f9b4 	bl	8002e64 <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005afe:	e00a      	b.n	8005b16 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b00:	f7fd f9b0 	bl	8002e64 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e0b5      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b16:	4b3e      	ldr	r3, [pc, #248]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1ee      	bne.n	8005b00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b22:	7dfb      	ldrb	r3, [r7, #23]
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d105      	bne.n	8005b34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b28:	4b39      	ldr	r3, [pc, #228]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b2c:	4a38      	ldr	r2, [pc, #224]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005b2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 80a1 	beq.w	8005c80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b3e:	4b34      	ldr	r3, [pc, #208]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f003 030c 	and.w	r3, r3, #12
 8005b46:	2b08      	cmp	r3, #8
 8005b48:	d05c      	beq.n	8005c04 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d141      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b52:	4b31      	ldr	r3, [pc, #196]	@ (8005c18 <HAL_RCC_OscConfig+0x478>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b58:	f7fd f984 	bl	8002e64 <HAL_GetTick>
 8005b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b5e:	e008      	b.n	8005b72 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b60:	f7fd f980 	bl	8002e64 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d901      	bls.n	8005b72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	e087      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b72:	4b27      	ldr	r3, [pc, #156]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1f0      	bne.n	8005b60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	69da      	ldr	r2, [r3, #28]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6a1b      	ldr	r3, [r3, #32]
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8c:	019b      	lsls	r3, r3, #6
 8005b8e:	431a      	orrs	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b94:	085b      	lsrs	r3, r3, #1
 8005b96:	3b01      	subs	r3, #1
 8005b98:	041b      	lsls	r3, r3, #16
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ba0:	061b      	lsls	r3, r3, #24
 8005ba2:	491b      	ldr	r1, [pc, #108]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8005c18 <HAL_RCC_OscConfig+0x478>)
 8005baa:	2201      	movs	r2, #1
 8005bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bae:	f7fd f959 	bl	8002e64 <HAL_GetTick>
 8005bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bb4:	e008      	b.n	8005bc8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bb6:	f7fd f955 	bl	8002e64 <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e05c      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bc8:	4b11      	ldr	r3, [pc, #68]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0f0      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x416>
 8005bd4:	e054      	b.n	8005c80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bd6:	4b10      	ldr	r3, [pc, #64]	@ (8005c18 <HAL_RCC_OscConfig+0x478>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bdc:	f7fd f942 	bl	8002e64 <HAL_GetTick>
 8005be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005be4:	f7fd f93e 	bl	8002e64 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e045      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bf6:	4b06      	ldr	r3, [pc, #24]	@ (8005c10 <HAL_RCC_OscConfig+0x470>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d1f0      	bne.n	8005be4 <HAL_RCC_OscConfig+0x444>
 8005c02:	e03d      	b.n	8005c80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	699b      	ldr	r3, [r3, #24]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d107      	bne.n	8005c1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e038      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
 8005c10:	40023800 	.word	0x40023800
 8005c14:	40007000 	.word	0x40007000
 8005c18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c1c:	4b1b      	ldr	r3, [pc, #108]	@ (8005c8c <HAL_RCC_OscConfig+0x4ec>)
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d028      	beq.n	8005c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d121      	bne.n	8005c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d11a      	bne.n	8005c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c46:	68fa      	ldr	r2, [r7, #12]
 8005c48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d111      	bne.n	8005c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c62:	085b      	lsrs	r3, r3, #1
 8005c64:	3b01      	subs	r3, #1
 8005c66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d107      	bne.n	8005c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d001      	beq.n	8005c80 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e000      	b.n	8005c82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3718      	adds	r7, #24
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	40023800 	.word	0x40023800

08005c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b084      	sub	sp, #16
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	e0cc      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005ca4:	4b68      	ldr	r3, [pc, #416]	@ (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d90c      	bls.n	8005ccc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cb2:	4b65      	ldr	r3, [pc, #404]	@ (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005cb4:	683a      	ldr	r2, [r7, #0]
 8005cb6:	b2d2      	uxtb	r2, r2
 8005cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cba:	4b63      	ldr	r3, [pc, #396]	@ (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0307 	and.w	r3, r3, #7
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d001      	beq.n	8005ccc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	e0b8      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f003 0302 	and.w	r3, r3, #2
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d020      	beq.n	8005d1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0304 	and.w	r3, r3, #4
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d005      	beq.n	8005cf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005ce4:	4b59      	ldr	r3, [pc, #356]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	4a58      	ldr	r2, [pc, #352]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005cea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005cee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0308 	and.w	r3, r3, #8
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d005      	beq.n	8005d08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cfc:	4b53      	ldr	r3, [pc, #332]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	4a52      	ldr	r2, [pc, #328]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005d06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d08:	4b50      	ldr	r3, [pc, #320]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	494d      	ldr	r1, [pc, #308]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d044      	beq.n	8005db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d107      	bne.n	8005d3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d2e:	4b47      	ldr	r3, [pc, #284]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d119      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e07f      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d003      	beq.n	8005d4e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	d107      	bne.n	8005d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d4e:	4b3f      	ldr	r3, [pc, #252]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d109      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e06f      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d5e:	4b3b      	ldr	r3, [pc, #236]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d101      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e067      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d6e:	4b37      	ldr	r3, [pc, #220]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d70:	689b      	ldr	r3, [r3, #8]
 8005d72:	f023 0203 	bic.w	r2, r3, #3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	4934      	ldr	r1, [pc, #208]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d80:	f7fd f870 	bl	8002e64 <HAL_GetTick>
 8005d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d86:	e00a      	b.n	8005d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d88:	f7fd f86c 	bl	8002e64 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d901      	bls.n	8005d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d9a:	2303      	movs	r3, #3
 8005d9c:	e04f      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d9e:	4b2b      	ldr	r3, [pc, #172]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f003 020c 	and.w	r2, r3, #12
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d1eb      	bne.n	8005d88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005db0:	4b25      	ldr	r3, [pc, #148]	@ (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0307 	and.w	r3, r3, #7
 8005db8:	683a      	ldr	r2, [r7, #0]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d20c      	bcs.n	8005dd8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dbe:	4b22      	ldr	r3, [pc, #136]	@ (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005dc6:	4b20      	ldr	r3, [pc, #128]	@ (8005e48 <HAL_RCC_ClockConfig+0x1b8>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0307 	and.w	r3, r3, #7
 8005dce:	683a      	ldr	r2, [r7, #0]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d001      	beq.n	8005dd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e032      	b.n	8005e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f003 0304 	and.w	r3, r3, #4
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d008      	beq.n	8005df6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005de4:	4b19      	ldr	r3, [pc, #100]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	4916      	ldr	r1, [pc, #88]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005df2:	4313      	orrs	r3, r2
 8005df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0308 	and.w	r3, r3, #8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d009      	beq.n	8005e16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e02:	4b12      	ldr	r3, [pc, #72]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	490e      	ldr	r1, [pc, #56]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e16:	f000 f821 	bl	8005e5c <HAL_RCC_GetSysClockFreq>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e4c <HAL_RCC_ClockConfig+0x1bc>)
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	091b      	lsrs	r3, r3, #4
 8005e22:	f003 030f 	and.w	r3, r3, #15
 8005e26:	490a      	ldr	r1, [pc, #40]	@ (8005e50 <HAL_RCC_ClockConfig+0x1c0>)
 8005e28:	5ccb      	ldrb	r3, [r1, r3]
 8005e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e2e:	4a09      	ldr	r2, [pc, #36]	@ (8005e54 <HAL_RCC_ClockConfig+0x1c4>)
 8005e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005e32:	4b09      	ldr	r3, [pc, #36]	@ (8005e58 <HAL_RCC_ClockConfig+0x1c8>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fc ffd0 	bl	8002ddc <HAL_InitTick>

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	40023c00 	.word	0x40023c00
 8005e4c:	40023800 	.word	0x40023800
 8005e50:	0800a418 	.word	0x0800a418
 8005e54:	20000040 	.word	0x20000040
 8005e58:	20000044 	.word	0x20000044

08005e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e60:	b094      	sub	sp, #80	@ 0x50
 8005e62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e74:	4b79      	ldr	r3, [pc, #484]	@ (800605c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f003 030c 	and.w	r3, r3, #12
 8005e7c:	2b08      	cmp	r3, #8
 8005e7e:	d00d      	beq.n	8005e9c <HAL_RCC_GetSysClockFreq+0x40>
 8005e80:	2b08      	cmp	r3, #8
 8005e82:	f200 80e1 	bhi.w	8006048 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d002      	beq.n	8005e90 <HAL_RCC_GetSysClockFreq+0x34>
 8005e8a:	2b04      	cmp	r3, #4
 8005e8c:	d003      	beq.n	8005e96 <HAL_RCC_GetSysClockFreq+0x3a>
 8005e8e:	e0db      	b.n	8006048 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e90:	4b73      	ldr	r3, [pc, #460]	@ (8006060 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e94:	e0db      	b.n	800604e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e96:	4b73      	ldr	r3, [pc, #460]	@ (8006064 <HAL_RCC_GetSysClockFreq+0x208>)
 8005e98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005e9a:	e0d8      	b.n	800604e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e9c:	4b6f      	ldr	r3, [pc, #444]	@ (800605c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ea4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ea6:	4b6d      	ldr	r3, [pc, #436]	@ (800605c <HAL_RCC_GetSysClockFreq+0x200>)
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d063      	beq.n	8005f7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005eb2:	4b6a      	ldr	r3, [pc, #424]	@ (800605c <HAL_RCC_GetSysClockFreq+0x200>)
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	099b      	lsrs	r3, r3, #6
 8005eb8:	2200      	movs	r2, #0
 8005eba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ebc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005eca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005ece:	4622      	mov	r2, r4
 8005ed0:	462b      	mov	r3, r5
 8005ed2:	f04f 0000 	mov.w	r0, #0
 8005ed6:	f04f 0100 	mov.w	r1, #0
 8005eda:	0159      	lsls	r1, r3, #5
 8005edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ee0:	0150      	lsls	r0, r2, #5
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	1a51      	subs	r1, r2, r1
 8005eea:	6139      	str	r1, [r7, #16]
 8005eec:	4629      	mov	r1, r5
 8005eee:	eb63 0301 	sbc.w	r3, r3, r1
 8005ef2:	617b      	str	r3, [r7, #20]
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	f04f 0300 	mov.w	r3, #0
 8005efc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f00:	4659      	mov	r1, fp
 8005f02:	018b      	lsls	r3, r1, #6
 8005f04:	4651      	mov	r1, sl
 8005f06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f0a:	4651      	mov	r1, sl
 8005f0c:	018a      	lsls	r2, r1, #6
 8005f0e:	4651      	mov	r1, sl
 8005f10:	ebb2 0801 	subs.w	r8, r2, r1
 8005f14:	4659      	mov	r1, fp
 8005f16:	eb63 0901 	sbc.w	r9, r3, r1
 8005f1a:	f04f 0200 	mov.w	r2, #0
 8005f1e:	f04f 0300 	mov.w	r3, #0
 8005f22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f2e:	4690      	mov	r8, r2
 8005f30:	4699      	mov	r9, r3
 8005f32:	4623      	mov	r3, r4
 8005f34:	eb18 0303 	adds.w	r3, r8, r3
 8005f38:	60bb      	str	r3, [r7, #8]
 8005f3a:	462b      	mov	r3, r5
 8005f3c:	eb49 0303 	adc.w	r3, r9, r3
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	f04f 0200 	mov.w	r2, #0
 8005f46:	f04f 0300 	mov.w	r3, #0
 8005f4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f4e:	4629      	mov	r1, r5
 8005f50:	024b      	lsls	r3, r1, #9
 8005f52:	4621      	mov	r1, r4
 8005f54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f58:	4621      	mov	r1, r4
 8005f5a:	024a      	lsls	r2, r1, #9
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	4619      	mov	r1, r3
 8005f60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f62:	2200      	movs	r2, #0
 8005f64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f6c:	f7fa fe3c 	bl	8000be8 <__aeabi_uldivmod>
 8005f70:	4602      	mov	r2, r0
 8005f72:	460b      	mov	r3, r1
 8005f74:	4613      	mov	r3, r2
 8005f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f78:	e058      	b.n	800602c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f7a:	4b38      	ldr	r3, [pc, #224]	@ (800605c <HAL_RCC_GetSysClockFreq+0x200>)
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	099b      	lsrs	r3, r3, #6
 8005f80:	2200      	movs	r2, #0
 8005f82:	4618      	mov	r0, r3
 8005f84:	4611      	mov	r1, r2
 8005f86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005f8a:	623b      	str	r3, [r7, #32]
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005f94:	4642      	mov	r2, r8
 8005f96:	464b      	mov	r3, r9
 8005f98:	f04f 0000 	mov.w	r0, #0
 8005f9c:	f04f 0100 	mov.w	r1, #0
 8005fa0:	0159      	lsls	r1, r3, #5
 8005fa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fa6:	0150      	lsls	r0, r2, #5
 8005fa8:	4602      	mov	r2, r0
 8005faa:	460b      	mov	r3, r1
 8005fac:	4641      	mov	r1, r8
 8005fae:	ebb2 0a01 	subs.w	sl, r2, r1
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005fb8:	f04f 0200 	mov.w	r2, #0
 8005fbc:	f04f 0300 	mov.w	r3, #0
 8005fc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005fc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005fc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005fcc:	ebb2 040a 	subs.w	r4, r2, sl
 8005fd0:	eb63 050b 	sbc.w	r5, r3, fp
 8005fd4:	f04f 0200 	mov.w	r2, #0
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	00eb      	lsls	r3, r5, #3
 8005fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fe2:	00e2      	lsls	r2, r4, #3
 8005fe4:	4614      	mov	r4, r2
 8005fe6:	461d      	mov	r5, r3
 8005fe8:	4643      	mov	r3, r8
 8005fea:	18e3      	adds	r3, r4, r3
 8005fec:	603b      	str	r3, [r7, #0]
 8005fee:	464b      	mov	r3, r9
 8005ff0:	eb45 0303 	adc.w	r3, r5, r3
 8005ff4:	607b      	str	r3, [r7, #4]
 8005ff6:	f04f 0200 	mov.w	r2, #0
 8005ffa:	f04f 0300 	mov.w	r3, #0
 8005ffe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006002:	4629      	mov	r1, r5
 8006004:	028b      	lsls	r3, r1, #10
 8006006:	4621      	mov	r1, r4
 8006008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800600c:	4621      	mov	r1, r4
 800600e:	028a      	lsls	r2, r1, #10
 8006010:	4610      	mov	r0, r2
 8006012:	4619      	mov	r1, r3
 8006014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006016:	2200      	movs	r2, #0
 8006018:	61bb      	str	r3, [r7, #24]
 800601a:	61fa      	str	r2, [r7, #28]
 800601c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006020:	f7fa fde2 	bl	8000be8 <__aeabi_uldivmod>
 8006024:	4602      	mov	r2, r0
 8006026:	460b      	mov	r3, r1
 8006028:	4613      	mov	r3, r2
 800602a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800602c:	4b0b      	ldr	r3, [pc, #44]	@ (800605c <HAL_RCC_GetSysClockFreq+0x200>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	0c1b      	lsrs	r3, r3, #16
 8006032:	f003 0303 	and.w	r3, r3, #3
 8006036:	3301      	adds	r3, #1
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800603c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800603e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006040:	fbb2 f3f3 	udiv	r3, r2, r3
 8006044:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006046:	e002      	b.n	800604e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006048:	4b05      	ldr	r3, [pc, #20]	@ (8006060 <HAL_RCC_GetSysClockFreq+0x204>)
 800604a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800604c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800604e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006050:	4618      	mov	r0, r3
 8006052:	3750      	adds	r7, #80	@ 0x50
 8006054:	46bd      	mov	sp, r7
 8006056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800605a:	bf00      	nop
 800605c:	40023800 	.word	0x40023800
 8006060:	00f42400 	.word	0x00f42400
 8006064:	007a1200 	.word	0x007a1200

08006068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006068:	b480      	push	{r7}
 800606a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800606c:	4b03      	ldr	r3, [pc, #12]	@ (800607c <HAL_RCC_GetHCLKFreq+0x14>)
 800606e:	681b      	ldr	r3, [r3, #0]
}
 8006070:	4618      	mov	r0, r3
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	20000040 	.word	0x20000040

08006080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006084:	f7ff fff0 	bl	8006068 <HAL_RCC_GetHCLKFreq>
 8006088:	4602      	mov	r2, r0
 800608a:	4b05      	ldr	r3, [pc, #20]	@ (80060a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	0a9b      	lsrs	r3, r3, #10
 8006090:	f003 0307 	and.w	r3, r3, #7
 8006094:	4903      	ldr	r1, [pc, #12]	@ (80060a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006096:	5ccb      	ldrb	r3, [r1, r3]
 8006098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800609c:	4618      	mov	r0, r3
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	40023800 	.word	0x40023800
 80060a4:	0800a428 	.word	0x0800a428

080060a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80060ac:	f7ff ffdc 	bl	8006068 <HAL_RCC_GetHCLKFreq>
 80060b0:	4602      	mov	r2, r0
 80060b2:	4b05      	ldr	r3, [pc, #20]	@ (80060c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	0b5b      	lsrs	r3, r3, #13
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	4903      	ldr	r1, [pc, #12]	@ (80060cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80060be:	5ccb      	ldrb	r3, [r1, r3]
 80060c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	bd80      	pop	{r7, pc}
 80060c8:	40023800 	.word	0x40023800
 80060cc:	0800a428 	.word	0x0800a428

080060d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d101      	bne.n	80060e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	e041      	b.n	8006166 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d106      	bne.n	80060fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f7fc fc66 	bl	80029c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2202      	movs	r2, #2
 8006100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3304      	adds	r3, #4
 800610c:	4619      	mov	r1, r3
 800610e:	4610      	mov	r0, r2
 8006110:	f000 f9b8 	bl	8006484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2201      	movs	r2, #1
 8006148:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2201      	movs	r2, #1
 8006150:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2201      	movs	r2, #1
 8006158:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2201      	movs	r2, #1
 8006160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
	...

08006170 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d109      	bne.n	8006194 <HAL_TIM_PWM_Start+0x24>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006186:	b2db      	uxtb	r3, r3
 8006188:	2b01      	cmp	r3, #1
 800618a:	bf14      	ite	ne
 800618c:	2301      	movne	r3, #1
 800618e:	2300      	moveq	r3, #0
 8006190:	b2db      	uxtb	r3, r3
 8006192:	e022      	b.n	80061da <HAL_TIM_PWM_Start+0x6a>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2b04      	cmp	r3, #4
 8006198:	d109      	bne.n	80061ae <HAL_TIM_PWM_Start+0x3e>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80061a0:	b2db      	uxtb	r3, r3
 80061a2:	2b01      	cmp	r3, #1
 80061a4:	bf14      	ite	ne
 80061a6:	2301      	movne	r3, #1
 80061a8:	2300      	moveq	r3, #0
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	e015      	b.n	80061da <HAL_TIM_PWM_Start+0x6a>
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	2b08      	cmp	r3, #8
 80061b2:	d109      	bne.n	80061c8 <HAL_TIM_PWM_Start+0x58>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b01      	cmp	r3, #1
 80061be:	bf14      	ite	ne
 80061c0:	2301      	movne	r3, #1
 80061c2:	2300      	moveq	r3, #0
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	e008      	b.n	80061da <HAL_TIM_PWM_Start+0x6a>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	bf14      	ite	ne
 80061d4:	2301      	movne	r3, #1
 80061d6:	2300      	moveq	r3, #0
 80061d8:	b2db      	uxtb	r3, r3
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e07c      	b.n	80062dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d104      	bne.n	80061f2 <HAL_TIM_PWM_Start+0x82>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2202      	movs	r2, #2
 80061ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061f0:	e013      	b.n	800621a <HAL_TIM_PWM_Start+0xaa>
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	2b04      	cmp	r3, #4
 80061f6:	d104      	bne.n	8006202 <HAL_TIM_PWM_Start+0x92>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2202      	movs	r2, #2
 80061fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006200:	e00b      	b.n	800621a <HAL_TIM_PWM_Start+0xaa>
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b08      	cmp	r3, #8
 8006206:	d104      	bne.n	8006212 <HAL_TIM_PWM_Start+0xa2>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2202      	movs	r2, #2
 800620c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006210:	e003      	b.n	800621a <HAL_TIM_PWM_Start+0xaa>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2202      	movs	r2, #2
 8006216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	2201      	movs	r2, #1
 8006220:	6839      	ldr	r1, [r7, #0]
 8006222:	4618      	mov	r0, r3
 8006224:	f000 fb8a 	bl	800693c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	4a2d      	ldr	r2, [pc, #180]	@ (80062e4 <HAL_TIM_PWM_Start+0x174>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d004      	beq.n	800623c <HAL_TIM_PWM_Start+0xcc>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a2c      	ldr	r2, [pc, #176]	@ (80062e8 <HAL_TIM_PWM_Start+0x178>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d101      	bne.n	8006240 <HAL_TIM_PWM_Start+0xd0>
 800623c:	2301      	movs	r3, #1
 800623e:	e000      	b.n	8006242 <HAL_TIM_PWM_Start+0xd2>
 8006240:	2300      	movs	r3, #0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d007      	beq.n	8006256 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006254:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a22      	ldr	r2, [pc, #136]	@ (80062e4 <HAL_TIM_PWM_Start+0x174>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d022      	beq.n	80062a6 <HAL_TIM_PWM_Start+0x136>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006268:	d01d      	beq.n	80062a6 <HAL_TIM_PWM_Start+0x136>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a1f      	ldr	r2, [pc, #124]	@ (80062ec <HAL_TIM_PWM_Start+0x17c>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d018      	beq.n	80062a6 <HAL_TIM_PWM_Start+0x136>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a1d      	ldr	r2, [pc, #116]	@ (80062f0 <HAL_TIM_PWM_Start+0x180>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d013      	beq.n	80062a6 <HAL_TIM_PWM_Start+0x136>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a1c      	ldr	r2, [pc, #112]	@ (80062f4 <HAL_TIM_PWM_Start+0x184>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d00e      	beq.n	80062a6 <HAL_TIM_PWM_Start+0x136>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a16      	ldr	r2, [pc, #88]	@ (80062e8 <HAL_TIM_PWM_Start+0x178>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d009      	beq.n	80062a6 <HAL_TIM_PWM_Start+0x136>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a18      	ldr	r2, [pc, #96]	@ (80062f8 <HAL_TIM_PWM_Start+0x188>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d004      	beq.n	80062a6 <HAL_TIM_PWM_Start+0x136>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a16      	ldr	r2, [pc, #88]	@ (80062fc <HAL_TIM_PWM_Start+0x18c>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d111      	bne.n	80062ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f003 0307 	and.w	r3, r3, #7
 80062b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b06      	cmp	r3, #6
 80062b6:	d010      	beq.n	80062da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 0201 	orr.w	r2, r2, #1
 80062c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062c8:	e007      	b.n	80062da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f042 0201 	orr.w	r2, r2, #1
 80062d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	40010000 	.word	0x40010000
 80062e8:	40010400 	.word	0x40010400
 80062ec:	40000400 	.word	0x40000400
 80062f0:	40000800 	.word	0x40000800
 80062f4:	40000c00 	.word	0x40000c00
 80062f8:	40014000 	.word	0x40014000
 80062fc:	40001800 	.word	0x40001800

08006300 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800630c:	2300      	movs	r3, #0
 800630e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006316:	2b01      	cmp	r3, #1
 8006318:	d101      	bne.n	800631e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800631a:	2302      	movs	r3, #2
 800631c:	e0ae      	b.n	800647c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2b0c      	cmp	r3, #12
 800632a:	f200 809f 	bhi.w	800646c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800632e:	a201      	add	r2, pc, #4	@ (adr r2, 8006334 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006334:	08006369 	.word	0x08006369
 8006338:	0800646d 	.word	0x0800646d
 800633c:	0800646d 	.word	0x0800646d
 8006340:	0800646d 	.word	0x0800646d
 8006344:	080063a9 	.word	0x080063a9
 8006348:	0800646d 	.word	0x0800646d
 800634c:	0800646d 	.word	0x0800646d
 8006350:	0800646d 	.word	0x0800646d
 8006354:	080063eb 	.word	0x080063eb
 8006358:	0800646d 	.word	0x0800646d
 800635c:	0800646d 	.word	0x0800646d
 8006360:	0800646d 	.word	0x0800646d
 8006364:	0800642b 	.word	0x0800642b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68b9      	ldr	r1, [r7, #8]
 800636e:	4618      	mov	r0, r3
 8006370:	f000 f934 	bl	80065dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	699a      	ldr	r2, [r3, #24]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f042 0208 	orr.w	r2, r2, #8
 8006382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	699a      	ldr	r2, [r3, #24]
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 0204 	bic.w	r2, r2, #4
 8006392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	6999      	ldr	r1, [r3, #24]
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	691a      	ldr	r2, [r3, #16]
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	619a      	str	r2, [r3, #24]
      break;
 80063a6:	e064      	b.n	8006472 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68b9      	ldr	r1, [r7, #8]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f000 f984 	bl	80066bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	699a      	ldr	r2, [r3, #24]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699a      	ldr	r2, [r3, #24]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6999      	ldr	r1, [r3, #24]
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	021a      	lsls	r2, r3, #8
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	430a      	orrs	r2, r1
 80063e6:	619a      	str	r2, [r3, #24]
      break;
 80063e8:	e043      	b.n	8006472 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68b9      	ldr	r1, [r7, #8]
 80063f0:	4618      	mov	r0, r3
 80063f2:	f000 f9d9 	bl	80067a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	69da      	ldr	r2, [r3, #28]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f042 0208 	orr.w	r2, r2, #8
 8006404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	69da      	ldr	r2, [r3, #28]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 0204 	bic.w	r2, r2, #4
 8006414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	69d9      	ldr	r1, [r3, #28]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	691a      	ldr	r2, [r3, #16]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	430a      	orrs	r2, r1
 8006426:	61da      	str	r2, [r3, #28]
      break;
 8006428:	e023      	b.n	8006472 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68b9      	ldr	r1, [r7, #8]
 8006430:	4618      	mov	r0, r3
 8006432:	f000 fa2d 	bl	8006890 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	69da      	ldr	r2, [r3, #28]
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006444:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	69da      	ldr	r2, [r3, #28]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006454:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	69d9      	ldr	r1, [r3, #28]
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	021a      	lsls	r2, r3, #8
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	430a      	orrs	r2, r1
 8006468:	61da      	str	r2, [r3, #28]
      break;
 800646a:	e002      	b.n	8006472 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	75fb      	strb	r3, [r7, #23]
      break;
 8006470:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800647a:	7dfb      	ldrb	r3, [r7, #23]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3718      	adds	r7, #24
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006484:	b480      	push	{r7}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a46      	ldr	r2, [pc, #280]	@ (80065b0 <TIM_Base_SetConfig+0x12c>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d013      	beq.n	80064c4 <TIM_Base_SetConfig+0x40>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064a2:	d00f      	beq.n	80064c4 <TIM_Base_SetConfig+0x40>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a43      	ldr	r2, [pc, #268]	@ (80065b4 <TIM_Base_SetConfig+0x130>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d00b      	beq.n	80064c4 <TIM_Base_SetConfig+0x40>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a42      	ldr	r2, [pc, #264]	@ (80065b8 <TIM_Base_SetConfig+0x134>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d007      	beq.n	80064c4 <TIM_Base_SetConfig+0x40>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a41      	ldr	r2, [pc, #260]	@ (80065bc <TIM_Base_SetConfig+0x138>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d003      	beq.n	80064c4 <TIM_Base_SetConfig+0x40>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a40      	ldr	r2, [pc, #256]	@ (80065c0 <TIM_Base_SetConfig+0x13c>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d108      	bne.n	80064d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a35      	ldr	r2, [pc, #212]	@ (80065b0 <TIM_Base_SetConfig+0x12c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d02b      	beq.n	8006536 <TIM_Base_SetConfig+0xb2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064e4:	d027      	beq.n	8006536 <TIM_Base_SetConfig+0xb2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a32      	ldr	r2, [pc, #200]	@ (80065b4 <TIM_Base_SetConfig+0x130>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d023      	beq.n	8006536 <TIM_Base_SetConfig+0xb2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a31      	ldr	r2, [pc, #196]	@ (80065b8 <TIM_Base_SetConfig+0x134>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d01f      	beq.n	8006536 <TIM_Base_SetConfig+0xb2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a30      	ldr	r2, [pc, #192]	@ (80065bc <TIM_Base_SetConfig+0x138>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d01b      	beq.n	8006536 <TIM_Base_SetConfig+0xb2>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a2f      	ldr	r2, [pc, #188]	@ (80065c0 <TIM_Base_SetConfig+0x13c>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d017      	beq.n	8006536 <TIM_Base_SetConfig+0xb2>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a2e      	ldr	r2, [pc, #184]	@ (80065c4 <TIM_Base_SetConfig+0x140>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d013      	beq.n	8006536 <TIM_Base_SetConfig+0xb2>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a2d      	ldr	r2, [pc, #180]	@ (80065c8 <TIM_Base_SetConfig+0x144>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00f      	beq.n	8006536 <TIM_Base_SetConfig+0xb2>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a2c      	ldr	r2, [pc, #176]	@ (80065cc <TIM_Base_SetConfig+0x148>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d00b      	beq.n	8006536 <TIM_Base_SetConfig+0xb2>
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a2b      	ldr	r2, [pc, #172]	@ (80065d0 <TIM_Base_SetConfig+0x14c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d007      	beq.n	8006536 <TIM_Base_SetConfig+0xb2>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a2a      	ldr	r2, [pc, #168]	@ (80065d4 <TIM_Base_SetConfig+0x150>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d003      	beq.n	8006536 <TIM_Base_SetConfig+0xb2>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	4a29      	ldr	r2, [pc, #164]	@ (80065d8 <TIM_Base_SetConfig+0x154>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d108      	bne.n	8006548 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800653c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	4313      	orrs	r3, r2
 8006546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	695b      	ldr	r3, [r3, #20]
 8006552:	4313      	orrs	r3, r2
 8006554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	689a      	ldr	r2, [r3, #8]
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	4a10      	ldr	r2, [pc, #64]	@ (80065b0 <TIM_Base_SetConfig+0x12c>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d003      	beq.n	800657c <TIM_Base_SetConfig+0xf8>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	4a12      	ldr	r2, [pc, #72]	@ (80065c0 <TIM_Base_SetConfig+0x13c>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d103      	bne.n	8006584 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	691a      	ldr	r2, [r3, #16]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2201      	movs	r2, #1
 8006588:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b01      	cmp	r3, #1
 8006594:	d105      	bne.n	80065a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	f023 0201 	bic.w	r2, r3, #1
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	611a      	str	r2, [r3, #16]
  }
}
 80065a2:	bf00      	nop
 80065a4:	3714      	adds	r7, #20
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop
 80065b0:	40010000 	.word	0x40010000
 80065b4:	40000400 	.word	0x40000400
 80065b8:	40000800 	.word	0x40000800
 80065bc:	40000c00 	.word	0x40000c00
 80065c0:	40010400 	.word	0x40010400
 80065c4:	40014000 	.word	0x40014000
 80065c8:	40014400 	.word	0x40014400
 80065cc:	40014800 	.word	0x40014800
 80065d0:	40001800 	.word	0x40001800
 80065d4:	40001c00 	.word	0x40001c00
 80065d8:	40002000 	.word	0x40002000

080065dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065dc:	b480      	push	{r7}
 80065de:	b087      	sub	sp, #28
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
 80065e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a1b      	ldr	r3, [r3, #32]
 80065f0:	f023 0201 	bic.w	r2, r3, #1
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800660a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f023 0303 	bic.w	r3, r3, #3
 8006612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68fa      	ldr	r2, [r7, #12]
 800661a:	4313      	orrs	r3, r2
 800661c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f023 0302 	bic.w	r3, r3, #2
 8006624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	4313      	orrs	r3, r2
 800662e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a20      	ldr	r2, [pc, #128]	@ (80066b4 <TIM_OC1_SetConfig+0xd8>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d003      	beq.n	8006640 <TIM_OC1_SetConfig+0x64>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a1f      	ldr	r2, [pc, #124]	@ (80066b8 <TIM_OC1_SetConfig+0xdc>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d10c      	bne.n	800665a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f023 0308 	bic.w	r3, r3, #8
 8006646:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	4313      	orrs	r3, r2
 8006650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f023 0304 	bic.w	r3, r3, #4
 8006658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a15      	ldr	r2, [pc, #84]	@ (80066b4 <TIM_OC1_SetConfig+0xd8>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d003      	beq.n	800666a <TIM_OC1_SetConfig+0x8e>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a14      	ldr	r2, [pc, #80]	@ (80066b8 <TIM_OC1_SetConfig+0xdc>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d111      	bne.n	800668e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	4313      	orrs	r3, r2
 8006682:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	4313      	orrs	r3, r2
 800668c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	685a      	ldr	r2, [r3, #4]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	621a      	str	r2, [r3, #32]
}
 80066a8:	bf00      	nop
 80066aa:	371c      	adds	r7, #28
 80066ac:	46bd      	mov	sp, r7
 80066ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b2:	4770      	bx	lr
 80066b4:	40010000 	.word	0x40010000
 80066b8:	40010400 	.word	0x40010400

080066bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6a1b      	ldr	r3, [r3, #32]
 80066ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6a1b      	ldr	r3, [r3, #32]
 80066d0:	f023 0210 	bic.w	r2, r3, #16
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80066ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	021b      	lsls	r3, r3, #8
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	f023 0320 	bic.w	r3, r3, #32
 8006706:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	689b      	ldr	r3, [r3, #8]
 800670c:	011b      	lsls	r3, r3, #4
 800670e:	697a      	ldr	r2, [r7, #20]
 8006710:	4313      	orrs	r3, r2
 8006712:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	4a22      	ldr	r2, [pc, #136]	@ (80067a0 <TIM_OC2_SetConfig+0xe4>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d003      	beq.n	8006724 <TIM_OC2_SetConfig+0x68>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	4a21      	ldr	r2, [pc, #132]	@ (80067a4 <TIM_OC2_SetConfig+0xe8>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d10d      	bne.n	8006740 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800672a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	011b      	lsls	r3, r3, #4
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	4313      	orrs	r3, r2
 8006736:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800673e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a17      	ldr	r2, [pc, #92]	@ (80067a0 <TIM_OC2_SetConfig+0xe4>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d003      	beq.n	8006750 <TIM_OC2_SetConfig+0x94>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a16      	ldr	r2, [pc, #88]	@ (80067a4 <TIM_OC2_SetConfig+0xe8>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d113      	bne.n	8006778 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006756:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800675e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	009b      	lsls	r3, r3, #2
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	4313      	orrs	r3, r2
 800676a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	4313      	orrs	r3, r2
 8006776:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	693a      	ldr	r2, [r7, #16]
 800677c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	621a      	str	r2, [r3, #32]
}
 8006792:	bf00      	nop
 8006794:	371c      	adds	r7, #28
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
 800679e:	bf00      	nop
 80067a0:	40010000 	.word	0x40010000
 80067a4:	40010400 	.word	0x40010400

080067a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6a1b      	ldr	r3, [r3, #32]
 80067b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a1b      	ldr	r3, [r3, #32]
 80067bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	685b      	ldr	r3, [r3, #4]
 80067c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	69db      	ldr	r3, [r3, #28]
 80067ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 0303 	bic.w	r3, r3, #3
 80067de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	4313      	orrs	r3, r2
 80067e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80067f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	689b      	ldr	r3, [r3, #8]
 80067f6:	021b      	lsls	r3, r3, #8
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	4313      	orrs	r3, r2
 80067fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a21      	ldr	r2, [pc, #132]	@ (8006888 <TIM_OC3_SetConfig+0xe0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d003      	beq.n	800680e <TIM_OC3_SetConfig+0x66>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a20      	ldr	r2, [pc, #128]	@ (800688c <TIM_OC3_SetConfig+0xe4>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d10d      	bne.n	800682a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006814:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	021b      	lsls	r3, r3, #8
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	4313      	orrs	r3, r2
 8006820:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006828:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a16      	ldr	r2, [pc, #88]	@ (8006888 <TIM_OC3_SetConfig+0xe0>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d003      	beq.n	800683a <TIM_OC3_SetConfig+0x92>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a15      	ldr	r2, [pc, #84]	@ (800688c <TIM_OC3_SetConfig+0xe4>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d113      	bne.n	8006862 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	695b      	ldr	r3, [r3, #20]
 800684e:	011b      	lsls	r3, r3, #4
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	011b      	lsls	r3, r3, #4
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	4313      	orrs	r3, r2
 8006860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	697a      	ldr	r2, [r7, #20]
 800687a:	621a      	str	r2, [r3, #32]
}
 800687c:	bf00      	nop
 800687e:	371c      	adds	r7, #28
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr
 8006888:	40010000 	.word	0x40010000
 800688c:	40010400 	.word	0x40010400

08006890 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006890:	b480      	push	{r7}
 8006892:	b087      	sub	sp, #28
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a1b      	ldr	r3, [r3, #32]
 80068a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80068be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	021b      	lsls	r3, r3, #8
 80068ce:	68fa      	ldr	r2, [r7, #12]
 80068d0:	4313      	orrs	r3, r2
 80068d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	031b      	lsls	r3, r3, #12
 80068e2:	693a      	ldr	r2, [r7, #16]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a12      	ldr	r2, [pc, #72]	@ (8006934 <TIM_OC4_SetConfig+0xa4>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d003      	beq.n	80068f8 <TIM_OC4_SetConfig+0x68>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a11      	ldr	r2, [pc, #68]	@ (8006938 <TIM_OC4_SetConfig+0xa8>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d109      	bne.n	800690c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80068fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	019b      	lsls	r3, r3, #6
 8006906:	697a      	ldr	r2, [r7, #20]
 8006908:	4313      	orrs	r3, r2
 800690a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	697a      	ldr	r2, [r7, #20]
 8006910:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	693a      	ldr	r2, [r7, #16]
 8006924:	621a      	str	r2, [r3, #32]
}
 8006926:	bf00      	nop
 8006928:	371c      	adds	r7, #28
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	40010000 	.word	0x40010000
 8006938:	40010400 	.word	0x40010400

0800693c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	f003 031f 	and.w	r3, r3, #31
 800694e:	2201      	movs	r2, #1
 8006950:	fa02 f303 	lsl.w	r3, r2, r3
 8006954:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6a1a      	ldr	r2, [r3, #32]
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	43db      	mvns	r3, r3
 800695e:	401a      	ands	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6a1a      	ldr	r2, [r3, #32]
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f003 031f 	and.w	r3, r3, #31
 800696e:	6879      	ldr	r1, [r7, #4]
 8006970:	fa01 f303 	lsl.w	r3, r1, r3
 8006974:	431a      	orrs	r2, r3
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	621a      	str	r2, [r3, #32]
}
 800697a:	bf00      	nop
 800697c:	371c      	adds	r7, #28
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
	...

08006988 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006998:	2b01      	cmp	r3, #1
 800699a:	d101      	bne.n	80069a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800699c:	2302      	movs	r3, #2
 800699e:	e05a      	b.n	8006a56 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2202      	movs	r2, #2
 80069ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68fa      	ldr	r2, [r7, #12]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a21      	ldr	r2, [pc, #132]	@ (8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d022      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069ec:	d01d      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a1d      	ldr	r2, [pc, #116]	@ (8006a68 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d018      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a1b      	ldr	r2, [pc, #108]	@ (8006a6c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d013      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a1a      	ldr	r2, [pc, #104]	@ (8006a70 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d00e      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a18      	ldr	r2, [pc, #96]	@ (8006a74 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d009      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a17      	ldr	r2, [pc, #92]	@ (8006a78 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d004      	beq.n	8006a2a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a15      	ldr	r2, [pc, #84]	@ (8006a7c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d10c      	bne.n	8006a44 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	40010000 	.word	0x40010000
 8006a68:	40000400 	.word	0x40000400
 8006a6c:	40000800 	.word	0x40000800
 8006a70:	40000c00 	.word	0x40000c00
 8006a74:	40010400 	.word	0x40010400
 8006a78:	40014000 	.word	0x40014000
 8006a7c:	40001800 	.word	0x40001800

08006a80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b082      	sub	sp, #8
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e042      	b.n	8006b18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a98:	b2db      	uxtb	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d106      	bne.n	8006aac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7fc f88a 	bl	8002bc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2224      	movs	r2, #36	@ 0x24
 8006ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68da      	ldr	r2, [r3, #12]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006ac2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 f82b 	bl	8006b20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	691a      	ldr	r2, [r3, #16]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006ad8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	695a      	ldr	r2, [r3, #20]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ae8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	68da      	ldr	r2, [r3, #12]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006af8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2220      	movs	r2, #32
 8006b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006b16:	2300      	movs	r3, #0
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3708      	adds	r7, #8
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b24:	b0c0      	sub	sp, #256	@ 0x100
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	691b      	ldr	r3, [r3, #16]
 8006b34:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b3c:	68d9      	ldr	r1, [r3, #12]
 8006b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	ea40 0301 	orr.w	r3, r0, r1
 8006b48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b4e:	689a      	ldr	r2, [r3, #8]
 8006b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	431a      	orrs	r2, r3
 8006b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	431a      	orrs	r2, r3
 8006b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006b78:	f021 010c 	bic.w	r1, r1, #12
 8006b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b86:	430b      	orrs	r3, r1
 8006b88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b9a:	6999      	ldr	r1, [r3, #24]
 8006b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	ea40 0301 	orr.w	r3, r0, r1
 8006ba6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	4b8f      	ldr	r3, [pc, #572]	@ (8006dec <UART_SetConfig+0x2cc>)
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d005      	beq.n	8006bc0 <UART_SetConfig+0xa0>
 8006bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	4b8d      	ldr	r3, [pc, #564]	@ (8006df0 <UART_SetConfig+0x2d0>)
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d104      	bne.n	8006bca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bc0:	f7ff fa72 	bl	80060a8 <HAL_RCC_GetPCLK2Freq>
 8006bc4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006bc8:	e003      	b.n	8006bd2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bca:	f7ff fa59 	bl	8006080 <HAL_RCC_GetPCLK1Freq>
 8006bce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd6:	69db      	ldr	r3, [r3, #28]
 8006bd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bdc:	f040 810c 	bne.w	8006df8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006be4:	2200      	movs	r2, #0
 8006be6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006bea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006bee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006bf2:	4622      	mov	r2, r4
 8006bf4:	462b      	mov	r3, r5
 8006bf6:	1891      	adds	r1, r2, r2
 8006bf8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006bfa:	415b      	adcs	r3, r3
 8006bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bfe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006c02:	4621      	mov	r1, r4
 8006c04:	eb12 0801 	adds.w	r8, r2, r1
 8006c08:	4629      	mov	r1, r5
 8006c0a:	eb43 0901 	adc.w	r9, r3, r1
 8006c0e:	f04f 0200 	mov.w	r2, #0
 8006c12:	f04f 0300 	mov.w	r3, #0
 8006c16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c22:	4690      	mov	r8, r2
 8006c24:	4699      	mov	r9, r3
 8006c26:	4623      	mov	r3, r4
 8006c28:	eb18 0303 	adds.w	r3, r8, r3
 8006c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c30:	462b      	mov	r3, r5
 8006c32:	eb49 0303 	adc.w	r3, r9, r3
 8006c36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c46:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006c4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006c4e:	460b      	mov	r3, r1
 8006c50:	18db      	adds	r3, r3, r3
 8006c52:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c54:	4613      	mov	r3, r2
 8006c56:	eb42 0303 	adc.w	r3, r2, r3
 8006c5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006c60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006c64:	f7f9 ffc0 	bl	8000be8 <__aeabi_uldivmod>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4b61      	ldr	r3, [pc, #388]	@ (8006df4 <UART_SetConfig+0x2d4>)
 8006c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c72:	095b      	lsrs	r3, r3, #5
 8006c74:	011c      	lsls	r4, r3, #4
 8006c76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c80:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006c84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006c88:	4642      	mov	r2, r8
 8006c8a:	464b      	mov	r3, r9
 8006c8c:	1891      	adds	r1, r2, r2
 8006c8e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006c90:	415b      	adcs	r3, r3
 8006c92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006c98:	4641      	mov	r1, r8
 8006c9a:	eb12 0a01 	adds.w	sl, r2, r1
 8006c9e:	4649      	mov	r1, r9
 8006ca0:	eb43 0b01 	adc.w	fp, r3, r1
 8006ca4:	f04f 0200 	mov.w	r2, #0
 8006ca8:	f04f 0300 	mov.w	r3, #0
 8006cac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006cb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006cb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cb8:	4692      	mov	sl, r2
 8006cba:	469b      	mov	fp, r3
 8006cbc:	4643      	mov	r3, r8
 8006cbe:	eb1a 0303 	adds.w	r3, sl, r3
 8006cc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006cc6:	464b      	mov	r3, r9
 8006cc8:	eb4b 0303 	adc.w	r3, fp, r3
 8006ccc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006cdc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006ce0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	18db      	adds	r3, r3, r3
 8006ce8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cea:	4613      	mov	r3, r2
 8006cec:	eb42 0303 	adc.w	r3, r2, r3
 8006cf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cf2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006cf6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006cfa:	f7f9 ff75 	bl	8000be8 <__aeabi_uldivmod>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	460b      	mov	r3, r1
 8006d02:	4611      	mov	r1, r2
 8006d04:	4b3b      	ldr	r3, [pc, #236]	@ (8006df4 <UART_SetConfig+0x2d4>)
 8006d06:	fba3 2301 	umull	r2, r3, r3, r1
 8006d0a:	095b      	lsrs	r3, r3, #5
 8006d0c:	2264      	movs	r2, #100	@ 0x64
 8006d0e:	fb02 f303 	mul.w	r3, r2, r3
 8006d12:	1acb      	subs	r3, r1, r3
 8006d14:	00db      	lsls	r3, r3, #3
 8006d16:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006d1a:	4b36      	ldr	r3, [pc, #216]	@ (8006df4 <UART_SetConfig+0x2d4>)
 8006d1c:	fba3 2302 	umull	r2, r3, r3, r2
 8006d20:	095b      	lsrs	r3, r3, #5
 8006d22:	005b      	lsls	r3, r3, #1
 8006d24:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006d28:	441c      	add	r4, r3
 8006d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d2e:	2200      	movs	r2, #0
 8006d30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d34:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006d38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006d3c:	4642      	mov	r2, r8
 8006d3e:	464b      	mov	r3, r9
 8006d40:	1891      	adds	r1, r2, r2
 8006d42:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006d44:	415b      	adcs	r3, r3
 8006d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006d4c:	4641      	mov	r1, r8
 8006d4e:	1851      	adds	r1, r2, r1
 8006d50:	6339      	str	r1, [r7, #48]	@ 0x30
 8006d52:	4649      	mov	r1, r9
 8006d54:	414b      	adcs	r3, r1
 8006d56:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d58:	f04f 0200 	mov.w	r2, #0
 8006d5c:	f04f 0300 	mov.w	r3, #0
 8006d60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006d64:	4659      	mov	r1, fp
 8006d66:	00cb      	lsls	r3, r1, #3
 8006d68:	4651      	mov	r1, sl
 8006d6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d6e:	4651      	mov	r1, sl
 8006d70:	00ca      	lsls	r2, r1, #3
 8006d72:	4610      	mov	r0, r2
 8006d74:	4619      	mov	r1, r3
 8006d76:	4603      	mov	r3, r0
 8006d78:	4642      	mov	r2, r8
 8006d7a:	189b      	adds	r3, r3, r2
 8006d7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d80:	464b      	mov	r3, r9
 8006d82:	460a      	mov	r2, r1
 8006d84:	eb42 0303 	adc.w	r3, r2, r3
 8006d88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d98:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006d9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006da0:	460b      	mov	r3, r1
 8006da2:	18db      	adds	r3, r3, r3
 8006da4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006da6:	4613      	mov	r3, r2
 8006da8:	eb42 0303 	adc.w	r3, r2, r3
 8006dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006db2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006db6:	f7f9 ff17 	bl	8000be8 <__aeabi_uldivmod>
 8006dba:	4602      	mov	r2, r0
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006df4 <UART_SetConfig+0x2d4>)
 8006dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8006dc4:	095b      	lsrs	r3, r3, #5
 8006dc6:	2164      	movs	r1, #100	@ 0x64
 8006dc8:	fb01 f303 	mul.w	r3, r1, r3
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	3332      	adds	r3, #50	@ 0x32
 8006dd2:	4a08      	ldr	r2, [pc, #32]	@ (8006df4 <UART_SetConfig+0x2d4>)
 8006dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd8:	095b      	lsrs	r3, r3, #5
 8006dda:	f003 0207 	and.w	r2, r3, #7
 8006dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4422      	add	r2, r4
 8006de6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006de8:	e106      	b.n	8006ff8 <UART_SetConfig+0x4d8>
 8006dea:	bf00      	nop
 8006dec:	40011000 	.word	0x40011000
 8006df0:	40011400 	.word	0x40011400
 8006df4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006df8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e02:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006e06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006e0a:	4642      	mov	r2, r8
 8006e0c:	464b      	mov	r3, r9
 8006e0e:	1891      	adds	r1, r2, r2
 8006e10:	6239      	str	r1, [r7, #32]
 8006e12:	415b      	adcs	r3, r3
 8006e14:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e1a:	4641      	mov	r1, r8
 8006e1c:	1854      	adds	r4, r2, r1
 8006e1e:	4649      	mov	r1, r9
 8006e20:	eb43 0501 	adc.w	r5, r3, r1
 8006e24:	f04f 0200 	mov.w	r2, #0
 8006e28:	f04f 0300 	mov.w	r3, #0
 8006e2c:	00eb      	lsls	r3, r5, #3
 8006e2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e32:	00e2      	lsls	r2, r4, #3
 8006e34:	4614      	mov	r4, r2
 8006e36:	461d      	mov	r5, r3
 8006e38:	4643      	mov	r3, r8
 8006e3a:	18e3      	adds	r3, r4, r3
 8006e3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e40:	464b      	mov	r3, r9
 8006e42:	eb45 0303 	adc.w	r3, r5, r3
 8006e46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e56:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e5a:	f04f 0200 	mov.w	r2, #0
 8006e5e:	f04f 0300 	mov.w	r3, #0
 8006e62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006e66:	4629      	mov	r1, r5
 8006e68:	008b      	lsls	r3, r1, #2
 8006e6a:	4621      	mov	r1, r4
 8006e6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e70:	4621      	mov	r1, r4
 8006e72:	008a      	lsls	r2, r1, #2
 8006e74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006e78:	f7f9 feb6 	bl	8000be8 <__aeabi_uldivmod>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	4b60      	ldr	r3, [pc, #384]	@ (8007004 <UART_SetConfig+0x4e4>)
 8006e82:	fba3 2302 	umull	r2, r3, r3, r2
 8006e86:	095b      	lsrs	r3, r3, #5
 8006e88:	011c      	lsls	r4, r3, #4
 8006e8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e94:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006e98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006e9c:	4642      	mov	r2, r8
 8006e9e:	464b      	mov	r3, r9
 8006ea0:	1891      	adds	r1, r2, r2
 8006ea2:	61b9      	str	r1, [r7, #24]
 8006ea4:	415b      	adcs	r3, r3
 8006ea6:	61fb      	str	r3, [r7, #28]
 8006ea8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006eac:	4641      	mov	r1, r8
 8006eae:	1851      	adds	r1, r2, r1
 8006eb0:	6139      	str	r1, [r7, #16]
 8006eb2:	4649      	mov	r1, r9
 8006eb4:	414b      	adcs	r3, r1
 8006eb6:	617b      	str	r3, [r7, #20]
 8006eb8:	f04f 0200 	mov.w	r2, #0
 8006ebc:	f04f 0300 	mov.w	r3, #0
 8006ec0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ec4:	4659      	mov	r1, fp
 8006ec6:	00cb      	lsls	r3, r1, #3
 8006ec8:	4651      	mov	r1, sl
 8006eca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ece:	4651      	mov	r1, sl
 8006ed0:	00ca      	lsls	r2, r1, #3
 8006ed2:	4610      	mov	r0, r2
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	4642      	mov	r2, r8
 8006eda:	189b      	adds	r3, r3, r2
 8006edc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ee0:	464b      	mov	r3, r9
 8006ee2:	460a      	mov	r2, r1
 8006ee4:	eb42 0303 	adc.w	r3, r2, r3
 8006ee8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ef6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ef8:	f04f 0200 	mov.w	r2, #0
 8006efc:	f04f 0300 	mov.w	r3, #0
 8006f00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006f04:	4649      	mov	r1, r9
 8006f06:	008b      	lsls	r3, r1, #2
 8006f08:	4641      	mov	r1, r8
 8006f0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f0e:	4641      	mov	r1, r8
 8006f10:	008a      	lsls	r2, r1, #2
 8006f12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006f16:	f7f9 fe67 	bl	8000be8 <__aeabi_uldivmod>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	4611      	mov	r1, r2
 8006f20:	4b38      	ldr	r3, [pc, #224]	@ (8007004 <UART_SetConfig+0x4e4>)
 8006f22:	fba3 2301 	umull	r2, r3, r3, r1
 8006f26:	095b      	lsrs	r3, r3, #5
 8006f28:	2264      	movs	r2, #100	@ 0x64
 8006f2a:	fb02 f303 	mul.w	r3, r2, r3
 8006f2e:	1acb      	subs	r3, r1, r3
 8006f30:	011b      	lsls	r3, r3, #4
 8006f32:	3332      	adds	r3, #50	@ 0x32
 8006f34:	4a33      	ldr	r2, [pc, #204]	@ (8007004 <UART_SetConfig+0x4e4>)
 8006f36:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3a:	095b      	lsrs	r3, r3, #5
 8006f3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f40:	441c      	add	r4, r3
 8006f42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f46:	2200      	movs	r2, #0
 8006f48:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006f4c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006f50:	4642      	mov	r2, r8
 8006f52:	464b      	mov	r3, r9
 8006f54:	1891      	adds	r1, r2, r2
 8006f56:	60b9      	str	r1, [r7, #8]
 8006f58:	415b      	adcs	r3, r3
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f60:	4641      	mov	r1, r8
 8006f62:	1851      	adds	r1, r2, r1
 8006f64:	6039      	str	r1, [r7, #0]
 8006f66:	4649      	mov	r1, r9
 8006f68:	414b      	adcs	r3, r1
 8006f6a:	607b      	str	r3, [r7, #4]
 8006f6c:	f04f 0200 	mov.w	r2, #0
 8006f70:	f04f 0300 	mov.w	r3, #0
 8006f74:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f78:	4659      	mov	r1, fp
 8006f7a:	00cb      	lsls	r3, r1, #3
 8006f7c:	4651      	mov	r1, sl
 8006f7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f82:	4651      	mov	r1, sl
 8006f84:	00ca      	lsls	r2, r1, #3
 8006f86:	4610      	mov	r0, r2
 8006f88:	4619      	mov	r1, r3
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	4642      	mov	r2, r8
 8006f8e:	189b      	adds	r3, r3, r2
 8006f90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f92:	464b      	mov	r3, r9
 8006f94:	460a      	mov	r2, r1
 8006f96:	eb42 0303 	adc.w	r3, r2, r3
 8006f9a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	663b      	str	r3, [r7, #96]	@ 0x60
 8006fa6:	667a      	str	r2, [r7, #100]	@ 0x64
 8006fa8:	f04f 0200 	mov.w	r2, #0
 8006fac:	f04f 0300 	mov.w	r3, #0
 8006fb0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006fb4:	4649      	mov	r1, r9
 8006fb6:	008b      	lsls	r3, r1, #2
 8006fb8:	4641      	mov	r1, r8
 8006fba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fbe:	4641      	mov	r1, r8
 8006fc0:	008a      	lsls	r2, r1, #2
 8006fc2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006fc6:	f7f9 fe0f 	bl	8000be8 <__aeabi_uldivmod>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	460b      	mov	r3, r1
 8006fce:	4b0d      	ldr	r3, [pc, #52]	@ (8007004 <UART_SetConfig+0x4e4>)
 8006fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8006fd4:	095b      	lsrs	r3, r3, #5
 8006fd6:	2164      	movs	r1, #100	@ 0x64
 8006fd8:	fb01 f303 	mul.w	r3, r1, r3
 8006fdc:	1ad3      	subs	r3, r2, r3
 8006fde:	011b      	lsls	r3, r3, #4
 8006fe0:	3332      	adds	r3, #50	@ 0x32
 8006fe2:	4a08      	ldr	r2, [pc, #32]	@ (8007004 <UART_SetConfig+0x4e4>)
 8006fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fe8:	095b      	lsrs	r3, r3, #5
 8006fea:	f003 020f 	and.w	r2, r3, #15
 8006fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4422      	add	r2, r4
 8006ff6:	609a      	str	r2, [r3, #8]
}
 8006ff8:	bf00      	nop
 8006ffa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006ffe:	46bd      	mov	sp, r7
 8007000:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007004:	51eb851f 	.word	0x51eb851f

08007008 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007008:	b084      	sub	sp, #16
 800700a:	b580      	push	{r7, lr}
 800700c:	b084      	sub	sp, #16
 800700e:	af00      	add	r7, sp, #0
 8007010:	6078      	str	r0, [r7, #4]
 8007012:	f107 001c 	add.w	r0, r7, #28
 8007016:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800701a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800701e:	2b01      	cmp	r3, #1
 8007020:	d123      	bne.n	800706a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007026:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007036:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800704a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800704e:	2b01      	cmp	r3, #1
 8007050:	d105      	bne.n	800705e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 faa0 	bl	80075a4 <USB_CoreReset>
 8007064:	4603      	mov	r3, r0
 8007066:	73fb      	strb	r3, [r7, #15]
 8007068:	e01b      	b.n	80070a2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fa94 	bl	80075a4 <USB_CoreReset>
 800707c:	4603      	mov	r3, r0
 800707e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007080:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007084:	2b00      	cmp	r3, #0
 8007086:	d106      	bne.n	8007096 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800708c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	639a      	str	r2, [r3, #56]	@ 0x38
 8007094:	e005      	b.n	80070a2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800709a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80070a2:	7fbb      	ldrb	r3, [r7, #30]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d10b      	bne.n	80070c0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f043 0206 	orr.w	r2, r3, #6
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f043 0220 	orr.w	r2, r3, #32
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c2:	4618      	mov	r0, r3
 80070c4:	3710      	adds	r7, #16
 80070c6:	46bd      	mov	sp, r7
 80070c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070cc:	b004      	add	sp, #16
 80070ce:	4770      	bx	lr

080070d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	689b      	ldr	r3, [r3, #8]
 80070dc:	f023 0201 	bic.w	r2, r3, #1
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	370c      	adds	r7, #12
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr

080070f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b084      	sub	sp, #16
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
 80070fa:	460b      	mov	r3, r1
 80070fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070fe:	2300      	movs	r3, #0
 8007100:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800710e:	78fb      	ldrb	r3, [r7, #3]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d115      	bne.n	8007140 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007120:	200a      	movs	r0, #10
 8007122:	f7fb feab 	bl	8002e7c <HAL_Delay>
      ms += 10U;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	330a      	adds	r3, #10
 800712a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fa2b 	bl	8007588 <USB_GetMode>
 8007132:	4603      	mov	r3, r0
 8007134:	2b01      	cmp	r3, #1
 8007136:	d01e      	beq.n	8007176 <USB_SetCurrentMode+0x84>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2bc7      	cmp	r3, #199	@ 0xc7
 800713c:	d9f0      	bls.n	8007120 <USB_SetCurrentMode+0x2e>
 800713e:	e01a      	b.n	8007176 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007140:	78fb      	ldrb	r3, [r7, #3]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d115      	bne.n	8007172 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007152:	200a      	movs	r0, #10
 8007154:	f7fb fe92 	bl	8002e7c <HAL_Delay>
      ms += 10U;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	330a      	adds	r3, #10
 800715c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fa12 	bl	8007588 <USB_GetMode>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d005      	beq.n	8007176 <USB_SetCurrentMode+0x84>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2bc7      	cmp	r3, #199	@ 0xc7
 800716e:	d9f0      	bls.n	8007152 <USB_SetCurrentMode+0x60>
 8007170:	e001      	b.n	8007176 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e005      	b.n	8007182 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2bc8      	cmp	r3, #200	@ 0xc8
 800717a:	d101      	bne.n	8007180 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e000      	b.n	8007182 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
	...

0800718c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800718c:	b084      	sub	sp, #16
 800718e:	b580      	push	{r7, lr}
 8007190:	b086      	sub	sp, #24
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800719a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80071a6:	2300      	movs	r3, #0
 80071a8:	613b      	str	r3, [r7, #16]
 80071aa:	e009      	b.n	80071c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	3340      	adds	r3, #64	@ 0x40
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	2200      	movs	r2, #0
 80071b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	3301      	adds	r3, #1
 80071be:	613b      	str	r3, [r7, #16]
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	2b0e      	cmp	r3, #14
 80071c4:	d9f2      	bls.n	80071ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80071c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d11c      	bne.n	8007208 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	68fa      	ldr	r2, [r7, #12]
 80071d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071dc:	f043 0302 	orr.w	r3, r3, #2
 80071e0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071f2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071fe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	639a      	str	r2, [r3, #56]	@ 0x38
 8007206:	e00b      	b.n	8007220 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800720c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007218:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007226:	461a      	mov	r2, r3
 8007228:	2300      	movs	r3, #0
 800722a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800722c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007230:	2b01      	cmp	r3, #1
 8007232:	d10d      	bne.n	8007250 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007234:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007238:	2b00      	cmp	r3, #0
 800723a:	d104      	bne.n	8007246 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800723c:	2100      	movs	r1, #0
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f968 	bl	8007514 <USB_SetDevSpeed>
 8007244:	e008      	b.n	8007258 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007246:	2101      	movs	r1, #1
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f963 	bl	8007514 <USB_SetDevSpeed>
 800724e:	e003      	b.n	8007258 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007250:	2103      	movs	r1, #3
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 f95e 	bl	8007514 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007258:	2110      	movs	r1, #16
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 f8fa 	bl	8007454 <USB_FlushTxFifo>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 f924 	bl	80074b8 <USB_FlushRxFifo>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d001      	beq.n	800727a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007280:	461a      	mov	r2, r3
 8007282:	2300      	movs	r3, #0
 8007284:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800728c:	461a      	mov	r2, r3
 800728e:	2300      	movs	r3, #0
 8007290:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007298:	461a      	mov	r2, r3
 800729a:	2300      	movs	r3, #0
 800729c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800729e:	2300      	movs	r3, #0
 80072a0:	613b      	str	r3, [r7, #16]
 80072a2:	e043      	b.n	800732c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072ba:	d118      	bne.n	80072ee <USB_DevInit+0x162>
    {
      if (i == 0U)
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10a      	bne.n	80072d8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072ce:	461a      	mov	r2, r3
 80072d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80072d4:	6013      	str	r3, [r2, #0]
 80072d6:	e013      	b.n	8007300 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072e4:	461a      	mov	r2, r3
 80072e6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80072ea:	6013      	str	r3, [r2, #0]
 80072ec:	e008      	b.n	8007300 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	015a      	lsls	r2, r3, #5
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	4413      	add	r3, r2
 80072f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072fa:	461a      	mov	r2, r3
 80072fc:	2300      	movs	r3, #0
 80072fe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	015a      	lsls	r2, r3, #5
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	4413      	add	r3, r2
 8007308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800730c:	461a      	mov	r2, r3
 800730e:	2300      	movs	r3, #0
 8007310:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	015a      	lsls	r2, r3, #5
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	4413      	add	r3, r2
 800731a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800731e:	461a      	mov	r2, r3
 8007320:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007324:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	3301      	adds	r3, #1
 800732a:	613b      	str	r3, [r7, #16]
 800732c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007330:	461a      	mov	r2, r3
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	4293      	cmp	r3, r2
 8007336:	d3b5      	bcc.n	80072a4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007338:	2300      	movs	r3, #0
 800733a:	613b      	str	r3, [r7, #16]
 800733c:	e043      	b.n	80073c6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	015a      	lsls	r2, r3, #5
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	4413      	add	r3, r2
 8007346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007350:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007354:	d118      	bne.n	8007388 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007356:	693b      	ldr	r3, [r7, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10a      	bne.n	8007372 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	015a      	lsls	r2, r3, #5
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	4413      	add	r3, r2
 8007364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007368:	461a      	mov	r2, r3
 800736a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800736e:	6013      	str	r3, [r2, #0]
 8007370:	e013      	b.n	800739a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	015a      	lsls	r2, r3, #5
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	4413      	add	r3, r2
 800737a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800737e:	461a      	mov	r2, r3
 8007380:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007384:	6013      	str	r3, [r2, #0]
 8007386:	e008      	b.n	800739a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	015a      	lsls	r2, r3, #5
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4413      	add	r3, r2
 8007390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007394:	461a      	mov	r2, r3
 8007396:	2300      	movs	r3, #0
 8007398:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073a6:	461a      	mov	r2, r3
 80073a8:	2300      	movs	r3, #0
 80073aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	015a      	lsls	r2, r3, #5
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073b8:	461a      	mov	r2, r3
 80073ba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80073be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	3301      	adds	r3, #1
 80073c4:	613b      	str	r3, [r7, #16]
 80073c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80073ca:	461a      	mov	r2, r3
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d3b5      	bcc.n	800733e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073d8:	691b      	ldr	r3, [r3, #16]
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80073e4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2200      	movs	r2, #0
 80073ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80073f2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80073f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d105      	bne.n	8007408 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	f043 0210 	orr.w	r2, r3, #16
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	699a      	ldr	r2, [r3, #24]
 800740c:	4b10      	ldr	r3, [pc, #64]	@ (8007450 <USB_DevInit+0x2c4>)
 800740e:	4313      	orrs	r3, r2
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007414:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007418:	2b00      	cmp	r3, #0
 800741a:	d005      	beq.n	8007428 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	f043 0208 	orr.w	r2, r3, #8
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007428:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800742c:	2b01      	cmp	r3, #1
 800742e:	d107      	bne.n	8007440 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007438:	f043 0304 	orr.w	r3, r3, #4
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007440:	7dfb      	ldrb	r3, [r7, #23]
}
 8007442:	4618      	mov	r0, r3
 8007444:	3718      	adds	r7, #24
 8007446:	46bd      	mov	sp, r7
 8007448:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800744c:	b004      	add	sp, #16
 800744e:	4770      	bx	lr
 8007450:	803c3800 	.word	0x803c3800

08007454 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007454:	b480      	push	{r7}
 8007456:	b085      	sub	sp, #20
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800745e:	2300      	movs	r3, #0
 8007460:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3301      	adds	r3, #1
 8007466:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800746e:	d901      	bls.n	8007474 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e01b      	b.n	80074ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	daf2      	bge.n	8007462 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800747c:	2300      	movs	r3, #0
 800747e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	019b      	lsls	r3, r3, #6
 8007484:	f043 0220 	orr.w	r2, r3, #32
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	3301      	adds	r3, #1
 8007490:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007498:	d901      	bls.n	800749e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e006      	b.n	80074ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	f003 0320 	and.w	r3, r3, #32
 80074a6:	2b20      	cmp	r3, #32
 80074a8:	d0f0      	beq.n	800748c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3714      	adds	r7, #20
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074c0:	2300      	movs	r3, #0
 80074c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	3301      	adds	r3, #1
 80074c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074d0:	d901      	bls.n	80074d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e018      	b.n	8007508 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	daf2      	bge.n	80074c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80074de:	2300      	movs	r3, #0
 80074e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2210      	movs	r2, #16
 80074e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	3301      	adds	r3, #1
 80074ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074f4:	d901      	bls.n	80074fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e006      	b.n	8007508 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	f003 0310 	and.w	r3, r3, #16
 8007502:	2b10      	cmp	r3, #16
 8007504:	d0f0      	beq.n	80074e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007506:	2300      	movs	r3, #0
}
 8007508:	4618      	mov	r0, r3
 800750a:	3714      	adds	r7, #20
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	460b      	mov	r3, r1
 800751e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	78fb      	ldrb	r3, [r7, #3]
 800752e:	68f9      	ldr	r1, [r7, #12]
 8007530:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007534:	4313      	orrs	r3, r2
 8007536:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007546:	b480      	push	{r7}
 8007548:	b085      	sub	sp, #20
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007560:	f023 0303 	bic.w	r3, r3, #3
 8007564:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007574:	f043 0302 	orr.w	r3, r3, #2
 8007578:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800757a:	2300      	movs	r3, #0
}
 800757c:	4618      	mov	r0, r3
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007588:	b480      	push	{r7}
 800758a:	b083      	sub	sp, #12
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	695b      	ldr	r3, [r3, #20]
 8007594:	f003 0301 	and.w	r3, r3, #1
}
 8007598:	4618      	mov	r0, r3
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80075ac:	2300      	movs	r3, #0
 80075ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3301      	adds	r3, #1
 80075b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075bc:	d901      	bls.n	80075c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80075be:	2303      	movs	r3, #3
 80075c0:	e01b      	b.n	80075fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	daf2      	bge.n	80075b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80075ca:	2300      	movs	r3, #0
 80075cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	f043 0201 	orr.w	r2, r3, #1
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3301      	adds	r3, #1
 80075de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075e6:	d901      	bls.n	80075ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e006      	b.n	80075fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	f003 0301 	and.w	r3, r3, #1
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d0f0      	beq.n	80075da <USB_CoreReset+0x36>

  return HAL_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3714      	adds	r7, #20
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <__cvt>:
 8007606:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800760a:	ec57 6b10 	vmov	r6, r7, d0
 800760e:	2f00      	cmp	r7, #0
 8007610:	460c      	mov	r4, r1
 8007612:	4619      	mov	r1, r3
 8007614:	463b      	mov	r3, r7
 8007616:	bfbb      	ittet	lt
 8007618:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800761c:	461f      	movlt	r7, r3
 800761e:	2300      	movge	r3, #0
 8007620:	232d      	movlt	r3, #45	@ 0x2d
 8007622:	700b      	strb	r3, [r1, #0]
 8007624:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007626:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800762a:	4691      	mov	r9, r2
 800762c:	f023 0820 	bic.w	r8, r3, #32
 8007630:	bfbc      	itt	lt
 8007632:	4632      	movlt	r2, r6
 8007634:	4616      	movlt	r6, r2
 8007636:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800763a:	d005      	beq.n	8007648 <__cvt+0x42>
 800763c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007640:	d100      	bne.n	8007644 <__cvt+0x3e>
 8007642:	3401      	adds	r4, #1
 8007644:	2102      	movs	r1, #2
 8007646:	e000      	b.n	800764a <__cvt+0x44>
 8007648:	2103      	movs	r1, #3
 800764a:	ab03      	add	r3, sp, #12
 800764c:	9301      	str	r3, [sp, #4]
 800764e:	ab02      	add	r3, sp, #8
 8007650:	9300      	str	r3, [sp, #0]
 8007652:	ec47 6b10 	vmov	d0, r6, r7
 8007656:	4653      	mov	r3, sl
 8007658:	4622      	mov	r2, r4
 800765a:	f000 fdf1 	bl	8008240 <_dtoa_r>
 800765e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007662:	4605      	mov	r5, r0
 8007664:	d119      	bne.n	800769a <__cvt+0x94>
 8007666:	f019 0f01 	tst.w	r9, #1
 800766a:	d00e      	beq.n	800768a <__cvt+0x84>
 800766c:	eb00 0904 	add.w	r9, r0, r4
 8007670:	2200      	movs	r2, #0
 8007672:	2300      	movs	r3, #0
 8007674:	4630      	mov	r0, r6
 8007676:	4639      	mov	r1, r7
 8007678:	f7f9 fa26 	bl	8000ac8 <__aeabi_dcmpeq>
 800767c:	b108      	cbz	r0, 8007682 <__cvt+0x7c>
 800767e:	f8cd 900c 	str.w	r9, [sp, #12]
 8007682:	2230      	movs	r2, #48	@ 0x30
 8007684:	9b03      	ldr	r3, [sp, #12]
 8007686:	454b      	cmp	r3, r9
 8007688:	d31e      	bcc.n	80076c8 <__cvt+0xc2>
 800768a:	9b03      	ldr	r3, [sp, #12]
 800768c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800768e:	1b5b      	subs	r3, r3, r5
 8007690:	4628      	mov	r0, r5
 8007692:	6013      	str	r3, [r2, #0]
 8007694:	b004      	add	sp, #16
 8007696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800769a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800769e:	eb00 0904 	add.w	r9, r0, r4
 80076a2:	d1e5      	bne.n	8007670 <__cvt+0x6a>
 80076a4:	7803      	ldrb	r3, [r0, #0]
 80076a6:	2b30      	cmp	r3, #48	@ 0x30
 80076a8:	d10a      	bne.n	80076c0 <__cvt+0xba>
 80076aa:	2200      	movs	r2, #0
 80076ac:	2300      	movs	r3, #0
 80076ae:	4630      	mov	r0, r6
 80076b0:	4639      	mov	r1, r7
 80076b2:	f7f9 fa09 	bl	8000ac8 <__aeabi_dcmpeq>
 80076b6:	b918      	cbnz	r0, 80076c0 <__cvt+0xba>
 80076b8:	f1c4 0401 	rsb	r4, r4, #1
 80076bc:	f8ca 4000 	str.w	r4, [sl]
 80076c0:	f8da 3000 	ldr.w	r3, [sl]
 80076c4:	4499      	add	r9, r3
 80076c6:	e7d3      	b.n	8007670 <__cvt+0x6a>
 80076c8:	1c59      	adds	r1, r3, #1
 80076ca:	9103      	str	r1, [sp, #12]
 80076cc:	701a      	strb	r2, [r3, #0]
 80076ce:	e7d9      	b.n	8007684 <__cvt+0x7e>

080076d0 <__exponent>:
 80076d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076d2:	2900      	cmp	r1, #0
 80076d4:	bfba      	itte	lt
 80076d6:	4249      	neglt	r1, r1
 80076d8:	232d      	movlt	r3, #45	@ 0x2d
 80076da:	232b      	movge	r3, #43	@ 0x2b
 80076dc:	2909      	cmp	r1, #9
 80076de:	7002      	strb	r2, [r0, #0]
 80076e0:	7043      	strb	r3, [r0, #1]
 80076e2:	dd29      	ble.n	8007738 <__exponent+0x68>
 80076e4:	f10d 0307 	add.w	r3, sp, #7
 80076e8:	461d      	mov	r5, r3
 80076ea:	270a      	movs	r7, #10
 80076ec:	461a      	mov	r2, r3
 80076ee:	fbb1 f6f7 	udiv	r6, r1, r7
 80076f2:	fb07 1416 	mls	r4, r7, r6, r1
 80076f6:	3430      	adds	r4, #48	@ 0x30
 80076f8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80076fc:	460c      	mov	r4, r1
 80076fe:	2c63      	cmp	r4, #99	@ 0x63
 8007700:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007704:	4631      	mov	r1, r6
 8007706:	dcf1      	bgt.n	80076ec <__exponent+0x1c>
 8007708:	3130      	adds	r1, #48	@ 0x30
 800770a:	1e94      	subs	r4, r2, #2
 800770c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007710:	1c41      	adds	r1, r0, #1
 8007712:	4623      	mov	r3, r4
 8007714:	42ab      	cmp	r3, r5
 8007716:	d30a      	bcc.n	800772e <__exponent+0x5e>
 8007718:	f10d 0309 	add.w	r3, sp, #9
 800771c:	1a9b      	subs	r3, r3, r2
 800771e:	42ac      	cmp	r4, r5
 8007720:	bf88      	it	hi
 8007722:	2300      	movhi	r3, #0
 8007724:	3302      	adds	r3, #2
 8007726:	4403      	add	r3, r0
 8007728:	1a18      	subs	r0, r3, r0
 800772a:	b003      	add	sp, #12
 800772c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800772e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007732:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007736:	e7ed      	b.n	8007714 <__exponent+0x44>
 8007738:	2330      	movs	r3, #48	@ 0x30
 800773a:	3130      	adds	r1, #48	@ 0x30
 800773c:	7083      	strb	r3, [r0, #2]
 800773e:	70c1      	strb	r1, [r0, #3]
 8007740:	1d03      	adds	r3, r0, #4
 8007742:	e7f1      	b.n	8007728 <__exponent+0x58>

08007744 <_printf_float>:
 8007744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007748:	b08d      	sub	sp, #52	@ 0x34
 800774a:	460c      	mov	r4, r1
 800774c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007750:	4616      	mov	r6, r2
 8007752:	461f      	mov	r7, r3
 8007754:	4605      	mov	r5, r0
 8007756:	f000 fcab 	bl	80080b0 <_localeconv_r>
 800775a:	6803      	ldr	r3, [r0, #0]
 800775c:	9304      	str	r3, [sp, #16]
 800775e:	4618      	mov	r0, r3
 8007760:	f7f8 fd86 	bl	8000270 <strlen>
 8007764:	2300      	movs	r3, #0
 8007766:	930a      	str	r3, [sp, #40]	@ 0x28
 8007768:	f8d8 3000 	ldr.w	r3, [r8]
 800776c:	9005      	str	r0, [sp, #20]
 800776e:	3307      	adds	r3, #7
 8007770:	f023 0307 	bic.w	r3, r3, #7
 8007774:	f103 0208 	add.w	r2, r3, #8
 8007778:	f894 a018 	ldrb.w	sl, [r4, #24]
 800777c:	f8d4 b000 	ldr.w	fp, [r4]
 8007780:	f8c8 2000 	str.w	r2, [r8]
 8007784:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007788:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800778c:	9307      	str	r3, [sp, #28]
 800778e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007792:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007796:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800779a:	4b9c      	ldr	r3, [pc, #624]	@ (8007a0c <_printf_float+0x2c8>)
 800779c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80077a0:	f7f9 f9c4 	bl	8000b2c <__aeabi_dcmpun>
 80077a4:	bb70      	cbnz	r0, 8007804 <_printf_float+0xc0>
 80077a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077aa:	4b98      	ldr	r3, [pc, #608]	@ (8007a0c <_printf_float+0x2c8>)
 80077ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80077b0:	f7f9 f99e 	bl	8000af0 <__aeabi_dcmple>
 80077b4:	bb30      	cbnz	r0, 8007804 <_printf_float+0xc0>
 80077b6:	2200      	movs	r2, #0
 80077b8:	2300      	movs	r3, #0
 80077ba:	4640      	mov	r0, r8
 80077bc:	4649      	mov	r1, r9
 80077be:	f7f9 f98d 	bl	8000adc <__aeabi_dcmplt>
 80077c2:	b110      	cbz	r0, 80077ca <_printf_float+0x86>
 80077c4:	232d      	movs	r3, #45	@ 0x2d
 80077c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077ca:	4a91      	ldr	r2, [pc, #580]	@ (8007a10 <_printf_float+0x2cc>)
 80077cc:	4b91      	ldr	r3, [pc, #580]	@ (8007a14 <_printf_float+0x2d0>)
 80077ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80077d2:	bf94      	ite	ls
 80077d4:	4690      	movls	r8, r2
 80077d6:	4698      	movhi	r8, r3
 80077d8:	2303      	movs	r3, #3
 80077da:	6123      	str	r3, [r4, #16]
 80077dc:	f02b 0304 	bic.w	r3, fp, #4
 80077e0:	6023      	str	r3, [r4, #0]
 80077e2:	f04f 0900 	mov.w	r9, #0
 80077e6:	9700      	str	r7, [sp, #0]
 80077e8:	4633      	mov	r3, r6
 80077ea:	aa0b      	add	r2, sp, #44	@ 0x2c
 80077ec:	4621      	mov	r1, r4
 80077ee:	4628      	mov	r0, r5
 80077f0:	f000 f9d2 	bl	8007b98 <_printf_common>
 80077f4:	3001      	adds	r0, #1
 80077f6:	f040 808d 	bne.w	8007914 <_printf_float+0x1d0>
 80077fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077fe:	b00d      	add	sp, #52	@ 0x34
 8007800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007804:	4642      	mov	r2, r8
 8007806:	464b      	mov	r3, r9
 8007808:	4640      	mov	r0, r8
 800780a:	4649      	mov	r1, r9
 800780c:	f7f9 f98e 	bl	8000b2c <__aeabi_dcmpun>
 8007810:	b140      	cbz	r0, 8007824 <_printf_float+0xe0>
 8007812:	464b      	mov	r3, r9
 8007814:	2b00      	cmp	r3, #0
 8007816:	bfbc      	itt	lt
 8007818:	232d      	movlt	r3, #45	@ 0x2d
 800781a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800781e:	4a7e      	ldr	r2, [pc, #504]	@ (8007a18 <_printf_float+0x2d4>)
 8007820:	4b7e      	ldr	r3, [pc, #504]	@ (8007a1c <_printf_float+0x2d8>)
 8007822:	e7d4      	b.n	80077ce <_printf_float+0x8a>
 8007824:	6863      	ldr	r3, [r4, #4]
 8007826:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800782a:	9206      	str	r2, [sp, #24]
 800782c:	1c5a      	adds	r2, r3, #1
 800782e:	d13b      	bne.n	80078a8 <_printf_float+0x164>
 8007830:	2306      	movs	r3, #6
 8007832:	6063      	str	r3, [r4, #4]
 8007834:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007838:	2300      	movs	r3, #0
 800783a:	6022      	str	r2, [r4, #0]
 800783c:	9303      	str	r3, [sp, #12]
 800783e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007840:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007844:	ab09      	add	r3, sp, #36	@ 0x24
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	6861      	ldr	r1, [r4, #4]
 800784a:	ec49 8b10 	vmov	d0, r8, r9
 800784e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007852:	4628      	mov	r0, r5
 8007854:	f7ff fed7 	bl	8007606 <__cvt>
 8007858:	9b06      	ldr	r3, [sp, #24]
 800785a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800785c:	2b47      	cmp	r3, #71	@ 0x47
 800785e:	4680      	mov	r8, r0
 8007860:	d129      	bne.n	80078b6 <_printf_float+0x172>
 8007862:	1cc8      	adds	r0, r1, #3
 8007864:	db02      	blt.n	800786c <_printf_float+0x128>
 8007866:	6863      	ldr	r3, [r4, #4]
 8007868:	4299      	cmp	r1, r3
 800786a:	dd41      	ble.n	80078f0 <_printf_float+0x1ac>
 800786c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007870:	fa5f fa8a 	uxtb.w	sl, sl
 8007874:	3901      	subs	r1, #1
 8007876:	4652      	mov	r2, sl
 8007878:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800787c:	9109      	str	r1, [sp, #36]	@ 0x24
 800787e:	f7ff ff27 	bl	80076d0 <__exponent>
 8007882:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007884:	1813      	adds	r3, r2, r0
 8007886:	2a01      	cmp	r2, #1
 8007888:	4681      	mov	r9, r0
 800788a:	6123      	str	r3, [r4, #16]
 800788c:	dc02      	bgt.n	8007894 <_printf_float+0x150>
 800788e:	6822      	ldr	r2, [r4, #0]
 8007890:	07d2      	lsls	r2, r2, #31
 8007892:	d501      	bpl.n	8007898 <_printf_float+0x154>
 8007894:	3301      	adds	r3, #1
 8007896:	6123      	str	r3, [r4, #16]
 8007898:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800789c:	2b00      	cmp	r3, #0
 800789e:	d0a2      	beq.n	80077e6 <_printf_float+0xa2>
 80078a0:	232d      	movs	r3, #45	@ 0x2d
 80078a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078a6:	e79e      	b.n	80077e6 <_printf_float+0xa2>
 80078a8:	9a06      	ldr	r2, [sp, #24]
 80078aa:	2a47      	cmp	r2, #71	@ 0x47
 80078ac:	d1c2      	bne.n	8007834 <_printf_float+0xf0>
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d1c0      	bne.n	8007834 <_printf_float+0xf0>
 80078b2:	2301      	movs	r3, #1
 80078b4:	e7bd      	b.n	8007832 <_printf_float+0xee>
 80078b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80078ba:	d9db      	bls.n	8007874 <_printf_float+0x130>
 80078bc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80078c0:	d118      	bne.n	80078f4 <_printf_float+0x1b0>
 80078c2:	2900      	cmp	r1, #0
 80078c4:	6863      	ldr	r3, [r4, #4]
 80078c6:	dd0b      	ble.n	80078e0 <_printf_float+0x19c>
 80078c8:	6121      	str	r1, [r4, #16]
 80078ca:	b913      	cbnz	r3, 80078d2 <_printf_float+0x18e>
 80078cc:	6822      	ldr	r2, [r4, #0]
 80078ce:	07d0      	lsls	r0, r2, #31
 80078d0:	d502      	bpl.n	80078d8 <_printf_float+0x194>
 80078d2:	3301      	adds	r3, #1
 80078d4:	440b      	add	r3, r1
 80078d6:	6123      	str	r3, [r4, #16]
 80078d8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80078da:	f04f 0900 	mov.w	r9, #0
 80078de:	e7db      	b.n	8007898 <_printf_float+0x154>
 80078e0:	b913      	cbnz	r3, 80078e8 <_printf_float+0x1a4>
 80078e2:	6822      	ldr	r2, [r4, #0]
 80078e4:	07d2      	lsls	r2, r2, #31
 80078e6:	d501      	bpl.n	80078ec <_printf_float+0x1a8>
 80078e8:	3302      	adds	r3, #2
 80078ea:	e7f4      	b.n	80078d6 <_printf_float+0x192>
 80078ec:	2301      	movs	r3, #1
 80078ee:	e7f2      	b.n	80078d6 <_printf_float+0x192>
 80078f0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80078f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078f6:	4299      	cmp	r1, r3
 80078f8:	db05      	blt.n	8007906 <_printf_float+0x1c2>
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	6121      	str	r1, [r4, #16]
 80078fe:	07d8      	lsls	r0, r3, #31
 8007900:	d5ea      	bpl.n	80078d8 <_printf_float+0x194>
 8007902:	1c4b      	adds	r3, r1, #1
 8007904:	e7e7      	b.n	80078d6 <_printf_float+0x192>
 8007906:	2900      	cmp	r1, #0
 8007908:	bfd4      	ite	le
 800790a:	f1c1 0202 	rsble	r2, r1, #2
 800790e:	2201      	movgt	r2, #1
 8007910:	4413      	add	r3, r2
 8007912:	e7e0      	b.n	80078d6 <_printf_float+0x192>
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	055a      	lsls	r2, r3, #21
 8007918:	d407      	bmi.n	800792a <_printf_float+0x1e6>
 800791a:	6923      	ldr	r3, [r4, #16]
 800791c:	4642      	mov	r2, r8
 800791e:	4631      	mov	r1, r6
 8007920:	4628      	mov	r0, r5
 8007922:	47b8      	blx	r7
 8007924:	3001      	adds	r0, #1
 8007926:	d12b      	bne.n	8007980 <_printf_float+0x23c>
 8007928:	e767      	b.n	80077fa <_printf_float+0xb6>
 800792a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800792e:	f240 80dd 	bls.w	8007aec <_printf_float+0x3a8>
 8007932:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007936:	2200      	movs	r2, #0
 8007938:	2300      	movs	r3, #0
 800793a:	f7f9 f8c5 	bl	8000ac8 <__aeabi_dcmpeq>
 800793e:	2800      	cmp	r0, #0
 8007940:	d033      	beq.n	80079aa <_printf_float+0x266>
 8007942:	4a37      	ldr	r2, [pc, #220]	@ (8007a20 <_printf_float+0x2dc>)
 8007944:	2301      	movs	r3, #1
 8007946:	4631      	mov	r1, r6
 8007948:	4628      	mov	r0, r5
 800794a:	47b8      	blx	r7
 800794c:	3001      	adds	r0, #1
 800794e:	f43f af54 	beq.w	80077fa <_printf_float+0xb6>
 8007952:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007956:	4543      	cmp	r3, r8
 8007958:	db02      	blt.n	8007960 <_printf_float+0x21c>
 800795a:	6823      	ldr	r3, [r4, #0]
 800795c:	07d8      	lsls	r0, r3, #31
 800795e:	d50f      	bpl.n	8007980 <_printf_float+0x23c>
 8007960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007964:	4631      	mov	r1, r6
 8007966:	4628      	mov	r0, r5
 8007968:	47b8      	blx	r7
 800796a:	3001      	adds	r0, #1
 800796c:	f43f af45 	beq.w	80077fa <_printf_float+0xb6>
 8007970:	f04f 0900 	mov.w	r9, #0
 8007974:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007978:	f104 0a1a 	add.w	sl, r4, #26
 800797c:	45c8      	cmp	r8, r9
 800797e:	dc09      	bgt.n	8007994 <_printf_float+0x250>
 8007980:	6823      	ldr	r3, [r4, #0]
 8007982:	079b      	lsls	r3, r3, #30
 8007984:	f100 8103 	bmi.w	8007b8e <_printf_float+0x44a>
 8007988:	68e0      	ldr	r0, [r4, #12]
 800798a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800798c:	4298      	cmp	r0, r3
 800798e:	bfb8      	it	lt
 8007990:	4618      	movlt	r0, r3
 8007992:	e734      	b.n	80077fe <_printf_float+0xba>
 8007994:	2301      	movs	r3, #1
 8007996:	4652      	mov	r2, sl
 8007998:	4631      	mov	r1, r6
 800799a:	4628      	mov	r0, r5
 800799c:	47b8      	blx	r7
 800799e:	3001      	adds	r0, #1
 80079a0:	f43f af2b 	beq.w	80077fa <_printf_float+0xb6>
 80079a4:	f109 0901 	add.w	r9, r9, #1
 80079a8:	e7e8      	b.n	800797c <_printf_float+0x238>
 80079aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	dc39      	bgt.n	8007a24 <_printf_float+0x2e0>
 80079b0:	4a1b      	ldr	r2, [pc, #108]	@ (8007a20 <_printf_float+0x2dc>)
 80079b2:	2301      	movs	r3, #1
 80079b4:	4631      	mov	r1, r6
 80079b6:	4628      	mov	r0, r5
 80079b8:	47b8      	blx	r7
 80079ba:	3001      	adds	r0, #1
 80079bc:	f43f af1d 	beq.w	80077fa <_printf_float+0xb6>
 80079c0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80079c4:	ea59 0303 	orrs.w	r3, r9, r3
 80079c8:	d102      	bne.n	80079d0 <_printf_float+0x28c>
 80079ca:	6823      	ldr	r3, [r4, #0]
 80079cc:	07d9      	lsls	r1, r3, #31
 80079ce:	d5d7      	bpl.n	8007980 <_printf_float+0x23c>
 80079d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079d4:	4631      	mov	r1, r6
 80079d6:	4628      	mov	r0, r5
 80079d8:	47b8      	blx	r7
 80079da:	3001      	adds	r0, #1
 80079dc:	f43f af0d 	beq.w	80077fa <_printf_float+0xb6>
 80079e0:	f04f 0a00 	mov.w	sl, #0
 80079e4:	f104 0b1a 	add.w	fp, r4, #26
 80079e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079ea:	425b      	negs	r3, r3
 80079ec:	4553      	cmp	r3, sl
 80079ee:	dc01      	bgt.n	80079f4 <_printf_float+0x2b0>
 80079f0:	464b      	mov	r3, r9
 80079f2:	e793      	b.n	800791c <_printf_float+0x1d8>
 80079f4:	2301      	movs	r3, #1
 80079f6:	465a      	mov	r2, fp
 80079f8:	4631      	mov	r1, r6
 80079fa:	4628      	mov	r0, r5
 80079fc:	47b8      	blx	r7
 80079fe:	3001      	adds	r0, #1
 8007a00:	f43f aefb 	beq.w	80077fa <_printf_float+0xb6>
 8007a04:	f10a 0a01 	add.w	sl, sl, #1
 8007a08:	e7ee      	b.n	80079e8 <_printf_float+0x2a4>
 8007a0a:	bf00      	nop
 8007a0c:	7fefffff 	.word	0x7fefffff
 8007a10:	0800a438 	.word	0x0800a438
 8007a14:	0800a43c 	.word	0x0800a43c
 8007a18:	0800a440 	.word	0x0800a440
 8007a1c:	0800a444 	.word	0x0800a444
 8007a20:	0800a448 	.word	0x0800a448
 8007a24:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a26:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007a2a:	4553      	cmp	r3, sl
 8007a2c:	bfa8      	it	ge
 8007a2e:	4653      	movge	r3, sl
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	4699      	mov	r9, r3
 8007a34:	dc36      	bgt.n	8007aa4 <_printf_float+0x360>
 8007a36:	f04f 0b00 	mov.w	fp, #0
 8007a3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a3e:	f104 021a 	add.w	r2, r4, #26
 8007a42:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007a44:	9306      	str	r3, [sp, #24]
 8007a46:	eba3 0309 	sub.w	r3, r3, r9
 8007a4a:	455b      	cmp	r3, fp
 8007a4c:	dc31      	bgt.n	8007ab2 <_printf_float+0x36e>
 8007a4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a50:	459a      	cmp	sl, r3
 8007a52:	dc3a      	bgt.n	8007aca <_printf_float+0x386>
 8007a54:	6823      	ldr	r3, [r4, #0]
 8007a56:	07da      	lsls	r2, r3, #31
 8007a58:	d437      	bmi.n	8007aca <_printf_float+0x386>
 8007a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a5c:	ebaa 0903 	sub.w	r9, sl, r3
 8007a60:	9b06      	ldr	r3, [sp, #24]
 8007a62:	ebaa 0303 	sub.w	r3, sl, r3
 8007a66:	4599      	cmp	r9, r3
 8007a68:	bfa8      	it	ge
 8007a6a:	4699      	movge	r9, r3
 8007a6c:	f1b9 0f00 	cmp.w	r9, #0
 8007a70:	dc33      	bgt.n	8007ada <_printf_float+0x396>
 8007a72:	f04f 0800 	mov.w	r8, #0
 8007a76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a7a:	f104 0b1a 	add.w	fp, r4, #26
 8007a7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a80:	ebaa 0303 	sub.w	r3, sl, r3
 8007a84:	eba3 0309 	sub.w	r3, r3, r9
 8007a88:	4543      	cmp	r3, r8
 8007a8a:	f77f af79 	ble.w	8007980 <_printf_float+0x23c>
 8007a8e:	2301      	movs	r3, #1
 8007a90:	465a      	mov	r2, fp
 8007a92:	4631      	mov	r1, r6
 8007a94:	4628      	mov	r0, r5
 8007a96:	47b8      	blx	r7
 8007a98:	3001      	adds	r0, #1
 8007a9a:	f43f aeae 	beq.w	80077fa <_printf_float+0xb6>
 8007a9e:	f108 0801 	add.w	r8, r8, #1
 8007aa2:	e7ec      	b.n	8007a7e <_printf_float+0x33a>
 8007aa4:	4642      	mov	r2, r8
 8007aa6:	4631      	mov	r1, r6
 8007aa8:	4628      	mov	r0, r5
 8007aaa:	47b8      	blx	r7
 8007aac:	3001      	adds	r0, #1
 8007aae:	d1c2      	bne.n	8007a36 <_printf_float+0x2f2>
 8007ab0:	e6a3      	b.n	80077fa <_printf_float+0xb6>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	4631      	mov	r1, r6
 8007ab6:	4628      	mov	r0, r5
 8007ab8:	9206      	str	r2, [sp, #24]
 8007aba:	47b8      	blx	r7
 8007abc:	3001      	adds	r0, #1
 8007abe:	f43f ae9c 	beq.w	80077fa <_printf_float+0xb6>
 8007ac2:	9a06      	ldr	r2, [sp, #24]
 8007ac4:	f10b 0b01 	add.w	fp, fp, #1
 8007ac8:	e7bb      	b.n	8007a42 <_printf_float+0x2fe>
 8007aca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ace:	4631      	mov	r1, r6
 8007ad0:	4628      	mov	r0, r5
 8007ad2:	47b8      	blx	r7
 8007ad4:	3001      	adds	r0, #1
 8007ad6:	d1c0      	bne.n	8007a5a <_printf_float+0x316>
 8007ad8:	e68f      	b.n	80077fa <_printf_float+0xb6>
 8007ada:	9a06      	ldr	r2, [sp, #24]
 8007adc:	464b      	mov	r3, r9
 8007ade:	4442      	add	r2, r8
 8007ae0:	4631      	mov	r1, r6
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	47b8      	blx	r7
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	d1c3      	bne.n	8007a72 <_printf_float+0x32e>
 8007aea:	e686      	b.n	80077fa <_printf_float+0xb6>
 8007aec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007af0:	f1ba 0f01 	cmp.w	sl, #1
 8007af4:	dc01      	bgt.n	8007afa <_printf_float+0x3b6>
 8007af6:	07db      	lsls	r3, r3, #31
 8007af8:	d536      	bpl.n	8007b68 <_printf_float+0x424>
 8007afa:	2301      	movs	r3, #1
 8007afc:	4642      	mov	r2, r8
 8007afe:	4631      	mov	r1, r6
 8007b00:	4628      	mov	r0, r5
 8007b02:	47b8      	blx	r7
 8007b04:	3001      	adds	r0, #1
 8007b06:	f43f ae78 	beq.w	80077fa <_printf_float+0xb6>
 8007b0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b0e:	4631      	mov	r1, r6
 8007b10:	4628      	mov	r0, r5
 8007b12:	47b8      	blx	r7
 8007b14:	3001      	adds	r0, #1
 8007b16:	f43f ae70 	beq.w	80077fa <_printf_float+0xb6>
 8007b1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b1e:	2200      	movs	r2, #0
 8007b20:	2300      	movs	r3, #0
 8007b22:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007b26:	f7f8 ffcf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b2a:	b9c0      	cbnz	r0, 8007b5e <_printf_float+0x41a>
 8007b2c:	4653      	mov	r3, sl
 8007b2e:	f108 0201 	add.w	r2, r8, #1
 8007b32:	4631      	mov	r1, r6
 8007b34:	4628      	mov	r0, r5
 8007b36:	47b8      	blx	r7
 8007b38:	3001      	adds	r0, #1
 8007b3a:	d10c      	bne.n	8007b56 <_printf_float+0x412>
 8007b3c:	e65d      	b.n	80077fa <_printf_float+0xb6>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	465a      	mov	r2, fp
 8007b42:	4631      	mov	r1, r6
 8007b44:	4628      	mov	r0, r5
 8007b46:	47b8      	blx	r7
 8007b48:	3001      	adds	r0, #1
 8007b4a:	f43f ae56 	beq.w	80077fa <_printf_float+0xb6>
 8007b4e:	f108 0801 	add.w	r8, r8, #1
 8007b52:	45d0      	cmp	r8, sl
 8007b54:	dbf3      	blt.n	8007b3e <_printf_float+0x3fa>
 8007b56:	464b      	mov	r3, r9
 8007b58:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007b5c:	e6df      	b.n	800791e <_printf_float+0x1da>
 8007b5e:	f04f 0800 	mov.w	r8, #0
 8007b62:	f104 0b1a 	add.w	fp, r4, #26
 8007b66:	e7f4      	b.n	8007b52 <_printf_float+0x40e>
 8007b68:	2301      	movs	r3, #1
 8007b6a:	4642      	mov	r2, r8
 8007b6c:	e7e1      	b.n	8007b32 <_printf_float+0x3ee>
 8007b6e:	2301      	movs	r3, #1
 8007b70:	464a      	mov	r2, r9
 8007b72:	4631      	mov	r1, r6
 8007b74:	4628      	mov	r0, r5
 8007b76:	47b8      	blx	r7
 8007b78:	3001      	adds	r0, #1
 8007b7a:	f43f ae3e 	beq.w	80077fa <_printf_float+0xb6>
 8007b7e:	f108 0801 	add.w	r8, r8, #1
 8007b82:	68e3      	ldr	r3, [r4, #12]
 8007b84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007b86:	1a5b      	subs	r3, r3, r1
 8007b88:	4543      	cmp	r3, r8
 8007b8a:	dcf0      	bgt.n	8007b6e <_printf_float+0x42a>
 8007b8c:	e6fc      	b.n	8007988 <_printf_float+0x244>
 8007b8e:	f04f 0800 	mov.w	r8, #0
 8007b92:	f104 0919 	add.w	r9, r4, #25
 8007b96:	e7f4      	b.n	8007b82 <_printf_float+0x43e>

08007b98 <_printf_common>:
 8007b98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b9c:	4616      	mov	r6, r2
 8007b9e:	4698      	mov	r8, r3
 8007ba0:	688a      	ldr	r2, [r1, #8]
 8007ba2:	690b      	ldr	r3, [r1, #16]
 8007ba4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	bfb8      	it	lt
 8007bac:	4613      	movlt	r3, r2
 8007bae:	6033      	str	r3, [r6, #0]
 8007bb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007bb4:	4607      	mov	r7, r0
 8007bb6:	460c      	mov	r4, r1
 8007bb8:	b10a      	cbz	r2, 8007bbe <_printf_common+0x26>
 8007bba:	3301      	adds	r3, #1
 8007bbc:	6033      	str	r3, [r6, #0]
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	0699      	lsls	r1, r3, #26
 8007bc2:	bf42      	ittt	mi
 8007bc4:	6833      	ldrmi	r3, [r6, #0]
 8007bc6:	3302      	addmi	r3, #2
 8007bc8:	6033      	strmi	r3, [r6, #0]
 8007bca:	6825      	ldr	r5, [r4, #0]
 8007bcc:	f015 0506 	ands.w	r5, r5, #6
 8007bd0:	d106      	bne.n	8007be0 <_printf_common+0x48>
 8007bd2:	f104 0a19 	add.w	sl, r4, #25
 8007bd6:	68e3      	ldr	r3, [r4, #12]
 8007bd8:	6832      	ldr	r2, [r6, #0]
 8007bda:	1a9b      	subs	r3, r3, r2
 8007bdc:	42ab      	cmp	r3, r5
 8007bde:	dc26      	bgt.n	8007c2e <_printf_common+0x96>
 8007be0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007be4:	6822      	ldr	r2, [r4, #0]
 8007be6:	3b00      	subs	r3, #0
 8007be8:	bf18      	it	ne
 8007bea:	2301      	movne	r3, #1
 8007bec:	0692      	lsls	r2, r2, #26
 8007bee:	d42b      	bmi.n	8007c48 <_printf_common+0xb0>
 8007bf0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007bf4:	4641      	mov	r1, r8
 8007bf6:	4638      	mov	r0, r7
 8007bf8:	47c8      	blx	r9
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	d01e      	beq.n	8007c3c <_printf_common+0xa4>
 8007bfe:	6823      	ldr	r3, [r4, #0]
 8007c00:	6922      	ldr	r2, [r4, #16]
 8007c02:	f003 0306 	and.w	r3, r3, #6
 8007c06:	2b04      	cmp	r3, #4
 8007c08:	bf02      	ittt	eq
 8007c0a:	68e5      	ldreq	r5, [r4, #12]
 8007c0c:	6833      	ldreq	r3, [r6, #0]
 8007c0e:	1aed      	subeq	r5, r5, r3
 8007c10:	68a3      	ldr	r3, [r4, #8]
 8007c12:	bf0c      	ite	eq
 8007c14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c18:	2500      	movne	r5, #0
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	bfc4      	itt	gt
 8007c1e:	1a9b      	subgt	r3, r3, r2
 8007c20:	18ed      	addgt	r5, r5, r3
 8007c22:	2600      	movs	r6, #0
 8007c24:	341a      	adds	r4, #26
 8007c26:	42b5      	cmp	r5, r6
 8007c28:	d11a      	bne.n	8007c60 <_printf_common+0xc8>
 8007c2a:	2000      	movs	r0, #0
 8007c2c:	e008      	b.n	8007c40 <_printf_common+0xa8>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	4652      	mov	r2, sl
 8007c32:	4641      	mov	r1, r8
 8007c34:	4638      	mov	r0, r7
 8007c36:	47c8      	blx	r9
 8007c38:	3001      	adds	r0, #1
 8007c3a:	d103      	bne.n	8007c44 <_printf_common+0xac>
 8007c3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c44:	3501      	adds	r5, #1
 8007c46:	e7c6      	b.n	8007bd6 <_printf_common+0x3e>
 8007c48:	18e1      	adds	r1, r4, r3
 8007c4a:	1c5a      	adds	r2, r3, #1
 8007c4c:	2030      	movs	r0, #48	@ 0x30
 8007c4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007c52:	4422      	add	r2, r4
 8007c54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007c58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007c5c:	3302      	adds	r3, #2
 8007c5e:	e7c7      	b.n	8007bf0 <_printf_common+0x58>
 8007c60:	2301      	movs	r3, #1
 8007c62:	4622      	mov	r2, r4
 8007c64:	4641      	mov	r1, r8
 8007c66:	4638      	mov	r0, r7
 8007c68:	47c8      	blx	r9
 8007c6a:	3001      	adds	r0, #1
 8007c6c:	d0e6      	beq.n	8007c3c <_printf_common+0xa4>
 8007c6e:	3601      	adds	r6, #1
 8007c70:	e7d9      	b.n	8007c26 <_printf_common+0x8e>
	...

08007c74 <_printf_i>:
 8007c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c78:	7e0f      	ldrb	r7, [r1, #24]
 8007c7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007c7c:	2f78      	cmp	r7, #120	@ 0x78
 8007c7e:	4691      	mov	r9, r2
 8007c80:	4680      	mov	r8, r0
 8007c82:	460c      	mov	r4, r1
 8007c84:	469a      	mov	sl, r3
 8007c86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007c8a:	d807      	bhi.n	8007c9c <_printf_i+0x28>
 8007c8c:	2f62      	cmp	r7, #98	@ 0x62
 8007c8e:	d80a      	bhi.n	8007ca6 <_printf_i+0x32>
 8007c90:	2f00      	cmp	r7, #0
 8007c92:	f000 80d2 	beq.w	8007e3a <_printf_i+0x1c6>
 8007c96:	2f58      	cmp	r7, #88	@ 0x58
 8007c98:	f000 80b9 	beq.w	8007e0e <_printf_i+0x19a>
 8007c9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ca0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ca4:	e03a      	b.n	8007d1c <_printf_i+0xa8>
 8007ca6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007caa:	2b15      	cmp	r3, #21
 8007cac:	d8f6      	bhi.n	8007c9c <_printf_i+0x28>
 8007cae:	a101      	add	r1, pc, #4	@ (adr r1, 8007cb4 <_printf_i+0x40>)
 8007cb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cb4:	08007d0d 	.word	0x08007d0d
 8007cb8:	08007d21 	.word	0x08007d21
 8007cbc:	08007c9d 	.word	0x08007c9d
 8007cc0:	08007c9d 	.word	0x08007c9d
 8007cc4:	08007c9d 	.word	0x08007c9d
 8007cc8:	08007c9d 	.word	0x08007c9d
 8007ccc:	08007d21 	.word	0x08007d21
 8007cd0:	08007c9d 	.word	0x08007c9d
 8007cd4:	08007c9d 	.word	0x08007c9d
 8007cd8:	08007c9d 	.word	0x08007c9d
 8007cdc:	08007c9d 	.word	0x08007c9d
 8007ce0:	08007e21 	.word	0x08007e21
 8007ce4:	08007d4b 	.word	0x08007d4b
 8007ce8:	08007ddb 	.word	0x08007ddb
 8007cec:	08007c9d 	.word	0x08007c9d
 8007cf0:	08007c9d 	.word	0x08007c9d
 8007cf4:	08007e43 	.word	0x08007e43
 8007cf8:	08007c9d 	.word	0x08007c9d
 8007cfc:	08007d4b 	.word	0x08007d4b
 8007d00:	08007c9d 	.word	0x08007c9d
 8007d04:	08007c9d 	.word	0x08007c9d
 8007d08:	08007de3 	.word	0x08007de3
 8007d0c:	6833      	ldr	r3, [r6, #0]
 8007d0e:	1d1a      	adds	r2, r3, #4
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	6032      	str	r2, [r6, #0]
 8007d14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	e09d      	b.n	8007e5c <_printf_i+0x1e8>
 8007d20:	6833      	ldr	r3, [r6, #0]
 8007d22:	6820      	ldr	r0, [r4, #0]
 8007d24:	1d19      	adds	r1, r3, #4
 8007d26:	6031      	str	r1, [r6, #0]
 8007d28:	0606      	lsls	r6, r0, #24
 8007d2a:	d501      	bpl.n	8007d30 <_printf_i+0xbc>
 8007d2c:	681d      	ldr	r5, [r3, #0]
 8007d2e:	e003      	b.n	8007d38 <_printf_i+0xc4>
 8007d30:	0645      	lsls	r5, r0, #25
 8007d32:	d5fb      	bpl.n	8007d2c <_printf_i+0xb8>
 8007d34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007d38:	2d00      	cmp	r5, #0
 8007d3a:	da03      	bge.n	8007d44 <_printf_i+0xd0>
 8007d3c:	232d      	movs	r3, #45	@ 0x2d
 8007d3e:	426d      	negs	r5, r5
 8007d40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d44:	4859      	ldr	r0, [pc, #356]	@ (8007eac <_printf_i+0x238>)
 8007d46:	230a      	movs	r3, #10
 8007d48:	e011      	b.n	8007d6e <_printf_i+0xfa>
 8007d4a:	6821      	ldr	r1, [r4, #0]
 8007d4c:	6833      	ldr	r3, [r6, #0]
 8007d4e:	0608      	lsls	r0, r1, #24
 8007d50:	f853 5b04 	ldr.w	r5, [r3], #4
 8007d54:	d402      	bmi.n	8007d5c <_printf_i+0xe8>
 8007d56:	0649      	lsls	r1, r1, #25
 8007d58:	bf48      	it	mi
 8007d5a:	b2ad      	uxthmi	r5, r5
 8007d5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007d5e:	4853      	ldr	r0, [pc, #332]	@ (8007eac <_printf_i+0x238>)
 8007d60:	6033      	str	r3, [r6, #0]
 8007d62:	bf14      	ite	ne
 8007d64:	230a      	movne	r3, #10
 8007d66:	2308      	moveq	r3, #8
 8007d68:	2100      	movs	r1, #0
 8007d6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007d6e:	6866      	ldr	r6, [r4, #4]
 8007d70:	60a6      	str	r6, [r4, #8]
 8007d72:	2e00      	cmp	r6, #0
 8007d74:	bfa2      	ittt	ge
 8007d76:	6821      	ldrge	r1, [r4, #0]
 8007d78:	f021 0104 	bicge.w	r1, r1, #4
 8007d7c:	6021      	strge	r1, [r4, #0]
 8007d7e:	b90d      	cbnz	r5, 8007d84 <_printf_i+0x110>
 8007d80:	2e00      	cmp	r6, #0
 8007d82:	d04b      	beq.n	8007e1c <_printf_i+0x1a8>
 8007d84:	4616      	mov	r6, r2
 8007d86:	fbb5 f1f3 	udiv	r1, r5, r3
 8007d8a:	fb03 5711 	mls	r7, r3, r1, r5
 8007d8e:	5dc7      	ldrb	r7, [r0, r7]
 8007d90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d94:	462f      	mov	r7, r5
 8007d96:	42bb      	cmp	r3, r7
 8007d98:	460d      	mov	r5, r1
 8007d9a:	d9f4      	bls.n	8007d86 <_printf_i+0x112>
 8007d9c:	2b08      	cmp	r3, #8
 8007d9e:	d10b      	bne.n	8007db8 <_printf_i+0x144>
 8007da0:	6823      	ldr	r3, [r4, #0]
 8007da2:	07df      	lsls	r7, r3, #31
 8007da4:	d508      	bpl.n	8007db8 <_printf_i+0x144>
 8007da6:	6923      	ldr	r3, [r4, #16]
 8007da8:	6861      	ldr	r1, [r4, #4]
 8007daa:	4299      	cmp	r1, r3
 8007dac:	bfde      	ittt	le
 8007dae:	2330      	movle	r3, #48	@ 0x30
 8007db0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007db4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007db8:	1b92      	subs	r2, r2, r6
 8007dba:	6122      	str	r2, [r4, #16]
 8007dbc:	f8cd a000 	str.w	sl, [sp]
 8007dc0:	464b      	mov	r3, r9
 8007dc2:	aa03      	add	r2, sp, #12
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	4640      	mov	r0, r8
 8007dc8:	f7ff fee6 	bl	8007b98 <_printf_common>
 8007dcc:	3001      	adds	r0, #1
 8007dce:	d14a      	bne.n	8007e66 <_printf_i+0x1f2>
 8007dd0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007dd4:	b004      	add	sp, #16
 8007dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dda:	6823      	ldr	r3, [r4, #0]
 8007ddc:	f043 0320 	orr.w	r3, r3, #32
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	4833      	ldr	r0, [pc, #204]	@ (8007eb0 <_printf_i+0x23c>)
 8007de4:	2778      	movs	r7, #120	@ 0x78
 8007de6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007dea:	6823      	ldr	r3, [r4, #0]
 8007dec:	6831      	ldr	r1, [r6, #0]
 8007dee:	061f      	lsls	r7, r3, #24
 8007df0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007df4:	d402      	bmi.n	8007dfc <_printf_i+0x188>
 8007df6:	065f      	lsls	r7, r3, #25
 8007df8:	bf48      	it	mi
 8007dfa:	b2ad      	uxthmi	r5, r5
 8007dfc:	6031      	str	r1, [r6, #0]
 8007dfe:	07d9      	lsls	r1, r3, #31
 8007e00:	bf44      	itt	mi
 8007e02:	f043 0320 	orrmi.w	r3, r3, #32
 8007e06:	6023      	strmi	r3, [r4, #0]
 8007e08:	b11d      	cbz	r5, 8007e12 <_printf_i+0x19e>
 8007e0a:	2310      	movs	r3, #16
 8007e0c:	e7ac      	b.n	8007d68 <_printf_i+0xf4>
 8007e0e:	4827      	ldr	r0, [pc, #156]	@ (8007eac <_printf_i+0x238>)
 8007e10:	e7e9      	b.n	8007de6 <_printf_i+0x172>
 8007e12:	6823      	ldr	r3, [r4, #0]
 8007e14:	f023 0320 	bic.w	r3, r3, #32
 8007e18:	6023      	str	r3, [r4, #0]
 8007e1a:	e7f6      	b.n	8007e0a <_printf_i+0x196>
 8007e1c:	4616      	mov	r6, r2
 8007e1e:	e7bd      	b.n	8007d9c <_printf_i+0x128>
 8007e20:	6833      	ldr	r3, [r6, #0]
 8007e22:	6825      	ldr	r5, [r4, #0]
 8007e24:	6961      	ldr	r1, [r4, #20]
 8007e26:	1d18      	adds	r0, r3, #4
 8007e28:	6030      	str	r0, [r6, #0]
 8007e2a:	062e      	lsls	r6, r5, #24
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	d501      	bpl.n	8007e34 <_printf_i+0x1c0>
 8007e30:	6019      	str	r1, [r3, #0]
 8007e32:	e002      	b.n	8007e3a <_printf_i+0x1c6>
 8007e34:	0668      	lsls	r0, r5, #25
 8007e36:	d5fb      	bpl.n	8007e30 <_printf_i+0x1bc>
 8007e38:	8019      	strh	r1, [r3, #0]
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	6123      	str	r3, [r4, #16]
 8007e3e:	4616      	mov	r6, r2
 8007e40:	e7bc      	b.n	8007dbc <_printf_i+0x148>
 8007e42:	6833      	ldr	r3, [r6, #0]
 8007e44:	1d1a      	adds	r2, r3, #4
 8007e46:	6032      	str	r2, [r6, #0]
 8007e48:	681e      	ldr	r6, [r3, #0]
 8007e4a:	6862      	ldr	r2, [r4, #4]
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	4630      	mov	r0, r6
 8007e50:	f7f8 f9be 	bl	80001d0 <memchr>
 8007e54:	b108      	cbz	r0, 8007e5a <_printf_i+0x1e6>
 8007e56:	1b80      	subs	r0, r0, r6
 8007e58:	6060      	str	r0, [r4, #4]
 8007e5a:	6863      	ldr	r3, [r4, #4]
 8007e5c:	6123      	str	r3, [r4, #16]
 8007e5e:	2300      	movs	r3, #0
 8007e60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e64:	e7aa      	b.n	8007dbc <_printf_i+0x148>
 8007e66:	6923      	ldr	r3, [r4, #16]
 8007e68:	4632      	mov	r2, r6
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	4640      	mov	r0, r8
 8007e6e:	47d0      	blx	sl
 8007e70:	3001      	adds	r0, #1
 8007e72:	d0ad      	beq.n	8007dd0 <_printf_i+0x15c>
 8007e74:	6823      	ldr	r3, [r4, #0]
 8007e76:	079b      	lsls	r3, r3, #30
 8007e78:	d413      	bmi.n	8007ea2 <_printf_i+0x22e>
 8007e7a:	68e0      	ldr	r0, [r4, #12]
 8007e7c:	9b03      	ldr	r3, [sp, #12]
 8007e7e:	4298      	cmp	r0, r3
 8007e80:	bfb8      	it	lt
 8007e82:	4618      	movlt	r0, r3
 8007e84:	e7a6      	b.n	8007dd4 <_printf_i+0x160>
 8007e86:	2301      	movs	r3, #1
 8007e88:	4632      	mov	r2, r6
 8007e8a:	4649      	mov	r1, r9
 8007e8c:	4640      	mov	r0, r8
 8007e8e:	47d0      	blx	sl
 8007e90:	3001      	adds	r0, #1
 8007e92:	d09d      	beq.n	8007dd0 <_printf_i+0x15c>
 8007e94:	3501      	adds	r5, #1
 8007e96:	68e3      	ldr	r3, [r4, #12]
 8007e98:	9903      	ldr	r1, [sp, #12]
 8007e9a:	1a5b      	subs	r3, r3, r1
 8007e9c:	42ab      	cmp	r3, r5
 8007e9e:	dcf2      	bgt.n	8007e86 <_printf_i+0x212>
 8007ea0:	e7eb      	b.n	8007e7a <_printf_i+0x206>
 8007ea2:	2500      	movs	r5, #0
 8007ea4:	f104 0619 	add.w	r6, r4, #25
 8007ea8:	e7f5      	b.n	8007e96 <_printf_i+0x222>
 8007eaa:	bf00      	nop
 8007eac:	0800a44a 	.word	0x0800a44a
 8007eb0:	0800a45b 	.word	0x0800a45b

08007eb4 <sniprintf>:
 8007eb4:	b40c      	push	{r2, r3}
 8007eb6:	b530      	push	{r4, r5, lr}
 8007eb8:	4b17      	ldr	r3, [pc, #92]	@ (8007f18 <sniprintf+0x64>)
 8007eba:	1e0c      	subs	r4, r1, #0
 8007ebc:	681d      	ldr	r5, [r3, #0]
 8007ebe:	b09d      	sub	sp, #116	@ 0x74
 8007ec0:	da08      	bge.n	8007ed4 <sniprintf+0x20>
 8007ec2:	238b      	movs	r3, #139	@ 0x8b
 8007ec4:	602b      	str	r3, [r5, #0]
 8007ec6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007eca:	b01d      	add	sp, #116	@ 0x74
 8007ecc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ed0:	b002      	add	sp, #8
 8007ed2:	4770      	bx	lr
 8007ed4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007ed8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007edc:	bf14      	ite	ne
 8007ede:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8007ee2:	4623      	moveq	r3, r4
 8007ee4:	9304      	str	r3, [sp, #16]
 8007ee6:	9307      	str	r3, [sp, #28]
 8007ee8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007eec:	9002      	str	r0, [sp, #8]
 8007eee:	9006      	str	r0, [sp, #24]
 8007ef0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007ef4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007ef6:	ab21      	add	r3, sp, #132	@ 0x84
 8007ef8:	a902      	add	r1, sp, #8
 8007efa:	4628      	mov	r0, r5
 8007efc:	9301      	str	r3, [sp, #4]
 8007efe:	f000 ffbf 	bl	8008e80 <_svfiprintf_r>
 8007f02:	1c43      	adds	r3, r0, #1
 8007f04:	bfbc      	itt	lt
 8007f06:	238b      	movlt	r3, #139	@ 0x8b
 8007f08:	602b      	strlt	r3, [r5, #0]
 8007f0a:	2c00      	cmp	r4, #0
 8007f0c:	d0dd      	beq.n	8007eca <sniprintf+0x16>
 8007f0e:	9b02      	ldr	r3, [sp, #8]
 8007f10:	2200      	movs	r2, #0
 8007f12:	701a      	strb	r2, [r3, #0]
 8007f14:	e7d9      	b.n	8007eca <sniprintf+0x16>
 8007f16:	bf00      	nop
 8007f18:	20000058 	.word	0x20000058

08007f1c <std>:
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	b510      	push	{r4, lr}
 8007f20:	4604      	mov	r4, r0
 8007f22:	e9c0 3300 	strd	r3, r3, [r0]
 8007f26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f2a:	6083      	str	r3, [r0, #8]
 8007f2c:	8181      	strh	r1, [r0, #12]
 8007f2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f30:	81c2      	strh	r2, [r0, #14]
 8007f32:	6183      	str	r3, [r0, #24]
 8007f34:	4619      	mov	r1, r3
 8007f36:	2208      	movs	r2, #8
 8007f38:	305c      	adds	r0, #92	@ 0x5c
 8007f3a:	f000 f8b1 	bl	80080a0 <memset>
 8007f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f74 <std+0x58>)
 8007f40:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f42:	4b0d      	ldr	r3, [pc, #52]	@ (8007f78 <std+0x5c>)
 8007f44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f46:	4b0d      	ldr	r3, [pc, #52]	@ (8007f7c <std+0x60>)
 8007f48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f80 <std+0x64>)
 8007f4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f84 <std+0x68>)
 8007f50:	6224      	str	r4, [r4, #32]
 8007f52:	429c      	cmp	r4, r3
 8007f54:	d006      	beq.n	8007f64 <std+0x48>
 8007f56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f5a:	4294      	cmp	r4, r2
 8007f5c:	d002      	beq.n	8007f64 <std+0x48>
 8007f5e:	33d0      	adds	r3, #208	@ 0xd0
 8007f60:	429c      	cmp	r4, r3
 8007f62:	d105      	bne.n	8007f70 <std+0x54>
 8007f64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f6c:	f000 b8ce 	b.w	800810c <__retarget_lock_init_recursive>
 8007f70:	bd10      	pop	{r4, pc}
 8007f72:	bf00      	nop
 8007f74:	08009a41 	.word	0x08009a41
 8007f78:	08009a63 	.word	0x08009a63
 8007f7c:	08009a9b 	.word	0x08009a9b
 8007f80:	08009abf 	.word	0x08009abf
 8007f84:	20000aa4 	.word	0x20000aa4

08007f88 <stdio_exit_handler>:
 8007f88:	4a02      	ldr	r2, [pc, #8]	@ (8007f94 <stdio_exit_handler+0xc>)
 8007f8a:	4903      	ldr	r1, [pc, #12]	@ (8007f98 <stdio_exit_handler+0x10>)
 8007f8c:	4803      	ldr	r0, [pc, #12]	@ (8007f9c <stdio_exit_handler+0x14>)
 8007f8e:	f000 b869 	b.w	8008064 <_fwalk_sglue>
 8007f92:	bf00      	nop
 8007f94:	2000004c 	.word	0x2000004c
 8007f98:	080092d5 	.word	0x080092d5
 8007f9c:	2000005c 	.word	0x2000005c

08007fa0 <cleanup_stdio>:
 8007fa0:	6841      	ldr	r1, [r0, #4]
 8007fa2:	4b0c      	ldr	r3, [pc, #48]	@ (8007fd4 <cleanup_stdio+0x34>)
 8007fa4:	4299      	cmp	r1, r3
 8007fa6:	b510      	push	{r4, lr}
 8007fa8:	4604      	mov	r4, r0
 8007faa:	d001      	beq.n	8007fb0 <cleanup_stdio+0x10>
 8007fac:	f001 f992 	bl	80092d4 <_fflush_r>
 8007fb0:	68a1      	ldr	r1, [r4, #8]
 8007fb2:	4b09      	ldr	r3, [pc, #36]	@ (8007fd8 <cleanup_stdio+0x38>)
 8007fb4:	4299      	cmp	r1, r3
 8007fb6:	d002      	beq.n	8007fbe <cleanup_stdio+0x1e>
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f001 f98b 	bl	80092d4 <_fflush_r>
 8007fbe:	68e1      	ldr	r1, [r4, #12]
 8007fc0:	4b06      	ldr	r3, [pc, #24]	@ (8007fdc <cleanup_stdio+0x3c>)
 8007fc2:	4299      	cmp	r1, r3
 8007fc4:	d004      	beq.n	8007fd0 <cleanup_stdio+0x30>
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fcc:	f001 b982 	b.w	80092d4 <_fflush_r>
 8007fd0:	bd10      	pop	{r4, pc}
 8007fd2:	bf00      	nop
 8007fd4:	20000aa4 	.word	0x20000aa4
 8007fd8:	20000b0c 	.word	0x20000b0c
 8007fdc:	20000b74 	.word	0x20000b74

08007fe0 <global_stdio_init.part.0>:
 8007fe0:	b510      	push	{r4, lr}
 8007fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8008010 <global_stdio_init.part.0+0x30>)
 8007fe4:	4c0b      	ldr	r4, [pc, #44]	@ (8008014 <global_stdio_init.part.0+0x34>)
 8007fe6:	4a0c      	ldr	r2, [pc, #48]	@ (8008018 <global_stdio_init.part.0+0x38>)
 8007fe8:	601a      	str	r2, [r3, #0]
 8007fea:	4620      	mov	r0, r4
 8007fec:	2200      	movs	r2, #0
 8007fee:	2104      	movs	r1, #4
 8007ff0:	f7ff ff94 	bl	8007f1c <std>
 8007ff4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007ff8:	2201      	movs	r2, #1
 8007ffa:	2109      	movs	r1, #9
 8007ffc:	f7ff ff8e 	bl	8007f1c <std>
 8008000:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008004:	2202      	movs	r2, #2
 8008006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800800a:	2112      	movs	r1, #18
 800800c:	f7ff bf86 	b.w	8007f1c <std>
 8008010:	20000bdc 	.word	0x20000bdc
 8008014:	20000aa4 	.word	0x20000aa4
 8008018:	08007f89 	.word	0x08007f89

0800801c <__sfp_lock_acquire>:
 800801c:	4801      	ldr	r0, [pc, #4]	@ (8008024 <__sfp_lock_acquire+0x8>)
 800801e:	f000 b876 	b.w	800810e <__retarget_lock_acquire_recursive>
 8008022:	bf00      	nop
 8008024:	20000be1 	.word	0x20000be1

08008028 <__sfp_lock_release>:
 8008028:	4801      	ldr	r0, [pc, #4]	@ (8008030 <__sfp_lock_release+0x8>)
 800802a:	f000 b871 	b.w	8008110 <__retarget_lock_release_recursive>
 800802e:	bf00      	nop
 8008030:	20000be1 	.word	0x20000be1

08008034 <__sinit>:
 8008034:	b510      	push	{r4, lr}
 8008036:	4604      	mov	r4, r0
 8008038:	f7ff fff0 	bl	800801c <__sfp_lock_acquire>
 800803c:	6a23      	ldr	r3, [r4, #32]
 800803e:	b11b      	cbz	r3, 8008048 <__sinit+0x14>
 8008040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008044:	f7ff bff0 	b.w	8008028 <__sfp_lock_release>
 8008048:	4b04      	ldr	r3, [pc, #16]	@ (800805c <__sinit+0x28>)
 800804a:	6223      	str	r3, [r4, #32]
 800804c:	4b04      	ldr	r3, [pc, #16]	@ (8008060 <__sinit+0x2c>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d1f5      	bne.n	8008040 <__sinit+0xc>
 8008054:	f7ff ffc4 	bl	8007fe0 <global_stdio_init.part.0>
 8008058:	e7f2      	b.n	8008040 <__sinit+0xc>
 800805a:	bf00      	nop
 800805c:	08007fa1 	.word	0x08007fa1
 8008060:	20000bdc 	.word	0x20000bdc

08008064 <_fwalk_sglue>:
 8008064:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008068:	4607      	mov	r7, r0
 800806a:	4688      	mov	r8, r1
 800806c:	4614      	mov	r4, r2
 800806e:	2600      	movs	r6, #0
 8008070:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008074:	f1b9 0901 	subs.w	r9, r9, #1
 8008078:	d505      	bpl.n	8008086 <_fwalk_sglue+0x22>
 800807a:	6824      	ldr	r4, [r4, #0]
 800807c:	2c00      	cmp	r4, #0
 800807e:	d1f7      	bne.n	8008070 <_fwalk_sglue+0xc>
 8008080:	4630      	mov	r0, r6
 8008082:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008086:	89ab      	ldrh	r3, [r5, #12]
 8008088:	2b01      	cmp	r3, #1
 800808a:	d907      	bls.n	800809c <_fwalk_sglue+0x38>
 800808c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008090:	3301      	adds	r3, #1
 8008092:	d003      	beq.n	800809c <_fwalk_sglue+0x38>
 8008094:	4629      	mov	r1, r5
 8008096:	4638      	mov	r0, r7
 8008098:	47c0      	blx	r8
 800809a:	4306      	orrs	r6, r0
 800809c:	3568      	adds	r5, #104	@ 0x68
 800809e:	e7e9      	b.n	8008074 <_fwalk_sglue+0x10>

080080a0 <memset>:
 80080a0:	4402      	add	r2, r0
 80080a2:	4603      	mov	r3, r0
 80080a4:	4293      	cmp	r3, r2
 80080a6:	d100      	bne.n	80080aa <memset+0xa>
 80080a8:	4770      	bx	lr
 80080aa:	f803 1b01 	strb.w	r1, [r3], #1
 80080ae:	e7f9      	b.n	80080a4 <memset+0x4>

080080b0 <_localeconv_r>:
 80080b0:	4800      	ldr	r0, [pc, #0]	@ (80080b4 <_localeconv_r+0x4>)
 80080b2:	4770      	bx	lr
 80080b4:	20000198 	.word	0x20000198

080080b8 <__errno>:
 80080b8:	4b01      	ldr	r3, [pc, #4]	@ (80080c0 <__errno+0x8>)
 80080ba:	6818      	ldr	r0, [r3, #0]
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	20000058 	.word	0x20000058

080080c4 <__libc_init_array>:
 80080c4:	b570      	push	{r4, r5, r6, lr}
 80080c6:	4d0d      	ldr	r5, [pc, #52]	@ (80080fc <__libc_init_array+0x38>)
 80080c8:	4c0d      	ldr	r4, [pc, #52]	@ (8008100 <__libc_init_array+0x3c>)
 80080ca:	1b64      	subs	r4, r4, r5
 80080cc:	10a4      	asrs	r4, r4, #2
 80080ce:	2600      	movs	r6, #0
 80080d0:	42a6      	cmp	r6, r4
 80080d2:	d109      	bne.n	80080e8 <__libc_init_array+0x24>
 80080d4:	4d0b      	ldr	r5, [pc, #44]	@ (8008104 <__libc_init_array+0x40>)
 80080d6:	4c0c      	ldr	r4, [pc, #48]	@ (8008108 <__libc_init_array+0x44>)
 80080d8:	f002 f8ee 	bl	800a2b8 <_init>
 80080dc:	1b64      	subs	r4, r4, r5
 80080de:	10a4      	asrs	r4, r4, #2
 80080e0:	2600      	movs	r6, #0
 80080e2:	42a6      	cmp	r6, r4
 80080e4:	d105      	bne.n	80080f2 <__libc_init_array+0x2e>
 80080e6:	bd70      	pop	{r4, r5, r6, pc}
 80080e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ec:	4798      	blx	r3
 80080ee:	3601      	adds	r6, #1
 80080f0:	e7ee      	b.n	80080d0 <__libc_init_array+0xc>
 80080f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80080f6:	4798      	blx	r3
 80080f8:	3601      	adds	r6, #1
 80080fa:	e7f2      	b.n	80080e2 <__libc_init_array+0x1e>
 80080fc:	0800a7b0 	.word	0x0800a7b0
 8008100:	0800a7b0 	.word	0x0800a7b0
 8008104:	0800a7b0 	.word	0x0800a7b0
 8008108:	0800a7b4 	.word	0x0800a7b4

0800810c <__retarget_lock_init_recursive>:
 800810c:	4770      	bx	lr

0800810e <__retarget_lock_acquire_recursive>:
 800810e:	4770      	bx	lr

08008110 <__retarget_lock_release_recursive>:
 8008110:	4770      	bx	lr

08008112 <memcpy>:
 8008112:	440a      	add	r2, r1
 8008114:	4291      	cmp	r1, r2
 8008116:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800811a:	d100      	bne.n	800811e <memcpy+0xc>
 800811c:	4770      	bx	lr
 800811e:	b510      	push	{r4, lr}
 8008120:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008124:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008128:	4291      	cmp	r1, r2
 800812a:	d1f9      	bne.n	8008120 <memcpy+0xe>
 800812c:	bd10      	pop	{r4, pc}

0800812e <quorem>:
 800812e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008132:	6903      	ldr	r3, [r0, #16]
 8008134:	690c      	ldr	r4, [r1, #16]
 8008136:	42a3      	cmp	r3, r4
 8008138:	4607      	mov	r7, r0
 800813a:	db7e      	blt.n	800823a <quorem+0x10c>
 800813c:	3c01      	subs	r4, #1
 800813e:	f101 0814 	add.w	r8, r1, #20
 8008142:	00a3      	lsls	r3, r4, #2
 8008144:	f100 0514 	add.w	r5, r0, #20
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800814e:	9301      	str	r3, [sp, #4]
 8008150:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008154:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008158:	3301      	adds	r3, #1
 800815a:	429a      	cmp	r2, r3
 800815c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008160:	fbb2 f6f3 	udiv	r6, r2, r3
 8008164:	d32e      	bcc.n	80081c4 <quorem+0x96>
 8008166:	f04f 0a00 	mov.w	sl, #0
 800816a:	46c4      	mov	ip, r8
 800816c:	46ae      	mov	lr, r5
 800816e:	46d3      	mov	fp, sl
 8008170:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008174:	b298      	uxth	r0, r3
 8008176:	fb06 a000 	mla	r0, r6, r0, sl
 800817a:	0c02      	lsrs	r2, r0, #16
 800817c:	0c1b      	lsrs	r3, r3, #16
 800817e:	fb06 2303 	mla	r3, r6, r3, r2
 8008182:	f8de 2000 	ldr.w	r2, [lr]
 8008186:	b280      	uxth	r0, r0
 8008188:	b292      	uxth	r2, r2
 800818a:	1a12      	subs	r2, r2, r0
 800818c:	445a      	add	r2, fp
 800818e:	f8de 0000 	ldr.w	r0, [lr]
 8008192:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008196:	b29b      	uxth	r3, r3
 8008198:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800819c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80081a0:	b292      	uxth	r2, r2
 80081a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80081a6:	45e1      	cmp	r9, ip
 80081a8:	f84e 2b04 	str.w	r2, [lr], #4
 80081ac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80081b0:	d2de      	bcs.n	8008170 <quorem+0x42>
 80081b2:	9b00      	ldr	r3, [sp, #0]
 80081b4:	58eb      	ldr	r3, [r5, r3]
 80081b6:	b92b      	cbnz	r3, 80081c4 <quorem+0x96>
 80081b8:	9b01      	ldr	r3, [sp, #4]
 80081ba:	3b04      	subs	r3, #4
 80081bc:	429d      	cmp	r5, r3
 80081be:	461a      	mov	r2, r3
 80081c0:	d32f      	bcc.n	8008222 <quorem+0xf4>
 80081c2:	613c      	str	r4, [r7, #16]
 80081c4:	4638      	mov	r0, r7
 80081c6:	f001 fb33 	bl	8009830 <__mcmp>
 80081ca:	2800      	cmp	r0, #0
 80081cc:	db25      	blt.n	800821a <quorem+0xec>
 80081ce:	4629      	mov	r1, r5
 80081d0:	2000      	movs	r0, #0
 80081d2:	f858 2b04 	ldr.w	r2, [r8], #4
 80081d6:	f8d1 c000 	ldr.w	ip, [r1]
 80081da:	fa1f fe82 	uxth.w	lr, r2
 80081de:	fa1f f38c 	uxth.w	r3, ip
 80081e2:	eba3 030e 	sub.w	r3, r3, lr
 80081e6:	4403      	add	r3, r0
 80081e8:	0c12      	lsrs	r2, r2, #16
 80081ea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80081ee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80081f2:	b29b      	uxth	r3, r3
 80081f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081f8:	45c1      	cmp	r9, r8
 80081fa:	f841 3b04 	str.w	r3, [r1], #4
 80081fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008202:	d2e6      	bcs.n	80081d2 <quorem+0xa4>
 8008204:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008208:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800820c:	b922      	cbnz	r2, 8008218 <quorem+0xea>
 800820e:	3b04      	subs	r3, #4
 8008210:	429d      	cmp	r5, r3
 8008212:	461a      	mov	r2, r3
 8008214:	d30b      	bcc.n	800822e <quorem+0x100>
 8008216:	613c      	str	r4, [r7, #16]
 8008218:	3601      	adds	r6, #1
 800821a:	4630      	mov	r0, r6
 800821c:	b003      	add	sp, #12
 800821e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008222:	6812      	ldr	r2, [r2, #0]
 8008224:	3b04      	subs	r3, #4
 8008226:	2a00      	cmp	r2, #0
 8008228:	d1cb      	bne.n	80081c2 <quorem+0x94>
 800822a:	3c01      	subs	r4, #1
 800822c:	e7c6      	b.n	80081bc <quorem+0x8e>
 800822e:	6812      	ldr	r2, [r2, #0]
 8008230:	3b04      	subs	r3, #4
 8008232:	2a00      	cmp	r2, #0
 8008234:	d1ef      	bne.n	8008216 <quorem+0xe8>
 8008236:	3c01      	subs	r4, #1
 8008238:	e7ea      	b.n	8008210 <quorem+0xe2>
 800823a:	2000      	movs	r0, #0
 800823c:	e7ee      	b.n	800821c <quorem+0xee>
	...

08008240 <_dtoa_r>:
 8008240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008244:	69c7      	ldr	r7, [r0, #28]
 8008246:	b099      	sub	sp, #100	@ 0x64
 8008248:	ed8d 0b02 	vstr	d0, [sp, #8]
 800824c:	ec55 4b10 	vmov	r4, r5, d0
 8008250:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008252:	9109      	str	r1, [sp, #36]	@ 0x24
 8008254:	4683      	mov	fp, r0
 8008256:	920e      	str	r2, [sp, #56]	@ 0x38
 8008258:	9313      	str	r3, [sp, #76]	@ 0x4c
 800825a:	b97f      	cbnz	r7, 800827c <_dtoa_r+0x3c>
 800825c:	2010      	movs	r0, #16
 800825e:	f000 ff0b 	bl	8009078 <malloc>
 8008262:	4602      	mov	r2, r0
 8008264:	f8cb 001c 	str.w	r0, [fp, #28]
 8008268:	b920      	cbnz	r0, 8008274 <_dtoa_r+0x34>
 800826a:	4ba7      	ldr	r3, [pc, #668]	@ (8008508 <_dtoa_r+0x2c8>)
 800826c:	21ef      	movs	r1, #239	@ 0xef
 800826e:	48a7      	ldr	r0, [pc, #668]	@ (800850c <_dtoa_r+0x2cc>)
 8008270:	f001 fcc8 	bl	8009c04 <__assert_func>
 8008274:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008278:	6007      	str	r7, [r0, #0]
 800827a:	60c7      	str	r7, [r0, #12]
 800827c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008280:	6819      	ldr	r1, [r3, #0]
 8008282:	b159      	cbz	r1, 800829c <_dtoa_r+0x5c>
 8008284:	685a      	ldr	r2, [r3, #4]
 8008286:	604a      	str	r2, [r1, #4]
 8008288:	2301      	movs	r3, #1
 800828a:	4093      	lsls	r3, r2
 800828c:	608b      	str	r3, [r1, #8]
 800828e:	4658      	mov	r0, fp
 8008290:	f001 f894 	bl	80093bc <_Bfree>
 8008294:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008298:	2200      	movs	r2, #0
 800829a:	601a      	str	r2, [r3, #0]
 800829c:	1e2b      	subs	r3, r5, #0
 800829e:	bfb9      	ittee	lt
 80082a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80082a4:	9303      	strlt	r3, [sp, #12]
 80082a6:	2300      	movge	r3, #0
 80082a8:	6033      	strge	r3, [r6, #0]
 80082aa:	9f03      	ldr	r7, [sp, #12]
 80082ac:	4b98      	ldr	r3, [pc, #608]	@ (8008510 <_dtoa_r+0x2d0>)
 80082ae:	bfbc      	itt	lt
 80082b0:	2201      	movlt	r2, #1
 80082b2:	6032      	strlt	r2, [r6, #0]
 80082b4:	43bb      	bics	r3, r7
 80082b6:	d112      	bne.n	80082de <_dtoa_r+0x9e>
 80082b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80082ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80082be:	6013      	str	r3, [r2, #0]
 80082c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80082c4:	4323      	orrs	r3, r4
 80082c6:	f000 854d 	beq.w	8008d64 <_dtoa_r+0xb24>
 80082ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80082cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008524 <_dtoa_r+0x2e4>
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f000 854f 	beq.w	8008d74 <_dtoa_r+0xb34>
 80082d6:	f10a 0303 	add.w	r3, sl, #3
 80082da:	f000 bd49 	b.w	8008d70 <_dtoa_r+0xb30>
 80082de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082e2:	2200      	movs	r2, #0
 80082e4:	ec51 0b17 	vmov	r0, r1, d7
 80082e8:	2300      	movs	r3, #0
 80082ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80082ee:	f7f8 fbeb 	bl	8000ac8 <__aeabi_dcmpeq>
 80082f2:	4680      	mov	r8, r0
 80082f4:	b158      	cbz	r0, 800830e <_dtoa_r+0xce>
 80082f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80082f8:	2301      	movs	r3, #1
 80082fa:	6013      	str	r3, [r2, #0]
 80082fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80082fe:	b113      	cbz	r3, 8008306 <_dtoa_r+0xc6>
 8008300:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008302:	4b84      	ldr	r3, [pc, #528]	@ (8008514 <_dtoa_r+0x2d4>)
 8008304:	6013      	str	r3, [r2, #0]
 8008306:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008528 <_dtoa_r+0x2e8>
 800830a:	f000 bd33 	b.w	8008d74 <_dtoa_r+0xb34>
 800830e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008312:	aa16      	add	r2, sp, #88	@ 0x58
 8008314:	a917      	add	r1, sp, #92	@ 0x5c
 8008316:	4658      	mov	r0, fp
 8008318:	f001 fb3a 	bl	8009990 <__d2b>
 800831c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008320:	4681      	mov	r9, r0
 8008322:	2e00      	cmp	r6, #0
 8008324:	d077      	beq.n	8008416 <_dtoa_r+0x1d6>
 8008326:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008328:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800832c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008330:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008334:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008338:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800833c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008340:	4619      	mov	r1, r3
 8008342:	2200      	movs	r2, #0
 8008344:	4b74      	ldr	r3, [pc, #464]	@ (8008518 <_dtoa_r+0x2d8>)
 8008346:	f7f7 ff9f 	bl	8000288 <__aeabi_dsub>
 800834a:	a369      	add	r3, pc, #420	@ (adr r3, 80084f0 <_dtoa_r+0x2b0>)
 800834c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008350:	f7f8 f952 	bl	80005f8 <__aeabi_dmul>
 8008354:	a368      	add	r3, pc, #416	@ (adr r3, 80084f8 <_dtoa_r+0x2b8>)
 8008356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835a:	f7f7 ff97 	bl	800028c <__adddf3>
 800835e:	4604      	mov	r4, r0
 8008360:	4630      	mov	r0, r6
 8008362:	460d      	mov	r5, r1
 8008364:	f7f8 f8de 	bl	8000524 <__aeabi_i2d>
 8008368:	a365      	add	r3, pc, #404	@ (adr r3, 8008500 <_dtoa_r+0x2c0>)
 800836a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836e:	f7f8 f943 	bl	80005f8 <__aeabi_dmul>
 8008372:	4602      	mov	r2, r0
 8008374:	460b      	mov	r3, r1
 8008376:	4620      	mov	r0, r4
 8008378:	4629      	mov	r1, r5
 800837a:	f7f7 ff87 	bl	800028c <__adddf3>
 800837e:	4604      	mov	r4, r0
 8008380:	460d      	mov	r5, r1
 8008382:	f7f8 fbe9 	bl	8000b58 <__aeabi_d2iz>
 8008386:	2200      	movs	r2, #0
 8008388:	4607      	mov	r7, r0
 800838a:	2300      	movs	r3, #0
 800838c:	4620      	mov	r0, r4
 800838e:	4629      	mov	r1, r5
 8008390:	f7f8 fba4 	bl	8000adc <__aeabi_dcmplt>
 8008394:	b140      	cbz	r0, 80083a8 <_dtoa_r+0x168>
 8008396:	4638      	mov	r0, r7
 8008398:	f7f8 f8c4 	bl	8000524 <__aeabi_i2d>
 800839c:	4622      	mov	r2, r4
 800839e:	462b      	mov	r3, r5
 80083a0:	f7f8 fb92 	bl	8000ac8 <__aeabi_dcmpeq>
 80083a4:	b900      	cbnz	r0, 80083a8 <_dtoa_r+0x168>
 80083a6:	3f01      	subs	r7, #1
 80083a8:	2f16      	cmp	r7, #22
 80083aa:	d851      	bhi.n	8008450 <_dtoa_r+0x210>
 80083ac:	4b5b      	ldr	r3, [pc, #364]	@ (800851c <_dtoa_r+0x2dc>)
 80083ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80083b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083ba:	f7f8 fb8f 	bl	8000adc <__aeabi_dcmplt>
 80083be:	2800      	cmp	r0, #0
 80083c0:	d048      	beq.n	8008454 <_dtoa_r+0x214>
 80083c2:	3f01      	subs	r7, #1
 80083c4:	2300      	movs	r3, #0
 80083c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80083c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80083ca:	1b9b      	subs	r3, r3, r6
 80083cc:	1e5a      	subs	r2, r3, #1
 80083ce:	bf44      	itt	mi
 80083d0:	f1c3 0801 	rsbmi	r8, r3, #1
 80083d4:	2300      	movmi	r3, #0
 80083d6:	9208      	str	r2, [sp, #32]
 80083d8:	bf54      	ite	pl
 80083da:	f04f 0800 	movpl.w	r8, #0
 80083de:	9308      	strmi	r3, [sp, #32]
 80083e0:	2f00      	cmp	r7, #0
 80083e2:	db39      	blt.n	8008458 <_dtoa_r+0x218>
 80083e4:	9b08      	ldr	r3, [sp, #32]
 80083e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80083e8:	443b      	add	r3, r7
 80083ea:	9308      	str	r3, [sp, #32]
 80083ec:	2300      	movs	r3, #0
 80083ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80083f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083f2:	2b09      	cmp	r3, #9
 80083f4:	d864      	bhi.n	80084c0 <_dtoa_r+0x280>
 80083f6:	2b05      	cmp	r3, #5
 80083f8:	bfc4      	itt	gt
 80083fa:	3b04      	subgt	r3, #4
 80083fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80083fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008400:	f1a3 0302 	sub.w	r3, r3, #2
 8008404:	bfcc      	ite	gt
 8008406:	2400      	movgt	r4, #0
 8008408:	2401      	movle	r4, #1
 800840a:	2b03      	cmp	r3, #3
 800840c:	d863      	bhi.n	80084d6 <_dtoa_r+0x296>
 800840e:	e8df f003 	tbb	[pc, r3]
 8008412:	372a      	.short	0x372a
 8008414:	5535      	.short	0x5535
 8008416:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800841a:	441e      	add	r6, r3
 800841c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008420:	2b20      	cmp	r3, #32
 8008422:	bfc1      	itttt	gt
 8008424:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008428:	409f      	lslgt	r7, r3
 800842a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800842e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008432:	bfd6      	itet	le
 8008434:	f1c3 0320 	rsble	r3, r3, #32
 8008438:	ea47 0003 	orrgt.w	r0, r7, r3
 800843c:	fa04 f003 	lslle.w	r0, r4, r3
 8008440:	f7f8 f860 	bl	8000504 <__aeabi_ui2d>
 8008444:	2201      	movs	r2, #1
 8008446:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800844a:	3e01      	subs	r6, #1
 800844c:	9214      	str	r2, [sp, #80]	@ 0x50
 800844e:	e777      	b.n	8008340 <_dtoa_r+0x100>
 8008450:	2301      	movs	r3, #1
 8008452:	e7b8      	b.n	80083c6 <_dtoa_r+0x186>
 8008454:	9012      	str	r0, [sp, #72]	@ 0x48
 8008456:	e7b7      	b.n	80083c8 <_dtoa_r+0x188>
 8008458:	427b      	negs	r3, r7
 800845a:	930a      	str	r3, [sp, #40]	@ 0x28
 800845c:	2300      	movs	r3, #0
 800845e:	eba8 0807 	sub.w	r8, r8, r7
 8008462:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008464:	e7c4      	b.n	80083f0 <_dtoa_r+0x1b0>
 8008466:	2300      	movs	r3, #0
 8008468:	930b      	str	r3, [sp, #44]	@ 0x2c
 800846a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800846c:	2b00      	cmp	r3, #0
 800846e:	dc35      	bgt.n	80084dc <_dtoa_r+0x29c>
 8008470:	2301      	movs	r3, #1
 8008472:	9300      	str	r3, [sp, #0]
 8008474:	9307      	str	r3, [sp, #28]
 8008476:	461a      	mov	r2, r3
 8008478:	920e      	str	r2, [sp, #56]	@ 0x38
 800847a:	e00b      	b.n	8008494 <_dtoa_r+0x254>
 800847c:	2301      	movs	r3, #1
 800847e:	e7f3      	b.n	8008468 <_dtoa_r+0x228>
 8008480:	2300      	movs	r3, #0
 8008482:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008484:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008486:	18fb      	adds	r3, r7, r3
 8008488:	9300      	str	r3, [sp, #0]
 800848a:	3301      	adds	r3, #1
 800848c:	2b01      	cmp	r3, #1
 800848e:	9307      	str	r3, [sp, #28]
 8008490:	bfb8      	it	lt
 8008492:	2301      	movlt	r3, #1
 8008494:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008498:	2100      	movs	r1, #0
 800849a:	2204      	movs	r2, #4
 800849c:	f102 0514 	add.w	r5, r2, #20
 80084a0:	429d      	cmp	r5, r3
 80084a2:	d91f      	bls.n	80084e4 <_dtoa_r+0x2a4>
 80084a4:	6041      	str	r1, [r0, #4]
 80084a6:	4658      	mov	r0, fp
 80084a8:	f000 ff48 	bl	800933c <_Balloc>
 80084ac:	4682      	mov	sl, r0
 80084ae:	2800      	cmp	r0, #0
 80084b0:	d13c      	bne.n	800852c <_dtoa_r+0x2ec>
 80084b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008520 <_dtoa_r+0x2e0>)
 80084b4:	4602      	mov	r2, r0
 80084b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80084ba:	e6d8      	b.n	800826e <_dtoa_r+0x2e>
 80084bc:	2301      	movs	r3, #1
 80084be:	e7e0      	b.n	8008482 <_dtoa_r+0x242>
 80084c0:	2401      	movs	r4, #1
 80084c2:	2300      	movs	r3, #0
 80084c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80084c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80084c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80084cc:	9300      	str	r3, [sp, #0]
 80084ce:	9307      	str	r3, [sp, #28]
 80084d0:	2200      	movs	r2, #0
 80084d2:	2312      	movs	r3, #18
 80084d4:	e7d0      	b.n	8008478 <_dtoa_r+0x238>
 80084d6:	2301      	movs	r3, #1
 80084d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084da:	e7f5      	b.n	80084c8 <_dtoa_r+0x288>
 80084dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80084de:	9300      	str	r3, [sp, #0]
 80084e0:	9307      	str	r3, [sp, #28]
 80084e2:	e7d7      	b.n	8008494 <_dtoa_r+0x254>
 80084e4:	3101      	adds	r1, #1
 80084e6:	0052      	lsls	r2, r2, #1
 80084e8:	e7d8      	b.n	800849c <_dtoa_r+0x25c>
 80084ea:	bf00      	nop
 80084ec:	f3af 8000 	nop.w
 80084f0:	636f4361 	.word	0x636f4361
 80084f4:	3fd287a7 	.word	0x3fd287a7
 80084f8:	8b60c8b3 	.word	0x8b60c8b3
 80084fc:	3fc68a28 	.word	0x3fc68a28
 8008500:	509f79fb 	.word	0x509f79fb
 8008504:	3fd34413 	.word	0x3fd34413
 8008508:	0800a479 	.word	0x0800a479
 800850c:	0800a490 	.word	0x0800a490
 8008510:	7ff00000 	.word	0x7ff00000
 8008514:	0800a449 	.word	0x0800a449
 8008518:	3ff80000 	.word	0x3ff80000
 800851c:	0800a598 	.word	0x0800a598
 8008520:	0800a4e8 	.word	0x0800a4e8
 8008524:	0800a475 	.word	0x0800a475
 8008528:	0800a448 	.word	0x0800a448
 800852c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008530:	6018      	str	r0, [r3, #0]
 8008532:	9b07      	ldr	r3, [sp, #28]
 8008534:	2b0e      	cmp	r3, #14
 8008536:	f200 80a4 	bhi.w	8008682 <_dtoa_r+0x442>
 800853a:	2c00      	cmp	r4, #0
 800853c:	f000 80a1 	beq.w	8008682 <_dtoa_r+0x442>
 8008540:	2f00      	cmp	r7, #0
 8008542:	dd33      	ble.n	80085ac <_dtoa_r+0x36c>
 8008544:	4bad      	ldr	r3, [pc, #692]	@ (80087fc <_dtoa_r+0x5bc>)
 8008546:	f007 020f 	and.w	r2, r7, #15
 800854a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800854e:	ed93 7b00 	vldr	d7, [r3]
 8008552:	05f8      	lsls	r0, r7, #23
 8008554:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008558:	ea4f 1427 	mov.w	r4, r7, asr #4
 800855c:	d516      	bpl.n	800858c <_dtoa_r+0x34c>
 800855e:	4ba8      	ldr	r3, [pc, #672]	@ (8008800 <_dtoa_r+0x5c0>)
 8008560:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008564:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008568:	f7f8 f970 	bl	800084c <__aeabi_ddiv>
 800856c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008570:	f004 040f 	and.w	r4, r4, #15
 8008574:	2603      	movs	r6, #3
 8008576:	4da2      	ldr	r5, [pc, #648]	@ (8008800 <_dtoa_r+0x5c0>)
 8008578:	b954      	cbnz	r4, 8008590 <_dtoa_r+0x350>
 800857a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800857e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008582:	f7f8 f963 	bl	800084c <__aeabi_ddiv>
 8008586:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800858a:	e028      	b.n	80085de <_dtoa_r+0x39e>
 800858c:	2602      	movs	r6, #2
 800858e:	e7f2      	b.n	8008576 <_dtoa_r+0x336>
 8008590:	07e1      	lsls	r1, r4, #31
 8008592:	d508      	bpl.n	80085a6 <_dtoa_r+0x366>
 8008594:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008598:	e9d5 2300 	ldrd	r2, r3, [r5]
 800859c:	f7f8 f82c 	bl	80005f8 <__aeabi_dmul>
 80085a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085a4:	3601      	adds	r6, #1
 80085a6:	1064      	asrs	r4, r4, #1
 80085a8:	3508      	adds	r5, #8
 80085aa:	e7e5      	b.n	8008578 <_dtoa_r+0x338>
 80085ac:	f000 80d2 	beq.w	8008754 <_dtoa_r+0x514>
 80085b0:	427c      	negs	r4, r7
 80085b2:	4b92      	ldr	r3, [pc, #584]	@ (80087fc <_dtoa_r+0x5bc>)
 80085b4:	4d92      	ldr	r5, [pc, #584]	@ (8008800 <_dtoa_r+0x5c0>)
 80085b6:	f004 020f 	and.w	r2, r4, #15
 80085ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085c6:	f7f8 f817 	bl	80005f8 <__aeabi_dmul>
 80085ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085ce:	1124      	asrs	r4, r4, #4
 80085d0:	2300      	movs	r3, #0
 80085d2:	2602      	movs	r6, #2
 80085d4:	2c00      	cmp	r4, #0
 80085d6:	f040 80b2 	bne.w	800873e <_dtoa_r+0x4fe>
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1d3      	bne.n	8008586 <_dtoa_r+0x346>
 80085de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80085e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f000 80b7 	beq.w	8008758 <_dtoa_r+0x518>
 80085ea:	4b86      	ldr	r3, [pc, #536]	@ (8008804 <_dtoa_r+0x5c4>)
 80085ec:	2200      	movs	r2, #0
 80085ee:	4620      	mov	r0, r4
 80085f0:	4629      	mov	r1, r5
 80085f2:	f7f8 fa73 	bl	8000adc <__aeabi_dcmplt>
 80085f6:	2800      	cmp	r0, #0
 80085f8:	f000 80ae 	beq.w	8008758 <_dtoa_r+0x518>
 80085fc:	9b07      	ldr	r3, [sp, #28]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	f000 80aa 	beq.w	8008758 <_dtoa_r+0x518>
 8008604:	9b00      	ldr	r3, [sp, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	dd37      	ble.n	800867a <_dtoa_r+0x43a>
 800860a:	1e7b      	subs	r3, r7, #1
 800860c:	9304      	str	r3, [sp, #16]
 800860e:	4620      	mov	r0, r4
 8008610:	4b7d      	ldr	r3, [pc, #500]	@ (8008808 <_dtoa_r+0x5c8>)
 8008612:	2200      	movs	r2, #0
 8008614:	4629      	mov	r1, r5
 8008616:	f7f7 ffef 	bl	80005f8 <__aeabi_dmul>
 800861a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800861e:	9c00      	ldr	r4, [sp, #0]
 8008620:	3601      	adds	r6, #1
 8008622:	4630      	mov	r0, r6
 8008624:	f7f7 ff7e 	bl	8000524 <__aeabi_i2d>
 8008628:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800862c:	f7f7 ffe4 	bl	80005f8 <__aeabi_dmul>
 8008630:	4b76      	ldr	r3, [pc, #472]	@ (800880c <_dtoa_r+0x5cc>)
 8008632:	2200      	movs	r2, #0
 8008634:	f7f7 fe2a 	bl	800028c <__adddf3>
 8008638:	4605      	mov	r5, r0
 800863a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800863e:	2c00      	cmp	r4, #0
 8008640:	f040 808d 	bne.w	800875e <_dtoa_r+0x51e>
 8008644:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008648:	4b71      	ldr	r3, [pc, #452]	@ (8008810 <_dtoa_r+0x5d0>)
 800864a:	2200      	movs	r2, #0
 800864c:	f7f7 fe1c 	bl	8000288 <__aeabi_dsub>
 8008650:	4602      	mov	r2, r0
 8008652:	460b      	mov	r3, r1
 8008654:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008658:	462a      	mov	r2, r5
 800865a:	4633      	mov	r3, r6
 800865c:	f7f8 fa5c 	bl	8000b18 <__aeabi_dcmpgt>
 8008660:	2800      	cmp	r0, #0
 8008662:	f040 828b 	bne.w	8008b7c <_dtoa_r+0x93c>
 8008666:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800866a:	462a      	mov	r2, r5
 800866c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008670:	f7f8 fa34 	bl	8000adc <__aeabi_dcmplt>
 8008674:	2800      	cmp	r0, #0
 8008676:	f040 8128 	bne.w	80088ca <_dtoa_r+0x68a>
 800867a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800867e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008682:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008684:	2b00      	cmp	r3, #0
 8008686:	f2c0 815a 	blt.w	800893e <_dtoa_r+0x6fe>
 800868a:	2f0e      	cmp	r7, #14
 800868c:	f300 8157 	bgt.w	800893e <_dtoa_r+0x6fe>
 8008690:	4b5a      	ldr	r3, [pc, #360]	@ (80087fc <_dtoa_r+0x5bc>)
 8008692:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008696:	ed93 7b00 	vldr	d7, [r3]
 800869a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800869c:	2b00      	cmp	r3, #0
 800869e:	ed8d 7b00 	vstr	d7, [sp]
 80086a2:	da03      	bge.n	80086ac <_dtoa_r+0x46c>
 80086a4:	9b07      	ldr	r3, [sp, #28]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f340 8101 	ble.w	80088ae <_dtoa_r+0x66e>
 80086ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80086b0:	4656      	mov	r6, sl
 80086b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086b6:	4620      	mov	r0, r4
 80086b8:	4629      	mov	r1, r5
 80086ba:	f7f8 f8c7 	bl	800084c <__aeabi_ddiv>
 80086be:	f7f8 fa4b 	bl	8000b58 <__aeabi_d2iz>
 80086c2:	4680      	mov	r8, r0
 80086c4:	f7f7 ff2e 	bl	8000524 <__aeabi_i2d>
 80086c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086cc:	f7f7 ff94 	bl	80005f8 <__aeabi_dmul>
 80086d0:	4602      	mov	r2, r0
 80086d2:	460b      	mov	r3, r1
 80086d4:	4620      	mov	r0, r4
 80086d6:	4629      	mov	r1, r5
 80086d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80086dc:	f7f7 fdd4 	bl	8000288 <__aeabi_dsub>
 80086e0:	f806 4b01 	strb.w	r4, [r6], #1
 80086e4:	9d07      	ldr	r5, [sp, #28]
 80086e6:	eba6 040a 	sub.w	r4, r6, sl
 80086ea:	42a5      	cmp	r5, r4
 80086ec:	4602      	mov	r2, r0
 80086ee:	460b      	mov	r3, r1
 80086f0:	f040 8117 	bne.w	8008922 <_dtoa_r+0x6e2>
 80086f4:	f7f7 fdca 	bl	800028c <__adddf3>
 80086f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086fc:	4604      	mov	r4, r0
 80086fe:	460d      	mov	r5, r1
 8008700:	f7f8 fa0a 	bl	8000b18 <__aeabi_dcmpgt>
 8008704:	2800      	cmp	r0, #0
 8008706:	f040 80f9 	bne.w	80088fc <_dtoa_r+0x6bc>
 800870a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800870e:	4620      	mov	r0, r4
 8008710:	4629      	mov	r1, r5
 8008712:	f7f8 f9d9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008716:	b118      	cbz	r0, 8008720 <_dtoa_r+0x4e0>
 8008718:	f018 0f01 	tst.w	r8, #1
 800871c:	f040 80ee 	bne.w	80088fc <_dtoa_r+0x6bc>
 8008720:	4649      	mov	r1, r9
 8008722:	4658      	mov	r0, fp
 8008724:	f000 fe4a 	bl	80093bc <_Bfree>
 8008728:	2300      	movs	r3, #0
 800872a:	7033      	strb	r3, [r6, #0]
 800872c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800872e:	3701      	adds	r7, #1
 8008730:	601f      	str	r7, [r3, #0]
 8008732:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008734:	2b00      	cmp	r3, #0
 8008736:	f000 831d 	beq.w	8008d74 <_dtoa_r+0xb34>
 800873a:	601e      	str	r6, [r3, #0]
 800873c:	e31a      	b.n	8008d74 <_dtoa_r+0xb34>
 800873e:	07e2      	lsls	r2, r4, #31
 8008740:	d505      	bpl.n	800874e <_dtoa_r+0x50e>
 8008742:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008746:	f7f7 ff57 	bl	80005f8 <__aeabi_dmul>
 800874a:	3601      	adds	r6, #1
 800874c:	2301      	movs	r3, #1
 800874e:	1064      	asrs	r4, r4, #1
 8008750:	3508      	adds	r5, #8
 8008752:	e73f      	b.n	80085d4 <_dtoa_r+0x394>
 8008754:	2602      	movs	r6, #2
 8008756:	e742      	b.n	80085de <_dtoa_r+0x39e>
 8008758:	9c07      	ldr	r4, [sp, #28]
 800875a:	9704      	str	r7, [sp, #16]
 800875c:	e761      	b.n	8008622 <_dtoa_r+0x3e2>
 800875e:	4b27      	ldr	r3, [pc, #156]	@ (80087fc <_dtoa_r+0x5bc>)
 8008760:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008762:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008766:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800876a:	4454      	add	r4, sl
 800876c:	2900      	cmp	r1, #0
 800876e:	d053      	beq.n	8008818 <_dtoa_r+0x5d8>
 8008770:	4928      	ldr	r1, [pc, #160]	@ (8008814 <_dtoa_r+0x5d4>)
 8008772:	2000      	movs	r0, #0
 8008774:	f7f8 f86a 	bl	800084c <__aeabi_ddiv>
 8008778:	4633      	mov	r3, r6
 800877a:	462a      	mov	r2, r5
 800877c:	f7f7 fd84 	bl	8000288 <__aeabi_dsub>
 8008780:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008784:	4656      	mov	r6, sl
 8008786:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800878a:	f7f8 f9e5 	bl	8000b58 <__aeabi_d2iz>
 800878e:	4605      	mov	r5, r0
 8008790:	f7f7 fec8 	bl	8000524 <__aeabi_i2d>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800879c:	f7f7 fd74 	bl	8000288 <__aeabi_dsub>
 80087a0:	3530      	adds	r5, #48	@ 0x30
 80087a2:	4602      	mov	r2, r0
 80087a4:	460b      	mov	r3, r1
 80087a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087aa:	f806 5b01 	strb.w	r5, [r6], #1
 80087ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80087b2:	f7f8 f993 	bl	8000adc <__aeabi_dcmplt>
 80087b6:	2800      	cmp	r0, #0
 80087b8:	d171      	bne.n	800889e <_dtoa_r+0x65e>
 80087ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087be:	4911      	ldr	r1, [pc, #68]	@ (8008804 <_dtoa_r+0x5c4>)
 80087c0:	2000      	movs	r0, #0
 80087c2:	f7f7 fd61 	bl	8000288 <__aeabi_dsub>
 80087c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80087ca:	f7f8 f987 	bl	8000adc <__aeabi_dcmplt>
 80087ce:	2800      	cmp	r0, #0
 80087d0:	f040 8095 	bne.w	80088fe <_dtoa_r+0x6be>
 80087d4:	42a6      	cmp	r6, r4
 80087d6:	f43f af50 	beq.w	800867a <_dtoa_r+0x43a>
 80087da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80087de:	4b0a      	ldr	r3, [pc, #40]	@ (8008808 <_dtoa_r+0x5c8>)
 80087e0:	2200      	movs	r2, #0
 80087e2:	f7f7 ff09 	bl	80005f8 <__aeabi_dmul>
 80087e6:	4b08      	ldr	r3, [pc, #32]	@ (8008808 <_dtoa_r+0x5c8>)
 80087e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80087ec:	2200      	movs	r2, #0
 80087ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087f2:	f7f7 ff01 	bl	80005f8 <__aeabi_dmul>
 80087f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087fa:	e7c4      	b.n	8008786 <_dtoa_r+0x546>
 80087fc:	0800a598 	.word	0x0800a598
 8008800:	0800a570 	.word	0x0800a570
 8008804:	3ff00000 	.word	0x3ff00000
 8008808:	40240000 	.word	0x40240000
 800880c:	401c0000 	.word	0x401c0000
 8008810:	40140000 	.word	0x40140000
 8008814:	3fe00000 	.word	0x3fe00000
 8008818:	4631      	mov	r1, r6
 800881a:	4628      	mov	r0, r5
 800881c:	f7f7 feec 	bl	80005f8 <__aeabi_dmul>
 8008820:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008824:	9415      	str	r4, [sp, #84]	@ 0x54
 8008826:	4656      	mov	r6, sl
 8008828:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800882c:	f7f8 f994 	bl	8000b58 <__aeabi_d2iz>
 8008830:	4605      	mov	r5, r0
 8008832:	f7f7 fe77 	bl	8000524 <__aeabi_i2d>
 8008836:	4602      	mov	r2, r0
 8008838:	460b      	mov	r3, r1
 800883a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800883e:	f7f7 fd23 	bl	8000288 <__aeabi_dsub>
 8008842:	3530      	adds	r5, #48	@ 0x30
 8008844:	f806 5b01 	strb.w	r5, [r6], #1
 8008848:	4602      	mov	r2, r0
 800884a:	460b      	mov	r3, r1
 800884c:	42a6      	cmp	r6, r4
 800884e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008852:	f04f 0200 	mov.w	r2, #0
 8008856:	d124      	bne.n	80088a2 <_dtoa_r+0x662>
 8008858:	4bac      	ldr	r3, [pc, #688]	@ (8008b0c <_dtoa_r+0x8cc>)
 800885a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800885e:	f7f7 fd15 	bl	800028c <__adddf3>
 8008862:	4602      	mov	r2, r0
 8008864:	460b      	mov	r3, r1
 8008866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800886a:	f7f8 f955 	bl	8000b18 <__aeabi_dcmpgt>
 800886e:	2800      	cmp	r0, #0
 8008870:	d145      	bne.n	80088fe <_dtoa_r+0x6be>
 8008872:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008876:	49a5      	ldr	r1, [pc, #660]	@ (8008b0c <_dtoa_r+0x8cc>)
 8008878:	2000      	movs	r0, #0
 800887a:	f7f7 fd05 	bl	8000288 <__aeabi_dsub>
 800887e:	4602      	mov	r2, r0
 8008880:	460b      	mov	r3, r1
 8008882:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008886:	f7f8 f929 	bl	8000adc <__aeabi_dcmplt>
 800888a:	2800      	cmp	r0, #0
 800888c:	f43f aef5 	beq.w	800867a <_dtoa_r+0x43a>
 8008890:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008892:	1e73      	subs	r3, r6, #1
 8008894:	9315      	str	r3, [sp, #84]	@ 0x54
 8008896:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800889a:	2b30      	cmp	r3, #48	@ 0x30
 800889c:	d0f8      	beq.n	8008890 <_dtoa_r+0x650>
 800889e:	9f04      	ldr	r7, [sp, #16]
 80088a0:	e73e      	b.n	8008720 <_dtoa_r+0x4e0>
 80088a2:	4b9b      	ldr	r3, [pc, #620]	@ (8008b10 <_dtoa_r+0x8d0>)
 80088a4:	f7f7 fea8 	bl	80005f8 <__aeabi_dmul>
 80088a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088ac:	e7bc      	b.n	8008828 <_dtoa_r+0x5e8>
 80088ae:	d10c      	bne.n	80088ca <_dtoa_r+0x68a>
 80088b0:	4b98      	ldr	r3, [pc, #608]	@ (8008b14 <_dtoa_r+0x8d4>)
 80088b2:	2200      	movs	r2, #0
 80088b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088b8:	f7f7 fe9e 	bl	80005f8 <__aeabi_dmul>
 80088bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088c0:	f7f8 f920 	bl	8000b04 <__aeabi_dcmpge>
 80088c4:	2800      	cmp	r0, #0
 80088c6:	f000 8157 	beq.w	8008b78 <_dtoa_r+0x938>
 80088ca:	2400      	movs	r4, #0
 80088cc:	4625      	mov	r5, r4
 80088ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088d0:	43db      	mvns	r3, r3
 80088d2:	9304      	str	r3, [sp, #16]
 80088d4:	4656      	mov	r6, sl
 80088d6:	2700      	movs	r7, #0
 80088d8:	4621      	mov	r1, r4
 80088da:	4658      	mov	r0, fp
 80088dc:	f000 fd6e 	bl	80093bc <_Bfree>
 80088e0:	2d00      	cmp	r5, #0
 80088e2:	d0dc      	beq.n	800889e <_dtoa_r+0x65e>
 80088e4:	b12f      	cbz	r7, 80088f2 <_dtoa_r+0x6b2>
 80088e6:	42af      	cmp	r7, r5
 80088e8:	d003      	beq.n	80088f2 <_dtoa_r+0x6b2>
 80088ea:	4639      	mov	r1, r7
 80088ec:	4658      	mov	r0, fp
 80088ee:	f000 fd65 	bl	80093bc <_Bfree>
 80088f2:	4629      	mov	r1, r5
 80088f4:	4658      	mov	r0, fp
 80088f6:	f000 fd61 	bl	80093bc <_Bfree>
 80088fa:	e7d0      	b.n	800889e <_dtoa_r+0x65e>
 80088fc:	9704      	str	r7, [sp, #16]
 80088fe:	4633      	mov	r3, r6
 8008900:	461e      	mov	r6, r3
 8008902:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008906:	2a39      	cmp	r2, #57	@ 0x39
 8008908:	d107      	bne.n	800891a <_dtoa_r+0x6da>
 800890a:	459a      	cmp	sl, r3
 800890c:	d1f8      	bne.n	8008900 <_dtoa_r+0x6c0>
 800890e:	9a04      	ldr	r2, [sp, #16]
 8008910:	3201      	adds	r2, #1
 8008912:	9204      	str	r2, [sp, #16]
 8008914:	2230      	movs	r2, #48	@ 0x30
 8008916:	f88a 2000 	strb.w	r2, [sl]
 800891a:	781a      	ldrb	r2, [r3, #0]
 800891c:	3201      	adds	r2, #1
 800891e:	701a      	strb	r2, [r3, #0]
 8008920:	e7bd      	b.n	800889e <_dtoa_r+0x65e>
 8008922:	4b7b      	ldr	r3, [pc, #492]	@ (8008b10 <_dtoa_r+0x8d0>)
 8008924:	2200      	movs	r2, #0
 8008926:	f7f7 fe67 	bl	80005f8 <__aeabi_dmul>
 800892a:	2200      	movs	r2, #0
 800892c:	2300      	movs	r3, #0
 800892e:	4604      	mov	r4, r0
 8008930:	460d      	mov	r5, r1
 8008932:	f7f8 f8c9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008936:	2800      	cmp	r0, #0
 8008938:	f43f aebb 	beq.w	80086b2 <_dtoa_r+0x472>
 800893c:	e6f0      	b.n	8008720 <_dtoa_r+0x4e0>
 800893e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008940:	2a00      	cmp	r2, #0
 8008942:	f000 80db 	beq.w	8008afc <_dtoa_r+0x8bc>
 8008946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008948:	2a01      	cmp	r2, #1
 800894a:	f300 80bf 	bgt.w	8008acc <_dtoa_r+0x88c>
 800894e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008950:	2a00      	cmp	r2, #0
 8008952:	f000 80b7 	beq.w	8008ac4 <_dtoa_r+0x884>
 8008956:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800895a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800895c:	4646      	mov	r6, r8
 800895e:	9a08      	ldr	r2, [sp, #32]
 8008960:	2101      	movs	r1, #1
 8008962:	441a      	add	r2, r3
 8008964:	4658      	mov	r0, fp
 8008966:	4498      	add	r8, r3
 8008968:	9208      	str	r2, [sp, #32]
 800896a:	f000 fddb 	bl	8009524 <__i2b>
 800896e:	4605      	mov	r5, r0
 8008970:	b15e      	cbz	r6, 800898a <_dtoa_r+0x74a>
 8008972:	9b08      	ldr	r3, [sp, #32]
 8008974:	2b00      	cmp	r3, #0
 8008976:	dd08      	ble.n	800898a <_dtoa_r+0x74a>
 8008978:	42b3      	cmp	r3, r6
 800897a:	9a08      	ldr	r2, [sp, #32]
 800897c:	bfa8      	it	ge
 800897e:	4633      	movge	r3, r6
 8008980:	eba8 0803 	sub.w	r8, r8, r3
 8008984:	1af6      	subs	r6, r6, r3
 8008986:	1ad3      	subs	r3, r2, r3
 8008988:	9308      	str	r3, [sp, #32]
 800898a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800898c:	b1f3      	cbz	r3, 80089cc <_dtoa_r+0x78c>
 800898e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008990:	2b00      	cmp	r3, #0
 8008992:	f000 80b7 	beq.w	8008b04 <_dtoa_r+0x8c4>
 8008996:	b18c      	cbz	r4, 80089bc <_dtoa_r+0x77c>
 8008998:	4629      	mov	r1, r5
 800899a:	4622      	mov	r2, r4
 800899c:	4658      	mov	r0, fp
 800899e:	f000 fe81 	bl	80096a4 <__pow5mult>
 80089a2:	464a      	mov	r2, r9
 80089a4:	4601      	mov	r1, r0
 80089a6:	4605      	mov	r5, r0
 80089a8:	4658      	mov	r0, fp
 80089aa:	f000 fdd1 	bl	8009550 <__multiply>
 80089ae:	4649      	mov	r1, r9
 80089b0:	9004      	str	r0, [sp, #16]
 80089b2:	4658      	mov	r0, fp
 80089b4:	f000 fd02 	bl	80093bc <_Bfree>
 80089b8:	9b04      	ldr	r3, [sp, #16]
 80089ba:	4699      	mov	r9, r3
 80089bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089be:	1b1a      	subs	r2, r3, r4
 80089c0:	d004      	beq.n	80089cc <_dtoa_r+0x78c>
 80089c2:	4649      	mov	r1, r9
 80089c4:	4658      	mov	r0, fp
 80089c6:	f000 fe6d 	bl	80096a4 <__pow5mult>
 80089ca:	4681      	mov	r9, r0
 80089cc:	2101      	movs	r1, #1
 80089ce:	4658      	mov	r0, fp
 80089d0:	f000 fda8 	bl	8009524 <__i2b>
 80089d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089d6:	4604      	mov	r4, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	f000 81cf 	beq.w	8008d7c <_dtoa_r+0xb3c>
 80089de:	461a      	mov	r2, r3
 80089e0:	4601      	mov	r1, r0
 80089e2:	4658      	mov	r0, fp
 80089e4:	f000 fe5e 	bl	80096a4 <__pow5mult>
 80089e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	4604      	mov	r4, r0
 80089ee:	f300 8095 	bgt.w	8008b1c <_dtoa_r+0x8dc>
 80089f2:	9b02      	ldr	r3, [sp, #8]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f040 8087 	bne.w	8008b08 <_dtoa_r+0x8c8>
 80089fa:	9b03      	ldr	r3, [sp, #12]
 80089fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f040 8089 	bne.w	8008b18 <_dtoa_r+0x8d8>
 8008a06:	9b03      	ldr	r3, [sp, #12]
 8008a08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a0c:	0d1b      	lsrs	r3, r3, #20
 8008a0e:	051b      	lsls	r3, r3, #20
 8008a10:	b12b      	cbz	r3, 8008a1e <_dtoa_r+0x7de>
 8008a12:	9b08      	ldr	r3, [sp, #32]
 8008a14:	3301      	adds	r3, #1
 8008a16:	9308      	str	r3, [sp, #32]
 8008a18:	f108 0801 	add.w	r8, r8, #1
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f000 81b0 	beq.w	8008d88 <_dtoa_r+0xb48>
 8008a28:	6923      	ldr	r3, [r4, #16]
 8008a2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008a2e:	6918      	ldr	r0, [r3, #16]
 8008a30:	f000 fd2c 	bl	800948c <__hi0bits>
 8008a34:	f1c0 0020 	rsb	r0, r0, #32
 8008a38:	9b08      	ldr	r3, [sp, #32]
 8008a3a:	4418      	add	r0, r3
 8008a3c:	f010 001f 	ands.w	r0, r0, #31
 8008a40:	d077      	beq.n	8008b32 <_dtoa_r+0x8f2>
 8008a42:	f1c0 0320 	rsb	r3, r0, #32
 8008a46:	2b04      	cmp	r3, #4
 8008a48:	dd6b      	ble.n	8008b22 <_dtoa_r+0x8e2>
 8008a4a:	9b08      	ldr	r3, [sp, #32]
 8008a4c:	f1c0 001c 	rsb	r0, r0, #28
 8008a50:	4403      	add	r3, r0
 8008a52:	4480      	add	r8, r0
 8008a54:	4406      	add	r6, r0
 8008a56:	9308      	str	r3, [sp, #32]
 8008a58:	f1b8 0f00 	cmp.w	r8, #0
 8008a5c:	dd05      	ble.n	8008a6a <_dtoa_r+0x82a>
 8008a5e:	4649      	mov	r1, r9
 8008a60:	4642      	mov	r2, r8
 8008a62:	4658      	mov	r0, fp
 8008a64:	f000 fe78 	bl	8009758 <__lshift>
 8008a68:	4681      	mov	r9, r0
 8008a6a:	9b08      	ldr	r3, [sp, #32]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	dd05      	ble.n	8008a7c <_dtoa_r+0x83c>
 8008a70:	4621      	mov	r1, r4
 8008a72:	461a      	mov	r2, r3
 8008a74:	4658      	mov	r0, fp
 8008a76:	f000 fe6f 	bl	8009758 <__lshift>
 8008a7a:	4604      	mov	r4, r0
 8008a7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d059      	beq.n	8008b36 <_dtoa_r+0x8f6>
 8008a82:	4621      	mov	r1, r4
 8008a84:	4648      	mov	r0, r9
 8008a86:	f000 fed3 	bl	8009830 <__mcmp>
 8008a8a:	2800      	cmp	r0, #0
 8008a8c:	da53      	bge.n	8008b36 <_dtoa_r+0x8f6>
 8008a8e:	1e7b      	subs	r3, r7, #1
 8008a90:	9304      	str	r3, [sp, #16]
 8008a92:	4649      	mov	r1, r9
 8008a94:	2300      	movs	r3, #0
 8008a96:	220a      	movs	r2, #10
 8008a98:	4658      	mov	r0, fp
 8008a9a:	f000 fcb1 	bl	8009400 <__multadd>
 8008a9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008aa0:	4681      	mov	r9, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	f000 8172 	beq.w	8008d8c <_dtoa_r+0xb4c>
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	4629      	mov	r1, r5
 8008aac:	220a      	movs	r2, #10
 8008aae:	4658      	mov	r0, fp
 8008ab0:	f000 fca6 	bl	8009400 <__multadd>
 8008ab4:	9b00      	ldr	r3, [sp, #0]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	4605      	mov	r5, r0
 8008aba:	dc67      	bgt.n	8008b8c <_dtoa_r+0x94c>
 8008abc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	dc41      	bgt.n	8008b46 <_dtoa_r+0x906>
 8008ac2:	e063      	b.n	8008b8c <_dtoa_r+0x94c>
 8008ac4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008ac6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008aca:	e746      	b.n	800895a <_dtoa_r+0x71a>
 8008acc:	9b07      	ldr	r3, [sp, #28]
 8008ace:	1e5c      	subs	r4, r3, #1
 8008ad0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ad2:	42a3      	cmp	r3, r4
 8008ad4:	bfbf      	itttt	lt
 8008ad6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008ad8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008ada:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008adc:	1ae3      	sublt	r3, r4, r3
 8008ade:	bfb4      	ite	lt
 8008ae0:	18d2      	addlt	r2, r2, r3
 8008ae2:	1b1c      	subge	r4, r3, r4
 8008ae4:	9b07      	ldr	r3, [sp, #28]
 8008ae6:	bfbc      	itt	lt
 8008ae8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008aea:	2400      	movlt	r4, #0
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	bfb5      	itete	lt
 8008af0:	eba8 0603 	sublt.w	r6, r8, r3
 8008af4:	9b07      	ldrge	r3, [sp, #28]
 8008af6:	2300      	movlt	r3, #0
 8008af8:	4646      	movge	r6, r8
 8008afa:	e730      	b.n	800895e <_dtoa_r+0x71e>
 8008afc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008afe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008b00:	4646      	mov	r6, r8
 8008b02:	e735      	b.n	8008970 <_dtoa_r+0x730>
 8008b04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008b06:	e75c      	b.n	80089c2 <_dtoa_r+0x782>
 8008b08:	2300      	movs	r3, #0
 8008b0a:	e788      	b.n	8008a1e <_dtoa_r+0x7de>
 8008b0c:	3fe00000 	.word	0x3fe00000
 8008b10:	40240000 	.word	0x40240000
 8008b14:	40140000 	.word	0x40140000
 8008b18:	9b02      	ldr	r3, [sp, #8]
 8008b1a:	e780      	b.n	8008a1e <_dtoa_r+0x7de>
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b20:	e782      	b.n	8008a28 <_dtoa_r+0x7e8>
 8008b22:	d099      	beq.n	8008a58 <_dtoa_r+0x818>
 8008b24:	9a08      	ldr	r2, [sp, #32]
 8008b26:	331c      	adds	r3, #28
 8008b28:	441a      	add	r2, r3
 8008b2a:	4498      	add	r8, r3
 8008b2c:	441e      	add	r6, r3
 8008b2e:	9208      	str	r2, [sp, #32]
 8008b30:	e792      	b.n	8008a58 <_dtoa_r+0x818>
 8008b32:	4603      	mov	r3, r0
 8008b34:	e7f6      	b.n	8008b24 <_dtoa_r+0x8e4>
 8008b36:	9b07      	ldr	r3, [sp, #28]
 8008b38:	9704      	str	r7, [sp, #16]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	dc20      	bgt.n	8008b80 <_dtoa_r+0x940>
 8008b3e:	9300      	str	r3, [sp, #0]
 8008b40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	dd1e      	ble.n	8008b84 <_dtoa_r+0x944>
 8008b46:	9b00      	ldr	r3, [sp, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	f47f aec0 	bne.w	80088ce <_dtoa_r+0x68e>
 8008b4e:	4621      	mov	r1, r4
 8008b50:	2205      	movs	r2, #5
 8008b52:	4658      	mov	r0, fp
 8008b54:	f000 fc54 	bl	8009400 <__multadd>
 8008b58:	4601      	mov	r1, r0
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	4648      	mov	r0, r9
 8008b5e:	f000 fe67 	bl	8009830 <__mcmp>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	f77f aeb3 	ble.w	80088ce <_dtoa_r+0x68e>
 8008b68:	4656      	mov	r6, sl
 8008b6a:	2331      	movs	r3, #49	@ 0x31
 8008b6c:	f806 3b01 	strb.w	r3, [r6], #1
 8008b70:	9b04      	ldr	r3, [sp, #16]
 8008b72:	3301      	adds	r3, #1
 8008b74:	9304      	str	r3, [sp, #16]
 8008b76:	e6ae      	b.n	80088d6 <_dtoa_r+0x696>
 8008b78:	9c07      	ldr	r4, [sp, #28]
 8008b7a:	9704      	str	r7, [sp, #16]
 8008b7c:	4625      	mov	r5, r4
 8008b7e:	e7f3      	b.n	8008b68 <_dtoa_r+0x928>
 8008b80:	9b07      	ldr	r3, [sp, #28]
 8008b82:	9300      	str	r3, [sp, #0]
 8008b84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 8104 	beq.w	8008d94 <_dtoa_r+0xb54>
 8008b8c:	2e00      	cmp	r6, #0
 8008b8e:	dd05      	ble.n	8008b9c <_dtoa_r+0x95c>
 8008b90:	4629      	mov	r1, r5
 8008b92:	4632      	mov	r2, r6
 8008b94:	4658      	mov	r0, fp
 8008b96:	f000 fddf 	bl	8009758 <__lshift>
 8008b9a:	4605      	mov	r5, r0
 8008b9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d05a      	beq.n	8008c58 <_dtoa_r+0xa18>
 8008ba2:	6869      	ldr	r1, [r5, #4]
 8008ba4:	4658      	mov	r0, fp
 8008ba6:	f000 fbc9 	bl	800933c <_Balloc>
 8008baa:	4606      	mov	r6, r0
 8008bac:	b928      	cbnz	r0, 8008bba <_dtoa_r+0x97a>
 8008bae:	4b84      	ldr	r3, [pc, #528]	@ (8008dc0 <_dtoa_r+0xb80>)
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008bb6:	f7ff bb5a 	b.w	800826e <_dtoa_r+0x2e>
 8008bba:	692a      	ldr	r2, [r5, #16]
 8008bbc:	3202      	adds	r2, #2
 8008bbe:	0092      	lsls	r2, r2, #2
 8008bc0:	f105 010c 	add.w	r1, r5, #12
 8008bc4:	300c      	adds	r0, #12
 8008bc6:	f7ff faa4 	bl	8008112 <memcpy>
 8008bca:	2201      	movs	r2, #1
 8008bcc:	4631      	mov	r1, r6
 8008bce:	4658      	mov	r0, fp
 8008bd0:	f000 fdc2 	bl	8009758 <__lshift>
 8008bd4:	f10a 0301 	add.w	r3, sl, #1
 8008bd8:	9307      	str	r3, [sp, #28]
 8008bda:	9b00      	ldr	r3, [sp, #0]
 8008bdc:	4453      	add	r3, sl
 8008bde:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008be0:	9b02      	ldr	r3, [sp, #8]
 8008be2:	f003 0301 	and.w	r3, r3, #1
 8008be6:	462f      	mov	r7, r5
 8008be8:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bea:	4605      	mov	r5, r0
 8008bec:	9b07      	ldr	r3, [sp, #28]
 8008bee:	4621      	mov	r1, r4
 8008bf0:	3b01      	subs	r3, #1
 8008bf2:	4648      	mov	r0, r9
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	f7ff fa9a 	bl	800812e <quorem>
 8008bfa:	4639      	mov	r1, r7
 8008bfc:	9002      	str	r0, [sp, #8]
 8008bfe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008c02:	4648      	mov	r0, r9
 8008c04:	f000 fe14 	bl	8009830 <__mcmp>
 8008c08:	462a      	mov	r2, r5
 8008c0a:	9008      	str	r0, [sp, #32]
 8008c0c:	4621      	mov	r1, r4
 8008c0e:	4658      	mov	r0, fp
 8008c10:	f000 fe2a 	bl	8009868 <__mdiff>
 8008c14:	68c2      	ldr	r2, [r0, #12]
 8008c16:	4606      	mov	r6, r0
 8008c18:	bb02      	cbnz	r2, 8008c5c <_dtoa_r+0xa1c>
 8008c1a:	4601      	mov	r1, r0
 8008c1c:	4648      	mov	r0, r9
 8008c1e:	f000 fe07 	bl	8009830 <__mcmp>
 8008c22:	4602      	mov	r2, r0
 8008c24:	4631      	mov	r1, r6
 8008c26:	4658      	mov	r0, fp
 8008c28:	920e      	str	r2, [sp, #56]	@ 0x38
 8008c2a:	f000 fbc7 	bl	80093bc <_Bfree>
 8008c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c32:	9e07      	ldr	r6, [sp, #28]
 8008c34:	ea43 0102 	orr.w	r1, r3, r2
 8008c38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c3a:	4319      	orrs	r1, r3
 8008c3c:	d110      	bne.n	8008c60 <_dtoa_r+0xa20>
 8008c3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c42:	d029      	beq.n	8008c98 <_dtoa_r+0xa58>
 8008c44:	9b08      	ldr	r3, [sp, #32]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	dd02      	ble.n	8008c50 <_dtoa_r+0xa10>
 8008c4a:	9b02      	ldr	r3, [sp, #8]
 8008c4c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008c50:	9b00      	ldr	r3, [sp, #0]
 8008c52:	f883 8000 	strb.w	r8, [r3]
 8008c56:	e63f      	b.n	80088d8 <_dtoa_r+0x698>
 8008c58:	4628      	mov	r0, r5
 8008c5a:	e7bb      	b.n	8008bd4 <_dtoa_r+0x994>
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	e7e1      	b.n	8008c24 <_dtoa_r+0x9e4>
 8008c60:	9b08      	ldr	r3, [sp, #32]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	db04      	blt.n	8008c70 <_dtoa_r+0xa30>
 8008c66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c68:	430b      	orrs	r3, r1
 8008c6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c6c:	430b      	orrs	r3, r1
 8008c6e:	d120      	bne.n	8008cb2 <_dtoa_r+0xa72>
 8008c70:	2a00      	cmp	r2, #0
 8008c72:	dded      	ble.n	8008c50 <_dtoa_r+0xa10>
 8008c74:	4649      	mov	r1, r9
 8008c76:	2201      	movs	r2, #1
 8008c78:	4658      	mov	r0, fp
 8008c7a:	f000 fd6d 	bl	8009758 <__lshift>
 8008c7e:	4621      	mov	r1, r4
 8008c80:	4681      	mov	r9, r0
 8008c82:	f000 fdd5 	bl	8009830 <__mcmp>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	dc03      	bgt.n	8008c92 <_dtoa_r+0xa52>
 8008c8a:	d1e1      	bne.n	8008c50 <_dtoa_r+0xa10>
 8008c8c:	f018 0f01 	tst.w	r8, #1
 8008c90:	d0de      	beq.n	8008c50 <_dtoa_r+0xa10>
 8008c92:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c96:	d1d8      	bne.n	8008c4a <_dtoa_r+0xa0a>
 8008c98:	9a00      	ldr	r2, [sp, #0]
 8008c9a:	2339      	movs	r3, #57	@ 0x39
 8008c9c:	7013      	strb	r3, [r2, #0]
 8008c9e:	4633      	mov	r3, r6
 8008ca0:	461e      	mov	r6, r3
 8008ca2:	3b01      	subs	r3, #1
 8008ca4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008ca8:	2a39      	cmp	r2, #57	@ 0x39
 8008caa:	d052      	beq.n	8008d52 <_dtoa_r+0xb12>
 8008cac:	3201      	adds	r2, #1
 8008cae:	701a      	strb	r2, [r3, #0]
 8008cb0:	e612      	b.n	80088d8 <_dtoa_r+0x698>
 8008cb2:	2a00      	cmp	r2, #0
 8008cb4:	dd07      	ble.n	8008cc6 <_dtoa_r+0xa86>
 8008cb6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008cba:	d0ed      	beq.n	8008c98 <_dtoa_r+0xa58>
 8008cbc:	9a00      	ldr	r2, [sp, #0]
 8008cbe:	f108 0301 	add.w	r3, r8, #1
 8008cc2:	7013      	strb	r3, [r2, #0]
 8008cc4:	e608      	b.n	80088d8 <_dtoa_r+0x698>
 8008cc6:	9b07      	ldr	r3, [sp, #28]
 8008cc8:	9a07      	ldr	r2, [sp, #28]
 8008cca:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008cce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d028      	beq.n	8008d26 <_dtoa_r+0xae6>
 8008cd4:	4649      	mov	r1, r9
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	220a      	movs	r2, #10
 8008cda:	4658      	mov	r0, fp
 8008cdc:	f000 fb90 	bl	8009400 <__multadd>
 8008ce0:	42af      	cmp	r7, r5
 8008ce2:	4681      	mov	r9, r0
 8008ce4:	f04f 0300 	mov.w	r3, #0
 8008ce8:	f04f 020a 	mov.w	r2, #10
 8008cec:	4639      	mov	r1, r7
 8008cee:	4658      	mov	r0, fp
 8008cf0:	d107      	bne.n	8008d02 <_dtoa_r+0xac2>
 8008cf2:	f000 fb85 	bl	8009400 <__multadd>
 8008cf6:	4607      	mov	r7, r0
 8008cf8:	4605      	mov	r5, r0
 8008cfa:	9b07      	ldr	r3, [sp, #28]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	9307      	str	r3, [sp, #28]
 8008d00:	e774      	b.n	8008bec <_dtoa_r+0x9ac>
 8008d02:	f000 fb7d 	bl	8009400 <__multadd>
 8008d06:	4629      	mov	r1, r5
 8008d08:	4607      	mov	r7, r0
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	220a      	movs	r2, #10
 8008d0e:	4658      	mov	r0, fp
 8008d10:	f000 fb76 	bl	8009400 <__multadd>
 8008d14:	4605      	mov	r5, r0
 8008d16:	e7f0      	b.n	8008cfa <_dtoa_r+0xaba>
 8008d18:	9b00      	ldr	r3, [sp, #0]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	bfcc      	ite	gt
 8008d1e:	461e      	movgt	r6, r3
 8008d20:	2601      	movle	r6, #1
 8008d22:	4456      	add	r6, sl
 8008d24:	2700      	movs	r7, #0
 8008d26:	4649      	mov	r1, r9
 8008d28:	2201      	movs	r2, #1
 8008d2a:	4658      	mov	r0, fp
 8008d2c:	f000 fd14 	bl	8009758 <__lshift>
 8008d30:	4621      	mov	r1, r4
 8008d32:	4681      	mov	r9, r0
 8008d34:	f000 fd7c 	bl	8009830 <__mcmp>
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	dcb0      	bgt.n	8008c9e <_dtoa_r+0xa5e>
 8008d3c:	d102      	bne.n	8008d44 <_dtoa_r+0xb04>
 8008d3e:	f018 0f01 	tst.w	r8, #1
 8008d42:	d1ac      	bne.n	8008c9e <_dtoa_r+0xa5e>
 8008d44:	4633      	mov	r3, r6
 8008d46:	461e      	mov	r6, r3
 8008d48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d4c:	2a30      	cmp	r2, #48	@ 0x30
 8008d4e:	d0fa      	beq.n	8008d46 <_dtoa_r+0xb06>
 8008d50:	e5c2      	b.n	80088d8 <_dtoa_r+0x698>
 8008d52:	459a      	cmp	sl, r3
 8008d54:	d1a4      	bne.n	8008ca0 <_dtoa_r+0xa60>
 8008d56:	9b04      	ldr	r3, [sp, #16]
 8008d58:	3301      	adds	r3, #1
 8008d5a:	9304      	str	r3, [sp, #16]
 8008d5c:	2331      	movs	r3, #49	@ 0x31
 8008d5e:	f88a 3000 	strb.w	r3, [sl]
 8008d62:	e5b9      	b.n	80088d8 <_dtoa_r+0x698>
 8008d64:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008d66:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008dc4 <_dtoa_r+0xb84>
 8008d6a:	b11b      	cbz	r3, 8008d74 <_dtoa_r+0xb34>
 8008d6c:	f10a 0308 	add.w	r3, sl, #8
 8008d70:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008d72:	6013      	str	r3, [r2, #0]
 8008d74:	4650      	mov	r0, sl
 8008d76:	b019      	add	sp, #100	@ 0x64
 8008d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	f77f ae37 	ble.w	80089f2 <_dtoa_r+0x7b2>
 8008d84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d86:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d88:	2001      	movs	r0, #1
 8008d8a:	e655      	b.n	8008a38 <_dtoa_r+0x7f8>
 8008d8c:	9b00      	ldr	r3, [sp, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f77f aed6 	ble.w	8008b40 <_dtoa_r+0x900>
 8008d94:	4656      	mov	r6, sl
 8008d96:	4621      	mov	r1, r4
 8008d98:	4648      	mov	r0, r9
 8008d9a:	f7ff f9c8 	bl	800812e <quorem>
 8008d9e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008da2:	f806 8b01 	strb.w	r8, [r6], #1
 8008da6:	9b00      	ldr	r3, [sp, #0]
 8008da8:	eba6 020a 	sub.w	r2, r6, sl
 8008dac:	4293      	cmp	r3, r2
 8008dae:	ddb3      	ble.n	8008d18 <_dtoa_r+0xad8>
 8008db0:	4649      	mov	r1, r9
 8008db2:	2300      	movs	r3, #0
 8008db4:	220a      	movs	r2, #10
 8008db6:	4658      	mov	r0, fp
 8008db8:	f000 fb22 	bl	8009400 <__multadd>
 8008dbc:	4681      	mov	r9, r0
 8008dbe:	e7ea      	b.n	8008d96 <_dtoa_r+0xb56>
 8008dc0:	0800a4e8 	.word	0x0800a4e8
 8008dc4:	0800a46c 	.word	0x0800a46c

08008dc8 <__ssputs_r>:
 8008dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dcc:	688e      	ldr	r6, [r1, #8]
 8008dce:	461f      	mov	r7, r3
 8008dd0:	42be      	cmp	r6, r7
 8008dd2:	680b      	ldr	r3, [r1, #0]
 8008dd4:	4682      	mov	sl, r0
 8008dd6:	460c      	mov	r4, r1
 8008dd8:	4690      	mov	r8, r2
 8008dda:	d82d      	bhi.n	8008e38 <__ssputs_r+0x70>
 8008ddc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008de0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008de4:	d026      	beq.n	8008e34 <__ssputs_r+0x6c>
 8008de6:	6965      	ldr	r5, [r4, #20]
 8008de8:	6909      	ldr	r1, [r1, #16]
 8008dea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008dee:	eba3 0901 	sub.w	r9, r3, r1
 8008df2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008df6:	1c7b      	adds	r3, r7, #1
 8008df8:	444b      	add	r3, r9
 8008dfa:	106d      	asrs	r5, r5, #1
 8008dfc:	429d      	cmp	r5, r3
 8008dfe:	bf38      	it	cc
 8008e00:	461d      	movcc	r5, r3
 8008e02:	0553      	lsls	r3, r2, #21
 8008e04:	d527      	bpl.n	8008e56 <__ssputs_r+0x8e>
 8008e06:	4629      	mov	r1, r5
 8008e08:	f000 f960 	bl	80090cc <_malloc_r>
 8008e0c:	4606      	mov	r6, r0
 8008e0e:	b360      	cbz	r0, 8008e6a <__ssputs_r+0xa2>
 8008e10:	6921      	ldr	r1, [r4, #16]
 8008e12:	464a      	mov	r2, r9
 8008e14:	f7ff f97d 	bl	8008112 <memcpy>
 8008e18:	89a3      	ldrh	r3, [r4, #12]
 8008e1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008e1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e22:	81a3      	strh	r3, [r4, #12]
 8008e24:	6126      	str	r6, [r4, #16]
 8008e26:	6165      	str	r5, [r4, #20]
 8008e28:	444e      	add	r6, r9
 8008e2a:	eba5 0509 	sub.w	r5, r5, r9
 8008e2e:	6026      	str	r6, [r4, #0]
 8008e30:	60a5      	str	r5, [r4, #8]
 8008e32:	463e      	mov	r6, r7
 8008e34:	42be      	cmp	r6, r7
 8008e36:	d900      	bls.n	8008e3a <__ssputs_r+0x72>
 8008e38:	463e      	mov	r6, r7
 8008e3a:	6820      	ldr	r0, [r4, #0]
 8008e3c:	4632      	mov	r2, r6
 8008e3e:	4641      	mov	r1, r8
 8008e40:	f000 fe6f 	bl	8009b22 <memmove>
 8008e44:	68a3      	ldr	r3, [r4, #8]
 8008e46:	1b9b      	subs	r3, r3, r6
 8008e48:	60a3      	str	r3, [r4, #8]
 8008e4a:	6823      	ldr	r3, [r4, #0]
 8008e4c:	4433      	add	r3, r6
 8008e4e:	6023      	str	r3, [r4, #0]
 8008e50:	2000      	movs	r0, #0
 8008e52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e56:	462a      	mov	r2, r5
 8008e58:	f000 fe35 	bl	8009ac6 <_realloc_r>
 8008e5c:	4606      	mov	r6, r0
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	d1e0      	bne.n	8008e24 <__ssputs_r+0x5c>
 8008e62:	6921      	ldr	r1, [r4, #16]
 8008e64:	4650      	mov	r0, sl
 8008e66:	f000 feff 	bl	8009c68 <_free_r>
 8008e6a:	230c      	movs	r3, #12
 8008e6c:	f8ca 3000 	str.w	r3, [sl]
 8008e70:	89a3      	ldrh	r3, [r4, #12]
 8008e72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e76:	81a3      	strh	r3, [r4, #12]
 8008e78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e7c:	e7e9      	b.n	8008e52 <__ssputs_r+0x8a>
	...

08008e80 <_svfiprintf_r>:
 8008e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e84:	4698      	mov	r8, r3
 8008e86:	898b      	ldrh	r3, [r1, #12]
 8008e88:	061b      	lsls	r3, r3, #24
 8008e8a:	b09d      	sub	sp, #116	@ 0x74
 8008e8c:	4607      	mov	r7, r0
 8008e8e:	460d      	mov	r5, r1
 8008e90:	4614      	mov	r4, r2
 8008e92:	d510      	bpl.n	8008eb6 <_svfiprintf_r+0x36>
 8008e94:	690b      	ldr	r3, [r1, #16]
 8008e96:	b973      	cbnz	r3, 8008eb6 <_svfiprintf_r+0x36>
 8008e98:	2140      	movs	r1, #64	@ 0x40
 8008e9a:	f000 f917 	bl	80090cc <_malloc_r>
 8008e9e:	6028      	str	r0, [r5, #0]
 8008ea0:	6128      	str	r0, [r5, #16]
 8008ea2:	b930      	cbnz	r0, 8008eb2 <_svfiprintf_r+0x32>
 8008ea4:	230c      	movs	r3, #12
 8008ea6:	603b      	str	r3, [r7, #0]
 8008ea8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008eac:	b01d      	add	sp, #116	@ 0x74
 8008eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eb2:	2340      	movs	r3, #64	@ 0x40
 8008eb4:	616b      	str	r3, [r5, #20]
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008eba:	2320      	movs	r3, #32
 8008ebc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008ec0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ec4:	2330      	movs	r3, #48	@ 0x30
 8008ec6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009064 <_svfiprintf_r+0x1e4>
 8008eca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008ece:	f04f 0901 	mov.w	r9, #1
 8008ed2:	4623      	mov	r3, r4
 8008ed4:	469a      	mov	sl, r3
 8008ed6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eda:	b10a      	cbz	r2, 8008ee0 <_svfiprintf_r+0x60>
 8008edc:	2a25      	cmp	r2, #37	@ 0x25
 8008ede:	d1f9      	bne.n	8008ed4 <_svfiprintf_r+0x54>
 8008ee0:	ebba 0b04 	subs.w	fp, sl, r4
 8008ee4:	d00b      	beq.n	8008efe <_svfiprintf_r+0x7e>
 8008ee6:	465b      	mov	r3, fp
 8008ee8:	4622      	mov	r2, r4
 8008eea:	4629      	mov	r1, r5
 8008eec:	4638      	mov	r0, r7
 8008eee:	f7ff ff6b 	bl	8008dc8 <__ssputs_r>
 8008ef2:	3001      	adds	r0, #1
 8008ef4:	f000 80a7 	beq.w	8009046 <_svfiprintf_r+0x1c6>
 8008ef8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008efa:	445a      	add	r2, fp
 8008efc:	9209      	str	r2, [sp, #36]	@ 0x24
 8008efe:	f89a 3000 	ldrb.w	r3, [sl]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f000 809f 	beq.w	8009046 <_svfiprintf_r+0x1c6>
 8008f08:	2300      	movs	r3, #0
 8008f0a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008f0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f12:	f10a 0a01 	add.w	sl, sl, #1
 8008f16:	9304      	str	r3, [sp, #16]
 8008f18:	9307      	str	r3, [sp, #28]
 8008f1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008f1e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008f20:	4654      	mov	r4, sl
 8008f22:	2205      	movs	r2, #5
 8008f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f28:	484e      	ldr	r0, [pc, #312]	@ (8009064 <_svfiprintf_r+0x1e4>)
 8008f2a:	f7f7 f951 	bl	80001d0 <memchr>
 8008f2e:	9a04      	ldr	r2, [sp, #16]
 8008f30:	b9d8      	cbnz	r0, 8008f6a <_svfiprintf_r+0xea>
 8008f32:	06d0      	lsls	r0, r2, #27
 8008f34:	bf44      	itt	mi
 8008f36:	2320      	movmi	r3, #32
 8008f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f3c:	0711      	lsls	r1, r2, #28
 8008f3e:	bf44      	itt	mi
 8008f40:	232b      	movmi	r3, #43	@ 0x2b
 8008f42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008f46:	f89a 3000 	ldrb.w	r3, [sl]
 8008f4a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f4c:	d015      	beq.n	8008f7a <_svfiprintf_r+0xfa>
 8008f4e:	9a07      	ldr	r2, [sp, #28]
 8008f50:	4654      	mov	r4, sl
 8008f52:	2000      	movs	r0, #0
 8008f54:	f04f 0c0a 	mov.w	ip, #10
 8008f58:	4621      	mov	r1, r4
 8008f5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f5e:	3b30      	subs	r3, #48	@ 0x30
 8008f60:	2b09      	cmp	r3, #9
 8008f62:	d94b      	bls.n	8008ffc <_svfiprintf_r+0x17c>
 8008f64:	b1b0      	cbz	r0, 8008f94 <_svfiprintf_r+0x114>
 8008f66:	9207      	str	r2, [sp, #28]
 8008f68:	e014      	b.n	8008f94 <_svfiprintf_r+0x114>
 8008f6a:	eba0 0308 	sub.w	r3, r0, r8
 8008f6e:	fa09 f303 	lsl.w	r3, r9, r3
 8008f72:	4313      	orrs	r3, r2
 8008f74:	9304      	str	r3, [sp, #16]
 8008f76:	46a2      	mov	sl, r4
 8008f78:	e7d2      	b.n	8008f20 <_svfiprintf_r+0xa0>
 8008f7a:	9b03      	ldr	r3, [sp, #12]
 8008f7c:	1d19      	adds	r1, r3, #4
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	9103      	str	r1, [sp, #12]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	bfbb      	ittet	lt
 8008f86:	425b      	neglt	r3, r3
 8008f88:	f042 0202 	orrlt.w	r2, r2, #2
 8008f8c:	9307      	strge	r3, [sp, #28]
 8008f8e:	9307      	strlt	r3, [sp, #28]
 8008f90:	bfb8      	it	lt
 8008f92:	9204      	strlt	r2, [sp, #16]
 8008f94:	7823      	ldrb	r3, [r4, #0]
 8008f96:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f98:	d10a      	bne.n	8008fb0 <_svfiprintf_r+0x130>
 8008f9a:	7863      	ldrb	r3, [r4, #1]
 8008f9c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f9e:	d132      	bne.n	8009006 <_svfiprintf_r+0x186>
 8008fa0:	9b03      	ldr	r3, [sp, #12]
 8008fa2:	1d1a      	adds	r2, r3, #4
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	9203      	str	r2, [sp, #12]
 8008fa8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008fac:	3402      	adds	r4, #2
 8008fae:	9305      	str	r3, [sp, #20]
 8008fb0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009074 <_svfiprintf_r+0x1f4>
 8008fb4:	7821      	ldrb	r1, [r4, #0]
 8008fb6:	2203      	movs	r2, #3
 8008fb8:	4650      	mov	r0, sl
 8008fba:	f7f7 f909 	bl	80001d0 <memchr>
 8008fbe:	b138      	cbz	r0, 8008fd0 <_svfiprintf_r+0x150>
 8008fc0:	9b04      	ldr	r3, [sp, #16]
 8008fc2:	eba0 000a 	sub.w	r0, r0, sl
 8008fc6:	2240      	movs	r2, #64	@ 0x40
 8008fc8:	4082      	lsls	r2, r0
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	3401      	adds	r4, #1
 8008fce:	9304      	str	r3, [sp, #16]
 8008fd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fd4:	4824      	ldr	r0, [pc, #144]	@ (8009068 <_svfiprintf_r+0x1e8>)
 8008fd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008fda:	2206      	movs	r2, #6
 8008fdc:	f7f7 f8f8 	bl	80001d0 <memchr>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	d036      	beq.n	8009052 <_svfiprintf_r+0x1d2>
 8008fe4:	4b21      	ldr	r3, [pc, #132]	@ (800906c <_svfiprintf_r+0x1ec>)
 8008fe6:	bb1b      	cbnz	r3, 8009030 <_svfiprintf_r+0x1b0>
 8008fe8:	9b03      	ldr	r3, [sp, #12]
 8008fea:	3307      	adds	r3, #7
 8008fec:	f023 0307 	bic.w	r3, r3, #7
 8008ff0:	3308      	adds	r3, #8
 8008ff2:	9303      	str	r3, [sp, #12]
 8008ff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ff6:	4433      	add	r3, r6
 8008ff8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ffa:	e76a      	b.n	8008ed2 <_svfiprintf_r+0x52>
 8008ffc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009000:	460c      	mov	r4, r1
 8009002:	2001      	movs	r0, #1
 8009004:	e7a8      	b.n	8008f58 <_svfiprintf_r+0xd8>
 8009006:	2300      	movs	r3, #0
 8009008:	3401      	adds	r4, #1
 800900a:	9305      	str	r3, [sp, #20]
 800900c:	4619      	mov	r1, r3
 800900e:	f04f 0c0a 	mov.w	ip, #10
 8009012:	4620      	mov	r0, r4
 8009014:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009018:	3a30      	subs	r2, #48	@ 0x30
 800901a:	2a09      	cmp	r2, #9
 800901c:	d903      	bls.n	8009026 <_svfiprintf_r+0x1a6>
 800901e:	2b00      	cmp	r3, #0
 8009020:	d0c6      	beq.n	8008fb0 <_svfiprintf_r+0x130>
 8009022:	9105      	str	r1, [sp, #20]
 8009024:	e7c4      	b.n	8008fb0 <_svfiprintf_r+0x130>
 8009026:	fb0c 2101 	mla	r1, ip, r1, r2
 800902a:	4604      	mov	r4, r0
 800902c:	2301      	movs	r3, #1
 800902e:	e7f0      	b.n	8009012 <_svfiprintf_r+0x192>
 8009030:	ab03      	add	r3, sp, #12
 8009032:	9300      	str	r3, [sp, #0]
 8009034:	462a      	mov	r2, r5
 8009036:	4b0e      	ldr	r3, [pc, #56]	@ (8009070 <_svfiprintf_r+0x1f0>)
 8009038:	a904      	add	r1, sp, #16
 800903a:	4638      	mov	r0, r7
 800903c:	f7fe fb82 	bl	8007744 <_printf_float>
 8009040:	1c42      	adds	r2, r0, #1
 8009042:	4606      	mov	r6, r0
 8009044:	d1d6      	bne.n	8008ff4 <_svfiprintf_r+0x174>
 8009046:	89ab      	ldrh	r3, [r5, #12]
 8009048:	065b      	lsls	r3, r3, #25
 800904a:	f53f af2d 	bmi.w	8008ea8 <_svfiprintf_r+0x28>
 800904e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009050:	e72c      	b.n	8008eac <_svfiprintf_r+0x2c>
 8009052:	ab03      	add	r3, sp, #12
 8009054:	9300      	str	r3, [sp, #0]
 8009056:	462a      	mov	r2, r5
 8009058:	4b05      	ldr	r3, [pc, #20]	@ (8009070 <_svfiprintf_r+0x1f0>)
 800905a:	a904      	add	r1, sp, #16
 800905c:	4638      	mov	r0, r7
 800905e:	f7fe fe09 	bl	8007c74 <_printf_i>
 8009062:	e7ed      	b.n	8009040 <_svfiprintf_r+0x1c0>
 8009064:	0800a4f9 	.word	0x0800a4f9
 8009068:	0800a503 	.word	0x0800a503
 800906c:	08007745 	.word	0x08007745
 8009070:	08008dc9 	.word	0x08008dc9
 8009074:	0800a4ff 	.word	0x0800a4ff

08009078 <malloc>:
 8009078:	4b02      	ldr	r3, [pc, #8]	@ (8009084 <malloc+0xc>)
 800907a:	4601      	mov	r1, r0
 800907c:	6818      	ldr	r0, [r3, #0]
 800907e:	f000 b825 	b.w	80090cc <_malloc_r>
 8009082:	bf00      	nop
 8009084:	20000058 	.word	0x20000058

08009088 <sbrk_aligned>:
 8009088:	b570      	push	{r4, r5, r6, lr}
 800908a:	4e0f      	ldr	r6, [pc, #60]	@ (80090c8 <sbrk_aligned+0x40>)
 800908c:	460c      	mov	r4, r1
 800908e:	6831      	ldr	r1, [r6, #0]
 8009090:	4605      	mov	r5, r0
 8009092:	b911      	cbnz	r1, 800909a <sbrk_aligned+0x12>
 8009094:	f000 fd94 	bl	8009bc0 <_sbrk_r>
 8009098:	6030      	str	r0, [r6, #0]
 800909a:	4621      	mov	r1, r4
 800909c:	4628      	mov	r0, r5
 800909e:	f000 fd8f 	bl	8009bc0 <_sbrk_r>
 80090a2:	1c43      	adds	r3, r0, #1
 80090a4:	d103      	bne.n	80090ae <sbrk_aligned+0x26>
 80090a6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80090aa:	4620      	mov	r0, r4
 80090ac:	bd70      	pop	{r4, r5, r6, pc}
 80090ae:	1cc4      	adds	r4, r0, #3
 80090b0:	f024 0403 	bic.w	r4, r4, #3
 80090b4:	42a0      	cmp	r0, r4
 80090b6:	d0f8      	beq.n	80090aa <sbrk_aligned+0x22>
 80090b8:	1a21      	subs	r1, r4, r0
 80090ba:	4628      	mov	r0, r5
 80090bc:	f000 fd80 	bl	8009bc0 <_sbrk_r>
 80090c0:	3001      	adds	r0, #1
 80090c2:	d1f2      	bne.n	80090aa <sbrk_aligned+0x22>
 80090c4:	e7ef      	b.n	80090a6 <sbrk_aligned+0x1e>
 80090c6:	bf00      	nop
 80090c8:	20000be4 	.word	0x20000be4

080090cc <_malloc_r>:
 80090cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090d0:	1ccd      	adds	r5, r1, #3
 80090d2:	f025 0503 	bic.w	r5, r5, #3
 80090d6:	3508      	adds	r5, #8
 80090d8:	2d0c      	cmp	r5, #12
 80090da:	bf38      	it	cc
 80090dc:	250c      	movcc	r5, #12
 80090de:	2d00      	cmp	r5, #0
 80090e0:	4606      	mov	r6, r0
 80090e2:	db01      	blt.n	80090e8 <_malloc_r+0x1c>
 80090e4:	42a9      	cmp	r1, r5
 80090e6:	d904      	bls.n	80090f2 <_malloc_r+0x26>
 80090e8:	230c      	movs	r3, #12
 80090ea:	6033      	str	r3, [r6, #0]
 80090ec:	2000      	movs	r0, #0
 80090ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80091c8 <_malloc_r+0xfc>
 80090f6:	f000 f915 	bl	8009324 <__malloc_lock>
 80090fa:	f8d8 3000 	ldr.w	r3, [r8]
 80090fe:	461c      	mov	r4, r3
 8009100:	bb44      	cbnz	r4, 8009154 <_malloc_r+0x88>
 8009102:	4629      	mov	r1, r5
 8009104:	4630      	mov	r0, r6
 8009106:	f7ff ffbf 	bl	8009088 <sbrk_aligned>
 800910a:	1c43      	adds	r3, r0, #1
 800910c:	4604      	mov	r4, r0
 800910e:	d158      	bne.n	80091c2 <_malloc_r+0xf6>
 8009110:	f8d8 4000 	ldr.w	r4, [r8]
 8009114:	4627      	mov	r7, r4
 8009116:	2f00      	cmp	r7, #0
 8009118:	d143      	bne.n	80091a2 <_malloc_r+0xd6>
 800911a:	2c00      	cmp	r4, #0
 800911c:	d04b      	beq.n	80091b6 <_malloc_r+0xea>
 800911e:	6823      	ldr	r3, [r4, #0]
 8009120:	4639      	mov	r1, r7
 8009122:	4630      	mov	r0, r6
 8009124:	eb04 0903 	add.w	r9, r4, r3
 8009128:	f000 fd4a 	bl	8009bc0 <_sbrk_r>
 800912c:	4581      	cmp	r9, r0
 800912e:	d142      	bne.n	80091b6 <_malloc_r+0xea>
 8009130:	6821      	ldr	r1, [r4, #0]
 8009132:	1a6d      	subs	r5, r5, r1
 8009134:	4629      	mov	r1, r5
 8009136:	4630      	mov	r0, r6
 8009138:	f7ff ffa6 	bl	8009088 <sbrk_aligned>
 800913c:	3001      	adds	r0, #1
 800913e:	d03a      	beq.n	80091b6 <_malloc_r+0xea>
 8009140:	6823      	ldr	r3, [r4, #0]
 8009142:	442b      	add	r3, r5
 8009144:	6023      	str	r3, [r4, #0]
 8009146:	f8d8 3000 	ldr.w	r3, [r8]
 800914a:	685a      	ldr	r2, [r3, #4]
 800914c:	bb62      	cbnz	r2, 80091a8 <_malloc_r+0xdc>
 800914e:	f8c8 7000 	str.w	r7, [r8]
 8009152:	e00f      	b.n	8009174 <_malloc_r+0xa8>
 8009154:	6822      	ldr	r2, [r4, #0]
 8009156:	1b52      	subs	r2, r2, r5
 8009158:	d420      	bmi.n	800919c <_malloc_r+0xd0>
 800915a:	2a0b      	cmp	r2, #11
 800915c:	d917      	bls.n	800918e <_malloc_r+0xc2>
 800915e:	1961      	adds	r1, r4, r5
 8009160:	42a3      	cmp	r3, r4
 8009162:	6025      	str	r5, [r4, #0]
 8009164:	bf18      	it	ne
 8009166:	6059      	strne	r1, [r3, #4]
 8009168:	6863      	ldr	r3, [r4, #4]
 800916a:	bf08      	it	eq
 800916c:	f8c8 1000 	streq.w	r1, [r8]
 8009170:	5162      	str	r2, [r4, r5]
 8009172:	604b      	str	r3, [r1, #4]
 8009174:	4630      	mov	r0, r6
 8009176:	f000 f8db 	bl	8009330 <__malloc_unlock>
 800917a:	f104 000b 	add.w	r0, r4, #11
 800917e:	1d23      	adds	r3, r4, #4
 8009180:	f020 0007 	bic.w	r0, r0, #7
 8009184:	1ac2      	subs	r2, r0, r3
 8009186:	bf1c      	itt	ne
 8009188:	1a1b      	subne	r3, r3, r0
 800918a:	50a3      	strne	r3, [r4, r2]
 800918c:	e7af      	b.n	80090ee <_malloc_r+0x22>
 800918e:	6862      	ldr	r2, [r4, #4]
 8009190:	42a3      	cmp	r3, r4
 8009192:	bf0c      	ite	eq
 8009194:	f8c8 2000 	streq.w	r2, [r8]
 8009198:	605a      	strne	r2, [r3, #4]
 800919a:	e7eb      	b.n	8009174 <_malloc_r+0xa8>
 800919c:	4623      	mov	r3, r4
 800919e:	6864      	ldr	r4, [r4, #4]
 80091a0:	e7ae      	b.n	8009100 <_malloc_r+0x34>
 80091a2:	463c      	mov	r4, r7
 80091a4:	687f      	ldr	r7, [r7, #4]
 80091a6:	e7b6      	b.n	8009116 <_malloc_r+0x4a>
 80091a8:	461a      	mov	r2, r3
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	42a3      	cmp	r3, r4
 80091ae:	d1fb      	bne.n	80091a8 <_malloc_r+0xdc>
 80091b0:	2300      	movs	r3, #0
 80091b2:	6053      	str	r3, [r2, #4]
 80091b4:	e7de      	b.n	8009174 <_malloc_r+0xa8>
 80091b6:	230c      	movs	r3, #12
 80091b8:	6033      	str	r3, [r6, #0]
 80091ba:	4630      	mov	r0, r6
 80091bc:	f000 f8b8 	bl	8009330 <__malloc_unlock>
 80091c0:	e794      	b.n	80090ec <_malloc_r+0x20>
 80091c2:	6005      	str	r5, [r0, #0]
 80091c4:	e7d6      	b.n	8009174 <_malloc_r+0xa8>
 80091c6:	bf00      	nop
 80091c8:	20000be8 	.word	0x20000be8

080091cc <__sflush_r>:
 80091cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80091d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091d4:	0716      	lsls	r6, r2, #28
 80091d6:	4605      	mov	r5, r0
 80091d8:	460c      	mov	r4, r1
 80091da:	d454      	bmi.n	8009286 <__sflush_r+0xba>
 80091dc:	684b      	ldr	r3, [r1, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	dc02      	bgt.n	80091e8 <__sflush_r+0x1c>
 80091e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	dd48      	ble.n	800927a <__sflush_r+0xae>
 80091e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80091ea:	2e00      	cmp	r6, #0
 80091ec:	d045      	beq.n	800927a <__sflush_r+0xae>
 80091ee:	2300      	movs	r3, #0
 80091f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80091f4:	682f      	ldr	r7, [r5, #0]
 80091f6:	6a21      	ldr	r1, [r4, #32]
 80091f8:	602b      	str	r3, [r5, #0]
 80091fa:	d030      	beq.n	800925e <__sflush_r+0x92>
 80091fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80091fe:	89a3      	ldrh	r3, [r4, #12]
 8009200:	0759      	lsls	r1, r3, #29
 8009202:	d505      	bpl.n	8009210 <__sflush_r+0x44>
 8009204:	6863      	ldr	r3, [r4, #4]
 8009206:	1ad2      	subs	r2, r2, r3
 8009208:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800920a:	b10b      	cbz	r3, 8009210 <__sflush_r+0x44>
 800920c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800920e:	1ad2      	subs	r2, r2, r3
 8009210:	2300      	movs	r3, #0
 8009212:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009214:	6a21      	ldr	r1, [r4, #32]
 8009216:	4628      	mov	r0, r5
 8009218:	47b0      	blx	r6
 800921a:	1c43      	adds	r3, r0, #1
 800921c:	89a3      	ldrh	r3, [r4, #12]
 800921e:	d106      	bne.n	800922e <__sflush_r+0x62>
 8009220:	6829      	ldr	r1, [r5, #0]
 8009222:	291d      	cmp	r1, #29
 8009224:	d82b      	bhi.n	800927e <__sflush_r+0xb2>
 8009226:	4a2a      	ldr	r2, [pc, #168]	@ (80092d0 <__sflush_r+0x104>)
 8009228:	410a      	asrs	r2, r1
 800922a:	07d6      	lsls	r6, r2, #31
 800922c:	d427      	bmi.n	800927e <__sflush_r+0xb2>
 800922e:	2200      	movs	r2, #0
 8009230:	6062      	str	r2, [r4, #4]
 8009232:	04d9      	lsls	r1, r3, #19
 8009234:	6922      	ldr	r2, [r4, #16]
 8009236:	6022      	str	r2, [r4, #0]
 8009238:	d504      	bpl.n	8009244 <__sflush_r+0x78>
 800923a:	1c42      	adds	r2, r0, #1
 800923c:	d101      	bne.n	8009242 <__sflush_r+0x76>
 800923e:	682b      	ldr	r3, [r5, #0]
 8009240:	b903      	cbnz	r3, 8009244 <__sflush_r+0x78>
 8009242:	6560      	str	r0, [r4, #84]	@ 0x54
 8009244:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009246:	602f      	str	r7, [r5, #0]
 8009248:	b1b9      	cbz	r1, 800927a <__sflush_r+0xae>
 800924a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800924e:	4299      	cmp	r1, r3
 8009250:	d002      	beq.n	8009258 <__sflush_r+0x8c>
 8009252:	4628      	mov	r0, r5
 8009254:	f000 fd08 	bl	8009c68 <_free_r>
 8009258:	2300      	movs	r3, #0
 800925a:	6363      	str	r3, [r4, #52]	@ 0x34
 800925c:	e00d      	b.n	800927a <__sflush_r+0xae>
 800925e:	2301      	movs	r3, #1
 8009260:	4628      	mov	r0, r5
 8009262:	47b0      	blx	r6
 8009264:	4602      	mov	r2, r0
 8009266:	1c50      	adds	r0, r2, #1
 8009268:	d1c9      	bne.n	80091fe <__sflush_r+0x32>
 800926a:	682b      	ldr	r3, [r5, #0]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d0c6      	beq.n	80091fe <__sflush_r+0x32>
 8009270:	2b1d      	cmp	r3, #29
 8009272:	d001      	beq.n	8009278 <__sflush_r+0xac>
 8009274:	2b16      	cmp	r3, #22
 8009276:	d11e      	bne.n	80092b6 <__sflush_r+0xea>
 8009278:	602f      	str	r7, [r5, #0]
 800927a:	2000      	movs	r0, #0
 800927c:	e022      	b.n	80092c4 <__sflush_r+0xf8>
 800927e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009282:	b21b      	sxth	r3, r3
 8009284:	e01b      	b.n	80092be <__sflush_r+0xf2>
 8009286:	690f      	ldr	r7, [r1, #16]
 8009288:	2f00      	cmp	r7, #0
 800928a:	d0f6      	beq.n	800927a <__sflush_r+0xae>
 800928c:	0793      	lsls	r3, r2, #30
 800928e:	680e      	ldr	r6, [r1, #0]
 8009290:	bf08      	it	eq
 8009292:	694b      	ldreq	r3, [r1, #20]
 8009294:	600f      	str	r7, [r1, #0]
 8009296:	bf18      	it	ne
 8009298:	2300      	movne	r3, #0
 800929a:	eba6 0807 	sub.w	r8, r6, r7
 800929e:	608b      	str	r3, [r1, #8]
 80092a0:	f1b8 0f00 	cmp.w	r8, #0
 80092a4:	dde9      	ble.n	800927a <__sflush_r+0xae>
 80092a6:	6a21      	ldr	r1, [r4, #32]
 80092a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80092aa:	4643      	mov	r3, r8
 80092ac:	463a      	mov	r2, r7
 80092ae:	4628      	mov	r0, r5
 80092b0:	47b0      	blx	r6
 80092b2:	2800      	cmp	r0, #0
 80092b4:	dc08      	bgt.n	80092c8 <__sflush_r+0xfc>
 80092b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092be:	81a3      	strh	r3, [r4, #12]
 80092c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80092c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092c8:	4407      	add	r7, r0
 80092ca:	eba8 0800 	sub.w	r8, r8, r0
 80092ce:	e7e7      	b.n	80092a0 <__sflush_r+0xd4>
 80092d0:	dfbffffe 	.word	0xdfbffffe

080092d4 <_fflush_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	690b      	ldr	r3, [r1, #16]
 80092d8:	4605      	mov	r5, r0
 80092da:	460c      	mov	r4, r1
 80092dc:	b913      	cbnz	r3, 80092e4 <_fflush_r+0x10>
 80092de:	2500      	movs	r5, #0
 80092e0:	4628      	mov	r0, r5
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	b118      	cbz	r0, 80092ee <_fflush_r+0x1a>
 80092e6:	6a03      	ldr	r3, [r0, #32]
 80092e8:	b90b      	cbnz	r3, 80092ee <_fflush_r+0x1a>
 80092ea:	f7fe fea3 	bl	8008034 <__sinit>
 80092ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d0f3      	beq.n	80092de <_fflush_r+0xa>
 80092f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80092f8:	07d0      	lsls	r0, r2, #31
 80092fa:	d404      	bmi.n	8009306 <_fflush_r+0x32>
 80092fc:	0599      	lsls	r1, r3, #22
 80092fe:	d402      	bmi.n	8009306 <_fflush_r+0x32>
 8009300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009302:	f7fe ff04 	bl	800810e <__retarget_lock_acquire_recursive>
 8009306:	4628      	mov	r0, r5
 8009308:	4621      	mov	r1, r4
 800930a:	f7ff ff5f 	bl	80091cc <__sflush_r>
 800930e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009310:	07da      	lsls	r2, r3, #31
 8009312:	4605      	mov	r5, r0
 8009314:	d4e4      	bmi.n	80092e0 <_fflush_r+0xc>
 8009316:	89a3      	ldrh	r3, [r4, #12]
 8009318:	059b      	lsls	r3, r3, #22
 800931a:	d4e1      	bmi.n	80092e0 <_fflush_r+0xc>
 800931c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800931e:	f7fe fef7 	bl	8008110 <__retarget_lock_release_recursive>
 8009322:	e7dd      	b.n	80092e0 <_fflush_r+0xc>

08009324 <__malloc_lock>:
 8009324:	4801      	ldr	r0, [pc, #4]	@ (800932c <__malloc_lock+0x8>)
 8009326:	f7fe bef2 	b.w	800810e <__retarget_lock_acquire_recursive>
 800932a:	bf00      	nop
 800932c:	20000be0 	.word	0x20000be0

08009330 <__malloc_unlock>:
 8009330:	4801      	ldr	r0, [pc, #4]	@ (8009338 <__malloc_unlock+0x8>)
 8009332:	f7fe beed 	b.w	8008110 <__retarget_lock_release_recursive>
 8009336:	bf00      	nop
 8009338:	20000be0 	.word	0x20000be0

0800933c <_Balloc>:
 800933c:	b570      	push	{r4, r5, r6, lr}
 800933e:	69c6      	ldr	r6, [r0, #28]
 8009340:	4604      	mov	r4, r0
 8009342:	460d      	mov	r5, r1
 8009344:	b976      	cbnz	r6, 8009364 <_Balloc+0x28>
 8009346:	2010      	movs	r0, #16
 8009348:	f7ff fe96 	bl	8009078 <malloc>
 800934c:	4602      	mov	r2, r0
 800934e:	61e0      	str	r0, [r4, #28]
 8009350:	b920      	cbnz	r0, 800935c <_Balloc+0x20>
 8009352:	4b18      	ldr	r3, [pc, #96]	@ (80093b4 <_Balloc+0x78>)
 8009354:	4818      	ldr	r0, [pc, #96]	@ (80093b8 <_Balloc+0x7c>)
 8009356:	216b      	movs	r1, #107	@ 0x6b
 8009358:	f000 fc54 	bl	8009c04 <__assert_func>
 800935c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009360:	6006      	str	r6, [r0, #0]
 8009362:	60c6      	str	r6, [r0, #12]
 8009364:	69e6      	ldr	r6, [r4, #28]
 8009366:	68f3      	ldr	r3, [r6, #12]
 8009368:	b183      	cbz	r3, 800938c <_Balloc+0x50>
 800936a:	69e3      	ldr	r3, [r4, #28]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009372:	b9b8      	cbnz	r0, 80093a4 <_Balloc+0x68>
 8009374:	2101      	movs	r1, #1
 8009376:	fa01 f605 	lsl.w	r6, r1, r5
 800937a:	1d72      	adds	r2, r6, #5
 800937c:	0092      	lsls	r2, r2, #2
 800937e:	4620      	mov	r0, r4
 8009380:	f000 fc5e 	bl	8009c40 <_calloc_r>
 8009384:	b160      	cbz	r0, 80093a0 <_Balloc+0x64>
 8009386:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800938a:	e00e      	b.n	80093aa <_Balloc+0x6e>
 800938c:	2221      	movs	r2, #33	@ 0x21
 800938e:	2104      	movs	r1, #4
 8009390:	4620      	mov	r0, r4
 8009392:	f000 fc55 	bl	8009c40 <_calloc_r>
 8009396:	69e3      	ldr	r3, [r4, #28]
 8009398:	60f0      	str	r0, [r6, #12]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1e4      	bne.n	800936a <_Balloc+0x2e>
 80093a0:	2000      	movs	r0, #0
 80093a2:	bd70      	pop	{r4, r5, r6, pc}
 80093a4:	6802      	ldr	r2, [r0, #0]
 80093a6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80093aa:	2300      	movs	r3, #0
 80093ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093b0:	e7f7      	b.n	80093a2 <_Balloc+0x66>
 80093b2:	bf00      	nop
 80093b4:	0800a479 	.word	0x0800a479
 80093b8:	0800a50a 	.word	0x0800a50a

080093bc <_Bfree>:
 80093bc:	b570      	push	{r4, r5, r6, lr}
 80093be:	69c6      	ldr	r6, [r0, #28]
 80093c0:	4605      	mov	r5, r0
 80093c2:	460c      	mov	r4, r1
 80093c4:	b976      	cbnz	r6, 80093e4 <_Bfree+0x28>
 80093c6:	2010      	movs	r0, #16
 80093c8:	f7ff fe56 	bl	8009078 <malloc>
 80093cc:	4602      	mov	r2, r0
 80093ce:	61e8      	str	r0, [r5, #28]
 80093d0:	b920      	cbnz	r0, 80093dc <_Bfree+0x20>
 80093d2:	4b09      	ldr	r3, [pc, #36]	@ (80093f8 <_Bfree+0x3c>)
 80093d4:	4809      	ldr	r0, [pc, #36]	@ (80093fc <_Bfree+0x40>)
 80093d6:	218f      	movs	r1, #143	@ 0x8f
 80093d8:	f000 fc14 	bl	8009c04 <__assert_func>
 80093dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093e0:	6006      	str	r6, [r0, #0]
 80093e2:	60c6      	str	r6, [r0, #12]
 80093e4:	b13c      	cbz	r4, 80093f6 <_Bfree+0x3a>
 80093e6:	69eb      	ldr	r3, [r5, #28]
 80093e8:	6862      	ldr	r2, [r4, #4]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093f0:	6021      	str	r1, [r4, #0]
 80093f2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80093f6:	bd70      	pop	{r4, r5, r6, pc}
 80093f8:	0800a479 	.word	0x0800a479
 80093fc:	0800a50a 	.word	0x0800a50a

08009400 <__multadd>:
 8009400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009404:	690d      	ldr	r5, [r1, #16]
 8009406:	4607      	mov	r7, r0
 8009408:	460c      	mov	r4, r1
 800940a:	461e      	mov	r6, r3
 800940c:	f101 0c14 	add.w	ip, r1, #20
 8009410:	2000      	movs	r0, #0
 8009412:	f8dc 3000 	ldr.w	r3, [ip]
 8009416:	b299      	uxth	r1, r3
 8009418:	fb02 6101 	mla	r1, r2, r1, r6
 800941c:	0c1e      	lsrs	r6, r3, #16
 800941e:	0c0b      	lsrs	r3, r1, #16
 8009420:	fb02 3306 	mla	r3, r2, r6, r3
 8009424:	b289      	uxth	r1, r1
 8009426:	3001      	adds	r0, #1
 8009428:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800942c:	4285      	cmp	r5, r0
 800942e:	f84c 1b04 	str.w	r1, [ip], #4
 8009432:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009436:	dcec      	bgt.n	8009412 <__multadd+0x12>
 8009438:	b30e      	cbz	r6, 800947e <__multadd+0x7e>
 800943a:	68a3      	ldr	r3, [r4, #8]
 800943c:	42ab      	cmp	r3, r5
 800943e:	dc19      	bgt.n	8009474 <__multadd+0x74>
 8009440:	6861      	ldr	r1, [r4, #4]
 8009442:	4638      	mov	r0, r7
 8009444:	3101      	adds	r1, #1
 8009446:	f7ff ff79 	bl	800933c <_Balloc>
 800944a:	4680      	mov	r8, r0
 800944c:	b928      	cbnz	r0, 800945a <__multadd+0x5a>
 800944e:	4602      	mov	r2, r0
 8009450:	4b0c      	ldr	r3, [pc, #48]	@ (8009484 <__multadd+0x84>)
 8009452:	480d      	ldr	r0, [pc, #52]	@ (8009488 <__multadd+0x88>)
 8009454:	21ba      	movs	r1, #186	@ 0xba
 8009456:	f000 fbd5 	bl	8009c04 <__assert_func>
 800945a:	6922      	ldr	r2, [r4, #16]
 800945c:	3202      	adds	r2, #2
 800945e:	f104 010c 	add.w	r1, r4, #12
 8009462:	0092      	lsls	r2, r2, #2
 8009464:	300c      	adds	r0, #12
 8009466:	f7fe fe54 	bl	8008112 <memcpy>
 800946a:	4621      	mov	r1, r4
 800946c:	4638      	mov	r0, r7
 800946e:	f7ff ffa5 	bl	80093bc <_Bfree>
 8009472:	4644      	mov	r4, r8
 8009474:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009478:	3501      	adds	r5, #1
 800947a:	615e      	str	r6, [r3, #20]
 800947c:	6125      	str	r5, [r4, #16]
 800947e:	4620      	mov	r0, r4
 8009480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009484:	0800a4e8 	.word	0x0800a4e8
 8009488:	0800a50a 	.word	0x0800a50a

0800948c <__hi0bits>:
 800948c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009490:	4603      	mov	r3, r0
 8009492:	bf36      	itet	cc
 8009494:	0403      	lslcc	r3, r0, #16
 8009496:	2000      	movcs	r0, #0
 8009498:	2010      	movcc	r0, #16
 800949a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800949e:	bf3c      	itt	cc
 80094a0:	021b      	lslcc	r3, r3, #8
 80094a2:	3008      	addcc	r0, #8
 80094a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094a8:	bf3c      	itt	cc
 80094aa:	011b      	lslcc	r3, r3, #4
 80094ac:	3004      	addcc	r0, #4
 80094ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094b2:	bf3c      	itt	cc
 80094b4:	009b      	lslcc	r3, r3, #2
 80094b6:	3002      	addcc	r0, #2
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	db05      	blt.n	80094c8 <__hi0bits+0x3c>
 80094bc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80094c0:	f100 0001 	add.w	r0, r0, #1
 80094c4:	bf08      	it	eq
 80094c6:	2020      	moveq	r0, #32
 80094c8:	4770      	bx	lr

080094ca <__lo0bits>:
 80094ca:	6803      	ldr	r3, [r0, #0]
 80094cc:	4602      	mov	r2, r0
 80094ce:	f013 0007 	ands.w	r0, r3, #7
 80094d2:	d00b      	beq.n	80094ec <__lo0bits+0x22>
 80094d4:	07d9      	lsls	r1, r3, #31
 80094d6:	d421      	bmi.n	800951c <__lo0bits+0x52>
 80094d8:	0798      	lsls	r0, r3, #30
 80094da:	bf49      	itett	mi
 80094dc:	085b      	lsrmi	r3, r3, #1
 80094de:	089b      	lsrpl	r3, r3, #2
 80094e0:	2001      	movmi	r0, #1
 80094e2:	6013      	strmi	r3, [r2, #0]
 80094e4:	bf5c      	itt	pl
 80094e6:	6013      	strpl	r3, [r2, #0]
 80094e8:	2002      	movpl	r0, #2
 80094ea:	4770      	bx	lr
 80094ec:	b299      	uxth	r1, r3
 80094ee:	b909      	cbnz	r1, 80094f4 <__lo0bits+0x2a>
 80094f0:	0c1b      	lsrs	r3, r3, #16
 80094f2:	2010      	movs	r0, #16
 80094f4:	b2d9      	uxtb	r1, r3
 80094f6:	b909      	cbnz	r1, 80094fc <__lo0bits+0x32>
 80094f8:	3008      	adds	r0, #8
 80094fa:	0a1b      	lsrs	r3, r3, #8
 80094fc:	0719      	lsls	r1, r3, #28
 80094fe:	bf04      	itt	eq
 8009500:	091b      	lsreq	r3, r3, #4
 8009502:	3004      	addeq	r0, #4
 8009504:	0799      	lsls	r1, r3, #30
 8009506:	bf04      	itt	eq
 8009508:	089b      	lsreq	r3, r3, #2
 800950a:	3002      	addeq	r0, #2
 800950c:	07d9      	lsls	r1, r3, #31
 800950e:	d403      	bmi.n	8009518 <__lo0bits+0x4e>
 8009510:	085b      	lsrs	r3, r3, #1
 8009512:	f100 0001 	add.w	r0, r0, #1
 8009516:	d003      	beq.n	8009520 <__lo0bits+0x56>
 8009518:	6013      	str	r3, [r2, #0]
 800951a:	4770      	bx	lr
 800951c:	2000      	movs	r0, #0
 800951e:	4770      	bx	lr
 8009520:	2020      	movs	r0, #32
 8009522:	4770      	bx	lr

08009524 <__i2b>:
 8009524:	b510      	push	{r4, lr}
 8009526:	460c      	mov	r4, r1
 8009528:	2101      	movs	r1, #1
 800952a:	f7ff ff07 	bl	800933c <_Balloc>
 800952e:	4602      	mov	r2, r0
 8009530:	b928      	cbnz	r0, 800953e <__i2b+0x1a>
 8009532:	4b05      	ldr	r3, [pc, #20]	@ (8009548 <__i2b+0x24>)
 8009534:	4805      	ldr	r0, [pc, #20]	@ (800954c <__i2b+0x28>)
 8009536:	f240 1145 	movw	r1, #325	@ 0x145
 800953a:	f000 fb63 	bl	8009c04 <__assert_func>
 800953e:	2301      	movs	r3, #1
 8009540:	6144      	str	r4, [r0, #20]
 8009542:	6103      	str	r3, [r0, #16]
 8009544:	bd10      	pop	{r4, pc}
 8009546:	bf00      	nop
 8009548:	0800a4e8 	.word	0x0800a4e8
 800954c:	0800a50a 	.word	0x0800a50a

08009550 <__multiply>:
 8009550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009554:	4614      	mov	r4, r2
 8009556:	690a      	ldr	r2, [r1, #16]
 8009558:	6923      	ldr	r3, [r4, #16]
 800955a:	429a      	cmp	r2, r3
 800955c:	bfa8      	it	ge
 800955e:	4623      	movge	r3, r4
 8009560:	460f      	mov	r7, r1
 8009562:	bfa4      	itt	ge
 8009564:	460c      	movge	r4, r1
 8009566:	461f      	movge	r7, r3
 8009568:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800956c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009570:	68a3      	ldr	r3, [r4, #8]
 8009572:	6861      	ldr	r1, [r4, #4]
 8009574:	eb0a 0609 	add.w	r6, sl, r9
 8009578:	42b3      	cmp	r3, r6
 800957a:	b085      	sub	sp, #20
 800957c:	bfb8      	it	lt
 800957e:	3101      	addlt	r1, #1
 8009580:	f7ff fedc 	bl	800933c <_Balloc>
 8009584:	b930      	cbnz	r0, 8009594 <__multiply+0x44>
 8009586:	4602      	mov	r2, r0
 8009588:	4b44      	ldr	r3, [pc, #272]	@ (800969c <__multiply+0x14c>)
 800958a:	4845      	ldr	r0, [pc, #276]	@ (80096a0 <__multiply+0x150>)
 800958c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009590:	f000 fb38 	bl	8009c04 <__assert_func>
 8009594:	f100 0514 	add.w	r5, r0, #20
 8009598:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800959c:	462b      	mov	r3, r5
 800959e:	2200      	movs	r2, #0
 80095a0:	4543      	cmp	r3, r8
 80095a2:	d321      	bcc.n	80095e8 <__multiply+0x98>
 80095a4:	f107 0114 	add.w	r1, r7, #20
 80095a8:	f104 0214 	add.w	r2, r4, #20
 80095ac:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80095b0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80095b4:	9302      	str	r3, [sp, #8]
 80095b6:	1b13      	subs	r3, r2, r4
 80095b8:	3b15      	subs	r3, #21
 80095ba:	f023 0303 	bic.w	r3, r3, #3
 80095be:	3304      	adds	r3, #4
 80095c0:	f104 0715 	add.w	r7, r4, #21
 80095c4:	42ba      	cmp	r2, r7
 80095c6:	bf38      	it	cc
 80095c8:	2304      	movcc	r3, #4
 80095ca:	9301      	str	r3, [sp, #4]
 80095cc:	9b02      	ldr	r3, [sp, #8]
 80095ce:	9103      	str	r1, [sp, #12]
 80095d0:	428b      	cmp	r3, r1
 80095d2:	d80c      	bhi.n	80095ee <__multiply+0x9e>
 80095d4:	2e00      	cmp	r6, #0
 80095d6:	dd03      	ble.n	80095e0 <__multiply+0x90>
 80095d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d05b      	beq.n	8009698 <__multiply+0x148>
 80095e0:	6106      	str	r6, [r0, #16]
 80095e2:	b005      	add	sp, #20
 80095e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e8:	f843 2b04 	str.w	r2, [r3], #4
 80095ec:	e7d8      	b.n	80095a0 <__multiply+0x50>
 80095ee:	f8b1 a000 	ldrh.w	sl, [r1]
 80095f2:	f1ba 0f00 	cmp.w	sl, #0
 80095f6:	d024      	beq.n	8009642 <__multiply+0xf2>
 80095f8:	f104 0e14 	add.w	lr, r4, #20
 80095fc:	46a9      	mov	r9, r5
 80095fe:	f04f 0c00 	mov.w	ip, #0
 8009602:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009606:	f8d9 3000 	ldr.w	r3, [r9]
 800960a:	fa1f fb87 	uxth.w	fp, r7
 800960e:	b29b      	uxth	r3, r3
 8009610:	fb0a 330b 	mla	r3, sl, fp, r3
 8009614:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009618:	f8d9 7000 	ldr.w	r7, [r9]
 800961c:	4463      	add	r3, ip
 800961e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009622:	fb0a c70b 	mla	r7, sl, fp, ip
 8009626:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800962a:	b29b      	uxth	r3, r3
 800962c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009630:	4572      	cmp	r2, lr
 8009632:	f849 3b04 	str.w	r3, [r9], #4
 8009636:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800963a:	d8e2      	bhi.n	8009602 <__multiply+0xb2>
 800963c:	9b01      	ldr	r3, [sp, #4]
 800963e:	f845 c003 	str.w	ip, [r5, r3]
 8009642:	9b03      	ldr	r3, [sp, #12]
 8009644:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009648:	3104      	adds	r1, #4
 800964a:	f1b9 0f00 	cmp.w	r9, #0
 800964e:	d021      	beq.n	8009694 <__multiply+0x144>
 8009650:	682b      	ldr	r3, [r5, #0]
 8009652:	f104 0c14 	add.w	ip, r4, #20
 8009656:	46ae      	mov	lr, r5
 8009658:	f04f 0a00 	mov.w	sl, #0
 800965c:	f8bc b000 	ldrh.w	fp, [ip]
 8009660:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009664:	fb09 770b 	mla	r7, r9, fp, r7
 8009668:	4457      	add	r7, sl
 800966a:	b29b      	uxth	r3, r3
 800966c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009670:	f84e 3b04 	str.w	r3, [lr], #4
 8009674:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009678:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800967c:	f8be 3000 	ldrh.w	r3, [lr]
 8009680:	fb09 330a 	mla	r3, r9, sl, r3
 8009684:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009688:	4562      	cmp	r2, ip
 800968a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800968e:	d8e5      	bhi.n	800965c <__multiply+0x10c>
 8009690:	9f01      	ldr	r7, [sp, #4]
 8009692:	51eb      	str	r3, [r5, r7]
 8009694:	3504      	adds	r5, #4
 8009696:	e799      	b.n	80095cc <__multiply+0x7c>
 8009698:	3e01      	subs	r6, #1
 800969a:	e79b      	b.n	80095d4 <__multiply+0x84>
 800969c:	0800a4e8 	.word	0x0800a4e8
 80096a0:	0800a50a 	.word	0x0800a50a

080096a4 <__pow5mult>:
 80096a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096a8:	4615      	mov	r5, r2
 80096aa:	f012 0203 	ands.w	r2, r2, #3
 80096ae:	4607      	mov	r7, r0
 80096b0:	460e      	mov	r6, r1
 80096b2:	d007      	beq.n	80096c4 <__pow5mult+0x20>
 80096b4:	4c25      	ldr	r4, [pc, #148]	@ (800974c <__pow5mult+0xa8>)
 80096b6:	3a01      	subs	r2, #1
 80096b8:	2300      	movs	r3, #0
 80096ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096be:	f7ff fe9f 	bl	8009400 <__multadd>
 80096c2:	4606      	mov	r6, r0
 80096c4:	10ad      	asrs	r5, r5, #2
 80096c6:	d03d      	beq.n	8009744 <__pow5mult+0xa0>
 80096c8:	69fc      	ldr	r4, [r7, #28]
 80096ca:	b97c      	cbnz	r4, 80096ec <__pow5mult+0x48>
 80096cc:	2010      	movs	r0, #16
 80096ce:	f7ff fcd3 	bl	8009078 <malloc>
 80096d2:	4602      	mov	r2, r0
 80096d4:	61f8      	str	r0, [r7, #28]
 80096d6:	b928      	cbnz	r0, 80096e4 <__pow5mult+0x40>
 80096d8:	4b1d      	ldr	r3, [pc, #116]	@ (8009750 <__pow5mult+0xac>)
 80096da:	481e      	ldr	r0, [pc, #120]	@ (8009754 <__pow5mult+0xb0>)
 80096dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80096e0:	f000 fa90 	bl	8009c04 <__assert_func>
 80096e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096e8:	6004      	str	r4, [r0, #0]
 80096ea:	60c4      	str	r4, [r0, #12]
 80096ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80096f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096f4:	b94c      	cbnz	r4, 800970a <__pow5mult+0x66>
 80096f6:	f240 2171 	movw	r1, #625	@ 0x271
 80096fa:	4638      	mov	r0, r7
 80096fc:	f7ff ff12 	bl	8009524 <__i2b>
 8009700:	2300      	movs	r3, #0
 8009702:	f8c8 0008 	str.w	r0, [r8, #8]
 8009706:	4604      	mov	r4, r0
 8009708:	6003      	str	r3, [r0, #0]
 800970a:	f04f 0900 	mov.w	r9, #0
 800970e:	07eb      	lsls	r3, r5, #31
 8009710:	d50a      	bpl.n	8009728 <__pow5mult+0x84>
 8009712:	4631      	mov	r1, r6
 8009714:	4622      	mov	r2, r4
 8009716:	4638      	mov	r0, r7
 8009718:	f7ff ff1a 	bl	8009550 <__multiply>
 800971c:	4631      	mov	r1, r6
 800971e:	4680      	mov	r8, r0
 8009720:	4638      	mov	r0, r7
 8009722:	f7ff fe4b 	bl	80093bc <_Bfree>
 8009726:	4646      	mov	r6, r8
 8009728:	106d      	asrs	r5, r5, #1
 800972a:	d00b      	beq.n	8009744 <__pow5mult+0xa0>
 800972c:	6820      	ldr	r0, [r4, #0]
 800972e:	b938      	cbnz	r0, 8009740 <__pow5mult+0x9c>
 8009730:	4622      	mov	r2, r4
 8009732:	4621      	mov	r1, r4
 8009734:	4638      	mov	r0, r7
 8009736:	f7ff ff0b 	bl	8009550 <__multiply>
 800973a:	6020      	str	r0, [r4, #0]
 800973c:	f8c0 9000 	str.w	r9, [r0]
 8009740:	4604      	mov	r4, r0
 8009742:	e7e4      	b.n	800970e <__pow5mult+0x6a>
 8009744:	4630      	mov	r0, r6
 8009746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800974a:	bf00      	nop
 800974c:	0800a564 	.word	0x0800a564
 8009750:	0800a479 	.word	0x0800a479
 8009754:	0800a50a 	.word	0x0800a50a

08009758 <__lshift>:
 8009758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800975c:	460c      	mov	r4, r1
 800975e:	6849      	ldr	r1, [r1, #4]
 8009760:	6923      	ldr	r3, [r4, #16]
 8009762:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009766:	68a3      	ldr	r3, [r4, #8]
 8009768:	4607      	mov	r7, r0
 800976a:	4691      	mov	r9, r2
 800976c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009770:	f108 0601 	add.w	r6, r8, #1
 8009774:	42b3      	cmp	r3, r6
 8009776:	db0b      	blt.n	8009790 <__lshift+0x38>
 8009778:	4638      	mov	r0, r7
 800977a:	f7ff fddf 	bl	800933c <_Balloc>
 800977e:	4605      	mov	r5, r0
 8009780:	b948      	cbnz	r0, 8009796 <__lshift+0x3e>
 8009782:	4602      	mov	r2, r0
 8009784:	4b28      	ldr	r3, [pc, #160]	@ (8009828 <__lshift+0xd0>)
 8009786:	4829      	ldr	r0, [pc, #164]	@ (800982c <__lshift+0xd4>)
 8009788:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800978c:	f000 fa3a 	bl	8009c04 <__assert_func>
 8009790:	3101      	adds	r1, #1
 8009792:	005b      	lsls	r3, r3, #1
 8009794:	e7ee      	b.n	8009774 <__lshift+0x1c>
 8009796:	2300      	movs	r3, #0
 8009798:	f100 0114 	add.w	r1, r0, #20
 800979c:	f100 0210 	add.w	r2, r0, #16
 80097a0:	4618      	mov	r0, r3
 80097a2:	4553      	cmp	r3, sl
 80097a4:	db33      	blt.n	800980e <__lshift+0xb6>
 80097a6:	6920      	ldr	r0, [r4, #16]
 80097a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097ac:	f104 0314 	add.w	r3, r4, #20
 80097b0:	f019 091f 	ands.w	r9, r9, #31
 80097b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80097bc:	d02b      	beq.n	8009816 <__lshift+0xbe>
 80097be:	f1c9 0e20 	rsb	lr, r9, #32
 80097c2:	468a      	mov	sl, r1
 80097c4:	2200      	movs	r2, #0
 80097c6:	6818      	ldr	r0, [r3, #0]
 80097c8:	fa00 f009 	lsl.w	r0, r0, r9
 80097cc:	4310      	orrs	r0, r2
 80097ce:	f84a 0b04 	str.w	r0, [sl], #4
 80097d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097d6:	459c      	cmp	ip, r3
 80097d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80097dc:	d8f3      	bhi.n	80097c6 <__lshift+0x6e>
 80097de:	ebac 0304 	sub.w	r3, ip, r4
 80097e2:	3b15      	subs	r3, #21
 80097e4:	f023 0303 	bic.w	r3, r3, #3
 80097e8:	3304      	adds	r3, #4
 80097ea:	f104 0015 	add.w	r0, r4, #21
 80097ee:	4584      	cmp	ip, r0
 80097f0:	bf38      	it	cc
 80097f2:	2304      	movcc	r3, #4
 80097f4:	50ca      	str	r2, [r1, r3]
 80097f6:	b10a      	cbz	r2, 80097fc <__lshift+0xa4>
 80097f8:	f108 0602 	add.w	r6, r8, #2
 80097fc:	3e01      	subs	r6, #1
 80097fe:	4638      	mov	r0, r7
 8009800:	612e      	str	r6, [r5, #16]
 8009802:	4621      	mov	r1, r4
 8009804:	f7ff fdda 	bl	80093bc <_Bfree>
 8009808:	4628      	mov	r0, r5
 800980a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800980e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009812:	3301      	adds	r3, #1
 8009814:	e7c5      	b.n	80097a2 <__lshift+0x4a>
 8009816:	3904      	subs	r1, #4
 8009818:	f853 2b04 	ldr.w	r2, [r3], #4
 800981c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009820:	459c      	cmp	ip, r3
 8009822:	d8f9      	bhi.n	8009818 <__lshift+0xc0>
 8009824:	e7ea      	b.n	80097fc <__lshift+0xa4>
 8009826:	bf00      	nop
 8009828:	0800a4e8 	.word	0x0800a4e8
 800982c:	0800a50a 	.word	0x0800a50a

08009830 <__mcmp>:
 8009830:	690a      	ldr	r2, [r1, #16]
 8009832:	4603      	mov	r3, r0
 8009834:	6900      	ldr	r0, [r0, #16]
 8009836:	1a80      	subs	r0, r0, r2
 8009838:	b530      	push	{r4, r5, lr}
 800983a:	d10e      	bne.n	800985a <__mcmp+0x2a>
 800983c:	3314      	adds	r3, #20
 800983e:	3114      	adds	r1, #20
 8009840:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009844:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009848:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800984c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009850:	4295      	cmp	r5, r2
 8009852:	d003      	beq.n	800985c <__mcmp+0x2c>
 8009854:	d205      	bcs.n	8009862 <__mcmp+0x32>
 8009856:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800985a:	bd30      	pop	{r4, r5, pc}
 800985c:	42a3      	cmp	r3, r4
 800985e:	d3f3      	bcc.n	8009848 <__mcmp+0x18>
 8009860:	e7fb      	b.n	800985a <__mcmp+0x2a>
 8009862:	2001      	movs	r0, #1
 8009864:	e7f9      	b.n	800985a <__mcmp+0x2a>
	...

08009868 <__mdiff>:
 8009868:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800986c:	4689      	mov	r9, r1
 800986e:	4606      	mov	r6, r0
 8009870:	4611      	mov	r1, r2
 8009872:	4648      	mov	r0, r9
 8009874:	4614      	mov	r4, r2
 8009876:	f7ff ffdb 	bl	8009830 <__mcmp>
 800987a:	1e05      	subs	r5, r0, #0
 800987c:	d112      	bne.n	80098a4 <__mdiff+0x3c>
 800987e:	4629      	mov	r1, r5
 8009880:	4630      	mov	r0, r6
 8009882:	f7ff fd5b 	bl	800933c <_Balloc>
 8009886:	4602      	mov	r2, r0
 8009888:	b928      	cbnz	r0, 8009896 <__mdiff+0x2e>
 800988a:	4b3f      	ldr	r3, [pc, #252]	@ (8009988 <__mdiff+0x120>)
 800988c:	f240 2137 	movw	r1, #567	@ 0x237
 8009890:	483e      	ldr	r0, [pc, #248]	@ (800998c <__mdiff+0x124>)
 8009892:	f000 f9b7 	bl	8009c04 <__assert_func>
 8009896:	2301      	movs	r3, #1
 8009898:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800989c:	4610      	mov	r0, r2
 800989e:	b003      	add	sp, #12
 80098a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a4:	bfbc      	itt	lt
 80098a6:	464b      	movlt	r3, r9
 80098a8:	46a1      	movlt	r9, r4
 80098aa:	4630      	mov	r0, r6
 80098ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80098b0:	bfba      	itte	lt
 80098b2:	461c      	movlt	r4, r3
 80098b4:	2501      	movlt	r5, #1
 80098b6:	2500      	movge	r5, #0
 80098b8:	f7ff fd40 	bl	800933c <_Balloc>
 80098bc:	4602      	mov	r2, r0
 80098be:	b918      	cbnz	r0, 80098c8 <__mdiff+0x60>
 80098c0:	4b31      	ldr	r3, [pc, #196]	@ (8009988 <__mdiff+0x120>)
 80098c2:	f240 2145 	movw	r1, #581	@ 0x245
 80098c6:	e7e3      	b.n	8009890 <__mdiff+0x28>
 80098c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80098cc:	6926      	ldr	r6, [r4, #16]
 80098ce:	60c5      	str	r5, [r0, #12]
 80098d0:	f109 0310 	add.w	r3, r9, #16
 80098d4:	f109 0514 	add.w	r5, r9, #20
 80098d8:	f104 0e14 	add.w	lr, r4, #20
 80098dc:	f100 0b14 	add.w	fp, r0, #20
 80098e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80098e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80098e8:	9301      	str	r3, [sp, #4]
 80098ea:	46d9      	mov	r9, fp
 80098ec:	f04f 0c00 	mov.w	ip, #0
 80098f0:	9b01      	ldr	r3, [sp, #4]
 80098f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80098f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80098fa:	9301      	str	r3, [sp, #4]
 80098fc:	fa1f f38a 	uxth.w	r3, sl
 8009900:	4619      	mov	r1, r3
 8009902:	b283      	uxth	r3, r0
 8009904:	1acb      	subs	r3, r1, r3
 8009906:	0c00      	lsrs	r0, r0, #16
 8009908:	4463      	add	r3, ip
 800990a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800990e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009912:	b29b      	uxth	r3, r3
 8009914:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009918:	4576      	cmp	r6, lr
 800991a:	f849 3b04 	str.w	r3, [r9], #4
 800991e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009922:	d8e5      	bhi.n	80098f0 <__mdiff+0x88>
 8009924:	1b33      	subs	r3, r6, r4
 8009926:	3b15      	subs	r3, #21
 8009928:	f023 0303 	bic.w	r3, r3, #3
 800992c:	3415      	adds	r4, #21
 800992e:	3304      	adds	r3, #4
 8009930:	42a6      	cmp	r6, r4
 8009932:	bf38      	it	cc
 8009934:	2304      	movcc	r3, #4
 8009936:	441d      	add	r5, r3
 8009938:	445b      	add	r3, fp
 800993a:	461e      	mov	r6, r3
 800993c:	462c      	mov	r4, r5
 800993e:	4544      	cmp	r4, r8
 8009940:	d30e      	bcc.n	8009960 <__mdiff+0xf8>
 8009942:	f108 0103 	add.w	r1, r8, #3
 8009946:	1b49      	subs	r1, r1, r5
 8009948:	f021 0103 	bic.w	r1, r1, #3
 800994c:	3d03      	subs	r5, #3
 800994e:	45a8      	cmp	r8, r5
 8009950:	bf38      	it	cc
 8009952:	2100      	movcc	r1, #0
 8009954:	440b      	add	r3, r1
 8009956:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800995a:	b191      	cbz	r1, 8009982 <__mdiff+0x11a>
 800995c:	6117      	str	r7, [r2, #16]
 800995e:	e79d      	b.n	800989c <__mdiff+0x34>
 8009960:	f854 1b04 	ldr.w	r1, [r4], #4
 8009964:	46e6      	mov	lr, ip
 8009966:	0c08      	lsrs	r0, r1, #16
 8009968:	fa1c fc81 	uxtah	ip, ip, r1
 800996c:	4471      	add	r1, lr
 800996e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009972:	b289      	uxth	r1, r1
 8009974:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009978:	f846 1b04 	str.w	r1, [r6], #4
 800997c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009980:	e7dd      	b.n	800993e <__mdiff+0xd6>
 8009982:	3f01      	subs	r7, #1
 8009984:	e7e7      	b.n	8009956 <__mdiff+0xee>
 8009986:	bf00      	nop
 8009988:	0800a4e8 	.word	0x0800a4e8
 800998c:	0800a50a 	.word	0x0800a50a

08009990 <__d2b>:
 8009990:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009994:	460f      	mov	r7, r1
 8009996:	2101      	movs	r1, #1
 8009998:	ec59 8b10 	vmov	r8, r9, d0
 800999c:	4616      	mov	r6, r2
 800999e:	f7ff fccd 	bl	800933c <_Balloc>
 80099a2:	4604      	mov	r4, r0
 80099a4:	b930      	cbnz	r0, 80099b4 <__d2b+0x24>
 80099a6:	4602      	mov	r2, r0
 80099a8:	4b23      	ldr	r3, [pc, #140]	@ (8009a38 <__d2b+0xa8>)
 80099aa:	4824      	ldr	r0, [pc, #144]	@ (8009a3c <__d2b+0xac>)
 80099ac:	f240 310f 	movw	r1, #783	@ 0x30f
 80099b0:	f000 f928 	bl	8009c04 <__assert_func>
 80099b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80099b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80099bc:	b10d      	cbz	r5, 80099c2 <__d2b+0x32>
 80099be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80099c2:	9301      	str	r3, [sp, #4]
 80099c4:	f1b8 0300 	subs.w	r3, r8, #0
 80099c8:	d023      	beq.n	8009a12 <__d2b+0x82>
 80099ca:	4668      	mov	r0, sp
 80099cc:	9300      	str	r3, [sp, #0]
 80099ce:	f7ff fd7c 	bl	80094ca <__lo0bits>
 80099d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80099d6:	b1d0      	cbz	r0, 8009a0e <__d2b+0x7e>
 80099d8:	f1c0 0320 	rsb	r3, r0, #32
 80099dc:	fa02 f303 	lsl.w	r3, r2, r3
 80099e0:	430b      	orrs	r3, r1
 80099e2:	40c2      	lsrs	r2, r0
 80099e4:	6163      	str	r3, [r4, #20]
 80099e6:	9201      	str	r2, [sp, #4]
 80099e8:	9b01      	ldr	r3, [sp, #4]
 80099ea:	61a3      	str	r3, [r4, #24]
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	bf0c      	ite	eq
 80099f0:	2201      	moveq	r2, #1
 80099f2:	2202      	movne	r2, #2
 80099f4:	6122      	str	r2, [r4, #16]
 80099f6:	b1a5      	cbz	r5, 8009a22 <__d2b+0x92>
 80099f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80099fc:	4405      	add	r5, r0
 80099fe:	603d      	str	r5, [r7, #0]
 8009a00:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009a04:	6030      	str	r0, [r6, #0]
 8009a06:	4620      	mov	r0, r4
 8009a08:	b003      	add	sp, #12
 8009a0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a0e:	6161      	str	r1, [r4, #20]
 8009a10:	e7ea      	b.n	80099e8 <__d2b+0x58>
 8009a12:	a801      	add	r0, sp, #4
 8009a14:	f7ff fd59 	bl	80094ca <__lo0bits>
 8009a18:	9b01      	ldr	r3, [sp, #4]
 8009a1a:	6163      	str	r3, [r4, #20]
 8009a1c:	3020      	adds	r0, #32
 8009a1e:	2201      	movs	r2, #1
 8009a20:	e7e8      	b.n	80099f4 <__d2b+0x64>
 8009a22:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a26:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009a2a:	6038      	str	r0, [r7, #0]
 8009a2c:	6918      	ldr	r0, [r3, #16]
 8009a2e:	f7ff fd2d 	bl	800948c <__hi0bits>
 8009a32:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a36:	e7e5      	b.n	8009a04 <__d2b+0x74>
 8009a38:	0800a4e8 	.word	0x0800a4e8
 8009a3c:	0800a50a 	.word	0x0800a50a

08009a40 <__sread>:
 8009a40:	b510      	push	{r4, lr}
 8009a42:	460c      	mov	r4, r1
 8009a44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a48:	f000 f8a8 	bl	8009b9c <_read_r>
 8009a4c:	2800      	cmp	r0, #0
 8009a4e:	bfab      	itete	ge
 8009a50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009a52:	89a3      	ldrhlt	r3, [r4, #12]
 8009a54:	181b      	addge	r3, r3, r0
 8009a56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009a5a:	bfac      	ite	ge
 8009a5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009a5e:	81a3      	strhlt	r3, [r4, #12]
 8009a60:	bd10      	pop	{r4, pc}

08009a62 <__swrite>:
 8009a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a66:	461f      	mov	r7, r3
 8009a68:	898b      	ldrh	r3, [r1, #12]
 8009a6a:	05db      	lsls	r3, r3, #23
 8009a6c:	4605      	mov	r5, r0
 8009a6e:	460c      	mov	r4, r1
 8009a70:	4616      	mov	r6, r2
 8009a72:	d505      	bpl.n	8009a80 <__swrite+0x1e>
 8009a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a78:	2302      	movs	r3, #2
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f000 f87c 	bl	8009b78 <_lseek_r>
 8009a80:	89a3      	ldrh	r3, [r4, #12]
 8009a82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009a8a:	81a3      	strh	r3, [r4, #12]
 8009a8c:	4632      	mov	r2, r6
 8009a8e:	463b      	mov	r3, r7
 8009a90:	4628      	mov	r0, r5
 8009a92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009a96:	f000 b8a3 	b.w	8009be0 <_write_r>

08009a9a <__sseek>:
 8009a9a:	b510      	push	{r4, lr}
 8009a9c:	460c      	mov	r4, r1
 8009a9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009aa2:	f000 f869 	bl	8009b78 <_lseek_r>
 8009aa6:	1c43      	adds	r3, r0, #1
 8009aa8:	89a3      	ldrh	r3, [r4, #12]
 8009aaa:	bf15      	itete	ne
 8009aac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009aae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009ab2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009ab6:	81a3      	strheq	r3, [r4, #12]
 8009ab8:	bf18      	it	ne
 8009aba:	81a3      	strhne	r3, [r4, #12]
 8009abc:	bd10      	pop	{r4, pc}

08009abe <__sclose>:
 8009abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ac2:	f000 b849 	b.w	8009b58 <_close_r>

08009ac6 <_realloc_r>:
 8009ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aca:	4680      	mov	r8, r0
 8009acc:	4615      	mov	r5, r2
 8009ace:	460c      	mov	r4, r1
 8009ad0:	b921      	cbnz	r1, 8009adc <_realloc_r+0x16>
 8009ad2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad6:	4611      	mov	r1, r2
 8009ad8:	f7ff baf8 	b.w	80090cc <_malloc_r>
 8009adc:	b92a      	cbnz	r2, 8009aea <_realloc_r+0x24>
 8009ade:	f000 f8c3 	bl	8009c68 <_free_r>
 8009ae2:	2400      	movs	r4, #0
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aea:	f000 f919 	bl	8009d20 <_malloc_usable_size_r>
 8009aee:	4285      	cmp	r5, r0
 8009af0:	4606      	mov	r6, r0
 8009af2:	d802      	bhi.n	8009afa <_realloc_r+0x34>
 8009af4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009af8:	d8f4      	bhi.n	8009ae4 <_realloc_r+0x1e>
 8009afa:	4629      	mov	r1, r5
 8009afc:	4640      	mov	r0, r8
 8009afe:	f7ff fae5 	bl	80090cc <_malloc_r>
 8009b02:	4607      	mov	r7, r0
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d0ec      	beq.n	8009ae2 <_realloc_r+0x1c>
 8009b08:	42b5      	cmp	r5, r6
 8009b0a:	462a      	mov	r2, r5
 8009b0c:	4621      	mov	r1, r4
 8009b0e:	bf28      	it	cs
 8009b10:	4632      	movcs	r2, r6
 8009b12:	f7fe fafe 	bl	8008112 <memcpy>
 8009b16:	4621      	mov	r1, r4
 8009b18:	4640      	mov	r0, r8
 8009b1a:	f000 f8a5 	bl	8009c68 <_free_r>
 8009b1e:	463c      	mov	r4, r7
 8009b20:	e7e0      	b.n	8009ae4 <_realloc_r+0x1e>

08009b22 <memmove>:
 8009b22:	4288      	cmp	r0, r1
 8009b24:	b510      	push	{r4, lr}
 8009b26:	eb01 0402 	add.w	r4, r1, r2
 8009b2a:	d902      	bls.n	8009b32 <memmove+0x10>
 8009b2c:	4284      	cmp	r4, r0
 8009b2e:	4623      	mov	r3, r4
 8009b30:	d807      	bhi.n	8009b42 <memmove+0x20>
 8009b32:	1e43      	subs	r3, r0, #1
 8009b34:	42a1      	cmp	r1, r4
 8009b36:	d008      	beq.n	8009b4a <memmove+0x28>
 8009b38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b3c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b40:	e7f8      	b.n	8009b34 <memmove+0x12>
 8009b42:	4402      	add	r2, r0
 8009b44:	4601      	mov	r1, r0
 8009b46:	428a      	cmp	r2, r1
 8009b48:	d100      	bne.n	8009b4c <memmove+0x2a>
 8009b4a:	bd10      	pop	{r4, pc}
 8009b4c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b50:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b54:	e7f7      	b.n	8009b46 <memmove+0x24>
	...

08009b58 <_close_r>:
 8009b58:	b538      	push	{r3, r4, r5, lr}
 8009b5a:	4d06      	ldr	r5, [pc, #24]	@ (8009b74 <_close_r+0x1c>)
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	4604      	mov	r4, r0
 8009b60:	4608      	mov	r0, r1
 8009b62:	602b      	str	r3, [r5, #0]
 8009b64:	f7f8 fdac 	bl	80026c0 <_close>
 8009b68:	1c43      	adds	r3, r0, #1
 8009b6a:	d102      	bne.n	8009b72 <_close_r+0x1a>
 8009b6c:	682b      	ldr	r3, [r5, #0]
 8009b6e:	b103      	cbz	r3, 8009b72 <_close_r+0x1a>
 8009b70:	6023      	str	r3, [r4, #0]
 8009b72:	bd38      	pop	{r3, r4, r5, pc}
 8009b74:	20000bec 	.word	0x20000bec

08009b78 <_lseek_r>:
 8009b78:	b538      	push	{r3, r4, r5, lr}
 8009b7a:	4d07      	ldr	r5, [pc, #28]	@ (8009b98 <_lseek_r+0x20>)
 8009b7c:	4604      	mov	r4, r0
 8009b7e:	4608      	mov	r0, r1
 8009b80:	4611      	mov	r1, r2
 8009b82:	2200      	movs	r2, #0
 8009b84:	602a      	str	r2, [r5, #0]
 8009b86:	461a      	mov	r2, r3
 8009b88:	f7f8 fdc1 	bl	800270e <_lseek>
 8009b8c:	1c43      	adds	r3, r0, #1
 8009b8e:	d102      	bne.n	8009b96 <_lseek_r+0x1e>
 8009b90:	682b      	ldr	r3, [r5, #0]
 8009b92:	b103      	cbz	r3, 8009b96 <_lseek_r+0x1e>
 8009b94:	6023      	str	r3, [r4, #0]
 8009b96:	bd38      	pop	{r3, r4, r5, pc}
 8009b98:	20000bec 	.word	0x20000bec

08009b9c <_read_r>:
 8009b9c:	b538      	push	{r3, r4, r5, lr}
 8009b9e:	4d07      	ldr	r5, [pc, #28]	@ (8009bbc <_read_r+0x20>)
 8009ba0:	4604      	mov	r4, r0
 8009ba2:	4608      	mov	r0, r1
 8009ba4:	4611      	mov	r1, r2
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	602a      	str	r2, [r5, #0]
 8009baa:	461a      	mov	r2, r3
 8009bac:	f7f8 fd4f 	bl	800264e <_read>
 8009bb0:	1c43      	adds	r3, r0, #1
 8009bb2:	d102      	bne.n	8009bba <_read_r+0x1e>
 8009bb4:	682b      	ldr	r3, [r5, #0]
 8009bb6:	b103      	cbz	r3, 8009bba <_read_r+0x1e>
 8009bb8:	6023      	str	r3, [r4, #0]
 8009bba:	bd38      	pop	{r3, r4, r5, pc}
 8009bbc:	20000bec 	.word	0x20000bec

08009bc0 <_sbrk_r>:
 8009bc0:	b538      	push	{r3, r4, r5, lr}
 8009bc2:	4d06      	ldr	r5, [pc, #24]	@ (8009bdc <_sbrk_r+0x1c>)
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	4604      	mov	r4, r0
 8009bc8:	4608      	mov	r0, r1
 8009bca:	602b      	str	r3, [r5, #0]
 8009bcc:	f7f8 fdac 	bl	8002728 <_sbrk>
 8009bd0:	1c43      	adds	r3, r0, #1
 8009bd2:	d102      	bne.n	8009bda <_sbrk_r+0x1a>
 8009bd4:	682b      	ldr	r3, [r5, #0]
 8009bd6:	b103      	cbz	r3, 8009bda <_sbrk_r+0x1a>
 8009bd8:	6023      	str	r3, [r4, #0]
 8009bda:	bd38      	pop	{r3, r4, r5, pc}
 8009bdc:	20000bec 	.word	0x20000bec

08009be0 <_write_r>:
 8009be0:	b538      	push	{r3, r4, r5, lr}
 8009be2:	4d07      	ldr	r5, [pc, #28]	@ (8009c00 <_write_r+0x20>)
 8009be4:	4604      	mov	r4, r0
 8009be6:	4608      	mov	r0, r1
 8009be8:	4611      	mov	r1, r2
 8009bea:	2200      	movs	r2, #0
 8009bec:	602a      	str	r2, [r5, #0]
 8009bee:	461a      	mov	r2, r3
 8009bf0:	f7f8 fd4a 	bl	8002688 <_write>
 8009bf4:	1c43      	adds	r3, r0, #1
 8009bf6:	d102      	bne.n	8009bfe <_write_r+0x1e>
 8009bf8:	682b      	ldr	r3, [r5, #0]
 8009bfa:	b103      	cbz	r3, 8009bfe <_write_r+0x1e>
 8009bfc:	6023      	str	r3, [r4, #0]
 8009bfe:	bd38      	pop	{r3, r4, r5, pc}
 8009c00:	20000bec 	.word	0x20000bec

08009c04 <__assert_func>:
 8009c04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c06:	4614      	mov	r4, r2
 8009c08:	461a      	mov	r2, r3
 8009c0a:	4b09      	ldr	r3, [pc, #36]	@ (8009c30 <__assert_func+0x2c>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	4605      	mov	r5, r0
 8009c10:	68d8      	ldr	r0, [r3, #12]
 8009c12:	b954      	cbnz	r4, 8009c2a <__assert_func+0x26>
 8009c14:	4b07      	ldr	r3, [pc, #28]	@ (8009c34 <__assert_func+0x30>)
 8009c16:	461c      	mov	r4, r3
 8009c18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009c1c:	9100      	str	r1, [sp, #0]
 8009c1e:	462b      	mov	r3, r5
 8009c20:	4905      	ldr	r1, [pc, #20]	@ (8009c38 <__assert_func+0x34>)
 8009c22:	f000 f885 	bl	8009d30 <fiprintf>
 8009c26:	f000 f8a2 	bl	8009d6e <abort>
 8009c2a:	4b04      	ldr	r3, [pc, #16]	@ (8009c3c <__assert_func+0x38>)
 8009c2c:	e7f4      	b.n	8009c18 <__assert_func+0x14>
 8009c2e:	bf00      	nop
 8009c30:	20000058 	.word	0x20000058
 8009c34:	0800a7a6 	.word	0x0800a7a6
 8009c38:	0800a778 	.word	0x0800a778
 8009c3c:	0800a76b 	.word	0x0800a76b

08009c40 <_calloc_r>:
 8009c40:	b570      	push	{r4, r5, r6, lr}
 8009c42:	fba1 5402 	umull	r5, r4, r1, r2
 8009c46:	b93c      	cbnz	r4, 8009c58 <_calloc_r+0x18>
 8009c48:	4629      	mov	r1, r5
 8009c4a:	f7ff fa3f 	bl	80090cc <_malloc_r>
 8009c4e:	4606      	mov	r6, r0
 8009c50:	b928      	cbnz	r0, 8009c5e <_calloc_r+0x1e>
 8009c52:	2600      	movs	r6, #0
 8009c54:	4630      	mov	r0, r6
 8009c56:	bd70      	pop	{r4, r5, r6, pc}
 8009c58:	220c      	movs	r2, #12
 8009c5a:	6002      	str	r2, [r0, #0]
 8009c5c:	e7f9      	b.n	8009c52 <_calloc_r+0x12>
 8009c5e:	462a      	mov	r2, r5
 8009c60:	4621      	mov	r1, r4
 8009c62:	f7fe fa1d 	bl	80080a0 <memset>
 8009c66:	e7f5      	b.n	8009c54 <_calloc_r+0x14>

08009c68 <_free_r>:
 8009c68:	b538      	push	{r3, r4, r5, lr}
 8009c6a:	4605      	mov	r5, r0
 8009c6c:	2900      	cmp	r1, #0
 8009c6e:	d041      	beq.n	8009cf4 <_free_r+0x8c>
 8009c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c74:	1f0c      	subs	r4, r1, #4
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	bfb8      	it	lt
 8009c7a:	18e4      	addlt	r4, r4, r3
 8009c7c:	f7ff fb52 	bl	8009324 <__malloc_lock>
 8009c80:	4a1d      	ldr	r2, [pc, #116]	@ (8009cf8 <_free_r+0x90>)
 8009c82:	6813      	ldr	r3, [r2, #0]
 8009c84:	b933      	cbnz	r3, 8009c94 <_free_r+0x2c>
 8009c86:	6063      	str	r3, [r4, #4]
 8009c88:	6014      	str	r4, [r2, #0]
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c90:	f7ff bb4e 	b.w	8009330 <__malloc_unlock>
 8009c94:	42a3      	cmp	r3, r4
 8009c96:	d908      	bls.n	8009caa <_free_r+0x42>
 8009c98:	6820      	ldr	r0, [r4, #0]
 8009c9a:	1821      	adds	r1, r4, r0
 8009c9c:	428b      	cmp	r3, r1
 8009c9e:	bf01      	itttt	eq
 8009ca0:	6819      	ldreq	r1, [r3, #0]
 8009ca2:	685b      	ldreq	r3, [r3, #4]
 8009ca4:	1809      	addeq	r1, r1, r0
 8009ca6:	6021      	streq	r1, [r4, #0]
 8009ca8:	e7ed      	b.n	8009c86 <_free_r+0x1e>
 8009caa:	461a      	mov	r2, r3
 8009cac:	685b      	ldr	r3, [r3, #4]
 8009cae:	b10b      	cbz	r3, 8009cb4 <_free_r+0x4c>
 8009cb0:	42a3      	cmp	r3, r4
 8009cb2:	d9fa      	bls.n	8009caa <_free_r+0x42>
 8009cb4:	6811      	ldr	r1, [r2, #0]
 8009cb6:	1850      	adds	r0, r2, r1
 8009cb8:	42a0      	cmp	r0, r4
 8009cba:	d10b      	bne.n	8009cd4 <_free_r+0x6c>
 8009cbc:	6820      	ldr	r0, [r4, #0]
 8009cbe:	4401      	add	r1, r0
 8009cc0:	1850      	adds	r0, r2, r1
 8009cc2:	4283      	cmp	r3, r0
 8009cc4:	6011      	str	r1, [r2, #0]
 8009cc6:	d1e0      	bne.n	8009c8a <_free_r+0x22>
 8009cc8:	6818      	ldr	r0, [r3, #0]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	6053      	str	r3, [r2, #4]
 8009cce:	4408      	add	r0, r1
 8009cd0:	6010      	str	r0, [r2, #0]
 8009cd2:	e7da      	b.n	8009c8a <_free_r+0x22>
 8009cd4:	d902      	bls.n	8009cdc <_free_r+0x74>
 8009cd6:	230c      	movs	r3, #12
 8009cd8:	602b      	str	r3, [r5, #0]
 8009cda:	e7d6      	b.n	8009c8a <_free_r+0x22>
 8009cdc:	6820      	ldr	r0, [r4, #0]
 8009cde:	1821      	adds	r1, r4, r0
 8009ce0:	428b      	cmp	r3, r1
 8009ce2:	bf04      	itt	eq
 8009ce4:	6819      	ldreq	r1, [r3, #0]
 8009ce6:	685b      	ldreq	r3, [r3, #4]
 8009ce8:	6063      	str	r3, [r4, #4]
 8009cea:	bf04      	itt	eq
 8009cec:	1809      	addeq	r1, r1, r0
 8009cee:	6021      	streq	r1, [r4, #0]
 8009cf0:	6054      	str	r4, [r2, #4]
 8009cf2:	e7ca      	b.n	8009c8a <_free_r+0x22>
 8009cf4:	bd38      	pop	{r3, r4, r5, pc}
 8009cf6:	bf00      	nop
 8009cf8:	20000be8 	.word	0x20000be8

08009cfc <__ascii_mbtowc>:
 8009cfc:	b082      	sub	sp, #8
 8009cfe:	b901      	cbnz	r1, 8009d02 <__ascii_mbtowc+0x6>
 8009d00:	a901      	add	r1, sp, #4
 8009d02:	b142      	cbz	r2, 8009d16 <__ascii_mbtowc+0x1a>
 8009d04:	b14b      	cbz	r3, 8009d1a <__ascii_mbtowc+0x1e>
 8009d06:	7813      	ldrb	r3, [r2, #0]
 8009d08:	600b      	str	r3, [r1, #0]
 8009d0a:	7812      	ldrb	r2, [r2, #0]
 8009d0c:	1e10      	subs	r0, r2, #0
 8009d0e:	bf18      	it	ne
 8009d10:	2001      	movne	r0, #1
 8009d12:	b002      	add	sp, #8
 8009d14:	4770      	bx	lr
 8009d16:	4610      	mov	r0, r2
 8009d18:	e7fb      	b.n	8009d12 <__ascii_mbtowc+0x16>
 8009d1a:	f06f 0001 	mvn.w	r0, #1
 8009d1e:	e7f8      	b.n	8009d12 <__ascii_mbtowc+0x16>

08009d20 <_malloc_usable_size_r>:
 8009d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d24:	1f18      	subs	r0, r3, #4
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	bfbc      	itt	lt
 8009d2a:	580b      	ldrlt	r3, [r1, r0]
 8009d2c:	18c0      	addlt	r0, r0, r3
 8009d2e:	4770      	bx	lr

08009d30 <fiprintf>:
 8009d30:	b40e      	push	{r1, r2, r3}
 8009d32:	b503      	push	{r0, r1, lr}
 8009d34:	4601      	mov	r1, r0
 8009d36:	ab03      	add	r3, sp, #12
 8009d38:	4805      	ldr	r0, [pc, #20]	@ (8009d50 <fiprintf+0x20>)
 8009d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d3e:	6800      	ldr	r0, [r0, #0]
 8009d40:	9301      	str	r3, [sp, #4]
 8009d42:	f000 f845 	bl	8009dd0 <_vfiprintf_r>
 8009d46:	b002      	add	sp, #8
 8009d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d4c:	b003      	add	sp, #12
 8009d4e:	4770      	bx	lr
 8009d50:	20000058 	.word	0x20000058

08009d54 <__ascii_wctomb>:
 8009d54:	4603      	mov	r3, r0
 8009d56:	4608      	mov	r0, r1
 8009d58:	b141      	cbz	r1, 8009d6c <__ascii_wctomb+0x18>
 8009d5a:	2aff      	cmp	r2, #255	@ 0xff
 8009d5c:	d904      	bls.n	8009d68 <__ascii_wctomb+0x14>
 8009d5e:	228a      	movs	r2, #138	@ 0x8a
 8009d60:	601a      	str	r2, [r3, #0]
 8009d62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d66:	4770      	bx	lr
 8009d68:	700a      	strb	r2, [r1, #0]
 8009d6a:	2001      	movs	r0, #1
 8009d6c:	4770      	bx	lr

08009d6e <abort>:
 8009d6e:	b508      	push	{r3, lr}
 8009d70:	2006      	movs	r0, #6
 8009d72:	f000 fa85 	bl	800a280 <raise>
 8009d76:	2001      	movs	r0, #1
 8009d78:	f7f8 fc5e 	bl	8002638 <_exit>

08009d7c <__sfputc_r>:
 8009d7c:	6893      	ldr	r3, [r2, #8]
 8009d7e:	3b01      	subs	r3, #1
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	b410      	push	{r4}
 8009d84:	6093      	str	r3, [r2, #8]
 8009d86:	da08      	bge.n	8009d9a <__sfputc_r+0x1e>
 8009d88:	6994      	ldr	r4, [r2, #24]
 8009d8a:	42a3      	cmp	r3, r4
 8009d8c:	db01      	blt.n	8009d92 <__sfputc_r+0x16>
 8009d8e:	290a      	cmp	r1, #10
 8009d90:	d103      	bne.n	8009d9a <__sfputc_r+0x1e>
 8009d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d96:	f000 b933 	b.w	800a000 <__swbuf_r>
 8009d9a:	6813      	ldr	r3, [r2, #0]
 8009d9c:	1c58      	adds	r0, r3, #1
 8009d9e:	6010      	str	r0, [r2, #0]
 8009da0:	7019      	strb	r1, [r3, #0]
 8009da2:	4608      	mov	r0, r1
 8009da4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009da8:	4770      	bx	lr

08009daa <__sfputs_r>:
 8009daa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dac:	4606      	mov	r6, r0
 8009dae:	460f      	mov	r7, r1
 8009db0:	4614      	mov	r4, r2
 8009db2:	18d5      	adds	r5, r2, r3
 8009db4:	42ac      	cmp	r4, r5
 8009db6:	d101      	bne.n	8009dbc <__sfputs_r+0x12>
 8009db8:	2000      	movs	r0, #0
 8009dba:	e007      	b.n	8009dcc <__sfputs_r+0x22>
 8009dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dc0:	463a      	mov	r2, r7
 8009dc2:	4630      	mov	r0, r6
 8009dc4:	f7ff ffda 	bl	8009d7c <__sfputc_r>
 8009dc8:	1c43      	adds	r3, r0, #1
 8009dca:	d1f3      	bne.n	8009db4 <__sfputs_r+0xa>
 8009dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009dd0 <_vfiprintf_r>:
 8009dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dd4:	460d      	mov	r5, r1
 8009dd6:	b09d      	sub	sp, #116	@ 0x74
 8009dd8:	4614      	mov	r4, r2
 8009dda:	4698      	mov	r8, r3
 8009ddc:	4606      	mov	r6, r0
 8009dde:	b118      	cbz	r0, 8009de8 <_vfiprintf_r+0x18>
 8009de0:	6a03      	ldr	r3, [r0, #32]
 8009de2:	b90b      	cbnz	r3, 8009de8 <_vfiprintf_r+0x18>
 8009de4:	f7fe f926 	bl	8008034 <__sinit>
 8009de8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009dea:	07d9      	lsls	r1, r3, #31
 8009dec:	d405      	bmi.n	8009dfa <_vfiprintf_r+0x2a>
 8009dee:	89ab      	ldrh	r3, [r5, #12]
 8009df0:	059a      	lsls	r2, r3, #22
 8009df2:	d402      	bmi.n	8009dfa <_vfiprintf_r+0x2a>
 8009df4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009df6:	f7fe f98a 	bl	800810e <__retarget_lock_acquire_recursive>
 8009dfa:	89ab      	ldrh	r3, [r5, #12]
 8009dfc:	071b      	lsls	r3, r3, #28
 8009dfe:	d501      	bpl.n	8009e04 <_vfiprintf_r+0x34>
 8009e00:	692b      	ldr	r3, [r5, #16]
 8009e02:	b99b      	cbnz	r3, 8009e2c <_vfiprintf_r+0x5c>
 8009e04:	4629      	mov	r1, r5
 8009e06:	4630      	mov	r0, r6
 8009e08:	f000 f938 	bl	800a07c <__swsetup_r>
 8009e0c:	b170      	cbz	r0, 8009e2c <_vfiprintf_r+0x5c>
 8009e0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e10:	07dc      	lsls	r4, r3, #31
 8009e12:	d504      	bpl.n	8009e1e <_vfiprintf_r+0x4e>
 8009e14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e18:	b01d      	add	sp, #116	@ 0x74
 8009e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e1e:	89ab      	ldrh	r3, [r5, #12]
 8009e20:	0598      	lsls	r0, r3, #22
 8009e22:	d4f7      	bmi.n	8009e14 <_vfiprintf_r+0x44>
 8009e24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e26:	f7fe f973 	bl	8008110 <__retarget_lock_release_recursive>
 8009e2a:	e7f3      	b.n	8009e14 <_vfiprintf_r+0x44>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e30:	2320      	movs	r3, #32
 8009e32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e36:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e3a:	2330      	movs	r3, #48	@ 0x30
 8009e3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009fec <_vfiprintf_r+0x21c>
 8009e40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e44:	f04f 0901 	mov.w	r9, #1
 8009e48:	4623      	mov	r3, r4
 8009e4a:	469a      	mov	sl, r3
 8009e4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e50:	b10a      	cbz	r2, 8009e56 <_vfiprintf_r+0x86>
 8009e52:	2a25      	cmp	r2, #37	@ 0x25
 8009e54:	d1f9      	bne.n	8009e4a <_vfiprintf_r+0x7a>
 8009e56:	ebba 0b04 	subs.w	fp, sl, r4
 8009e5a:	d00b      	beq.n	8009e74 <_vfiprintf_r+0xa4>
 8009e5c:	465b      	mov	r3, fp
 8009e5e:	4622      	mov	r2, r4
 8009e60:	4629      	mov	r1, r5
 8009e62:	4630      	mov	r0, r6
 8009e64:	f7ff ffa1 	bl	8009daa <__sfputs_r>
 8009e68:	3001      	adds	r0, #1
 8009e6a:	f000 80a7 	beq.w	8009fbc <_vfiprintf_r+0x1ec>
 8009e6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e70:	445a      	add	r2, fp
 8009e72:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e74:	f89a 3000 	ldrb.w	r3, [sl]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	f000 809f 	beq.w	8009fbc <_vfiprintf_r+0x1ec>
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e88:	f10a 0a01 	add.w	sl, sl, #1
 8009e8c:	9304      	str	r3, [sp, #16]
 8009e8e:	9307      	str	r3, [sp, #28]
 8009e90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e94:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e96:	4654      	mov	r4, sl
 8009e98:	2205      	movs	r2, #5
 8009e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e9e:	4853      	ldr	r0, [pc, #332]	@ (8009fec <_vfiprintf_r+0x21c>)
 8009ea0:	f7f6 f996 	bl	80001d0 <memchr>
 8009ea4:	9a04      	ldr	r2, [sp, #16]
 8009ea6:	b9d8      	cbnz	r0, 8009ee0 <_vfiprintf_r+0x110>
 8009ea8:	06d1      	lsls	r1, r2, #27
 8009eaa:	bf44      	itt	mi
 8009eac:	2320      	movmi	r3, #32
 8009eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009eb2:	0713      	lsls	r3, r2, #28
 8009eb4:	bf44      	itt	mi
 8009eb6:	232b      	movmi	r3, #43	@ 0x2b
 8009eb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ebc:	f89a 3000 	ldrb.w	r3, [sl]
 8009ec0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ec2:	d015      	beq.n	8009ef0 <_vfiprintf_r+0x120>
 8009ec4:	9a07      	ldr	r2, [sp, #28]
 8009ec6:	4654      	mov	r4, sl
 8009ec8:	2000      	movs	r0, #0
 8009eca:	f04f 0c0a 	mov.w	ip, #10
 8009ece:	4621      	mov	r1, r4
 8009ed0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ed4:	3b30      	subs	r3, #48	@ 0x30
 8009ed6:	2b09      	cmp	r3, #9
 8009ed8:	d94b      	bls.n	8009f72 <_vfiprintf_r+0x1a2>
 8009eda:	b1b0      	cbz	r0, 8009f0a <_vfiprintf_r+0x13a>
 8009edc:	9207      	str	r2, [sp, #28]
 8009ede:	e014      	b.n	8009f0a <_vfiprintf_r+0x13a>
 8009ee0:	eba0 0308 	sub.w	r3, r0, r8
 8009ee4:	fa09 f303 	lsl.w	r3, r9, r3
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	9304      	str	r3, [sp, #16]
 8009eec:	46a2      	mov	sl, r4
 8009eee:	e7d2      	b.n	8009e96 <_vfiprintf_r+0xc6>
 8009ef0:	9b03      	ldr	r3, [sp, #12]
 8009ef2:	1d19      	adds	r1, r3, #4
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	9103      	str	r1, [sp, #12]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	bfbb      	ittet	lt
 8009efc:	425b      	neglt	r3, r3
 8009efe:	f042 0202 	orrlt.w	r2, r2, #2
 8009f02:	9307      	strge	r3, [sp, #28]
 8009f04:	9307      	strlt	r3, [sp, #28]
 8009f06:	bfb8      	it	lt
 8009f08:	9204      	strlt	r2, [sp, #16]
 8009f0a:	7823      	ldrb	r3, [r4, #0]
 8009f0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f0e:	d10a      	bne.n	8009f26 <_vfiprintf_r+0x156>
 8009f10:	7863      	ldrb	r3, [r4, #1]
 8009f12:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f14:	d132      	bne.n	8009f7c <_vfiprintf_r+0x1ac>
 8009f16:	9b03      	ldr	r3, [sp, #12]
 8009f18:	1d1a      	adds	r2, r3, #4
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	9203      	str	r2, [sp, #12]
 8009f1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f22:	3402      	adds	r4, #2
 8009f24:	9305      	str	r3, [sp, #20]
 8009f26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009ffc <_vfiprintf_r+0x22c>
 8009f2a:	7821      	ldrb	r1, [r4, #0]
 8009f2c:	2203      	movs	r2, #3
 8009f2e:	4650      	mov	r0, sl
 8009f30:	f7f6 f94e 	bl	80001d0 <memchr>
 8009f34:	b138      	cbz	r0, 8009f46 <_vfiprintf_r+0x176>
 8009f36:	9b04      	ldr	r3, [sp, #16]
 8009f38:	eba0 000a 	sub.w	r0, r0, sl
 8009f3c:	2240      	movs	r2, #64	@ 0x40
 8009f3e:	4082      	lsls	r2, r0
 8009f40:	4313      	orrs	r3, r2
 8009f42:	3401      	adds	r4, #1
 8009f44:	9304      	str	r3, [sp, #16]
 8009f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f4a:	4829      	ldr	r0, [pc, #164]	@ (8009ff0 <_vfiprintf_r+0x220>)
 8009f4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f50:	2206      	movs	r2, #6
 8009f52:	f7f6 f93d 	bl	80001d0 <memchr>
 8009f56:	2800      	cmp	r0, #0
 8009f58:	d03f      	beq.n	8009fda <_vfiprintf_r+0x20a>
 8009f5a:	4b26      	ldr	r3, [pc, #152]	@ (8009ff4 <_vfiprintf_r+0x224>)
 8009f5c:	bb1b      	cbnz	r3, 8009fa6 <_vfiprintf_r+0x1d6>
 8009f5e:	9b03      	ldr	r3, [sp, #12]
 8009f60:	3307      	adds	r3, #7
 8009f62:	f023 0307 	bic.w	r3, r3, #7
 8009f66:	3308      	adds	r3, #8
 8009f68:	9303      	str	r3, [sp, #12]
 8009f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f6c:	443b      	add	r3, r7
 8009f6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f70:	e76a      	b.n	8009e48 <_vfiprintf_r+0x78>
 8009f72:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f76:	460c      	mov	r4, r1
 8009f78:	2001      	movs	r0, #1
 8009f7a:	e7a8      	b.n	8009ece <_vfiprintf_r+0xfe>
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	3401      	adds	r4, #1
 8009f80:	9305      	str	r3, [sp, #20]
 8009f82:	4619      	mov	r1, r3
 8009f84:	f04f 0c0a 	mov.w	ip, #10
 8009f88:	4620      	mov	r0, r4
 8009f8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f8e:	3a30      	subs	r2, #48	@ 0x30
 8009f90:	2a09      	cmp	r2, #9
 8009f92:	d903      	bls.n	8009f9c <_vfiprintf_r+0x1cc>
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d0c6      	beq.n	8009f26 <_vfiprintf_r+0x156>
 8009f98:	9105      	str	r1, [sp, #20]
 8009f9a:	e7c4      	b.n	8009f26 <_vfiprintf_r+0x156>
 8009f9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fa0:	4604      	mov	r4, r0
 8009fa2:	2301      	movs	r3, #1
 8009fa4:	e7f0      	b.n	8009f88 <_vfiprintf_r+0x1b8>
 8009fa6:	ab03      	add	r3, sp, #12
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	462a      	mov	r2, r5
 8009fac:	4b12      	ldr	r3, [pc, #72]	@ (8009ff8 <_vfiprintf_r+0x228>)
 8009fae:	a904      	add	r1, sp, #16
 8009fb0:	4630      	mov	r0, r6
 8009fb2:	f7fd fbc7 	bl	8007744 <_printf_float>
 8009fb6:	4607      	mov	r7, r0
 8009fb8:	1c78      	adds	r0, r7, #1
 8009fba:	d1d6      	bne.n	8009f6a <_vfiprintf_r+0x19a>
 8009fbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fbe:	07d9      	lsls	r1, r3, #31
 8009fc0:	d405      	bmi.n	8009fce <_vfiprintf_r+0x1fe>
 8009fc2:	89ab      	ldrh	r3, [r5, #12]
 8009fc4:	059a      	lsls	r2, r3, #22
 8009fc6:	d402      	bmi.n	8009fce <_vfiprintf_r+0x1fe>
 8009fc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fca:	f7fe f8a1 	bl	8008110 <__retarget_lock_release_recursive>
 8009fce:	89ab      	ldrh	r3, [r5, #12]
 8009fd0:	065b      	lsls	r3, r3, #25
 8009fd2:	f53f af1f 	bmi.w	8009e14 <_vfiprintf_r+0x44>
 8009fd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fd8:	e71e      	b.n	8009e18 <_vfiprintf_r+0x48>
 8009fda:	ab03      	add	r3, sp, #12
 8009fdc:	9300      	str	r3, [sp, #0]
 8009fde:	462a      	mov	r2, r5
 8009fe0:	4b05      	ldr	r3, [pc, #20]	@ (8009ff8 <_vfiprintf_r+0x228>)
 8009fe2:	a904      	add	r1, sp, #16
 8009fe4:	4630      	mov	r0, r6
 8009fe6:	f7fd fe45 	bl	8007c74 <_printf_i>
 8009fea:	e7e4      	b.n	8009fb6 <_vfiprintf_r+0x1e6>
 8009fec:	0800a4f9 	.word	0x0800a4f9
 8009ff0:	0800a503 	.word	0x0800a503
 8009ff4:	08007745 	.word	0x08007745
 8009ff8:	08009dab 	.word	0x08009dab
 8009ffc:	0800a4ff 	.word	0x0800a4ff

0800a000 <__swbuf_r>:
 800a000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a002:	460e      	mov	r6, r1
 800a004:	4614      	mov	r4, r2
 800a006:	4605      	mov	r5, r0
 800a008:	b118      	cbz	r0, 800a012 <__swbuf_r+0x12>
 800a00a:	6a03      	ldr	r3, [r0, #32]
 800a00c:	b90b      	cbnz	r3, 800a012 <__swbuf_r+0x12>
 800a00e:	f7fe f811 	bl	8008034 <__sinit>
 800a012:	69a3      	ldr	r3, [r4, #24]
 800a014:	60a3      	str	r3, [r4, #8]
 800a016:	89a3      	ldrh	r3, [r4, #12]
 800a018:	071a      	lsls	r2, r3, #28
 800a01a:	d501      	bpl.n	800a020 <__swbuf_r+0x20>
 800a01c:	6923      	ldr	r3, [r4, #16]
 800a01e:	b943      	cbnz	r3, 800a032 <__swbuf_r+0x32>
 800a020:	4621      	mov	r1, r4
 800a022:	4628      	mov	r0, r5
 800a024:	f000 f82a 	bl	800a07c <__swsetup_r>
 800a028:	b118      	cbz	r0, 800a032 <__swbuf_r+0x32>
 800a02a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a02e:	4638      	mov	r0, r7
 800a030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a032:	6823      	ldr	r3, [r4, #0]
 800a034:	6922      	ldr	r2, [r4, #16]
 800a036:	1a98      	subs	r0, r3, r2
 800a038:	6963      	ldr	r3, [r4, #20]
 800a03a:	b2f6      	uxtb	r6, r6
 800a03c:	4283      	cmp	r3, r0
 800a03e:	4637      	mov	r7, r6
 800a040:	dc05      	bgt.n	800a04e <__swbuf_r+0x4e>
 800a042:	4621      	mov	r1, r4
 800a044:	4628      	mov	r0, r5
 800a046:	f7ff f945 	bl	80092d4 <_fflush_r>
 800a04a:	2800      	cmp	r0, #0
 800a04c:	d1ed      	bne.n	800a02a <__swbuf_r+0x2a>
 800a04e:	68a3      	ldr	r3, [r4, #8]
 800a050:	3b01      	subs	r3, #1
 800a052:	60a3      	str	r3, [r4, #8]
 800a054:	6823      	ldr	r3, [r4, #0]
 800a056:	1c5a      	adds	r2, r3, #1
 800a058:	6022      	str	r2, [r4, #0]
 800a05a:	701e      	strb	r6, [r3, #0]
 800a05c:	6962      	ldr	r2, [r4, #20]
 800a05e:	1c43      	adds	r3, r0, #1
 800a060:	429a      	cmp	r2, r3
 800a062:	d004      	beq.n	800a06e <__swbuf_r+0x6e>
 800a064:	89a3      	ldrh	r3, [r4, #12]
 800a066:	07db      	lsls	r3, r3, #31
 800a068:	d5e1      	bpl.n	800a02e <__swbuf_r+0x2e>
 800a06a:	2e0a      	cmp	r6, #10
 800a06c:	d1df      	bne.n	800a02e <__swbuf_r+0x2e>
 800a06e:	4621      	mov	r1, r4
 800a070:	4628      	mov	r0, r5
 800a072:	f7ff f92f 	bl	80092d4 <_fflush_r>
 800a076:	2800      	cmp	r0, #0
 800a078:	d0d9      	beq.n	800a02e <__swbuf_r+0x2e>
 800a07a:	e7d6      	b.n	800a02a <__swbuf_r+0x2a>

0800a07c <__swsetup_r>:
 800a07c:	b538      	push	{r3, r4, r5, lr}
 800a07e:	4b29      	ldr	r3, [pc, #164]	@ (800a124 <__swsetup_r+0xa8>)
 800a080:	4605      	mov	r5, r0
 800a082:	6818      	ldr	r0, [r3, #0]
 800a084:	460c      	mov	r4, r1
 800a086:	b118      	cbz	r0, 800a090 <__swsetup_r+0x14>
 800a088:	6a03      	ldr	r3, [r0, #32]
 800a08a:	b90b      	cbnz	r3, 800a090 <__swsetup_r+0x14>
 800a08c:	f7fd ffd2 	bl	8008034 <__sinit>
 800a090:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a094:	0719      	lsls	r1, r3, #28
 800a096:	d422      	bmi.n	800a0de <__swsetup_r+0x62>
 800a098:	06da      	lsls	r2, r3, #27
 800a09a:	d407      	bmi.n	800a0ac <__swsetup_r+0x30>
 800a09c:	2209      	movs	r2, #9
 800a09e:	602a      	str	r2, [r5, #0]
 800a0a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0a4:	81a3      	strh	r3, [r4, #12]
 800a0a6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a0aa:	e033      	b.n	800a114 <__swsetup_r+0x98>
 800a0ac:	0758      	lsls	r0, r3, #29
 800a0ae:	d512      	bpl.n	800a0d6 <__swsetup_r+0x5a>
 800a0b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0b2:	b141      	cbz	r1, 800a0c6 <__swsetup_r+0x4a>
 800a0b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0b8:	4299      	cmp	r1, r3
 800a0ba:	d002      	beq.n	800a0c2 <__swsetup_r+0x46>
 800a0bc:	4628      	mov	r0, r5
 800a0be:	f7ff fdd3 	bl	8009c68 <_free_r>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0c6:	89a3      	ldrh	r3, [r4, #12]
 800a0c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a0cc:	81a3      	strh	r3, [r4, #12]
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	6063      	str	r3, [r4, #4]
 800a0d2:	6923      	ldr	r3, [r4, #16]
 800a0d4:	6023      	str	r3, [r4, #0]
 800a0d6:	89a3      	ldrh	r3, [r4, #12]
 800a0d8:	f043 0308 	orr.w	r3, r3, #8
 800a0dc:	81a3      	strh	r3, [r4, #12]
 800a0de:	6923      	ldr	r3, [r4, #16]
 800a0e0:	b94b      	cbnz	r3, 800a0f6 <__swsetup_r+0x7a>
 800a0e2:	89a3      	ldrh	r3, [r4, #12]
 800a0e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a0e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a0ec:	d003      	beq.n	800a0f6 <__swsetup_r+0x7a>
 800a0ee:	4621      	mov	r1, r4
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	f000 f83f 	bl	800a174 <__smakebuf_r>
 800a0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0fa:	f013 0201 	ands.w	r2, r3, #1
 800a0fe:	d00a      	beq.n	800a116 <__swsetup_r+0x9a>
 800a100:	2200      	movs	r2, #0
 800a102:	60a2      	str	r2, [r4, #8]
 800a104:	6962      	ldr	r2, [r4, #20]
 800a106:	4252      	negs	r2, r2
 800a108:	61a2      	str	r2, [r4, #24]
 800a10a:	6922      	ldr	r2, [r4, #16]
 800a10c:	b942      	cbnz	r2, 800a120 <__swsetup_r+0xa4>
 800a10e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a112:	d1c5      	bne.n	800a0a0 <__swsetup_r+0x24>
 800a114:	bd38      	pop	{r3, r4, r5, pc}
 800a116:	0799      	lsls	r1, r3, #30
 800a118:	bf58      	it	pl
 800a11a:	6962      	ldrpl	r2, [r4, #20]
 800a11c:	60a2      	str	r2, [r4, #8]
 800a11e:	e7f4      	b.n	800a10a <__swsetup_r+0x8e>
 800a120:	2000      	movs	r0, #0
 800a122:	e7f7      	b.n	800a114 <__swsetup_r+0x98>
 800a124:	20000058 	.word	0x20000058

0800a128 <__swhatbuf_r>:
 800a128:	b570      	push	{r4, r5, r6, lr}
 800a12a:	460c      	mov	r4, r1
 800a12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a130:	2900      	cmp	r1, #0
 800a132:	b096      	sub	sp, #88	@ 0x58
 800a134:	4615      	mov	r5, r2
 800a136:	461e      	mov	r6, r3
 800a138:	da0d      	bge.n	800a156 <__swhatbuf_r+0x2e>
 800a13a:	89a3      	ldrh	r3, [r4, #12]
 800a13c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a140:	f04f 0100 	mov.w	r1, #0
 800a144:	bf14      	ite	ne
 800a146:	2340      	movne	r3, #64	@ 0x40
 800a148:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a14c:	2000      	movs	r0, #0
 800a14e:	6031      	str	r1, [r6, #0]
 800a150:	602b      	str	r3, [r5, #0]
 800a152:	b016      	add	sp, #88	@ 0x58
 800a154:	bd70      	pop	{r4, r5, r6, pc}
 800a156:	466a      	mov	r2, sp
 800a158:	f000 f848 	bl	800a1ec <_fstat_r>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	dbec      	blt.n	800a13a <__swhatbuf_r+0x12>
 800a160:	9901      	ldr	r1, [sp, #4]
 800a162:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a166:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a16a:	4259      	negs	r1, r3
 800a16c:	4159      	adcs	r1, r3
 800a16e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a172:	e7eb      	b.n	800a14c <__swhatbuf_r+0x24>

0800a174 <__smakebuf_r>:
 800a174:	898b      	ldrh	r3, [r1, #12]
 800a176:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a178:	079d      	lsls	r5, r3, #30
 800a17a:	4606      	mov	r6, r0
 800a17c:	460c      	mov	r4, r1
 800a17e:	d507      	bpl.n	800a190 <__smakebuf_r+0x1c>
 800a180:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a184:	6023      	str	r3, [r4, #0]
 800a186:	6123      	str	r3, [r4, #16]
 800a188:	2301      	movs	r3, #1
 800a18a:	6163      	str	r3, [r4, #20]
 800a18c:	b003      	add	sp, #12
 800a18e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a190:	ab01      	add	r3, sp, #4
 800a192:	466a      	mov	r2, sp
 800a194:	f7ff ffc8 	bl	800a128 <__swhatbuf_r>
 800a198:	9f00      	ldr	r7, [sp, #0]
 800a19a:	4605      	mov	r5, r0
 800a19c:	4639      	mov	r1, r7
 800a19e:	4630      	mov	r0, r6
 800a1a0:	f7fe ff94 	bl	80090cc <_malloc_r>
 800a1a4:	b948      	cbnz	r0, 800a1ba <__smakebuf_r+0x46>
 800a1a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1aa:	059a      	lsls	r2, r3, #22
 800a1ac:	d4ee      	bmi.n	800a18c <__smakebuf_r+0x18>
 800a1ae:	f023 0303 	bic.w	r3, r3, #3
 800a1b2:	f043 0302 	orr.w	r3, r3, #2
 800a1b6:	81a3      	strh	r3, [r4, #12]
 800a1b8:	e7e2      	b.n	800a180 <__smakebuf_r+0xc>
 800a1ba:	89a3      	ldrh	r3, [r4, #12]
 800a1bc:	6020      	str	r0, [r4, #0]
 800a1be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1c2:	81a3      	strh	r3, [r4, #12]
 800a1c4:	9b01      	ldr	r3, [sp, #4]
 800a1c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a1ca:	b15b      	cbz	r3, 800a1e4 <__smakebuf_r+0x70>
 800a1cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1d0:	4630      	mov	r0, r6
 800a1d2:	f000 f81d 	bl	800a210 <_isatty_r>
 800a1d6:	b128      	cbz	r0, 800a1e4 <__smakebuf_r+0x70>
 800a1d8:	89a3      	ldrh	r3, [r4, #12]
 800a1da:	f023 0303 	bic.w	r3, r3, #3
 800a1de:	f043 0301 	orr.w	r3, r3, #1
 800a1e2:	81a3      	strh	r3, [r4, #12]
 800a1e4:	89a3      	ldrh	r3, [r4, #12]
 800a1e6:	431d      	orrs	r5, r3
 800a1e8:	81a5      	strh	r5, [r4, #12]
 800a1ea:	e7cf      	b.n	800a18c <__smakebuf_r+0x18>

0800a1ec <_fstat_r>:
 800a1ec:	b538      	push	{r3, r4, r5, lr}
 800a1ee:	4d07      	ldr	r5, [pc, #28]	@ (800a20c <_fstat_r+0x20>)
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	4608      	mov	r0, r1
 800a1f6:	4611      	mov	r1, r2
 800a1f8:	602b      	str	r3, [r5, #0]
 800a1fa:	f7f8 fa6d 	bl	80026d8 <_fstat>
 800a1fe:	1c43      	adds	r3, r0, #1
 800a200:	d102      	bne.n	800a208 <_fstat_r+0x1c>
 800a202:	682b      	ldr	r3, [r5, #0]
 800a204:	b103      	cbz	r3, 800a208 <_fstat_r+0x1c>
 800a206:	6023      	str	r3, [r4, #0]
 800a208:	bd38      	pop	{r3, r4, r5, pc}
 800a20a:	bf00      	nop
 800a20c:	20000bec 	.word	0x20000bec

0800a210 <_isatty_r>:
 800a210:	b538      	push	{r3, r4, r5, lr}
 800a212:	4d06      	ldr	r5, [pc, #24]	@ (800a22c <_isatty_r+0x1c>)
 800a214:	2300      	movs	r3, #0
 800a216:	4604      	mov	r4, r0
 800a218:	4608      	mov	r0, r1
 800a21a:	602b      	str	r3, [r5, #0]
 800a21c:	f7f8 fa6c 	bl	80026f8 <_isatty>
 800a220:	1c43      	adds	r3, r0, #1
 800a222:	d102      	bne.n	800a22a <_isatty_r+0x1a>
 800a224:	682b      	ldr	r3, [r5, #0]
 800a226:	b103      	cbz	r3, 800a22a <_isatty_r+0x1a>
 800a228:	6023      	str	r3, [r4, #0]
 800a22a:	bd38      	pop	{r3, r4, r5, pc}
 800a22c:	20000bec 	.word	0x20000bec

0800a230 <_raise_r>:
 800a230:	291f      	cmp	r1, #31
 800a232:	b538      	push	{r3, r4, r5, lr}
 800a234:	4605      	mov	r5, r0
 800a236:	460c      	mov	r4, r1
 800a238:	d904      	bls.n	800a244 <_raise_r+0x14>
 800a23a:	2316      	movs	r3, #22
 800a23c:	6003      	str	r3, [r0, #0]
 800a23e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a242:	bd38      	pop	{r3, r4, r5, pc}
 800a244:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a246:	b112      	cbz	r2, 800a24e <_raise_r+0x1e>
 800a248:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a24c:	b94b      	cbnz	r3, 800a262 <_raise_r+0x32>
 800a24e:	4628      	mov	r0, r5
 800a250:	f000 f830 	bl	800a2b4 <_getpid_r>
 800a254:	4622      	mov	r2, r4
 800a256:	4601      	mov	r1, r0
 800a258:	4628      	mov	r0, r5
 800a25a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a25e:	f000 b817 	b.w	800a290 <_kill_r>
 800a262:	2b01      	cmp	r3, #1
 800a264:	d00a      	beq.n	800a27c <_raise_r+0x4c>
 800a266:	1c59      	adds	r1, r3, #1
 800a268:	d103      	bne.n	800a272 <_raise_r+0x42>
 800a26a:	2316      	movs	r3, #22
 800a26c:	6003      	str	r3, [r0, #0]
 800a26e:	2001      	movs	r0, #1
 800a270:	e7e7      	b.n	800a242 <_raise_r+0x12>
 800a272:	2100      	movs	r1, #0
 800a274:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a278:	4620      	mov	r0, r4
 800a27a:	4798      	blx	r3
 800a27c:	2000      	movs	r0, #0
 800a27e:	e7e0      	b.n	800a242 <_raise_r+0x12>

0800a280 <raise>:
 800a280:	4b02      	ldr	r3, [pc, #8]	@ (800a28c <raise+0xc>)
 800a282:	4601      	mov	r1, r0
 800a284:	6818      	ldr	r0, [r3, #0]
 800a286:	f7ff bfd3 	b.w	800a230 <_raise_r>
 800a28a:	bf00      	nop
 800a28c:	20000058 	.word	0x20000058

0800a290 <_kill_r>:
 800a290:	b538      	push	{r3, r4, r5, lr}
 800a292:	4d07      	ldr	r5, [pc, #28]	@ (800a2b0 <_kill_r+0x20>)
 800a294:	2300      	movs	r3, #0
 800a296:	4604      	mov	r4, r0
 800a298:	4608      	mov	r0, r1
 800a29a:	4611      	mov	r1, r2
 800a29c:	602b      	str	r3, [r5, #0]
 800a29e:	f7f8 f9bb 	bl	8002618 <_kill>
 800a2a2:	1c43      	adds	r3, r0, #1
 800a2a4:	d102      	bne.n	800a2ac <_kill_r+0x1c>
 800a2a6:	682b      	ldr	r3, [r5, #0]
 800a2a8:	b103      	cbz	r3, 800a2ac <_kill_r+0x1c>
 800a2aa:	6023      	str	r3, [r4, #0]
 800a2ac:	bd38      	pop	{r3, r4, r5, pc}
 800a2ae:	bf00      	nop
 800a2b0:	20000bec 	.word	0x20000bec

0800a2b4 <_getpid_r>:
 800a2b4:	f7f8 b9a8 	b.w	8002608 <_getpid>

0800a2b8 <_init>:
 800a2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ba:	bf00      	nop
 800a2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2be:	bc08      	pop	{r3}
 800a2c0:	469e      	mov	lr, r3
 800a2c2:	4770      	bx	lr

0800a2c4 <_fini>:
 800a2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2c6:	bf00      	nop
 800a2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ca:	bc08      	pop	{r3}
 800a2cc:	469e      	mov	lr, r3
 800a2ce:	4770      	bx	lr
