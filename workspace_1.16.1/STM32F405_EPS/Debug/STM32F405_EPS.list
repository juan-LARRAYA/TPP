
STM32F405_EPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd8c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800cf20  0800cf20  0000df20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d380  0800d380  0000f2d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800d380  0800d380  0000e380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d388  0800d388  0000f2d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d388  0800d388  0000e388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d38c  0800d38c  0000e38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d0  20000000  0800d390  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f2d0  2**0
                  CONTENTS
 10 .bss          00002024  200002d0  200002d0  0000f2d0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200022f4  200022f4  0000f2d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f2d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a086  00000000  00000000  0000f300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003af1  00000000  00000000  00029386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001788  00000000  00000000  0002ce78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001252  00000000  00000000  0002e600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e5c  00000000  00000000  0002f852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f66a  00000000  00000000  000546ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5bcb  00000000  00000000  00073d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001498e3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000075d0  00000000  00000000  00149928  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00150ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d0 	.word	0x200002d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cf04 	.word	0x0800cf04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002d4 	.word	0x200002d4
 80001cc:	0800cf04 	.word	0x0800cf04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <readADC>:

uint32_t readADC(ADC_HandleTypeDef *hadc, uint32_t channel);
void mppt(int *dutyCycle, float *power, float *prevPower);

/* USER CODE END PFP */
uint32_t readADC(ADC_HandleTypeDef *hadc, uint32_t channel) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = { 0 };
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]

    // Configurar el canal que se desea leer
    sConfig.Channel = channel;
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 0x00000001U; // Reemplazado con el valor correcto
 8000f54:	2301      	movs	r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = 0x00000000U; // Reemplazado con el valor correcto
 8000f58:	2300      	movs	r3, #0
 8000f5a:	613b      	str	r3, [r7, #16]

    if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK) {
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	4619      	mov	r1, r3
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f001 fbc2 	bl	80026ec <HAL_ADC_ConfigChannel>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <readADC+0x3a>
        Error_Handler(); // Maneja errores de configuración
 8000f6e:	f000 fd5f 	bl	8001a30 <Error_Handler>
    }

    // Inicia la conversión del ADC
    HAL_ADC_Start(hadc);
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f001 fa50 	bl	8002418 <HAL_ADC_Start>

    // Espera hasta que la conversión termine
    if (HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY) == HAL_OK) {
 8000f78:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f001 fb1d 	bl	80025bc <HAL_ADC_PollForConversion>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d104      	bne.n	8000f92 <readADC+0x5a>
        // Retorna el valor convertido
        return HAL_ADC_GetValue(hadc);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f001 fba2 	bl	80026d2 <HAL_ADC_GetValue>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	e000      	b.n	8000f94 <readADC+0x5c>
    }

    return 0; // Retorna 0 en caso de error
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <mppt>:


void mppt(int *dutyCycle, float *power, float *prevPower) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b087      	sub	sp, #28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
	const int deltaDuty = 10;    // Incremento o decremento del Duty Cycle
 8000fa8:	230a      	movs	r3, #10
 8000faa:	617b      	str	r3, [r7, #20]
	if (*power > *prevPower) {
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	ed93 7a00 	vldr	s14, [r3]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	edd3 7a00 	vldr	s15, [r3]
 8000fb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc0:	dd0a      	ble.n	8000fd8 <mppt+0x3c>
		if (*dutyCycle < 255)
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2bfe      	cmp	r3, #254	@ 0xfe
 8000fc8:	dc10      	bgt.n	8000fec <mppt+0x50>
			*dutyCycle += deltaDuty; // Si la potencia ha aumentado, continuar ajustando en la misma dirección
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	441a      	add	r2, r3
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	e009      	b.n	8000fec <mppt+0x50>
	} else {
		if (*dutyCycle > 0)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	dd05      	ble.n	8000fec <mppt+0x50>
			*dutyCycle -= deltaDuty; // Si la potencia ha disminuido, invertir la dirección del ajuste
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	1ad2      	subs	r2, r2, r3
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	601a      	str	r2, [r3, #0]
	}

	if (*dutyCycle < 0)
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	da02      	bge.n	8000ffa <mppt+0x5e>
		*dutyCycle = 0; // Asegurar que el Duty Cycle esté dentro de los límites permitidos (0-255)
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
	if (*dutyCycle > 255)
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2bff      	cmp	r3, #255	@ 0xff
 8001000:	dd02      	ble.n	8001008 <mppt+0x6c>
		*dutyCycle = 255;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	22ff      	movs	r2, #255	@ 0xff
 8001006:	601a      	str	r2, [r3, #0]

	*prevPower = *power; // Actualizar `prevPower` con el valor actual de `power`
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	601a      	str	r2, [r3, #0]
}
 8001010:	bf00      	nop
 8001012:	371c      	adds	r7, #28
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	0000      	movs	r0, r0
	...

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001024:	b09e      	sub	sp, #120	@ 0x78
 8001026:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001028:	f001 f91c 	bl	8002264 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102c:	f000 f99e 	bl	800136c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001030:	f000 fc90 	bl	8001954 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001034:	f000 fa04 	bl	8001440 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001038:	f000 fa54 	bl	80014e4 <MX_ADC2_Init>
  MX_ADC3_Init();
 800103c:	f000 faa4 	bl	8001588 <MX_ADC3_Init>
  MX_I2C1_Init();
 8001040:	f000 faf4 	bl	800162c <MX_I2C1_Init>
  MX_I2C3_Init();
 8001044:	f000 fb20 	bl	8001688 <MX_I2C3_Init>
  MX_TIM2_Init();
 8001048:	f000 fb4c 	bl	80016e4 <MX_TIM2_Init>
  MX_TIM4_Init();
 800104c:	f000 fba4 	bl	8001798 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001050:	f000 fbfc 	bl	800184c <MX_TIM5_Init>
  MX_UART4_Init();
 8001054:	f000 fc54 	bl	8001900 <MX_UART4_Init>
  MX_USB_DEVICE_Init();
 8001058:	f008 fc1a 	bl	8009890 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */


	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800105c:	2100      	movs	r1, #0
 800105e:	48aa      	ldr	r0, [pc, #680]	@ (8001308 <main+0x2e8>)
 8001060:	f004 f8a8 	bl	80051b4 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001064:	210c      	movs	r1, #12
 8001066:	48a9      	ldr	r0, [pc, #676]	@ (800130c <main+0x2ec>)
 8001068:	f004 f8a4 	bl	80051b4 <HAL_TIM_PWM_Start>

	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 800106c:	210c      	movs	r1, #12
 800106e:	48a8      	ldr	r0, [pc, #672]	@ (8001310 <main+0x2f0>)
 8001070:	f004 f8a0 	bl	80051b4 <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  	//MPPT
		VX_in = readADC(&hadc2, ADC_CHANNEL_11) * (3.3 / 4095.0);
 8001074:	210b      	movs	r1, #11
 8001076:	48a7      	ldr	r0, [pc, #668]	@ (8001314 <main+0x2f4>)
 8001078:	f7ff ff5e 	bl	8000f38 <readADC>
 800107c:	4603      	mov	r3, r0
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff fa40 	bl	8000504 <__aeabi_ui2d>
 8001084:	a39e      	add	r3, pc, #632	@ (adr r3, 8001300 <main+0x2e0>)
 8001086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108a:	f7ff fab5 	bl	80005f8 <__aeabi_dmul>
 800108e:	4602      	mov	r2, r0
 8001090:	460b      	mov	r3, r1
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	f7ff fd87 	bl	8000ba8 <__aeabi_d2f>
 800109a:	4603      	mov	r3, r0
 800109c:	4a9e      	ldr	r2, [pc, #632]	@ (8001318 <main+0x2f8>)
 800109e:	6013      	str	r3, [r2, #0]
		IX_in = readADC(&hadc2, ADC_CHANNEL_10) * (3.3 / 4095.0);
 80010a0:	210a      	movs	r1, #10
 80010a2:	489c      	ldr	r0, [pc, #624]	@ (8001314 <main+0x2f4>)
 80010a4:	f7ff ff48 	bl	8000f38 <readADC>
 80010a8:	4603      	mov	r3, r0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff fa2a 	bl	8000504 <__aeabi_ui2d>
 80010b0:	a393      	add	r3, pc, #588	@ (adr r3, 8001300 <main+0x2e0>)
 80010b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b6:	f7ff fa9f 	bl	80005f8 <__aeabi_dmul>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4610      	mov	r0, r2
 80010c0:	4619      	mov	r1, r3
 80010c2:	f7ff fd71 	bl	8000ba8 <__aeabi_d2f>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4a94      	ldr	r2, [pc, #592]	@ (800131c <main+0x2fc>)
 80010ca:	6013      	str	r3, [r2, #0]
		powerX = VX_in * IX_in;
 80010cc:	4b92      	ldr	r3, [pc, #584]	@ (8001318 <main+0x2f8>)
 80010ce:	ed93 7a00 	vldr	s14, [r3]
 80010d2:	4b92      	ldr	r3, [pc, #584]	@ (800131c <main+0x2fc>)
 80010d4:	edd3 7a00 	vldr	s15, [r3]
 80010d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010dc:	4b90      	ldr	r3, [pc, #576]	@ (8001320 <main+0x300>)
 80010de:	edc3 7a00 	vstr	s15, [r3]

		VY_in = readADC(&hadc1, ADC_CHANNEL_13) * (3.3 / 4095.0);
 80010e2:	210d      	movs	r1, #13
 80010e4:	488f      	ldr	r0, [pc, #572]	@ (8001324 <main+0x304>)
 80010e6:	f7ff ff27 	bl	8000f38 <readADC>
 80010ea:	4603      	mov	r3, r0
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff fa09 	bl	8000504 <__aeabi_ui2d>
 80010f2:	a383      	add	r3, pc, #524	@ (adr r3, 8001300 <main+0x2e0>)
 80010f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f8:	f7ff fa7e 	bl	80005f8 <__aeabi_dmul>
 80010fc:	4602      	mov	r2, r0
 80010fe:	460b      	mov	r3, r1
 8001100:	4610      	mov	r0, r2
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fd50 	bl	8000ba8 <__aeabi_d2f>
 8001108:	4603      	mov	r3, r0
 800110a:	4a87      	ldr	r2, [pc, #540]	@ (8001328 <main+0x308>)
 800110c:	6013      	str	r3, [r2, #0]
		IY_in = readADC(&hadc1, ADC_CHANNEL_12) * (3.3 / 4095.0);
 800110e:	210c      	movs	r1, #12
 8001110:	4884      	ldr	r0, [pc, #528]	@ (8001324 <main+0x304>)
 8001112:	f7ff ff11 	bl	8000f38 <readADC>
 8001116:	4603      	mov	r3, r0
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff f9f3 	bl	8000504 <__aeabi_ui2d>
 800111e:	a378      	add	r3, pc, #480	@ (adr r3, 8001300 <main+0x2e0>)
 8001120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001124:	f7ff fa68 	bl	80005f8 <__aeabi_dmul>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fd3a 	bl	8000ba8 <__aeabi_d2f>
 8001134:	4603      	mov	r3, r0
 8001136:	4a7d      	ldr	r2, [pc, #500]	@ (800132c <main+0x30c>)
 8001138:	6013      	str	r3, [r2, #0]
		powerY = VY_in * IY_in;
 800113a:	4b7b      	ldr	r3, [pc, #492]	@ (8001328 <main+0x308>)
 800113c:	ed93 7a00 	vldr	s14, [r3]
 8001140:	4b7a      	ldr	r3, [pc, #488]	@ (800132c <main+0x30c>)
 8001142:	edd3 7a00 	vldr	s15, [r3]
 8001146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800114a:	4b79      	ldr	r3, [pc, #484]	@ (8001330 <main+0x310>)
 800114c:	edc3 7a00 	vstr	s15, [r3]

		VZ_in = readADC(&hadc3, ADC_CHANNEL_2) * (3.3 / 4095.0);
 8001150:	2102      	movs	r1, #2
 8001152:	4878      	ldr	r0, [pc, #480]	@ (8001334 <main+0x314>)
 8001154:	f7ff fef0 	bl	8000f38 <readADC>
 8001158:	4603      	mov	r3, r0
 800115a:	4618      	mov	r0, r3
 800115c:	f7ff f9d2 	bl	8000504 <__aeabi_ui2d>
 8001160:	a367      	add	r3, pc, #412	@ (adr r3, 8001300 <main+0x2e0>)
 8001162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001166:	f7ff fa47 	bl	80005f8 <__aeabi_dmul>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	f7ff fd19 	bl	8000ba8 <__aeabi_d2f>
 8001176:	4603      	mov	r3, r0
 8001178:	4a6f      	ldr	r2, [pc, #444]	@ (8001338 <main+0x318>)
 800117a:	6013      	str	r3, [r2, #0]
		IZ_in = readADC(&hadc3, ADC_CHANNEL_1) * (3.3 / 4095.0);
 800117c:	2101      	movs	r1, #1
 800117e:	486d      	ldr	r0, [pc, #436]	@ (8001334 <main+0x314>)
 8001180:	f7ff feda 	bl	8000f38 <readADC>
 8001184:	4603      	mov	r3, r0
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff f9bc 	bl	8000504 <__aeabi_ui2d>
 800118c:	a35c      	add	r3, pc, #368	@ (adr r3, 8001300 <main+0x2e0>)
 800118e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001192:	f7ff fa31 	bl	80005f8 <__aeabi_dmul>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	f7ff fd03 	bl	8000ba8 <__aeabi_d2f>
 80011a2:	4603      	mov	r3, r0
 80011a4:	4a65      	ldr	r2, [pc, #404]	@ (800133c <main+0x31c>)
 80011a6:	6013      	str	r3, [r2, #0]
		powerZ = VZ_in * IZ_in;
 80011a8:	4b63      	ldr	r3, [pc, #396]	@ (8001338 <main+0x318>)
 80011aa:	ed93 7a00 	vldr	s14, [r3]
 80011ae:	4b63      	ldr	r3, [pc, #396]	@ (800133c <main+0x31c>)
 80011b0:	edd3 7a00 	vldr	s15, [r3]
 80011b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b8:	4b61      	ldr	r3, [pc, #388]	@ (8001340 <main+0x320>)
 80011ba:	edc3 7a00 	vstr	s15, [r3]


		mppt(&dutyCycleX, &powerX, &prevPowerX);
 80011be:	4a61      	ldr	r2, [pc, #388]	@ (8001344 <main+0x324>)
 80011c0:	4957      	ldr	r1, [pc, #348]	@ (8001320 <main+0x300>)
 80011c2:	4861      	ldr	r0, [pc, #388]	@ (8001348 <main+0x328>)
 80011c4:	f7ff feea 	bl	8000f9c <mppt>
		mppt(&dutyCycleY, &powerY, &prevPowerY);
 80011c8:	4a60      	ldr	r2, [pc, #384]	@ (800134c <main+0x32c>)
 80011ca:	4959      	ldr	r1, [pc, #356]	@ (8001330 <main+0x310>)
 80011cc:	4860      	ldr	r0, [pc, #384]	@ (8001350 <main+0x330>)
 80011ce:	f7ff fee5 	bl	8000f9c <mppt>
		mppt(&dutyCycleZ, &powerZ, &prevPowerZ);
 80011d2:	4a60      	ldr	r2, [pc, #384]	@ (8001354 <main+0x334>)
 80011d4:	495a      	ldr	r1, [pc, #360]	@ (8001340 <main+0x320>)
 80011d6:	4860      	ldr	r0, [pc, #384]	@ (8001358 <main+0x338>)
 80011d8:	f7ff fee0 	bl	8000f9c <mppt>

		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, dutyCycleX);
 80011dc:	4b5a      	ldr	r3, [pc, #360]	@ (8001348 <main+0x328>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b49      	ldr	r3, [pc, #292]	@ (8001308 <main+0x2e8>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, dutyCycleY);
 80011e6:	4b5a      	ldr	r3, [pc, #360]	@ (8001350 <main+0x330>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	4b48      	ldr	r3, [pc, #288]	@ (800130c <main+0x2ec>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	641a      	str	r2, [r3, #64]	@ 0x40
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, dutyCycleZ);
 80011f0:	4b59      	ldr	r3, [pc, #356]	@ (8001358 <main+0x338>)
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	4b46      	ldr	r3, [pc, #280]	@ (8001310 <main+0x2f0>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	641a      	str	r2, [r3, #64]	@ 0x40


		// Imprimir datos al puerto serie
		char buffer[100];
		sprintf(buffer, "VX_in: %.2f V, IX_in: %.2f A, PowerX: %.2f W\n", VX_in, IX_in, powerX); // @suppress("Float formatting support")
 80011fa:	4b47      	ldr	r3, [pc, #284]	@ (8001318 <main+0x2f8>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff f9a2 	bl	8000548 <__aeabi_f2d>
 8001204:	4680      	mov	r8, r0
 8001206:	4689      	mov	r9, r1
 8001208:	4b44      	ldr	r3, [pc, #272]	@ (800131c <main+0x2fc>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f99b 	bl	8000548 <__aeabi_f2d>
 8001212:	4604      	mov	r4, r0
 8001214:	460d      	mov	r5, r1
 8001216:	4b42      	ldr	r3, [pc, #264]	@ (8001320 <main+0x300>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f994 	bl	8000548 <__aeabi_f2d>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	1d38      	adds	r0, r7, #4
 8001226:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800122a:	e9cd 4500 	strd	r4, r5, [sp]
 800122e:	4642      	mov	r2, r8
 8001230:	464b      	mov	r3, r9
 8001232:	494a      	ldr	r1, [pc, #296]	@ (800135c <main+0x33c>)
 8001234:	f009 fc78 	bl	800ab28 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff f818 	bl	8000270 <strlen>
 8001240:	4603      	mov	r3, r0
 8001242:	b29a      	uxth	r2, r3
 8001244:	1d39      	adds	r1, r7, #4
 8001246:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800124a:	4845      	ldr	r0, [pc, #276]	@ (8001360 <main+0x340>)
 800124c:	f004 fc8a 	bl	8005b64 <HAL_UART_Transmit>
		sprintf(buffer, "VY_in: %.2f V, IY_in: %.2f A, PowerY: %.2f W\n", VY_in, IY_in, powerY); // @suppress("Float formatting support")
 8001250:	4b35      	ldr	r3, [pc, #212]	@ (8001328 <main+0x308>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff f977 	bl	8000548 <__aeabi_f2d>
 800125a:	4680      	mov	r8, r0
 800125c:	4689      	mov	r9, r1
 800125e:	4b33      	ldr	r3, [pc, #204]	@ (800132c <main+0x30c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff f970 	bl	8000548 <__aeabi_f2d>
 8001268:	4604      	mov	r4, r0
 800126a:	460d      	mov	r5, r1
 800126c:	4b30      	ldr	r3, [pc, #192]	@ (8001330 <main+0x310>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff f969 	bl	8000548 <__aeabi_f2d>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	1d38      	adds	r0, r7, #4
 800127c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001280:	e9cd 4500 	strd	r4, r5, [sp]
 8001284:	4642      	mov	r2, r8
 8001286:	464b      	mov	r3, r9
 8001288:	4936      	ldr	r1, [pc, #216]	@ (8001364 <main+0x344>)
 800128a:	f009 fc4d 	bl	800ab28 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 800128e:	1d3b      	adds	r3, r7, #4
 8001290:	4618      	mov	r0, r3
 8001292:	f7fe ffed 	bl	8000270 <strlen>
 8001296:	4603      	mov	r3, r0
 8001298:	b29a      	uxth	r2, r3
 800129a:	1d39      	adds	r1, r7, #4
 800129c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012a0:	482f      	ldr	r0, [pc, #188]	@ (8001360 <main+0x340>)
 80012a2:	f004 fc5f 	bl	8005b64 <HAL_UART_Transmit>
		sprintf(buffer, "VZ_in: %.2f V, IZ_in: %.2f A, PowerZ: %.2f W\n", VZ_in, IZ_in, powerZ); // @suppress("Float formatting support")
 80012a6:	4b24      	ldr	r3, [pc, #144]	@ (8001338 <main+0x318>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f94c 	bl	8000548 <__aeabi_f2d>
 80012b0:	4680      	mov	r8, r0
 80012b2:	4689      	mov	r9, r1
 80012b4:	4b21      	ldr	r3, [pc, #132]	@ (800133c <main+0x31c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7ff f945 	bl	8000548 <__aeabi_f2d>
 80012be:	4604      	mov	r4, r0
 80012c0:	460d      	mov	r5, r1
 80012c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001340 <main+0x320>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f93e 	bl	8000548 <__aeabi_f2d>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	1d38      	adds	r0, r7, #4
 80012d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012d6:	e9cd 4500 	strd	r4, r5, [sp]
 80012da:	4642      	mov	r2, r8
 80012dc:	464b      	mov	r3, r9
 80012de:	4922      	ldr	r1, [pc, #136]	@ (8001368 <main+0x348>)
 80012e0:	f009 fc22 	bl	800ab28 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7fe ffc2 	bl	8000270 <strlen>
 80012ec:	4603      	mov	r3, r0
 80012ee:	b29a      	uxth	r2, r3
 80012f0:	1d39      	adds	r1, r7, #4
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012f6:	481a      	ldr	r0, [pc, #104]	@ (8001360 <main+0x340>)
 80012f8:	f004 fc34 	bl	8005b64 <HAL_UART_Transmit>
  {
 80012fc:	bf00      	nop
 80012fe:	e6b9      	b.n	8001074 <main+0x54>
 8001300:	e734d9b4 	.word	0xe734d9b4
 8001304:	3f4a680c 	.word	0x3f4a680c
 8001308:	2000046c 	.word	0x2000046c
 800130c:	200004b4 	.word	0x200004b4
 8001310:	200004fc 	.word	0x200004fc
 8001314:	20000334 	.word	0x20000334
 8001318:	2000058c 	.word	0x2000058c
 800131c:	20000598 	.word	0x20000598
 8001320:	200005a4 	.word	0x200005a4
 8001324:	200002ec 	.word	0x200002ec
 8001328:	20000590 	.word	0x20000590
 800132c:	2000059c 	.word	0x2000059c
 8001330:	200005a8 	.word	0x200005a8
 8001334:	2000037c 	.word	0x2000037c
 8001338:	20000594 	.word	0x20000594
 800133c:	200005a0 	.word	0x200005a0
 8001340:	200005ac 	.word	0x200005ac
 8001344:	200005b0 	.word	0x200005b0
 8001348:	20000000 	.word	0x20000000
 800134c:	200005b4 	.word	0x200005b4
 8001350:	20000004 	.word	0x20000004
 8001354:	200005b8 	.word	0x200005b8
 8001358:	20000008 	.word	0x20000008
 800135c:	0800cf20 	.word	0x0800cf20
 8001360:	20000544 	.word	0x20000544
 8001364:	0800cf50 	.word	0x0800cf50
 8001368:	0800cf80 	.word	0x0800cf80

0800136c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b094      	sub	sp, #80	@ 0x50
 8001370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001372:	f107 0320 	add.w	r3, r7, #32
 8001376:	2230      	movs	r2, #48	@ 0x30
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f009 fcb6 	bl	800acec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	4b28      	ldr	r3, [pc, #160]	@ (8001438 <SystemClock_Config+0xcc>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001398:	4a27      	ldr	r2, [pc, #156]	@ (8001438 <SystemClock_Config+0xcc>)
 800139a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800139e:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a0:	4b25      	ldr	r3, [pc, #148]	@ (8001438 <SystemClock_Config+0xcc>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	4b22      	ldr	r3, [pc, #136]	@ (800143c <SystemClock_Config+0xd0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a21      	ldr	r2, [pc, #132]	@ (800143c <SystemClock_Config+0xd0>)
 80013b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b1f      	ldr	r3, [pc, #124]	@ (800143c <SystemClock_Config+0xd0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013c8:	2301      	movs	r3, #1
 80013ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d2:	2302      	movs	r3, #2
 80013d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013dc:	2304      	movs	r3, #4
 80013de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013e0:	23a8      	movs	r3, #168	@ 0xa8
 80013e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013e4:	2302      	movs	r3, #2
 80013e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013e8:	2307      	movs	r3, #7
 80013ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ec:	f107 0320 	add.w	r3, r7, #32
 80013f0:	4618      	mov	r0, r3
 80013f2:	f003 f9f7 	bl	80047e4 <HAL_RCC_OscConfig>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80013fc:	f000 fb18 	bl	8001a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001400:	230f      	movs	r3, #15
 8001402:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001404:	2302      	movs	r3, #2
 8001406:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 800140c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001410:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001412:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001416:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	2105      	movs	r1, #5
 800141e:	4618      	mov	r0, r3
 8001420:	f003 fc58 	bl	8004cd4 <HAL_RCC_ClockConfig>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800142a:	f000 fb01 	bl	8001a30 <Error_Handler>
  }
}
 800142e:	bf00      	nop
 8001430:	3750      	adds	r7, #80	@ 0x50
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40023800 	.word	0x40023800
 800143c:	40007000 	.word	0x40007000

08001440 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001446:	463b      	mov	r3, r7
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]
 800144e:	609a      	str	r2, [r3, #8]
 8001450:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001452:	4b21      	ldr	r3, [pc, #132]	@ (80014d8 <MX_ADC1_Init+0x98>)
 8001454:	4a21      	ldr	r2, [pc, #132]	@ (80014dc <MX_ADC1_Init+0x9c>)
 8001456:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001458:	4b1f      	ldr	r3, [pc, #124]	@ (80014d8 <MX_ADC1_Init+0x98>)
 800145a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800145e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001460:	4b1d      	ldr	r3, [pc, #116]	@ (80014d8 <MX_ADC1_Init+0x98>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001466:	4b1c      	ldr	r3, [pc, #112]	@ (80014d8 <MX_ADC1_Init+0x98>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800146c:	4b1a      	ldr	r3, [pc, #104]	@ (80014d8 <MX_ADC1_Init+0x98>)
 800146e:	2200      	movs	r2, #0
 8001470:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001472:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <MX_ADC1_Init+0x98>)
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800147a:	4b17      	ldr	r3, [pc, #92]	@ (80014d8 <MX_ADC1_Init+0x98>)
 800147c:	2200      	movs	r2, #0
 800147e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001480:	4b15      	ldr	r3, [pc, #84]	@ (80014d8 <MX_ADC1_Init+0x98>)
 8001482:	4a17      	ldr	r2, [pc, #92]	@ (80014e0 <MX_ADC1_Init+0xa0>)
 8001484:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001486:	4b14      	ldr	r3, [pc, #80]	@ (80014d8 <MX_ADC1_Init+0x98>)
 8001488:	2200      	movs	r2, #0
 800148a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800148c:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <MX_ADC1_Init+0x98>)
 800148e:	2201      	movs	r2, #1
 8001490:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001492:	4b11      	ldr	r3, [pc, #68]	@ (80014d8 <MX_ADC1_Init+0x98>)
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800149a:	4b0f      	ldr	r3, [pc, #60]	@ (80014d8 <MX_ADC1_Init+0x98>)
 800149c:	2201      	movs	r2, #1
 800149e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014a0:	480d      	ldr	r0, [pc, #52]	@ (80014d8 <MX_ADC1_Init+0x98>)
 80014a2:	f000 ff75 	bl	8002390 <HAL_ADC_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014ac:	f000 fac0 	bl	8001a30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80014b0:	2304      	movs	r3, #4
 80014b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80014b4:	2301      	movs	r3, #1
 80014b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014bc:	463b      	mov	r3, r7
 80014be:	4619      	mov	r1, r3
 80014c0:	4805      	ldr	r0, [pc, #20]	@ (80014d8 <MX_ADC1_Init+0x98>)
 80014c2:	f001 f913 	bl	80026ec <HAL_ADC_ConfigChannel>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80014cc:	f000 fab0 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	200002ec 	.word	0x200002ec
 80014dc:	40012000 	.word	0x40012000
 80014e0:	0f000001 	.word	0x0f000001

080014e4 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ea:	463b      	mov	r3, r7
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80014f6:	4b21      	ldr	r3, [pc, #132]	@ (800157c <MX_ADC2_Init+0x98>)
 80014f8:	4a21      	ldr	r2, [pc, #132]	@ (8001580 <MX_ADC2_Init+0x9c>)
 80014fa:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014fc:	4b1f      	ldr	r3, [pc, #124]	@ (800157c <MX_ADC2_Init+0x98>)
 80014fe:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001502:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001504:	4b1d      	ldr	r3, [pc, #116]	@ (800157c <MX_ADC2_Init+0x98>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800150a:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <MX_ADC2_Init+0x98>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001510:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <MX_ADC2_Init+0x98>)
 8001512:	2200      	movs	r2, #0
 8001514:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001516:	4b19      	ldr	r3, [pc, #100]	@ (800157c <MX_ADC2_Init+0x98>)
 8001518:	2200      	movs	r2, #0
 800151a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800151e:	4b17      	ldr	r3, [pc, #92]	@ (800157c <MX_ADC2_Init+0x98>)
 8001520:	2200      	movs	r2, #0
 8001522:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001524:	4b15      	ldr	r3, [pc, #84]	@ (800157c <MX_ADC2_Init+0x98>)
 8001526:	4a17      	ldr	r2, [pc, #92]	@ (8001584 <MX_ADC2_Init+0xa0>)
 8001528:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800152a:	4b14      	ldr	r3, [pc, #80]	@ (800157c <MX_ADC2_Init+0x98>)
 800152c:	2200      	movs	r2, #0
 800152e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001530:	4b12      	ldr	r3, [pc, #72]	@ (800157c <MX_ADC2_Init+0x98>)
 8001532:	2201      	movs	r2, #1
 8001534:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <MX_ADC2_Init+0x98>)
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800153e:	4b0f      	ldr	r3, [pc, #60]	@ (800157c <MX_ADC2_Init+0x98>)
 8001540:	2201      	movs	r2, #1
 8001542:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001544:	480d      	ldr	r0, [pc, #52]	@ (800157c <MX_ADC2_Init+0x98>)
 8001546:	f000 ff23 	bl	8002390 <HAL_ADC_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8001550:	f000 fa6e 	bl	8001a30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001554:	2306      	movs	r3, #6
 8001556:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001558:	2301      	movs	r3, #1
 800155a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001560:	463b      	mov	r3, r7
 8001562:	4619      	mov	r1, r3
 8001564:	4805      	ldr	r0, [pc, #20]	@ (800157c <MX_ADC2_Init+0x98>)
 8001566:	f001 f8c1 	bl	80026ec <HAL_ADC_ConfigChannel>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8001570:	f000 fa5e 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	3710      	adds	r7, #16
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000334 	.word	0x20000334
 8001580:	40012100 	.word	0x40012100
 8001584:	0f000001 	.word	0x0f000001

08001588 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800158e:	463b      	mov	r3, r7
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800159a:	4b21      	ldr	r3, [pc, #132]	@ (8001620 <MX_ADC3_Init+0x98>)
 800159c:	4a21      	ldr	r2, [pc, #132]	@ (8001624 <MX_ADC3_Init+0x9c>)
 800159e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001620 <MX_ADC3_Init+0x98>)
 80015a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80015a6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80015a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001620 <MX_ADC3_Init+0x98>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80015ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001620 <MX_ADC3_Init+0x98>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80015b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001620 <MX_ADC3_Init+0x98>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80015ba:	4b19      	ldr	r3, [pc, #100]	@ (8001620 <MX_ADC3_Init+0x98>)
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015c2:	4b17      	ldr	r3, [pc, #92]	@ (8001620 <MX_ADC3_Init+0x98>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80015c8:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <MX_ADC3_Init+0x98>)
 80015ca:	4a17      	ldr	r2, [pc, #92]	@ (8001628 <MX_ADC3_Init+0xa0>)
 80015cc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80015ce:	4b14      	ldr	r3, [pc, #80]	@ (8001620 <MX_ADC3_Init+0x98>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80015d4:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <MX_ADC3_Init+0x98>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80015da:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <MX_ADC3_Init+0x98>)
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <MX_ADC3_Init+0x98>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80015e8:	480d      	ldr	r0, [pc, #52]	@ (8001620 <MX_ADC3_Init+0x98>)
 80015ea:	f000 fed1 	bl	8002390 <HAL_ADC_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80015f4:	f000 fa1c 	bl	8001a30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80015f8:	2301      	movs	r3, #1
 80015fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80015fc:	2301      	movs	r3, #1
 80015fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001600:	2300      	movs	r3, #0
 8001602:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001604:	463b      	mov	r3, r7
 8001606:	4619      	mov	r1, r3
 8001608:	4805      	ldr	r0, [pc, #20]	@ (8001620 <MX_ADC3_Init+0x98>)
 800160a:	f001 f86f 	bl	80026ec <HAL_ADC_ConfigChannel>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001614:	f000 fa0c 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001618:	bf00      	nop
 800161a:	3710      	adds	r7, #16
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	2000037c 	.word	0x2000037c
 8001624:	40012200 	.word	0x40012200
 8001628:	0f000001 	.word	0x0f000001

0800162c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001630:	4b12      	ldr	r3, [pc, #72]	@ (800167c <MX_I2C1_Init+0x50>)
 8001632:	4a13      	ldr	r2, [pc, #76]	@ (8001680 <MX_I2C1_Init+0x54>)
 8001634:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001636:	4b11      	ldr	r3, [pc, #68]	@ (800167c <MX_I2C1_Init+0x50>)
 8001638:	4a12      	ldr	r2, [pc, #72]	@ (8001684 <MX_I2C1_Init+0x58>)
 800163a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800163c:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <MX_I2C1_Init+0x50>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001642:	4b0e      	ldr	r3, [pc, #56]	@ (800167c <MX_I2C1_Init+0x50>)
 8001644:	2200      	movs	r2, #0
 8001646:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001648:	4b0c      	ldr	r3, [pc, #48]	@ (800167c <MX_I2C1_Init+0x50>)
 800164a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800164e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001650:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <MX_I2C1_Init+0x50>)
 8001652:	2200      	movs	r2, #0
 8001654:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001656:	4b09      	ldr	r3, [pc, #36]	@ (800167c <MX_I2C1_Init+0x50>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800165c:	4b07      	ldr	r3, [pc, #28]	@ (800167c <MX_I2C1_Init+0x50>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001662:	4b06      	ldr	r3, [pc, #24]	@ (800167c <MX_I2C1_Init+0x50>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001668:	4804      	ldr	r0, [pc, #16]	@ (800167c <MX_I2C1_Init+0x50>)
 800166a:	f001 fd25 	bl	80030b8 <HAL_I2C_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001674:	f000 f9dc 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}
 800167c:	200003c4 	.word	0x200003c4
 8001680:	40005400 	.word	0x40005400
 8001684:	000186a0 	.word	0x000186a0

08001688 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800168c:	4b12      	ldr	r3, [pc, #72]	@ (80016d8 <MX_I2C3_Init+0x50>)
 800168e:	4a13      	ldr	r2, [pc, #76]	@ (80016dc <MX_I2C3_Init+0x54>)
 8001690:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001692:	4b11      	ldr	r3, [pc, #68]	@ (80016d8 <MX_I2C3_Init+0x50>)
 8001694:	4a12      	ldr	r2, [pc, #72]	@ (80016e0 <MX_I2C3_Init+0x58>)
 8001696:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001698:	4b0f      	ldr	r3, [pc, #60]	@ (80016d8 <MX_I2C3_Init+0x50>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800169e:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <MX_I2C3_Init+0x50>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a4:	4b0c      	ldr	r3, [pc, #48]	@ (80016d8 <MX_I2C3_Init+0x50>)
 80016a6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016aa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016ac:	4b0a      	ldr	r3, [pc, #40]	@ (80016d8 <MX_I2C3_Init+0x50>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80016b2:	4b09      	ldr	r3, [pc, #36]	@ (80016d8 <MX_I2C3_Init+0x50>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016b8:	4b07      	ldr	r3, [pc, #28]	@ (80016d8 <MX_I2C3_Init+0x50>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016be:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <MX_I2C3_Init+0x50>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80016c4:	4804      	ldr	r0, [pc, #16]	@ (80016d8 <MX_I2C3_Init+0x50>)
 80016c6:	f001 fcf7 	bl	80030b8 <HAL_I2C_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80016d0:	f000 f9ae 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000418 	.word	0x20000418
 80016dc:	40005c00 	.word	0x40005c00
 80016e0:	000186a0 	.word	0x000186a0

080016e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08a      	sub	sp, #40	@ 0x28
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ea:	f107 0320 	add.w	r3, r7, #32
 80016ee:	2200      	movs	r2, #0
 80016f0:	601a      	str	r2, [r3, #0]
 80016f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	605a      	str	r2, [r3, #4]
 80016fc:	609a      	str	r2, [r3, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	611a      	str	r2, [r3, #16]
 8001702:	615a      	str	r2, [r3, #20]
 8001704:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001706:	4b23      	ldr	r3, [pc, #140]	@ (8001794 <MX_TIM2_Init+0xb0>)
 8001708:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800170c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 800170e:	4b21      	ldr	r3, [pc, #132]	@ (8001794 <MX_TIM2_Init+0xb0>)
 8001710:	f240 12a3 	movw	r2, #419	@ 0x1a3
 8001714:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001716:	4b1f      	ldr	r3, [pc, #124]	@ (8001794 <MX_TIM2_Init+0xb0>)
 8001718:	2200      	movs	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800171c:	4b1d      	ldr	r3, [pc, #116]	@ (8001794 <MX_TIM2_Init+0xb0>)
 800171e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001722:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001724:	4b1b      	ldr	r3, [pc, #108]	@ (8001794 <MX_TIM2_Init+0xb0>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800172a:	4b1a      	ldr	r3, [pc, #104]	@ (8001794 <MX_TIM2_Init+0xb0>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001730:	4818      	ldr	r0, [pc, #96]	@ (8001794 <MX_TIM2_Init+0xb0>)
 8001732:	f003 fcef 	bl	8005114 <HAL_TIM_PWM_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800173c:	f000 f978 	bl	8001a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001744:	2300      	movs	r3, #0
 8001746:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001748:	f107 0320 	add.w	r3, r7, #32
 800174c:	4619      	mov	r1, r3
 800174e:	4811      	ldr	r0, [pc, #68]	@ (8001794 <MX_TIM2_Init+0xb0>)
 8001750:	f004 f93c 	bl	80059cc <HAL_TIMEx_MasterConfigSynchronization>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800175a:	f000 f969 	bl	8001a30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800175e:	2360      	movs	r3, #96	@ 0x60
 8001760:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001762:	2300      	movs	r3, #0
 8001764:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800176a:	2300      	movs	r3, #0
 800176c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	2200      	movs	r2, #0
 8001772:	4619      	mov	r1, r3
 8001774:	4807      	ldr	r0, [pc, #28]	@ (8001794 <MX_TIM2_Init+0xb0>)
 8001776:	f003 fde5 	bl	8005344 <HAL_TIM_PWM_ConfigChannel>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d001      	beq.n	8001784 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001780:	f000 f956 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001784:	4803      	ldr	r0, [pc, #12]	@ (8001794 <MX_TIM2_Init+0xb0>)
 8001786:	f000 fb63 	bl	8001e50 <HAL_TIM_MspPostInit>

}
 800178a:	bf00      	nop
 800178c:	3728      	adds	r7, #40	@ 0x28
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	2000046c 	.word	0x2000046c

08001798 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	@ 0x28
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800179e:	f107 0320 	add.w	r3, r7, #32
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	611a      	str	r2, [r3, #16]
 80017b6:	615a      	str	r2, [r3, #20]
 80017b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80017ba:	4b22      	ldr	r3, [pc, #136]	@ (8001844 <MX_TIM4_Init+0xac>)
 80017bc:	4a22      	ldr	r2, [pc, #136]	@ (8001848 <MX_TIM4_Init+0xb0>)
 80017be:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 420-1;
 80017c0:	4b20      	ldr	r3, [pc, #128]	@ (8001844 <MX_TIM4_Init+0xac>)
 80017c2:	f240 12a3 	movw	r2, #419	@ 0x1a3
 80017c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001844 <MX_TIM4_Init+0xac>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80017ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001844 <MX_TIM4_Init+0xac>)
 80017d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017d4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001844 <MX_TIM4_Init+0xac>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017dc:	4b19      	ldr	r3, [pc, #100]	@ (8001844 <MX_TIM4_Init+0xac>)
 80017de:	2200      	movs	r2, #0
 80017e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80017e2:	4818      	ldr	r0, [pc, #96]	@ (8001844 <MX_TIM4_Init+0xac>)
 80017e4:	f003 fc96 	bl	8005114 <HAL_TIM_PWM_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80017ee:	f000 f91f 	bl	8001a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80017fa:	f107 0320 	add.w	r3, r7, #32
 80017fe:	4619      	mov	r1, r3
 8001800:	4810      	ldr	r0, [pc, #64]	@ (8001844 <MX_TIM4_Init+0xac>)
 8001802:	f004 f8e3 	bl	80059cc <HAL_TIMEx_MasterConfigSynchronization>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800180c:	f000 f910 	bl	8001a30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001810:	2360      	movs	r3, #96	@ 0x60
 8001812:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001818:	2300      	movs	r3, #0
 800181a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	220c      	movs	r2, #12
 8001824:	4619      	mov	r1, r3
 8001826:	4807      	ldr	r0, [pc, #28]	@ (8001844 <MX_TIM4_Init+0xac>)
 8001828:	f003 fd8c 	bl	8005344 <HAL_TIM_PWM_ConfigChannel>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001832:	f000 f8fd 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001836:	4803      	ldr	r0, [pc, #12]	@ (8001844 <MX_TIM4_Init+0xac>)
 8001838:	f000 fb0a 	bl	8001e50 <HAL_TIM_MspPostInit>

}
 800183c:	bf00      	nop
 800183e:	3728      	adds	r7, #40	@ 0x28
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	200004b4 	.word	0x200004b4
 8001848:	40000800 	.word	0x40000800

0800184c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b08a      	sub	sp, #40	@ 0x28
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001852:	f107 0320 	add.w	r3, r7, #32
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]
 8001864:	609a      	str	r2, [r3, #8]
 8001866:	60da      	str	r2, [r3, #12]
 8001868:	611a      	str	r2, [r3, #16]
 800186a:	615a      	str	r2, [r3, #20]
 800186c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800186e:	4b22      	ldr	r3, [pc, #136]	@ (80018f8 <MX_TIM5_Init+0xac>)
 8001870:	4a22      	ldr	r2, [pc, #136]	@ (80018fc <MX_TIM5_Init+0xb0>)
 8001872:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 420-1;
 8001874:	4b20      	ldr	r3, [pc, #128]	@ (80018f8 <MX_TIM5_Init+0xac>)
 8001876:	f240 12a3 	movw	r2, #419	@ 0x1a3
 800187a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187c:	4b1e      	ldr	r3, [pc, #120]	@ (80018f8 <MX_TIM5_Init+0xac>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001882:	4b1d      	ldr	r3, [pc, #116]	@ (80018f8 <MX_TIM5_Init+0xac>)
 8001884:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001888:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188a:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <MX_TIM5_Init+0xac>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001890:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <MX_TIM5_Init+0xac>)
 8001892:	2200      	movs	r2, #0
 8001894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001896:	4818      	ldr	r0, [pc, #96]	@ (80018f8 <MX_TIM5_Init+0xac>)
 8001898:	f003 fc3c 	bl	8005114 <HAL_TIM_PWM_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80018a2:	f000 f8c5 	bl	8001a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018ae:	f107 0320 	add.w	r3, r7, #32
 80018b2:	4619      	mov	r1, r3
 80018b4:	4810      	ldr	r0, [pc, #64]	@ (80018f8 <MX_TIM5_Init+0xac>)
 80018b6:	f004 f889 	bl	80059cc <HAL_TIMEx_MasterConfigSynchronization>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80018c0:	f000 f8b6 	bl	8001a30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c4:	2360      	movs	r3, #96	@ 0x60
 80018c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	220c      	movs	r2, #12
 80018d8:	4619      	mov	r1, r3
 80018da:	4807      	ldr	r0, [pc, #28]	@ (80018f8 <MX_TIM5_Init+0xac>)
 80018dc:	f003 fd32 	bl	8005344 <HAL_TIM_PWM_ConfigChannel>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 80018e6:	f000 f8a3 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80018ea:	4803      	ldr	r0, [pc, #12]	@ (80018f8 <MX_TIM5_Init+0xac>)
 80018ec:	f000 fab0 	bl	8001e50 <HAL_TIM_MspPostInit>

}
 80018f0:	bf00      	nop
 80018f2:	3728      	adds	r7, #40	@ 0x28
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200004fc 	.word	0x200004fc
 80018fc:	40000c00 	.word	0x40000c00

08001900 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001904:	4b11      	ldr	r3, [pc, #68]	@ (800194c <MX_UART4_Init+0x4c>)
 8001906:	4a12      	ldr	r2, [pc, #72]	@ (8001950 <MX_UART4_Init+0x50>)
 8001908:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800190a:	4b10      	ldr	r3, [pc, #64]	@ (800194c <MX_UART4_Init+0x4c>)
 800190c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001910:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001912:	4b0e      	ldr	r3, [pc, #56]	@ (800194c <MX_UART4_Init+0x4c>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001918:	4b0c      	ldr	r3, [pc, #48]	@ (800194c <MX_UART4_Init+0x4c>)
 800191a:	2200      	movs	r2, #0
 800191c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800191e:	4b0b      	ldr	r3, [pc, #44]	@ (800194c <MX_UART4_Init+0x4c>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001924:	4b09      	ldr	r3, [pc, #36]	@ (800194c <MX_UART4_Init+0x4c>)
 8001926:	220c      	movs	r2, #12
 8001928:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800192a:	4b08      	ldr	r3, [pc, #32]	@ (800194c <MX_UART4_Init+0x4c>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001930:	4b06      	ldr	r3, [pc, #24]	@ (800194c <MX_UART4_Init+0x4c>)
 8001932:	2200      	movs	r2, #0
 8001934:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001936:	4805      	ldr	r0, [pc, #20]	@ (800194c <MX_UART4_Init+0x4c>)
 8001938:	f004 f8c4 	bl	8005ac4 <HAL_UART_Init>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001942:	f000 f875 	bl	8001a30 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000544 	.word	0x20000544
 8001950:	40004c00 	.word	0x40004c00

08001954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b08a      	sub	sp, #40	@ 0x28
 8001958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195a:	f107 0314 	add.w	r3, r7, #20
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	605a      	str	r2, [r3, #4]
 8001964:	609a      	str	r2, [r3, #8]
 8001966:	60da      	str	r2, [r3, #12]
 8001968:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800196a:	2300      	movs	r3, #0
 800196c:	613b      	str	r3, [r7, #16]
 800196e:	4b2e      	ldr	r3, [pc, #184]	@ (8001a28 <MX_GPIO_Init+0xd4>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001972:	4a2d      	ldr	r2, [pc, #180]	@ (8001a28 <MX_GPIO_Init+0xd4>)
 8001974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001978:	6313      	str	r3, [r2, #48]	@ 0x30
 800197a:	4b2b      	ldr	r3, [pc, #172]	@ (8001a28 <MX_GPIO_Init+0xd4>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
 800198a:	4b27      	ldr	r3, [pc, #156]	@ (8001a28 <MX_GPIO_Init+0xd4>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198e:	4a26      	ldr	r2, [pc, #152]	@ (8001a28 <MX_GPIO_Init+0xd4>)
 8001990:	f043 0304 	orr.w	r3, r3, #4
 8001994:	6313      	str	r3, [r2, #48]	@ 0x30
 8001996:	4b24      	ldr	r3, [pc, #144]	@ (8001a28 <MX_GPIO_Init+0xd4>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	60bb      	str	r3, [r7, #8]
 80019a6:	4b20      	ldr	r3, [pc, #128]	@ (8001a28 <MX_GPIO_Init+0xd4>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001a28 <MX_GPIO_Init+0xd4>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a28 <MX_GPIO_Init+0xd4>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	60bb      	str	r3, [r7, #8]
 80019bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	607b      	str	r3, [r7, #4]
 80019c2:	4b19      	ldr	r3, [pc, #100]	@ (8001a28 <MX_GPIO_Init+0xd4>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019c6:	4a18      	ldr	r2, [pc, #96]	@ (8001a28 <MX_GPIO_Init+0xd4>)
 80019c8:	f043 0302 	orr.w	r3, r3, #2
 80019cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ce:	4b16      	ldr	r3, [pc, #88]	@ (8001a28 <MX_GPIO_Init+0xd4>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	607b      	str	r3, [r7, #4]
 80019d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Enable5V_Pin|Enable3_3VBis_Pin|Enable3_3V_Pin|Enable5VBis_Pin
 80019da:	2200      	movs	r2, #0
 80019dc:	f645 4104 	movw	r1, #23556	@ 0x5c04
 80019e0:	4812      	ldr	r0, [pc, #72]	@ (8001a2c <MX_GPIO_Init+0xd8>)
 80019e2:	f001 fb4f 	bl	8003084 <HAL_GPIO_WritePin>
                          |EnableCalefactor_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Enable5V_Pin Enable3_3VBis_Pin Enable3_3V_Pin Enable5VBis_Pin
                           EnableCalefactor_Pin */
  GPIO_InitStruct.Pin = Enable5V_Pin|Enable3_3VBis_Pin|Enable3_3V_Pin|Enable5VBis_Pin
 80019e6:	f645 4304 	movw	r3, #23556	@ 0x5c04
 80019ea:	617b      	str	r3, [r7, #20]
                          |EnableCalefactor_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ec:	2301      	movs	r3, #1
 80019ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f4:	2300      	movs	r3, #0
 80019f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	4619      	mov	r1, r3
 80019fe:	480b      	ldr	r0, [pc, #44]	@ (8001a2c <MX_GPIO_Init+0xd8>)
 8001a00:	f001 f9a4 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BMS_Alert_Pin */
  GPIO_InitStruct.Pin = BMS_Alert_Pin;
 8001a04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BMS_Alert_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f107 0314 	add.w	r3, r7, #20
 8001a16:	4619      	mov	r1, r3
 8001a18:	4804      	ldr	r0, [pc, #16]	@ (8001a2c <MX_GPIO_Init+0xd8>)
 8001a1a:	f001 f997 	bl	8002d4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a1e:	bf00      	nop
 8001a20:	3728      	adds	r7, #40	@ 0x28
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020400 	.word	0x40020400

08001a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a34:	b672      	cpsid	i
}
 8001a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <Error_Handler+0x8>

08001a3c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a52:	4b0d      	ldr	r3, [pc, #52]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	603b      	str	r3, [r7, #0]
 8001a62:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	4a08      	ldr	r2, [pc, #32]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6e:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800

08001a8c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b090      	sub	sp, #64	@ 0x40
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a6c      	ldr	r2, [pc, #432]	@ (8001c5c <HAL_ADC_MspInit+0x1d0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d142      	bne.n	8001b34 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001aae:	2300      	movs	r3, #0
 8001ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ab2:	4b6b      	ldr	r3, [pc, #428]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab6:	4a6a      	ldr	r2, [pc, #424]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001abe:	4b68      	ldr	r3, [pc, #416]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ac2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ace:	4b64      	ldr	r3, [pc, #400]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad2:	4a63      	ldr	r2, [pc, #396]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001ad4:	f043 0304 	orr.w	r3, r3, #4
 8001ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ada:	4b61      	ldr	r3, [pc, #388]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	623b      	str	r3, [r7, #32]
 8001aea:	4b5d      	ldr	r3, [pc, #372]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	4a5c      	ldr	r2, [pc, #368]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001af6:	4b5a      	ldr	r3, [pc, #360]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	623b      	str	r3, [r7, #32]
 8001b00:	6a3b      	ldr	r3, [r7, #32]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = CurrYMPPT_Pin|VoltYMPPT_Pin|Volt5V_Pin|Curr5V_Pin;
 8001b02:	233c      	movs	r3, #60	@ 0x3c
 8001b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b06:	2303      	movs	r3, #3
 8001b08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b12:	4619      	mov	r1, r3
 8001b14:	4853      	ldr	r0, [pc, #332]	@ (8001c64 <HAL_ADC_MspInit+0x1d8>)
 8001b16:	f001 f919 	bl	8002d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Curr5VBis_Pin|Volt5VBis_Pin;
 8001b1a:	2330      	movs	r3, #48	@ 0x30
 8001b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	484e      	ldr	r0, [pc, #312]	@ (8001c68 <HAL_ADC_MspInit+0x1dc>)
 8001b2e:	f001 f90d 	bl	8002d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001b32:	e08e      	b.n	8001c52 <HAL_ADC_MspInit+0x1c6>
  else if(hadc->Instance==ADC2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a4c      	ldr	r2, [pc, #304]	@ (8001c6c <HAL_ADC_MspInit+0x1e0>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d15c      	bne.n	8001bf8 <HAL_ADC_MspInit+0x16c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
 8001b42:	4b47      	ldr	r3, [pc, #284]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b46:	4a46      	ldr	r2, [pc, #280]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001b48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b4e:	4b44      	ldr	r3, [pc, #272]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b56:	61fb      	str	r3, [r7, #28]
 8001b58:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
 8001b5e:	4b40      	ldr	r3, [pc, #256]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	4a3f      	ldr	r2, [pc, #252]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	61bb      	str	r3, [r7, #24]
 8001b74:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
 8001b7a:	4b39      	ldr	r3, [pc, #228]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	4a38      	ldr	r2, [pc, #224]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b86:	4b36      	ldr	r3, [pc, #216]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	4b32      	ldr	r3, [pc, #200]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	4a31      	ldr	r2, [pc, #196]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = CurrXMPPT_Pin|VoltXMPPT_Pin;
 8001bae:	2303      	movs	r3, #3
 8001bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4828      	ldr	r0, [pc, #160]	@ (8001c64 <HAL_ADC_MspInit+0x1d8>)
 8001bc2:	f001 f8c3 	bl	8002d4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Volt3_3V_Pin|Curr3_3V_Pin;
 8001bc6:	23c0      	movs	r3, #192	@ 0xc0
 8001bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4823      	ldr	r0, [pc, #140]	@ (8001c68 <HAL_ADC_MspInit+0x1dc>)
 8001bda:	f001 f8b7 	bl	8002d4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Volt3_3VBis_Pin|Curr3_3Vbis_Pin;
 8001bde:	2303      	movs	r3, #3
 8001be0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001be2:	2303      	movs	r3, #3
 8001be4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bee:	4619      	mov	r1, r3
 8001bf0:	481f      	ldr	r0, [pc, #124]	@ (8001c70 <HAL_ADC_MspInit+0x1e4>)
 8001bf2:	f001 f8ab 	bl	8002d4c <HAL_GPIO_Init>
}
 8001bf6:	e02c      	b.n	8001c52 <HAL_ADC_MspInit+0x1c6>
  else if(hadc->Instance==ADC3)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8001c74 <HAL_ADC_MspInit+0x1e8>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d127      	bne.n	8001c52 <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b16      	ldr	r3, [pc, #88]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0a:	4a15      	ldr	r2, [pc, #84]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001c0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c12:	4b13      	ldr	r3, [pc, #76]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
 8001c22:	4b0f      	ldr	r3, [pc, #60]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	4a0e      	ldr	r2, [pc, #56]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8001c60 <HAL_ADC_MspInit+0x1d4>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CurrZMPPT_Pin|VoltZMPPT_Pin;
 8001c3a:	2306      	movs	r3, #6
 8001c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4806      	ldr	r0, [pc, #24]	@ (8001c68 <HAL_ADC_MspInit+0x1dc>)
 8001c4e:	f001 f87d 	bl	8002d4c <HAL_GPIO_Init>
}
 8001c52:	bf00      	nop
 8001c54:	3740      	adds	r7, #64	@ 0x40
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40012000 	.word	0x40012000
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020800 	.word	0x40020800
 8001c68:	40020000 	.word	0x40020000
 8001c6c:	40012100 	.word	0x40012100
 8001c70:	40020400 	.word	0x40020400
 8001c74:	40012200 	.word	0x40012200

08001c78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08c      	sub	sp, #48	@ 0x30
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 031c 	add.w	r3, r7, #28
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a42      	ldr	r2, [pc, #264]	@ (8001da0 <HAL_I2C_MspInit+0x128>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d12c      	bne.n	8001cf4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
 8001c9e:	4b41      	ldr	r3, [pc, #260]	@ (8001da4 <HAL_I2C_MspInit+0x12c>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca2:	4a40      	ldr	r2, [pc, #256]	@ (8001da4 <HAL_I2C_MspInit+0x12c>)
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001caa:	4b3e      	ldr	r3, [pc, #248]	@ (8001da4 <HAL_I2C_MspInit+0x12c>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_BMS_Pin|SDA_BMS_Pin;
 8001cb6:	23c0      	movs	r3, #192	@ 0xc0
 8001cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cba:	2312      	movs	r3, #18
 8001cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cca:	f107 031c 	add.w	r3, r7, #28
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4835      	ldr	r0, [pc, #212]	@ (8001da8 <HAL_I2C_MspInit+0x130>)
 8001cd2:	f001 f83b 	bl	8002d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
 8001cda:	4b32      	ldr	r3, [pc, #200]	@ (8001da4 <HAL_I2C_MspInit+0x12c>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cde:	4a31      	ldr	r2, [pc, #196]	@ (8001da4 <HAL_I2C_MspInit+0x12c>)
 8001ce0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001ce4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ce6:	4b2f      	ldr	r3, [pc, #188]	@ (8001da4 <HAL_I2C_MspInit+0x12c>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cee:	617b      	str	r3, [r7, #20]
 8001cf0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001cf2:	e050      	b.n	8001d96 <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a2c      	ldr	r2, [pc, #176]	@ (8001dac <HAL_I2C_MspInit+0x134>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d14b      	bne.n	8001d96 <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	4b28      	ldr	r3, [pc, #160]	@ (8001da4 <HAL_I2C_MspInit+0x12c>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	4a27      	ldr	r2, [pc, #156]	@ (8001da4 <HAL_I2C_MspInit+0x12c>)
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0e:	4b25      	ldr	r3, [pc, #148]	@ (8001da4 <HAL_I2C_MspInit+0x12c>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d12:	f003 0304 	and.w	r3, r3, #4
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	4b21      	ldr	r3, [pc, #132]	@ (8001da4 <HAL_I2C_MspInit+0x12c>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	4a20      	ldr	r2, [pc, #128]	@ (8001da4 <HAL_I2C_MspInit+0x12c>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2a:	4b1e      	ldr	r3, [pc, #120]	@ (8001da4 <HAL_I2C_MspInit+0x12c>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SDA_Sat_Pin;
 8001d36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d3c:	2312      	movs	r3, #18
 8001d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d44:	2303      	movs	r3, #3
 8001d46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d48:	2304      	movs	r3, #4
 8001d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SDA_Sat_GPIO_Port, &GPIO_InitStruct);
 8001d4c:	f107 031c 	add.w	r3, r7, #28
 8001d50:	4619      	mov	r1, r3
 8001d52:	4817      	ldr	r0, [pc, #92]	@ (8001db0 <HAL_I2C_MspInit+0x138>)
 8001d54:	f000 fffa 	bl	8002d4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SCL_Sat_Pin;
 8001d58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d5e:	2312      	movs	r3, #18
 8001d60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d62:	2300      	movs	r3, #0
 8001d64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d66:	2303      	movs	r3, #3
 8001d68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d6a:	2304      	movs	r3, #4
 8001d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SCL_Sat_GPIO_Port, &GPIO_InitStruct);
 8001d6e:	f107 031c 	add.w	r3, r7, #28
 8001d72:	4619      	mov	r1, r3
 8001d74:	480f      	ldr	r0, [pc, #60]	@ (8001db4 <HAL_I2C_MspInit+0x13c>)
 8001d76:	f000 ffe9 	bl	8002d4c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]
 8001d7e:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <HAL_I2C_MspInit+0x12c>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d82:	4a08      	ldr	r2, [pc, #32]	@ (8001da4 <HAL_I2C_MspInit+0x12c>)
 8001d84:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001d88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d8a:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <HAL_I2C_MspInit+0x12c>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001d92:	60bb      	str	r3, [r7, #8]
 8001d94:	68bb      	ldr	r3, [r7, #8]
}
 8001d96:	bf00      	nop
 8001d98:	3730      	adds	r7, #48	@ 0x30
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40005400 	.word	0x40005400
 8001da4:	40023800 	.word	0x40023800
 8001da8:	40020400 	.word	0x40020400
 8001dac:	40005c00 	.word	0x40005c00
 8001db0:	40020800 	.word	0x40020800
 8001db4:	40020000 	.word	0x40020000

08001db8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b087      	sub	sp, #28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dc8:	d10e      	bne.n	8001de8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
 8001dce:	4b1d      	ldr	r3, [pc, #116]	@ (8001e44 <HAL_TIM_PWM_MspInit+0x8c>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e44 <HAL_TIM_PWM_MspInit+0x8c>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dda:	4b1a      	ldr	r3, [pc, #104]	@ (8001e44 <HAL_TIM_PWM_MspInit+0x8c>)
 8001ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	617b      	str	r3, [r7, #20]
 8001de4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001de6:	e026      	b.n	8001e36 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a16      	ldr	r2, [pc, #88]	@ (8001e48 <HAL_TIM_PWM_MspInit+0x90>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d10e      	bne.n	8001e10 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	613b      	str	r3, [r7, #16]
 8001df6:	4b13      	ldr	r3, [pc, #76]	@ (8001e44 <HAL_TIM_PWM_MspInit+0x8c>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfa:	4a12      	ldr	r2, [pc, #72]	@ (8001e44 <HAL_TIM_PWM_MspInit+0x8c>)
 8001dfc:	f043 0304 	orr.w	r3, r3, #4
 8001e00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e02:	4b10      	ldr	r3, [pc, #64]	@ (8001e44 <HAL_TIM_PWM_MspInit+0x8c>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e06:	f003 0304 	and.w	r3, r3, #4
 8001e0a:	613b      	str	r3, [r7, #16]
 8001e0c:	693b      	ldr	r3, [r7, #16]
}
 8001e0e:	e012      	b.n	8001e36 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0d      	ldr	r2, [pc, #52]	@ (8001e4c <HAL_TIM_PWM_MspInit+0x94>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10d      	bne.n	8001e36 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
 8001e1e:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <HAL_TIM_PWM_MspInit+0x8c>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	4a08      	ldr	r2, [pc, #32]	@ (8001e44 <HAL_TIM_PWM_MspInit+0x8c>)
 8001e24:	f043 0308 	orr.w	r3, r3, #8
 8001e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e2a:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <HAL_TIM_PWM_MspInit+0x8c>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2e:	f003 0308 	and.w	r3, r3, #8
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
}
 8001e36:	bf00      	nop
 8001e38:	371c      	adds	r7, #28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40000800 	.word	0x40000800
 8001e4c:	40000c00 	.word	0x40000c00

08001e50 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	@ 0x28
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e58:	f107 0314 	add.w	r3, r7, #20
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
 8001e66:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e70:	d11e      	bne.n	8001eb0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
 8001e76:	4b34      	ldr	r3, [pc, #208]	@ (8001f48 <HAL_TIM_MspPostInit+0xf8>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	4a33      	ldr	r2, [pc, #204]	@ (8001f48 <HAL_TIM_MspPostInit+0xf8>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e82:	4b31      	ldr	r3, [pc, #196]	@ (8001f48 <HAL_TIM_MspPostInit+0xf8>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = MPPTYControl_Pin;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e92:	2302      	movs	r3, #2
 8001e94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPPTYControl_GPIO_Port, &GPIO_InitStruct);
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4828      	ldr	r0, [pc, #160]	@ (8001f4c <HAL_TIM_MspPostInit+0xfc>)
 8001eaa:	f000 ff4f 	bl	8002d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001eae:	e047      	b.n	8001f40 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM4)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a26      	ldr	r2, [pc, #152]	@ (8001f50 <HAL_TIM_MspPostInit+0x100>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d11f      	bne.n	8001efa <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	4b22      	ldr	r3, [pc, #136]	@ (8001f48 <HAL_TIM_MspPostInit+0xf8>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	4a21      	ldr	r2, [pc, #132]	@ (8001f48 <HAL_TIM_MspPostInit+0xf8>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eca:	4b1f      	ldr	r3, [pc, #124]	@ (8001f48 <HAL_TIM_MspPostInit+0xf8>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MPPTXControl_Pin;
 8001ed6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ee8:	2302      	movs	r3, #2
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPPTXControl_GPIO_Port, &GPIO_InitStruct);
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4818      	ldr	r0, [pc, #96]	@ (8001f54 <HAL_TIM_MspPostInit+0x104>)
 8001ef4:	f000 ff2a 	bl	8002d4c <HAL_GPIO_Init>
}
 8001ef8:	e022      	b.n	8001f40 <HAL_TIM_MspPostInit+0xf0>
  else if(htim->Instance==TIM5)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a16      	ldr	r2, [pc, #88]	@ (8001f58 <HAL_TIM_MspPostInit+0x108>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d11d      	bne.n	8001f40 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f04:	2300      	movs	r3, #0
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	4b0f      	ldr	r3, [pc, #60]	@ (8001f48 <HAL_TIM_MspPostInit+0xf8>)
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0c:	4a0e      	ldr	r2, [pc, #56]	@ (8001f48 <HAL_TIM_MspPostInit+0xf8>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f14:	4b0c      	ldr	r3, [pc, #48]	@ (8001f48 <HAL_TIM_MspPostInit+0xf8>)
 8001f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	60bb      	str	r3, [r7, #8]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MPPTZControl_Pin;
 8001f20:	2308      	movs	r3, #8
 8001f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f30:	2302      	movs	r3, #2
 8001f32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPPTZControl_GPIO_Port, &GPIO_InitStruct);
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4804      	ldr	r0, [pc, #16]	@ (8001f4c <HAL_TIM_MspPostInit+0xfc>)
 8001f3c:	f000 ff06 	bl	8002d4c <HAL_GPIO_Init>
}
 8001f40:	bf00      	nop
 8001f42:	3728      	adds	r7, #40	@ 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40020000 	.word	0x40020000
 8001f50:	40000800 	.word	0x40000800
 8001f54:	40020400 	.word	0x40020400
 8001f58:	40000c00 	.word	0x40000c00

08001f5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08a      	sub	sp, #40	@ 0x28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 0314 	add.w	r3, r7, #20
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a19      	ldr	r2, [pc, #100]	@ (8001fe0 <HAL_UART_MspInit+0x84>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d12c      	bne.n	8001fd8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	4b18      	ldr	r3, [pc, #96]	@ (8001fe4 <HAL_UART_MspInit+0x88>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f86:	4a17      	ldr	r2, [pc, #92]	@ (8001fe4 <HAL_UART_MspInit+0x88>)
 8001f88:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001f8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f8e:	4b15      	ldr	r3, [pc, #84]	@ (8001fe4 <HAL_UART_MspInit+0x88>)
 8001f90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f92:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60fb      	str	r3, [r7, #12]
 8001f9e:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <HAL_UART_MspInit+0x88>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa2:	4a10      	ldr	r2, [pc, #64]	@ (8001fe4 <HAL_UART_MspInit+0x88>)
 8001fa4:	f043 0304 	orr.w	r3, r3, #4
 8001fa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001faa:	4b0e      	ldr	r3, [pc, #56]	@ (8001fe4 <HAL_UART_MspInit+0x88>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 8001fb6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001fba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001fc8:	2308      	movs	r3, #8
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4805      	ldr	r0, [pc, #20]	@ (8001fe8 <HAL_UART_MspInit+0x8c>)
 8001fd4:	f000 feba 	bl	8002d4c <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 8001fd8:	bf00      	nop
 8001fda:	3728      	adds	r7, #40	@ 0x28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40004c00 	.word	0x40004c00
 8001fe4:	40023800 	.word	0x40023800
 8001fe8:	40020800 	.word	0x40020800

08001fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <NMI_Handler+0x4>

08001ff4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <HardFault_Handler+0x4>

08001ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <MemManage_Handler+0x4>

08002004 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <BusFault_Handler+0x4>

0800200c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <UsageFault_Handler+0x4>

08002014 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002042:	f000 f961 	bl	8002308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002050:	4802      	ldr	r0, [pc, #8]	@ (800205c <OTG_FS_IRQHandler+0x10>)
 8002052:	f001 fab9 	bl	80035c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20001aa4 	.word	0x20001aa4

08002060 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return 1;
 8002064:	2301      	movs	r3, #1
}
 8002066:	4618      	mov	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <_kill>:

int _kill(int pid, int sig)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800207a:	f008 fe43 	bl	800ad04 <__errno>
 800207e:	4603      	mov	r3, r0
 8002080:	2216      	movs	r2, #22
 8002082:	601a      	str	r2, [r3, #0]
  return -1;
 8002084:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <_exit>:

void _exit (int status)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002098:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff ffe7 	bl	8002070 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020a2:	bf00      	nop
 80020a4:	e7fd      	b.n	80020a2 <_exit+0x12>

080020a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b086      	sub	sp, #24
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	60f8      	str	r0, [r7, #12]
 80020ae:	60b9      	str	r1, [r7, #8]
 80020b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
 80020b6:	e00a      	b.n	80020ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020b8:	f3af 8000 	nop.w
 80020bc:	4601      	mov	r1, r0
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	60ba      	str	r2, [r7, #8]
 80020c4:	b2ca      	uxtb	r2, r1
 80020c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	3301      	adds	r3, #1
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	dbf0      	blt.n	80020b8 <_read+0x12>
  }

  return len;
 80020d6:	687b      	ldr	r3, [r7, #4]
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	e009      	b.n	8002106 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	1c5a      	adds	r2, r3, #1
 80020f6:	60ba      	str	r2, [r7, #8]
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	3301      	adds	r3, #1
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	429a      	cmp	r2, r3
 800210c:	dbf1      	blt.n	80020f2 <_write+0x12>
  }
  return len;
 800210e:	687b      	ldr	r3, [r7, #4]
}
 8002110:	4618      	mov	r0, r3
 8002112:	3718      	adds	r7, #24
 8002114:	46bd      	mov	sp, r7
 8002116:	bd80      	pop	{r7, pc}

08002118 <_close>:

int _close(int file)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002120:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002140:	605a      	str	r2, [r3, #4]
  return 0;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <_isatty>:

int _isatty(int file)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002158:	2301      	movs	r3, #1
}
 800215a:	4618      	mov	r0, r3
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002166:	b480      	push	{r7}
 8002168:	b085      	sub	sp, #20
 800216a:	af00      	add	r7, sp, #0
 800216c:	60f8      	str	r0, [r7, #12]
 800216e:	60b9      	str	r1, [r7, #8]
 8002170:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002172:	2300      	movs	r3, #0
}
 8002174:	4618      	mov	r0, r3
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002188:	4a14      	ldr	r2, [pc, #80]	@ (80021dc <_sbrk+0x5c>)
 800218a:	4b15      	ldr	r3, [pc, #84]	@ (80021e0 <_sbrk+0x60>)
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002194:	4b13      	ldr	r3, [pc, #76]	@ (80021e4 <_sbrk+0x64>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d102      	bne.n	80021a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800219c:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <_sbrk+0x64>)
 800219e:	4a12      	ldr	r2, [pc, #72]	@ (80021e8 <_sbrk+0x68>)
 80021a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021a2:	4b10      	ldr	r3, [pc, #64]	@ (80021e4 <_sbrk+0x64>)
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4413      	add	r3, r2
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d207      	bcs.n	80021c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021b0:	f008 fda8 	bl	800ad04 <__errno>
 80021b4:	4603      	mov	r3, r0
 80021b6:	220c      	movs	r2, #12
 80021b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021be:	e009      	b.n	80021d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021c0:	4b08      	ldr	r3, [pc, #32]	@ (80021e4 <_sbrk+0x64>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021c6:	4b07      	ldr	r3, [pc, #28]	@ (80021e4 <_sbrk+0x64>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	4a05      	ldr	r2, [pc, #20]	@ (80021e4 <_sbrk+0x64>)
 80021d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021d2:	68fb      	ldr	r3, [r7, #12]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	20020000 	.word	0x20020000
 80021e0:	00000400 	.word	0x00000400
 80021e4:	200005bc 	.word	0x200005bc
 80021e8:	200022f8 	.word	0x200022f8

080021ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021f0:	4b06      	ldr	r3, [pc, #24]	@ (800220c <SystemInit+0x20>)
 80021f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021f6:	4a05      	ldr	r2, [pc, #20]	@ (800220c <SystemInit+0x20>)
 80021f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	e000ed00 	.word	0xe000ed00

08002210 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002210:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002248 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002214:	f7ff ffea 	bl	80021ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002218:	480c      	ldr	r0, [pc, #48]	@ (800224c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800221a:	490d      	ldr	r1, [pc, #52]	@ (8002250 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800221c:	4a0d      	ldr	r2, [pc, #52]	@ (8002254 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800221e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002220:	e002      	b.n	8002228 <LoopCopyDataInit>

08002222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002226:	3304      	adds	r3, #4

08002228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800222a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800222c:	d3f9      	bcc.n	8002222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800222e:	4a0a      	ldr	r2, [pc, #40]	@ (8002258 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002230:	4c0a      	ldr	r4, [pc, #40]	@ (800225c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002234:	e001      	b.n	800223a <LoopFillZerobss>

08002236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002238:	3204      	adds	r2, #4

0800223a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800223a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800223c:	d3fb      	bcc.n	8002236 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800223e:	f008 fd67 	bl	800ad10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002242:	f7fe feed 	bl	8001020 <main>
  bx  lr    
 8002246:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002248:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800224c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002250:	200002d0 	.word	0x200002d0
  ldr r2, =_sidata
 8002254:	0800d390 	.word	0x0800d390
  ldr r2, =_sbss
 8002258:	200002d0 	.word	0x200002d0
  ldr r4, =_ebss
 800225c:	200022f4 	.word	0x200022f4

08002260 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002260:	e7fe      	b.n	8002260 <ADC_IRQHandler>
	...

08002264 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002268:	4b0e      	ldr	r3, [pc, #56]	@ (80022a4 <HAL_Init+0x40>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a0d      	ldr	r2, [pc, #52]	@ (80022a4 <HAL_Init+0x40>)
 800226e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002272:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002274:	4b0b      	ldr	r3, [pc, #44]	@ (80022a4 <HAL_Init+0x40>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0a      	ldr	r2, [pc, #40]	@ (80022a4 <HAL_Init+0x40>)
 800227a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800227e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002280:	4b08      	ldr	r3, [pc, #32]	@ (80022a4 <HAL_Init+0x40>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a07      	ldr	r2, [pc, #28]	@ (80022a4 <HAL_Init+0x40>)
 8002286:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800228a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800228c:	2003      	movs	r0, #3
 800228e:	f000 fd1b 	bl	8002cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002292:	200f      	movs	r0, #15
 8002294:	f000 f808 	bl	80022a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002298:	f7ff fbd0 	bl	8001a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40023c00 	.word	0x40023c00

080022a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022b0:	4b12      	ldr	r3, [pc, #72]	@ (80022fc <HAL_InitTick+0x54>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b12      	ldr	r3, [pc, #72]	@ (8002300 <HAL_InitTick+0x58>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	4619      	mov	r1, r3
 80022ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022be:	fbb3 f3f1 	udiv	r3, r3, r1
 80022c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80022c6:	4618      	mov	r0, r3
 80022c8:	f000 fd33 	bl	8002d32 <HAL_SYSTICK_Config>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e00e      	b.n	80022f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b0f      	cmp	r3, #15
 80022da:	d80a      	bhi.n	80022f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022dc:	2200      	movs	r2, #0
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022e4:	f000 fcfb 	bl	8002cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022e8:	4a06      	ldr	r2, [pc, #24]	@ (8002304 <HAL_InitTick+0x5c>)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e000      	b.n	80022f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3708      	adds	r7, #8
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	2000000c 	.word	0x2000000c
 8002300:	20000014 	.word	0x20000014
 8002304:	20000010 	.word	0x20000010

08002308 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800230c:	4b06      	ldr	r3, [pc, #24]	@ (8002328 <HAL_IncTick+0x20>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	4b06      	ldr	r3, [pc, #24]	@ (800232c <HAL_IncTick+0x24>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4413      	add	r3, r2
 8002318:	4a04      	ldr	r2, [pc, #16]	@ (800232c <HAL_IncTick+0x24>)
 800231a:	6013      	str	r3, [r2, #0]
}
 800231c:	bf00      	nop
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20000014 	.word	0x20000014
 800232c:	200005c0 	.word	0x200005c0

08002330 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  return uwTick;
 8002334:	4b03      	ldr	r3, [pc, #12]	@ (8002344 <HAL_GetTick+0x14>)
 8002336:	681b      	ldr	r3, [r3, #0]
}
 8002338:	4618      	mov	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
 8002342:	bf00      	nop
 8002344:	200005c0 	.word	0x200005c0

08002348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b084      	sub	sp, #16
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002350:	f7ff ffee 	bl	8002330 <HAL_GetTick>
 8002354:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002360:	d005      	beq.n	800236e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002362:	4b0a      	ldr	r3, [pc, #40]	@ (800238c <HAL_Delay+0x44>)
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4413      	add	r3, r2
 800236c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800236e:	bf00      	nop
 8002370:	f7ff ffde 	bl	8002330 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	429a      	cmp	r2, r3
 800237e:	d8f7      	bhi.n	8002370 <HAL_Delay+0x28>
  {
  }
}
 8002380:	bf00      	nop
 8002382:	bf00      	nop
 8002384:	3710      	adds	r7, #16
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000014 	.word	0x20000014

08002390 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e033      	b.n	800240e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d109      	bne.n	80023c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff fb6c 	bl	8001a8c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	f003 0310 	and.w	r3, r3, #16
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d118      	bne.n	8002400 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023d6:	f023 0302 	bic.w	r3, r3, #2
 80023da:	f043 0202 	orr.w	r2, r3, #2
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f000 faa4 	bl	8002930 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f2:	f023 0303 	bic.w	r3, r3, #3
 80023f6:	f043 0201 	orr.w	r2, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	641a      	str	r2, [r3, #64]	@ 0x40
 80023fe:	e001      	b.n	8002404 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800240c:	7bfb      	ldrb	r3, [r7, #15]
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002418:	b480      	push	{r7}
 800241a:	b085      	sub	sp, #20
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800242a:	2b01      	cmp	r3, #1
 800242c:	d101      	bne.n	8002432 <HAL_ADC_Start+0x1a>
 800242e:	2302      	movs	r3, #2
 8002430:	e0b2      	b.n	8002598 <HAL_ADC_Start+0x180>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2201      	movs	r2, #1
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b01      	cmp	r3, #1
 8002446:	d018      	beq.n	800247a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002458:	4b52      	ldr	r3, [pc, #328]	@ (80025a4 <HAL_ADC_Start+0x18c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a52      	ldr	r2, [pc, #328]	@ (80025a8 <HAL_ADC_Start+0x190>)
 800245e:	fba2 2303 	umull	r2, r3, r2, r3
 8002462:	0c9a      	lsrs	r2, r3, #18
 8002464:	4613      	mov	r3, r2
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	4413      	add	r3, r2
 800246a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800246c:	e002      	b.n	8002474 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	3b01      	subs	r3, #1
 8002472:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f9      	bne.n	800246e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b01      	cmp	r3, #1
 8002486:	d17a      	bne.n	800257e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002490:	f023 0301 	bic.w	r3, r3, #1
 8002494:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d007      	beq.n	80024ba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80024b2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024c6:	d106      	bne.n	80024d6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024cc:	f023 0206 	bic.w	r2, r3, #6
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	645a      	str	r2, [r3, #68]	@ 0x44
 80024d4:	e002      	b.n	80024dc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024e4:	4b31      	ldr	r3, [pc, #196]	@ (80025ac <HAL_ADC_Start+0x194>)
 80024e6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80024f0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f003 031f 	and.w	r3, r3, #31
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d12a      	bne.n	8002554 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a2b      	ldr	r2, [pc, #172]	@ (80025b0 <HAL_ADC_Start+0x198>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d015      	beq.n	8002534 <HAL_ADC_Start+0x11c>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a29      	ldr	r2, [pc, #164]	@ (80025b4 <HAL_ADC_Start+0x19c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d105      	bne.n	800251e <HAL_ADC_Start+0x106>
 8002512:	4b26      	ldr	r3, [pc, #152]	@ (80025ac <HAL_ADC_Start+0x194>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f003 031f 	and.w	r3, r3, #31
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a25      	ldr	r2, [pc, #148]	@ (80025b8 <HAL_ADC_Start+0x1a0>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d136      	bne.n	8002596 <HAL_ADC_Start+0x17e>
 8002528:	4b20      	ldr	r3, [pc, #128]	@ (80025ac <HAL_ADC_Start+0x194>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0310 	and.w	r3, r3, #16
 8002530:	2b00      	cmp	r3, #0
 8002532:	d130      	bne.n	8002596 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d129      	bne.n	8002596 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002550:	609a      	str	r2, [r3, #8]
 8002552:	e020      	b.n	8002596 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a15      	ldr	r2, [pc, #84]	@ (80025b0 <HAL_ADC_Start+0x198>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d11b      	bne.n	8002596 <HAL_ADC_Start+0x17e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d114      	bne.n	8002596 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800257a:	609a      	str	r2, [r3, #8]
 800257c:	e00b      	b.n	8002596 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002582:	f043 0210 	orr.w	r2, r3, #16
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258e:	f043 0201 	orr.w	r2, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	2000000c 	.word	0x2000000c
 80025a8:	431bde83 	.word	0x431bde83
 80025ac:	40012300 	.word	0x40012300
 80025b0:	40012000 	.word	0x40012000
 80025b4:	40012100 	.word	0x40012100
 80025b8:	40012200 	.word	0x40012200

080025bc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025d8:	d113      	bne.n	8002602 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80025e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025e8:	d10b      	bne.n	8002602 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ee:	f043 0220 	orr.w	r2, r3, #32
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e063      	b.n	80026ca <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002602:	f7ff fe95 	bl	8002330 <HAL_GetTick>
 8002606:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002608:	e021      	b.n	800264e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002610:	d01d      	beq.n	800264e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d007      	beq.n	8002628 <HAL_ADC_PollForConversion+0x6c>
 8002618:	f7ff fe8a 	bl	8002330 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d212      	bcs.n	800264e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b02      	cmp	r3, #2
 8002634:	d00b      	beq.n	800264e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263a:	f043 0204 	orr.w	r2, r3, #4
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e03d      	b.n	80026ca <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b02      	cmp	r3, #2
 800265a:	d1d6      	bne.n	800260a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0212 	mvn.w	r2, #18
 8002664:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d123      	bne.n	80026c8 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002684:	2b00      	cmp	r3, #0
 8002686:	d11f      	bne.n	80026c8 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002692:	2b00      	cmp	r3, #0
 8002694:	d006      	beq.n	80026a4 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d111      	bne.n	80026c8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d105      	bne.n	80026c8 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c0:	f043 0201 	orr.w	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80026f6:	2300      	movs	r3, #0
 80026f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002700:	2b01      	cmp	r3, #1
 8002702:	d101      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x1c>
 8002704:	2302      	movs	r3, #2
 8002706:	e105      	b.n	8002914 <HAL_ADC_ConfigChannel+0x228>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b09      	cmp	r3, #9
 8002716:	d925      	bls.n	8002764 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68d9      	ldr	r1, [r3, #12]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	b29b      	uxth	r3, r3
 8002724:	461a      	mov	r2, r3
 8002726:	4613      	mov	r3, r2
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	4413      	add	r3, r2
 800272c:	3b1e      	subs	r3, #30
 800272e:	2207      	movs	r2, #7
 8002730:	fa02 f303 	lsl.w	r3, r2, r3
 8002734:	43da      	mvns	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	400a      	ands	r2, r1
 800273c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68d9      	ldr	r1, [r3, #12]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	b29b      	uxth	r3, r3
 800274e:	4618      	mov	r0, r3
 8002750:	4603      	mov	r3, r0
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	4403      	add	r3, r0
 8002756:	3b1e      	subs	r3, #30
 8002758:	409a      	lsls	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	60da      	str	r2, [r3, #12]
 8002762:	e022      	b.n	80027aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	6919      	ldr	r1, [r3, #16]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	b29b      	uxth	r3, r3
 8002770:	461a      	mov	r2, r3
 8002772:	4613      	mov	r3, r2
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	4413      	add	r3, r2
 8002778:	2207      	movs	r2, #7
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	43da      	mvns	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	400a      	ands	r2, r1
 8002786:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6919      	ldr	r1, [r3, #16]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	b29b      	uxth	r3, r3
 8002798:	4618      	mov	r0, r3
 800279a:	4603      	mov	r3, r0
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	4403      	add	r3, r0
 80027a0:	409a      	lsls	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	2b06      	cmp	r3, #6
 80027b0:	d824      	bhi.n	80027fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	3b05      	subs	r3, #5
 80027c4:	221f      	movs	r2, #31
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43da      	mvns	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	400a      	ands	r2, r1
 80027d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	4618      	mov	r0, r3
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	3b05      	subs	r3, #5
 80027ee:	fa00 f203 	lsl.w	r2, r0, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	635a      	str	r2, [r3, #52]	@ 0x34
 80027fa:	e04c      	b.n	8002896 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b0c      	cmp	r3, #12
 8002802:	d824      	bhi.n	800284e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685a      	ldr	r2, [r3, #4]
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	3b23      	subs	r3, #35	@ 0x23
 8002816:	221f      	movs	r2, #31
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43da      	mvns	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	400a      	ands	r2, r1
 8002824:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	b29b      	uxth	r3, r3
 8002832:	4618      	mov	r0, r3
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685a      	ldr	r2, [r3, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	3b23      	subs	r3, #35	@ 0x23
 8002840:	fa00 f203 	lsl.w	r2, r0, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	430a      	orrs	r2, r1
 800284a:	631a      	str	r2, [r3, #48]	@ 0x30
 800284c:	e023      	b.n	8002896 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	3b41      	subs	r3, #65	@ 0x41
 8002860:	221f      	movs	r2, #31
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43da      	mvns	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	400a      	ands	r2, r1
 800286e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	b29b      	uxth	r3, r3
 800287c:	4618      	mov	r0, r3
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	4613      	mov	r3, r2
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	3b41      	subs	r3, #65	@ 0x41
 800288a:	fa00 f203 	lsl.w	r2, r0, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002896:	4b22      	ldr	r3, [pc, #136]	@ (8002920 <HAL_ADC_ConfigChannel+0x234>)
 8002898:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a21      	ldr	r2, [pc, #132]	@ (8002924 <HAL_ADC_ConfigChannel+0x238>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d109      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x1cc>
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b12      	cmp	r3, #18
 80028aa:	d105      	bne.n	80028b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a19      	ldr	r2, [pc, #100]	@ (8002924 <HAL_ADC_ConfigChannel+0x238>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d123      	bne.n	800290a <HAL_ADC_ConfigChannel+0x21e>
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b10      	cmp	r3, #16
 80028c8:	d003      	beq.n	80028d2 <HAL_ADC_ConfigChannel+0x1e6>
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2b11      	cmp	r3, #17
 80028d0:	d11b      	bne.n	800290a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b10      	cmp	r3, #16
 80028e4:	d111      	bne.n	800290a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028e6:	4b10      	ldr	r3, [pc, #64]	@ (8002928 <HAL_ADC_ConfigChannel+0x23c>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a10      	ldr	r2, [pc, #64]	@ (800292c <HAL_ADC_ConfigChannel+0x240>)
 80028ec:	fba2 2303 	umull	r2, r3, r2, r3
 80028f0:	0c9a      	lsrs	r2, r3, #18
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80028fc:	e002      	b.n	8002904 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	3b01      	subs	r3, #1
 8002902:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f9      	bne.n	80028fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2200      	movs	r2, #0
 800290e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
}
 8002914:	4618      	mov	r0, r3
 8002916:	3714      	adds	r7, #20
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	40012300 	.word	0x40012300
 8002924:	40012000 	.word	0x40012000
 8002928:	2000000c 	.word	0x2000000c
 800292c:	431bde83 	.word	0x431bde83

08002930 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002938:	4b79      	ldr	r3, [pc, #484]	@ (8002b20 <ADC_Init+0x1f0>)
 800293a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	431a      	orrs	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002964:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6859      	ldr	r1, [r3, #4]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	021a      	lsls	r2, r3, #8
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002988:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6859      	ldr	r1, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689a      	ldr	r2, [r3, #8]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	689a      	ldr	r2, [r3, #8]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6899      	ldr	r1, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c2:	4a58      	ldr	r2, [pc, #352]	@ (8002b24 <ADC_Init+0x1f4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d022      	beq.n	8002a0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80029d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6899      	ldr	r1, [r3, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	430a      	orrs	r2, r1
 80029e8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80029f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6899      	ldr	r1, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	e00f      	b.n	8002a2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002a2c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f022 0202 	bic.w	r2, r2, #2
 8002a3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6899      	ldr	r1, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	7e1b      	ldrb	r3, [r3, #24]
 8002a48:	005a      	lsls	r2, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d01b      	beq.n	8002a94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	685a      	ldr	r2, [r3, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a6a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002a7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6859      	ldr	r1, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a86:	3b01      	subs	r3, #1
 8002a88:	035a      	lsls	r2, r3, #13
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	e007      	b.n	8002aa4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002aa2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002ab2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	051a      	lsls	r2, r3, #20
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ad8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6899      	ldr	r1, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ae6:	025a      	lsls	r2, r3, #9
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	430a      	orrs	r2, r1
 8002aee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689a      	ldr	r2, [r3, #8]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002afe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6899      	ldr	r1, [r3, #8]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	029a      	lsls	r2, r3, #10
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	609a      	str	r2, [r3, #8]
}
 8002b14:	bf00      	nop
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	40012300 	.word	0x40012300
 8002b24:	0f000001 	.word	0x0f000001

08002b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b085      	sub	sp, #20
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	f003 0307 	and.w	r3, r3, #7
 8002b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b38:	4b0c      	ldr	r3, [pc, #48]	@ (8002b6c <__NVIC_SetPriorityGrouping+0x44>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b44:	4013      	ands	r3, r2
 8002b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b5a:	4a04      	ldr	r2, [pc, #16]	@ (8002b6c <__NVIC_SetPriorityGrouping+0x44>)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	60d3      	str	r3, [r2, #12]
}
 8002b60:	bf00      	nop
 8002b62:	3714      	adds	r7, #20
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr
 8002b6c:	e000ed00 	.word	0xe000ed00

08002b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b74:	4b04      	ldr	r3, [pc, #16]	@ (8002b88 <__NVIC_GetPriorityGrouping+0x18>)
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	0a1b      	lsrs	r3, r3, #8
 8002b7a:	f003 0307 	and.w	r3, r3, #7
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	db0b      	blt.n	8002bb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	f003 021f 	and.w	r2, r3, #31
 8002ba4:	4907      	ldr	r1, [pc, #28]	@ (8002bc4 <__NVIC_EnableIRQ+0x38>)
 8002ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	2001      	movs	r0, #1
 8002bae:	fa00 f202 	lsl.w	r2, r0, r2
 8002bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bb6:	bf00      	nop
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	e000e100 	.word	0xe000e100

08002bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	4603      	mov	r3, r0
 8002bd0:	6039      	str	r1, [r7, #0]
 8002bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	db0a      	blt.n	8002bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	490c      	ldr	r1, [pc, #48]	@ (8002c14 <__NVIC_SetPriority+0x4c>)
 8002be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be6:	0112      	lsls	r2, r2, #4
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	440b      	add	r3, r1
 8002bec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bf0:	e00a      	b.n	8002c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	4908      	ldr	r1, [pc, #32]	@ (8002c18 <__NVIC_SetPriority+0x50>)
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	3b04      	subs	r3, #4
 8002c00:	0112      	lsls	r2, r2, #4
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	440b      	add	r3, r1
 8002c06:	761a      	strb	r2, [r3, #24]
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	e000e100 	.word	0xe000e100
 8002c18:	e000ed00 	.word	0xe000ed00

08002c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b089      	sub	sp, #36	@ 0x24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	f1c3 0307 	rsb	r3, r3, #7
 8002c36:	2b04      	cmp	r3, #4
 8002c38:	bf28      	it	cs
 8002c3a:	2304      	movcs	r3, #4
 8002c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	3304      	adds	r3, #4
 8002c42:	2b06      	cmp	r3, #6
 8002c44:	d902      	bls.n	8002c4c <NVIC_EncodePriority+0x30>
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	3b03      	subs	r3, #3
 8002c4a:	e000      	b.n	8002c4e <NVIC_EncodePriority+0x32>
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	43da      	mvns	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	401a      	ands	r2, r3
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6e:	43d9      	mvns	r1, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c74:	4313      	orrs	r3, r2
         );
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3724      	adds	r7, #36	@ 0x24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c94:	d301      	bcc.n	8002c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c96:	2301      	movs	r3, #1
 8002c98:	e00f      	b.n	8002cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc4 <SysTick_Config+0x40>)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ca2:	210f      	movs	r1, #15
 8002ca4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ca8:	f7ff ff8e 	bl	8002bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cac:	4b05      	ldr	r3, [pc, #20]	@ (8002cc4 <SysTick_Config+0x40>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cb2:	4b04      	ldr	r3, [pc, #16]	@ (8002cc4 <SysTick_Config+0x40>)
 8002cb4:	2207      	movs	r2, #7
 8002cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	e000e010 	.word	0xe000e010

08002cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff ff29 	bl	8002b28 <__NVIC_SetPriorityGrouping>
}
 8002cd6:	bf00      	nop
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b086      	sub	sp, #24
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	60b9      	str	r1, [r7, #8]
 8002ce8:	607a      	str	r2, [r7, #4]
 8002cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cf0:	f7ff ff3e 	bl	8002b70 <__NVIC_GetPriorityGrouping>
 8002cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	68b9      	ldr	r1, [r7, #8]
 8002cfa:	6978      	ldr	r0, [r7, #20]
 8002cfc:	f7ff ff8e 	bl	8002c1c <NVIC_EncodePriority>
 8002d00:	4602      	mov	r2, r0
 8002d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d06:	4611      	mov	r1, r2
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7ff ff5d 	bl	8002bc8 <__NVIC_SetPriority>
}
 8002d0e:	bf00      	nop
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7ff ff31 	bl	8002b8c <__NVIC_EnableIRQ>
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7ff ffa2 	bl	8002c84 <SysTick_Config>
 8002d40:	4603      	mov	r3, r0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b089      	sub	sp, #36	@ 0x24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d62:	2300      	movs	r3, #0
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	e16b      	b.n	8003040 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d68:	2201      	movs	r2, #1
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	4013      	ands	r3, r2
 8002d7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	f040 815a 	bne.w	800303a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d005      	beq.n	8002d9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d130      	bne.n	8002e00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	2203      	movs	r2, #3
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4013      	ands	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	68da      	ldr	r2, [r3, #12]
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ddc:	43db      	mvns	r3, r3
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4013      	ands	r3, r2
 8002de2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	091b      	lsrs	r3, r3, #4
 8002dea:	f003 0201 	and.w	r2, r3, #1
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d017      	beq.n	8002e3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	2203      	movs	r2, #3
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f003 0303 	and.w	r3, r3, #3
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d123      	bne.n	8002e90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	08da      	lsrs	r2, r3, #3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	3208      	adds	r2, #8
 8002e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	220f      	movs	r2, #15
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	69ba      	ldr	r2, [r7, #24]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	f003 0307 	and.w	r3, r3, #7
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	08da      	lsrs	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	3208      	adds	r2, #8
 8002e8a:	69b9      	ldr	r1, [r7, #24]
 8002e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0203 	and.w	r2, r3, #3
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	005b      	lsls	r3, r3, #1
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	69ba      	ldr	r2, [r7, #24]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80b4 	beq.w	800303a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	4b60      	ldr	r3, [pc, #384]	@ (8003058 <HAL_GPIO_Init+0x30c>)
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eda:	4a5f      	ldr	r2, [pc, #380]	@ (8003058 <HAL_GPIO_Init+0x30c>)
 8002edc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ee0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ee2:	4b5d      	ldr	r3, [pc, #372]	@ (8003058 <HAL_GPIO_Init+0x30c>)
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002eea:	60fb      	str	r3, [r7, #12]
 8002eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eee:	4a5b      	ldr	r2, [pc, #364]	@ (800305c <HAL_GPIO_Init+0x310>)
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	089b      	lsrs	r3, r3, #2
 8002ef4:	3302      	adds	r3, #2
 8002ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	220f      	movs	r2, #15
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a52      	ldr	r2, [pc, #328]	@ (8003060 <HAL_GPIO_Init+0x314>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d02b      	beq.n	8002f72 <HAL_GPIO_Init+0x226>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a51      	ldr	r2, [pc, #324]	@ (8003064 <HAL_GPIO_Init+0x318>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d025      	beq.n	8002f6e <HAL_GPIO_Init+0x222>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a50      	ldr	r2, [pc, #320]	@ (8003068 <HAL_GPIO_Init+0x31c>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d01f      	beq.n	8002f6a <HAL_GPIO_Init+0x21e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a4f      	ldr	r2, [pc, #316]	@ (800306c <HAL_GPIO_Init+0x320>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d019      	beq.n	8002f66 <HAL_GPIO_Init+0x21a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a4e      	ldr	r2, [pc, #312]	@ (8003070 <HAL_GPIO_Init+0x324>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d013      	beq.n	8002f62 <HAL_GPIO_Init+0x216>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a4d      	ldr	r2, [pc, #308]	@ (8003074 <HAL_GPIO_Init+0x328>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00d      	beq.n	8002f5e <HAL_GPIO_Init+0x212>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a4c      	ldr	r2, [pc, #304]	@ (8003078 <HAL_GPIO_Init+0x32c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d007      	beq.n	8002f5a <HAL_GPIO_Init+0x20e>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a4b      	ldr	r2, [pc, #300]	@ (800307c <HAL_GPIO_Init+0x330>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d101      	bne.n	8002f56 <HAL_GPIO_Init+0x20a>
 8002f52:	2307      	movs	r3, #7
 8002f54:	e00e      	b.n	8002f74 <HAL_GPIO_Init+0x228>
 8002f56:	2308      	movs	r3, #8
 8002f58:	e00c      	b.n	8002f74 <HAL_GPIO_Init+0x228>
 8002f5a:	2306      	movs	r3, #6
 8002f5c:	e00a      	b.n	8002f74 <HAL_GPIO_Init+0x228>
 8002f5e:	2305      	movs	r3, #5
 8002f60:	e008      	b.n	8002f74 <HAL_GPIO_Init+0x228>
 8002f62:	2304      	movs	r3, #4
 8002f64:	e006      	b.n	8002f74 <HAL_GPIO_Init+0x228>
 8002f66:	2303      	movs	r3, #3
 8002f68:	e004      	b.n	8002f74 <HAL_GPIO_Init+0x228>
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	e002      	b.n	8002f74 <HAL_GPIO_Init+0x228>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e000      	b.n	8002f74 <HAL_GPIO_Init+0x228>
 8002f72:	2300      	movs	r3, #0
 8002f74:	69fa      	ldr	r2, [r7, #28]
 8002f76:	f002 0203 	and.w	r2, r2, #3
 8002f7a:	0092      	lsls	r2, r2, #2
 8002f7c:	4093      	lsls	r3, r2
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f84:	4935      	ldr	r1, [pc, #212]	@ (800305c <HAL_GPIO_Init+0x310>)
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	089b      	lsrs	r3, r3, #2
 8002f8a:	3302      	adds	r3, #2
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f92:	4b3b      	ldr	r3, [pc, #236]	@ (8003080 <HAL_GPIO_Init+0x334>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fb6:	4a32      	ldr	r2, [pc, #200]	@ (8003080 <HAL_GPIO_Init+0x334>)
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fbc:	4b30      	ldr	r3, [pc, #192]	@ (8003080 <HAL_GPIO_Init+0x334>)
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d003      	beq.n	8002fe0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fe0:	4a27      	ldr	r2, [pc, #156]	@ (8003080 <HAL_GPIO_Init+0x334>)
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fe6:	4b26      	ldr	r3, [pc, #152]	@ (8003080 <HAL_GPIO_Init+0x334>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800300a:	4a1d      	ldr	r2, [pc, #116]	@ (8003080 <HAL_GPIO_Init+0x334>)
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003010:	4b1b      	ldr	r3, [pc, #108]	@ (8003080 <HAL_GPIO_Init+0x334>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003034:	4a12      	ldr	r2, [pc, #72]	@ (8003080 <HAL_GPIO_Init+0x334>)
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	3301      	adds	r3, #1
 800303e:	61fb      	str	r3, [r7, #28]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	2b0f      	cmp	r3, #15
 8003044:	f67f ae90 	bls.w	8002d68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003048:	bf00      	nop
 800304a:	bf00      	nop
 800304c:	3724      	adds	r7, #36	@ 0x24
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40023800 	.word	0x40023800
 800305c:	40013800 	.word	0x40013800
 8003060:	40020000 	.word	0x40020000
 8003064:	40020400 	.word	0x40020400
 8003068:	40020800 	.word	0x40020800
 800306c:	40020c00 	.word	0x40020c00
 8003070:	40021000 	.word	0x40021000
 8003074:	40021400 	.word	0x40021400
 8003078:	40021800 	.word	0x40021800
 800307c:	40021c00 	.word	0x40021c00
 8003080:	40013c00 	.word	0x40013c00

08003084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
 800308c:	460b      	mov	r3, r1
 800308e:	807b      	strh	r3, [r7, #2]
 8003090:	4613      	mov	r3, r2
 8003092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003094:	787b      	ldrb	r3, [r7, #1]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800309a:	887a      	ldrh	r2, [r7, #2]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030a0:	e003      	b.n	80030aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030a2:	887b      	ldrh	r3, [r7, #2]
 80030a4:	041a      	lsls	r2, r3, #16
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	619a      	str	r2, [r3, #24]
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr
	...

080030b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d101      	bne.n	80030ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e12b      	b.n	8003322 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d106      	bne.n	80030e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7fe fdca 	bl	8001c78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2224      	movs	r2, #36	@ 0x24
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0201 	bic.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800310a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800311a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800311c:	f001 ffd2 	bl	80050c4 <HAL_RCC_GetPCLK1Freq>
 8003120:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	4a81      	ldr	r2, [pc, #516]	@ (800332c <HAL_I2C_Init+0x274>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d807      	bhi.n	800313c <HAL_I2C_Init+0x84>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4a80      	ldr	r2, [pc, #512]	@ (8003330 <HAL_I2C_Init+0x278>)
 8003130:	4293      	cmp	r3, r2
 8003132:	bf94      	ite	ls
 8003134:	2301      	movls	r3, #1
 8003136:	2300      	movhi	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	e006      	b.n	800314a <HAL_I2C_Init+0x92>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4a7d      	ldr	r2, [pc, #500]	@ (8003334 <HAL_I2C_Init+0x27c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	bf94      	ite	ls
 8003144:	2301      	movls	r3, #1
 8003146:	2300      	movhi	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e0e7      	b.n	8003322 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	4a78      	ldr	r2, [pc, #480]	@ (8003338 <HAL_I2C_Init+0x280>)
 8003156:	fba2 2303 	umull	r2, r3, r2, r3
 800315a:	0c9b      	lsrs	r3, r3, #18
 800315c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	4a6a      	ldr	r2, [pc, #424]	@ (800332c <HAL_I2C_Init+0x274>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d802      	bhi.n	800318c <HAL_I2C_Init+0xd4>
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	3301      	adds	r3, #1
 800318a:	e009      	b.n	80031a0 <HAL_I2C_Init+0xe8>
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003192:	fb02 f303 	mul.w	r3, r2, r3
 8003196:	4a69      	ldr	r2, [pc, #420]	@ (800333c <HAL_I2C_Init+0x284>)
 8003198:	fba2 2303 	umull	r2, r3, r2, r3
 800319c:	099b      	lsrs	r3, r3, #6
 800319e:	3301      	adds	r3, #1
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	6812      	ldr	r2, [r2, #0]
 80031a4:	430b      	orrs	r3, r1
 80031a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80031b2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	495c      	ldr	r1, [pc, #368]	@ (800332c <HAL_I2C_Init+0x274>)
 80031bc:	428b      	cmp	r3, r1
 80031be:	d819      	bhi.n	80031f4 <HAL_I2C_Init+0x13c>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	1e59      	subs	r1, r3, #1
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80031ce:	1c59      	adds	r1, r3, #1
 80031d0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80031d4:	400b      	ands	r3, r1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00a      	beq.n	80031f0 <HAL_I2C_Init+0x138>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	1e59      	subs	r1, r3, #1
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80031e8:	3301      	adds	r3, #1
 80031ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031ee:	e051      	b.n	8003294 <HAL_I2C_Init+0x1dc>
 80031f0:	2304      	movs	r3, #4
 80031f2:	e04f      	b.n	8003294 <HAL_I2C_Init+0x1dc>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d111      	bne.n	8003220 <HAL_I2C_Init+0x168>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	1e58      	subs	r0, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6859      	ldr	r1, [r3, #4]
 8003204:	460b      	mov	r3, r1
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	440b      	add	r3, r1
 800320a:	fbb0 f3f3 	udiv	r3, r0, r3
 800320e:	3301      	adds	r3, #1
 8003210:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003214:	2b00      	cmp	r3, #0
 8003216:	bf0c      	ite	eq
 8003218:	2301      	moveq	r3, #1
 800321a:	2300      	movne	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	e012      	b.n	8003246 <HAL_I2C_Init+0x18e>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	1e58      	subs	r0, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6859      	ldr	r1, [r3, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	0099      	lsls	r1, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	fbb0 f3f3 	udiv	r3, r0, r3
 8003236:	3301      	adds	r3, #1
 8003238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323c:	2b00      	cmp	r3, #0
 800323e:	bf0c      	ite	eq
 8003240:	2301      	moveq	r3, #1
 8003242:	2300      	movne	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d001      	beq.n	800324e <HAL_I2C_Init+0x196>
 800324a:	2301      	movs	r3, #1
 800324c:	e022      	b.n	8003294 <HAL_I2C_Init+0x1dc>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10e      	bne.n	8003274 <HAL_I2C_Init+0x1bc>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	1e58      	subs	r0, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6859      	ldr	r1, [r3, #4]
 800325e:	460b      	mov	r3, r1
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	440b      	add	r3, r1
 8003264:	fbb0 f3f3 	udiv	r3, r0, r3
 8003268:	3301      	adds	r3, #1
 800326a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800326e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003272:	e00f      	b.n	8003294 <HAL_I2C_Init+0x1dc>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	1e58      	subs	r0, r3, #1
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6859      	ldr	r1, [r3, #4]
 800327c:	460b      	mov	r3, r1
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	0099      	lsls	r1, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	fbb0 f3f3 	udiv	r3, r0, r3
 800328a:	3301      	adds	r3, #1
 800328c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003290:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	6809      	ldr	r1, [r1, #0]
 8003298:	4313      	orrs	r3, r2
 800329a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	69da      	ldr	r2, [r3, #28]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	431a      	orrs	r2, r3
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	430a      	orrs	r2, r1
 80032b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80032c2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6911      	ldr	r1, [r2, #16]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	68d2      	ldr	r2, [r2, #12]
 80032ce:	4311      	orrs	r1, r2
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6812      	ldr	r2, [r2, #0]
 80032d4:	430b      	orrs	r3, r1
 80032d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695a      	ldr	r2, [r3, #20]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	431a      	orrs	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	430a      	orrs	r2, r1
 80032f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f042 0201 	orr.w	r2, r2, #1
 8003302:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2220      	movs	r2, #32
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	000186a0 	.word	0x000186a0
 8003330:	001e847f 	.word	0x001e847f
 8003334:	003d08ff 	.word	0x003d08ff
 8003338:	431bde83 	.word	0x431bde83
 800333c:	10624dd3 	.word	0x10624dd3

08003340 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af02      	add	r7, sp, #8
 8003346:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e101      	b.n	8003556 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b00      	cmp	r3, #0
 8003362:	d106      	bne.n	8003372 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f006 fc6f 	bl	8009c50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2203      	movs	r2, #3
 8003376:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003380:	d102      	bne.n	8003388 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4618      	mov	r0, r3
 800338e:	f003 f8bc 	bl	800650a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6818      	ldr	r0, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	7c1a      	ldrb	r2, [r3, #16]
 800339a:	f88d 2000 	strb.w	r2, [sp]
 800339e:	3304      	adds	r3, #4
 80033a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033a2:	f002 ff9b 	bl	80062dc <USB_CoreInit>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d005      	beq.n	80033b8 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0ce      	b.n	8003556 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2100      	movs	r1, #0
 80033be:	4618      	mov	r0, r3
 80033c0:	f003 f8b4 	bl	800652c <USB_SetCurrentMode>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d005      	beq.n	80033d6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2202      	movs	r2, #2
 80033ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e0bf      	b.n	8003556 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033d6:	2300      	movs	r3, #0
 80033d8:	73fb      	strb	r3, [r7, #15]
 80033da:	e04a      	b.n	8003472 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80033dc:	7bfa      	ldrb	r2, [r7, #15]
 80033de:	6879      	ldr	r1, [r7, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4413      	add	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	3315      	adds	r3, #21
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80033f0:	7bfa      	ldrb	r2, [r7, #15]
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	00db      	lsls	r3, r3, #3
 80033f8:	4413      	add	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	3314      	adds	r3, #20
 8003400:	7bfa      	ldrb	r2, [r7, #15]
 8003402:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003404:	7bfa      	ldrb	r2, [r7, #15]
 8003406:	7bfb      	ldrb	r3, [r7, #15]
 8003408:	b298      	uxth	r0, r3
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	4613      	mov	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	4413      	add	r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	332e      	adds	r3, #46	@ 0x2e
 8003418:	4602      	mov	r2, r0
 800341a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800341c:	7bfa      	ldrb	r2, [r7, #15]
 800341e:	6879      	ldr	r1, [r7, #4]
 8003420:	4613      	mov	r3, r2
 8003422:	00db      	lsls	r3, r3, #3
 8003424:	4413      	add	r3, r2
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	440b      	add	r3, r1
 800342a:	3318      	adds	r3, #24
 800342c:	2200      	movs	r2, #0
 800342e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003430:	7bfa      	ldrb	r2, [r7, #15]
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4613      	mov	r3, r2
 8003436:	00db      	lsls	r3, r3, #3
 8003438:	4413      	add	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	331c      	adds	r3, #28
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003444:	7bfa      	ldrb	r2, [r7, #15]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	3320      	adds	r3, #32
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003458:	7bfa      	ldrb	r2, [r7, #15]
 800345a:	6879      	ldr	r1, [r7, #4]
 800345c:	4613      	mov	r3, r2
 800345e:	00db      	lsls	r3, r3, #3
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	440b      	add	r3, r1
 8003466:	3324      	adds	r3, #36	@ 0x24
 8003468:	2200      	movs	r2, #0
 800346a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800346c:	7bfb      	ldrb	r3, [r7, #15]
 800346e:	3301      	adds	r3, #1
 8003470:	73fb      	strb	r3, [r7, #15]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	791b      	ldrb	r3, [r3, #4]
 8003476:	7bfa      	ldrb	r2, [r7, #15]
 8003478:	429a      	cmp	r2, r3
 800347a:	d3af      	bcc.n	80033dc <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800347c:	2300      	movs	r3, #0
 800347e:	73fb      	strb	r3, [r7, #15]
 8003480:	e044      	b.n	800350c <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003482:	7bfa      	ldrb	r2, [r7, #15]
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	4413      	add	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003494:	2200      	movs	r2, #0
 8003496:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003498:	7bfa      	ldrb	r2, [r7, #15]
 800349a:	6879      	ldr	r1, [r7, #4]
 800349c:	4613      	mov	r3, r2
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	4413      	add	r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80034aa:	7bfa      	ldrb	r2, [r7, #15]
 80034ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80034ae:	7bfa      	ldrb	r2, [r7, #15]
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	440b      	add	r3, r1
 80034bc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80034c0:	2200      	movs	r2, #0
 80034c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80034c4:	7bfa      	ldrb	r2, [r7, #15]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4413      	add	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80034da:	7bfa      	ldrb	r2, [r7, #15]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80034f0:	7bfa      	ldrb	r2, [r7, #15]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003502:	2200      	movs	r2, #0
 8003504:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003506:	7bfb      	ldrb	r3, [r7, #15]
 8003508:	3301      	adds	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	791b      	ldrb	r3, [r3, #4]
 8003510:	7bfa      	ldrb	r2, [r7, #15]
 8003512:	429a      	cmp	r2, r3
 8003514:	d3b5      	bcc.n	8003482 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6818      	ldr	r0, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	7c1a      	ldrb	r2, [r3, #16]
 800351e:	f88d 2000 	strb.w	r2, [sp]
 8003522:	3304      	adds	r3, #4
 8003524:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003526:	f003 f84d 	bl	80065c4 <USB_DevInit>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2202      	movs	r2, #2
 8003534:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e00c      	b.n	8003556 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f004 f897 	bl	8007682 <USB_DevDisconnect>

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003572:	2b01      	cmp	r3, #1
 8003574:	d101      	bne.n	800357a <HAL_PCD_Start+0x1c>
 8003576:	2302      	movs	r3, #2
 8003578:	e022      	b.n	80035c0 <HAL_PCD_Start+0x62>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800358a:	2b00      	cmp	r3, #0
 800358c:	d009      	beq.n	80035a2 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003592:	2b01      	cmp	r3, #1
 8003594:	d105      	bne.n	80035a2 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800359a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4618      	mov	r0, r3
 80035a8:	f002 ff9e 	bl	80064e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f004 f845 	bl	8007640 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80035c8:	b590      	push	{r4, r7, lr}
 80035ca:	b08d      	sub	sp, #52	@ 0x34
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4618      	mov	r0, r3
 80035e0:	f004 f903 	bl	80077ea <USB_GetMode>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	f040 848c 	bne.w	8003f04 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f004 f867 	bl	80076c4 <USB_ReadInterrupts>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 8482 	beq.w	8003f02 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	0a1b      	lsrs	r3, r3, #8
 8003608:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f004 f854 	bl	80076c4 <USB_ReadInterrupts>
 800361c:	4603      	mov	r3, r0
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b02      	cmp	r3, #2
 8003624:	d107      	bne.n	8003636 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	695a      	ldr	r2, [r3, #20]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f002 0202 	and.w	r2, r2, #2
 8003634:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f004 f842 	bl	80076c4 <USB_ReadInterrupts>
 8003640:	4603      	mov	r3, r0
 8003642:	f003 0310 	and.w	r3, r3, #16
 8003646:	2b10      	cmp	r3, #16
 8003648:	d161      	bne.n	800370e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699a      	ldr	r2, [r3, #24]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0210 	bic.w	r2, r2, #16
 8003658:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800365a:	6a3b      	ldr	r3, [r7, #32]
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	f003 020f 	and.w	r2, r3, #15
 8003666:	4613      	mov	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4413      	add	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	4413      	add	r3, r2
 8003676:	3304      	adds	r3, #4
 8003678:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	0c5b      	lsrs	r3, r3, #17
 800367e:	f003 030f 	and.w	r3, r3, #15
 8003682:	2b02      	cmp	r3, #2
 8003684:	d124      	bne.n	80036d0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003686:	69ba      	ldr	r2, [r7, #24]
 8003688:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800368c:	4013      	ands	r3, r2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d035      	beq.n	80036fe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	091b      	lsrs	r3, r3, #4
 800369a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800369c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	6a38      	ldr	r0, [r7, #32]
 80036a6:	f003 fe79 	bl	800739c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	091b      	lsrs	r3, r3, #4
 80036b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036b6:	441a      	add	r2, r3
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	695a      	ldr	r2, [r3, #20]
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	091b      	lsrs	r3, r3, #4
 80036c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036c8:	441a      	add	r2, r3
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	615a      	str	r2, [r3, #20]
 80036ce:	e016      	b.n	80036fe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	0c5b      	lsrs	r3, r3, #17
 80036d4:	f003 030f 	and.w	r3, r3, #15
 80036d8:	2b06      	cmp	r3, #6
 80036da:	d110      	bne.n	80036fe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036e2:	2208      	movs	r2, #8
 80036e4:	4619      	mov	r1, r3
 80036e6:	6a38      	ldr	r0, [r7, #32]
 80036e8:	f003 fe58 	bl	800739c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	695a      	ldr	r2, [r3, #20]
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	091b      	lsrs	r3, r3, #4
 80036f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036f8:	441a      	add	r2, r3
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699a      	ldr	r2, [r3, #24]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f042 0210 	orr.w	r2, r2, #16
 800370c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f003 ffd6 	bl	80076c4 <USB_ReadInterrupts>
 8003718:	4603      	mov	r3, r0
 800371a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800371e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003722:	f040 80a7 	bne.w	8003874 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003726:	2300      	movs	r3, #0
 8003728:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f003 ffdb 	bl	80076ea <USB_ReadDevAllOutEpInterrupt>
 8003734:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003736:	e099      	b.n	800386c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 808e 	beq.w	8003860 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	4611      	mov	r1, r2
 800374e:	4618      	mov	r0, r3
 8003750:	f003 ffff 	bl	8007752 <USB_ReadDevOutEPInterrupt>
 8003754:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	f003 0301 	and.w	r3, r3, #1
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00c      	beq.n	800377a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	4413      	add	r3, r2
 8003768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800376c:	461a      	mov	r2, r3
 800376e:	2301      	movs	r3, #1
 8003770:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003772:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fea3 	bl	80044c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00c      	beq.n	800379e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	4413      	add	r3, r2
 800378c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003790:	461a      	mov	r2, r3
 8003792:	2308      	movs	r3, #8
 8003794:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003796:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 ff79 	bl	8004690 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f003 0310 	and.w	r3, r3, #16
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80037a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037b4:	461a      	mov	r2, r3
 80037b6:	2310      	movs	r3, #16
 80037b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d030      	beq.n	8003826 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037cc:	2b80      	cmp	r3, #128	@ 0x80
 80037ce:	d109      	bne.n	80037e4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	69fa      	ldr	r2, [r7, #28]
 80037da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037e2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80037e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037e6:	4613      	mov	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	4413      	add	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	4413      	add	r3, r2
 80037f6:	3304      	adds	r3, #4
 80037f8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	78db      	ldrb	r3, [r3, #3]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d108      	bne.n	8003814 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	2200      	movs	r2, #0
 8003806:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800380a:	b2db      	uxtb	r3, r3
 800380c:	4619      	mov	r1, r3
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f006 fb24 	bl	8009e5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003820:	461a      	mov	r2, r3
 8003822:	2302      	movs	r3, #2
 8003824:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	f003 0320 	and.w	r3, r3, #32
 800382c:	2b00      	cmp	r3, #0
 800382e:	d008      	beq.n	8003842 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003832:	015a      	lsls	r2, r3, #5
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	4413      	add	r3, r2
 8003838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800383c:	461a      	mov	r2, r3
 800383e:	2320      	movs	r3, #32
 8003840:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d009      	beq.n	8003860 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800384c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384e:	015a      	lsls	r2, r3, #5
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	4413      	add	r3, r2
 8003854:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003858:	461a      	mov	r2, r3
 800385a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800385e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003862:	3301      	adds	r3, #1
 8003864:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003868:	085b      	lsrs	r3, r3, #1
 800386a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800386c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800386e:	2b00      	cmp	r3, #0
 8003870:	f47f af62 	bne.w	8003738 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f003 ff23 	bl	80076c4 <USB_ReadInterrupts>
 800387e:	4603      	mov	r3, r0
 8003880:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003884:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003888:	f040 80db 	bne.w	8003a42 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f003 ff44 	bl	800771e <USB_ReadDevAllInEpInterrupt>
 8003896:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800389c:	e0cd      	b.n	8003a3a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800389e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 80c2 	beq.w	8003a2e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b0:	b2d2      	uxtb	r2, r2
 80038b2:	4611      	mov	r1, r2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f003 ff6a 	bl	800778e <USB_ReadDevInEPInterrupt>
 80038ba:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d057      	beq.n	8003976 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c8:	f003 030f 	and.w	r3, r3, #15
 80038cc:	2201      	movs	r2, #1
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	43db      	mvns	r3, r3
 80038e0:	69f9      	ldr	r1, [r7, #28]
 80038e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80038e6:	4013      	ands	r3, r2
 80038e8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80038ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ec:	015a      	lsls	r2, r3, #5
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	4413      	add	r3, r2
 80038f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80038f6:	461a      	mov	r2, r3
 80038f8:	2301      	movs	r3, #1
 80038fa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	799b      	ldrb	r3, [r3, #6]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d132      	bne.n	800396a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003908:	4613      	mov	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	4413      	add	r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	3320      	adds	r3, #32
 8003914:	6819      	ldr	r1, [r3, #0]
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800391a:	4613      	mov	r3, r2
 800391c:	00db      	lsls	r3, r3, #3
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4403      	add	r3, r0
 8003924:	331c      	adds	r3, #28
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4419      	add	r1, r3
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800392e:	4613      	mov	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4403      	add	r3, r0
 8003938:	3320      	adds	r3, #32
 800393a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800393c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393e:	2b00      	cmp	r3, #0
 8003940:	d113      	bne.n	800396a <HAL_PCD_IRQHandler+0x3a2>
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003946:	4613      	mov	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	3324      	adds	r3, #36	@ 0x24
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d108      	bne.n	800396a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6818      	ldr	r0, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003962:	461a      	mov	r2, r3
 8003964:	2101      	movs	r1, #1
 8003966:	f003 ff71 	bl	800784c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800396a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800396c:	b2db      	uxtb	r3, r3
 800396e:	4619      	mov	r1, r3
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f006 f9ee 	bl	8009d52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b00      	cmp	r3, #0
 800397e:	d008      	beq.n	8003992 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003982:	015a      	lsls	r2, r3, #5
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	4413      	add	r3, r2
 8003988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800398c:	461a      	mov	r2, r3
 800398e:	2308      	movs	r3, #8
 8003990:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f003 0310 	and.w	r3, r3, #16
 8003998:	2b00      	cmp	r3, #0
 800399a:	d008      	beq.n	80039ae <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800399c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039a8:	461a      	mov	r2, r3
 80039aa:	2310      	movs	r3, #16
 80039ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d008      	beq.n	80039ca <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80039b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039c4:	461a      	mov	r2, r3
 80039c6:	2340      	movs	r3, #64	@ 0x40
 80039c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f003 0302 	and.w	r3, r3, #2
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d023      	beq.n	8003a1c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80039d4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039d6:	6a38      	ldr	r0, [r7, #32]
 80039d8:	f002 ff58 	bl	800688c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80039dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039de:	4613      	mov	r3, r2
 80039e0:	00db      	lsls	r3, r3, #3
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	3310      	adds	r3, #16
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	4413      	add	r3, r2
 80039ec:	3304      	adds	r3, #4
 80039ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	78db      	ldrb	r3, [r3, #3]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d108      	bne.n	8003a0a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2200      	movs	r2, #0
 80039fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80039fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	4619      	mov	r1, r3
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f006 fa3b 	bl	8009e80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a0c:	015a      	lsls	r2, r3, #5
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	4413      	add	r3, r2
 8003a12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a16:	461a      	mov	r2, r3
 8003a18:	2302      	movs	r3, #2
 8003a1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003a26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 fcbd 	bl	80043a8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a30:	3301      	adds	r3, #1
 8003a32:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a36:	085b      	lsrs	r3, r3, #1
 8003a38:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f47f af2e 	bne.w	800389e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4618      	mov	r0, r3
 8003a48:	f003 fe3c 	bl	80076c4 <USB_ReadInterrupts>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a56:	d122      	bne.n	8003a9e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	69fa      	ldr	r2, [r7, #28]
 8003a62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003a66:	f023 0301 	bic.w	r3, r3, #1
 8003a6a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d108      	bne.n	8003a88 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003a7e:	2100      	movs	r1, #0
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f000 fea3 	bl	80047cc <HAL_PCDEx_LPM_Callback>
 8003a86:	e002      	b.n	8003a8e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f006 f9d9 	bl	8009e40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695a      	ldr	r2, [r3, #20]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003a9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f003 fe0e 	bl	80076c4 <USB_ReadInterrupts>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003aae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ab2:	d112      	bne.n	8003ada <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d102      	bne.n	8003aca <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f006 f995 	bl	8009df4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695a      	ldr	r2, [r3, #20]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003ad8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f003 fdf0 	bl	80076c4 <USB_ReadInterrupts>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003aea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aee:	f040 80b7 	bne.w	8003c60 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b00:	f023 0301 	bic.w	r3, r3, #1
 8003b04:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2110      	movs	r1, #16
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f002 febd 	bl	800688c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b12:	2300      	movs	r3, #0
 8003b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b16:	e046      	b.n	8003ba6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b1a:	015a      	lsls	r2, r3, #5
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	4413      	add	r3, r2
 8003b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b24:	461a      	mov	r2, r3
 8003b26:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b2a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b3c:	0151      	lsls	r1, r2, #5
 8003b3e:	69fa      	ldr	r2, [r7, #28]
 8003b40:	440a      	add	r2, r1
 8003b42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003b46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b4a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b58:	461a      	mov	r2, r3
 8003b5a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003b5e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b70:	0151      	lsls	r1, r2, #5
 8003b72:	69fa      	ldr	r2, [r7, #28]
 8003b74:	440a      	add	r2, r1
 8003b76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b7e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b90:	0151      	lsls	r1, r2, #5
 8003b92:	69fa      	ldr	r2, [r7, #28]
 8003b94:	440a      	add	r2, r1
 8003b96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003b9a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003b9e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	791b      	ldrb	r3, [r3, #4]
 8003baa:	461a      	mov	r2, r3
 8003bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d3b2      	bcc.n	8003b18 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bb8:	69db      	ldr	r3, [r3, #28]
 8003bba:	69fa      	ldr	r2, [r7, #28]
 8003bbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bc0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003bc4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	7bdb      	ldrb	r3, [r3, #15]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d016      	beq.n	8003bfc <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bde:	f043 030b 	orr.w	r3, r3, #11
 8003be2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bee:	69fa      	ldr	r2, [r7, #28]
 8003bf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003bf4:	f043 030b 	orr.w	r3, r3, #11
 8003bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bfa:	e015      	b.n	8003c28 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	69fa      	ldr	r2, [r7, #28]
 8003c06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c0a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003c0e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003c12:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	69fa      	ldr	r2, [r7, #28]
 8003c1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c22:	f043 030b 	orr.w	r3, r3, #11
 8003c26:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	69fa      	ldr	r2, [r7, #28]
 8003c32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c36:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003c3a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6818      	ldr	r0, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	f003 fdfe 	bl	800784c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695a      	ldr	r2, [r3, #20]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003c5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f003 fd2d 	bl	80076c4 <USB_ReadInterrupts>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c74:	d123      	bne.n	8003cbe <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f003 fdc3 	bl	8007806 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f002 fe7a 	bl	800697e <USB_GetDevSpeed>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681c      	ldr	r4, [r3, #0]
 8003c96:	f001 fa09 	bl	80050ac <HAL_RCC_GetHCLKFreq>
 8003c9a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	f002 fb7e 	bl	80063a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f006 f87a 	bl	8009da2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	695a      	ldr	r2, [r3, #20]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003cbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f003 fcfe 	bl	80076c4 <USB_ReadInterrupts>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b08      	cmp	r3, #8
 8003cd0:	d10a      	bne.n	8003ce8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f006 f857 	bl	8009d86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695a      	ldr	r2, [r3, #20]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f002 0208 	and.w	r2, r2, #8
 8003ce6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f003 fce9 	bl	80076c4 <USB_ReadInterrupts>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cf8:	2b80      	cmp	r3, #128	@ 0x80
 8003cfa:	d123      	bne.n	8003d44 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003cfc:	6a3b      	ldr	r3, [r7, #32]
 8003cfe:	699b      	ldr	r3, [r3, #24]
 8003d00:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d08:	2301      	movs	r3, #1
 8003d0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d0c:	e014      	b.n	8003d38 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d12:	4613      	mov	r3, r2
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	4413      	add	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d105      	bne.n	8003d32 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 fb0a 	bl	8004346 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d34:	3301      	adds	r3, #1
 8003d36:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	791b      	ldrb	r3, [r3, #4]
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d3e4      	bcc.n	8003d0e <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4618      	mov	r0, r3
 8003d4a:	f003 fcbb 	bl	80076c4 <USB_ReadInterrupts>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d58:	d13c      	bne.n	8003dd4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d5e:	e02b      	b.n	8003db8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d74:	4613      	mov	r3, r2
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	4413      	add	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	3318      	adds	r3, #24
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d115      	bne.n	8003db2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003d86:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	da12      	bge.n	8003db2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d90:	4613      	mov	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	4413      	add	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	3317      	adds	r3, #23
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	4619      	mov	r1, r3
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 faca 	bl	8004346 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db4:	3301      	adds	r3, #1
 8003db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	791b      	ldrb	r3, [r3, #4]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d3cd      	bcc.n	8003d60 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695a      	ldr	r2, [r3, #20]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003dd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f003 fc73 	bl	80076c4 <USB_ReadInterrupts>
 8003dde:	4603      	mov	r3, r0
 8003de0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003de4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003de8:	d156      	bne.n	8003e98 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dea:	2301      	movs	r3, #1
 8003dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dee:	e045      	b.n	8003e7c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df2:	015a      	lsls	r2, r3, #5
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	4413      	add	r3, r2
 8003df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e04:	4613      	mov	r3, r2
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	4413      	add	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003e12:	781b      	ldrb	r3, [r3, #0]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d12e      	bne.n	8003e76 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e18:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	da2b      	bge.n	8003e76 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003e2a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d121      	bne.n	8003e76 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e36:	4613      	mov	r3, r2
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	440b      	add	r3, r1
 8003e40:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003e44:	2201      	movs	r2, #1
 8003e46:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003e50:	6a3b      	ldr	r3, [r7, #32]
 8003e52:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003e54:	6a3b      	ldr	r3, [r7, #32]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10a      	bne.n	8003e76 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	69fa      	ldr	r2, [r7, #28]
 8003e6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003e6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e72:	6053      	str	r3, [r2, #4]
            break;
 8003e74:	e008      	b.n	8003e88 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e78:	3301      	adds	r3, #1
 8003e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	791b      	ldrb	r3, [r3, #4]
 8003e80:	461a      	mov	r2, r3
 8003e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d3b3      	bcc.n	8003df0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	695a      	ldr	r2, [r3, #20]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003e96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f003 fc11 	bl	80076c4 <USB_ReadInterrupts>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eac:	d10a      	bne.n	8003ec4 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f005 fff8 	bl	8009ea4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695a      	ldr	r2, [r3, #20]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003ec2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f003 fbfb 	bl	80076c4 <USB_ReadInterrupts>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b04      	cmp	r3, #4
 8003ed6:	d115      	bne.n	8003f04 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	f003 0304 	and.w	r3, r3, #4
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f005 ffe8 	bl	8009ec0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6859      	ldr	r1, [r3, #4]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	605a      	str	r2, [r3, #4]
 8003f00:	e000      	b.n	8003f04 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003f02:	bf00      	nop
    }
  }
}
 8003f04:	3734      	adds	r7, #52	@ 0x34
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd90      	pop	{r4, r7, pc}

08003f0a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b082      	sub	sp, #8
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	6078      	str	r0, [r7, #4]
 8003f12:	460b      	mov	r3, r1
 8003f14:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_PCD_SetAddress+0x1a>
 8003f20:	2302      	movs	r3, #2
 8003f22:	e012      	b.n	8003f4a <HAL_PCD_SetAddress+0x40>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	78fa      	ldrb	r2, [r7, #3]
 8003f30:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	78fa      	ldrb	r2, [r7, #3]
 8003f38:	4611      	mov	r1, r2
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f003 fb5a 	bl	80075f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b084      	sub	sp, #16
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	4608      	mov	r0, r1
 8003f5c:	4611      	mov	r1, r2
 8003f5e:	461a      	mov	r2, r3
 8003f60:	4603      	mov	r3, r0
 8003f62:	70fb      	strb	r3, [r7, #3]
 8003f64:	460b      	mov	r3, r1
 8003f66:	803b      	strh	r3, [r7, #0]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	da0f      	bge.n	8003f98 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f78:	78fb      	ldrb	r3, [r7, #3]
 8003f7a:	f003 020f 	and.w	r2, r3, #15
 8003f7e:	4613      	mov	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	4413      	add	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	3310      	adds	r3, #16
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	3304      	adds	r3, #4
 8003f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2201      	movs	r2, #1
 8003f94:	705a      	strb	r2, [r3, #1]
 8003f96:	e00f      	b.n	8003fb8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	f003 020f 	and.w	r2, r3, #15
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	00db      	lsls	r3, r3, #3
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	4413      	add	r3, r2
 8003fae:	3304      	adds	r3, #4
 8003fb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8003fc4:	883b      	ldrh	r3, [r7, #0]
 8003fc6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	78ba      	ldrb	r2, [r7, #2]
 8003fd2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	785b      	ldrb	r3, [r3, #1]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d004      	beq.n	8003fe6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	781b      	ldrb	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003fe6:	78bb      	ldrb	r3, [r7, #2]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d102      	bne.n	8003ff2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d101      	bne.n	8004000 <HAL_PCD_EP_Open+0xae>
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	e00e      	b.n	800401e <HAL_PCD_EP_Open+0xcc>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68f9      	ldr	r1, [r7, #12]
 800400e:	4618      	mov	r0, r3
 8004010:	f002 fcda 	bl	80069c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800401c:	7afb      	ldrb	r3, [r7, #11]
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b084      	sub	sp, #16
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	460b      	mov	r3, r1
 8004030:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004032:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004036:	2b00      	cmp	r3, #0
 8004038:	da0f      	bge.n	800405a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800403a:	78fb      	ldrb	r3, [r7, #3]
 800403c:	f003 020f 	and.w	r2, r3, #15
 8004040:	4613      	mov	r3, r2
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	4413      	add	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	3310      	adds	r3, #16
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	4413      	add	r3, r2
 800404e:	3304      	adds	r3, #4
 8004050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2201      	movs	r2, #1
 8004056:	705a      	strb	r2, [r3, #1]
 8004058:	e00f      	b.n	800407a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	f003 020f 	and.w	r2, r3, #15
 8004060:	4613      	mov	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	4413      	add	r3, r2
 8004070:	3304      	adds	r3, #4
 8004072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2200      	movs	r2, #0
 8004078:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800407a:	78fb      	ldrb	r3, [r7, #3]
 800407c:	f003 030f 	and.w	r3, r3, #15
 8004080:	b2da      	uxtb	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <HAL_PCD_EP_Close+0x6e>
 8004090:	2302      	movs	r3, #2
 8004092:	e00e      	b.n	80040b2 <HAL_PCD_EP_Close+0x8c>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68f9      	ldr	r1, [r7, #12]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f002 fd18 	bl	8006ad8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80040b0:	2300      	movs	r3, #0
}
 80040b2:	4618      	mov	r0, r3
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b086      	sub	sp, #24
 80040be:	af00      	add	r7, sp, #0
 80040c0:	60f8      	str	r0, [r7, #12]
 80040c2:	607a      	str	r2, [r7, #4]
 80040c4:	603b      	str	r3, [r7, #0]
 80040c6:	460b      	mov	r3, r1
 80040c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040ca:	7afb      	ldrb	r3, [r7, #11]
 80040cc:	f003 020f 	and.w	r2, r3, #15
 80040d0:	4613      	mov	r3, r2
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	4413      	add	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	4413      	add	r3, r2
 80040e0:	3304      	adds	r3, #4
 80040e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	2200      	movs	r2, #0
 80040f4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	2200      	movs	r2, #0
 80040fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80040fc:	7afb      	ldrb	r3, [r7, #11]
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	b2da      	uxtb	r2, r3
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	799b      	ldrb	r3, [r3, #6]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d102      	bne.n	8004116 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6818      	ldr	r0, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	799b      	ldrb	r3, [r3, #6]
 800411e:	461a      	mov	r2, r3
 8004120:	6979      	ldr	r1, [r7, #20]
 8004122:	f002 fdb5 	bl	8006c90 <USB_EPStartXfer>

  return HAL_OK;
 8004126:	2300      	movs	r3, #0
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	460b      	mov	r3, r1
 800413a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	f003 020f 	and.w	r2, r3, #15
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	4413      	add	r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004152:	681b      	ldr	r3, [r3, #0]
}
 8004154:	4618      	mov	r0, r3
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	607a      	str	r2, [r7, #4]
 800416a:	603b      	str	r3, [r7, #0]
 800416c:	460b      	mov	r3, r1
 800416e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004170:	7afb      	ldrb	r3, [r7, #11]
 8004172:	f003 020f 	and.w	r2, r3, #15
 8004176:	4613      	mov	r3, r2
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	4413      	add	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	3310      	adds	r3, #16
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4413      	add	r3, r2
 8004184:	3304      	adds	r3, #4
 8004186:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	2200      	movs	r2, #0
 8004198:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	2201      	movs	r2, #1
 800419e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041a0:	7afb      	ldrb	r3, [r7, #11]
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	799b      	ldrb	r3, [r3, #6]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d102      	bne.n	80041ba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6818      	ldr	r0, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	799b      	ldrb	r3, [r3, #6]
 80041c2:	461a      	mov	r2, r3
 80041c4:	6979      	ldr	r1, [r7, #20]
 80041c6:	f002 fd63 	bl	8006c90 <USB_EPStartXfer>

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	460b      	mov	r3, r1
 80041de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80041e0:	78fb      	ldrb	r3, [r7, #3]
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	7912      	ldrb	r2, [r2, #4]
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d901      	bls.n	80041f2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e04f      	b.n	8004292 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80041f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	da0f      	bge.n	800421a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041fa:	78fb      	ldrb	r3, [r7, #3]
 80041fc:	f003 020f 	and.w	r2, r3, #15
 8004200:	4613      	mov	r3, r2
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	3310      	adds	r3, #16
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	4413      	add	r3, r2
 800420e:	3304      	adds	r3, #4
 8004210:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2201      	movs	r2, #1
 8004216:	705a      	strb	r2, [r3, #1]
 8004218:	e00d      	b.n	8004236 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800421a:	78fa      	ldrb	r2, [r7, #3]
 800421c:	4613      	mov	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4413      	add	r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	4413      	add	r3, r2
 800422c:	3304      	adds	r3, #4
 800422e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2201      	movs	r2, #1
 800423a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800423c:	78fb      	ldrb	r3, [r7, #3]
 800423e:	f003 030f 	and.w	r3, r3, #15
 8004242:	b2da      	uxtb	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800424e:	2b01      	cmp	r3, #1
 8004250:	d101      	bne.n	8004256 <HAL_PCD_EP_SetStall+0x82>
 8004252:	2302      	movs	r3, #2
 8004254:	e01d      	b.n	8004292 <HAL_PCD_EP_SetStall+0xbe>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2201      	movs	r2, #1
 800425a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68f9      	ldr	r1, [r7, #12]
 8004264:	4618      	mov	r0, r3
 8004266:	f003 f8f1 	bl	800744c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800426a:	78fb      	ldrb	r3, [r7, #3]
 800426c:	f003 030f 	and.w	r3, r3, #15
 8004270:	2b00      	cmp	r3, #0
 8004272:	d109      	bne.n	8004288 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6818      	ldr	r0, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	7999      	ldrb	r1, [r3, #6]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004282:	461a      	mov	r2, r3
 8004284:	f003 fae2 	bl	800784c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3710      	adds	r7, #16
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b084      	sub	sp, #16
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
 80042a2:	460b      	mov	r3, r1
 80042a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042a6:	78fb      	ldrb	r3, [r7, #3]
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	7912      	ldrb	r2, [r2, #4]
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d901      	bls.n	80042b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e042      	b.n	800433e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	da0f      	bge.n	80042e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042c0:	78fb      	ldrb	r3, [r7, #3]
 80042c2:	f003 020f 	and.w	r2, r3, #15
 80042c6:	4613      	mov	r3, r2
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	4413      	add	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	3310      	adds	r3, #16
 80042d0:	687a      	ldr	r2, [r7, #4]
 80042d2:	4413      	add	r3, r2
 80042d4:	3304      	adds	r3, #4
 80042d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2201      	movs	r2, #1
 80042dc:	705a      	strb	r2, [r3, #1]
 80042de:	e00f      	b.n	8004300 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042e0:	78fb      	ldrb	r3, [r7, #3]
 80042e2:	f003 020f 	and.w	r2, r3, #15
 80042e6:	4613      	mov	r3, r2
 80042e8:	00db      	lsls	r3, r3, #3
 80042ea:	4413      	add	r3, r2
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	4413      	add	r3, r2
 80042f6:	3304      	adds	r3, #4
 80042f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004306:	78fb      	ldrb	r3, [r7, #3]
 8004308:	f003 030f 	and.w	r3, r3, #15
 800430c:	b2da      	uxtb	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <HAL_PCD_EP_ClrStall+0x86>
 800431c:	2302      	movs	r3, #2
 800431e:	e00e      	b.n	800433e <HAL_PCD_EP_ClrStall+0xa4>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68f9      	ldr	r1, [r7, #12]
 800432e:	4618      	mov	r0, r3
 8004330:	f003 f8fa 	bl	8007528 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800433c:	2300      	movs	r3, #0
}
 800433e:	4618      	mov	r0, r3
 8004340:	3710      	adds	r7, #16
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}

08004346 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004346:	b580      	push	{r7, lr}
 8004348:	b084      	sub	sp, #16
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
 800434e:	460b      	mov	r3, r1
 8004350:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004352:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004356:	2b00      	cmp	r3, #0
 8004358:	da0c      	bge.n	8004374 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800435a:	78fb      	ldrb	r3, [r7, #3]
 800435c:	f003 020f 	and.w	r2, r3, #15
 8004360:	4613      	mov	r3, r2
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	3310      	adds	r3, #16
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	4413      	add	r3, r2
 800436e:	3304      	adds	r3, #4
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	e00c      	b.n	800438e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	f003 020f 	and.w	r2, r3, #15
 800437a:	4613      	mov	r3, r2
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	4413      	add	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	4413      	add	r3, r2
 800438a:	3304      	adds	r3, #4
 800438c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68f9      	ldr	r1, [r7, #12]
 8004394:	4618      	mov	r0, r3
 8004396:	f002 ff19 	bl	80071cc <USB_EPStopXfer>
 800439a:	4603      	mov	r3, r0
 800439c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800439e:	7afb      	ldrb	r3, [r7, #11]
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b08a      	sub	sp, #40	@ 0x28
 80043ac:	af02      	add	r7, sp, #8
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	4613      	mov	r3, r2
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	4413      	add	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	3310      	adds	r3, #16
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	4413      	add	r3, r2
 80043cc:	3304      	adds	r3, #4
 80043ce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	695a      	ldr	r2, [r3, #20]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d901      	bls.n	80043e0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e06b      	b.n	80044b8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	691a      	ldr	r2, [r3, #16]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	695b      	ldr	r3, [r3, #20]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	69fa      	ldr	r2, [r7, #28]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d902      	bls.n	80043fc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	3303      	adds	r3, #3
 8004400:	089b      	lsrs	r3, r3, #2
 8004402:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004404:	e02a      	b.n	800445c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	691a      	ldr	r2, [r3, #16]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	689b      	ldr	r3, [r3, #8]
 8004416:	69fa      	ldr	r2, [r7, #28]
 8004418:	429a      	cmp	r2, r3
 800441a:	d902      	bls.n	8004422 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	3303      	adds	r3, #3
 8004426:	089b      	lsrs	r3, r3, #2
 8004428:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	68d9      	ldr	r1, [r3, #12]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	b2da      	uxtb	r2, r3
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	4603      	mov	r3, r0
 800443e:	6978      	ldr	r0, [r7, #20]
 8004440:	f002 ff6e 	bl	8007320 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	68da      	ldr	r2, [r3, #12]
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	441a      	add	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	695a      	ldr	r2, [r3, #20]
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	441a      	add	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	429a      	cmp	r2, r3
 8004470:	d809      	bhi.n	8004486 <PCD_WriteEmptyTxFifo+0xde>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	695a      	ldr	r2, [r3, #20]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800447a:	429a      	cmp	r2, r3
 800447c:	d203      	bcs.n	8004486 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1bf      	bne.n	8004406 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	429a      	cmp	r2, r3
 8004490:	d811      	bhi.n	80044b6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	f003 030f 	and.w	r3, r3, #15
 8004498:	2201      	movs	r2, #1
 800449a:	fa02 f303 	lsl.w	r3, r2, r3
 800449e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	43db      	mvns	r3, r3
 80044ac:	6939      	ldr	r1, [r7, #16]
 80044ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044b2:	4013      	ands	r3, r2
 80044b4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3720      	adds	r7, #32
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	333c      	adds	r3, #60	@ 0x3c
 80044d8:	3304      	adds	r3, #4
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	799b      	ldrb	r3, [r3, #6]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d17b      	bne.n	80045ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d015      	beq.n	800452c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	4a61      	ldr	r2, [pc, #388]	@ (8004688 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	f240 80b9 	bls.w	800467c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004510:	2b00      	cmp	r3, #0
 8004512:	f000 80b3 	beq.w	800467c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004522:	461a      	mov	r2, r3
 8004524:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004528:	6093      	str	r3, [r2, #8]
 800452a:	e0a7      	b.n	800467c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	2b00      	cmp	r3, #0
 8004534:	d009      	beq.n	800454a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004542:	461a      	mov	r2, r3
 8004544:	2320      	movs	r3, #32
 8004546:	6093      	str	r3, [r2, #8]
 8004548:	e098      	b.n	800467c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004550:	2b00      	cmp	r3, #0
 8004552:	f040 8093 	bne.w	800467c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	4a4b      	ldr	r2, [pc, #300]	@ (8004688 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d90f      	bls.n	800457e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00a      	beq.n	800457e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004574:	461a      	mov	r2, r3
 8004576:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800457a:	6093      	str	r3, [r2, #8]
 800457c:	e07e      	b.n	800467c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800457e:	683a      	ldr	r2, [r7, #0]
 8004580:	4613      	mov	r3, r2
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	4413      	add	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	4413      	add	r3, r2
 8004590:	3304      	adds	r3, #4
 8004592:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6a1a      	ldr	r2, [r3, #32]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	0159      	lsls	r1, r3, #5
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	440b      	add	r3, r1
 80045a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045aa:	1ad2      	subs	r2, r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d114      	bne.n	80045e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d109      	bne.n	80045d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6818      	ldr	r0, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80045c8:	461a      	mov	r2, r3
 80045ca:	2101      	movs	r1, #1
 80045cc:	f003 f93e 	bl	800784c <USB_EP0_OutStart>
 80045d0:	e006      	b.n	80045e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	441a      	add	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	4619      	mov	r1, r3
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f005 fb98 	bl	8009d1c <HAL_PCD_DataOutStageCallback>
 80045ec:	e046      	b.n	800467c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	4a26      	ldr	r2, [pc, #152]	@ (800468c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d124      	bne.n	8004640 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	69bb      	ldr	r3, [r7, #24]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800460c:	461a      	mov	r2, r3
 800460e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004612:	6093      	str	r3, [r2, #8]
 8004614:	e032      	b.n	800467c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	f003 0320 	and.w	r3, r3, #32
 800461c:	2b00      	cmp	r3, #0
 800461e:	d008      	beq.n	8004632 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	015a      	lsls	r2, r3, #5
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	4413      	add	r3, r2
 8004628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800462c:	461a      	mov	r2, r3
 800462e:	2320      	movs	r3, #32
 8004630:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	b2db      	uxtb	r3, r3
 8004636:	4619      	mov	r1, r3
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f005 fb6f 	bl	8009d1c <HAL_PCD_DataOutStageCallback>
 800463e:	e01d      	b.n	800467c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d114      	bne.n	8004670 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	4613      	mov	r3, r2
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	4413      	add	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	440b      	add	r3, r1
 8004654:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d108      	bne.n	8004670 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6818      	ldr	r0, [r3, #0]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004668:	461a      	mov	r2, r3
 800466a:	2100      	movs	r1, #0
 800466c:	f003 f8ee 	bl	800784c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	b2db      	uxtb	r3, r3
 8004674:	4619      	mov	r1, r3
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f005 fb50 	bl	8009d1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3720      	adds	r7, #32
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	4f54300a 	.word	0x4f54300a
 800468c:	4f54310a 	.word	0x4f54310a

08004690 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	333c      	adds	r3, #60	@ 0x3c
 80046a8:	3304      	adds	r3, #4
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4a15      	ldr	r2, [pc, #84]	@ (8004718 <PCD_EP_OutSetupPacket_int+0x88>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d90e      	bls.n	80046e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d009      	beq.n	80046e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046dc:	461a      	mov	r2, r3
 80046de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f005 fb07 	bl	8009cf8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4a0a      	ldr	r2, [pc, #40]	@ (8004718 <PCD_EP_OutSetupPacket_int+0x88>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d90c      	bls.n	800470c <PCD_EP_OutSetupPacket_int+0x7c>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	799b      	ldrb	r3, [r3, #6]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d108      	bne.n	800470c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6818      	ldr	r0, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004704:	461a      	mov	r2, r3
 8004706:	2101      	movs	r1, #1
 8004708:	f003 f8a0 	bl	800784c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	4f54300a 	.word	0x4f54300a

0800471c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	460b      	mov	r3, r1
 8004726:	70fb      	strb	r3, [r7, #3]
 8004728:	4613      	mov	r3, r2
 800472a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004732:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004734:	78fb      	ldrb	r3, [r7, #3]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d107      	bne.n	800474a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800473a:	883b      	ldrh	r3, [r7, #0]
 800473c:	0419      	lsls	r1, r3, #16
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	430a      	orrs	r2, r1
 8004746:	629a      	str	r2, [r3, #40]	@ 0x28
 8004748:	e028      	b.n	800479c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004750:	0c1b      	lsrs	r3, r3, #16
 8004752:	68ba      	ldr	r2, [r7, #8]
 8004754:	4413      	add	r3, r2
 8004756:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004758:	2300      	movs	r3, #0
 800475a:	73fb      	strb	r3, [r7, #15]
 800475c:	e00d      	b.n	800477a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	7bfb      	ldrb	r3, [r7, #15]
 8004764:	3340      	adds	r3, #64	@ 0x40
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	4413      	add	r3, r2
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	0c1b      	lsrs	r3, r3, #16
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	4413      	add	r3, r2
 8004772:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	3301      	adds	r3, #1
 8004778:	73fb      	strb	r3, [r7, #15]
 800477a:	7bfa      	ldrb	r2, [r7, #15]
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	3b01      	subs	r3, #1
 8004780:	429a      	cmp	r2, r3
 8004782:	d3ec      	bcc.n	800475e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004784:	883b      	ldrh	r3, [r7, #0]
 8004786:	0418      	lsls	r0, r3, #16
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6819      	ldr	r1, [r3, #0]
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	3b01      	subs	r3, #1
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	4302      	orrs	r2, r0
 8004794:	3340      	adds	r3, #64	@ 0x40
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr

080047aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80047aa:	b480      	push	{r7}
 80047ac:	b083      	sub	sp, #12
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
 80047b2:	460b      	mov	r3, r1
 80047b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	887a      	ldrh	r2, [r7, #2]
 80047bc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	460b      	mov	r3, r1
 80047d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b086      	sub	sp, #24
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e267      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d075      	beq.n	80048ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004802:	4b88      	ldr	r3, [pc, #544]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f003 030c 	and.w	r3, r3, #12
 800480a:	2b04      	cmp	r3, #4
 800480c:	d00c      	beq.n	8004828 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800480e:	4b85      	ldr	r3, [pc, #532]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004816:	2b08      	cmp	r3, #8
 8004818:	d112      	bne.n	8004840 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800481a:	4b82      	ldr	r3, [pc, #520]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004822:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004826:	d10b      	bne.n	8004840 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004828:	4b7e      	ldr	r3, [pc, #504]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d05b      	beq.n	80048ec <HAL_RCC_OscConfig+0x108>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d157      	bne.n	80048ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e242      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004848:	d106      	bne.n	8004858 <HAL_RCC_OscConfig+0x74>
 800484a:	4b76      	ldr	r3, [pc, #472]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a75      	ldr	r2, [pc, #468]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004850:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004854:	6013      	str	r3, [r2, #0]
 8004856:	e01d      	b.n	8004894 <HAL_RCC_OscConfig+0xb0>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004860:	d10c      	bne.n	800487c <HAL_RCC_OscConfig+0x98>
 8004862:	4b70      	ldr	r3, [pc, #448]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a6f      	ldr	r2, [pc, #444]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004868:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	4b6d      	ldr	r3, [pc, #436]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a6c      	ldr	r2, [pc, #432]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004874:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004878:	6013      	str	r3, [r2, #0]
 800487a:	e00b      	b.n	8004894 <HAL_RCC_OscConfig+0xb0>
 800487c:	4b69      	ldr	r3, [pc, #420]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a68      	ldr	r2, [pc, #416]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004882:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004886:	6013      	str	r3, [r2, #0]
 8004888:	4b66      	ldr	r3, [pc, #408]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a65      	ldr	r2, [pc, #404]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 800488e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004892:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d013      	beq.n	80048c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800489c:	f7fd fd48 	bl	8002330 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048a4:	f7fd fd44 	bl	8002330 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b64      	cmp	r3, #100	@ 0x64
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e207      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b6:	4b5b      	ldr	r3, [pc, #364]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCC_OscConfig+0xc0>
 80048c2:	e014      	b.n	80048ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c4:	f7fd fd34 	bl	8002330 <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048cc:	f7fd fd30 	bl	8002330 <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b64      	cmp	r3, #100	@ 0x64
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e1f3      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048de:	4b51      	ldr	r3, [pc, #324]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1f0      	bne.n	80048cc <HAL_RCC_OscConfig+0xe8>
 80048ea:	e000      	b.n	80048ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d063      	beq.n	80049c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80048fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f003 030c 	and.w	r3, r3, #12
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00b      	beq.n	800491e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004906:	4b47      	ldr	r3, [pc, #284]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800490e:	2b08      	cmp	r3, #8
 8004910:	d11c      	bne.n	800494c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004912:	4b44      	ldr	r3, [pc, #272]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d116      	bne.n	800494c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800491e:	4b41      	ldr	r3, [pc, #260]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b00      	cmp	r3, #0
 8004928:	d005      	beq.n	8004936 <HAL_RCC_OscConfig+0x152>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d001      	beq.n	8004936 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e1c7      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004936:	4b3b      	ldr	r3, [pc, #236]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	4937      	ldr	r1, [pc, #220]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004946:	4313      	orrs	r3, r2
 8004948:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800494a:	e03a      	b.n	80049c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d020      	beq.n	8004996 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004954:	4b34      	ldr	r3, [pc, #208]	@ (8004a28 <HAL_RCC_OscConfig+0x244>)
 8004956:	2201      	movs	r2, #1
 8004958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495a:	f7fd fce9 	bl	8002330 <HAL_GetTick>
 800495e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004960:	e008      	b.n	8004974 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004962:	f7fd fce5 	bl	8002330 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e1a8      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004974:	4b2b      	ldr	r3, [pc, #172]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0302 	and.w	r3, r3, #2
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0f0      	beq.n	8004962 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004980:	4b28      	ldr	r3, [pc, #160]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	691b      	ldr	r3, [r3, #16]
 800498c:	00db      	lsls	r3, r3, #3
 800498e:	4925      	ldr	r1, [pc, #148]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 8004990:	4313      	orrs	r3, r2
 8004992:	600b      	str	r3, [r1, #0]
 8004994:	e015      	b.n	80049c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004996:	4b24      	ldr	r3, [pc, #144]	@ (8004a28 <HAL_RCC_OscConfig+0x244>)
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800499c:	f7fd fcc8 	bl	8002330 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049a4:	f7fd fcc4 	bl	8002330 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e187      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f0      	bne.n	80049a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d036      	beq.n	8004a3c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d016      	beq.n	8004a04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049d6:	4b15      	ldr	r3, [pc, #84]	@ (8004a2c <HAL_RCC_OscConfig+0x248>)
 80049d8:	2201      	movs	r2, #1
 80049da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049dc:	f7fd fca8 	bl	8002330 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049e4:	f7fd fca4 	bl	8002330 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e167      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004a24 <HAL_RCC_OscConfig+0x240>)
 80049f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049fa:	f003 0302 	and.w	r3, r3, #2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0f0      	beq.n	80049e4 <HAL_RCC_OscConfig+0x200>
 8004a02:	e01b      	b.n	8004a3c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a04:	4b09      	ldr	r3, [pc, #36]	@ (8004a2c <HAL_RCC_OscConfig+0x248>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a0a:	f7fd fc91 	bl	8002330 <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a10:	e00e      	b.n	8004a30 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a12:	f7fd fc8d 	bl	8002330 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d907      	bls.n	8004a30 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e150      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
 8004a24:	40023800 	.word	0x40023800
 8004a28:	42470000 	.word	0x42470000
 8004a2c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a30:	4b88      	ldr	r3, [pc, #544]	@ (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004a32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1ea      	bne.n	8004a12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 8097 	beq.w	8004b78 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a4e:	4b81      	ldr	r3, [pc, #516]	@ (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10f      	bne.n	8004a7a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60bb      	str	r3, [r7, #8]
 8004a5e:	4b7d      	ldr	r3, [pc, #500]	@ (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a62:	4a7c      	ldr	r2, [pc, #496]	@ (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004a64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8004a6a:	4b7a      	ldr	r3, [pc, #488]	@ (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004a72:	60bb      	str	r3, [r7, #8]
 8004a74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a76:	2301      	movs	r3, #1
 8004a78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a7a:	4b77      	ldr	r3, [pc, #476]	@ (8004c58 <HAL_RCC_OscConfig+0x474>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d118      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a86:	4b74      	ldr	r3, [pc, #464]	@ (8004c58 <HAL_RCC_OscConfig+0x474>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a73      	ldr	r2, [pc, #460]	@ (8004c58 <HAL_RCC_OscConfig+0x474>)
 8004a8c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a92:	f7fd fc4d 	bl	8002330 <HAL_GetTick>
 8004a96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a98:	e008      	b.n	8004aac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a9a:	f7fd fc49 	bl	8002330 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e10c      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aac:	4b6a      	ldr	r3, [pc, #424]	@ (8004c58 <HAL_RCC_OscConfig+0x474>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0f0      	beq.n	8004a9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d106      	bne.n	8004ace <HAL_RCC_OscConfig+0x2ea>
 8004ac0:	4b64      	ldr	r3, [pc, #400]	@ (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac4:	4a63      	ldr	r2, [pc, #396]	@ (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004ac6:	f043 0301 	orr.w	r3, r3, #1
 8004aca:	6713      	str	r3, [r2, #112]	@ 0x70
 8004acc:	e01c      	b.n	8004b08 <HAL_RCC_OscConfig+0x324>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	2b05      	cmp	r3, #5
 8004ad4:	d10c      	bne.n	8004af0 <HAL_RCC_OscConfig+0x30c>
 8004ad6:	4b5f      	ldr	r3, [pc, #380]	@ (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ada:	4a5e      	ldr	r2, [pc, #376]	@ (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004adc:	f043 0304 	orr.w	r3, r3, #4
 8004ae0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ae2:	4b5c      	ldr	r3, [pc, #368]	@ (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae6:	4a5b      	ldr	r2, [pc, #364]	@ (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004ae8:	f043 0301 	orr.w	r3, r3, #1
 8004aec:	6713      	str	r3, [r2, #112]	@ 0x70
 8004aee:	e00b      	b.n	8004b08 <HAL_RCC_OscConfig+0x324>
 8004af0:	4b58      	ldr	r3, [pc, #352]	@ (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004af4:	4a57      	ldr	r2, [pc, #348]	@ (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004af6:	f023 0301 	bic.w	r3, r3, #1
 8004afa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004afc:	4b55      	ldr	r3, [pc, #340]	@ (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b00:	4a54      	ldr	r2, [pc, #336]	@ (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004b02:	f023 0304 	bic.w	r3, r3, #4
 8004b06:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689b      	ldr	r3, [r3, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d015      	beq.n	8004b3c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b10:	f7fd fc0e 	bl	8002330 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b16:	e00a      	b.n	8004b2e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b18:	f7fd fc0a 	bl	8002330 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e0cb      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b2e:	4b49      	ldr	r3, [pc, #292]	@ (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0ee      	beq.n	8004b18 <HAL_RCC_OscConfig+0x334>
 8004b3a:	e014      	b.n	8004b66 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b3c:	f7fd fbf8 	bl	8002330 <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b42:	e00a      	b.n	8004b5a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b44:	f7fd fbf4 	bl	8002330 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e0b5      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b5a:	4b3e      	ldr	r3, [pc, #248]	@ (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b5e:	f003 0302 	and.w	r3, r3, #2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1ee      	bne.n	8004b44 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b66:	7dfb      	ldrb	r3, [r7, #23]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d105      	bne.n	8004b78 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b6c:	4b39      	ldr	r3, [pc, #228]	@ (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b70:	4a38      	ldr	r2, [pc, #224]	@ (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004b72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b76:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 80a1 	beq.w	8004cc4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b82:	4b34      	ldr	r3, [pc, #208]	@ (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 030c 	and.w	r3, r3, #12
 8004b8a:	2b08      	cmp	r3, #8
 8004b8c:	d05c      	beq.n	8004c48 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d141      	bne.n	8004c1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b96:	4b31      	ldr	r3, [pc, #196]	@ (8004c5c <HAL_RCC_OscConfig+0x478>)
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9c:	f7fd fbc8 	bl	8002330 <HAL_GetTick>
 8004ba0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ba2:	e008      	b.n	8004bb6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ba4:	f7fd fbc4 	bl	8002330 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d901      	bls.n	8004bb6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	e087      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bb6:	4b27      	ldr	r3, [pc, #156]	@ (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1f0      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69da      	ldr	r2, [r3, #28]
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a1b      	ldr	r3, [r3, #32]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd0:	019b      	lsls	r3, r3, #6
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd8:	085b      	lsrs	r3, r3, #1
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	041b      	lsls	r3, r3, #16
 8004bde:	431a      	orrs	r2, r3
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004be4:	061b      	lsls	r3, r3, #24
 8004be6:	491b      	ldr	r1, [pc, #108]	@ (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bec:	4b1b      	ldr	r3, [pc, #108]	@ (8004c5c <HAL_RCC_OscConfig+0x478>)
 8004bee:	2201      	movs	r2, #1
 8004bf0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf2:	f7fd fb9d 	bl	8002330 <HAL_GetTick>
 8004bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bf8:	e008      	b.n	8004c0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bfa:	f7fd fb99 	bl	8002330 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	2b02      	cmp	r3, #2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e05c      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c0c:	4b11      	ldr	r3, [pc, #68]	@ (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0f0      	beq.n	8004bfa <HAL_RCC_OscConfig+0x416>
 8004c18:	e054      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c1a:	4b10      	ldr	r3, [pc, #64]	@ (8004c5c <HAL_RCC_OscConfig+0x478>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c20:	f7fd fb86 	bl	8002330 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c28:	f7fd fb82 	bl	8002330 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e045      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3a:	4b06      	ldr	r3, [pc, #24]	@ (8004c54 <HAL_RCC_OscConfig+0x470>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f0      	bne.n	8004c28 <HAL_RCC_OscConfig+0x444>
 8004c46:	e03d      	b.n	8004cc4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d107      	bne.n	8004c60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e038      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
 8004c54:	40023800 	.word	0x40023800
 8004c58:	40007000 	.word	0x40007000
 8004c5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c60:	4b1b      	ldr	r3, [pc, #108]	@ (8004cd0 <HAL_RCC_OscConfig+0x4ec>)
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d028      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d121      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d11a      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c8a:	68fa      	ldr	r2, [r7, #12]
 8004c8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004c90:	4013      	ands	r3, r2
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004c96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d111      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca6:	085b      	lsrs	r3, r3, #1
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d107      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d001      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e000      	b.n	8004cc6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	40023800 	.word	0x40023800

08004cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e0cc      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ce8:	4b68      	ldr	r3, [pc, #416]	@ (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d90c      	bls.n	8004d10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf6:	4b65      	ldr	r3, [pc, #404]	@ (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfe:	4b63      	ldr	r3, [pc, #396]	@ (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0307 	and.w	r3, r3, #7
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d001      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e0b8      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d020      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d28:	4b59      	ldr	r3, [pc, #356]	@ (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	4a58      	ldr	r2, [pc, #352]	@ (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004d32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d005      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d40:	4b53      	ldr	r3, [pc, #332]	@ (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	4a52      	ldr	r2, [pc, #328]	@ (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004d4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d4c:	4b50      	ldr	r3, [pc, #320]	@ (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	494d      	ldr	r1, [pc, #308]	@ (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d044      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d107      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d72:	4b47      	ldr	r3, [pc, #284]	@ (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d119      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e07f      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d003      	beq.n	8004d92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d107      	bne.n	8004da2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d92:	4b3f      	ldr	r3, [pc, #252]	@ (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d109      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e06f      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da2:	4b3b      	ldr	r3, [pc, #236]	@ (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e067      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004db2:	4b37      	ldr	r3, [pc, #220]	@ (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f023 0203 	bic.w	r2, r3, #3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	4934      	ldr	r1, [pc, #208]	@ (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dc4:	f7fd fab4 	bl	8002330 <HAL_GetTick>
 8004dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dca:	e00a      	b.n	8004de2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dcc:	f7fd fab0 	bl	8002330 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e04f      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de2:	4b2b      	ldr	r3, [pc, #172]	@ (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 020c 	and.w	r2, r3, #12
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d1eb      	bne.n	8004dcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004df4:	4b25      	ldr	r3, [pc, #148]	@ (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d20c      	bcs.n	8004e1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e02:	4b22      	ldr	r3, [pc, #136]	@ (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e0a:	4b20      	ldr	r3, [pc, #128]	@ (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0307 	and.w	r3, r3, #7
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d001      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e032      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d008      	beq.n	8004e3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e28:	4b19      	ldr	r3, [pc, #100]	@ (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	4916      	ldr	r1, [pc, #88]	@ (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d009      	beq.n	8004e5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e46:	4b12      	ldr	r3, [pc, #72]	@ (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	490e      	ldr	r1, [pc, #56]	@ (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e5a:	f000 f821 	bl	8004ea0 <HAL_RCC_GetSysClockFreq>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	4b0b      	ldr	r3, [pc, #44]	@ (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	091b      	lsrs	r3, r3, #4
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	490a      	ldr	r1, [pc, #40]	@ (8004e94 <HAL_RCC_ClockConfig+0x1c0>)
 8004e6c:	5ccb      	ldrb	r3, [r1, r3]
 8004e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e72:	4a09      	ldr	r2, [pc, #36]	@ (8004e98 <HAL_RCC_ClockConfig+0x1c4>)
 8004e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004e76:	4b09      	ldr	r3, [pc, #36]	@ (8004e9c <HAL_RCC_ClockConfig+0x1c8>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fd fa14 	bl	80022a8 <HAL_InitTick>

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40023c00 	.word	0x40023c00
 8004e90:	40023800 	.word	0x40023800
 8004e94:	0800cff8 	.word	0x0800cff8
 8004e98:	2000000c 	.word	0x2000000c
 8004e9c:	20000010 	.word	0x20000010

08004ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ea4:	b094      	sub	sp, #80	@ 0x50
 8004ea6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eb8:	4b79      	ldr	r3, [pc, #484]	@ (80050a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	f003 030c 	and.w	r3, r3, #12
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d00d      	beq.n	8004ee0 <HAL_RCC_GetSysClockFreq+0x40>
 8004ec4:	2b08      	cmp	r3, #8
 8004ec6:	f200 80e1 	bhi.w	800508c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d003      	beq.n	8004eda <HAL_RCC_GetSysClockFreq+0x3a>
 8004ed2:	e0db      	b.n	800508c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ed4:	4b73      	ldr	r3, [pc, #460]	@ (80050a4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004ed6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ed8:	e0db      	b.n	8005092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004eda:	4b73      	ldr	r3, [pc, #460]	@ (80050a8 <HAL_RCC_GetSysClockFreq+0x208>)
 8004edc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004ede:	e0d8      	b.n	8005092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ee0:	4b6f      	ldr	r3, [pc, #444]	@ (80050a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ee8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004eea:	4b6d      	ldr	r3, [pc, #436]	@ (80050a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d063      	beq.n	8004fbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ef6:	4b6a      	ldr	r3, [pc, #424]	@ (80050a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	099b      	lsrs	r3, r3, #6
 8004efc:	2200      	movs	r2, #0
 8004efe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f00:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f08:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004f12:	4622      	mov	r2, r4
 8004f14:	462b      	mov	r3, r5
 8004f16:	f04f 0000 	mov.w	r0, #0
 8004f1a:	f04f 0100 	mov.w	r1, #0
 8004f1e:	0159      	lsls	r1, r3, #5
 8004f20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f24:	0150      	lsls	r0, r2, #5
 8004f26:	4602      	mov	r2, r0
 8004f28:	460b      	mov	r3, r1
 8004f2a:	4621      	mov	r1, r4
 8004f2c:	1a51      	subs	r1, r2, r1
 8004f2e:	6139      	str	r1, [r7, #16]
 8004f30:	4629      	mov	r1, r5
 8004f32:	eb63 0301 	sbc.w	r3, r3, r1
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f44:	4659      	mov	r1, fp
 8004f46:	018b      	lsls	r3, r1, #6
 8004f48:	4651      	mov	r1, sl
 8004f4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f4e:	4651      	mov	r1, sl
 8004f50:	018a      	lsls	r2, r1, #6
 8004f52:	4651      	mov	r1, sl
 8004f54:	ebb2 0801 	subs.w	r8, r2, r1
 8004f58:	4659      	mov	r1, fp
 8004f5a:	eb63 0901 	sbc.w	r9, r3, r1
 8004f5e:	f04f 0200 	mov.w	r2, #0
 8004f62:	f04f 0300 	mov.w	r3, #0
 8004f66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f72:	4690      	mov	r8, r2
 8004f74:	4699      	mov	r9, r3
 8004f76:	4623      	mov	r3, r4
 8004f78:	eb18 0303 	adds.w	r3, r8, r3
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	462b      	mov	r3, r5
 8004f80:	eb49 0303 	adc.w	r3, r9, r3
 8004f84:	60fb      	str	r3, [r7, #12]
 8004f86:	f04f 0200 	mov.w	r2, #0
 8004f8a:	f04f 0300 	mov.w	r3, #0
 8004f8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f92:	4629      	mov	r1, r5
 8004f94:	024b      	lsls	r3, r1, #9
 8004f96:	4621      	mov	r1, r4
 8004f98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f9c:	4621      	mov	r1, r4
 8004f9e:	024a      	lsls	r2, r1, #9
 8004fa0:	4610      	mov	r0, r2
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004faa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004fac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004fb0:	f7fb fe4a 	bl	8000c48 <__aeabi_uldivmod>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	4613      	mov	r3, r2
 8004fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fbc:	e058      	b.n	8005070 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fbe:	4b38      	ldr	r3, [pc, #224]	@ (80050a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	099b      	lsrs	r3, r3, #6
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	4611      	mov	r1, r2
 8004fca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004fce:	623b      	str	r3, [r7, #32]
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004fd8:	4642      	mov	r2, r8
 8004fda:	464b      	mov	r3, r9
 8004fdc:	f04f 0000 	mov.w	r0, #0
 8004fe0:	f04f 0100 	mov.w	r1, #0
 8004fe4:	0159      	lsls	r1, r3, #5
 8004fe6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fea:	0150      	lsls	r0, r2, #5
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	4641      	mov	r1, r8
 8004ff2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ff6:	4649      	mov	r1, r9
 8004ff8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ffc:	f04f 0200 	mov.w	r2, #0
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005008:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800500c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005010:	ebb2 040a 	subs.w	r4, r2, sl
 8005014:	eb63 050b 	sbc.w	r5, r3, fp
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	f04f 0300 	mov.w	r3, #0
 8005020:	00eb      	lsls	r3, r5, #3
 8005022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005026:	00e2      	lsls	r2, r4, #3
 8005028:	4614      	mov	r4, r2
 800502a:	461d      	mov	r5, r3
 800502c:	4643      	mov	r3, r8
 800502e:	18e3      	adds	r3, r4, r3
 8005030:	603b      	str	r3, [r7, #0]
 8005032:	464b      	mov	r3, r9
 8005034:	eb45 0303 	adc.w	r3, r5, r3
 8005038:	607b      	str	r3, [r7, #4]
 800503a:	f04f 0200 	mov.w	r2, #0
 800503e:	f04f 0300 	mov.w	r3, #0
 8005042:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005046:	4629      	mov	r1, r5
 8005048:	028b      	lsls	r3, r1, #10
 800504a:	4621      	mov	r1, r4
 800504c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005050:	4621      	mov	r1, r4
 8005052:	028a      	lsls	r2, r1, #10
 8005054:	4610      	mov	r0, r2
 8005056:	4619      	mov	r1, r3
 8005058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800505a:	2200      	movs	r2, #0
 800505c:	61bb      	str	r3, [r7, #24]
 800505e:	61fa      	str	r2, [r7, #28]
 8005060:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005064:	f7fb fdf0 	bl	8000c48 <__aeabi_uldivmod>
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	4613      	mov	r3, r2
 800506e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005070:	4b0b      	ldr	r3, [pc, #44]	@ (80050a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	0c1b      	lsrs	r3, r3, #16
 8005076:	f003 0303 	and.w	r3, r3, #3
 800507a:	3301      	adds	r3, #1
 800507c:	005b      	lsls	r3, r3, #1
 800507e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005080:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005084:	fbb2 f3f3 	udiv	r3, r2, r3
 8005088:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800508a:	e002      	b.n	8005092 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800508c:	4b05      	ldr	r3, [pc, #20]	@ (80050a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800508e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005090:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005092:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005094:	4618      	mov	r0, r3
 8005096:	3750      	adds	r7, #80	@ 0x50
 8005098:	46bd      	mov	sp, r7
 800509a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800509e:	bf00      	nop
 80050a0:	40023800 	.word	0x40023800
 80050a4:	00f42400 	.word	0x00f42400
 80050a8:	007a1200 	.word	0x007a1200

080050ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050b0:	4b03      	ldr	r3, [pc, #12]	@ (80050c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80050b2:	681b      	ldr	r3, [r3, #0]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	2000000c 	.word	0x2000000c

080050c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80050c8:	f7ff fff0 	bl	80050ac <HAL_RCC_GetHCLKFreq>
 80050cc:	4602      	mov	r2, r0
 80050ce:	4b05      	ldr	r3, [pc, #20]	@ (80050e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	0a9b      	lsrs	r3, r3, #10
 80050d4:	f003 0307 	and.w	r3, r3, #7
 80050d8:	4903      	ldr	r1, [pc, #12]	@ (80050e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050da:	5ccb      	ldrb	r3, [r1, r3]
 80050dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	40023800 	.word	0x40023800
 80050e8:	0800d008 	.word	0x0800d008

080050ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050f0:	f7ff ffdc 	bl	80050ac <HAL_RCC_GetHCLKFreq>
 80050f4:	4602      	mov	r2, r0
 80050f6:	4b05      	ldr	r3, [pc, #20]	@ (800510c <HAL_RCC_GetPCLK2Freq+0x20>)
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	0b5b      	lsrs	r3, r3, #13
 80050fc:	f003 0307 	and.w	r3, r3, #7
 8005100:	4903      	ldr	r1, [pc, #12]	@ (8005110 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005102:	5ccb      	ldrb	r3, [r1, r3]
 8005104:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005108:	4618      	mov	r0, r3
 800510a:	bd80      	pop	{r7, pc}
 800510c:	40023800 	.word	0x40023800
 8005110:	0800d008 	.word	0x0800d008

08005114 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e041      	b.n	80051aa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d106      	bne.n	8005140 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fc fe3c 	bl	8001db8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3304      	adds	r3, #4
 8005150:	4619      	mov	r1, r3
 8005152:	4610      	mov	r0, r2
 8005154:	f000 f9b8 	bl	80054c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
	...

080051b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d109      	bne.n	80051d8 <HAL_TIM_PWM_Start+0x24>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	bf14      	ite	ne
 80051d0:	2301      	movne	r3, #1
 80051d2:	2300      	moveq	r3, #0
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	e022      	b.n	800521e <HAL_TIM_PWM_Start+0x6a>
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d109      	bne.n	80051f2 <HAL_TIM_PWM_Start+0x3e>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	bf14      	ite	ne
 80051ea:	2301      	movne	r3, #1
 80051ec:	2300      	moveq	r3, #0
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	e015      	b.n	800521e <HAL_TIM_PWM_Start+0x6a>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d109      	bne.n	800520c <HAL_TIM_PWM_Start+0x58>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b01      	cmp	r3, #1
 8005202:	bf14      	ite	ne
 8005204:	2301      	movne	r3, #1
 8005206:	2300      	moveq	r3, #0
 8005208:	b2db      	uxtb	r3, r3
 800520a:	e008      	b.n	800521e <HAL_TIM_PWM_Start+0x6a>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005212:	b2db      	uxtb	r3, r3
 8005214:	2b01      	cmp	r3, #1
 8005216:	bf14      	ite	ne
 8005218:	2301      	movne	r3, #1
 800521a:	2300      	moveq	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e07c      	b.n	8005320 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d104      	bne.n	8005236 <HAL_TIM_PWM_Start+0x82>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005234:	e013      	b.n	800525e <HAL_TIM_PWM_Start+0xaa>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b04      	cmp	r3, #4
 800523a:	d104      	bne.n	8005246 <HAL_TIM_PWM_Start+0x92>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005244:	e00b      	b.n	800525e <HAL_TIM_PWM_Start+0xaa>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b08      	cmp	r3, #8
 800524a:	d104      	bne.n	8005256 <HAL_TIM_PWM_Start+0xa2>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005254:	e003      	b.n	800525e <HAL_TIM_PWM_Start+0xaa>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2202      	movs	r2, #2
 800525a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2201      	movs	r2, #1
 8005264:	6839      	ldr	r1, [r7, #0]
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fb8a 	bl	8005980 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a2d      	ldr	r2, [pc, #180]	@ (8005328 <HAL_TIM_PWM_Start+0x174>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d004      	beq.n	8005280 <HAL_TIM_PWM_Start+0xcc>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a2c      	ldr	r2, [pc, #176]	@ (800532c <HAL_TIM_PWM_Start+0x178>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d101      	bne.n	8005284 <HAL_TIM_PWM_Start+0xd0>
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <HAL_TIM_PWM_Start+0xd2>
 8005284:	2300      	movs	r3, #0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d007      	beq.n	800529a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005298:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a22      	ldr	r2, [pc, #136]	@ (8005328 <HAL_TIM_PWM_Start+0x174>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d022      	beq.n	80052ea <HAL_TIM_PWM_Start+0x136>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ac:	d01d      	beq.n	80052ea <HAL_TIM_PWM_Start+0x136>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a1f      	ldr	r2, [pc, #124]	@ (8005330 <HAL_TIM_PWM_Start+0x17c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d018      	beq.n	80052ea <HAL_TIM_PWM_Start+0x136>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005334 <HAL_TIM_PWM_Start+0x180>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d013      	beq.n	80052ea <HAL_TIM_PWM_Start+0x136>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a1c      	ldr	r2, [pc, #112]	@ (8005338 <HAL_TIM_PWM_Start+0x184>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d00e      	beq.n	80052ea <HAL_TIM_PWM_Start+0x136>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a16      	ldr	r2, [pc, #88]	@ (800532c <HAL_TIM_PWM_Start+0x178>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d009      	beq.n	80052ea <HAL_TIM_PWM_Start+0x136>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a18      	ldr	r2, [pc, #96]	@ (800533c <HAL_TIM_PWM_Start+0x188>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d004      	beq.n	80052ea <HAL_TIM_PWM_Start+0x136>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a16      	ldr	r2, [pc, #88]	@ (8005340 <HAL_TIM_PWM_Start+0x18c>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d111      	bne.n	800530e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b06      	cmp	r3, #6
 80052fa:	d010      	beq.n	800531e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0201 	orr.w	r2, r2, #1
 800530a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800530c:	e007      	b.n	800531e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f042 0201 	orr.w	r2, r2, #1
 800531c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	40010000 	.word	0x40010000
 800532c:	40010400 	.word	0x40010400
 8005330:	40000400 	.word	0x40000400
 8005334:	40000800 	.word	0x40000800
 8005338:	40000c00 	.word	0x40000c00
 800533c:	40014000 	.word	0x40014000
 8005340:	40001800 	.word	0x40001800

08005344 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005350:	2300      	movs	r3, #0
 8005352:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800535a:	2b01      	cmp	r3, #1
 800535c:	d101      	bne.n	8005362 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800535e:	2302      	movs	r3, #2
 8005360:	e0ae      	b.n	80054c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2b0c      	cmp	r3, #12
 800536e:	f200 809f 	bhi.w	80054b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005372:	a201      	add	r2, pc, #4	@ (adr r2, 8005378 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005378:	080053ad 	.word	0x080053ad
 800537c:	080054b1 	.word	0x080054b1
 8005380:	080054b1 	.word	0x080054b1
 8005384:	080054b1 	.word	0x080054b1
 8005388:	080053ed 	.word	0x080053ed
 800538c:	080054b1 	.word	0x080054b1
 8005390:	080054b1 	.word	0x080054b1
 8005394:	080054b1 	.word	0x080054b1
 8005398:	0800542f 	.word	0x0800542f
 800539c:	080054b1 	.word	0x080054b1
 80053a0:	080054b1 	.word	0x080054b1
 80053a4:	080054b1 	.word	0x080054b1
 80053a8:	0800546f 	.word	0x0800546f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	68b9      	ldr	r1, [r7, #8]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 f934 	bl	8005620 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f042 0208 	orr.w	r2, r2, #8
 80053c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699a      	ldr	r2, [r3, #24]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0204 	bic.w	r2, r2, #4
 80053d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6999      	ldr	r1, [r3, #24]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	691a      	ldr	r2, [r3, #16]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	619a      	str	r2, [r3, #24]
      break;
 80053ea:	e064      	b.n	80054b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68b9      	ldr	r1, [r7, #8]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 f984 	bl	8005700 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	699a      	ldr	r2, [r3, #24]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005406:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699a      	ldr	r2, [r3, #24]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005416:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6999      	ldr	r1, [r3, #24]
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	021a      	lsls	r2, r3, #8
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	430a      	orrs	r2, r1
 800542a:	619a      	str	r2, [r3, #24]
      break;
 800542c:	e043      	b.n	80054b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68b9      	ldr	r1, [r7, #8]
 8005434:	4618      	mov	r0, r3
 8005436:	f000 f9d9 	bl	80057ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69da      	ldr	r2, [r3, #28]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f042 0208 	orr.w	r2, r2, #8
 8005448:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69da      	ldr	r2, [r3, #28]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 0204 	bic.w	r2, r2, #4
 8005458:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69d9      	ldr	r1, [r3, #28]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	691a      	ldr	r2, [r3, #16]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	61da      	str	r2, [r3, #28]
      break;
 800546c:	e023      	b.n	80054b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68b9      	ldr	r1, [r7, #8]
 8005474:	4618      	mov	r0, r3
 8005476:	f000 fa2d 	bl	80058d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	69da      	ldr	r2, [r3, #28]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005488:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69da      	ldr	r2, [r3, #28]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005498:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	69d9      	ldr	r1, [r3, #28]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	021a      	lsls	r2, r3, #8
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	61da      	str	r2, [r3, #28]
      break;
 80054ae:	e002      	b.n	80054b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	75fb      	strb	r3, [r7, #23]
      break;
 80054b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054be:	7dfb      	ldrb	r3, [r7, #23]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3718      	adds	r7, #24
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a46      	ldr	r2, [pc, #280]	@ (80055f4 <TIM_Base_SetConfig+0x12c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d013      	beq.n	8005508 <TIM_Base_SetConfig+0x40>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054e6:	d00f      	beq.n	8005508 <TIM_Base_SetConfig+0x40>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a43      	ldr	r2, [pc, #268]	@ (80055f8 <TIM_Base_SetConfig+0x130>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00b      	beq.n	8005508 <TIM_Base_SetConfig+0x40>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a42      	ldr	r2, [pc, #264]	@ (80055fc <TIM_Base_SetConfig+0x134>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d007      	beq.n	8005508 <TIM_Base_SetConfig+0x40>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a41      	ldr	r2, [pc, #260]	@ (8005600 <TIM_Base_SetConfig+0x138>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d003      	beq.n	8005508 <TIM_Base_SetConfig+0x40>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a40      	ldr	r2, [pc, #256]	@ (8005604 <TIM_Base_SetConfig+0x13c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d108      	bne.n	800551a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800550e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a35      	ldr	r2, [pc, #212]	@ (80055f4 <TIM_Base_SetConfig+0x12c>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d02b      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005528:	d027      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a32      	ldr	r2, [pc, #200]	@ (80055f8 <TIM_Base_SetConfig+0x130>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d023      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a31      	ldr	r2, [pc, #196]	@ (80055fc <TIM_Base_SetConfig+0x134>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d01f      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a30      	ldr	r2, [pc, #192]	@ (8005600 <TIM_Base_SetConfig+0x138>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d01b      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a2f      	ldr	r2, [pc, #188]	@ (8005604 <TIM_Base_SetConfig+0x13c>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d017      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a2e      	ldr	r2, [pc, #184]	@ (8005608 <TIM_Base_SetConfig+0x140>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d013      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a2d      	ldr	r2, [pc, #180]	@ (800560c <TIM_Base_SetConfig+0x144>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d00f      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a2c      	ldr	r2, [pc, #176]	@ (8005610 <TIM_Base_SetConfig+0x148>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00b      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a2b      	ldr	r2, [pc, #172]	@ (8005614 <TIM_Base_SetConfig+0x14c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d007      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a2a      	ldr	r2, [pc, #168]	@ (8005618 <TIM_Base_SetConfig+0x150>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d003      	beq.n	800557a <TIM_Base_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a29      	ldr	r2, [pc, #164]	@ (800561c <TIM_Base_SetConfig+0x154>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d108      	bne.n	800558c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005580:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4313      	orrs	r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	689a      	ldr	r2, [r3, #8]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a10      	ldr	r2, [pc, #64]	@ (80055f4 <TIM_Base_SetConfig+0x12c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d003      	beq.n	80055c0 <TIM_Base_SetConfig+0xf8>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a12      	ldr	r2, [pc, #72]	@ (8005604 <TIM_Base_SetConfig+0x13c>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d103      	bne.n	80055c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d105      	bne.n	80055e6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f023 0201 	bic.w	r2, r3, #1
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	611a      	str	r2, [r3, #16]
  }
}
 80055e6:	bf00      	nop
 80055e8:	3714      	adds	r7, #20
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	40010000 	.word	0x40010000
 80055f8:	40000400 	.word	0x40000400
 80055fc:	40000800 	.word	0x40000800
 8005600:	40000c00 	.word	0x40000c00
 8005604:	40010400 	.word	0x40010400
 8005608:	40014000 	.word	0x40014000
 800560c:	40014400 	.word	0x40014400
 8005610:	40014800 	.word	0x40014800
 8005614:	40001800 	.word	0x40001800
 8005618:	40001c00 	.word	0x40001c00
 800561c:	40002000 	.word	0x40002000

08005620 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	f023 0201 	bic.w	r2, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	699b      	ldr	r3, [r3, #24]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800564e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 0303 	bic.w	r3, r3, #3
 8005656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	4313      	orrs	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f023 0302 	bic.w	r3, r3, #2
 8005668:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	4a20      	ldr	r2, [pc, #128]	@ (80056f8 <TIM_OC1_SetConfig+0xd8>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d003      	beq.n	8005684 <TIM_OC1_SetConfig+0x64>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a1f      	ldr	r2, [pc, #124]	@ (80056fc <TIM_OC1_SetConfig+0xdc>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d10c      	bne.n	800569e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f023 0308 	bic.w	r3, r3, #8
 800568a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	4313      	orrs	r3, r2
 8005694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f023 0304 	bic.w	r3, r3, #4
 800569c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a15      	ldr	r2, [pc, #84]	@ (80056f8 <TIM_OC1_SetConfig+0xd8>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d003      	beq.n	80056ae <TIM_OC1_SetConfig+0x8e>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	4a14      	ldr	r2, [pc, #80]	@ (80056fc <TIM_OC1_SetConfig+0xdc>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d111      	bne.n	80056d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	699b      	ldr	r3, [r3, #24]
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	685a      	ldr	r2, [r3, #4]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	621a      	str	r2, [r3, #32]
}
 80056ec:	bf00      	nop
 80056ee:	371c      	adds	r7, #28
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr
 80056f8:	40010000 	.word	0x40010000
 80056fc:	40010400 	.word	0x40010400

08005700 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	f023 0210 	bic.w	r2, r3, #16
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800572e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005736:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	021b      	lsls	r3, r3, #8
 800573e:	68fa      	ldr	r2, [r7, #12]
 8005740:	4313      	orrs	r3, r2
 8005742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	f023 0320 	bic.w	r3, r3, #32
 800574a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	4313      	orrs	r3, r2
 8005756:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4a22      	ldr	r2, [pc, #136]	@ (80057e4 <TIM_OC2_SetConfig+0xe4>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d003      	beq.n	8005768 <TIM_OC2_SetConfig+0x68>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a21      	ldr	r2, [pc, #132]	@ (80057e8 <TIM_OC2_SetConfig+0xe8>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d10d      	bne.n	8005784 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800576e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	4313      	orrs	r3, r2
 800577a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005782:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a17      	ldr	r2, [pc, #92]	@ (80057e4 <TIM_OC2_SetConfig+0xe4>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d003      	beq.n	8005794 <TIM_OC2_SetConfig+0x94>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a16      	ldr	r2, [pc, #88]	@ (80057e8 <TIM_OC2_SetConfig+0xe8>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d113      	bne.n	80057bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800579a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80057a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	699b      	ldr	r3, [r3, #24]
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	693a      	ldr	r2, [r7, #16]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	685a      	ldr	r2, [r3, #4]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	621a      	str	r2, [r3, #32]
}
 80057d6:	bf00      	nop
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40010000 	.word	0x40010000
 80057e8:	40010400 	.word	0x40010400

080057ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69db      	ldr	r3, [r3, #28]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800581a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 0303 	bic.w	r3, r3, #3
 8005822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	021b      	lsls	r3, r3, #8
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	4313      	orrs	r3, r2
 8005840:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4a21      	ldr	r2, [pc, #132]	@ (80058cc <TIM_OC3_SetConfig+0xe0>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d003      	beq.n	8005852 <TIM_OC3_SetConfig+0x66>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	4a20      	ldr	r2, [pc, #128]	@ (80058d0 <TIM_OC3_SetConfig+0xe4>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d10d      	bne.n	800586e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005858:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	021b      	lsls	r3, r3, #8
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	4313      	orrs	r3, r2
 8005864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800586c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	4a16      	ldr	r2, [pc, #88]	@ (80058cc <TIM_OC3_SetConfig+0xe0>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d003      	beq.n	800587e <TIM_OC3_SetConfig+0x92>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a15      	ldr	r2, [pc, #84]	@ (80058d0 <TIM_OC3_SetConfig+0xe4>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d113      	bne.n	80058a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800588c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	4313      	orrs	r3, r2
 8005898:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	011b      	lsls	r3, r3, #4
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68fa      	ldr	r2, [r7, #12]
 80058b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	621a      	str	r2, [r3, #32]
}
 80058c0:	bf00      	nop
 80058c2:	371c      	adds	r7, #28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr
 80058cc:	40010000 	.word	0x40010000
 80058d0:	40010400 	.word	0x40010400

080058d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800590a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	021b      	lsls	r3, r3, #8
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800591e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	031b      	lsls	r3, r3, #12
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	4313      	orrs	r3, r2
 800592a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a12      	ldr	r2, [pc, #72]	@ (8005978 <TIM_OC4_SetConfig+0xa4>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d003      	beq.n	800593c <TIM_OC4_SetConfig+0x68>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a11      	ldr	r2, [pc, #68]	@ (800597c <TIM_OC4_SetConfig+0xa8>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d109      	bne.n	8005950 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005942:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	019b      	lsls	r3, r3, #6
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	4313      	orrs	r3, r2
 800594e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68fa      	ldr	r2, [r7, #12]
 800595a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	685a      	ldr	r2, [r3, #4]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	621a      	str	r2, [r3, #32]
}
 800596a:	bf00      	nop
 800596c:	371c      	adds	r7, #28
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40010000 	.word	0x40010000
 800597c:	40010400 	.word	0x40010400

08005980 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005980:	b480      	push	{r7}
 8005982:	b087      	sub	sp, #28
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	f003 031f 	and.w	r3, r3, #31
 8005992:	2201      	movs	r2, #1
 8005994:	fa02 f303 	lsl.w	r3, r2, r3
 8005998:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	6a1a      	ldr	r2, [r3, #32]
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	43db      	mvns	r3, r3
 80059a2:	401a      	ands	r2, r3
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6a1a      	ldr	r2, [r3, #32]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f003 031f 	and.w	r3, r3, #31
 80059b2:	6879      	ldr	r1, [r7, #4]
 80059b4:	fa01 f303 	lsl.w	r3, r1, r3
 80059b8:	431a      	orrs	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	621a      	str	r2, [r3, #32]
}
 80059be:	bf00      	nop
 80059c0:	371c      	adds	r7, #28
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr
	...

080059cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d101      	bne.n	80059e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059e0:	2302      	movs	r3, #2
 80059e2:	e05a      	b.n	8005a9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2202      	movs	r2, #2
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a21      	ldr	r2, [pc, #132]	@ (8005aa8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d022      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a30:	d01d      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a1d      	ldr	r2, [pc, #116]	@ (8005aac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d018      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a1b      	ldr	r2, [pc, #108]	@ (8005ab0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d013      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a1a      	ldr	r2, [pc, #104]	@ (8005ab4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d00e      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a18      	ldr	r2, [pc, #96]	@ (8005ab8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d009      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a17      	ldr	r2, [pc, #92]	@ (8005abc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d004      	beq.n	8005a6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a15      	ldr	r2, [pc, #84]	@ (8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d10c      	bne.n	8005a88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr
 8005aa6:	bf00      	nop
 8005aa8:	40010000 	.word	0x40010000
 8005aac:	40000400 	.word	0x40000400
 8005ab0:	40000800 	.word	0x40000800
 8005ab4:	40000c00 	.word	0x40000c00
 8005ab8:	40010400 	.word	0x40010400
 8005abc:	40014000 	.word	0x40014000
 8005ac0:	40001800 	.word	0x40001800

08005ac4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d101      	bne.n	8005ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e042      	b.n	8005b5c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d106      	bne.n	8005af0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f7fc fa36 	bl	8001f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2224      	movs	r2, #36	@ 0x24
 8005af4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68da      	ldr	r2, [r3, #12]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005b06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 f973 	bl	8005df4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	691a      	ldr	r2, [r3, #16]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	695a      	ldr	r2, [r3, #20]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68da      	ldr	r2, [r3, #12]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2220      	movs	r2, #32
 8005b48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b08a      	sub	sp, #40	@ 0x28
 8005b68:	af02      	add	r7, sp, #8
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	603b      	str	r3, [r7, #0]
 8005b70:	4613      	mov	r3, r2
 8005b72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b20      	cmp	r3, #32
 8005b82:	d175      	bne.n	8005c70 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d002      	beq.n	8005b90 <HAL_UART_Transmit+0x2c>
 8005b8a:	88fb      	ldrh	r3, [r7, #6]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e06e      	b.n	8005c72 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2221      	movs	r2, #33	@ 0x21
 8005b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ba2:	f7fc fbc5 	bl	8002330 <HAL_GetTick>
 8005ba6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	88fa      	ldrh	r2, [r7, #6]
 8005bac:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	88fa      	ldrh	r2, [r7, #6]
 8005bb2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bbc:	d108      	bne.n	8005bd0 <HAL_UART_Transmit+0x6c>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d104      	bne.n	8005bd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	61bb      	str	r3, [r7, #24]
 8005bce:	e003      	b.n	8005bd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bd8:	e02e      	b.n	8005c38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	2200      	movs	r2, #0
 8005be2:	2180      	movs	r1, #128	@ 0x80
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 f848 	bl	8005c7a <UART_WaitOnFlagUntilTimeout>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d005      	beq.n	8005bfc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2220      	movs	r2, #32
 8005bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e03a      	b.n	8005c72 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10b      	bne.n	8005c1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	3302      	adds	r3, #2
 8005c16:	61bb      	str	r3, [r7, #24]
 8005c18:	e007      	b.n	8005c2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	781a      	ldrb	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c24:	69fb      	ldr	r3, [r7, #28]
 8005c26:	3301      	adds	r3, #1
 8005c28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	3b01      	subs	r3, #1
 8005c32:	b29a      	uxth	r2, r3
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d1cb      	bne.n	8005bda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2140      	movs	r1, #64	@ 0x40
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 f814 	bl	8005c7a <UART_WaitOnFlagUntilTimeout>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d005      	beq.n	8005c64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e006      	b.n	8005c72 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2220      	movs	r2, #32
 8005c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	e000      	b.n	8005c72 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005c70:	2302      	movs	r3, #2
  }
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3720      	adds	r7, #32
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b086      	sub	sp, #24
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	60f8      	str	r0, [r7, #12]
 8005c82:	60b9      	str	r1, [r7, #8]
 8005c84:	603b      	str	r3, [r7, #0]
 8005c86:	4613      	mov	r3, r2
 8005c88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c8a:	e03b      	b.n	8005d04 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c8c:	6a3b      	ldr	r3, [r7, #32]
 8005c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c92:	d037      	beq.n	8005d04 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c94:	f7fc fb4c 	bl	8002330 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	6a3a      	ldr	r2, [r7, #32]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d302      	bcc.n	8005caa <UART_WaitOnFlagUntilTimeout+0x30>
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d101      	bne.n	8005cae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e03a      	b.n	8005d24 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f003 0304 	and.w	r3, r3, #4
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d023      	beq.n	8005d04 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2b80      	cmp	r3, #128	@ 0x80
 8005cc0:	d020      	beq.n	8005d04 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2b40      	cmp	r3, #64	@ 0x40
 8005cc6:	d01d      	beq.n	8005d04 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b08      	cmp	r3, #8
 8005cd4:	d116      	bne.n	8005d04 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	617b      	str	r3, [r7, #20]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	617b      	str	r3, [r7, #20]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	617b      	str	r3, [r7, #20]
 8005cea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 f81d 	bl	8005d2c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2208      	movs	r2, #8
 8005cf6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e00f      	b.n	8005d24 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	68ba      	ldr	r2, [r7, #8]
 8005d10:	429a      	cmp	r2, r3
 8005d12:	bf0c      	ite	eq
 8005d14:	2301      	moveq	r3, #1
 8005d16:	2300      	movne	r3, #0
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	79fb      	ldrb	r3, [r7, #7]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d0b4      	beq.n	8005c8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3718      	adds	r7, #24
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b095      	sub	sp, #84	@ 0x54
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	330c      	adds	r3, #12
 8005d3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d3e:	e853 3f00 	ldrex	r3, [r3]
 8005d42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	330c      	adds	r3, #12
 8005d52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005d54:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d5c:	e841 2300 	strex	r3, r2, [r1]
 8005d60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d1e5      	bne.n	8005d34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3314      	adds	r3, #20
 8005d6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	e853 3f00 	ldrex	r3, [r3]
 8005d76:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	f023 0301 	bic.w	r3, r3, #1
 8005d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3314      	adds	r3, #20
 8005d86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d90:	e841 2300 	strex	r3, r2, [r1]
 8005d94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1e5      	bne.n	8005d68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d119      	bne.n	8005dd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	330c      	adds	r3, #12
 8005daa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	e853 3f00 	ldrex	r3, [r3]
 8005db2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f023 0310 	bic.w	r3, r3, #16
 8005dba:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	330c      	adds	r3, #12
 8005dc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dc4:	61ba      	str	r2, [r7, #24]
 8005dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc8:	6979      	ldr	r1, [r7, #20]
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	e841 2300 	strex	r3, r2, [r1]
 8005dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d1e5      	bne.n	8005da4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005de6:	bf00      	nop
 8005de8:	3754      	adds	r7, #84	@ 0x54
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr
	...

08005df4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005df8:	b0c0      	sub	sp, #256	@ 0x100
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e10:	68d9      	ldr	r1, [r3, #12]
 8005e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	ea40 0301 	orr.w	r3, r0, r1
 8005e1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e22:	689a      	ldr	r2, [r3, #8]
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	431a      	orrs	r2, r3
 8005e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e30:	695b      	ldr	r3, [r3, #20]
 8005e32:	431a      	orrs	r2, r3
 8005e34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e38:	69db      	ldr	r3, [r3, #28]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005e4c:	f021 010c 	bic.w	r1, r1, #12
 8005e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e5a:	430b      	orrs	r3, r1
 8005e5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e6e:	6999      	ldr	r1, [r3, #24]
 8005e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	ea40 0301 	orr.w	r3, r0, r1
 8005e7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e80:	681a      	ldr	r2, [r3, #0]
 8005e82:	4b8f      	ldr	r3, [pc, #572]	@ (80060c0 <UART_SetConfig+0x2cc>)
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d005      	beq.n	8005e94 <UART_SetConfig+0xa0>
 8005e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	4b8d      	ldr	r3, [pc, #564]	@ (80060c4 <UART_SetConfig+0x2d0>)
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d104      	bne.n	8005e9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e94:	f7ff f92a 	bl	80050ec <HAL_RCC_GetPCLK2Freq>
 8005e98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e9c:	e003      	b.n	8005ea6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e9e:	f7ff f911 	bl	80050c4 <HAL_RCC_GetPCLK1Freq>
 8005ea2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005eb0:	f040 810c 	bne.w	80060cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005ebe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005ec2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005ec6:	4622      	mov	r2, r4
 8005ec8:	462b      	mov	r3, r5
 8005eca:	1891      	adds	r1, r2, r2
 8005ecc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005ece:	415b      	adcs	r3, r3
 8005ed0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ed2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	eb12 0801 	adds.w	r8, r2, r1
 8005edc:	4629      	mov	r1, r5
 8005ede:	eb43 0901 	adc.w	r9, r3, r1
 8005ee2:	f04f 0200 	mov.w	r2, #0
 8005ee6:	f04f 0300 	mov.w	r3, #0
 8005eea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005eee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ef2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ef6:	4690      	mov	r8, r2
 8005ef8:	4699      	mov	r9, r3
 8005efa:	4623      	mov	r3, r4
 8005efc:	eb18 0303 	adds.w	r3, r8, r3
 8005f00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005f04:	462b      	mov	r3, r5
 8005f06:	eb49 0303 	adc.w	r3, r9, r3
 8005f0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005f1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005f1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005f22:	460b      	mov	r3, r1
 8005f24:	18db      	adds	r3, r3, r3
 8005f26:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f28:	4613      	mov	r3, r2
 8005f2a:	eb42 0303 	adc.w	r3, r2, r3
 8005f2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005f34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005f38:	f7fa fe86 	bl	8000c48 <__aeabi_uldivmod>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	460b      	mov	r3, r1
 8005f40:	4b61      	ldr	r3, [pc, #388]	@ (80060c8 <UART_SetConfig+0x2d4>)
 8005f42:	fba3 2302 	umull	r2, r3, r3, r2
 8005f46:	095b      	lsrs	r3, r3, #5
 8005f48:	011c      	lsls	r4, r3, #4
 8005f4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005f58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005f5c:	4642      	mov	r2, r8
 8005f5e:	464b      	mov	r3, r9
 8005f60:	1891      	adds	r1, r2, r2
 8005f62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005f64:	415b      	adcs	r3, r3
 8005f66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005f6c:	4641      	mov	r1, r8
 8005f6e:	eb12 0a01 	adds.w	sl, r2, r1
 8005f72:	4649      	mov	r1, r9
 8005f74:	eb43 0b01 	adc.w	fp, r3, r1
 8005f78:	f04f 0200 	mov.w	r2, #0
 8005f7c:	f04f 0300 	mov.w	r3, #0
 8005f80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f8c:	4692      	mov	sl, r2
 8005f8e:	469b      	mov	fp, r3
 8005f90:	4643      	mov	r3, r8
 8005f92:	eb1a 0303 	adds.w	r3, sl, r3
 8005f96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f9a:	464b      	mov	r3, r9
 8005f9c:	eb4b 0303 	adc.w	r3, fp, r3
 8005fa0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005fb0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005fb4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	18db      	adds	r3, r3, r3
 8005fbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	eb42 0303 	adc.w	r3, r2, r3
 8005fc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005fca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005fce:	f7fa fe3b 	bl	8000c48 <__aeabi_uldivmod>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	4611      	mov	r1, r2
 8005fd8:	4b3b      	ldr	r3, [pc, #236]	@ (80060c8 <UART_SetConfig+0x2d4>)
 8005fda:	fba3 2301 	umull	r2, r3, r3, r1
 8005fde:	095b      	lsrs	r3, r3, #5
 8005fe0:	2264      	movs	r2, #100	@ 0x64
 8005fe2:	fb02 f303 	mul.w	r3, r2, r3
 8005fe6:	1acb      	subs	r3, r1, r3
 8005fe8:	00db      	lsls	r3, r3, #3
 8005fea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005fee:	4b36      	ldr	r3, [pc, #216]	@ (80060c8 <UART_SetConfig+0x2d4>)
 8005ff0:	fba3 2302 	umull	r2, r3, r3, r2
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ffc:	441c      	add	r4, r3
 8005ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006002:	2200      	movs	r2, #0
 8006004:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006008:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800600c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006010:	4642      	mov	r2, r8
 8006012:	464b      	mov	r3, r9
 8006014:	1891      	adds	r1, r2, r2
 8006016:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006018:	415b      	adcs	r3, r3
 800601a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800601c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006020:	4641      	mov	r1, r8
 8006022:	1851      	adds	r1, r2, r1
 8006024:	6339      	str	r1, [r7, #48]	@ 0x30
 8006026:	4649      	mov	r1, r9
 8006028:	414b      	adcs	r3, r1
 800602a:	637b      	str	r3, [r7, #52]	@ 0x34
 800602c:	f04f 0200 	mov.w	r2, #0
 8006030:	f04f 0300 	mov.w	r3, #0
 8006034:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006038:	4659      	mov	r1, fp
 800603a:	00cb      	lsls	r3, r1, #3
 800603c:	4651      	mov	r1, sl
 800603e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006042:	4651      	mov	r1, sl
 8006044:	00ca      	lsls	r2, r1, #3
 8006046:	4610      	mov	r0, r2
 8006048:	4619      	mov	r1, r3
 800604a:	4603      	mov	r3, r0
 800604c:	4642      	mov	r2, r8
 800604e:	189b      	adds	r3, r3, r2
 8006050:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006054:	464b      	mov	r3, r9
 8006056:	460a      	mov	r2, r1
 8006058:	eb42 0303 	adc.w	r3, r2, r3
 800605c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800606c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006070:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006074:	460b      	mov	r3, r1
 8006076:	18db      	adds	r3, r3, r3
 8006078:	62bb      	str	r3, [r7, #40]	@ 0x28
 800607a:	4613      	mov	r3, r2
 800607c:	eb42 0303 	adc.w	r3, r2, r3
 8006080:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006082:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006086:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800608a:	f7fa fddd 	bl	8000c48 <__aeabi_uldivmod>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	4b0d      	ldr	r3, [pc, #52]	@ (80060c8 <UART_SetConfig+0x2d4>)
 8006094:	fba3 1302 	umull	r1, r3, r3, r2
 8006098:	095b      	lsrs	r3, r3, #5
 800609a:	2164      	movs	r1, #100	@ 0x64
 800609c:	fb01 f303 	mul.w	r3, r1, r3
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	3332      	adds	r3, #50	@ 0x32
 80060a6:	4a08      	ldr	r2, [pc, #32]	@ (80060c8 <UART_SetConfig+0x2d4>)
 80060a8:	fba2 2303 	umull	r2, r3, r2, r3
 80060ac:	095b      	lsrs	r3, r3, #5
 80060ae:	f003 0207 	and.w	r2, r3, #7
 80060b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	4422      	add	r2, r4
 80060ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060bc:	e106      	b.n	80062cc <UART_SetConfig+0x4d8>
 80060be:	bf00      	nop
 80060c0:	40011000 	.word	0x40011000
 80060c4:	40011400 	.word	0x40011400
 80060c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060d0:	2200      	movs	r2, #0
 80060d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060d6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80060da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80060de:	4642      	mov	r2, r8
 80060e0:	464b      	mov	r3, r9
 80060e2:	1891      	adds	r1, r2, r2
 80060e4:	6239      	str	r1, [r7, #32]
 80060e6:	415b      	adcs	r3, r3
 80060e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80060ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80060ee:	4641      	mov	r1, r8
 80060f0:	1854      	adds	r4, r2, r1
 80060f2:	4649      	mov	r1, r9
 80060f4:	eb43 0501 	adc.w	r5, r3, r1
 80060f8:	f04f 0200 	mov.w	r2, #0
 80060fc:	f04f 0300 	mov.w	r3, #0
 8006100:	00eb      	lsls	r3, r5, #3
 8006102:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006106:	00e2      	lsls	r2, r4, #3
 8006108:	4614      	mov	r4, r2
 800610a:	461d      	mov	r5, r3
 800610c:	4643      	mov	r3, r8
 800610e:	18e3      	adds	r3, r4, r3
 8006110:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006114:	464b      	mov	r3, r9
 8006116:	eb45 0303 	adc.w	r3, r5, r3
 800611a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800611e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800612a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800612e:	f04f 0200 	mov.w	r2, #0
 8006132:	f04f 0300 	mov.w	r3, #0
 8006136:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800613a:	4629      	mov	r1, r5
 800613c:	008b      	lsls	r3, r1, #2
 800613e:	4621      	mov	r1, r4
 8006140:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006144:	4621      	mov	r1, r4
 8006146:	008a      	lsls	r2, r1, #2
 8006148:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800614c:	f7fa fd7c 	bl	8000c48 <__aeabi_uldivmod>
 8006150:	4602      	mov	r2, r0
 8006152:	460b      	mov	r3, r1
 8006154:	4b60      	ldr	r3, [pc, #384]	@ (80062d8 <UART_SetConfig+0x4e4>)
 8006156:	fba3 2302 	umull	r2, r3, r3, r2
 800615a:	095b      	lsrs	r3, r3, #5
 800615c:	011c      	lsls	r4, r3, #4
 800615e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006162:	2200      	movs	r2, #0
 8006164:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006168:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800616c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006170:	4642      	mov	r2, r8
 8006172:	464b      	mov	r3, r9
 8006174:	1891      	adds	r1, r2, r2
 8006176:	61b9      	str	r1, [r7, #24]
 8006178:	415b      	adcs	r3, r3
 800617a:	61fb      	str	r3, [r7, #28]
 800617c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006180:	4641      	mov	r1, r8
 8006182:	1851      	adds	r1, r2, r1
 8006184:	6139      	str	r1, [r7, #16]
 8006186:	4649      	mov	r1, r9
 8006188:	414b      	adcs	r3, r1
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	f04f 0200 	mov.w	r2, #0
 8006190:	f04f 0300 	mov.w	r3, #0
 8006194:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006198:	4659      	mov	r1, fp
 800619a:	00cb      	lsls	r3, r1, #3
 800619c:	4651      	mov	r1, sl
 800619e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061a2:	4651      	mov	r1, sl
 80061a4:	00ca      	lsls	r2, r1, #3
 80061a6:	4610      	mov	r0, r2
 80061a8:	4619      	mov	r1, r3
 80061aa:	4603      	mov	r3, r0
 80061ac:	4642      	mov	r2, r8
 80061ae:	189b      	adds	r3, r3, r2
 80061b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80061b4:	464b      	mov	r3, r9
 80061b6:	460a      	mov	r2, r1
 80061b8:	eb42 0303 	adc.w	r3, r2, r3
 80061bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80061c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80061ca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80061cc:	f04f 0200 	mov.w	r2, #0
 80061d0:	f04f 0300 	mov.w	r3, #0
 80061d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80061d8:	4649      	mov	r1, r9
 80061da:	008b      	lsls	r3, r1, #2
 80061dc:	4641      	mov	r1, r8
 80061de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061e2:	4641      	mov	r1, r8
 80061e4:	008a      	lsls	r2, r1, #2
 80061e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80061ea:	f7fa fd2d 	bl	8000c48 <__aeabi_uldivmod>
 80061ee:	4602      	mov	r2, r0
 80061f0:	460b      	mov	r3, r1
 80061f2:	4611      	mov	r1, r2
 80061f4:	4b38      	ldr	r3, [pc, #224]	@ (80062d8 <UART_SetConfig+0x4e4>)
 80061f6:	fba3 2301 	umull	r2, r3, r3, r1
 80061fa:	095b      	lsrs	r3, r3, #5
 80061fc:	2264      	movs	r2, #100	@ 0x64
 80061fe:	fb02 f303 	mul.w	r3, r2, r3
 8006202:	1acb      	subs	r3, r1, r3
 8006204:	011b      	lsls	r3, r3, #4
 8006206:	3332      	adds	r3, #50	@ 0x32
 8006208:	4a33      	ldr	r2, [pc, #204]	@ (80062d8 <UART_SetConfig+0x4e4>)
 800620a:	fba2 2303 	umull	r2, r3, r2, r3
 800620e:	095b      	lsrs	r3, r3, #5
 8006210:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006214:	441c      	add	r4, r3
 8006216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800621a:	2200      	movs	r2, #0
 800621c:	673b      	str	r3, [r7, #112]	@ 0x70
 800621e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006220:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006224:	4642      	mov	r2, r8
 8006226:	464b      	mov	r3, r9
 8006228:	1891      	adds	r1, r2, r2
 800622a:	60b9      	str	r1, [r7, #8]
 800622c:	415b      	adcs	r3, r3
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006234:	4641      	mov	r1, r8
 8006236:	1851      	adds	r1, r2, r1
 8006238:	6039      	str	r1, [r7, #0]
 800623a:	4649      	mov	r1, r9
 800623c:	414b      	adcs	r3, r1
 800623e:	607b      	str	r3, [r7, #4]
 8006240:	f04f 0200 	mov.w	r2, #0
 8006244:	f04f 0300 	mov.w	r3, #0
 8006248:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800624c:	4659      	mov	r1, fp
 800624e:	00cb      	lsls	r3, r1, #3
 8006250:	4651      	mov	r1, sl
 8006252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006256:	4651      	mov	r1, sl
 8006258:	00ca      	lsls	r2, r1, #3
 800625a:	4610      	mov	r0, r2
 800625c:	4619      	mov	r1, r3
 800625e:	4603      	mov	r3, r0
 8006260:	4642      	mov	r2, r8
 8006262:	189b      	adds	r3, r3, r2
 8006264:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006266:	464b      	mov	r3, r9
 8006268:	460a      	mov	r2, r1
 800626a:	eb42 0303 	adc.w	r3, r2, r3
 800626e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	663b      	str	r3, [r7, #96]	@ 0x60
 800627a:	667a      	str	r2, [r7, #100]	@ 0x64
 800627c:	f04f 0200 	mov.w	r2, #0
 8006280:	f04f 0300 	mov.w	r3, #0
 8006284:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006288:	4649      	mov	r1, r9
 800628a:	008b      	lsls	r3, r1, #2
 800628c:	4641      	mov	r1, r8
 800628e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006292:	4641      	mov	r1, r8
 8006294:	008a      	lsls	r2, r1, #2
 8006296:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800629a:	f7fa fcd5 	bl	8000c48 <__aeabi_uldivmod>
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	4b0d      	ldr	r3, [pc, #52]	@ (80062d8 <UART_SetConfig+0x4e4>)
 80062a4:	fba3 1302 	umull	r1, r3, r3, r2
 80062a8:	095b      	lsrs	r3, r3, #5
 80062aa:	2164      	movs	r1, #100	@ 0x64
 80062ac:	fb01 f303 	mul.w	r3, r1, r3
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	011b      	lsls	r3, r3, #4
 80062b4:	3332      	adds	r3, #50	@ 0x32
 80062b6:	4a08      	ldr	r2, [pc, #32]	@ (80062d8 <UART_SetConfig+0x4e4>)
 80062b8:	fba2 2303 	umull	r2, r3, r2, r3
 80062bc:	095b      	lsrs	r3, r3, #5
 80062be:	f003 020f 	and.w	r2, r3, #15
 80062c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4422      	add	r2, r4
 80062ca:	609a      	str	r2, [r3, #8]
}
 80062cc:	bf00      	nop
 80062ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80062d2:	46bd      	mov	sp, r7
 80062d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062d8:	51eb851f 	.word	0x51eb851f

080062dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80062dc:	b084      	sub	sp, #16
 80062de:	b580      	push	{r7, lr}
 80062e0:	b084      	sub	sp, #16
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
 80062e6:	f107 001c 	add.w	r0, r7, #28
 80062ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062ee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d123      	bne.n	800633e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800630a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800631e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006322:	2b01      	cmp	r3, #1
 8006324:	d105      	bne.n	8006332 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f001 fae8 	bl	8007908 <USB_CoreReset>
 8006338:	4603      	mov	r3, r0
 800633a:	73fb      	strb	r3, [r7, #15]
 800633c:	e01b      	b.n	8006376 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f001 fadc 	bl	8007908 <USB_CoreReset>
 8006350:	4603      	mov	r3, r0
 8006352:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006354:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006358:	2b00      	cmp	r3, #0
 800635a:	d106      	bne.n	800636a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006360:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	639a      	str	r2, [r3, #56]	@ 0x38
 8006368:	e005      	b.n	8006376 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800636e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006376:	7fbb      	ldrb	r3, [r7, #30]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d10b      	bne.n	8006394 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f043 0206 	orr.w	r2, r3, #6
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f043 0220 	orr.w	r2, r3, #32
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006394:	7bfb      	ldrb	r3, [r7, #15]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063a0:	b004      	add	sp, #16
 80063a2:	4770      	bx	lr

080063a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b087      	sub	sp, #28
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	4613      	mov	r3, r2
 80063b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80063b2:	79fb      	ldrb	r3, [r7, #7]
 80063b4:	2b02      	cmp	r3, #2
 80063b6:	d165      	bne.n	8006484 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	4a41      	ldr	r2, [pc, #260]	@ (80064c0 <USB_SetTurnaroundTime+0x11c>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d906      	bls.n	80063ce <USB_SetTurnaroundTime+0x2a>
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	4a40      	ldr	r2, [pc, #256]	@ (80064c4 <USB_SetTurnaroundTime+0x120>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d202      	bcs.n	80063ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80063c8:	230f      	movs	r3, #15
 80063ca:	617b      	str	r3, [r7, #20]
 80063cc:	e062      	b.n	8006494 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	4a3c      	ldr	r2, [pc, #240]	@ (80064c4 <USB_SetTurnaroundTime+0x120>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d306      	bcc.n	80063e4 <USB_SetTurnaroundTime+0x40>
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	4a3b      	ldr	r2, [pc, #236]	@ (80064c8 <USB_SetTurnaroundTime+0x124>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d202      	bcs.n	80063e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80063de:	230e      	movs	r3, #14
 80063e0:	617b      	str	r3, [r7, #20]
 80063e2:	e057      	b.n	8006494 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	4a38      	ldr	r2, [pc, #224]	@ (80064c8 <USB_SetTurnaroundTime+0x124>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d306      	bcc.n	80063fa <USB_SetTurnaroundTime+0x56>
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	4a37      	ldr	r2, [pc, #220]	@ (80064cc <USB_SetTurnaroundTime+0x128>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d202      	bcs.n	80063fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80063f4:	230d      	movs	r3, #13
 80063f6:	617b      	str	r3, [r7, #20]
 80063f8:	e04c      	b.n	8006494 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	4a33      	ldr	r2, [pc, #204]	@ (80064cc <USB_SetTurnaroundTime+0x128>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d306      	bcc.n	8006410 <USB_SetTurnaroundTime+0x6c>
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	4a32      	ldr	r2, [pc, #200]	@ (80064d0 <USB_SetTurnaroundTime+0x12c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d802      	bhi.n	8006410 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800640a:	230c      	movs	r3, #12
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	e041      	b.n	8006494 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	4a2f      	ldr	r2, [pc, #188]	@ (80064d0 <USB_SetTurnaroundTime+0x12c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d906      	bls.n	8006426 <USB_SetTurnaroundTime+0x82>
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	4a2e      	ldr	r2, [pc, #184]	@ (80064d4 <USB_SetTurnaroundTime+0x130>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d802      	bhi.n	8006426 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006420:	230b      	movs	r3, #11
 8006422:	617b      	str	r3, [r7, #20]
 8006424:	e036      	b.n	8006494 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	4a2a      	ldr	r2, [pc, #168]	@ (80064d4 <USB_SetTurnaroundTime+0x130>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d906      	bls.n	800643c <USB_SetTurnaroundTime+0x98>
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	4a29      	ldr	r2, [pc, #164]	@ (80064d8 <USB_SetTurnaroundTime+0x134>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d802      	bhi.n	800643c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006436:	230a      	movs	r3, #10
 8006438:	617b      	str	r3, [r7, #20]
 800643a:	e02b      	b.n	8006494 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	4a26      	ldr	r2, [pc, #152]	@ (80064d8 <USB_SetTurnaroundTime+0x134>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d906      	bls.n	8006452 <USB_SetTurnaroundTime+0xae>
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	4a25      	ldr	r2, [pc, #148]	@ (80064dc <USB_SetTurnaroundTime+0x138>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d202      	bcs.n	8006452 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800644c:	2309      	movs	r3, #9
 800644e:	617b      	str	r3, [r7, #20]
 8006450:	e020      	b.n	8006494 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	4a21      	ldr	r2, [pc, #132]	@ (80064dc <USB_SetTurnaroundTime+0x138>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d306      	bcc.n	8006468 <USB_SetTurnaroundTime+0xc4>
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	4a20      	ldr	r2, [pc, #128]	@ (80064e0 <USB_SetTurnaroundTime+0x13c>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d802      	bhi.n	8006468 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006462:	2308      	movs	r3, #8
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	e015      	b.n	8006494 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006468:	68bb      	ldr	r3, [r7, #8]
 800646a:	4a1d      	ldr	r2, [pc, #116]	@ (80064e0 <USB_SetTurnaroundTime+0x13c>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d906      	bls.n	800647e <USB_SetTurnaroundTime+0xda>
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	4a1c      	ldr	r2, [pc, #112]	@ (80064e4 <USB_SetTurnaroundTime+0x140>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d202      	bcs.n	800647e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006478:	2307      	movs	r3, #7
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	e00a      	b.n	8006494 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800647e:	2306      	movs	r3, #6
 8006480:	617b      	str	r3, [r7, #20]
 8006482:	e007      	b.n	8006494 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006484:	79fb      	ldrb	r3, [r7, #7]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d102      	bne.n	8006490 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800648a:	2309      	movs	r3, #9
 800648c:	617b      	str	r3, [r7, #20]
 800648e:	e001      	b.n	8006494 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006490:	2309      	movs	r3, #9
 8006492:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	68db      	ldr	r3, [r3, #12]
 8006498:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	68da      	ldr	r2, [r3, #12]
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	029b      	lsls	r3, r3, #10
 80064a8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80064ac:	431a      	orrs	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80064b2:	2300      	movs	r3, #0
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	371c      	adds	r7, #28
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr
 80064c0:	00d8acbf 	.word	0x00d8acbf
 80064c4:	00e4e1c0 	.word	0x00e4e1c0
 80064c8:	00f42400 	.word	0x00f42400
 80064cc:	01067380 	.word	0x01067380
 80064d0:	011a499f 	.word	0x011a499f
 80064d4:	01312cff 	.word	0x01312cff
 80064d8:	014ca43f 	.word	0x014ca43f
 80064dc:	016e3600 	.word	0x016e3600
 80064e0:	01a6ab1f 	.word	0x01a6ab1f
 80064e4:	01e84800 	.word	0x01e84800

080064e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	f043 0201 	orr.w	r2, r3, #1
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800650a:	b480      	push	{r7}
 800650c:	b083      	sub	sp, #12
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	f023 0201 	bic.w	r2, r3, #1
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	460b      	mov	r3, r1
 8006536:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006538:	2300      	movs	r3, #0
 800653a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d115      	bne.n	800657a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800655a:	200a      	movs	r0, #10
 800655c:	f7fb fef4 	bl	8002348 <HAL_Delay>
      ms += 10U;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	330a      	adds	r3, #10
 8006564:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f001 f93f 	bl	80077ea <USB_GetMode>
 800656c:	4603      	mov	r3, r0
 800656e:	2b01      	cmp	r3, #1
 8006570:	d01e      	beq.n	80065b0 <USB_SetCurrentMode+0x84>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2bc7      	cmp	r3, #199	@ 0xc7
 8006576:	d9f0      	bls.n	800655a <USB_SetCurrentMode+0x2e>
 8006578:	e01a      	b.n	80065b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800657a:	78fb      	ldrb	r3, [r7, #3]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d115      	bne.n	80065ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800658c:	200a      	movs	r0, #10
 800658e:	f7fb fedb 	bl	8002348 <HAL_Delay>
      ms += 10U;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	330a      	adds	r3, #10
 8006596:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f001 f926 	bl	80077ea <USB_GetMode>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d005      	beq.n	80065b0 <USB_SetCurrentMode+0x84>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2bc7      	cmp	r3, #199	@ 0xc7
 80065a8:	d9f0      	bls.n	800658c <USB_SetCurrentMode+0x60>
 80065aa:	e001      	b.n	80065b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	e005      	b.n	80065bc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2bc8      	cmp	r3, #200	@ 0xc8
 80065b4:	d101      	bne.n	80065ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	e000      	b.n	80065bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065c4:	b084      	sub	sp, #16
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b086      	sub	sp, #24
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80065d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80065de:	2300      	movs	r3, #0
 80065e0:	613b      	str	r3, [r7, #16]
 80065e2:	e009      	b.n	80065f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	3340      	adds	r3, #64	@ 0x40
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	2200      	movs	r2, #0
 80065f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	3301      	adds	r3, #1
 80065f6:	613b      	str	r3, [r7, #16]
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	2b0e      	cmp	r3, #14
 80065fc:	d9f2      	bls.n	80065e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80065fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006602:	2b00      	cmp	r3, #0
 8006604:	d11c      	bne.n	8006640 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006614:	f043 0302 	orr.w	r3, r3, #2
 8006618:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800661e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800662a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006636:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	639a      	str	r2, [r3, #56]	@ 0x38
 800663e:	e00b      	b.n	8006658 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006644:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006650:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800665e:	461a      	mov	r2, r3
 8006660:	2300      	movs	r3, #0
 8006662:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006664:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006668:	2b01      	cmp	r3, #1
 800666a:	d10d      	bne.n	8006688 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800666c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006670:	2b00      	cmp	r3, #0
 8006672:	d104      	bne.n	800667e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006674:	2100      	movs	r1, #0
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f968 	bl	800694c <USB_SetDevSpeed>
 800667c:	e008      	b.n	8006690 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800667e:	2101      	movs	r1, #1
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 f963 	bl	800694c <USB_SetDevSpeed>
 8006686:	e003      	b.n	8006690 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006688:	2103      	movs	r1, #3
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f000 f95e 	bl	800694c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006690:	2110      	movs	r1, #16
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 f8fa 	bl	800688c <USB_FlushTxFifo>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d001      	beq.n	80066a2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f924 	bl	80068f0 <USB_FlushRxFifo>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d001      	beq.n	80066b2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066b8:	461a      	mov	r2, r3
 80066ba:	2300      	movs	r3, #0
 80066bc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066c4:	461a      	mov	r2, r3
 80066c6:	2300      	movs	r3, #0
 80066c8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80066d0:	461a      	mov	r2, r3
 80066d2:	2300      	movs	r3, #0
 80066d4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066d6:	2300      	movs	r3, #0
 80066d8:	613b      	str	r3, [r7, #16]
 80066da:	e043      	b.n	8006764 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066f2:	d118      	bne.n	8006726 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10a      	bne.n	8006710 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	4413      	add	r3, r2
 8006702:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006706:	461a      	mov	r2, r3
 8006708:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800670c:	6013      	str	r3, [r2, #0]
 800670e:	e013      	b.n	8006738 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	4413      	add	r3, r2
 8006718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800671c:	461a      	mov	r2, r3
 800671e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006722:	6013      	str	r3, [r2, #0]
 8006724:	e008      	b.n	8006738 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006732:	461a      	mov	r2, r3
 8006734:	2300      	movs	r3, #0
 8006736:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	015a      	lsls	r2, r3, #5
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4413      	add	r3, r2
 8006740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006744:	461a      	mov	r2, r3
 8006746:	2300      	movs	r3, #0
 8006748:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	015a      	lsls	r2, r3, #5
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	4413      	add	r3, r2
 8006752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006756:	461a      	mov	r2, r3
 8006758:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800675c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	3301      	adds	r3, #1
 8006762:	613b      	str	r3, [r7, #16]
 8006764:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006768:	461a      	mov	r2, r3
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	4293      	cmp	r3, r2
 800676e:	d3b5      	bcc.n	80066dc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006770:	2300      	movs	r3, #0
 8006772:	613b      	str	r3, [r7, #16]
 8006774:	e043      	b.n	80067fe <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	4413      	add	r3, r2
 800677e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006788:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800678c:	d118      	bne.n	80067c0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10a      	bne.n	80067aa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	015a      	lsls	r2, r3, #5
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	4413      	add	r3, r2
 800679c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067a0:	461a      	mov	r2, r3
 80067a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80067a6:	6013      	str	r3, [r2, #0]
 80067a8:	e013      	b.n	80067d2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	015a      	lsls	r2, r3, #5
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	4413      	add	r3, r2
 80067b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067b6:	461a      	mov	r2, r3
 80067b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80067bc:	6013      	str	r3, [r2, #0]
 80067be:	e008      	b.n	80067d2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067cc:	461a      	mov	r2, r3
 80067ce:	2300      	movs	r3, #0
 80067d0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067de:	461a      	mov	r2, r3
 80067e0:	2300      	movs	r3, #0
 80067e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	015a      	lsls	r2, r3, #5
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	4413      	add	r3, r2
 80067ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067f0:	461a      	mov	r2, r3
 80067f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80067f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	3301      	adds	r3, #1
 80067fc:	613b      	str	r3, [r7, #16]
 80067fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006802:	461a      	mov	r2, r3
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	4293      	cmp	r3, r2
 8006808:	d3b5      	bcc.n	8006776 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	68fa      	ldr	r2, [r7, #12]
 8006814:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800681c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800682a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800682c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006830:	2b00      	cmp	r3, #0
 8006832:	d105      	bne.n	8006840 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	699b      	ldr	r3, [r3, #24]
 8006838:	f043 0210 	orr.w	r2, r3, #16
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	699a      	ldr	r2, [r3, #24]
 8006844:	4b10      	ldr	r3, [pc, #64]	@ (8006888 <USB_DevInit+0x2c4>)
 8006846:	4313      	orrs	r3, r2
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800684c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006850:	2b00      	cmp	r3, #0
 8006852:	d005      	beq.n	8006860 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	f043 0208 	orr.w	r2, r3, #8
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006860:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006864:	2b01      	cmp	r3, #1
 8006866:	d107      	bne.n	8006878 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006870:	f043 0304 	orr.w	r3, r3, #4
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006878:	7dfb      	ldrb	r3, [r7, #23]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3718      	adds	r7, #24
 800687e:	46bd      	mov	sp, r7
 8006880:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006884:	b004      	add	sp, #16
 8006886:	4770      	bx	lr
 8006888:	803c3800 	.word	0x803c3800

0800688c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006896:	2300      	movs	r3, #0
 8006898:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	3301      	adds	r3, #1
 800689e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068a6:	d901      	bls.n	80068ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e01b      	b.n	80068e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	daf2      	bge.n	800689a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80068b4:	2300      	movs	r3, #0
 80068b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	019b      	lsls	r3, r3, #6
 80068bc:	f043 0220 	orr.w	r2, r3, #32
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	3301      	adds	r3, #1
 80068c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80068d0:	d901      	bls.n	80068d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80068d2:	2303      	movs	r3, #3
 80068d4:	e006      	b.n	80068e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	f003 0320 	and.w	r3, r3, #32
 80068de:	2b20      	cmp	r3, #32
 80068e0:	d0f0      	beq.n	80068c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3714      	adds	r7, #20
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b085      	sub	sp, #20
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80068f8:	2300      	movs	r3, #0
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	3301      	adds	r3, #1
 8006900:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006908:	d901      	bls.n	800690e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800690a:	2303      	movs	r3, #3
 800690c:	e018      	b.n	8006940 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	2b00      	cmp	r3, #0
 8006914:	daf2      	bge.n	80068fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006916:	2300      	movs	r3, #0
 8006918:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2210      	movs	r2, #16
 800691e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	3301      	adds	r3, #1
 8006924:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800692c:	d901      	bls.n	8006932 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e006      	b.n	8006940 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f003 0310 	and.w	r3, r3, #16
 800693a:	2b10      	cmp	r3, #16
 800693c:	d0f0      	beq.n	8006920 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	78fb      	ldrb	r3, [r7, #3]
 8006966:	68f9      	ldr	r1, [r7, #12]
 8006968:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800696c:	4313      	orrs	r3, r2
 800696e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800697e:	b480      	push	{r7}
 8006980:	b087      	sub	sp, #28
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f003 0306 	and.w	r3, r3, #6
 8006996:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d102      	bne.n	80069a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800699e:	2300      	movs	r3, #0
 80069a0:	75fb      	strb	r3, [r7, #23]
 80069a2:	e00a      	b.n	80069ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d002      	beq.n	80069b0 <USB_GetDevSpeed+0x32>
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2b06      	cmp	r3, #6
 80069ae:	d102      	bne.n	80069b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80069b0:	2302      	movs	r3, #2
 80069b2:	75fb      	strb	r3, [r7, #23]
 80069b4:	e001      	b.n	80069ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80069b6:	230f      	movs	r3, #15
 80069b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80069ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80069bc:	4618      	mov	r0, r3
 80069be:	371c      	adds	r7, #28
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b085      	sub	sp, #20
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	785b      	ldrb	r3, [r3, #1]
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d13a      	bne.n	8006a5a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069ea:	69da      	ldr	r2, [r3, #28]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	781b      	ldrb	r3, [r3, #0]
 80069f0:	f003 030f 	and.w	r3, r3, #15
 80069f4:	2101      	movs	r1, #1
 80069f6:	fa01 f303 	lsl.w	r3, r1, r3
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	68f9      	ldr	r1, [r7, #12]
 80069fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a02:	4313      	orrs	r3, r2
 8006a04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d155      	bne.n	8006ac8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	015a      	lsls	r2, r3, #5
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4413      	add	r3, r2
 8006a24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	791b      	ldrb	r3, [r3, #4]
 8006a36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	059b      	lsls	r3, r3, #22
 8006a3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006a40:	4313      	orrs	r3, r2
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	0151      	lsls	r1, r2, #5
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	440a      	add	r2, r1
 8006a4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a56:	6013      	str	r3, [r2, #0]
 8006a58:	e036      	b.n	8006ac8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a60:	69da      	ldr	r2, [r3, #28]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	781b      	ldrb	r3, [r3, #0]
 8006a66:	f003 030f 	and.w	r3, r3, #15
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a70:	041b      	lsls	r3, r3, #16
 8006a72:	68f9      	ldr	r1, [r7, #12]
 8006a74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	015a      	lsls	r2, r3, #5
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d11a      	bne.n	8006ac8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	791b      	ldrb	r3, [r3, #4]
 8006aac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006aae:	430b      	orrs	r3, r1
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	68ba      	ldr	r2, [r7, #8]
 8006ab4:	0151      	lsls	r1, r2, #5
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	440a      	add	r2, r1
 8006aba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006abe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ac2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ac6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
	...

08006ad8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	785b      	ldrb	r3, [r3, #1]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d161      	bne.n	8006bb8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	015a      	lsls	r2, r3, #5
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	4413      	add	r3, r2
 8006afc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b0a:	d11f      	bne.n	8006b4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68ba      	ldr	r2, [r7, #8]
 8006b1c:	0151      	lsls	r1, r2, #5
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	440a      	add	r2, r1
 8006b22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006b2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	015a      	lsls	r2, r3, #5
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4413      	add	r3, r2
 8006b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	0151      	lsls	r1, r2, #5
 8006b3e:	68fa      	ldr	r2, [r7, #12]
 8006b40:	440a      	add	r2, r1
 8006b42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	f003 030f 	and.w	r3, r3, #15
 8006b5c:	2101      	movs	r1, #1
 8006b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006b62:	b29b      	uxth	r3, r3
 8006b64:	43db      	mvns	r3, r3
 8006b66:	68f9      	ldr	r1, [r7, #12]
 8006b68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b76:	69da      	ldr	r2, [r3, #28]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	f003 030f 	and.w	r3, r3, #15
 8006b80:	2101      	movs	r1, #1
 8006b82:	fa01 f303 	lsl.w	r3, r1, r3
 8006b86:	b29b      	uxth	r3, r3
 8006b88:	43db      	mvns	r3, r3
 8006b8a:	68f9      	ldr	r1, [r7, #12]
 8006b8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006b90:	4013      	ands	r3, r2
 8006b92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	015a      	lsls	r2, r3, #5
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	0159      	lsls	r1, r3, #5
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	440b      	add	r3, r1
 8006baa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bae:	4619      	mov	r1, r3
 8006bb0:	4b35      	ldr	r3, [pc, #212]	@ (8006c88 <USB_DeactivateEndpoint+0x1b0>)
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	600b      	str	r3, [r1, #0]
 8006bb6:	e060      	b.n	8006c7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	015a      	lsls	r2, r3, #5
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bce:	d11f      	bne.n	8006c10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	015a      	lsls	r2, r3, #5
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	0151      	lsls	r1, r2, #5
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	440a      	add	r2, r1
 8006be6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006bea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006bee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	0151      	lsls	r1, r2, #5
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	440a      	add	r2, r1
 8006c06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006c0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	f003 030f 	and.w	r3, r3, #15
 8006c20:	2101      	movs	r1, #1
 8006c22:	fa01 f303 	lsl.w	r3, r1, r3
 8006c26:	041b      	lsls	r3, r3, #16
 8006c28:	43db      	mvns	r3, r3
 8006c2a:	68f9      	ldr	r1, [r7, #12]
 8006c2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c30:	4013      	ands	r3, r2
 8006c32:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c3a:	69da      	ldr	r2, [r3, #28]
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	f003 030f 	and.w	r3, r3, #15
 8006c44:	2101      	movs	r1, #1
 8006c46:	fa01 f303 	lsl.w	r3, r1, r3
 8006c4a:	041b      	lsls	r3, r3, #16
 8006c4c:	43db      	mvns	r3, r3
 8006c4e:	68f9      	ldr	r1, [r7, #12]
 8006c50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006c54:	4013      	ands	r3, r2
 8006c56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	015a      	lsls	r2, r3, #5
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4413      	add	r3, r2
 8006c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c64:	681a      	ldr	r2, [r3, #0]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	0159      	lsls	r1, r3, #5
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	440b      	add	r3, r1
 8006c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c72:	4619      	mov	r1, r3
 8006c74:	4b05      	ldr	r3, [pc, #20]	@ (8006c8c <USB_DeactivateEndpoint+0x1b4>)
 8006c76:	4013      	ands	r3, r2
 8006c78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3714      	adds	r7, #20
 8006c80:	46bd      	mov	sp, r7
 8006c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c86:	4770      	bx	lr
 8006c88:	ec337800 	.word	0xec337800
 8006c8c:	eff37800 	.word	0xeff37800

08006c90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b08a      	sub	sp, #40	@ 0x28
 8006c94:	af02      	add	r7, sp, #8
 8006c96:	60f8      	str	r0, [r7, #12]
 8006c98:	60b9      	str	r1, [r7, #8]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	785b      	ldrb	r3, [r3, #1]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	f040 817f 	bne.w	8006fb0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	691b      	ldr	r3, [r3, #16]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d132      	bne.n	8006d20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	0151      	lsls	r1, r2, #5
 8006ccc:	69fa      	ldr	r2, [r7, #28]
 8006cce:	440a      	add	r2, r1
 8006cd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cd4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006cd8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006cdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	015a      	lsls	r2, r3, #5
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	0151      	lsls	r1, r2, #5
 8006cf0:	69fa      	ldr	r2, [r7, #28]
 8006cf2:	440a      	add	r2, r1
 8006cf4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cf8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	015a      	lsls	r2, r3, #5
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	4413      	add	r3, r2
 8006d06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	0151      	lsls	r1, r2, #5
 8006d10:	69fa      	ldr	r2, [r7, #28]
 8006d12:	440a      	add	r2, r1
 8006d14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d18:	0cdb      	lsrs	r3, r3, #19
 8006d1a:	04db      	lsls	r3, r3, #19
 8006d1c:	6113      	str	r3, [r2, #16]
 8006d1e:	e097      	b.n	8006e50 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	69ba      	ldr	r2, [r7, #24]
 8006d30:	0151      	lsls	r1, r2, #5
 8006d32:	69fa      	ldr	r2, [r7, #28]
 8006d34:	440a      	add	r2, r1
 8006d36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d3a:	0cdb      	lsrs	r3, r3, #19
 8006d3c:	04db      	lsls	r3, r3, #19
 8006d3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006d40:	69bb      	ldr	r3, [r7, #24]
 8006d42:	015a      	lsls	r2, r3, #5
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	4413      	add	r3, r2
 8006d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	69ba      	ldr	r2, [r7, #24]
 8006d50:	0151      	lsls	r1, r2, #5
 8006d52:	69fa      	ldr	r2, [r7, #28]
 8006d54:	440a      	add	r2, r1
 8006d56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d5a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006d5e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006d62:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006d64:	69bb      	ldr	r3, [r7, #24]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d11a      	bne.n	8006da0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	691a      	ldr	r2, [r3, #16]
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d903      	bls.n	8006d7e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	689a      	ldr	r2, [r3, #8]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d8a:	691b      	ldr	r3, [r3, #16]
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	0151      	lsls	r1, r2, #5
 8006d90:	69fa      	ldr	r2, [r7, #28]
 8006d92:	440a      	add	r2, r1
 8006d94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006d9c:	6113      	str	r3, [r2, #16]
 8006d9e:	e044      	b.n	8006e2a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	691a      	ldr	r2, [r3, #16]
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	4413      	add	r3, r2
 8006daa:	1e5a      	subs	r2, r3, #1
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	015a      	lsls	r2, r3, #5
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dc2:	691a      	ldr	r2, [r3, #16]
 8006dc4:	8afb      	ldrh	r3, [r7, #22]
 8006dc6:	04d9      	lsls	r1, r3, #19
 8006dc8:	4ba4      	ldr	r3, [pc, #656]	@ (800705c <USB_EPStartXfer+0x3cc>)
 8006dca:	400b      	ands	r3, r1
 8006dcc:	69b9      	ldr	r1, [r7, #24]
 8006dce:	0148      	lsls	r0, r1, #5
 8006dd0:	69f9      	ldr	r1, [r7, #28]
 8006dd2:	4401      	add	r1, r0
 8006dd4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	791b      	ldrb	r3, [r3, #4]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d122      	bne.n	8006e2a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006de4:	69bb      	ldr	r3, [r7, #24]
 8006de6:	015a      	lsls	r2, r3, #5
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	4413      	add	r3, r2
 8006dec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	69ba      	ldr	r2, [r7, #24]
 8006df4:	0151      	lsls	r1, r2, #5
 8006df6:	69fa      	ldr	r2, [r7, #28]
 8006df8:	440a      	add	r2, r1
 8006dfa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dfe:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8006e02:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e10:	691a      	ldr	r2, [r3, #16]
 8006e12:	8afb      	ldrh	r3, [r7, #22]
 8006e14:	075b      	lsls	r3, r3, #29
 8006e16:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006e1a:	69b9      	ldr	r1, [r7, #24]
 8006e1c:	0148      	lsls	r0, r1, #5
 8006e1e:	69f9      	ldr	r1, [r7, #28]
 8006e20:	4401      	add	r1, r0
 8006e22:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006e26:	4313      	orrs	r3, r2
 8006e28:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	015a      	lsls	r2, r3, #5
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	4413      	add	r3, r2
 8006e32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e36:	691a      	ldr	r2, [r3, #16]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e40:	69b9      	ldr	r1, [r7, #24]
 8006e42:	0148      	lsls	r0, r1, #5
 8006e44:	69f9      	ldr	r1, [r7, #28]
 8006e46:	4401      	add	r1, r0
 8006e48:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006e50:	79fb      	ldrb	r3, [r7, #7]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d14b      	bne.n	8006eee <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	69db      	ldr	r3, [r3, #28]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d009      	beq.n	8006e72 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	015a      	lsls	r2, r3, #5
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	4413      	add	r3, r2
 8006e66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	69db      	ldr	r3, [r3, #28]
 8006e70:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	791b      	ldrb	r3, [r3, #4]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	d128      	bne.n	8006ecc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d110      	bne.n	8006eac <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	0151      	lsls	r1, r2, #5
 8006e9c:	69fa      	ldr	r2, [r7, #28]
 8006e9e:	440a      	add	r2, r1
 8006ea0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ea4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ea8:	6013      	str	r3, [r2, #0]
 8006eaa:	e00f      	b.n	8006ecc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	0151      	lsls	r1, r2, #5
 8006ebe:	69fa      	ldr	r2, [r7, #28]
 8006ec0:	440a      	add	r2, r1
 8006ec2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ec6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006eca:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	69ba      	ldr	r2, [r7, #24]
 8006edc:	0151      	lsls	r1, r2, #5
 8006ede:	69fa      	ldr	r2, [r7, #28]
 8006ee0:	440a      	add	r2, r1
 8006ee2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006ee6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006eea:	6013      	str	r3, [r2, #0]
 8006eec:	e166      	b.n	80071bc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006eee:	69bb      	ldr	r3, [r7, #24]
 8006ef0:	015a      	lsls	r2, r3, #5
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	4413      	add	r3, r2
 8006ef6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	69ba      	ldr	r2, [r7, #24]
 8006efe:	0151      	lsls	r1, r2, #5
 8006f00:	69fa      	ldr	r2, [r7, #28]
 8006f02:	440a      	add	r2, r1
 8006f04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f08:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006f0c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	791b      	ldrb	r3, [r3, #4]
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d015      	beq.n	8006f42 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	f000 814e 	beq.w	80071bc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f26:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	f003 030f 	and.w	r3, r3, #15
 8006f30:	2101      	movs	r1, #1
 8006f32:	fa01 f303 	lsl.w	r3, r1, r3
 8006f36:	69f9      	ldr	r1, [r7, #28]
 8006f38:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	634b      	str	r3, [r1, #52]	@ 0x34
 8006f40:	e13c      	b.n	80071bc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f42:	69fb      	ldr	r3, [r7, #28]
 8006f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d110      	bne.n	8006f74 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	015a      	lsls	r2, r3, #5
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	69ba      	ldr	r2, [r7, #24]
 8006f62:	0151      	lsls	r1, r2, #5
 8006f64:	69fa      	ldr	r2, [r7, #28]
 8006f66:	440a      	add	r2, r1
 8006f68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f6c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006f70:	6013      	str	r3, [r2, #0]
 8006f72:	e00f      	b.n	8006f94 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	015a      	lsls	r2, r3, #5
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	4413      	add	r3, r2
 8006f7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	69ba      	ldr	r2, [r7, #24]
 8006f84:	0151      	lsls	r1, r2, #5
 8006f86:	69fa      	ldr	r2, [r7, #28]
 8006f88:	440a      	add	r2, r1
 8006f8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006f8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f92:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	68d9      	ldr	r1, [r3, #12]
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	781a      	ldrb	r2, [r3, #0]
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	b298      	uxth	r0, r3
 8006fa2:	79fb      	ldrb	r3, [r7, #7]
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f000 f9b9 	bl	8007320 <USB_WritePacket>
 8006fae:	e105      	b.n	80071bc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	015a      	lsls	r2, r3, #5
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	4413      	add	r3, r2
 8006fb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fbc:	691b      	ldr	r3, [r3, #16]
 8006fbe:	69ba      	ldr	r2, [r7, #24]
 8006fc0:	0151      	lsls	r1, r2, #5
 8006fc2:	69fa      	ldr	r2, [r7, #28]
 8006fc4:	440a      	add	r2, r1
 8006fc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fca:	0cdb      	lsrs	r3, r3, #19
 8006fcc:	04db      	lsls	r3, r3, #19
 8006fce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006fd0:	69bb      	ldr	r3, [r7, #24]
 8006fd2:	015a      	lsls	r2, r3, #5
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	69ba      	ldr	r2, [r7, #24]
 8006fe0:	0151      	lsls	r1, r2, #5
 8006fe2:	69fa      	ldr	r2, [r7, #28]
 8006fe4:	440a      	add	r2, r1
 8006fe6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006fea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006fee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006ff2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d132      	bne.n	8007060 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	691b      	ldr	r3, [r3, #16]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	689a      	ldr	r2, [r3, #8]
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	689a      	ldr	r2, [r3, #8]
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	4413      	add	r3, r2
 800701a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800701e:	691a      	ldr	r2, [r3, #16]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	6a1b      	ldr	r3, [r3, #32]
 8007024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007028:	69b9      	ldr	r1, [r7, #24]
 800702a:	0148      	lsls	r0, r1, #5
 800702c:	69f9      	ldr	r1, [r7, #28]
 800702e:	4401      	add	r1, r0
 8007030:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007034:	4313      	orrs	r3, r2
 8007036:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	4413      	add	r3, r2
 8007040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	0151      	lsls	r1, r2, #5
 800704a:	69fa      	ldr	r2, [r7, #28]
 800704c:	440a      	add	r2, r1
 800704e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007052:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007056:	6113      	str	r3, [r2, #16]
 8007058:	e062      	b.n	8007120 <USB_EPStartXfer+0x490>
 800705a:	bf00      	nop
 800705c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	691b      	ldr	r3, [r3, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d123      	bne.n	80070b0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	4413      	add	r3, r2
 8007070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007074:	691a      	ldr	r2, [r3, #16]
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800707e:	69b9      	ldr	r1, [r7, #24]
 8007080:	0148      	lsls	r0, r1, #5
 8007082:	69f9      	ldr	r1, [r7, #28]
 8007084:	4401      	add	r1, r0
 8007086:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800708a:	4313      	orrs	r3, r2
 800708c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	69ba      	ldr	r2, [r7, #24]
 800709e:	0151      	lsls	r1, r2, #5
 80070a0:	69fa      	ldr	r2, [r7, #28]
 80070a2:	440a      	add	r2, r1
 80070a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80070ac:	6113      	str	r3, [r2, #16]
 80070ae:	e037      	b.n	8007120 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	691a      	ldr	r2, [r3, #16]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	4413      	add	r3, r2
 80070ba:	1e5a      	subs	r2, r3, #1
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070c4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	8afa      	ldrh	r2, [r7, #22]
 80070cc:	fb03 f202 	mul.w	r2, r3, r2
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070e0:	691a      	ldr	r2, [r3, #16]
 80070e2:	8afb      	ldrh	r3, [r7, #22]
 80070e4:	04d9      	lsls	r1, r3, #19
 80070e6:	4b38      	ldr	r3, [pc, #224]	@ (80071c8 <USB_EPStartXfer+0x538>)
 80070e8:	400b      	ands	r3, r1
 80070ea:	69b9      	ldr	r1, [r7, #24]
 80070ec:	0148      	lsls	r0, r1, #5
 80070ee:	69f9      	ldr	r1, [r7, #28]
 80070f0:	4401      	add	r1, r0
 80070f2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80070f6:	4313      	orrs	r3, r2
 80070f8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	4413      	add	r3, r2
 8007102:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007106:	691a      	ldr	r2, [r3, #16]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	6a1b      	ldr	r3, [r3, #32]
 800710c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007110:	69b9      	ldr	r1, [r7, #24]
 8007112:	0148      	lsls	r0, r1, #5
 8007114:	69f9      	ldr	r1, [r7, #28]
 8007116:	4401      	add	r1, r0
 8007118:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800711c:	4313      	orrs	r3, r2
 800711e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007120:	79fb      	ldrb	r3, [r7, #7]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d10d      	bne.n	8007142 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d009      	beq.n	8007142 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	68d9      	ldr	r1, [r3, #12]
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	015a      	lsls	r2, r3, #5
 8007136:	69fb      	ldr	r3, [r7, #28]
 8007138:	4413      	add	r3, r2
 800713a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800713e:	460a      	mov	r2, r1
 8007140:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	791b      	ldrb	r3, [r3, #4]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d128      	bne.n	800719c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007156:	2b00      	cmp	r3, #0
 8007158:	d110      	bne.n	800717c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	015a      	lsls	r2, r3, #5
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	4413      	add	r3, r2
 8007162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	69ba      	ldr	r2, [r7, #24]
 800716a:	0151      	lsls	r1, r2, #5
 800716c:	69fa      	ldr	r2, [r7, #28]
 800716e:	440a      	add	r2, r1
 8007170:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007174:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007178:	6013      	str	r3, [r2, #0]
 800717a:	e00f      	b.n	800719c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	015a      	lsls	r2, r3, #5
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	4413      	add	r3, r2
 8007184:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	69ba      	ldr	r2, [r7, #24]
 800718c:	0151      	lsls	r1, r2, #5
 800718e:	69fa      	ldr	r2, [r7, #28]
 8007190:	440a      	add	r2, r1
 8007192:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007196:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800719a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800719c:	69bb      	ldr	r3, [r7, #24]
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	69ba      	ldr	r2, [r7, #24]
 80071ac:	0151      	lsls	r1, r2, #5
 80071ae:	69fa      	ldr	r2, [r7, #28]
 80071b0:	440a      	add	r2, r1
 80071b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071b6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80071ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3720      	adds	r7, #32
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	1ff80000 	.word	0x1ff80000

080071cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071d6:	2300      	movs	r3, #0
 80071d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80071da:	2300      	movs	r3, #0
 80071dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	785b      	ldrb	r3, [r3, #1]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d14a      	bne.n	8007280 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	015a      	lsls	r2, r3, #5
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	4413      	add	r3, r2
 80071f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80071fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007202:	f040 8086 	bne.w	8007312 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	015a      	lsls	r2, r3, #5
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	4413      	add	r3, r2
 8007210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	7812      	ldrb	r2, [r2, #0]
 800721a:	0151      	lsls	r1, r2, #5
 800721c:	693a      	ldr	r2, [r7, #16]
 800721e:	440a      	add	r2, r1
 8007220:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007224:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007228:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	015a      	lsls	r2, r3, #5
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	4413      	add	r3, r2
 8007234:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	7812      	ldrb	r2, [r2, #0]
 800723e:	0151      	lsls	r1, r2, #5
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	440a      	add	r2, r1
 8007244:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007248:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800724c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	3301      	adds	r3, #1
 8007252:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f242 7210 	movw	r2, #10000	@ 0x2710
 800725a:	4293      	cmp	r3, r2
 800725c:	d902      	bls.n	8007264 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	75fb      	strb	r3, [r7, #23]
          break;
 8007262:	e056      	b.n	8007312 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	4413      	add	r3, r2
 800726e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007278:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800727c:	d0e7      	beq.n	800724e <USB_EPStopXfer+0x82>
 800727e:	e048      	b.n	8007312 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	015a      	lsls	r2, r3, #5
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	4413      	add	r3, r2
 800728a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007294:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007298:	d13b      	bne.n	8007312 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	7812      	ldrb	r2, [r2, #0]
 80072ae:	0151      	lsls	r1, r2, #5
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	440a      	add	r2, r1
 80072b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80072bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	7812      	ldrb	r2, [r2, #0]
 80072d2:	0151      	lsls	r1, r2, #5
 80072d4:	693a      	ldr	r2, [r7, #16]
 80072d6:	440a      	add	r2, r1
 80072d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80072dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80072e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3301      	adds	r3, #1
 80072e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d902      	bls.n	80072f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	75fb      	strb	r3, [r7, #23]
          break;
 80072f6:	e00c      	b.n	8007312 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	015a      	lsls	r2, r3, #5
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	4413      	add	r3, r2
 8007302:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800730c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007310:	d0e7      	beq.n	80072e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007312:	7dfb      	ldrb	r3, [r7, #23]
}
 8007314:	4618      	mov	r0, r3
 8007316:	371c      	adds	r7, #28
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007320:	b480      	push	{r7}
 8007322:	b089      	sub	sp, #36	@ 0x24
 8007324:	af00      	add	r7, sp, #0
 8007326:	60f8      	str	r0, [r7, #12]
 8007328:	60b9      	str	r1, [r7, #8]
 800732a:	4611      	mov	r1, r2
 800732c:	461a      	mov	r2, r3
 800732e:	460b      	mov	r3, r1
 8007330:	71fb      	strb	r3, [r7, #7]
 8007332:	4613      	mov	r3, r2
 8007334:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800733e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007342:	2b00      	cmp	r3, #0
 8007344:	d123      	bne.n	800738e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007346:	88bb      	ldrh	r3, [r7, #4]
 8007348:	3303      	adds	r3, #3
 800734a:	089b      	lsrs	r3, r3, #2
 800734c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800734e:	2300      	movs	r3, #0
 8007350:	61bb      	str	r3, [r7, #24]
 8007352:	e018      	b.n	8007386 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007354:	79fb      	ldrb	r3, [r7, #7]
 8007356:	031a      	lsls	r2, r3, #12
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	4413      	add	r3, r2
 800735c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007360:	461a      	mov	r2, r3
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	3301      	adds	r3, #1
 800736c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	3301      	adds	r3, #1
 8007372:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	3301      	adds	r3, #1
 8007378:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	3301      	adds	r3, #1
 800737e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007380:	69bb      	ldr	r3, [r7, #24]
 8007382:	3301      	adds	r3, #1
 8007384:	61bb      	str	r3, [r7, #24]
 8007386:	69ba      	ldr	r2, [r7, #24]
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	429a      	cmp	r2, r3
 800738c:	d3e2      	bcc.n	8007354 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3724      	adds	r7, #36	@ 0x24
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr

0800739c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800739c:	b480      	push	{r7}
 800739e:	b08b      	sub	sp, #44	@ 0x2c
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	4613      	mov	r3, r2
 80073a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80073b2:	88fb      	ldrh	r3, [r7, #6]
 80073b4:	089b      	lsrs	r3, r3, #2
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80073ba:	88fb      	ldrh	r3, [r7, #6]
 80073bc:	f003 0303 	and.w	r3, r3, #3
 80073c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80073c2:	2300      	movs	r3, #0
 80073c4:	623b      	str	r3, [r7, #32]
 80073c6:	e014      	b.n	80073f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80073d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d6:	3301      	adds	r3, #1
 80073d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80073da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073dc:	3301      	adds	r3, #1
 80073de:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80073e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e2:	3301      	adds	r3, #1
 80073e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80073e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e8:	3301      	adds	r3, #1
 80073ea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80073ec:	6a3b      	ldr	r3, [r7, #32]
 80073ee:	3301      	adds	r3, #1
 80073f0:	623b      	str	r3, [r7, #32]
 80073f2:	6a3a      	ldr	r2, [r7, #32]
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d3e6      	bcc.n	80073c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80073fa:	8bfb      	ldrh	r3, [r7, #30]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d01e      	beq.n	800743e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007400:	2300      	movs	r3, #0
 8007402:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800740a:	461a      	mov	r2, r3
 800740c:	f107 0310 	add.w	r3, r7, #16
 8007410:	6812      	ldr	r2, [r2, #0]
 8007412:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007414:	693a      	ldr	r2, [r7, #16]
 8007416:	6a3b      	ldr	r3, [r7, #32]
 8007418:	b2db      	uxtb	r3, r3
 800741a:	00db      	lsls	r3, r3, #3
 800741c:	fa22 f303 	lsr.w	r3, r2, r3
 8007420:	b2da      	uxtb	r2, r3
 8007422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007424:	701a      	strb	r2, [r3, #0]
      i++;
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	3301      	adds	r3, #1
 800742a:	623b      	str	r3, [r7, #32]
      pDest++;
 800742c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742e:	3301      	adds	r3, #1
 8007430:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007432:	8bfb      	ldrh	r3, [r7, #30]
 8007434:	3b01      	subs	r3, #1
 8007436:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007438:	8bfb      	ldrh	r3, [r7, #30]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1ea      	bne.n	8007414 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800743e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007440:	4618      	mov	r0, r3
 8007442:	372c      	adds	r7, #44	@ 0x2c
 8007444:	46bd      	mov	sp, r7
 8007446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744a:	4770      	bx	lr

0800744c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800744c:	b480      	push	{r7}
 800744e:	b085      	sub	sp, #20
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	785b      	ldrb	r3, [r3, #1]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d12c      	bne.n	80074c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	015a      	lsls	r2, r3, #5
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	4413      	add	r3, r2
 8007470:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	db12      	blt.n	80074a0 <USB_EPSetStall+0x54>
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00f      	beq.n	80074a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	4413      	add	r3, r2
 8007488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	0151      	lsls	r1, r2, #5
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	440a      	add	r2, r1
 8007496:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800749a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800749e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	015a      	lsls	r2, r3, #5
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	68ba      	ldr	r2, [r7, #8]
 80074b0:	0151      	lsls	r1, r2, #5
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	440a      	add	r2, r1
 80074b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80074ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80074be:	6013      	str	r3, [r2, #0]
 80074c0:	e02b      	b.n	800751a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	db12      	blt.n	80074fa <USB_EPSetStall+0xae>
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00f      	beq.n	80074fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	015a      	lsls	r2, r3, #5
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	4413      	add	r3, r2
 80074e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	0151      	lsls	r1, r2, #5
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	440a      	add	r2, r1
 80074f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80074f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	015a      	lsls	r2, r3, #5
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	4413      	add	r3, r2
 8007502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	0151      	lsls	r1, r2, #5
 800750c:	68fa      	ldr	r2, [r7, #12]
 800750e:	440a      	add	r2, r1
 8007510:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007514:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007518:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	785b      	ldrb	r3, [r3, #1]
 8007540:	2b01      	cmp	r3, #1
 8007542:	d128      	bne.n	8007596 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	015a      	lsls	r2, r3, #5
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	4413      	add	r3, r2
 800754c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	0151      	lsls	r1, r2, #5
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	440a      	add	r2, r1
 800755a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800755e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007562:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	791b      	ldrb	r3, [r3, #4]
 8007568:	2b03      	cmp	r3, #3
 800756a:	d003      	beq.n	8007574 <USB_EPClearStall+0x4c>
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	791b      	ldrb	r3, [r3, #4]
 8007570:	2b02      	cmp	r3, #2
 8007572:	d138      	bne.n	80075e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	015a      	lsls	r2, r3, #5
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	4413      	add	r3, r2
 800757c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	0151      	lsls	r1, r2, #5
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	440a      	add	r2, r1
 800758a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800758e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007592:	6013      	str	r3, [r2, #0]
 8007594:	e027      	b.n	80075e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	015a      	lsls	r2, r3, #5
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	4413      	add	r3, r2
 800759e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	0151      	lsls	r1, r2, #5
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	440a      	add	r2, r1
 80075ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80075b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	791b      	ldrb	r3, [r3, #4]
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d003      	beq.n	80075c6 <USB_EPClearStall+0x9e>
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	791b      	ldrb	r3, [r3, #4]
 80075c2:	2b02      	cmp	r3, #2
 80075c4:	d10f      	bne.n	80075e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	015a      	lsls	r2, r3, #5
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	4413      	add	r3, r2
 80075ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	68ba      	ldr	r2, [r7, #8]
 80075d6:	0151      	lsls	r1, r2, #5
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	440a      	add	r2, r1
 80075dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80075e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3714      	adds	r7, #20
 80075ec:	46bd      	mov	sp, r7
 80075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f2:	4770      	bx	lr

080075f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b085      	sub	sp, #20
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
 80075fc:	460b      	mov	r3, r1
 80075fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	68fa      	ldr	r2, [r7, #12]
 800760e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007612:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007616:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	78fb      	ldrb	r3, [r7, #3]
 8007622:	011b      	lsls	r3, r3, #4
 8007624:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8007628:	68f9      	ldr	r1, [r7, #12]
 800762a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800762e:	4313      	orrs	r3, r2
 8007630:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3714      	adds	r7, #20
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	68fa      	ldr	r2, [r7, #12]
 8007656:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800765a:	f023 0303 	bic.w	r3, r3, #3
 800765e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800766e:	f023 0302 	bic.w	r3, r3, #2
 8007672:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3714      	adds	r7, #20
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr

08007682 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007682:	b480      	push	{r7}
 8007684:	b085      	sub	sp, #20
 8007686:	af00      	add	r7, sp, #0
 8007688:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800769c:	f023 0303 	bic.w	r3, r3, #3
 80076a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076b0:	f043 0302 	orr.w	r3, r3, #2
 80076b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80076b6:	2300      	movs	r3, #0
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3714      	adds	r7, #20
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b085      	sub	sp, #20
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	695b      	ldr	r3, [r3, #20]
 80076d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	699b      	ldr	r3, [r3, #24]
 80076d6:	68fa      	ldr	r2, [r7, #12]
 80076d8:	4013      	ands	r3, r2
 80076da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80076dc:	68fb      	ldr	r3, [r7, #12]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3714      	adds	r7, #20
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b085      	sub	sp, #20
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076fc:	699b      	ldr	r3, [r3, #24]
 80076fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007706:	69db      	ldr	r3, [r3, #28]
 8007708:	68ba      	ldr	r2, [r7, #8]
 800770a:	4013      	ands	r3, r2
 800770c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	0c1b      	lsrs	r3, r3, #16
}
 8007712:	4618      	mov	r0, r3
 8007714:	3714      	adds	r7, #20
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr

0800771e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800771e:	b480      	push	{r7}
 8007720:	b085      	sub	sp, #20
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007730:	699b      	ldr	r3, [r3, #24]
 8007732:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800773a:	69db      	ldr	r3, [r3, #28]
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	4013      	ands	r3, r2
 8007740:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	b29b      	uxth	r3, r3
}
 8007746:	4618      	mov	r0, r3
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007752:	b480      	push	{r7}
 8007754:	b085      	sub	sp, #20
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
 800775a:	460b      	mov	r3, r1
 800775c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007762:	78fb      	ldrb	r3, [r7, #3]
 8007764:	015a      	lsls	r2, r3, #5
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	4413      	add	r3, r2
 800776a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007778:	695b      	ldr	r3, [r3, #20]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	4013      	ands	r3, r2
 800777e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007780:	68bb      	ldr	r3, [r7, #8]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3714      	adds	r7, #20
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800778e:	b480      	push	{r7}
 8007790:	b087      	sub	sp, #28
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	460b      	mov	r3, r1
 8007798:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80077b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80077b2:	78fb      	ldrb	r3, [r7, #3]
 80077b4:	f003 030f 	and.w	r3, r3, #15
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	fa22 f303 	lsr.w	r3, r2, r3
 80077be:	01db      	lsls	r3, r3, #7
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	693a      	ldr	r2, [r7, #16]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80077c8:	78fb      	ldrb	r3, [r7, #3]
 80077ca:	015a      	lsls	r2, r3, #5
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	693a      	ldr	r2, [r7, #16]
 80077d8:	4013      	ands	r3, r2
 80077da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80077dc:	68bb      	ldr	r3, [r7, #8]
}
 80077de:	4618      	mov	r0, r3
 80077e0:	371c      	adds	r7, #28
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b083      	sub	sp, #12
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	f003 0301 	and.w	r3, r3, #1
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr

08007806 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8007806:	b480      	push	{r7}
 8007808:	b085      	sub	sp, #20
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007820:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007824:	f023 0307 	bic.w	r3, r3, #7
 8007828:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800783c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800783e:	2300      	movs	r3, #0
}
 8007840:	4618      	mov	r0, r3
 8007842:	3714      	adds	r7, #20
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr

0800784c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800784c:	b480      	push	{r7}
 800784e:	b087      	sub	sp, #28
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	460b      	mov	r3, r1
 8007856:	607a      	str	r2, [r7, #4]
 8007858:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	333c      	adds	r3, #60	@ 0x3c
 8007862:	3304      	adds	r3, #4
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	4a26      	ldr	r2, [pc, #152]	@ (8007904 <USB_EP0_OutStart+0xb8>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d90a      	bls.n	8007886 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800787c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007880:	d101      	bne.n	8007886 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007882:	2300      	movs	r3, #0
 8007884:	e037      	b.n	80078f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800788c:	461a      	mov	r2, r3
 800788e:	2300      	movs	r3, #0
 8007890:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80078a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	697a      	ldr	r2, [r7, #20]
 80078b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078b4:	f043 0318 	orr.w	r3, r3, #24
 80078b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	697a      	ldr	r2, [r7, #20]
 80078c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078c8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80078cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80078ce:	7afb      	ldrb	r3, [r7, #11]
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d10f      	bne.n	80078f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078da:	461a      	mov	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	697a      	ldr	r2, [r7, #20]
 80078ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078ee:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80078f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	371c      	adds	r7, #28
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	4f54300a 	.word	0x4f54300a

08007908 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007910:	2300      	movs	r3, #0
 8007912:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	3301      	adds	r3, #1
 8007918:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007920:	d901      	bls.n	8007926 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e01b      	b.n	800795e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	2b00      	cmp	r3, #0
 800792c:	daf2      	bge.n	8007914 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800792e:	2300      	movs	r3, #0
 8007930:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	f043 0201 	orr.w	r2, r3, #1
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	3301      	adds	r3, #1
 8007942:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800794a:	d901      	bls.n	8007950 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800794c:	2303      	movs	r3, #3
 800794e:	e006      	b.n	800795e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	691b      	ldr	r3, [r3, #16]
 8007954:	f003 0301 	and.w	r3, r3, #1
 8007958:	2b01      	cmp	r3, #1
 800795a:	d0f0      	beq.n	800793e <USB_CoreReset+0x36>

  return HAL_OK;
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3714      	adds	r7, #20
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
	...

0800796c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	460b      	mov	r3, r1
 8007976:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007978:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800797c:	f002 fc38 	bl	800a1f0 <USBD_static_malloc>
 8007980:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d109      	bne.n	800799c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	32b0      	adds	r2, #176	@ 0xb0
 8007992:	2100      	movs	r1, #0
 8007994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007998:	2302      	movs	r3, #2
 800799a:	e0d4      	b.n	8007b46 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800799c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80079a0:	2100      	movs	r1, #0
 80079a2:	68f8      	ldr	r0, [r7, #12]
 80079a4:	f003 f9a2 	bl	800acec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	32b0      	adds	r2, #176	@ 0xb0
 80079b2:	68f9      	ldr	r1, [r7, #12]
 80079b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	32b0      	adds	r2, #176	@ 0xb0
 80079c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	7c1b      	ldrb	r3, [r3, #16]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d138      	bne.n	8007a46 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80079d4:	4b5e      	ldr	r3, [pc, #376]	@ (8007b50 <USBD_CDC_Init+0x1e4>)
 80079d6:	7819      	ldrb	r1, [r3, #0]
 80079d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80079dc:	2202      	movs	r2, #2
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f002 fae3 	bl	8009faa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80079e4:	4b5a      	ldr	r3, [pc, #360]	@ (8007b50 <USBD_CDC_Init+0x1e4>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	f003 020f 	and.w	r2, r3, #15
 80079ec:	6879      	ldr	r1, [r7, #4]
 80079ee:	4613      	mov	r3, r2
 80079f0:	009b      	lsls	r3, r3, #2
 80079f2:	4413      	add	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	440b      	add	r3, r1
 80079f8:	3324      	adds	r3, #36	@ 0x24
 80079fa:	2201      	movs	r2, #1
 80079fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80079fe:	4b55      	ldr	r3, [pc, #340]	@ (8007b54 <USBD_CDC_Init+0x1e8>)
 8007a00:	7819      	ldrb	r1, [r3, #0]
 8007a02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a06:	2202      	movs	r2, #2
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f002 face 	bl	8009faa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007a0e:	4b51      	ldr	r3, [pc, #324]	@ (8007b54 <USBD_CDC_Init+0x1e8>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	f003 020f 	and.w	r2, r3, #15
 8007a16:	6879      	ldr	r1, [r7, #4]
 8007a18:	4613      	mov	r3, r2
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	440b      	add	r3, r1
 8007a22:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007a26:	2201      	movs	r2, #1
 8007a28:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007a2a:	4b4b      	ldr	r3, [pc, #300]	@ (8007b58 <USBD_CDC_Init+0x1ec>)
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	f003 020f 	and.w	r2, r3, #15
 8007a32:	6879      	ldr	r1, [r7, #4]
 8007a34:	4613      	mov	r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	4413      	add	r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	440b      	add	r3, r1
 8007a3e:	3326      	adds	r3, #38	@ 0x26
 8007a40:	2210      	movs	r2, #16
 8007a42:	801a      	strh	r2, [r3, #0]
 8007a44:	e035      	b.n	8007ab2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007a46:	4b42      	ldr	r3, [pc, #264]	@ (8007b50 <USBD_CDC_Init+0x1e4>)
 8007a48:	7819      	ldrb	r1, [r3, #0]
 8007a4a:	2340      	movs	r3, #64	@ 0x40
 8007a4c:	2202      	movs	r2, #2
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f002 faab 	bl	8009faa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007a54:	4b3e      	ldr	r3, [pc, #248]	@ (8007b50 <USBD_CDC_Init+0x1e4>)
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	f003 020f 	and.w	r2, r3, #15
 8007a5c:	6879      	ldr	r1, [r7, #4]
 8007a5e:	4613      	mov	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	440b      	add	r3, r1
 8007a68:	3324      	adds	r3, #36	@ 0x24
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007a6e:	4b39      	ldr	r3, [pc, #228]	@ (8007b54 <USBD_CDC_Init+0x1e8>)
 8007a70:	7819      	ldrb	r1, [r3, #0]
 8007a72:	2340      	movs	r3, #64	@ 0x40
 8007a74:	2202      	movs	r2, #2
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f002 fa97 	bl	8009faa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007a7c:	4b35      	ldr	r3, [pc, #212]	@ (8007b54 <USBD_CDC_Init+0x1e8>)
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	f003 020f 	and.w	r2, r3, #15
 8007a84:	6879      	ldr	r1, [r7, #4]
 8007a86:	4613      	mov	r3, r2
 8007a88:	009b      	lsls	r3, r3, #2
 8007a8a:	4413      	add	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	440b      	add	r3, r1
 8007a90:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007a94:	2201      	movs	r2, #1
 8007a96:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007a98:	4b2f      	ldr	r3, [pc, #188]	@ (8007b58 <USBD_CDC_Init+0x1ec>)
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	f003 020f 	and.w	r2, r3, #15
 8007aa0:	6879      	ldr	r1, [r7, #4]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4413      	add	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	440b      	add	r3, r1
 8007aac:	3326      	adds	r3, #38	@ 0x26
 8007aae:	2210      	movs	r2, #16
 8007ab0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007ab2:	4b29      	ldr	r3, [pc, #164]	@ (8007b58 <USBD_CDC_Init+0x1ec>)
 8007ab4:	7819      	ldrb	r1, [r3, #0]
 8007ab6:	2308      	movs	r3, #8
 8007ab8:	2203      	movs	r2, #3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f002 fa75 	bl	8009faa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007ac0:	4b25      	ldr	r3, [pc, #148]	@ (8007b58 <USBD_CDC_Init+0x1ec>)
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	f003 020f 	and.w	r2, r3, #15
 8007ac8:	6879      	ldr	r1, [r7, #4]
 8007aca:	4613      	mov	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	440b      	add	r3, r1
 8007ad4:	3324      	adds	r3, #36	@ 0x24
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	33b0      	adds	r3, #176	@ 0xb0
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	4413      	add	r3, r2
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d101      	bne.n	8007b14 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8007b10:	2302      	movs	r3, #2
 8007b12:	e018      	b.n	8007b46 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	7c1b      	ldrb	r3, [r3, #16]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d10a      	bne.n	8007b32 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8007b54 <USBD_CDC_Init+0x1e8>)
 8007b1e:	7819      	ldrb	r1, [r3, #0]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f002 fb2c 	bl	800a188 <USBD_LL_PrepareReceive>
 8007b30:	e008      	b.n	8007b44 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007b32:	4b08      	ldr	r3, [pc, #32]	@ (8007b54 <USBD_CDC_Init+0x1e8>)
 8007b34:	7819      	ldrb	r1, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8007b3c:	2340      	movs	r3, #64	@ 0x40
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f002 fb22 	bl	800a188 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007b44:	2300      	movs	r3, #0
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	3710      	adds	r7, #16
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	bd80      	pop	{r7, pc}
 8007b4e:	bf00      	nop
 8007b50:	2000009f 	.word	0x2000009f
 8007b54:	200000a0 	.word	0x200000a0
 8007b58:	200000a1 	.word	0x200000a1

08007b5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b082      	sub	sp, #8
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	460b      	mov	r3, r1
 8007b66:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007b68:	4b3a      	ldr	r3, [pc, #232]	@ (8007c54 <USBD_CDC_DeInit+0xf8>)
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	4619      	mov	r1, r3
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f002 fa41 	bl	8009ff6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007b74:	4b37      	ldr	r3, [pc, #220]	@ (8007c54 <USBD_CDC_DeInit+0xf8>)
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	f003 020f 	and.w	r2, r3, #15
 8007b7c:	6879      	ldr	r1, [r7, #4]
 8007b7e:	4613      	mov	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4413      	add	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	440b      	add	r3, r1
 8007b88:	3324      	adds	r3, #36	@ 0x24
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8007b8e:	4b32      	ldr	r3, [pc, #200]	@ (8007c58 <USBD_CDC_DeInit+0xfc>)
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	4619      	mov	r1, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f002 fa2e 	bl	8009ff6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8007c58 <USBD_CDC_DeInit+0xfc>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	f003 020f 	and.w	r2, r3, #15
 8007ba2:	6879      	ldr	r1, [r7, #4]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	009b      	lsls	r3, r3, #2
 8007ba8:	4413      	add	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	440b      	add	r3, r1
 8007bae:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007bb6:	4b29      	ldr	r3, [pc, #164]	@ (8007c5c <USBD_CDC_DeInit+0x100>)
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f002 fa1a 	bl	8009ff6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8007bc2:	4b26      	ldr	r3, [pc, #152]	@ (8007c5c <USBD_CDC_DeInit+0x100>)
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	f003 020f 	and.w	r2, r3, #15
 8007bca:	6879      	ldr	r1, [r7, #4]
 8007bcc:	4613      	mov	r3, r2
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	4413      	add	r3, r2
 8007bd2:	009b      	lsls	r3, r3, #2
 8007bd4:	440b      	add	r3, r1
 8007bd6:	3324      	adds	r3, #36	@ 0x24
 8007bd8:	2200      	movs	r2, #0
 8007bda:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8007c5c <USBD_CDC_DeInit+0x100>)
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	f003 020f 	and.w	r2, r3, #15
 8007be4:	6879      	ldr	r1, [r7, #4]
 8007be6:	4613      	mov	r3, r2
 8007be8:	009b      	lsls	r3, r3, #2
 8007bea:	4413      	add	r3, r2
 8007bec:	009b      	lsls	r3, r3, #2
 8007bee:	440b      	add	r3, r1
 8007bf0:	3326      	adds	r3, #38	@ 0x26
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	32b0      	adds	r2, #176	@ 0xb0
 8007c00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d01f      	beq.n	8007c48 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	33b0      	adds	r3, #176	@ 0xb0
 8007c12:	009b      	lsls	r3, r3, #2
 8007c14:	4413      	add	r3, r2
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	32b0      	adds	r2, #176	@ 0xb0
 8007c26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f002 faee 	bl	800a20c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	32b0      	adds	r2, #176	@ 0xb0
 8007c3a:	2100      	movs	r1, #0
 8007c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3708      	adds	r7, #8
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	2000009f 	.word	0x2000009f
 8007c58:	200000a0 	.word	0x200000a0
 8007c5c:	200000a1 	.word	0x200000a1

08007c60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	32b0      	adds	r2, #176	@ 0xb0
 8007c74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c78:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8007c82:	2300      	movs	r3, #0
 8007c84:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d101      	bne.n	8007c90 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e0bf      	b.n	8007e10 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d050      	beq.n	8007d3e <USBD_CDC_Setup+0xde>
 8007c9c:	2b20      	cmp	r3, #32
 8007c9e:	f040 80af 	bne.w	8007e00 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	88db      	ldrh	r3, [r3, #6]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d03a      	beq.n	8007d20 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	b25b      	sxtb	r3, r3
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	da1b      	bge.n	8007cec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	33b0      	adds	r3, #176	@ 0xb0
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	4413      	add	r3, r2
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	683a      	ldr	r2, [r7, #0]
 8007cc8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007cca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	88d2      	ldrh	r2, [r2, #6]
 8007cd0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	88db      	ldrh	r3, [r3, #6]
 8007cd6:	2b07      	cmp	r3, #7
 8007cd8:	bf28      	it	cs
 8007cda:	2307      	movcs	r3, #7
 8007cdc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	89fa      	ldrh	r2, [r7, #14]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f001 fd53 	bl	8009790 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007cea:	e090      	b.n	8007e0e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	785a      	ldrb	r2, [r3, #1]
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	88db      	ldrh	r3, [r3, #6]
 8007cfa:	2b3f      	cmp	r3, #63	@ 0x3f
 8007cfc:	d803      	bhi.n	8007d06 <USBD_CDC_Setup+0xa6>
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	88db      	ldrh	r3, [r3, #6]
 8007d02:	b2da      	uxtb	r2, r3
 8007d04:	e000      	b.n	8007d08 <USBD_CDC_Setup+0xa8>
 8007d06:	2240      	movs	r2, #64	@ 0x40
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007d0e:	6939      	ldr	r1, [r7, #16]
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007d16:	461a      	mov	r2, r3
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f001 fd65 	bl	80097e8 <USBD_CtlPrepareRx>
      break;
 8007d1e:	e076      	b.n	8007e0e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	33b0      	adds	r3, #176	@ 0xb0
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	4413      	add	r3, r2
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	689b      	ldr	r3, [r3, #8]
 8007d32:	683a      	ldr	r2, [r7, #0]
 8007d34:	7850      	ldrb	r0, [r2, #1]
 8007d36:	2200      	movs	r2, #0
 8007d38:	6839      	ldr	r1, [r7, #0]
 8007d3a:	4798      	blx	r3
      break;
 8007d3c:	e067      	b.n	8007e0e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	785b      	ldrb	r3, [r3, #1]
 8007d42:	2b0b      	cmp	r3, #11
 8007d44:	d851      	bhi.n	8007dea <USBD_CDC_Setup+0x18a>
 8007d46:	a201      	add	r2, pc, #4	@ (adr r2, 8007d4c <USBD_CDC_Setup+0xec>)
 8007d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d4c:	08007d7d 	.word	0x08007d7d
 8007d50:	08007df9 	.word	0x08007df9
 8007d54:	08007deb 	.word	0x08007deb
 8007d58:	08007deb 	.word	0x08007deb
 8007d5c:	08007deb 	.word	0x08007deb
 8007d60:	08007deb 	.word	0x08007deb
 8007d64:	08007deb 	.word	0x08007deb
 8007d68:	08007deb 	.word	0x08007deb
 8007d6c:	08007deb 	.word	0x08007deb
 8007d70:	08007deb 	.word	0x08007deb
 8007d74:	08007da7 	.word	0x08007da7
 8007d78:	08007dd1 	.word	0x08007dd1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b03      	cmp	r3, #3
 8007d86:	d107      	bne.n	8007d98 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007d88:	f107 030a 	add.w	r3, r7, #10
 8007d8c:	2202      	movs	r2, #2
 8007d8e:	4619      	mov	r1, r3
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f001 fcfd 	bl	8009790 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d96:	e032      	b.n	8007dfe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f001 fc7b 	bl	8009696 <USBD_CtlError>
            ret = USBD_FAIL;
 8007da0:	2303      	movs	r3, #3
 8007da2:	75fb      	strb	r3, [r7, #23]
          break;
 8007da4:	e02b      	b.n	8007dfe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	2b03      	cmp	r3, #3
 8007db0:	d107      	bne.n	8007dc2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007db2:	f107 030d 	add.w	r3, r7, #13
 8007db6:	2201      	movs	r2, #1
 8007db8:	4619      	mov	r1, r3
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f001 fce8 	bl	8009790 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007dc0:	e01d      	b.n	8007dfe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007dc2:	6839      	ldr	r1, [r7, #0]
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f001 fc66 	bl	8009696 <USBD_CtlError>
            ret = USBD_FAIL;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	75fb      	strb	r3, [r7, #23]
          break;
 8007dce:	e016      	b.n	8007dfe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	2b03      	cmp	r3, #3
 8007dda:	d00f      	beq.n	8007dfc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007ddc:	6839      	ldr	r1, [r7, #0]
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f001 fc59 	bl	8009696 <USBD_CtlError>
            ret = USBD_FAIL;
 8007de4:	2303      	movs	r3, #3
 8007de6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007de8:	e008      	b.n	8007dfc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007dea:	6839      	ldr	r1, [r7, #0]
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f001 fc52 	bl	8009696 <USBD_CtlError>
          ret = USBD_FAIL;
 8007df2:	2303      	movs	r3, #3
 8007df4:	75fb      	strb	r3, [r7, #23]
          break;
 8007df6:	e002      	b.n	8007dfe <USBD_CDC_Setup+0x19e>
          break;
 8007df8:	bf00      	nop
 8007dfa:	e008      	b.n	8007e0e <USBD_CDC_Setup+0x1ae>
          break;
 8007dfc:	bf00      	nop
      }
      break;
 8007dfe:	e006      	b.n	8007e0e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007e00:	6839      	ldr	r1, [r7, #0]
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f001 fc47 	bl	8009696 <USBD_CtlError>
      ret = USBD_FAIL;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e0c:	bf00      	nop
  }

  return (uint8_t)ret;
 8007e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3718      	adds	r7, #24
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
 8007e20:	460b      	mov	r3, r1
 8007e22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007e2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	32b0      	adds	r2, #176	@ 0xb0
 8007e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d101      	bne.n	8007e42 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e065      	b.n	8007f0e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	32b0      	adds	r2, #176	@ 0xb0
 8007e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e50:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007e52:	78fb      	ldrb	r3, [r7, #3]
 8007e54:	f003 020f 	and.w	r2, r3, #15
 8007e58:	6879      	ldr	r1, [r7, #4]
 8007e5a:	4613      	mov	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	4413      	add	r3, r2
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	440b      	add	r3, r1
 8007e64:	3318      	adds	r3, #24
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d02f      	beq.n	8007ecc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007e6c:	78fb      	ldrb	r3, [r7, #3]
 8007e6e:	f003 020f 	and.w	r2, r3, #15
 8007e72:	6879      	ldr	r1, [r7, #4]
 8007e74:	4613      	mov	r3, r2
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	4413      	add	r3, r2
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	440b      	add	r3, r1
 8007e7e:	3318      	adds	r3, #24
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	78fb      	ldrb	r3, [r7, #3]
 8007e84:	f003 010f 	and.w	r1, r3, #15
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	460b      	mov	r3, r1
 8007e8c:	00db      	lsls	r3, r3, #3
 8007e8e:	440b      	add	r3, r1
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	4403      	add	r3, r0
 8007e94:	331c      	adds	r3, #28
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	fbb2 f1f3 	udiv	r1, r2, r3
 8007e9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ea0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d112      	bne.n	8007ecc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007ea6:	78fb      	ldrb	r3, [r7, #3]
 8007ea8:	f003 020f 	and.w	r2, r3, #15
 8007eac:	6879      	ldr	r1, [r7, #4]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	009b      	lsls	r3, r3, #2
 8007eb2:	4413      	add	r3, r2
 8007eb4:	009b      	lsls	r3, r3, #2
 8007eb6:	440b      	add	r3, r1
 8007eb8:	3318      	adds	r3, #24
 8007eba:	2200      	movs	r2, #0
 8007ebc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007ebe:	78f9      	ldrb	r1, [r7, #3]
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f002 f93e 	bl	800a146 <USBD_LL_Transmit>
 8007eca:	e01f      	b.n	8007f0c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	33b0      	adds	r3, #176	@ 0xb0
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4413      	add	r3, r2
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	691b      	ldr	r3, [r3, #16]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d010      	beq.n	8007f0c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	33b0      	adds	r3, #176	@ 0xb0
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4413      	add	r3, r2
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007f08:	78fa      	ldrb	r2, [r7, #3]
 8007f0a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}

08007f16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007f16:	b580      	push	{r7, lr}
 8007f18:	b084      	sub	sp, #16
 8007f1a:	af00      	add	r7, sp, #0
 8007f1c:	6078      	str	r0, [r7, #4]
 8007f1e:	460b      	mov	r3, r1
 8007f20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	32b0      	adds	r2, #176	@ 0xb0
 8007f2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f30:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	32b0      	adds	r2, #176	@ 0xb0
 8007f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d101      	bne.n	8007f48 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e01a      	b.n	8007f7e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007f48:	78fb      	ldrb	r3, [r7, #3]
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f002 f93c 	bl	800a1ca <USBD_LL_GetRxDataSize>
 8007f52:	4602      	mov	r2, r0
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	33b0      	adds	r3, #176	@ 0xb0
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8007f72:	68fa      	ldr	r2, [r7, #12]
 8007f74:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8007f78:	4611      	mov	r1, r2
 8007f7a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b084      	sub	sp, #16
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	32b0      	adds	r2, #176	@ 0xb0
 8007f98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d101      	bne.n	8007fa8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007fa4:	2303      	movs	r3, #3
 8007fa6:	e024      	b.n	8007ff2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	33b0      	adds	r3, #176	@ 0xb0
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4413      	add	r3, r2
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d019      	beq.n	8007ff0 <USBD_CDC_EP0_RxReady+0x6a>
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007fc2:	2bff      	cmp	r3, #255	@ 0xff
 8007fc4:	d014      	beq.n	8007ff0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007fcc:	687a      	ldr	r2, [r7, #4]
 8007fce:	33b0      	adds	r3, #176	@ 0xb0
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	4413      	add	r3, r2
 8007fd4:	685b      	ldr	r3, [r3, #4]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007fde:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007fe6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	22ff      	movs	r2, #255	@ 0xff
 8007fec:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
	...

08007ffc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b086      	sub	sp, #24
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008004:	2182      	movs	r1, #130	@ 0x82
 8008006:	4818      	ldr	r0, [pc, #96]	@ (8008068 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008008:	f000 fd0f 	bl	8008a2a <USBD_GetEpDesc>
 800800c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800800e:	2101      	movs	r1, #1
 8008010:	4815      	ldr	r0, [pc, #84]	@ (8008068 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008012:	f000 fd0a 	bl	8008a2a <USBD_GetEpDesc>
 8008016:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008018:	2181      	movs	r1, #129	@ 0x81
 800801a:	4813      	ldr	r0, [pc, #76]	@ (8008068 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800801c:	f000 fd05 	bl	8008a2a <USBD_GetEpDesc>
 8008020:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d002      	beq.n	800802e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	2210      	movs	r2, #16
 800802c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d006      	beq.n	8008042 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008034:	693b      	ldr	r3, [r7, #16]
 8008036:	2200      	movs	r2, #0
 8008038:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800803c:	711a      	strb	r2, [r3, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d006      	beq.n	8008056 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	2200      	movs	r2, #0
 800804c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008050:	711a      	strb	r2, [r3, #4]
 8008052:	2200      	movs	r2, #0
 8008054:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2243      	movs	r2, #67	@ 0x43
 800805a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800805c:	4b02      	ldr	r3, [pc, #8]	@ (8008068 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800805e:	4618      	mov	r0, r3
 8008060:	3718      	adds	r7, #24
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	2000005c 	.word	0x2000005c

0800806c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008074:	2182      	movs	r1, #130	@ 0x82
 8008076:	4818      	ldr	r0, [pc, #96]	@ (80080d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008078:	f000 fcd7 	bl	8008a2a <USBD_GetEpDesc>
 800807c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800807e:	2101      	movs	r1, #1
 8008080:	4815      	ldr	r0, [pc, #84]	@ (80080d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008082:	f000 fcd2 	bl	8008a2a <USBD_GetEpDesc>
 8008086:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008088:	2181      	movs	r1, #129	@ 0x81
 800808a:	4813      	ldr	r0, [pc, #76]	@ (80080d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800808c:	f000 fccd 	bl	8008a2a <USBD_GetEpDesc>
 8008090:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d002      	beq.n	800809e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	2210      	movs	r2, #16
 800809c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d006      	beq.n	80080b2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	2200      	movs	r2, #0
 80080a8:	711a      	strb	r2, [r3, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f042 0202 	orr.w	r2, r2, #2
 80080b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d006      	beq.n	80080c6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2200      	movs	r2, #0
 80080bc:	711a      	strb	r2, [r3, #4]
 80080be:	2200      	movs	r2, #0
 80080c0:	f042 0202 	orr.w	r2, r2, #2
 80080c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2243      	movs	r2, #67	@ 0x43
 80080ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80080cc:	4b02      	ldr	r3, [pc, #8]	@ (80080d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3718      	adds	r7, #24
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	2000005c 	.word	0x2000005c

080080dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b086      	sub	sp, #24
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80080e4:	2182      	movs	r1, #130	@ 0x82
 80080e6:	4818      	ldr	r0, [pc, #96]	@ (8008148 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80080e8:	f000 fc9f 	bl	8008a2a <USBD_GetEpDesc>
 80080ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80080ee:	2101      	movs	r1, #1
 80080f0:	4815      	ldr	r0, [pc, #84]	@ (8008148 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80080f2:	f000 fc9a 	bl	8008a2a <USBD_GetEpDesc>
 80080f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80080f8:	2181      	movs	r1, #129	@ 0x81
 80080fa:	4813      	ldr	r0, [pc, #76]	@ (8008148 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80080fc:	f000 fc95 	bl	8008a2a <USBD_GetEpDesc>
 8008100:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008102:	697b      	ldr	r3, [r7, #20]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d002      	beq.n	800810e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	2210      	movs	r2, #16
 800810c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d006      	beq.n	8008122 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008114:	693b      	ldr	r3, [r7, #16]
 8008116:	2200      	movs	r2, #0
 8008118:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800811c:	711a      	strb	r2, [r3, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d006      	beq.n	8008136 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2200      	movs	r2, #0
 800812c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008130:	711a      	strb	r2, [r3, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2243      	movs	r2, #67	@ 0x43
 800813a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800813c:	4b02      	ldr	r3, [pc, #8]	@ (8008148 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800813e:	4618      	mov	r0, r3
 8008140:	3718      	adds	r7, #24
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	2000005c 	.word	0x2000005c

0800814c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	220a      	movs	r2, #10
 8008158:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800815a:	4b03      	ldr	r3, [pc, #12]	@ (8008168 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800815c:	4618      	mov	r0, r3
 800815e:	370c      	adds	r7, #12
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr
 8008168:	20000018 	.word	0x20000018

0800816c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800816c:	b480      	push	{r7}
 800816e:	b083      	sub	sp, #12
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d101      	bne.n	8008180 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800817c:	2303      	movs	r3, #3
 800817e:	e009      	b.n	8008194 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008186:	687a      	ldr	r2, [r7, #4]
 8008188:	33b0      	adds	r3, #176	@ 0xb0
 800818a:	009b      	lsls	r3, r3, #2
 800818c:	4413      	add	r3, r2
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008192:	2300      	movs	r3, #0
}
 8008194:	4618      	mov	r0, r3
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr

080081a0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	32b0      	adds	r2, #176	@ 0xb0
 80081b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081ba:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d101      	bne.n	80081c6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80081c2:	2303      	movs	r3, #3
 80081c4:	e008      	b.n	80081d8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	371c      	adds	r7, #28
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	32b0      	adds	r2, #176	@ 0xb0
 80081f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d101      	bne.n	8008208 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008204:	2303      	movs	r3, #3
 8008206:	e004      	b.n	8008212 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	683a      	ldr	r2, [r7, #0]
 800820c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
	...

08008220 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b084      	sub	sp, #16
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	32b0      	adds	r2, #176	@ 0xb0
 8008232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008236:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	32b0      	adds	r2, #176	@ 0xb0
 8008242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800824a:	2303      	movs	r3, #3
 800824c:	e018      	b.n	8008280 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	7c1b      	ldrb	r3, [r3, #16]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d10a      	bne.n	800826c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008256:	4b0c      	ldr	r3, [pc, #48]	@ (8008288 <USBD_CDC_ReceivePacket+0x68>)
 8008258:	7819      	ldrb	r1, [r3, #0]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008260:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f001 ff8f 	bl	800a188 <USBD_LL_PrepareReceive>
 800826a:	e008      	b.n	800827e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800826c:	4b06      	ldr	r3, [pc, #24]	@ (8008288 <USBD_CDC_ReceivePacket+0x68>)
 800826e:	7819      	ldrb	r1, [r3, #0]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008276:	2340      	movs	r3, #64	@ 0x40
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f001 ff85 	bl	800a188 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3710      	adds	r7, #16
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}
 8008288:	200000a0 	.word	0x200000a0

0800828c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b086      	sub	sp, #24
 8008290:	af00      	add	r7, sp, #0
 8008292:	60f8      	str	r0, [r7, #12]
 8008294:	60b9      	str	r1, [r7, #8]
 8008296:	4613      	mov	r3, r2
 8008298:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d101      	bne.n	80082a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80082a0:	2303      	movs	r3, #3
 80082a2:	e01f      	b.n	80082e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	2200      	movs	r2, #0
 80082a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	2200      	movs	r2, #0
 80082b0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	79fa      	ldrb	r2, [r7, #7]
 80082d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f001 fdff 	bl	8009edc <USBD_LL_Init>
 80082de:	4603      	mov	r3, r0
 80082e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80082e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3718      	adds	r7, #24
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80082f6:	2300      	movs	r3, #0
 80082f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d101      	bne.n	8008304 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008300:	2303      	movs	r3, #3
 8008302:	e025      	b.n	8008350 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	32ae      	adds	r2, #174	@ 0xae
 8008316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800831a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800831c:	2b00      	cmp	r3, #0
 800831e:	d00f      	beq.n	8008340 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	32ae      	adds	r2, #174	@ 0xae
 800832a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800832e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008330:	f107 020e 	add.w	r2, r7, #14
 8008334:	4610      	mov	r0, r2
 8008336:	4798      	blx	r3
 8008338:	4602      	mov	r2, r0
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008346:	1c5a      	adds	r2, r3, #1
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f001 fe07 	bl	8009f74 <USBD_LL_Start>
 8008366:	4603      	mov	r3, r0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008378:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800837a:	4618      	mov	r0, r3
 800837c:	370c      	adds	r7, #12
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr

08008386 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b084      	sub	sp, #16
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
 800838e:	460b      	mov	r3, r1
 8008390:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800839c:	2b00      	cmp	r3, #0
 800839e:	d009      	beq.n	80083b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	78fa      	ldrb	r2, [r7, #3]
 80083aa:	4611      	mov	r1, r2
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	4798      	blx	r3
 80083b0:	4603      	mov	r3, r0
 80083b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	460b      	mov	r3, r1
 80083c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80083ca:	2300      	movs	r3, #0
 80083cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	78fa      	ldrb	r2, [r7, #3]
 80083d8:	4611      	mov	r1, r2
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	4798      	blx	r3
 80083de:	4603      	mov	r3, r0
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d001      	beq.n	80083e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80083e4:	2303      	movs	r3, #3
 80083e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3710      	adds	r7, #16
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bd80      	pop	{r7, pc}

080083f2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b084      	sub	sp, #16
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	4618      	mov	r0, r3
 8008406:	f001 f90c 	bl	8009622 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2201      	movs	r2, #1
 800840e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008418:	461a      	mov	r2, r3
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008426:	f003 031f 	and.w	r3, r3, #31
 800842a:	2b02      	cmp	r3, #2
 800842c:	d01a      	beq.n	8008464 <USBD_LL_SetupStage+0x72>
 800842e:	2b02      	cmp	r3, #2
 8008430:	d822      	bhi.n	8008478 <USBD_LL_SetupStage+0x86>
 8008432:	2b00      	cmp	r3, #0
 8008434:	d002      	beq.n	800843c <USBD_LL_SetupStage+0x4a>
 8008436:	2b01      	cmp	r3, #1
 8008438:	d00a      	beq.n	8008450 <USBD_LL_SetupStage+0x5e>
 800843a:	e01d      	b.n	8008478 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008442:	4619      	mov	r1, r3
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fb63 	bl	8008b10 <USBD_StdDevReq>
 800844a:	4603      	mov	r3, r0
 800844c:	73fb      	strb	r3, [r7, #15]
      break;
 800844e:	e020      	b.n	8008492 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008456:	4619      	mov	r1, r3
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f000 fbcb 	bl	8008bf4 <USBD_StdItfReq>
 800845e:	4603      	mov	r3, r0
 8008460:	73fb      	strb	r3, [r7, #15]
      break;
 8008462:	e016      	b.n	8008492 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800846a:	4619      	mov	r1, r3
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f000 fc2d 	bl	8008ccc <USBD_StdEPReq>
 8008472:	4603      	mov	r3, r0
 8008474:	73fb      	strb	r3, [r7, #15]
      break;
 8008476:	e00c      	b.n	8008492 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800847e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008482:	b2db      	uxtb	r3, r3
 8008484:	4619      	mov	r1, r3
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f001 fdd4 	bl	800a034 <USBD_LL_StallEP>
 800848c:	4603      	mov	r3, r0
 800848e:	73fb      	strb	r3, [r7, #15]
      break;
 8008490:	bf00      	nop
  }

  return ret;
 8008492:	7bfb      	ldrb	r3, [r7, #15]
}
 8008494:	4618      	mov	r0, r3
 8008496:	3710      	adds	r7, #16
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}

0800849c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b086      	sub	sp, #24
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	60f8      	str	r0, [r7, #12]
 80084a4:	460b      	mov	r3, r1
 80084a6:	607a      	str	r2, [r7, #4]
 80084a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80084aa:	2300      	movs	r3, #0
 80084ac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80084ae:	7afb      	ldrb	r3, [r7, #11]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d16e      	bne.n	8008592 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80084ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80084c2:	2b03      	cmp	r3, #3
 80084c4:	f040 8098 	bne.w	80085f8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	689a      	ldr	r2, [r3, #8]
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d913      	bls.n	80084fc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	689a      	ldr	r2, [r3, #8]
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	1ad2      	subs	r2, r2, r3
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	68da      	ldr	r2, [r3, #12]
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	4293      	cmp	r3, r2
 80084ec:	bf28      	it	cs
 80084ee:	4613      	movcs	r3, r2
 80084f0:	461a      	mov	r2, r3
 80084f2:	6879      	ldr	r1, [r7, #4]
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f001 f994 	bl	8009822 <USBD_CtlContinueRx>
 80084fa:	e07d      	b.n	80085f8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008502:	f003 031f 	and.w	r3, r3, #31
 8008506:	2b02      	cmp	r3, #2
 8008508:	d014      	beq.n	8008534 <USBD_LL_DataOutStage+0x98>
 800850a:	2b02      	cmp	r3, #2
 800850c:	d81d      	bhi.n	800854a <USBD_LL_DataOutStage+0xae>
 800850e:	2b00      	cmp	r3, #0
 8008510:	d002      	beq.n	8008518 <USBD_LL_DataOutStage+0x7c>
 8008512:	2b01      	cmp	r3, #1
 8008514:	d003      	beq.n	800851e <USBD_LL_DataOutStage+0x82>
 8008516:	e018      	b.n	800854a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008518:	2300      	movs	r3, #0
 800851a:	75bb      	strb	r3, [r7, #22]
            break;
 800851c:	e018      	b.n	8008550 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008524:	b2db      	uxtb	r3, r3
 8008526:	4619      	mov	r1, r3
 8008528:	68f8      	ldr	r0, [r7, #12]
 800852a:	f000 fa64 	bl	80089f6 <USBD_CoreFindIF>
 800852e:	4603      	mov	r3, r0
 8008530:	75bb      	strb	r3, [r7, #22]
            break;
 8008532:	e00d      	b.n	8008550 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800853a:	b2db      	uxtb	r3, r3
 800853c:	4619      	mov	r1, r3
 800853e:	68f8      	ldr	r0, [r7, #12]
 8008540:	f000 fa66 	bl	8008a10 <USBD_CoreFindEP>
 8008544:	4603      	mov	r3, r0
 8008546:	75bb      	strb	r3, [r7, #22]
            break;
 8008548:	e002      	b.n	8008550 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800854a:	2300      	movs	r3, #0
 800854c:	75bb      	strb	r3, [r7, #22]
            break;
 800854e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008550:	7dbb      	ldrb	r3, [r7, #22]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d119      	bne.n	800858a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800855c:	b2db      	uxtb	r3, r3
 800855e:	2b03      	cmp	r3, #3
 8008560:	d113      	bne.n	800858a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008562:	7dba      	ldrb	r2, [r7, #22]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	32ae      	adds	r2, #174	@ 0xae
 8008568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d00b      	beq.n	800858a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008572:	7dba      	ldrb	r2, [r7, #22]
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800857a:	7dba      	ldrb	r2, [r7, #22]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	32ae      	adds	r2, #174	@ 0xae
 8008580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800858a:	68f8      	ldr	r0, [r7, #12]
 800858c:	f001 f95a 	bl	8009844 <USBD_CtlSendStatus>
 8008590:	e032      	b.n	80085f8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008592:	7afb      	ldrb	r3, [r7, #11]
 8008594:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008598:	b2db      	uxtb	r3, r3
 800859a:	4619      	mov	r1, r3
 800859c:	68f8      	ldr	r0, [r7, #12]
 800859e:	f000 fa37 	bl	8008a10 <USBD_CoreFindEP>
 80085a2:	4603      	mov	r3, r0
 80085a4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085a6:	7dbb      	ldrb	r3, [r7, #22]
 80085a8:	2bff      	cmp	r3, #255	@ 0xff
 80085aa:	d025      	beq.n	80085f8 <USBD_LL_DataOutStage+0x15c>
 80085ac:	7dbb      	ldrb	r3, [r7, #22]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d122      	bne.n	80085f8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80085b8:	b2db      	uxtb	r3, r3
 80085ba:	2b03      	cmp	r3, #3
 80085bc:	d117      	bne.n	80085ee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80085be:	7dba      	ldrb	r2, [r7, #22]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	32ae      	adds	r2, #174	@ 0xae
 80085c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085c8:	699b      	ldr	r3, [r3, #24]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00f      	beq.n	80085ee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80085ce:	7dba      	ldrb	r2, [r7, #22]
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80085d6:	7dba      	ldrb	r2, [r7, #22]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	32ae      	adds	r2, #174	@ 0xae
 80085dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	7afa      	ldrb	r2, [r7, #11]
 80085e4:	4611      	mov	r1, r2
 80085e6:	68f8      	ldr	r0, [r7, #12]
 80085e8:	4798      	blx	r3
 80085ea:	4603      	mov	r3, r0
 80085ec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80085ee:	7dfb      	ldrb	r3, [r7, #23]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d001      	beq.n	80085f8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80085f4:	7dfb      	ldrb	r3, [r7, #23]
 80085f6:	e000      	b.n	80085fa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	3718      	adds	r7, #24
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}

08008602 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008602:	b580      	push	{r7, lr}
 8008604:	b086      	sub	sp, #24
 8008606:	af00      	add	r7, sp, #0
 8008608:	60f8      	str	r0, [r7, #12]
 800860a:	460b      	mov	r3, r1
 800860c:	607a      	str	r2, [r7, #4]
 800860e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008610:	7afb      	ldrb	r3, [r7, #11]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d16f      	bne.n	80086f6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	3314      	adds	r3, #20
 800861a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008622:	2b02      	cmp	r3, #2
 8008624:	d15a      	bne.n	80086dc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008626:	693b      	ldr	r3, [r7, #16]
 8008628:	689a      	ldr	r2, [r3, #8]
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	429a      	cmp	r2, r3
 8008630:	d914      	bls.n	800865c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008632:	693b      	ldr	r3, [r7, #16]
 8008634:	689a      	ldr	r2, [r3, #8]
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	1ad2      	subs	r2, r2, r3
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008640:	693b      	ldr	r3, [r7, #16]
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	461a      	mov	r2, r3
 8008646:	6879      	ldr	r1, [r7, #4]
 8008648:	68f8      	ldr	r0, [r7, #12]
 800864a:	f001 f8bc 	bl	80097c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800864e:	2300      	movs	r3, #0
 8008650:	2200      	movs	r2, #0
 8008652:	2100      	movs	r1, #0
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f001 fd97 	bl	800a188 <USBD_LL_PrepareReceive>
 800865a:	e03f      	b.n	80086dc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	68da      	ldr	r2, [r3, #12]
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	429a      	cmp	r2, r3
 8008666:	d11c      	bne.n	80086a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	685a      	ldr	r2, [r3, #4]
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008670:	429a      	cmp	r2, r3
 8008672:	d316      	bcc.n	80086a2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	685a      	ldr	r2, [r3, #4]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800867e:	429a      	cmp	r2, r3
 8008680:	d20f      	bcs.n	80086a2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008682:	2200      	movs	r2, #0
 8008684:	2100      	movs	r1, #0
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f001 f89d 	bl	80097c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2200      	movs	r2, #0
 8008690:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008694:	2300      	movs	r3, #0
 8008696:	2200      	movs	r2, #0
 8008698:	2100      	movs	r1, #0
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f001 fd74 	bl	800a188 <USBD_LL_PrepareReceive>
 80086a0:	e01c      	b.n	80086dc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	d10f      	bne.n	80086ce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d009      	beq.n	80086ce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	2200      	movs	r2, #0
 80086be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80086ce:	2180      	movs	r1, #128	@ 0x80
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f001 fcaf 	bl	800a034 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80086d6:	68f8      	ldr	r0, [r7, #12]
 80086d8:	f001 f8c7 	bl	800986a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d03a      	beq.n	800875c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80086e6:	68f8      	ldr	r0, [r7, #12]
 80086e8:	f7ff fe42 	bl	8008370 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80086f4:	e032      	b.n	800875c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80086f6:	7afb      	ldrb	r3, [r7, #11]
 80086f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80086fc:	b2db      	uxtb	r3, r3
 80086fe:	4619      	mov	r1, r3
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f000 f985 	bl	8008a10 <USBD_CoreFindEP>
 8008706:	4603      	mov	r3, r0
 8008708:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800870a:	7dfb      	ldrb	r3, [r7, #23]
 800870c:	2bff      	cmp	r3, #255	@ 0xff
 800870e:	d025      	beq.n	800875c <USBD_LL_DataInStage+0x15a>
 8008710:	7dfb      	ldrb	r3, [r7, #23]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d122      	bne.n	800875c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b03      	cmp	r3, #3
 8008720:	d11c      	bne.n	800875c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008722:	7dfa      	ldrb	r2, [r7, #23]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	32ae      	adds	r2, #174	@ 0xae
 8008728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d014      	beq.n	800875c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008732:	7dfa      	ldrb	r2, [r7, #23]
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800873a:	7dfa      	ldrb	r2, [r7, #23]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	32ae      	adds	r2, #174	@ 0xae
 8008740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008744:	695b      	ldr	r3, [r3, #20]
 8008746:	7afa      	ldrb	r2, [r7, #11]
 8008748:	4611      	mov	r1, r2
 800874a:	68f8      	ldr	r0, [r7, #12]
 800874c:	4798      	blx	r3
 800874e:	4603      	mov	r3, r0
 8008750:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008752:	7dbb      	ldrb	r3, [r7, #22]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d001      	beq.n	800875c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008758:	7dbb      	ldrb	r3, [r7, #22]
 800875a:	e000      	b.n	800875e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3718      	adds	r7, #24
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008766:	b580      	push	{r7, lr}
 8008768:	b084      	sub	sp, #16
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800876e:	2300      	movs	r3, #0
 8008770:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d014      	beq.n	80087cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00e      	beq.n	80087cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	687a      	ldr	r2, [r7, #4]
 80087b8:	6852      	ldr	r2, [r2, #4]
 80087ba:	b2d2      	uxtb	r2, r2
 80087bc:	4611      	mov	r1, r2
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	4798      	blx	r3
 80087c2:	4603      	mov	r3, r0
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d001      	beq.n	80087cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80087c8:	2303      	movs	r3, #3
 80087ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087cc:	2340      	movs	r3, #64	@ 0x40
 80087ce:	2200      	movs	r2, #0
 80087d0:	2100      	movs	r1, #0
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f001 fbe9 	bl	8009faa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2240      	movs	r2, #64	@ 0x40
 80087e4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80087e8:	2340      	movs	r3, #64	@ 0x40
 80087ea:	2200      	movs	r2, #0
 80087ec:	2180      	movs	r1, #128	@ 0x80
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f001 fbdb 	bl	8009faa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2201      	movs	r2, #1
 80087f8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2240      	movs	r2, #64	@ 0x40
 80087fe:	621a      	str	r2, [r3, #32]

  return ret;
 8008800:	7bfb      	ldrb	r3, [r7, #15]
}
 8008802:	4618      	mov	r0, r3
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800880a:	b480      	push	{r7}
 800880c:	b083      	sub	sp, #12
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
 8008812:	460b      	mov	r3, r1
 8008814:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	78fa      	ldrb	r2, [r7, #3]
 800881a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	370c      	adds	r7, #12
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800882a:	b480      	push	{r7}
 800882c:	b083      	sub	sp, #12
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b04      	cmp	r3, #4
 800883c:	d006      	beq.n	800884c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008844:	b2da      	uxtb	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2204      	movs	r2, #4
 8008850:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008862:	b480      	push	{r7}
 8008864:	b083      	sub	sp, #12
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008870:	b2db      	uxtb	r3, r3
 8008872:	2b04      	cmp	r3, #4
 8008874:	d106      	bne.n	8008884 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800887c:	b2da      	uxtb	r2, r3
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr

08008892 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b082      	sub	sp, #8
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	2b03      	cmp	r3, #3
 80088a4:	d110      	bne.n	80088c8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00b      	beq.n	80088c8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088b6:	69db      	ldr	r3, [r3, #28]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d005      	beq.n	80088c8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80088c2:	69db      	ldr	r3, [r3, #28]
 80088c4:	6878      	ldr	r0, [r7, #4]
 80088c6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b082      	sub	sp, #8
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
 80088da:	460b      	mov	r3, r1
 80088dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	32ae      	adds	r2, #174	@ 0xae
 80088e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d101      	bne.n	80088f4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80088f0:	2303      	movs	r3, #3
 80088f2:	e01c      	b.n	800892e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	2b03      	cmp	r3, #3
 80088fe:	d115      	bne.n	800892c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	32ae      	adds	r2, #174	@ 0xae
 800890a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800890e:	6a1b      	ldr	r3, [r3, #32]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00b      	beq.n	800892c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	32ae      	adds	r2, #174	@ 0xae
 800891e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008922:	6a1b      	ldr	r3, [r3, #32]
 8008924:	78fa      	ldrb	r2, [r7, #3]
 8008926:	4611      	mov	r1, r2
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800892c:	2300      	movs	r3, #0
}
 800892e:	4618      	mov	r0, r3
 8008930:	3708      	adds	r7, #8
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}

08008936 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	b082      	sub	sp, #8
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	460b      	mov	r3, r1
 8008940:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	32ae      	adds	r2, #174	@ 0xae
 800894c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d101      	bne.n	8008958 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008954:	2303      	movs	r3, #3
 8008956:	e01c      	b.n	8008992 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b03      	cmp	r3, #3
 8008962:	d115      	bne.n	8008990 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	32ae      	adds	r2, #174	@ 0xae
 800896e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00b      	beq.n	8008990 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	32ae      	adds	r2, #174	@ 0xae
 8008982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008988:	78fa      	ldrb	r2, [r7, #3]
 800898a:	4611      	mov	r1, r2
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3708      	adds	r7, #8
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800899a:	b480      	push	{r7}
 800899c:	b083      	sub	sp, #12
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089a2:	2300      	movs	r3, #0
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80089b8:	2300      	movs	r3, #0
 80089ba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d00e      	beq.n	80089ec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	687a      	ldr	r2, [r7, #4]
 80089d8:	6852      	ldr	r2, [r2, #4]
 80089da:	b2d2      	uxtb	r2, r2
 80089dc:	4611      	mov	r1, r2
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	4798      	blx	r3
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d001      	beq.n	80089ec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80089e8:	2303      	movs	r3, #3
 80089ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80089f6:	b480      	push	{r7}
 80089f8:	b083      	sub	sp, #12
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	460b      	mov	r3, r1
 8008a00:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008a02:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
 8008a18:	460b      	mov	r3, r1
 8008a1a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008a1c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b086      	sub	sp, #24
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
 8008a32:	460b      	mov	r3, r1
 8008a34:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	885b      	ldrh	r3, [r3, #2]
 8008a46:	b29b      	uxth	r3, r3
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	7812      	ldrb	r2, [r2, #0]
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d91f      	bls.n	8008a90 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	781b      	ldrb	r3, [r3, #0]
 8008a54:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008a56:	e013      	b.n	8008a80 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008a58:	f107 030a 	add.w	r3, r7, #10
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	6978      	ldr	r0, [r7, #20]
 8008a60:	f000 f81b 	bl	8008a9a <USBD_GetNextDesc>
 8008a64:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	785b      	ldrb	r3, [r3, #1]
 8008a6a:	2b05      	cmp	r3, #5
 8008a6c:	d108      	bne.n	8008a80 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	789b      	ldrb	r3, [r3, #2]
 8008a76:	78fa      	ldrb	r2, [r7, #3]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d008      	beq.n	8008a8e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	885b      	ldrh	r3, [r3, #2]
 8008a84:	b29a      	uxth	r2, r3
 8008a86:	897b      	ldrh	r3, [r7, #10]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d8e5      	bhi.n	8008a58 <USBD_GetEpDesc+0x2e>
 8008a8c:	e000      	b.n	8008a90 <USBD_GetEpDesc+0x66>
          break;
 8008a8e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008a90:	693b      	ldr	r3, [r7, #16]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3718      	adds	r7, #24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b085      	sub	sp, #20
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	881b      	ldrh	r3, [r3, #0]
 8008aac:	68fa      	ldr	r2, [r7, #12]
 8008aae:	7812      	ldrb	r2, [r2, #0]
 8008ab0:	4413      	add	r3, r2
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	461a      	mov	r2, r3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr

08008ad2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008ad2:	b480      	push	{r7}
 8008ad4:	b087      	sub	sp, #28
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	781b      	ldrb	r3, [r3, #0]
 8008aee:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008af0:	8a3b      	ldrh	r3, [r7, #16]
 8008af2:	021b      	lsls	r3, r3, #8
 8008af4:	b21a      	sxth	r2, r3
 8008af6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008afa:	4313      	orrs	r3, r2
 8008afc:	b21b      	sxth	r3, r3
 8008afe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008b00:	89fb      	ldrh	r3, [r7, #14]
}
 8008b02:	4618      	mov	r0, r3
 8008b04:	371c      	adds	r7, #28
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
	...

08008b10 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	781b      	ldrb	r3, [r3, #0]
 8008b22:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b26:	2b40      	cmp	r3, #64	@ 0x40
 8008b28:	d005      	beq.n	8008b36 <USBD_StdDevReq+0x26>
 8008b2a:	2b40      	cmp	r3, #64	@ 0x40
 8008b2c:	d857      	bhi.n	8008bde <USBD_StdDevReq+0xce>
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00f      	beq.n	8008b52 <USBD_StdDevReq+0x42>
 8008b32:	2b20      	cmp	r3, #32
 8008b34:	d153      	bne.n	8008bde <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	32ae      	adds	r2, #174	@ 0xae
 8008b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	4798      	blx	r3
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b50:	e04a      	b.n	8008be8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	785b      	ldrb	r3, [r3, #1]
 8008b56:	2b09      	cmp	r3, #9
 8008b58:	d83b      	bhi.n	8008bd2 <USBD_StdDevReq+0xc2>
 8008b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8008b60 <USBD_StdDevReq+0x50>)
 8008b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b60:	08008bb5 	.word	0x08008bb5
 8008b64:	08008bc9 	.word	0x08008bc9
 8008b68:	08008bd3 	.word	0x08008bd3
 8008b6c:	08008bbf 	.word	0x08008bbf
 8008b70:	08008bd3 	.word	0x08008bd3
 8008b74:	08008b93 	.word	0x08008b93
 8008b78:	08008b89 	.word	0x08008b89
 8008b7c:	08008bd3 	.word	0x08008bd3
 8008b80:	08008bab 	.word	0x08008bab
 8008b84:	08008b9d 	.word	0x08008b9d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fa3c 	bl	8009008 <USBD_GetDescriptor>
          break;
 8008b90:	e024      	b.n	8008bdc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008b92:	6839      	ldr	r1, [r7, #0]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 fba1 	bl	80092dc <USBD_SetAddress>
          break;
 8008b9a:	e01f      	b.n	8008bdc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fbe0 	bl	8009364 <USBD_SetConfig>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	73fb      	strb	r3, [r7, #15]
          break;
 8008ba8:	e018      	b.n	8008bdc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008baa:	6839      	ldr	r1, [r7, #0]
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fc83 	bl	80094b8 <USBD_GetConfig>
          break;
 8008bb2:	e013      	b.n	8008bdc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008bb4:	6839      	ldr	r1, [r7, #0]
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 fcb4 	bl	8009524 <USBD_GetStatus>
          break;
 8008bbc:	e00e      	b.n	8008bdc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008bbe:	6839      	ldr	r1, [r7, #0]
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 fce3 	bl	800958c <USBD_SetFeature>
          break;
 8008bc6:	e009      	b.n	8008bdc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008bc8:	6839      	ldr	r1, [r7, #0]
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fd07 	bl	80095de <USBD_ClrFeature>
          break;
 8008bd0:	e004      	b.n	8008bdc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008bd2:	6839      	ldr	r1, [r7, #0]
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f000 fd5e 	bl	8009696 <USBD_CtlError>
          break;
 8008bda:	bf00      	nop
      }
      break;
 8008bdc:	e004      	b.n	8008be8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8008bde:	6839      	ldr	r1, [r7, #0]
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 fd58 	bl	8009696 <USBD_CtlError>
      break;
 8008be6:	bf00      	nop
  }

  return ret;
 8008be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop

08008bf4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b084      	sub	sp, #16
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c0a:	2b40      	cmp	r3, #64	@ 0x40
 8008c0c:	d005      	beq.n	8008c1a <USBD_StdItfReq+0x26>
 8008c0e:	2b40      	cmp	r3, #64	@ 0x40
 8008c10:	d852      	bhi.n	8008cb8 <USBD_StdItfReq+0xc4>
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d001      	beq.n	8008c1a <USBD_StdItfReq+0x26>
 8008c16:	2b20      	cmp	r3, #32
 8008c18:	d14e      	bne.n	8008cb8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	3b01      	subs	r3, #1
 8008c24:	2b02      	cmp	r3, #2
 8008c26:	d840      	bhi.n	8008caa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	889b      	ldrh	r3, [r3, #4]
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b01      	cmp	r3, #1
 8008c30:	d836      	bhi.n	8008ca0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	889b      	ldrh	r3, [r3, #4]
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	4619      	mov	r1, r3
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f7ff fedb 	bl	80089f6 <USBD_CoreFindIF>
 8008c40:	4603      	mov	r3, r0
 8008c42:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c44:	7bbb      	ldrb	r3, [r7, #14]
 8008c46:	2bff      	cmp	r3, #255	@ 0xff
 8008c48:	d01d      	beq.n	8008c86 <USBD_StdItfReq+0x92>
 8008c4a:	7bbb      	ldrb	r3, [r7, #14]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d11a      	bne.n	8008c86 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008c50:	7bba      	ldrb	r2, [r7, #14]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	32ae      	adds	r2, #174	@ 0xae
 8008c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00f      	beq.n	8008c80 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008c60:	7bba      	ldrb	r2, [r7, #14]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008c68:	7bba      	ldrb	r2, [r7, #14]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	32ae      	adds	r2, #174	@ 0xae
 8008c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	6839      	ldr	r1, [r7, #0]
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	4798      	blx	r3
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008c7e:	e004      	b.n	8008c8a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008c80:	2303      	movs	r3, #3
 8008c82:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008c84:	e001      	b.n	8008c8a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008c86:	2303      	movs	r3, #3
 8008c88:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	88db      	ldrh	r3, [r3, #6]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d110      	bne.n	8008cb4 <USBD_StdItfReq+0xc0>
 8008c92:	7bfb      	ldrb	r3, [r7, #15]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d10d      	bne.n	8008cb4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fdd3 	bl	8009844 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c9e:	e009      	b.n	8008cb4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 fcf7 	bl	8009696 <USBD_CtlError>
          break;
 8008ca8:	e004      	b.n	8008cb4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008caa:	6839      	ldr	r1, [r7, #0]
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fcf2 	bl	8009696 <USBD_CtlError>
          break;
 8008cb2:	e000      	b.n	8008cb6 <USBD_StdItfReq+0xc2>
          break;
 8008cb4:	bf00      	nop
      }
      break;
 8008cb6:	e004      	b.n	8008cc2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008cb8:	6839      	ldr	r1, [r7, #0]
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fceb 	bl	8009696 <USBD_CtlError>
      break;
 8008cc0:	bf00      	nop
  }

  return ret;
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3710      	adds	r7, #16
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b084      	sub	sp, #16
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
 8008cd4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	889b      	ldrh	r3, [r3, #4]
 8008cde:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ce8:	2b40      	cmp	r3, #64	@ 0x40
 8008cea:	d007      	beq.n	8008cfc <USBD_StdEPReq+0x30>
 8008cec:	2b40      	cmp	r3, #64	@ 0x40
 8008cee:	f200 817f 	bhi.w	8008ff0 <USBD_StdEPReq+0x324>
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d02a      	beq.n	8008d4c <USBD_StdEPReq+0x80>
 8008cf6:	2b20      	cmp	r3, #32
 8008cf8:	f040 817a 	bne.w	8008ff0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008cfc:	7bbb      	ldrb	r3, [r7, #14]
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7ff fe85 	bl	8008a10 <USBD_CoreFindEP>
 8008d06:	4603      	mov	r3, r0
 8008d08:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008d0a:	7b7b      	ldrb	r3, [r7, #13]
 8008d0c:	2bff      	cmp	r3, #255	@ 0xff
 8008d0e:	f000 8174 	beq.w	8008ffa <USBD_StdEPReq+0x32e>
 8008d12:	7b7b      	ldrb	r3, [r7, #13]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f040 8170 	bne.w	8008ffa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8008d1a:	7b7a      	ldrb	r2, [r7, #13]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008d22:	7b7a      	ldrb	r2, [r7, #13]
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	32ae      	adds	r2, #174	@ 0xae
 8008d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f000 8163 	beq.w	8008ffa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008d34:	7b7a      	ldrb	r2, [r7, #13]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	32ae      	adds	r2, #174	@ 0xae
 8008d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	6839      	ldr	r1, [r7, #0]
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	4798      	blx	r3
 8008d46:	4603      	mov	r3, r0
 8008d48:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008d4a:	e156      	b.n	8008ffa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	785b      	ldrb	r3, [r3, #1]
 8008d50:	2b03      	cmp	r3, #3
 8008d52:	d008      	beq.n	8008d66 <USBD_StdEPReq+0x9a>
 8008d54:	2b03      	cmp	r3, #3
 8008d56:	f300 8145 	bgt.w	8008fe4 <USBD_StdEPReq+0x318>
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f000 809b 	beq.w	8008e96 <USBD_StdEPReq+0x1ca>
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d03c      	beq.n	8008dde <USBD_StdEPReq+0x112>
 8008d64:	e13e      	b.n	8008fe4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d002      	beq.n	8008d78 <USBD_StdEPReq+0xac>
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d016      	beq.n	8008da4 <USBD_StdEPReq+0xd8>
 8008d76:	e02c      	b.n	8008dd2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d78:	7bbb      	ldrb	r3, [r7, #14]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00d      	beq.n	8008d9a <USBD_StdEPReq+0xce>
 8008d7e:	7bbb      	ldrb	r3, [r7, #14]
 8008d80:	2b80      	cmp	r3, #128	@ 0x80
 8008d82:	d00a      	beq.n	8008d9a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008d84:	7bbb      	ldrb	r3, [r7, #14]
 8008d86:	4619      	mov	r1, r3
 8008d88:	6878      	ldr	r0, [r7, #4]
 8008d8a:	f001 f953 	bl	800a034 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d8e:	2180      	movs	r1, #128	@ 0x80
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	f001 f94f 	bl	800a034 <USBD_LL_StallEP>
 8008d96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d98:	e020      	b.n	8008ddc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008d9a:	6839      	ldr	r1, [r7, #0]
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fc7a 	bl	8009696 <USBD_CtlError>
              break;
 8008da2:	e01b      	b.n	8008ddc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	885b      	ldrh	r3, [r3, #2]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10e      	bne.n	8008dca <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008dac:	7bbb      	ldrb	r3, [r7, #14]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d00b      	beq.n	8008dca <USBD_StdEPReq+0xfe>
 8008db2:	7bbb      	ldrb	r3, [r7, #14]
 8008db4:	2b80      	cmp	r3, #128	@ 0x80
 8008db6:	d008      	beq.n	8008dca <USBD_StdEPReq+0xfe>
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	88db      	ldrh	r3, [r3, #6]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d104      	bne.n	8008dca <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008dc0:	7bbb      	ldrb	r3, [r7, #14]
 8008dc2:	4619      	mov	r1, r3
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f001 f935 	bl	800a034 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 fd3a 	bl	8009844 <USBD_CtlSendStatus>

              break;
 8008dd0:	e004      	b.n	8008ddc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008dd2:	6839      	ldr	r1, [r7, #0]
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 fc5e 	bl	8009696 <USBD_CtlError>
              break;
 8008dda:	bf00      	nop
          }
          break;
 8008ddc:	e107      	b.n	8008fee <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d002      	beq.n	8008df0 <USBD_StdEPReq+0x124>
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	d016      	beq.n	8008e1c <USBD_StdEPReq+0x150>
 8008dee:	e04b      	b.n	8008e88 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008df0:	7bbb      	ldrb	r3, [r7, #14]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00d      	beq.n	8008e12 <USBD_StdEPReq+0x146>
 8008df6:	7bbb      	ldrb	r3, [r7, #14]
 8008df8:	2b80      	cmp	r3, #128	@ 0x80
 8008dfa:	d00a      	beq.n	8008e12 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008dfc:	7bbb      	ldrb	r3, [r7, #14]
 8008dfe:	4619      	mov	r1, r3
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f001 f917 	bl	800a034 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e06:	2180      	movs	r1, #128	@ 0x80
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f001 f913 	bl	800a034 <USBD_LL_StallEP>
 8008e0e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e10:	e040      	b.n	8008e94 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008e12:	6839      	ldr	r1, [r7, #0]
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fc3e 	bl	8009696 <USBD_CtlError>
              break;
 8008e1a:	e03b      	b.n	8008e94 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	885b      	ldrh	r3, [r3, #2]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d136      	bne.n	8008e92 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008e24:	7bbb      	ldrb	r3, [r7, #14]
 8008e26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d004      	beq.n	8008e38 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008e2e:	7bbb      	ldrb	r3, [r7, #14]
 8008e30:	4619      	mov	r1, r3
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f001 f91d 	bl	800a072 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fd03 	bl	8009844 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008e3e:	7bbb      	ldrb	r3, [r7, #14]
 8008e40:	4619      	mov	r1, r3
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f7ff fde4 	bl	8008a10 <USBD_CoreFindEP>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e4c:	7b7b      	ldrb	r3, [r7, #13]
 8008e4e:	2bff      	cmp	r3, #255	@ 0xff
 8008e50:	d01f      	beq.n	8008e92 <USBD_StdEPReq+0x1c6>
 8008e52:	7b7b      	ldrb	r3, [r7, #13]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d11c      	bne.n	8008e92 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008e58:	7b7a      	ldrb	r2, [r7, #13]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008e60:	7b7a      	ldrb	r2, [r7, #13]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	32ae      	adds	r2, #174	@ 0xae
 8008e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e6a:	689b      	ldr	r3, [r3, #8]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d010      	beq.n	8008e92 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008e70:	7b7a      	ldrb	r2, [r7, #13]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	32ae      	adds	r2, #174	@ 0xae
 8008e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e7a:	689b      	ldr	r3, [r3, #8]
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	4798      	blx	r3
 8008e82:	4603      	mov	r3, r0
 8008e84:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008e86:	e004      	b.n	8008e92 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008e88:	6839      	ldr	r1, [r7, #0]
 8008e8a:	6878      	ldr	r0, [r7, #4]
 8008e8c:	f000 fc03 	bl	8009696 <USBD_CtlError>
              break;
 8008e90:	e000      	b.n	8008e94 <USBD_StdEPReq+0x1c8>
              break;
 8008e92:	bf00      	nop
          }
          break;
 8008e94:	e0ab      	b.n	8008fee <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	d002      	beq.n	8008ea8 <USBD_StdEPReq+0x1dc>
 8008ea2:	2b03      	cmp	r3, #3
 8008ea4:	d032      	beq.n	8008f0c <USBD_StdEPReq+0x240>
 8008ea6:	e097      	b.n	8008fd8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ea8:	7bbb      	ldrb	r3, [r7, #14]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d007      	beq.n	8008ebe <USBD_StdEPReq+0x1f2>
 8008eae:	7bbb      	ldrb	r3, [r7, #14]
 8008eb0:	2b80      	cmp	r3, #128	@ 0x80
 8008eb2:	d004      	beq.n	8008ebe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008eb4:	6839      	ldr	r1, [r7, #0]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fbed 	bl	8009696 <USBD_CtlError>
                break;
 8008ebc:	e091      	b.n	8008fe2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ebe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	da0b      	bge.n	8008ede <USBD_StdEPReq+0x212>
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
 8008ec8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008ecc:	4613      	mov	r3, r2
 8008ece:	009b      	lsls	r3, r3, #2
 8008ed0:	4413      	add	r3, r2
 8008ed2:	009b      	lsls	r3, r3, #2
 8008ed4:	3310      	adds	r3, #16
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	4413      	add	r3, r2
 8008eda:	3304      	adds	r3, #4
 8008edc:	e00b      	b.n	8008ef6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008ede:	7bbb      	ldrb	r3, [r7, #14]
 8008ee0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	4413      	add	r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	3304      	adds	r3, #4
 8008ef6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	2200      	movs	r2, #0
 8008efc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	2202      	movs	r2, #2
 8008f02:	4619      	mov	r1, r3
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f000 fc43 	bl	8009790 <USBD_CtlSendData>
              break;
 8008f0a:	e06a      	b.n	8008fe2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008f0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	da11      	bge.n	8008f38 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008f14:	7bbb      	ldrb	r3, [r7, #14]
 8008f16:	f003 020f 	and.w	r2, r3, #15
 8008f1a:	6879      	ldr	r1, [r7, #4]
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	009b      	lsls	r3, r3, #2
 8008f20:	4413      	add	r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	440b      	add	r3, r1
 8008f26:	3324      	adds	r3, #36	@ 0x24
 8008f28:	881b      	ldrh	r3, [r3, #0]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d117      	bne.n	8008f5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008f2e:	6839      	ldr	r1, [r7, #0]
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fbb0 	bl	8009696 <USBD_CtlError>
                  break;
 8008f36:	e054      	b.n	8008fe2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f38:	7bbb      	ldrb	r3, [r7, #14]
 8008f3a:	f003 020f 	and.w	r2, r3, #15
 8008f3e:	6879      	ldr	r1, [r7, #4]
 8008f40:	4613      	mov	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	4413      	add	r3, r2
 8008f46:	009b      	lsls	r3, r3, #2
 8008f48:	440b      	add	r3, r1
 8008f4a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008f4e:	881b      	ldrh	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d104      	bne.n	8008f5e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008f54:	6839      	ldr	r1, [r7, #0]
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f000 fb9d 	bl	8009696 <USBD_CtlError>
                  break;
 8008f5c:	e041      	b.n	8008fe2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	da0b      	bge.n	8008f7e <USBD_StdEPReq+0x2b2>
 8008f66:	7bbb      	ldrb	r3, [r7, #14]
 8008f68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	4413      	add	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	3310      	adds	r3, #16
 8008f76:	687a      	ldr	r2, [r7, #4]
 8008f78:	4413      	add	r3, r2
 8008f7a:	3304      	adds	r3, #4
 8008f7c:	e00b      	b.n	8008f96 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f7e:	7bbb      	ldrb	r3, [r7, #14]
 8008f80:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f84:	4613      	mov	r3, r2
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	4413      	add	r3, r2
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	4413      	add	r3, r2
 8008f94:	3304      	adds	r3, #4
 8008f96:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008f98:	7bbb      	ldrb	r3, [r7, #14]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d002      	beq.n	8008fa4 <USBD_StdEPReq+0x2d8>
 8008f9e:	7bbb      	ldrb	r3, [r7, #14]
 8008fa0:	2b80      	cmp	r3, #128	@ 0x80
 8008fa2:	d103      	bne.n	8008fac <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	601a      	str	r2, [r3, #0]
 8008faa:	e00e      	b.n	8008fca <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008fac:	7bbb      	ldrb	r3, [r7, #14]
 8008fae:	4619      	mov	r1, r3
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f001 f87d 	bl	800a0b0 <USBD_LL_IsStallEP>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d003      	beq.n	8008fc4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	601a      	str	r2, [r3, #0]
 8008fc2:	e002      	b.n	8008fca <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	2202      	movs	r2, #2
 8008fce:	4619      	mov	r1, r3
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 fbdd 	bl	8009790 <USBD_CtlSendData>
              break;
 8008fd6:	e004      	b.n	8008fe2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008fd8:	6839      	ldr	r1, [r7, #0]
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 fb5b 	bl	8009696 <USBD_CtlError>
              break;
 8008fe0:	bf00      	nop
          }
          break;
 8008fe2:	e004      	b.n	8008fee <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008fe4:	6839      	ldr	r1, [r7, #0]
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f000 fb55 	bl	8009696 <USBD_CtlError>
          break;
 8008fec:	bf00      	nop
      }
      break;
 8008fee:	e005      	b.n	8008ffc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008ff0:	6839      	ldr	r1, [r7, #0]
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f000 fb4f 	bl	8009696 <USBD_CtlError>
      break;
 8008ff8:	e000      	b.n	8008ffc <USBD_StdEPReq+0x330>
      break;
 8008ffa:	bf00      	nop
  }

  return ret;
 8008ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ffe:	4618      	mov	r0, r3
 8009000:	3710      	adds	r7, #16
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
	...

08009008 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009012:	2300      	movs	r3, #0
 8009014:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009016:	2300      	movs	r3, #0
 8009018:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800901a:	2300      	movs	r3, #0
 800901c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	885b      	ldrh	r3, [r3, #2]
 8009022:	0a1b      	lsrs	r3, r3, #8
 8009024:	b29b      	uxth	r3, r3
 8009026:	3b01      	subs	r3, #1
 8009028:	2b06      	cmp	r3, #6
 800902a:	f200 8128 	bhi.w	800927e <USBD_GetDescriptor+0x276>
 800902e:	a201      	add	r2, pc, #4	@ (adr r2, 8009034 <USBD_GetDescriptor+0x2c>)
 8009030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009034:	08009051 	.word	0x08009051
 8009038:	08009069 	.word	0x08009069
 800903c:	080090a9 	.word	0x080090a9
 8009040:	0800927f 	.word	0x0800927f
 8009044:	0800927f 	.word	0x0800927f
 8009048:	0800921f 	.word	0x0800921f
 800904c:	0800924b 	.word	0x0800924b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	687a      	ldr	r2, [r7, #4]
 800905a:	7c12      	ldrb	r2, [r2, #16]
 800905c:	f107 0108 	add.w	r1, r7, #8
 8009060:	4610      	mov	r0, r2
 8009062:	4798      	blx	r3
 8009064:	60f8      	str	r0, [r7, #12]
      break;
 8009066:	e112      	b.n	800928e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	7c1b      	ldrb	r3, [r3, #16]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10d      	bne.n	800908c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009078:	f107 0208 	add.w	r2, r7, #8
 800907c:	4610      	mov	r0, r2
 800907e:	4798      	blx	r3
 8009080:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	3301      	adds	r3, #1
 8009086:	2202      	movs	r2, #2
 8009088:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800908a:	e100      	b.n	800928e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009094:	f107 0208 	add.w	r2, r7, #8
 8009098:	4610      	mov	r0, r2
 800909a:	4798      	blx	r3
 800909c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3301      	adds	r3, #1
 80090a2:	2202      	movs	r2, #2
 80090a4:	701a      	strb	r2, [r3, #0]
      break;
 80090a6:	e0f2      	b.n	800928e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	885b      	ldrh	r3, [r3, #2]
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	2b05      	cmp	r3, #5
 80090b0:	f200 80ac 	bhi.w	800920c <USBD_GetDescriptor+0x204>
 80090b4:	a201      	add	r2, pc, #4	@ (adr r2, 80090bc <USBD_GetDescriptor+0xb4>)
 80090b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ba:	bf00      	nop
 80090bc:	080090d5 	.word	0x080090d5
 80090c0:	08009109 	.word	0x08009109
 80090c4:	0800913d 	.word	0x0800913d
 80090c8:	08009171 	.word	0x08009171
 80090cc:	080091a5 	.word	0x080091a5
 80090d0:	080091d9 	.word	0x080091d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090da:	685b      	ldr	r3, [r3, #4]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00b      	beq.n	80090f8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	687a      	ldr	r2, [r7, #4]
 80090ea:	7c12      	ldrb	r2, [r2, #16]
 80090ec:	f107 0108 	add.w	r1, r7, #8
 80090f0:	4610      	mov	r0, r2
 80090f2:	4798      	blx	r3
 80090f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090f6:	e091      	b.n	800921c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090f8:	6839      	ldr	r1, [r7, #0]
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 facb 	bl	8009696 <USBD_CtlError>
            err++;
 8009100:	7afb      	ldrb	r3, [r7, #11]
 8009102:	3301      	adds	r3, #1
 8009104:	72fb      	strb	r3, [r7, #11]
          break;
 8009106:	e089      	b.n	800921c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800910e:	689b      	ldr	r3, [r3, #8]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00b      	beq.n	800912c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	7c12      	ldrb	r2, [r2, #16]
 8009120:	f107 0108 	add.w	r1, r7, #8
 8009124:	4610      	mov	r0, r2
 8009126:	4798      	blx	r3
 8009128:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800912a:	e077      	b.n	800921c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800912c:	6839      	ldr	r1, [r7, #0]
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fab1 	bl	8009696 <USBD_CtlError>
            err++;
 8009134:	7afb      	ldrb	r3, [r7, #11]
 8009136:	3301      	adds	r3, #1
 8009138:	72fb      	strb	r3, [r7, #11]
          break;
 800913a:	e06f      	b.n	800921c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00b      	beq.n	8009160 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	7c12      	ldrb	r2, [r2, #16]
 8009154:	f107 0108 	add.w	r1, r7, #8
 8009158:	4610      	mov	r0, r2
 800915a:	4798      	blx	r3
 800915c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800915e:	e05d      	b.n	800921c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009160:	6839      	ldr	r1, [r7, #0]
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 fa97 	bl	8009696 <USBD_CtlError>
            err++;
 8009168:	7afb      	ldrb	r3, [r7, #11]
 800916a:	3301      	adds	r3, #1
 800916c:	72fb      	strb	r3, [r7, #11]
          break;
 800916e:	e055      	b.n	800921c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009176:	691b      	ldr	r3, [r3, #16]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00b      	beq.n	8009194 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	7c12      	ldrb	r2, [r2, #16]
 8009188:	f107 0108 	add.w	r1, r7, #8
 800918c:	4610      	mov	r0, r2
 800918e:	4798      	blx	r3
 8009190:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009192:	e043      	b.n	800921c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fa7d 	bl	8009696 <USBD_CtlError>
            err++;
 800919c:	7afb      	ldrb	r3, [r7, #11]
 800919e:	3301      	adds	r3, #1
 80091a0:	72fb      	strb	r3, [r7, #11]
          break;
 80091a2:	e03b      	b.n	800921c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091aa:	695b      	ldr	r3, [r3, #20]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00b      	beq.n	80091c8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091b6:	695b      	ldr	r3, [r3, #20]
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	7c12      	ldrb	r2, [r2, #16]
 80091bc:	f107 0108 	add.w	r1, r7, #8
 80091c0:	4610      	mov	r0, r2
 80091c2:	4798      	blx	r3
 80091c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091c6:	e029      	b.n	800921c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091c8:	6839      	ldr	r1, [r7, #0]
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 fa63 	bl	8009696 <USBD_CtlError>
            err++;
 80091d0:	7afb      	ldrb	r3, [r7, #11]
 80091d2:	3301      	adds	r3, #1
 80091d4:	72fb      	strb	r3, [r7, #11]
          break;
 80091d6:	e021      	b.n	800921c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091de:	699b      	ldr	r3, [r3, #24]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00b      	beq.n	80091fc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80091ea:	699b      	ldr	r3, [r3, #24]
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	7c12      	ldrb	r2, [r2, #16]
 80091f0:	f107 0108 	add.w	r1, r7, #8
 80091f4:	4610      	mov	r0, r2
 80091f6:	4798      	blx	r3
 80091f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091fa:	e00f      	b.n	800921c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80091fc:	6839      	ldr	r1, [r7, #0]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fa49 	bl	8009696 <USBD_CtlError>
            err++;
 8009204:	7afb      	ldrb	r3, [r7, #11]
 8009206:	3301      	adds	r3, #1
 8009208:	72fb      	strb	r3, [r7, #11]
          break;
 800920a:	e007      	b.n	800921c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800920c:	6839      	ldr	r1, [r7, #0]
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fa41 	bl	8009696 <USBD_CtlError>
          err++;
 8009214:	7afb      	ldrb	r3, [r7, #11]
 8009216:	3301      	adds	r3, #1
 8009218:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800921a:	bf00      	nop
      }
      break;
 800921c:	e037      	b.n	800928e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	7c1b      	ldrb	r3, [r3, #16]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d109      	bne.n	800923a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800922c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800922e:	f107 0208 	add.w	r2, r7, #8
 8009232:	4610      	mov	r0, r2
 8009234:	4798      	blx	r3
 8009236:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009238:	e029      	b.n	800928e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800923a:	6839      	ldr	r1, [r7, #0]
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 fa2a 	bl	8009696 <USBD_CtlError>
        err++;
 8009242:	7afb      	ldrb	r3, [r7, #11]
 8009244:	3301      	adds	r3, #1
 8009246:	72fb      	strb	r3, [r7, #11]
      break;
 8009248:	e021      	b.n	800928e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	7c1b      	ldrb	r3, [r3, #16]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10d      	bne.n	800926e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800925a:	f107 0208 	add.w	r2, r7, #8
 800925e:	4610      	mov	r0, r2
 8009260:	4798      	blx	r3
 8009262:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	3301      	adds	r3, #1
 8009268:	2207      	movs	r2, #7
 800926a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800926c:	e00f      	b.n	800928e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800926e:	6839      	ldr	r1, [r7, #0]
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 fa10 	bl	8009696 <USBD_CtlError>
        err++;
 8009276:	7afb      	ldrb	r3, [r7, #11]
 8009278:	3301      	adds	r3, #1
 800927a:	72fb      	strb	r3, [r7, #11]
      break;
 800927c:	e007      	b.n	800928e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800927e:	6839      	ldr	r1, [r7, #0]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 fa08 	bl	8009696 <USBD_CtlError>
      err++;
 8009286:	7afb      	ldrb	r3, [r7, #11]
 8009288:	3301      	adds	r3, #1
 800928a:	72fb      	strb	r3, [r7, #11]
      break;
 800928c:	bf00      	nop
  }

  if (err != 0U)
 800928e:	7afb      	ldrb	r3, [r7, #11]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d11e      	bne.n	80092d2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	88db      	ldrh	r3, [r3, #6]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d016      	beq.n	80092ca <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800929c:	893b      	ldrh	r3, [r7, #8]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d00e      	beq.n	80092c0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	88da      	ldrh	r2, [r3, #6]
 80092a6:	893b      	ldrh	r3, [r7, #8]
 80092a8:	4293      	cmp	r3, r2
 80092aa:	bf28      	it	cs
 80092ac:	4613      	movcs	r3, r2
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80092b2:	893b      	ldrh	r3, [r7, #8]
 80092b4:	461a      	mov	r2, r3
 80092b6:	68f9      	ldr	r1, [r7, #12]
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 fa69 	bl	8009790 <USBD_CtlSendData>
 80092be:	e009      	b.n	80092d4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80092c0:	6839      	ldr	r1, [r7, #0]
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 f9e7 	bl	8009696 <USBD_CtlError>
 80092c8:	e004      	b.n	80092d4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 faba 	bl	8009844 <USBD_CtlSendStatus>
 80092d0:	e000      	b.n	80092d4 <USBD_GetDescriptor+0x2cc>
    return;
 80092d2:	bf00      	nop
  }
}
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
 80092da:	bf00      	nop

080092dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	889b      	ldrh	r3, [r3, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d131      	bne.n	8009352 <USBD_SetAddress+0x76>
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	88db      	ldrh	r3, [r3, #6]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d12d      	bne.n	8009352 <USBD_SetAddress+0x76>
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	885b      	ldrh	r3, [r3, #2]
 80092fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80092fc:	d829      	bhi.n	8009352 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	885b      	ldrh	r3, [r3, #2]
 8009302:	b2db      	uxtb	r3, r3
 8009304:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009308:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009310:	b2db      	uxtb	r3, r3
 8009312:	2b03      	cmp	r3, #3
 8009314:	d104      	bne.n	8009320 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009316:	6839      	ldr	r1, [r7, #0]
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f000 f9bc 	bl	8009696 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800931e:	e01d      	b.n	800935c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	7bfa      	ldrb	r2, [r7, #15]
 8009324:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009328:	7bfb      	ldrb	r3, [r7, #15]
 800932a:	4619      	mov	r1, r3
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 feeb 	bl	800a108 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f000 fa86 	bl	8009844 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009338:	7bfb      	ldrb	r3, [r7, #15]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d004      	beq.n	8009348 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	2202      	movs	r2, #2
 8009342:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009346:	e009      	b.n	800935c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2201      	movs	r2, #1
 800934c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009350:	e004      	b.n	800935c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009352:	6839      	ldr	r1, [r7, #0]
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 f99e 	bl	8009696 <USBD_CtlError>
  }
}
 800935a:	bf00      	nop
 800935c:	bf00      	nop
 800935e:	3710      	adds	r7, #16
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
 800936c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800936e:	2300      	movs	r3, #0
 8009370:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	885b      	ldrh	r3, [r3, #2]
 8009376:	b2da      	uxtb	r2, r3
 8009378:	4b4e      	ldr	r3, [pc, #312]	@ (80094b4 <USBD_SetConfig+0x150>)
 800937a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800937c:	4b4d      	ldr	r3, [pc, #308]	@ (80094b4 <USBD_SetConfig+0x150>)
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	2b01      	cmp	r3, #1
 8009382:	d905      	bls.n	8009390 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009384:	6839      	ldr	r1, [r7, #0]
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f985 	bl	8009696 <USBD_CtlError>
    return USBD_FAIL;
 800938c:	2303      	movs	r3, #3
 800938e:	e08c      	b.n	80094aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009396:	b2db      	uxtb	r3, r3
 8009398:	2b02      	cmp	r3, #2
 800939a:	d002      	beq.n	80093a2 <USBD_SetConfig+0x3e>
 800939c:	2b03      	cmp	r3, #3
 800939e:	d029      	beq.n	80093f4 <USBD_SetConfig+0x90>
 80093a0:	e075      	b.n	800948e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80093a2:	4b44      	ldr	r3, [pc, #272]	@ (80094b4 <USBD_SetConfig+0x150>)
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d020      	beq.n	80093ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80093aa:	4b42      	ldr	r3, [pc, #264]	@ (80094b4 <USBD_SetConfig+0x150>)
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	461a      	mov	r2, r3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80093b4:	4b3f      	ldr	r3, [pc, #252]	@ (80094b4 <USBD_SetConfig+0x150>)
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	4619      	mov	r1, r3
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7fe ffe3 	bl	8008386 <USBD_SetClassConfig>
 80093c0:	4603      	mov	r3, r0
 80093c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80093c4:	7bfb      	ldrb	r3, [r7, #15]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d008      	beq.n	80093dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80093ca:	6839      	ldr	r1, [r7, #0]
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 f962 	bl	8009696 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2202      	movs	r2, #2
 80093d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80093da:	e065      	b.n	80094a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 fa31 	bl	8009844 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2203      	movs	r2, #3
 80093e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80093ea:	e05d      	b.n	80094a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 fa29 	bl	8009844 <USBD_CtlSendStatus>
      break;
 80093f2:	e059      	b.n	80094a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80093f4:	4b2f      	ldr	r3, [pc, #188]	@ (80094b4 <USBD_SetConfig+0x150>)
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d112      	bne.n	8009422 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2202      	movs	r2, #2
 8009400:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009404:	4b2b      	ldr	r3, [pc, #172]	@ (80094b4 <USBD_SetConfig+0x150>)
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	461a      	mov	r2, r3
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800940e:	4b29      	ldr	r3, [pc, #164]	@ (80094b4 <USBD_SetConfig+0x150>)
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	4619      	mov	r1, r3
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f7fe ffd2 	bl	80083be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fa12 	bl	8009844 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009420:	e042      	b.n	80094a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009422:	4b24      	ldr	r3, [pc, #144]	@ (80094b4 <USBD_SetConfig+0x150>)
 8009424:	781b      	ldrb	r3, [r3, #0]
 8009426:	461a      	mov	r2, r3
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	429a      	cmp	r2, r3
 800942e:	d02a      	beq.n	8009486 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	b2db      	uxtb	r3, r3
 8009436:	4619      	mov	r1, r3
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7fe ffc0 	bl	80083be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800943e:	4b1d      	ldr	r3, [pc, #116]	@ (80094b4 <USBD_SetConfig+0x150>)
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	461a      	mov	r2, r3
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009448:	4b1a      	ldr	r3, [pc, #104]	@ (80094b4 <USBD_SetConfig+0x150>)
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	4619      	mov	r1, r3
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	f7fe ff99 	bl	8008386 <USBD_SetClassConfig>
 8009454:	4603      	mov	r3, r0
 8009456:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009458:	7bfb      	ldrb	r3, [r7, #15]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d00f      	beq.n	800947e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800945e:	6839      	ldr	r1, [r7, #0]
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f000 f918 	bl	8009696 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	b2db      	uxtb	r3, r3
 800946c:	4619      	mov	r1, r3
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f7fe ffa5 	bl	80083be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2202      	movs	r2, #2
 8009478:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800947c:	e014      	b.n	80094a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 f9e0 	bl	8009844 <USBD_CtlSendStatus>
      break;
 8009484:	e010      	b.n	80094a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f000 f9dc 	bl	8009844 <USBD_CtlSendStatus>
      break;
 800948c:	e00c      	b.n	80094a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800948e:	6839      	ldr	r1, [r7, #0]
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f000 f900 	bl	8009696 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009496:	4b07      	ldr	r3, [pc, #28]	@ (80094b4 <USBD_SetConfig+0x150>)
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	4619      	mov	r1, r3
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7fe ff8e 	bl	80083be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80094a2:	2303      	movs	r3, #3
 80094a4:	73fb      	strb	r3, [r7, #15]
      break;
 80094a6:	bf00      	nop
  }

  return ret;
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3710      	adds	r7, #16
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	200005c4 	.word	0x200005c4

080094b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	88db      	ldrh	r3, [r3, #6]
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d004      	beq.n	80094d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80094ca:	6839      	ldr	r1, [r7, #0]
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f000 f8e2 	bl	8009696 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80094d2:	e023      	b.n	800951c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	2b02      	cmp	r3, #2
 80094de:	dc02      	bgt.n	80094e6 <USBD_GetConfig+0x2e>
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	dc03      	bgt.n	80094ec <USBD_GetConfig+0x34>
 80094e4:	e015      	b.n	8009512 <USBD_GetConfig+0x5a>
 80094e6:	2b03      	cmp	r3, #3
 80094e8:	d00b      	beq.n	8009502 <USBD_GetConfig+0x4a>
 80094ea:	e012      	b.n	8009512 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2200      	movs	r2, #0
 80094f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	3308      	adds	r3, #8
 80094f6:	2201      	movs	r2, #1
 80094f8:	4619      	mov	r1, r3
 80094fa:	6878      	ldr	r0, [r7, #4]
 80094fc:	f000 f948 	bl	8009790 <USBD_CtlSendData>
        break;
 8009500:	e00c      	b.n	800951c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	3304      	adds	r3, #4
 8009506:	2201      	movs	r2, #1
 8009508:	4619      	mov	r1, r3
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 f940 	bl	8009790 <USBD_CtlSendData>
        break;
 8009510:	e004      	b.n	800951c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009512:	6839      	ldr	r1, [r7, #0]
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 f8be 	bl	8009696 <USBD_CtlError>
        break;
 800951a:	bf00      	nop
}
 800951c:	bf00      	nop
 800951e:	3708      	adds	r7, #8
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
 800952c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009534:	b2db      	uxtb	r3, r3
 8009536:	3b01      	subs	r3, #1
 8009538:	2b02      	cmp	r3, #2
 800953a:	d81e      	bhi.n	800957a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	88db      	ldrh	r3, [r3, #6]
 8009540:	2b02      	cmp	r3, #2
 8009542:	d004      	beq.n	800954e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009544:	6839      	ldr	r1, [r7, #0]
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f8a5 	bl	8009696 <USBD_CtlError>
        break;
 800954c:	e01a      	b.n	8009584 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2201      	movs	r2, #1
 8009552:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800955a:	2b00      	cmp	r3, #0
 800955c:	d005      	beq.n	800956a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	f043 0202 	orr.w	r2, r3, #2
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	330c      	adds	r3, #12
 800956e:	2202      	movs	r2, #2
 8009570:	4619      	mov	r1, r3
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f90c 	bl	8009790 <USBD_CtlSendData>
      break;
 8009578:	e004      	b.n	8009584 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800957a:	6839      	ldr	r1, [r7, #0]
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f88a 	bl	8009696 <USBD_CtlError>
      break;
 8009582:	bf00      	nop
  }
}
 8009584:	bf00      	nop
 8009586:	3708      	adds	r7, #8
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
 8009594:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	885b      	ldrh	r3, [r3, #2]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d107      	bne.n	80095ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	f000 f94c 	bl	8009844 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80095ac:	e013      	b.n	80095d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80095ae:	683b      	ldr	r3, [r7, #0]
 80095b0:	885b      	ldrh	r3, [r3, #2]
 80095b2:	2b02      	cmp	r3, #2
 80095b4:	d10b      	bne.n	80095ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	889b      	ldrh	r3, [r3, #4]
 80095ba:	0a1b      	lsrs	r3, r3, #8
 80095bc:	b29b      	uxth	r3, r3
 80095be:	b2da      	uxtb	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f93c 	bl	8009844 <USBD_CtlSendStatus>
}
 80095cc:	e003      	b.n	80095d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80095ce:	6839      	ldr	r1, [r7, #0]
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f000 f860 	bl	8009696 <USBD_CtlError>
}
 80095d6:	bf00      	nop
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b082      	sub	sp, #8
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
 80095e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	3b01      	subs	r3, #1
 80095f2:	2b02      	cmp	r3, #2
 80095f4:	d80b      	bhi.n	800960e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	885b      	ldrh	r3, [r3, #2]
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d10c      	bne.n	8009618 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f91c 	bl	8009844 <USBD_CtlSendStatus>
      }
      break;
 800960c:	e004      	b.n	8009618 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800960e:	6839      	ldr	r1, [r7, #0]
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 f840 	bl	8009696 <USBD_CtlError>
      break;
 8009616:	e000      	b.n	800961a <USBD_ClrFeature+0x3c>
      break;
 8009618:	bf00      	nop
  }
}
 800961a:	bf00      	nop
 800961c:	3708      	adds	r7, #8
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b084      	sub	sp, #16
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	781a      	ldrb	r2, [r3, #0]
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	3301      	adds	r3, #1
 800963c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	781a      	ldrb	r2, [r3, #0]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	3301      	adds	r3, #1
 800964a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f7ff fa40 	bl	8008ad2 <SWAPBYTE>
 8009652:	4603      	mov	r3, r0
 8009654:	461a      	mov	r2, r3
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	3301      	adds	r3, #1
 800965e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	3301      	adds	r3, #1
 8009664:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f7ff fa33 	bl	8008ad2 <SWAPBYTE>
 800966c:	4603      	mov	r3, r0
 800966e:	461a      	mov	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	3301      	adds	r3, #1
 8009678:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	3301      	adds	r3, #1
 800967e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009680:	68f8      	ldr	r0, [r7, #12]
 8009682:	f7ff fa26 	bl	8008ad2 <SWAPBYTE>
 8009686:	4603      	mov	r3, r0
 8009688:	461a      	mov	r2, r3
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	80da      	strh	r2, [r3, #6]
}
 800968e:	bf00      	nop
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b082      	sub	sp, #8
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80096a0:	2180      	movs	r1, #128	@ 0x80
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 fcc6 	bl	800a034 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80096a8:	2100      	movs	r1, #0
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 fcc2 	bl	800a034 <USBD_LL_StallEP>
}
 80096b0:	bf00      	nop
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b086      	sub	sp, #24
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80096c4:	2300      	movs	r3, #0
 80096c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d042      	beq.n	8009754 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80096d2:	6938      	ldr	r0, [r7, #16]
 80096d4:	f000 f842 	bl	800975c <USBD_GetLen>
 80096d8:	4603      	mov	r3, r0
 80096da:	3301      	adds	r3, #1
 80096dc:	005b      	lsls	r3, r3, #1
 80096de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80096e2:	d808      	bhi.n	80096f6 <USBD_GetString+0x3e>
 80096e4:	6938      	ldr	r0, [r7, #16]
 80096e6:	f000 f839 	bl	800975c <USBD_GetLen>
 80096ea:	4603      	mov	r3, r0
 80096ec:	3301      	adds	r3, #1
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	005b      	lsls	r3, r3, #1
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	e001      	b.n	80096fa <USBD_GetString+0x42>
 80096f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80096fe:	7dfb      	ldrb	r3, [r7, #23]
 8009700:	68ba      	ldr	r2, [r7, #8]
 8009702:	4413      	add	r3, r2
 8009704:	687a      	ldr	r2, [r7, #4]
 8009706:	7812      	ldrb	r2, [r2, #0]
 8009708:	701a      	strb	r2, [r3, #0]
  idx++;
 800970a:	7dfb      	ldrb	r3, [r7, #23]
 800970c:	3301      	adds	r3, #1
 800970e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009710:	7dfb      	ldrb	r3, [r7, #23]
 8009712:	68ba      	ldr	r2, [r7, #8]
 8009714:	4413      	add	r3, r2
 8009716:	2203      	movs	r2, #3
 8009718:	701a      	strb	r2, [r3, #0]
  idx++;
 800971a:	7dfb      	ldrb	r3, [r7, #23]
 800971c:	3301      	adds	r3, #1
 800971e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009720:	e013      	b.n	800974a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8009722:	7dfb      	ldrb	r3, [r7, #23]
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	4413      	add	r3, r2
 8009728:	693a      	ldr	r2, [r7, #16]
 800972a:	7812      	ldrb	r2, [r2, #0]
 800972c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	3301      	adds	r3, #1
 8009732:	613b      	str	r3, [r7, #16]
    idx++;
 8009734:	7dfb      	ldrb	r3, [r7, #23]
 8009736:	3301      	adds	r3, #1
 8009738:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800973a:	7dfb      	ldrb	r3, [r7, #23]
 800973c:	68ba      	ldr	r2, [r7, #8]
 800973e:	4413      	add	r3, r2
 8009740:	2200      	movs	r2, #0
 8009742:	701a      	strb	r2, [r3, #0]
    idx++;
 8009744:	7dfb      	ldrb	r3, [r7, #23]
 8009746:	3301      	adds	r3, #1
 8009748:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d1e7      	bne.n	8009722 <USBD_GetString+0x6a>
 8009752:	e000      	b.n	8009756 <USBD_GetString+0x9e>
    return;
 8009754:	bf00      	nop
  }
}
 8009756:	3718      	adds	r7, #24
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009764:	2300      	movs	r3, #0
 8009766:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800976c:	e005      	b.n	800977a <USBD_GetLen+0x1e>
  {
    len++;
 800976e:	7bfb      	ldrb	r3, [r7, #15]
 8009770:	3301      	adds	r3, #1
 8009772:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	3301      	adds	r3, #1
 8009778:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	781b      	ldrb	r3, [r3, #0]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d1f5      	bne.n	800976e <USBD_GetLen+0x12>
  }

  return len;
 8009782:	7bfb      	ldrb	r3, [r7, #15]
}
 8009784:	4618      	mov	r0, r3
 8009786:	3714      	adds	r7, #20
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	60f8      	str	r0, [r7, #12]
 8009798:	60b9      	str	r1, [r7, #8]
 800979a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2202      	movs	r2, #2
 80097a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	68ba      	ldr	r2, [r7, #8]
 80097b4:	2100      	movs	r1, #0
 80097b6:	68f8      	ldr	r0, [r7, #12]
 80097b8:	f000 fcc5 	bl	800a146 <USBD_LL_Transmit>

  return USBD_OK;
 80097bc:	2300      	movs	r3, #0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b084      	sub	sp, #16
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	60f8      	str	r0, [r7, #12]
 80097ce:	60b9      	str	r1, [r7, #8]
 80097d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	68ba      	ldr	r2, [r7, #8]
 80097d6:	2100      	movs	r1, #0
 80097d8:	68f8      	ldr	r0, [r7, #12]
 80097da:	f000 fcb4 	bl	800a146 <USBD_LL_Transmit>

  return USBD_OK;
 80097de:	2300      	movs	r3, #0
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	3710      	adds	r7, #16
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b084      	sub	sp, #16
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2203      	movs	r2, #3
 80097f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	2100      	movs	r1, #0
 8009812:	68f8      	ldr	r0, [r7, #12]
 8009814:	f000 fcb8 	bl	800a188 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b084      	sub	sp, #16
 8009826:	af00      	add	r7, sp, #0
 8009828:	60f8      	str	r0, [r7, #12]
 800982a:	60b9      	str	r1, [r7, #8]
 800982c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	68ba      	ldr	r2, [r7, #8]
 8009832:	2100      	movs	r1, #0
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	f000 fca7 	bl	800a188 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800983a:	2300      	movs	r3, #0
}
 800983c:	4618      	mov	r0, r3
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}

08009844 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2204      	movs	r2, #4
 8009850:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009854:	2300      	movs	r3, #0
 8009856:	2200      	movs	r2, #0
 8009858:	2100      	movs	r1, #0
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 fc73 	bl	800a146 <USBD_LL_Transmit>

  return USBD_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b082      	sub	sp, #8
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2205      	movs	r2, #5
 8009876:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800987a:	2300      	movs	r3, #0
 800987c:	2200      	movs	r2, #0
 800987e:	2100      	movs	r1, #0
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 fc81 	bl	800a188 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009886:	2300      	movs	r3, #0
}
 8009888:	4618      	mov	r0, r3
 800988a:	3708      	adds	r7, #8
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009894:	2200      	movs	r2, #0
 8009896:	4912      	ldr	r1, [pc, #72]	@ (80098e0 <MX_USB_DEVICE_Init+0x50>)
 8009898:	4812      	ldr	r0, [pc, #72]	@ (80098e4 <MX_USB_DEVICE_Init+0x54>)
 800989a:	f7fe fcf7 	bl	800828c <USBD_Init>
 800989e:	4603      	mov	r3, r0
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d001      	beq.n	80098a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80098a4:	f7f8 f8c4 	bl	8001a30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80098a8:	490f      	ldr	r1, [pc, #60]	@ (80098e8 <MX_USB_DEVICE_Init+0x58>)
 80098aa:	480e      	ldr	r0, [pc, #56]	@ (80098e4 <MX_USB_DEVICE_Init+0x54>)
 80098ac:	f7fe fd1e 	bl	80082ec <USBD_RegisterClass>
 80098b0:	4603      	mov	r3, r0
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d001      	beq.n	80098ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80098b6:	f7f8 f8bb 	bl	8001a30 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80098ba:	490c      	ldr	r1, [pc, #48]	@ (80098ec <MX_USB_DEVICE_Init+0x5c>)
 80098bc:	4809      	ldr	r0, [pc, #36]	@ (80098e4 <MX_USB_DEVICE_Init+0x54>)
 80098be:	f7fe fc55 	bl	800816c <USBD_CDC_RegisterInterface>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d001      	beq.n	80098cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80098c8:	f7f8 f8b2 	bl	8001a30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80098cc:	4805      	ldr	r0, [pc, #20]	@ (80098e4 <MX_USB_DEVICE_Init+0x54>)
 80098ce:	f7fe fd43 	bl	8008358 <USBD_Start>
 80098d2:	4603      	mov	r3, r0
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d001      	beq.n	80098dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80098d8:	f7f8 f8aa 	bl	8001a30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80098dc:	bf00      	nop
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	200000b8 	.word	0x200000b8
 80098e4:	200005c8 	.word	0x200005c8
 80098e8:	20000024 	.word	0x20000024
 80098ec:	200000a4 	.word	0x200000a4

080098f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80098f4:	2200      	movs	r2, #0
 80098f6:	4905      	ldr	r1, [pc, #20]	@ (800990c <CDC_Init_FS+0x1c>)
 80098f8:	4805      	ldr	r0, [pc, #20]	@ (8009910 <CDC_Init_FS+0x20>)
 80098fa:	f7fe fc51 	bl	80081a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80098fe:	4905      	ldr	r1, [pc, #20]	@ (8009914 <CDC_Init_FS+0x24>)
 8009900:	4803      	ldr	r0, [pc, #12]	@ (8009910 <CDC_Init_FS+0x20>)
 8009902:	f7fe fc6f 	bl	80081e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009906:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009908:	4618      	mov	r0, r3
 800990a:	bd80      	pop	{r7, pc}
 800990c:	200010a4 	.word	0x200010a4
 8009910:	200005c8 	.word	0x200005c8
 8009914:	200008a4 	.word	0x200008a4

08009918 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009918:	b480      	push	{r7}
 800991a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800991c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800991e:	4618      	mov	r0, r3
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009928:	b480      	push	{r7}
 800992a:	b083      	sub	sp, #12
 800992c:	af00      	add	r7, sp, #0
 800992e:	4603      	mov	r3, r0
 8009930:	6039      	str	r1, [r7, #0]
 8009932:	71fb      	strb	r3, [r7, #7]
 8009934:	4613      	mov	r3, r2
 8009936:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009938:	79fb      	ldrb	r3, [r7, #7]
 800993a:	2b23      	cmp	r3, #35	@ 0x23
 800993c:	d84a      	bhi.n	80099d4 <CDC_Control_FS+0xac>
 800993e:	a201      	add	r2, pc, #4	@ (adr r2, 8009944 <CDC_Control_FS+0x1c>)
 8009940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009944:	080099d5 	.word	0x080099d5
 8009948:	080099d5 	.word	0x080099d5
 800994c:	080099d5 	.word	0x080099d5
 8009950:	080099d5 	.word	0x080099d5
 8009954:	080099d5 	.word	0x080099d5
 8009958:	080099d5 	.word	0x080099d5
 800995c:	080099d5 	.word	0x080099d5
 8009960:	080099d5 	.word	0x080099d5
 8009964:	080099d5 	.word	0x080099d5
 8009968:	080099d5 	.word	0x080099d5
 800996c:	080099d5 	.word	0x080099d5
 8009970:	080099d5 	.word	0x080099d5
 8009974:	080099d5 	.word	0x080099d5
 8009978:	080099d5 	.word	0x080099d5
 800997c:	080099d5 	.word	0x080099d5
 8009980:	080099d5 	.word	0x080099d5
 8009984:	080099d5 	.word	0x080099d5
 8009988:	080099d5 	.word	0x080099d5
 800998c:	080099d5 	.word	0x080099d5
 8009990:	080099d5 	.word	0x080099d5
 8009994:	080099d5 	.word	0x080099d5
 8009998:	080099d5 	.word	0x080099d5
 800999c:	080099d5 	.word	0x080099d5
 80099a0:	080099d5 	.word	0x080099d5
 80099a4:	080099d5 	.word	0x080099d5
 80099a8:	080099d5 	.word	0x080099d5
 80099ac:	080099d5 	.word	0x080099d5
 80099b0:	080099d5 	.word	0x080099d5
 80099b4:	080099d5 	.word	0x080099d5
 80099b8:	080099d5 	.word	0x080099d5
 80099bc:	080099d5 	.word	0x080099d5
 80099c0:	080099d5 	.word	0x080099d5
 80099c4:	080099d5 	.word	0x080099d5
 80099c8:	080099d5 	.word	0x080099d5
 80099cc:	080099d5 	.word	0x080099d5
 80099d0:	080099d5 	.word	0x080099d5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80099d4:	bf00      	nop
  }

  return (USBD_OK);
 80099d6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80099d8:	4618      	mov	r0, r3
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80099ee:	6879      	ldr	r1, [r7, #4]
 80099f0:	4805      	ldr	r0, [pc, #20]	@ (8009a08 <CDC_Receive_FS+0x24>)
 80099f2:	f7fe fbf7 	bl	80081e4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80099f6:	4804      	ldr	r0, [pc, #16]	@ (8009a08 <CDC_Receive_FS+0x24>)
 80099f8:	f7fe fc12 	bl	8008220 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80099fc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3708      	adds	r7, #8
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	200005c8 	.word	0x200005c8

08009a0c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b087      	sub	sp, #28
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	4613      	mov	r3, r2
 8009a18:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009a1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a22:	4618      	mov	r0, r3
 8009a24:	371c      	adds	r7, #28
 8009a26:	46bd      	mov	sp, r7
 8009a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2c:	4770      	bx	lr
	...

08009a30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b083      	sub	sp, #12
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	4603      	mov	r3, r0
 8009a38:	6039      	str	r1, [r7, #0]
 8009a3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	2212      	movs	r2, #18
 8009a40:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009a42:	4b03      	ldr	r3, [pc, #12]	@ (8009a50 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009a44:	4618      	mov	r0, r3
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr
 8009a50:	200000d4 	.word	0x200000d4

08009a54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	6039      	str	r1, [r7, #0]
 8009a5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	2204      	movs	r2, #4
 8009a64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009a66:	4b03      	ldr	r3, [pc, #12]	@ (8009a74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr
 8009a74:	200000e8 	.word	0x200000e8

08009a78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	4603      	mov	r3, r0
 8009a80:	6039      	str	r1, [r7, #0]
 8009a82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a84:	79fb      	ldrb	r3, [r7, #7]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d105      	bne.n	8009a96 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a8a:	683a      	ldr	r2, [r7, #0]
 8009a8c:	4907      	ldr	r1, [pc, #28]	@ (8009aac <USBD_FS_ProductStrDescriptor+0x34>)
 8009a8e:	4808      	ldr	r0, [pc, #32]	@ (8009ab0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a90:	f7ff fe12 	bl	80096b8 <USBD_GetString>
 8009a94:	e004      	b.n	8009aa0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a96:	683a      	ldr	r2, [r7, #0]
 8009a98:	4904      	ldr	r1, [pc, #16]	@ (8009aac <USBD_FS_ProductStrDescriptor+0x34>)
 8009a9a:	4805      	ldr	r0, [pc, #20]	@ (8009ab0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a9c:	f7ff fe0c 	bl	80096b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009aa0:	4b02      	ldr	r3, [pc, #8]	@ (8009aac <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	200018a4 	.word	0x200018a4
 8009ab0:	0800cfb0 	.word	0x0800cfb0

08009ab4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	4603      	mov	r3, r0
 8009abc:	6039      	str	r1, [r7, #0]
 8009abe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009ac0:	683a      	ldr	r2, [r7, #0]
 8009ac2:	4904      	ldr	r1, [pc, #16]	@ (8009ad4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009ac4:	4804      	ldr	r0, [pc, #16]	@ (8009ad8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009ac6:	f7ff fdf7 	bl	80096b8 <USBD_GetString>
  return USBD_StrDesc;
 8009aca:	4b02      	ldr	r3, [pc, #8]	@ (8009ad4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3708      	adds	r7, #8
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	200018a4 	.word	0x200018a4
 8009ad8:	0800cfc8 	.word	0x0800cfc8

08009adc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	4603      	mov	r3, r0
 8009ae4:	6039      	str	r1, [r7, #0]
 8009ae6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	221a      	movs	r2, #26
 8009aec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009aee:	f000 f843 	bl	8009b78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009af2:	4b02      	ldr	r3, [pc, #8]	@ (8009afc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009af4:	4618      	mov	r0, r3
 8009af6:	3708      	adds	r7, #8
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	200000ec 	.word	0x200000ec

08009b00 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b00:	b580      	push	{r7, lr}
 8009b02:	b082      	sub	sp, #8
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	4603      	mov	r3, r0
 8009b08:	6039      	str	r1, [r7, #0]
 8009b0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009b0c:	79fb      	ldrb	r3, [r7, #7]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d105      	bne.n	8009b1e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b12:	683a      	ldr	r2, [r7, #0]
 8009b14:	4907      	ldr	r1, [pc, #28]	@ (8009b34 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b16:	4808      	ldr	r0, [pc, #32]	@ (8009b38 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b18:	f7ff fdce 	bl	80096b8 <USBD_GetString>
 8009b1c:	e004      	b.n	8009b28 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009b1e:	683a      	ldr	r2, [r7, #0]
 8009b20:	4904      	ldr	r1, [pc, #16]	@ (8009b34 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b22:	4805      	ldr	r0, [pc, #20]	@ (8009b38 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b24:	f7ff fdc8 	bl	80096b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b28:	4b02      	ldr	r3, [pc, #8]	@ (8009b34 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	3708      	adds	r7, #8
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	200018a4 	.word	0x200018a4
 8009b38:	0800cfdc 	.word	0x0800cfdc

08009b3c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	4603      	mov	r3, r0
 8009b44:	6039      	str	r1, [r7, #0]
 8009b46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b48:	79fb      	ldrb	r3, [r7, #7]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d105      	bne.n	8009b5a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b4e:	683a      	ldr	r2, [r7, #0]
 8009b50:	4907      	ldr	r1, [pc, #28]	@ (8009b70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b52:	4808      	ldr	r0, [pc, #32]	@ (8009b74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b54:	f7ff fdb0 	bl	80096b8 <USBD_GetString>
 8009b58:	e004      	b.n	8009b64 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b5a:	683a      	ldr	r2, [r7, #0]
 8009b5c:	4904      	ldr	r1, [pc, #16]	@ (8009b70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b5e:	4805      	ldr	r0, [pc, #20]	@ (8009b74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b60:	f7ff fdaa 	bl	80096b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b64:	4b02      	ldr	r3, [pc, #8]	@ (8009b70 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009b66:	4618      	mov	r0, r3
 8009b68:	3708      	adds	r7, #8
 8009b6a:	46bd      	mov	sp, r7
 8009b6c:	bd80      	pop	{r7, pc}
 8009b6e:	bf00      	nop
 8009b70:	200018a4 	.word	0x200018a4
 8009b74:	0800cfe8 	.word	0x0800cfe8

08009b78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8009bbc <Get_SerialNum+0x44>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009b84:	4b0e      	ldr	r3, [pc, #56]	@ (8009bc0 <Get_SerialNum+0x48>)
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8009bc4 <Get_SerialNum+0x4c>)
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009b90:	68fa      	ldr	r2, [r7, #12]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	4413      	add	r3, r2
 8009b96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d009      	beq.n	8009bb2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009b9e:	2208      	movs	r2, #8
 8009ba0:	4909      	ldr	r1, [pc, #36]	@ (8009bc8 <Get_SerialNum+0x50>)
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f000 f814 	bl	8009bd0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009ba8:	2204      	movs	r2, #4
 8009baa:	4908      	ldr	r1, [pc, #32]	@ (8009bcc <Get_SerialNum+0x54>)
 8009bac:	68b8      	ldr	r0, [r7, #8]
 8009bae:	f000 f80f 	bl	8009bd0 <IntToUnicode>
  }
}
 8009bb2:	bf00      	nop
 8009bb4:	3710      	adds	r7, #16
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	1fff7a10 	.word	0x1fff7a10
 8009bc0:	1fff7a14 	.word	0x1fff7a14
 8009bc4:	1fff7a18 	.word	0x1fff7a18
 8009bc8:	200000ee 	.word	0x200000ee
 8009bcc:	200000fe 	.word	0x200000fe

08009bd0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b087      	sub	sp, #28
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	4613      	mov	r3, r2
 8009bdc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009bde:	2300      	movs	r3, #0
 8009be0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009be2:	2300      	movs	r3, #0
 8009be4:	75fb      	strb	r3, [r7, #23]
 8009be6:	e027      	b.n	8009c38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	0f1b      	lsrs	r3, r3, #28
 8009bec:	2b09      	cmp	r3, #9
 8009bee:	d80b      	bhi.n	8009c08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	0f1b      	lsrs	r3, r3, #28
 8009bf4:	b2da      	uxtb	r2, r3
 8009bf6:	7dfb      	ldrb	r3, [r7, #23]
 8009bf8:	005b      	lsls	r3, r3, #1
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	440b      	add	r3, r1
 8009c00:	3230      	adds	r2, #48	@ 0x30
 8009c02:	b2d2      	uxtb	r2, r2
 8009c04:	701a      	strb	r2, [r3, #0]
 8009c06:	e00a      	b.n	8009c1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	0f1b      	lsrs	r3, r3, #28
 8009c0c:	b2da      	uxtb	r2, r3
 8009c0e:	7dfb      	ldrb	r3, [r7, #23]
 8009c10:	005b      	lsls	r3, r3, #1
 8009c12:	4619      	mov	r1, r3
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	440b      	add	r3, r1
 8009c18:	3237      	adds	r2, #55	@ 0x37
 8009c1a:	b2d2      	uxtb	r2, r2
 8009c1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	011b      	lsls	r3, r3, #4
 8009c22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009c24:	7dfb      	ldrb	r3, [r7, #23]
 8009c26:	005b      	lsls	r3, r3, #1
 8009c28:	3301      	adds	r3, #1
 8009c2a:	68ba      	ldr	r2, [r7, #8]
 8009c2c:	4413      	add	r3, r2
 8009c2e:	2200      	movs	r2, #0
 8009c30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009c32:	7dfb      	ldrb	r3, [r7, #23]
 8009c34:	3301      	adds	r3, #1
 8009c36:	75fb      	strb	r3, [r7, #23]
 8009c38:	7dfa      	ldrb	r2, [r7, #23]
 8009c3a:	79fb      	ldrb	r3, [r7, #7]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d3d3      	bcc.n	8009be8 <IntToUnicode+0x18>
  }
}
 8009c40:	bf00      	nop
 8009c42:	bf00      	nop
 8009c44:	371c      	adds	r7, #28
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr
	...

08009c50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b08a      	sub	sp, #40	@ 0x28
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c58:	f107 0314 	add.w	r3, r7, #20
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	601a      	str	r2, [r3, #0]
 8009c60:	605a      	str	r2, [r3, #4]
 8009c62:	609a      	str	r2, [r3, #8]
 8009c64:	60da      	str	r2, [r3, #12]
 8009c66:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009c70:	d13a      	bne.n	8009ce8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c72:	2300      	movs	r3, #0
 8009c74:	613b      	str	r3, [r7, #16]
 8009c76:	4b1e      	ldr	r3, [pc, #120]	@ (8009cf0 <HAL_PCD_MspInit+0xa0>)
 8009c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c7a:	4a1d      	ldr	r2, [pc, #116]	@ (8009cf0 <HAL_PCD_MspInit+0xa0>)
 8009c7c:	f043 0301 	orr.w	r3, r3, #1
 8009c80:	6313      	str	r3, [r2, #48]	@ 0x30
 8009c82:	4b1b      	ldr	r3, [pc, #108]	@ (8009cf0 <HAL_PCD_MspInit+0xa0>)
 8009c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c86:	f003 0301 	and.w	r3, r3, #1
 8009c8a:	613b      	str	r3, [r7, #16]
 8009c8c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_D__Pin|USB_D_A12_Pin;
 8009c8e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c94:	2302      	movs	r3, #2
 8009c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c9c:	2303      	movs	r3, #3
 8009c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009ca0:	230a      	movs	r3, #10
 8009ca2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ca4:	f107 0314 	add.w	r3, r7, #20
 8009ca8:	4619      	mov	r1, r3
 8009caa:	4812      	ldr	r0, [pc, #72]	@ (8009cf4 <HAL_PCD_MspInit+0xa4>)
 8009cac:	f7f9 f84e 	bl	8002d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8009cf0 <HAL_PCD_MspInit+0xa0>)
 8009cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cb4:	4a0e      	ldr	r2, [pc, #56]	@ (8009cf0 <HAL_PCD_MspInit+0xa0>)
 8009cb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cba:	6353      	str	r3, [r2, #52]	@ 0x34
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	60fb      	str	r3, [r7, #12]
 8009cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8009cf0 <HAL_PCD_MspInit+0xa0>)
 8009cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cc4:	4a0a      	ldr	r2, [pc, #40]	@ (8009cf0 <HAL_PCD_MspInit+0xa0>)
 8009cc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009cca:	6453      	str	r3, [r2, #68]	@ 0x44
 8009ccc:	4b08      	ldr	r3, [pc, #32]	@ (8009cf0 <HAL_PCD_MspInit+0xa0>)
 8009cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009cd4:	60fb      	str	r3, [r7, #12]
 8009cd6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009cd8:	2200      	movs	r2, #0
 8009cda:	2100      	movs	r1, #0
 8009cdc:	2043      	movs	r0, #67	@ 0x43
 8009cde:	f7f8 fffe 	bl	8002cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009ce2:	2043      	movs	r0, #67	@ 0x43
 8009ce4:	f7f9 f817 	bl	8002d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009ce8:	bf00      	nop
 8009cea:	3728      	adds	r7, #40	@ 0x28
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}
 8009cf0:	40023800 	.word	0x40023800
 8009cf4:	40020000 	.word	0x40020000

08009cf8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	4610      	mov	r0, r2
 8009d10:	f7fe fb6f 	bl	80083f2 <USBD_LL_SetupStage>
}
 8009d14:	bf00      	nop
 8009d16:	3708      	adds	r7, #8
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}

08009d1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
 8009d24:	460b      	mov	r3, r1
 8009d26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009d2e:	78fa      	ldrb	r2, [r7, #3]
 8009d30:	6879      	ldr	r1, [r7, #4]
 8009d32:	4613      	mov	r3, r2
 8009d34:	00db      	lsls	r3, r3, #3
 8009d36:	4413      	add	r3, r2
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	440b      	add	r3, r1
 8009d3c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	78fb      	ldrb	r3, [r7, #3]
 8009d44:	4619      	mov	r1, r3
 8009d46:	f7fe fba9 	bl	800849c <USBD_LL_DataOutStage>
}
 8009d4a:	bf00      	nop
 8009d4c:	3708      	adds	r7, #8
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b082      	sub	sp, #8
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009d64:	78fa      	ldrb	r2, [r7, #3]
 8009d66:	6879      	ldr	r1, [r7, #4]
 8009d68:	4613      	mov	r3, r2
 8009d6a:	00db      	lsls	r3, r3, #3
 8009d6c:	4413      	add	r3, r2
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	440b      	add	r3, r1
 8009d72:	3320      	adds	r3, #32
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	78fb      	ldrb	r3, [r7, #3]
 8009d78:	4619      	mov	r1, r3
 8009d7a:	f7fe fc42 	bl	8008602 <USBD_LL_DataInStage>
}
 8009d7e:	bf00      	nop
 8009d80:	3708      	adds	r7, #8
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}

08009d86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d86:	b580      	push	{r7, lr}
 8009d88:	b082      	sub	sp, #8
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7fe fd7c 	bl	8008892 <USBD_LL_SOF>
}
 8009d9a:	bf00      	nop
 8009d9c:	3708      	adds	r7, #8
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b084      	sub	sp, #16
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009daa:	2301      	movs	r3, #1
 8009dac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	79db      	ldrb	r3, [r3, #7]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d102      	bne.n	8009dbc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009db6:	2300      	movs	r3, #0
 8009db8:	73fb      	strb	r3, [r7, #15]
 8009dba:	e008      	b.n	8009dce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	79db      	ldrb	r3, [r3, #7]
 8009dc0:	2b02      	cmp	r3, #2
 8009dc2:	d102      	bne.n	8009dca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009dc4:	2301      	movs	r3, #1
 8009dc6:	73fb      	strb	r3, [r7, #15]
 8009dc8:	e001      	b.n	8009dce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009dca:	f7f7 fe31 	bl	8001a30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009dd4:	7bfa      	ldrb	r2, [r7, #15]
 8009dd6:	4611      	mov	r1, r2
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7fe fd16 	bl	800880a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fe fcbe 	bl	8008766 <USBD_LL_Reset>
}
 8009dea:	bf00      	nop
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
	...

08009df4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b082      	sub	sp, #8
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7fe fd11 	bl	800882a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	6812      	ldr	r2, [r2, #0]
 8009e16:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009e1a:	f043 0301 	orr.w	r3, r3, #1
 8009e1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	7adb      	ldrb	r3, [r3, #11]
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d005      	beq.n	8009e34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e28:	4b04      	ldr	r3, [pc, #16]	@ (8009e3c <HAL_PCD_SuspendCallback+0x48>)
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	4a03      	ldr	r2, [pc, #12]	@ (8009e3c <HAL_PCD_SuspendCallback+0x48>)
 8009e2e:	f043 0306 	orr.w	r3, r3, #6
 8009e32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009e34:	bf00      	nop
 8009e36:	3708      	adds	r7, #8
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	bd80      	pop	{r7, pc}
 8009e3c:	e000ed00 	.word	0xe000ed00

08009e40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b082      	sub	sp, #8
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fe fd07 	bl	8008862 <USBD_LL_Resume>
}
 8009e54:	bf00      	nop
 8009e56:	3708      	adds	r7, #8
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	460b      	mov	r3, r1
 8009e66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e6e:	78fa      	ldrb	r2, [r7, #3]
 8009e70:	4611      	mov	r1, r2
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7fe fd5f 	bl	8008936 <USBD_LL_IsoOUTIncomplete>
}
 8009e78:	bf00      	nop
 8009e7a:	3708      	adds	r7, #8
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	460b      	mov	r3, r1
 8009e8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009e92:	78fa      	ldrb	r2, [r7, #3]
 8009e94:	4611      	mov	r1, r2
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7fe fd1b 	bl	80088d2 <USBD_LL_IsoINIncomplete>
}
 8009e9c:	bf00      	nop
 8009e9e:	3708      	adds	r7, #8
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	bd80      	pop	{r7, pc}

08009ea4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b082      	sub	sp, #8
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7fe fd71 	bl	800899a <USBD_LL_DevConnected>
}
 8009eb8:	bf00      	nop
 8009eba:	3708      	adds	r7, #8
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7fe fd6e 	bl	80089b0 <USBD_LL_DevDisconnected>
}
 8009ed4:	bf00      	nop
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	781b      	ldrb	r3, [r3, #0]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d13c      	bne.n	8009f66 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009eec:	4a20      	ldr	r2, [pc, #128]	@ (8009f70 <USBD_LL_Init+0x94>)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a1e      	ldr	r2, [pc, #120]	@ (8009f70 <USBD_LL_Init+0x94>)
 8009ef8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009efc:	4b1c      	ldr	r3, [pc, #112]	@ (8009f70 <USBD_LL_Init+0x94>)
 8009efe:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009f02:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009f04:	4b1a      	ldr	r3, [pc, #104]	@ (8009f70 <USBD_LL_Init+0x94>)
 8009f06:	2204      	movs	r2, #4
 8009f08:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009f0a:	4b19      	ldr	r3, [pc, #100]	@ (8009f70 <USBD_LL_Init+0x94>)
 8009f0c:	2202      	movs	r2, #2
 8009f0e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009f10:	4b17      	ldr	r3, [pc, #92]	@ (8009f70 <USBD_LL_Init+0x94>)
 8009f12:	2200      	movs	r2, #0
 8009f14:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009f16:	4b16      	ldr	r3, [pc, #88]	@ (8009f70 <USBD_LL_Init+0x94>)
 8009f18:	2202      	movs	r2, #2
 8009f1a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009f1c:	4b14      	ldr	r3, [pc, #80]	@ (8009f70 <USBD_LL_Init+0x94>)
 8009f1e:	2200      	movs	r2, #0
 8009f20:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009f22:	4b13      	ldr	r3, [pc, #76]	@ (8009f70 <USBD_LL_Init+0x94>)
 8009f24:	2200      	movs	r2, #0
 8009f26:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009f28:	4b11      	ldr	r3, [pc, #68]	@ (8009f70 <USBD_LL_Init+0x94>)
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009f2e:	4b10      	ldr	r3, [pc, #64]	@ (8009f70 <USBD_LL_Init+0x94>)
 8009f30:	2200      	movs	r2, #0
 8009f32:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009f34:	4b0e      	ldr	r3, [pc, #56]	@ (8009f70 <USBD_LL_Init+0x94>)
 8009f36:	2200      	movs	r2, #0
 8009f38:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009f3a:	480d      	ldr	r0, [pc, #52]	@ (8009f70 <USBD_LL_Init+0x94>)
 8009f3c:	f7f9 fa00 	bl	8003340 <HAL_PCD_Init>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d001      	beq.n	8009f4a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009f46:	f7f7 fd73 	bl	8001a30 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009f4a:	2180      	movs	r1, #128	@ 0x80
 8009f4c:	4808      	ldr	r0, [pc, #32]	@ (8009f70 <USBD_LL_Init+0x94>)
 8009f4e:	f7fa fc2c 	bl	80047aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009f52:	2240      	movs	r2, #64	@ 0x40
 8009f54:	2100      	movs	r1, #0
 8009f56:	4806      	ldr	r0, [pc, #24]	@ (8009f70 <USBD_LL_Init+0x94>)
 8009f58:	f7fa fbe0 	bl	800471c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009f5c:	2280      	movs	r2, #128	@ 0x80
 8009f5e:	2101      	movs	r1, #1
 8009f60:	4803      	ldr	r0, [pc, #12]	@ (8009f70 <USBD_LL_Init+0x94>)
 8009f62:	f7fa fbdb 	bl	800471c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3708      	adds	r7, #8
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	20001aa4 	.word	0x20001aa4

08009f74 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f80:	2300      	movs	r3, #0
 8009f82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f7f9 fae7 	bl	800355e <HAL_PCD_Start>
 8009f90:	4603      	mov	r3, r0
 8009f92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f94:	7bfb      	ldrb	r3, [r7, #15]
 8009f96:	4618      	mov	r0, r3
 8009f98:	f000 f942 	bl	800a220 <USBD_Get_USB_Status>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3710      	adds	r7, #16
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b084      	sub	sp, #16
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
 8009fb2:	4608      	mov	r0, r1
 8009fb4:	4611      	mov	r1, r2
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	4603      	mov	r3, r0
 8009fba:	70fb      	strb	r3, [r7, #3]
 8009fbc:	460b      	mov	r3, r1
 8009fbe:	70bb      	strb	r3, [r7, #2]
 8009fc0:	4613      	mov	r3, r2
 8009fc2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009fd2:	78bb      	ldrb	r3, [r7, #2]
 8009fd4:	883a      	ldrh	r2, [r7, #0]
 8009fd6:	78f9      	ldrb	r1, [r7, #3]
 8009fd8:	f7f9 ffbb 	bl	8003f52 <HAL_PCD_EP_Open>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fe0:	7bfb      	ldrb	r3, [r7, #15]
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f000 f91c 	bl	800a220 <USBD_Get_USB_Status>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fec:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b084      	sub	sp, #16
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
 8009ffe:	460b      	mov	r3, r1
 800a000:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a002:	2300      	movs	r3, #0
 800a004:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a006:	2300      	movs	r3, #0
 800a008:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a010:	78fa      	ldrb	r2, [r7, #3]
 800a012:	4611      	mov	r1, r2
 800a014:	4618      	mov	r0, r3
 800a016:	f7fa f806 	bl	8004026 <HAL_PCD_EP_Close>
 800a01a:	4603      	mov	r3, r0
 800a01c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a01e:	7bfb      	ldrb	r3, [r7, #15]
 800a020:	4618      	mov	r0, r3
 800a022:	f000 f8fd 	bl	800a220 <USBD_Get_USB_Status>
 800a026:	4603      	mov	r3, r0
 800a028:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a02a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3710      	adds	r7, #16
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b084      	sub	sp, #16
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	460b      	mov	r3, r1
 800a03e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a040:	2300      	movs	r3, #0
 800a042:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a044:	2300      	movs	r3, #0
 800a046:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a04e:	78fa      	ldrb	r2, [r7, #3]
 800a050:	4611      	mov	r1, r2
 800a052:	4618      	mov	r0, r3
 800a054:	f7fa f8be 	bl	80041d4 <HAL_PCD_EP_SetStall>
 800a058:	4603      	mov	r3, r0
 800a05a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a05c:	7bfb      	ldrb	r3, [r7, #15]
 800a05e:	4618      	mov	r0, r3
 800a060:	f000 f8de 	bl	800a220 <USBD_Get_USB_Status>
 800a064:	4603      	mov	r3, r0
 800a066:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a068:	7bbb      	ldrb	r3, [r7, #14]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3710      	adds	r7, #16
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b084      	sub	sp, #16
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
 800a07a:	460b      	mov	r3, r1
 800a07c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a07e:	2300      	movs	r3, #0
 800a080:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a082:	2300      	movs	r3, #0
 800a084:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a08c:	78fa      	ldrb	r2, [r7, #3]
 800a08e:	4611      	mov	r1, r2
 800a090:	4618      	mov	r0, r3
 800a092:	f7fa f902 	bl	800429a <HAL_PCD_EP_ClrStall>
 800a096:	4603      	mov	r3, r0
 800a098:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a09a:	7bfb      	ldrb	r3, [r7, #15]
 800a09c:	4618      	mov	r0, r3
 800a09e:	f000 f8bf 	bl	800a220 <USBD_Get_USB_Status>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3710      	adds	r7, #16
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b085      	sub	sp, #20
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a0c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a0c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	da0b      	bge.n	800a0e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a0cc:	78fb      	ldrb	r3, [r7, #3]
 800a0ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a0d2:	68f9      	ldr	r1, [r7, #12]
 800a0d4:	4613      	mov	r3, r2
 800a0d6:	00db      	lsls	r3, r3, #3
 800a0d8:	4413      	add	r3, r2
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	440b      	add	r3, r1
 800a0de:	3316      	adds	r3, #22
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	e00b      	b.n	800a0fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a0e4:	78fb      	ldrb	r3, [r7, #3]
 800a0e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a0ea:	68f9      	ldr	r1, [r7, #12]
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	00db      	lsls	r3, r3, #3
 800a0f0:	4413      	add	r3, r2
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	440b      	add	r3, r1
 800a0f6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800a0fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3714      	adds	r7, #20
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b084      	sub	sp, #16
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	460b      	mov	r3, r1
 800a112:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a114:	2300      	movs	r3, #0
 800a116:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a118:	2300      	movs	r3, #0
 800a11a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a122:	78fa      	ldrb	r2, [r7, #3]
 800a124:	4611      	mov	r1, r2
 800a126:	4618      	mov	r0, r3
 800a128:	f7f9 feef 	bl	8003f0a <HAL_PCD_SetAddress>
 800a12c:	4603      	mov	r3, r0
 800a12e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a130:	7bfb      	ldrb	r3, [r7, #15]
 800a132:	4618      	mov	r0, r3
 800a134:	f000 f874 	bl	800a220 <USBD_Get_USB_Status>
 800a138:	4603      	mov	r3, r0
 800a13a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a13c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3710      	adds	r7, #16
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b086      	sub	sp, #24
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	60f8      	str	r0, [r7, #12]
 800a14e:	607a      	str	r2, [r7, #4]
 800a150:	603b      	str	r3, [r7, #0]
 800a152:	460b      	mov	r3, r1
 800a154:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a156:	2300      	movs	r3, #0
 800a158:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a15a:	2300      	movs	r3, #0
 800a15c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a164:	7af9      	ldrb	r1, [r7, #11]
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	687a      	ldr	r2, [r7, #4]
 800a16a:	f7f9 fff9 	bl	8004160 <HAL_PCD_EP_Transmit>
 800a16e:	4603      	mov	r3, r0
 800a170:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a172:	7dfb      	ldrb	r3, [r7, #23]
 800a174:	4618      	mov	r0, r3
 800a176:	f000 f853 	bl	800a220 <USBD_Get_USB_Status>
 800a17a:	4603      	mov	r3, r0
 800a17c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a17e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a180:	4618      	mov	r0, r3
 800a182:	3718      	adds	r7, #24
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b086      	sub	sp, #24
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	607a      	str	r2, [r7, #4]
 800a192:	603b      	str	r3, [r7, #0]
 800a194:	460b      	mov	r3, r1
 800a196:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a198:	2300      	movs	r3, #0
 800a19a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a19c:	2300      	movs	r3, #0
 800a19e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800a1a6:	7af9      	ldrb	r1, [r7, #11]
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	f7f9 ff85 	bl	80040ba <HAL_PCD_EP_Receive>
 800a1b0:	4603      	mov	r3, r0
 800a1b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1b4:	7dfb      	ldrb	r3, [r7, #23]
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f000 f832 	bl	800a220 <USBD_Get_USB_Status>
 800a1bc:	4603      	mov	r3, r0
 800a1be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1c0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3718      	adds	r7, #24
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b082      	sub	sp, #8
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
 800a1d2:	460b      	mov	r3, r1
 800a1d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a1dc:	78fa      	ldrb	r2, [r7, #3]
 800a1de:	4611      	mov	r1, r2
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f7f9 ffa5 	bl	8004130 <HAL_PCD_EP_GetRxCount>
 800a1e6:	4603      	mov	r3, r0
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3708      	adds	r7, #8
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a1f8:	4b03      	ldr	r3, [pc, #12]	@ (800a208 <USBD_static_malloc+0x18>)
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	370c      	adds	r7, #12
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr
 800a206:	bf00      	nop
 800a208:	20001f88 	.word	0x20001f88

0800a20c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]

}
 800a214:	bf00      	nop
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a220:	b480      	push	{r7}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
 800a226:	4603      	mov	r3, r0
 800a228:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a22a:	2300      	movs	r3, #0
 800a22c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a22e:	79fb      	ldrb	r3, [r7, #7]
 800a230:	2b03      	cmp	r3, #3
 800a232:	d817      	bhi.n	800a264 <USBD_Get_USB_Status+0x44>
 800a234:	a201      	add	r2, pc, #4	@ (adr r2, 800a23c <USBD_Get_USB_Status+0x1c>)
 800a236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a23a:	bf00      	nop
 800a23c:	0800a24d 	.word	0x0800a24d
 800a240:	0800a253 	.word	0x0800a253
 800a244:	0800a259 	.word	0x0800a259
 800a248:	0800a25f 	.word	0x0800a25f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a24c:	2300      	movs	r3, #0
 800a24e:	73fb      	strb	r3, [r7, #15]
    break;
 800a250:	e00b      	b.n	800a26a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a252:	2303      	movs	r3, #3
 800a254:	73fb      	strb	r3, [r7, #15]
    break;
 800a256:	e008      	b.n	800a26a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a258:	2301      	movs	r3, #1
 800a25a:	73fb      	strb	r3, [r7, #15]
    break;
 800a25c:	e005      	b.n	800a26a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a25e:	2303      	movs	r3, #3
 800a260:	73fb      	strb	r3, [r7, #15]
    break;
 800a262:	e002      	b.n	800a26a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a264:	2303      	movs	r3, #3
 800a266:	73fb      	strb	r3, [r7, #15]
    break;
 800a268:	bf00      	nop
  }
  return usb_status;
 800a26a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3714      	adds	r7, #20
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <__cvt>:
 800a278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a27c:	ec57 6b10 	vmov	r6, r7, d0
 800a280:	2f00      	cmp	r7, #0
 800a282:	460c      	mov	r4, r1
 800a284:	4619      	mov	r1, r3
 800a286:	463b      	mov	r3, r7
 800a288:	bfbb      	ittet	lt
 800a28a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800a28e:	461f      	movlt	r7, r3
 800a290:	2300      	movge	r3, #0
 800a292:	232d      	movlt	r3, #45	@ 0x2d
 800a294:	700b      	strb	r3, [r1, #0]
 800a296:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a298:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800a29c:	4691      	mov	r9, r2
 800a29e:	f023 0820 	bic.w	r8, r3, #32
 800a2a2:	bfbc      	itt	lt
 800a2a4:	4632      	movlt	r2, r6
 800a2a6:	4616      	movlt	r6, r2
 800a2a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a2ac:	d005      	beq.n	800a2ba <__cvt+0x42>
 800a2ae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a2b2:	d100      	bne.n	800a2b6 <__cvt+0x3e>
 800a2b4:	3401      	adds	r4, #1
 800a2b6:	2102      	movs	r1, #2
 800a2b8:	e000      	b.n	800a2bc <__cvt+0x44>
 800a2ba:	2103      	movs	r1, #3
 800a2bc:	ab03      	add	r3, sp, #12
 800a2be:	9301      	str	r3, [sp, #4]
 800a2c0:	ab02      	add	r3, sp, #8
 800a2c2:	9300      	str	r3, [sp, #0]
 800a2c4:	ec47 6b10 	vmov	d0, r6, r7
 800a2c8:	4653      	mov	r3, sl
 800a2ca:	4622      	mov	r2, r4
 800a2cc:	f000 fdd0 	bl	800ae70 <_dtoa_r>
 800a2d0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a2d4:	4605      	mov	r5, r0
 800a2d6:	d119      	bne.n	800a30c <__cvt+0x94>
 800a2d8:	f019 0f01 	tst.w	r9, #1
 800a2dc:	d00e      	beq.n	800a2fc <__cvt+0x84>
 800a2de:	eb00 0904 	add.w	r9, r0, r4
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	4630      	mov	r0, r6
 800a2e8:	4639      	mov	r1, r7
 800a2ea:	f7f6 fbed 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2ee:	b108      	cbz	r0, 800a2f4 <__cvt+0x7c>
 800a2f0:	f8cd 900c 	str.w	r9, [sp, #12]
 800a2f4:	2230      	movs	r2, #48	@ 0x30
 800a2f6:	9b03      	ldr	r3, [sp, #12]
 800a2f8:	454b      	cmp	r3, r9
 800a2fa:	d31e      	bcc.n	800a33a <__cvt+0xc2>
 800a2fc:	9b03      	ldr	r3, [sp, #12]
 800a2fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a300:	1b5b      	subs	r3, r3, r5
 800a302:	4628      	mov	r0, r5
 800a304:	6013      	str	r3, [r2, #0]
 800a306:	b004      	add	sp, #16
 800a308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a30c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a310:	eb00 0904 	add.w	r9, r0, r4
 800a314:	d1e5      	bne.n	800a2e2 <__cvt+0x6a>
 800a316:	7803      	ldrb	r3, [r0, #0]
 800a318:	2b30      	cmp	r3, #48	@ 0x30
 800a31a:	d10a      	bne.n	800a332 <__cvt+0xba>
 800a31c:	2200      	movs	r2, #0
 800a31e:	2300      	movs	r3, #0
 800a320:	4630      	mov	r0, r6
 800a322:	4639      	mov	r1, r7
 800a324:	f7f6 fbd0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a328:	b918      	cbnz	r0, 800a332 <__cvt+0xba>
 800a32a:	f1c4 0401 	rsb	r4, r4, #1
 800a32e:	f8ca 4000 	str.w	r4, [sl]
 800a332:	f8da 3000 	ldr.w	r3, [sl]
 800a336:	4499      	add	r9, r3
 800a338:	e7d3      	b.n	800a2e2 <__cvt+0x6a>
 800a33a:	1c59      	adds	r1, r3, #1
 800a33c:	9103      	str	r1, [sp, #12]
 800a33e:	701a      	strb	r2, [r3, #0]
 800a340:	e7d9      	b.n	800a2f6 <__cvt+0x7e>

0800a342 <__exponent>:
 800a342:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a344:	2900      	cmp	r1, #0
 800a346:	bfba      	itte	lt
 800a348:	4249      	neglt	r1, r1
 800a34a:	232d      	movlt	r3, #45	@ 0x2d
 800a34c:	232b      	movge	r3, #43	@ 0x2b
 800a34e:	2909      	cmp	r1, #9
 800a350:	7002      	strb	r2, [r0, #0]
 800a352:	7043      	strb	r3, [r0, #1]
 800a354:	dd29      	ble.n	800a3aa <__exponent+0x68>
 800a356:	f10d 0307 	add.w	r3, sp, #7
 800a35a:	461d      	mov	r5, r3
 800a35c:	270a      	movs	r7, #10
 800a35e:	461a      	mov	r2, r3
 800a360:	fbb1 f6f7 	udiv	r6, r1, r7
 800a364:	fb07 1416 	mls	r4, r7, r6, r1
 800a368:	3430      	adds	r4, #48	@ 0x30
 800a36a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800a36e:	460c      	mov	r4, r1
 800a370:	2c63      	cmp	r4, #99	@ 0x63
 800a372:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a376:	4631      	mov	r1, r6
 800a378:	dcf1      	bgt.n	800a35e <__exponent+0x1c>
 800a37a:	3130      	adds	r1, #48	@ 0x30
 800a37c:	1e94      	subs	r4, r2, #2
 800a37e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a382:	1c41      	adds	r1, r0, #1
 800a384:	4623      	mov	r3, r4
 800a386:	42ab      	cmp	r3, r5
 800a388:	d30a      	bcc.n	800a3a0 <__exponent+0x5e>
 800a38a:	f10d 0309 	add.w	r3, sp, #9
 800a38e:	1a9b      	subs	r3, r3, r2
 800a390:	42ac      	cmp	r4, r5
 800a392:	bf88      	it	hi
 800a394:	2300      	movhi	r3, #0
 800a396:	3302      	adds	r3, #2
 800a398:	4403      	add	r3, r0
 800a39a:	1a18      	subs	r0, r3, r0
 800a39c:	b003      	add	sp, #12
 800a39e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3a0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a3a4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a3a8:	e7ed      	b.n	800a386 <__exponent+0x44>
 800a3aa:	2330      	movs	r3, #48	@ 0x30
 800a3ac:	3130      	adds	r1, #48	@ 0x30
 800a3ae:	7083      	strb	r3, [r0, #2]
 800a3b0:	70c1      	strb	r1, [r0, #3]
 800a3b2:	1d03      	adds	r3, r0, #4
 800a3b4:	e7f1      	b.n	800a39a <__exponent+0x58>
	...

0800a3b8 <_printf_float>:
 800a3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3bc:	b08d      	sub	sp, #52	@ 0x34
 800a3be:	460c      	mov	r4, r1
 800a3c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a3c4:	4616      	mov	r6, r2
 800a3c6:	461f      	mov	r7, r3
 800a3c8:	4605      	mov	r5, r0
 800a3ca:	f000 fc97 	bl	800acfc <_localeconv_r>
 800a3ce:	6803      	ldr	r3, [r0, #0]
 800a3d0:	9304      	str	r3, [sp, #16]
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7f5 ff4c 	bl	8000270 <strlen>
 800a3d8:	2300      	movs	r3, #0
 800a3da:	930a      	str	r3, [sp, #40]	@ 0x28
 800a3dc:	f8d8 3000 	ldr.w	r3, [r8]
 800a3e0:	9005      	str	r0, [sp, #20]
 800a3e2:	3307      	adds	r3, #7
 800a3e4:	f023 0307 	bic.w	r3, r3, #7
 800a3e8:	f103 0208 	add.w	r2, r3, #8
 800a3ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a3f0:	f8d4 b000 	ldr.w	fp, [r4]
 800a3f4:	f8c8 2000 	str.w	r2, [r8]
 800a3f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a3fc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a400:	9307      	str	r3, [sp, #28]
 800a402:	f8cd 8018 	str.w	r8, [sp, #24]
 800a406:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a40a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a40e:	4b9c      	ldr	r3, [pc, #624]	@ (800a680 <_printf_float+0x2c8>)
 800a410:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a414:	f7f6 fb8a 	bl	8000b2c <__aeabi_dcmpun>
 800a418:	bb70      	cbnz	r0, 800a478 <_printf_float+0xc0>
 800a41a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a41e:	4b98      	ldr	r3, [pc, #608]	@ (800a680 <_printf_float+0x2c8>)
 800a420:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a424:	f7f6 fb64 	bl	8000af0 <__aeabi_dcmple>
 800a428:	bb30      	cbnz	r0, 800a478 <_printf_float+0xc0>
 800a42a:	2200      	movs	r2, #0
 800a42c:	2300      	movs	r3, #0
 800a42e:	4640      	mov	r0, r8
 800a430:	4649      	mov	r1, r9
 800a432:	f7f6 fb53 	bl	8000adc <__aeabi_dcmplt>
 800a436:	b110      	cbz	r0, 800a43e <_printf_float+0x86>
 800a438:	232d      	movs	r3, #45	@ 0x2d
 800a43a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a43e:	4a91      	ldr	r2, [pc, #580]	@ (800a684 <_printf_float+0x2cc>)
 800a440:	4b91      	ldr	r3, [pc, #580]	@ (800a688 <_printf_float+0x2d0>)
 800a442:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a446:	bf94      	ite	ls
 800a448:	4690      	movls	r8, r2
 800a44a:	4698      	movhi	r8, r3
 800a44c:	2303      	movs	r3, #3
 800a44e:	6123      	str	r3, [r4, #16]
 800a450:	f02b 0304 	bic.w	r3, fp, #4
 800a454:	6023      	str	r3, [r4, #0]
 800a456:	f04f 0900 	mov.w	r9, #0
 800a45a:	9700      	str	r7, [sp, #0]
 800a45c:	4633      	mov	r3, r6
 800a45e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a460:	4621      	mov	r1, r4
 800a462:	4628      	mov	r0, r5
 800a464:	f000 f9d2 	bl	800a80c <_printf_common>
 800a468:	3001      	adds	r0, #1
 800a46a:	f040 808d 	bne.w	800a588 <_printf_float+0x1d0>
 800a46e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a472:	b00d      	add	sp, #52	@ 0x34
 800a474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a478:	4642      	mov	r2, r8
 800a47a:	464b      	mov	r3, r9
 800a47c:	4640      	mov	r0, r8
 800a47e:	4649      	mov	r1, r9
 800a480:	f7f6 fb54 	bl	8000b2c <__aeabi_dcmpun>
 800a484:	b140      	cbz	r0, 800a498 <_printf_float+0xe0>
 800a486:	464b      	mov	r3, r9
 800a488:	2b00      	cmp	r3, #0
 800a48a:	bfbc      	itt	lt
 800a48c:	232d      	movlt	r3, #45	@ 0x2d
 800a48e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a492:	4a7e      	ldr	r2, [pc, #504]	@ (800a68c <_printf_float+0x2d4>)
 800a494:	4b7e      	ldr	r3, [pc, #504]	@ (800a690 <_printf_float+0x2d8>)
 800a496:	e7d4      	b.n	800a442 <_printf_float+0x8a>
 800a498:	6863      	ldr	r3, [r4, #4]
 800a49a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a49e:	9206      	str	r2, [sp, #24]
 800a4a0:	1c5a      	adds	r2, r3, #1
 800a4a2:	d13b      	bne.n	800a51c <_printf_float+0x164>
 800a4a4:	2306      	movs	r3, #6
 800a4a6:	6063      	str	r3, [r4, #4]
 800a4a8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	6022      	str	r2, [r4, #0]
 800a4b0:	9303      	str	r3, [sp, #12]
 800a4b2:	ab0a      	add	r3, sp, #40	@ 0x28
 800a4b4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a4b8:	ab09      	add	r3, sp, #36	@ 0x24
 800a4ba:	9300      	str	r3, [sp, #0]
 800a4bc:	6861      	ldr	r1, [r4, #4]
 800a4be:	ec49 8b10 	vmov	d0, r8, r9
 800a4c2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	f7ff fed6 	bl	800a278 <__cvt>
 800a4cc:	9b06      	ldr	r3, [sp, #24]
 800a4ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a4d0:	2b47      	cmp	r3, #71	@ 0x47
 800a4d2:	4680      	mov	r8, r0
 800a4d4:	d129      	bne.n	800a52a <_printf_float+0x172>
 800a4d6:	1cc8      	adds	r0, r1, #3
 800a4d8:	db02      	blt.n	800a4e0 <_printf_float+0x128>
 800a4da:	6863      	ldr	r3, [r4, #4]
 800a4dc:	4299      	cmp	r1, r3
 800a4de:	dd41      	ble.n	800a564 <_printf_float+0x1ac>
 800a4e0:	f1aa 0a02 	sub.w	sl, sl, #2
 800a4e4:	fa5f fa8a 	uxtb.w	sl, sl
 800a4e8:	3901      	subs	r1, #1
 800a4ea:	4652      	mov	r2, sl
 800a4ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a4f0:	9109      	str	r1, [sp, #36]	@ 0x24
 800a4f2:	f7ff ff26 	bl	800a342 <__exponent>
 800a4f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a4f8:	1813      	adds	r3, r2, r0
 800a4fa:	2a01      	cmp	r2, #1
 800a4fc:	4681      	mov	r9, r0
 800a4fe:	6123      	str	r3, [r4, #16]
 800a500:	dc02      	bgt.n	800a508 <_printf_float+0x150>
 800a502:	6822      	ldr	r2, [r4, #0]
 800a504:	07d2      	lsls	r2, r2, #31
 800a506:	d501      	bpl.n	800a50c <_printf_float+0x154>
 800a508:	3301      	adds	r3, #1
 800a50a:	6123      	str	r3, [r4, #16]
 800a50c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a510:	2b00      	cmp	r3, #0
 800a512:	d0a2      	beq.n	800a45a <_printf_float+0xa2>
 800a514:	232d      	movs	r3, #45	@ 0x2d
 800a516:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a51a:	e79e      	b.n	800a45a <_printf_float+0xa2>
 800a51c:	9a06      	ldr	r2, [sp, #24]
 800a51e:	2a47      	cmp	r2, #71	@ 0x47
 800a520:	d1c2      	bne.n	800a4a8 <_printf_float+0xf0>
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1c0      	bne.n	800a4a8 <_printf_float+0xf0>
 800a526:	2301      	movs	r3, #1
 800a528:	e7bd      	b.n	800a4a6 <_printf_float+0xee>
 800a52a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a52e:	d9db      	bls.n	800a4e8 <_printf_float+0x130>
 800a530:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a534:	d118      	bne.n	800a568 <_printf_float+0x1b0>
 800a536:	2900      	cmp	r1, #0
 800a538:	6863      	ldr	r3, [r4, #4]
 800a53a:	dd0b      	ble.n	800a554 <_printf_float+0x19c>
 800a53c:	6121      	str	r1, [r4, #16]
 800a53e:	b913      	cbnz	r3, 800a546 <_printf_float+0x18e>
 800a540:	6822      	ldr	r2, [r4, #0]
 800a542:	07d0      	lsls	r0, r2, #31
 800a544:	d502      	bpl.n	800a54c <_printf_float+0x194>
 800a546:	3301      	adds	r3, #1
 800a548:	440b      	add	r3, r1
 800a54a:	6123      	str	r3, [r4, #16]
 800a54c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a54e:	f04f 0900 	mov.w	r9, #0
 800a552:	e7db      	b.n	800a50c <_printf_float+0x154>
 800a554:	b913      	cbnz	r3, 800a55c <_printf_float+0x1a4>
 800a556:	6822      	ldr	r2, [r4, #0]
 800a558:	07d2      	lsls	r2, r2, #31
 800a55a:	d501      	bpl.n	800a560 <_printf_float+0x1a8>
 800a55c:	3302      	adds	r3, #2
 800a55e:	e7f4      	b.n	800a54a <_printf_float+0x192>
 800a560:	2301      	movs	r3, #1
 800a562:	e7f2      	b.n	800a54a <_printf_float+0x192>
 800a564:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a568:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a56a:	4299      	cmp	r1, r3
 800a56c:	db05      	blt.n	800a57a <_printf_float+0x1c2>
 800a56e:	6823      	ldr	r3, [r4, #0]
 800a570:	6121      	str	r1, [r4, #16]
 800a572:	07d8      	lsls	r0, r3, #31
 800a574:	d5ea      	bpl.n	800a54c <_printf_float+0x194>
 800a576:	1c4b      	adds	r3, r1, #1
 800a578:	e7e7      	b.n	800a54a <_printf_float+0x192>
 800a57a:	2900      	cmp	r1, #0
 800a57c:	bfd4      	ite	le
 800a57e:	f1c1 0202 	rsble	r2, r1, #2
 800a582:	2201      	movgt	r2, #1
 800a584:	4413      	add	r3, r2
 800a586:	e7e0      	b.n	800a54a <_printf_float+0x192>
 800a588:	6823      	ldr	r3, [r4, #0]
 800a58a:	055a      	lsls	r2, r3, #21
 800a58c:	d407      	bmi.n	800a59e <_printf_float+0x1e6>
 800a58e:	6923      	ldr	r3, [r4, #16]
 800a590:	4642      	mov	r2, r8
 800a592:	4631      	mov	r1, r6
 800a594:	4628      	mov	r0, r5
 800a596:	47b8      	blx	r7
 800a598:	3001      	adds	r0, #1
 800a59a:	d12b      	bne.n	800a5f4 <_printf_float+0x23c>
 800a59c:	e767      	b.n	800a46e <_printf_float+0xb6>
 800a59e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a5a2:	f240 80dd 	bls.w	800a760 <_printf_float+0x3a8>
 800a5a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	f7f6 fa8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	d033      	beq.n	800a61e <_printf_float+0x266>
 800a5b6:	4a37      	ldr	r2, [pc, #220]	@ (800a694 <_printf_float+0x2dc>)
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	4631      	mov	r1, r6
 800a5bc:	4628      	mov	r0, r5
 800a5be:	47b8      	blx	r7
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	f43f af54 	beq.w	800a46e <_printf_float+0xb6>
 800a5c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a5ca:	4543      	cmp	r3, r8
 800a5cc:	db02      	blt.n	800a5d4 <_printf_float+0x21c>
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	07d8      	lsls	r0, r3, #31
 800a5d2:	d50f      	bpl.n	800a5f4 <_printf_float+0x23c>
 800a5d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a5d8:	4631      	mov	r1, r6
 800a5da:	4628      	mov	r0, r5
 800a5dc:	47b8      	blx	r7
 800a5de:	3001      	adds	r0, #1
 800a5e0:	f43f af45 	beq.w	800a46e <_printf_float+0xb6>
 800a5e4:	f04f 0900 	mov.w	r9, #0
 800a5e8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800a5ec:	f104 0a1a 	add.w	sl, r4, #26
 800a5f0:	45c8      	cmp	r8, r9
 800a5f2:	dc09      	bgt.n	800a608 <_printf_float+0x250>
 800a5f4:	6823      	ldr	r3, [r4, #0]
 800a5f6:	079b      	lsls	r3, r3, #30
 800a5f8:	f100 8103 	bmi.w	800a802 <_printf_float+0x44a>
 800a5fc:	68e0      	ldr	r0, [r4, #12]
 800a5fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a600:	4298      	cmp	r0, r3
 800a602:	bfb8      	it	lt
 800a604:	4618      	movlt	r0, r3
 800a606:	e734      	b.n	800a472 <_printf_float+0xba>
 800a608:	2301      	movs	r3, #1
 800a60a:	4652      	mov	r2, sl
 800a60c:	4631      	mov	r1, r6
 800a60e:	4628      	mov	r0, r5
 800a610:	47b8      	blx	r7
 800a612:	3001      	adds	r0, #1
 800a614:	f43f af2b 	beq.w	800a46e <_printf_float+0xb6>
 800a618:	f109 0901 	add.w	r9, r9, #1
 800a61c:	e7e8      	b.n	800a5f0 <_printf_float+0x238>
 800a61e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a620:	2b00      	cmp	r3, #0
 800a622:	dc39      	bgt.n	800a698 <_printf_float+0x2e0>
 800a624:	4a1b      	ldr	r2, [pc, #108]	@ (800a694 <_printf_float+0x2dc>)
 800a626:	2301      	movs	r3, #1
 800a628:	4631      	mov	r1, r6
 800a62a:	4628      	mov	r0, r5
 800a62c:	47b8      	blx	r7
 800a62e:	3001      	adds	r0, #1
 800a630:	f43f af1d 	beq.w	800a46e <_printf_float+0xb6>
 800a634:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a638:	ea59 0303 	orrs.w	r3, r9, r3
 800a63c:	d102      	bne.n	800a644 <_printf_float+0x28c>
 800a63e:	6823      	ldr	r3, [r4, #0]
 800a640:	07d9      	lsls	r1, r3, #31
 800a642:	d5d7      	bpl.n	800a5f4 <_printf_float+0x23c>
 800a644:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a648:	4631      	mov	r1, r6
 800a64a:	4628      	mov	r0, r5
 800a64c:	47b8      	blx	r7
 800a64e:	3001      	adds	r0, #1
 800a650:	f43f af0d 	beq.w	800a46e <_printf_float+0xb6>
 800a654:	f04f 0a00 	mov.w	sl, #0
 800a658:	f104 0b1a 	add.w	fp, r4, #26
 800a65c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a65e:	425b      	negs	r3, r3
 800a660:	4553      	cmp	r3, sl
 800a662:	dc01      	bgt.n	800a668 <_printf_float+0x2b0>
 800a664:	464b      	mov	r3, r9
 800a666:	e793      	b.n	800a590 <_printf_float+0x1d8>
 800a668:	2301      	movs	r3, #1
 800a66a:	465a      	mov	r2, fp
 800a66c:	4631      	mov	r1, r6
 800a66e:	4628      	mov	r0, r5
 800a670:	47b8      	blx	r7
 800a672:	3001      	adds	r0, #1
 800a674:	f43f aefb 	beq.w	800a46e <_printf_float+0xb6>
 800a678:	f10a 0a01 	add.w	sl, sl, #1
 800a67c:	e7ee      	b.n	800a65c <_printf_float+0x2a4>
 800a67e:	bf00      	nop
 800a680:	7fefffff 	.word	0x7fefffff
 800a684:	0800d010 	.word	0x0800d010
 800a688:	0800d014 	.word	0x0800d014
 800a68c:	0800d018 	.word	0x0800d018
 800a690:	0800d01c 	.word	0x0800d01c
 800a694:	0800d020 	.word	0x0800d020
 800a698:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a69a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a69e:	4553      	cmp	r3, sl
 800a6a0:	bfa8      	it	ge
 800a6a2:	4653      	movge	r3, sl
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	4699      	mov	r9, r3
 800a6a8:	dc36      	bgt.n	800a718 <_printf_float+0x360>
 800a6aa:	f04f 0b00 	mov.w	fp, #0
 800a6ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6b2:	f104 021a 	add.w	r2, r4, #26
 800a6b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a6b8:	9306      	str	r3, [sp, #24]
 800a6ba:	eba3 0309 	sub.w	r3, r3, r9
 800a6be:	455b      	cmp	r3, fp
 800a6c0:	dc31      	bgt.n	800a726 <_printf_float+0x36e>
 800a6c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6c4:	459a      	cmp	sl, r3
 800a6c6:	dc3a      	bgt.n	800a73e <_printf_float+0x386>
 800a6c8:	6823      	ldr	r3, [r4, #0]
 800a6ca:	07da      	lsls	r2, r3, #31
 800a6cc:	d437      	bmi.n	800a73e <_printf_float+0x386>
 800a6ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6d0:	ebaa 0903 	sub.w	r9, sl, r3
 800a6d4:	9b06      	ldr	r3, [sp, #24]
 800a6d6:	ebaa 0303 	sub.w	r3, sl, r3
 800a6da:	4599      	cmp	r9, r3
 800a6dc:	bfa8      	it	ge
 800a6de:	4699      	movge	r9, r3
 800a6e0:	f1b9 0f00 	cmp.w	r9, #0
 800a6e4:	dc33      	bgt.n	800a74e <_printf_float+0x396>
 800a6e6:	f04f 0800 	mov.w	r8, #0
 800a6ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a6ee:	f104 0b1a 	add.w	fp, r4, #26
 800a6f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6f4:	ebaa 0303 	sub.w	r3, sl, r3
 800a6f8:	eba3 0309 	sub.w	r3, r3, r9
 800a6fc:	4543      	cmp	r3, r8
 800a6fe:	f77f af79 	ble.w	800a5f4 <_printf_float+0x23c>
 800a702:	2301      	movs	r3, #1
 800a704:	465a      	mov	r2, fp
 800a706:	4631      	mov	r1, r6
 800a708:	4628      	mov	r0, r5
 800a70a:	47b8      	blx	r7
 800a70c:	3001      	adds	r0, #1
 800a70e:	f43f aeae 	beq.w	800a46e <_printf_float+0xb6>
 800a712:	f108 0801 	add.w	r8, r8, #1
 800a716:	e7ec      	b.n	800a6f2 <_printf_float+0x33a>
 800a718:	4642      	mov	r2, r8
 800a71a:	4631      	mov	r1, r6
 800a71c:	4628      	mov	r0, r5
 800a71e:	47b8      	blx	r7
 800a720:	3001      	adds	r0, #1
 800a722:	d1c2      	bne.n	800a6aa <_printf_float+0x2f2>
 800a724:	e6a3      	b.n	800a46e <_printf_float+0xb6>
 800a726:	2301      	movs	r3, #1
 800a728:	4631      	mov	r1, r6
 800a72a:	4628      	mov	r0, r5
 800a72c:	9206      	str	r2, [sp, #24]
 800a72e:	47b8      	blx	r7
 800a730:	3001      	adds	r0, #1
 800a732:	f43f ae9c 	beq.w	800a46e <_printf_float+0xb6>
 800a736:	9a06      	ldr	r2, [sp, #24]
 800a738:	f10b 0b01 	add.w	fp, fp, #1
 800a73c:	e7bb      	b.n	800a6b6 <_printf_float+0x2fe>
 800a73e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a742:	4631      	mov	r1, r6
 800a744:	4628      	mov	r0, r5
 800a746:	47b8      	blx	r7
 800a748:	3001      	adds	r0, #1
 800a74a:	d1c0      	bne.n	800a6ce <_printf_float+0x316>
 800a74c:	e68f      	b.n	800a46e <_printf_float+0xb6>
 800a74e:	9a06      	ldr	r2, [sp, #24]
 800a750:	464b      	mov	r3, r9
 800a752:	4442      	add	r2, r8
 800a754:	4631      	mov	r1, r6
 800a756:	4628      	mov	r0, r5
 800a758:	47b8      	blx	r7
 800a75a:	3001      	adds	r0, #1
 800a75c:	d1c3      	bne.n	800a6e6 <_printf_float+0x32e>
 800a75e:	e686      	b.n	800a46e <_printf_float+0xb6>
 800a760:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a764:	f1ba 0f01 	cmp.w	sl, #1
 800a768:	dc01      	bgt.n	800a76e <_printf_float+0x3b6>
 800a76a:	07db      	lsls	r3, r3, #31
 800a76c:	d536      	bpl.n	800a7dc <_printf_float+0x424>
 800a76e:	2301      	movs	r3, #1
 800a770:	4642      	mov	r2, r8
 800a772:	4631      	mov	r1, r6
 800a774:	4628      	mov	r0, r5
 800a776:	47b8      	blx	r7
 800a778:	3001      	adds	r0, #1
 800a77a:	f43f ae78 	beq.w	800a46e <_printf_float+0xb6>
 800a77e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a782:	4631      	mov	r1, r6
 800a784:	4628      	mov	r0, r5
 800a786:	47b8      	blx	r7
 800a788:	3001      	adds	r0, #1
 800a78a:	f43f ae70 	beq.w	800a46e <_printf_float+0xb6>
 800a78e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a792:	2200      	movs	r2, #0
 800a794:	2300      	movs	r3, #0
 800a796:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800a79a:	f7f6 f995 	bl	8000ac8 <__aeabi_dcmpeq>
 800a79e:	b9c0      	cbnz	r0, 800a7d2 <_printf_float+0x41a>
 800a7a0:	4653      	mov	r3, sl
 800a7a2:	f108 0201 	add.w	r2, r8, #1
 800a7a6:	4631      	mov	r1, r6
 800a7a8:	4628      	mov	r0, r5
 800a7aa:	47b8      	blx	r7
 800a7ac:	3001      	adds	r0, #1
 800a7ae:	d10c      	bne.n	800a7ca <_printf_float+0x412>
 800a7b0:	e65d      	b.n	800a46e <_printf_float+0xb6>
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	465a      	mov	r2, fp
 800a7b6:	4631      	mov	r1, r6
 800a7b8:	4628      	mov	r0, r5
 800a7ba:	47b8      	blx	r7
 800a7bc:	3001      	adds	r0, #1
 800a7be:	f43f ae56 	beq.w	800a46e <_printf_float+0xb6>
 800a7c2:	f108 0801 	add.w	r8, r8, #1
 800a7c6:	45d0      	cmp	r8, sl
 800a7c8:	dbf3      	blt.n	800a7b2 <_printf_float+0x3fa>
 800a7ca:	464b      	mov	r3, r9
 800a7cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a7d0:	e6df      	b.n	800a592 <_printf_float+0x1da>
 800a7d2:	f04f 0800 	mov.w	r8, #0
 800a7d6:	f104 0b1a 	add.w	fp, r4, #26
 800a7da:	e7f4      	b.n	800a7c6 <_printf_float+0x40e>
 800a7dc:	2301      	movs	r3, #1
 800a7de:	4642      	mov	r2, r8
 800a7e0:	e7e1      	b.n	800a7a6 <_printf_float+0x3ee>
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	464a      	mov	r2, r9
 800a7e6:	4631      	mov	r1, r6
 800a7e8:	4628      	mov	r0, r5
 800a7ea:	47b8      	blx	r7
 800a7ec:	3001      	adds	r0, #1
 800a7ee:	f43f ae3e 	beq.w	800a46e <_printf_float+0xb6>
 800a7f2:	f108 0801 	add.w	r8, r8, #1
 800a7f6:	68e3      	ldr	r3, [r4, #12]
 800a7f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a7fa:	1a5b      	subs	r3, r3, r1
 800a7fc:	4543      	cmp	r3, r8
 800a7fe:	dcf0      	bgt.n	800a7e2 <_printf_float+0x42a>
 800a800:	e6fc      	b.n	800a5fc <_printf_float+0x244>
 800a802:	f04f 0800 	mov.w	r8, #0
 800a806:	f104 0919 	add.w	r9, r4, #25
 800a80a:	e7f4      	b.n	800a7f6 <_printf_float+0x43e>

0800a80c <_printf_common>:
 800a80c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a810:	4616      	mov	r6, r2
 800a812:	4698      	mov	r8, r3
 800a814:	688a      	ldr	r2, [r1, #8]
 800a816:	690b      	ldr	r3, [r1, #16]
 800a818:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a81c:	4293      	cmp	r3, r2
 800a81e:	bfb8      	it	lt
 800a820:	4613      	movlt	r3, r2
 800a822:	6033      	str	r3, [r6, #0]
 800a824:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a828:	4607      	mov	r7, r0
 800a82a:	460c      	mov	r4, r1
 800a82c:	b10a      	cbz	r2, 800a832 <_printf_common+0x26>
 800a82e:	3301      	adds	r3, #1
 800a830:	6033      	str	r3, [r6, #0]
 800a832:	6823      	ldr	r3, [r4, #0]
 800a834:	0699      	lsls	r1, r3, #26
 800a836:	bf42      	ittt	mi
 800a838:	6833      	ldrmi	r3, [r6, #0]
 800a83a:	3302      	addmi	r3, #2
 800a83c:	6033      	strmi	r3, [r6, #0]
 800a83e:	6825      	ldr	r5, [r4, #0]
 800a840:	f015 0506 	ands.w	r5, r5, #6
 800a844:	d106      	bne.n	800a854 <_printf_common+0x48>
 800a846:	f104 0a19 	add.w	sl, r4, #25
 800a84a:	68e3      	ldr	r3, [r4, #12]
 800a84c:	6832      	ldr	r2, [r6, #0]
 800a84e:	1a9b      	subs	r3, r3, r2
 800a850:	42ab      	cmp	r3, r5
 800a852:	dc26      	bgt.n	800a8a2 <_printf_common+0x96>
 800a854:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a858:	6822      	ldr	r2, [r4, #0]
 800a85a:	3b00      	subs	r3, #0
 800a85c:	bf18      	it	ne
 800a85e:	2301      	movne	r3, #1
 800a860:	0692      	lsls	r2, r2, #26
 800a862:	d42b      	bmi.n	800a8bc <_printf_common+0xb0>
 800a864:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a868:	4641      	mov	r1, r8
 800a86a:	4638      	mov	r0, r7
 800a86c:	47c8      	blx	r9
 800a86e:	3001      	adds	r0, #1
 800a870:	d01e      	beq.n	800a8b0 <_printf_common+0xa4>
 800a872:	6823      	ldr	r3, [r4, #0]
 800a874:	6922      	ldr	r2, [r4, #16]
 800a876:	f003 0306 	and.w	r3, r3, #6
 800a87a:	2b04      	cmp	r3, #4
 800a87c:	bf02      	ittt	eq
 800a87e:	68e5      	ldreq	r5, [r4, #12]
 800a880:	6833      	ldreq	r3, [r6, #0]
 800a882:	1aed      	subeq	r5, r5, r3
 800a884:	68a3      	ldr	r3, [r4, #8]
 800a886:	bf0c      	ite	eq
 800a888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a88c:	2500      	movne	r5, #0
 800a88e:	4293      	cmp	r3, r2
 800a890:	bfc4      	itt	gt
 800a892:	1a9b      	subgt	r3, r3, r2
 800a894:	18ed      	addgt	r5, r5, r3
 800a896:	2600      	movs	r6, #0
 800a898:	341a      	adds	r4, #26
 800a89a:	42b5      	cmp	r5, r6
 800a89c:	d11a      	bne.n	800a8d4 <_printf_common+0xc8>
 800a89e:	2000      	movs	r0, #0
 800a8a0:	e008      	b.n	800a8b4 <_printf_common+0xa8>
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	4652      	mov	r2, sl
 800a8a6:	4641      	mov	r1, r8
 800a8a8:	4638      	mov	r0, r7
 800a8aa:	47c8      	blx	r9
 800a8ac:	3001      	adds	r0, #1
 800a8ae:	d103      	bne.n	800a8b8 <_printf_common+0xac>
 800a8b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a8b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8b8:	3501      	adds	r5, #1
 800a8ba:	e7c6      	b.n	800a84a <_printf_common+0x3e>
 800a8bc:	18e1      	adds	r1, r4, r3
 800a8be:	1c5a      	adds	r2, r3, #1
 800a8c0:	2030      	movs	r0, #48	@ 0x30
 800a8c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a8c6:	4422      	add	r2, r4
 800a8c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a8cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a8d0:	3302      	adds	r3, #2
 800a8d2:	e7c7      	b.n	800a864 <_printf_common+0x58>
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	4622      	mov	r2, r4
 800a8d8:	4641      	mov	r1, r8
 800a8da:	4638      	mov	r0, r7
 800a8dc:	47c8      	blx	r9
 800a8de:	3001      	adds	r0, #1
 800a8e0:	d0e6      	beq.n	800a8b0 <_printf_common+0xa4>
 800a8e2:	3601      	adds	r6, #1
 800a8e4:	e7d9      	b.n	800a89a <_printf_common+0x8e>
	...

0800a8e8 <_printf_i>:
 800a8e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ec:	7e0f      	ldrb	r7, [r1, #24]
 800a8ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a8f0:	2f78      	cmp	r7, #120	@ 0x78
 800a8f2:	4691      	mov	r9, r2
 800a8f4:	4680      	mov	r8, r0
 800a8f6:	460c      	mov	r4, r1
 800a8f8:	469a      	mov	sl, r3
 800a8fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a8fe:	d807      	bhi.n	800a910 <_printf_i+0x28>
 800a900:	2f62      	cmp	r7, #98	@ 0x62
 800a902:	d80a      	bhi.n	800a91a <_printf_i+0x32>
 800a904:	2f00      	cmp	r7, #0
 800a906:	f000 80d2 	beq.w	800aaae <_printf_i+0x1c6>
 800a90a:	2f58      	cmp	r7, #88	@ 0x58
 800a90c:	f000 80b9 	beq.w	800aa82 <_printf_i+0x19a>
 800a910:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a914:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a918:	e03a      	b.n	800a990 <_printf_i+0xa8>
 800a91a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a91e:	2b15      	cmp	r3, #21
 800a920:	d8f6      	bhi.n	800a910 <_printf_i+0x28>
 800a922:	a101      	add	r1, pc, #4	@ (adr r1, 800a928 <_printf_i+0x40>)
 800a924:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a928:	0800a981 	.word	0x0800a981
 800a92c:	0800a995 	.word	0x0800a995
 800a930:	0800a911 	.word	0x0800a911
 800a934:	0800a911 	.word	0x0800a911
 800a938:	0800a911 	.word	0x0800a911
 800a93c:	0800a911 	.word	0x0800a911
 800a940:	0800a995 	.word	0x0800a995
 800a944:	0800a911 	.word	0x0800a911
 800a948:	0800a911 	.word	0x0800a911
 800a94c:	0800a911 	.word	0x0800a911
 800a950:	0800a911 	.word	0x0800a911
 800a954:	0800aa95 	.word	0x0800aa95
 800a958:	0800a9bf 	.word	0x0800a9bf
 800a95c:	0800aa4f 	.word	0x0800aa4f
 800a960:	0800a911 	.word	0x0800a911
 800a964:	0800a911 	.word	0x0800a911
 800a968:	0800aab7 	.word	0x0800aab7
 800a96c:	0800a911 	.word	0x0800a911
 800a970:	0800a9bf 	.word	0x0800a9bf
 800a974:	0800a911 	.word	0x0800a911
 800a978:	0800a911 	.word	0x0800a911
 800a97c:	0800aa57 	.word	0x0800aa57
 800a980:	6833      	ldr	r3, [r6, #0]
 800a982:	1d1a      	adds	r2, r3, #4
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	6032      	str	r2, [r6, #0]
 800a988:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a98c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a990:	2301      	movs	r3, #1
 800a992:	e09d      	b.n	800aad0 <_printf_i+0x1e8>
 800a994:	6833      	ldr	r3, [r6, #0]
 800a996:	6820      	ldr	r0, [r4, #0]
 800a998:	1d19      	adds	r1, r3, #4
 800a99a:	6031      	str	r1, [r6, #0]
 800a99c:	0606      	lsls	r6, r0, #24
 800a99e:	d501      	bpl.n	800a9a4 <_printf_i+0xbc>
 800a9a0:	681d      	ldr	r5, [r3, #0]
 800a9a2:	e003      	b.n	800a9ac <_printf_i+0xc4>
 800a9a4:	0645      	lsls	r5, r0, #25
 800a9a6:	d5fb      	bpl.n	800a9a0 <_printf_i+0xb8>
 800a9a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a9ac:	2d00      	cmp	r5, #0
 800a9ae:	da03      	bge.n	800a9b8 <_printf_i+0xd0>
 800a9b0:	232d      	movs	r3, #45	@ 0x2d
 800a9b2:	426d      	negs	r5, r5
 800a9b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a9b8:	4859      	ldr	r0, [pc, #356]	@ (800ab20 <_printf_i+0x238>)
 800a9ba:	230a      	movs	r3, #10
 800a9bc:	e011      	b.n	800a9e2 <_printf_i+0xfa>
 800a9be:	6821      	ldr	r1, [r4, #0]
 800a9c0:	6833      	ldr	r3, [r6, #0]
 800a9c2:	0608      	lsls	r0, r1, #24
 800a9c4:	f853 5b04 	ldr.w	r5, [r3], #4
 800a9c8:	d402      	bmi.n	800a9d0 <_printf_i+0xe8>
 800a9ca:	0649      	lsls	r1, r1, #25
 800a9cc:	bf48      	it	mi
 800a9ce:	b2ad      	uxthmi	r5, r5
 800a9d0:	2f6f      	cmp	r7, #111	@ 0x6f
 800a9d2:	4853      	ldr	r0, [pc, #332]	@ (800ab20 <_printf_i+0x238>)
 800a9d4:	6033      	str	r3, [r6, #0]
 800a9d6:	bf14      	ite	ne
 800a9d8:	230a      	movne	r3, #10
 800a9da:	2308      	moveq	r3, #8
 800a9dc:	2100      	movs	r1, #0
 800a9de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a9e2:	6866      	ldr	r6, [r4, #4]
 800a9e4:	60a6      	str	r6, [r4, #8]
 800a9e6:	2e00      	cmp	r6, #0
 800a9e8:	bfa2      	ittt	ge
 800a9ea:	6821      	ldrge	r1, [r4, #0]
 800a9ec:	f021 0104 	bicge.w	r1, r1, #4
 800a9f0:	6021      	strge	r1, [r4, #0]
 800a9f2:	b90d      	cbnz	r5, 800a9f8 <_printf_i+0x110>
 800a9f4:	2e00      	cmp	r6, #0
 800a9f6:	d04b      	beq.n	800aa90 <_printf_i+0x1a8>
 800a9f8:	4616      	mov	r6, r2
 800a9fa:	fbb5 f1f3 	udiv	r1, r5, r3
 800a9fe:	fb03 5711 	mls	r7, r3, r1, r5
 800aa02:	5dc7      	ldrb	r7, [r0, r7]
 800aa04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800aa08:	462f      	mov	r7, r5
 800aa0a:	42bb      	cmp	r3, r7
 800aa0c:	460d      	mov	r5, r1
 800aa0e:	d9f4      	bls.n	800a9fa <_printf_i+0x112>
 800aa10:	2b08      	cmp	r3, #8
 800aa12:	d10b      	bne.n	800aa2c <_printf_i+0x144>
 800aa14:	6823      	ldr	r3, [r4, #0]
 800aa16:	07df      	lsls	r7, r3, #31
 800aa18:	d508      	bpl.n	800aa2c <_printf_i+0x144>
 800aa1a:	6923      	ldr	r3, [r4, #16]
 800aa1c:	6861      	ldr	r1, [r4, #4]
 800aa1e:	4299      	cmp	r1, r3
 800aa20:	bfde      	ittt	le
 800aa22:	2330      	movle	r3, #48	@ 0x30
 800aa24:	f806 3c01 	strble.w	r3, [r6, #-1]
 800aa28:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800aa2c:	1b92      	subs	r2, r2, r6
 800aa2e:	6122      	str	r2, [r4, #16]
 800aa30:	f8cd a000 	str.w	sl, [sp]
 800aa34:	464b      	mov	r3, r9
 800aa36:	aa03      	add	r2, sp, #12
 800aa38:	4621      	mov	r1, r4
 800aa3a:	4640      	mov	r0, r8
 800aa3c:	f7ff fee6 	bl	800a80c <_printf_common>
 800aa40:	3001      	adds	r0, #1
 800aa42:	d14a      	bne.n	800aada <_printf_i+0x1f2>
 800aa44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aa48:	b004      	add	sp, #16
 800aa4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa4e:	6823      	ldr	r3, [r4, #0]
 800aa50:	f043 0320 	orr.w	r3, r3, #32
 800aa54:	6023      	str	r3, [r4, #0]
 800aa56:	4833      	ldr	r0, [pc, #204]	@ (800ab24 <_printf_i+0x23c>)
 800aa58:	2778      	movs	r7, #120	@ 0x78
 800aa5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800aa5e:	6823      	ldr	r3, [r4, #0]
 800aa60:	6831      	ldr	r1, [r6, #0]
 800aa62:	061f      	lsls	r7, r3, #24
 800aa64:	f851 5b04 	ldr.w	r5, [r1], #4
 800aa68:	d402      	bmi.n	800aa70 <_printf_i+0x188>
 800aa6a:	065f      	lsls	r7, r3, #25
 800aa6c:	bf48      	it	mi
 800aa6e:	b2ad      	uxthmi	r5, r5
 800aa70:	6031      	str	r1, [r6, #0]
 800aa72:	07d9      	lsls	r1, r3, #31
 800aa74:	bf44      	itt	mi
 800aa76:	f043 0320 	orrmi.w	r3, r3, #32
 800aa7a:	6023      	strmi	r3, [r4, #0]
 800aa7c:	b11d      	cbz	r5, 800aa86 <_printf_i+0x19e>
 800aa7e:	2310      	movs	r3, #16
 800aa80:	e7ac      	b.n	800a9dc <_printf_i+0xf4>
 800aa82:	4827      	ldr	r0, [pc, #156]	@ (800ab20 <_printf_i+0x238>)
 800aa84:	e7e9      	b.n	800aa5a <_printf_i+0x172>
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	f023 0320 	bic.w	r3, r3, #32
 800aa8c:	6023      	str	r3, [r4, #0]
 800aa8e:	e7f6      	b.n	800aa7e <_printf_i+0x196>
 800aa90:	4616      	mov	r6, r2
 800aa92:	e7bd      	b.n	800aa10 <_printf_i+0x128>
 800aa94:	6833      	ldr	r3, [r6, #0]
 800aa96:	6825      	ldr	r5, [r4, #0]
 800aa98:	6961      	ldr	r1, [r4, #20]
 800aa9a:	1d18      	adds	r0, r3, #4
 800aa9c:	6030      	str	r0, [r6, #0]
 800aa9e:	062e      	lsls	r6, r5, #24
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	d501      	bpl.n	800aaa8 <_printf_i+0x1c0>
 800aaa4:	6019      	str	r1, [r3, #0]
 800aaa6:	e002      	b.n	800aaae <_printf_i+0x1c6>
 800aaa8:	0668      	lsls	r0, r5, #25
 800aaaa:	d5fb      	bpl.n	800aaa4 <_printf_i+0x1bc>
 800aaac:	8019      	strh	r1, [r3, #0]
 800aaae:	2300      	movs	r3, #0
 800aab0:	6123      	str	r3, [r4, #16]
 800aab2:	4616      	mov	r6, r2
 800aab4:	e7bc      	b.n	800aa30 <_printf_i+0x148>
 800aab6:	6833      	ldr	r3, [r6, #0]
 800aab8:	1d1a      	adds	r2, r3, #4
 800aaba:	6032      	str	r2, [r6, #0]
 800aabc:	681e      	ldr	r6, [r3, #0]
 800aabe:	6862      	ldr	r2, [r4, #4]
 800aac0:	2100      	movs	r1, #0
 800aac2:	4630      	mov	r0, r6
 800aac4:	f7f5 fb84 	bl	80001d0 <memchr>
 800aac8:	b108      	cbz	r0, 800aace <_printf_i+0x1e6>
 800aaca:	1b80      	subs	r0, r0, r6
 800aacc:	6060      	str	r0, [r4, #4]
 800aace:	6863      	ldr	r3, [r4, #4]
 800aad0:	6123      	str	r3, [r4, #16]
 800aad2:	2300      	movs	r3, #0
 800aad4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aad8:	e7aa      	b.n	800aa30 <_printf_i+0x148>
 800aada:	6923      	ldr	r3, [r4, #16]
 800aadc:	4632      	mov	r2, r6
 800aade:	4649      	mov	r1, r9
 800aae0:	4640      	mov	r0, r8
 800aae2:	47d0      	blx	sl
 800aae4:	3001      	adds	r0, #1
 800aae6:	d0ad      	beq.n	800aa44 <_printf_i+0x15c>
 800aae8:	6823      	ldr	r3, [r4, #0]
 800aaea:	079b      	lsls	r3, r3, #30
 800aaec:	d413      	bmi.n	800ab16 <_printf_i+0x22e>
 800aaee:	68e0      	ldr	r0, [r4, #12]
 800aaf0:	9b03      	ldr	r3, [sp, #12]
 800aaf2:	4298      	cmp	r0, r3
 800aaf4:	bfb8      	it	lt
 800aaf6:	4618      	movlt	r0, r3
 800aaf8:	e7a6      	b.n	800aa48 <_printf_i+0x160>
 800aafa:	2301      	movs	r3, #1
 800aafc:	4632      	mov	r2, r6
 800aafe:	4649      	mov	r1, r9
 800ab00:	4640      	mov	r0, r8
 800ab02:	47d0      	blx	sl
 800ab04:	3001      	adds	r0, #1
 800ab06:	d09d      	beq.n	800aa44 <_printf_i+0x15c>
 800ab08:	3501      	adds	r5, #1
 800ab0a:	68e3      	ldr	r3, [r4, #12]
 800ab0c:	9903      	ldr	r1, [sp, #12]
 800ab0e:	1a5b      	subs	r3, r3, r1
 800ab10:	42ab      	cmp	r3, r5
 800ab12:	dcf2      	bgt.n	800aafa <_printf_i+0x212>
 800ab14:	e7eb      	b.n	800aaee <_printf_i+0x206>
 800ab16:	2500      	movs	r5, #0
 800ab18:	f104 0619 	add.w	r6, r4, #25
 800ab1c:	e7f5      	b.n	800ab0a <_printf_i+0x222>
 800ab1e:	bf00      	nop
 800ab20:	0800d022 	.word	0x0800d022
 800ab24:	0800d033 	.word	0x0800d033

0800ab28 <siprintf>:
 800ab28:	b40e      	push	{r1, r2, r3}
 800ab2a:	b500      	push	{lr}
 800ab2c:	b09c      	sub	sp, #112	@ 0x70
 800ab2e:	ab1d      	add	r3, sp, #116	@ 0x74
 800ab30:	9002      	str	r0, [sp, #8]
 800ab32:	9006      	str	r0, [sp, #24]
 800ab34:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ab38:	4809      	ldr	r0, [pc, #36]	@ (800ab60 <siprintf+0x38>)
 800ab3a:	9107      	str	r1, [sp, #28]
 800ab3c:	9104      	str	r1, [sp, #16]
 800ab3e:	4909      	ldr	r1, [pc, #36]	@ (800ab64 <siprintf+0x3c>)
 800ab40:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab44:	9105      	str	r1, [sp, #20]
 800ab46:	6800      	ldr	r0, [r0, #0]
 800ab48:	9301      	str	r3, [sp, #4]
 800ab4a:	a902      	add	r1, sp, #8
 800ab4c:	f000 ffb0 	bl	800bab0 <_svfiprintf_r>
 800ab50:	9b02      	ldr	r3, [sp, #8]
 800ab52:	2200      	movs	r2, #0
 800ab54:	701a      	strb	r2, [r3, #0]
 800ab56:	b01c      	add	sp, #112	@ 0x70
 800ab58:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab5c:	b003      	add	sp, #12
 800ab5e:	4770      	bx	lr
 800ab60:	20000114 	.word	0x20000114
 800ab64:	ffff0208 	.word	0xffff0208

0800ab68 <std>:
 800ab68:	2300      	movs	r3, #0
 800ab6a:	b510      	push	{r4, lr}
 800ab6c:	4604      	mov	r4, r0
 800ab6e:	e9c0 3300 	strd	r3, r3, [r0]
 800ab72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab76:	6083      	str	r3, [r0, #8]
 800ab78:	8181      	strh	r1, [r0, #12]
 800ab7a:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab7c:	81c2      	strh	r2, [r0, #14]
 800ab7e:	6183      	str	r3, [r0, #24]
 800ab80:	4619      	mov	r1, r3
 800ab82:	2208      	movs	r2, #8
 800ab84:	305c      	adds	r0, #92	@ 0x5c
 800ab86:	f000 f8b1 	bl	800acec <memset>
 800ab8a:	4b0d      	ldr	r3, [pc, #52]	@ (800abc0 <std+0x58>)
 800ab8c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab8e:	4b0d      	ldr	r3, [pc, #52]	@ (800abc4 <std+0x5c>)
 800ab90:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab92:	4b0d      	ldr	r3, [pc, #52]	@ (800abc8 <std+0x60>)
 800ab94:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ab96:	4b0d      	ldr	r3, [pc, #52]	@ (800abcc <std+0x64>)
 800ab98:	6323      	str	r3, [r4, #48]	@ 0x30
 800ab9a:	4b0d      	ldr	r3, [pc, #52]	@ (800abd0 <std+0x68>)
 800ab9c:	6224      	str	r4, [r4, #32]
 800ab9e:	429c      	cmp	r4, r3
 800aba0:	d006      	beq.n	800abb0 <std+0x48>
 800aba2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aba6:	4294      	cmp	r4, r2
 800aba8:	d002      	beq.n	800abb0 <std+0x48>
 800abaa:	33d0      	adds	r3, #208	@ 0xd0
 800abac:	429c      	cmp	r4, r3
 800abae:	d105      	bne.n	800abbc <std+0x54>
 800abb0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800abb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abb8:	f000 b8ce 	b.w	800ad58 <__retarget_lock_init_recursive>
 800abbc:	bd10      	pop	{r4, pc}
 800abbe:	bf00      	nop
 800abc0:	0800c671 	.word	0x0800c671
 800abc4:	0800c693 	.word	0x0800c693
 800abc8:	0800c6cb 	.word	0x0800c6cb
 800abcc:	0800c6ef 	.word	0x0800c6ef
 800abd0:	200021a8 	.word	0x200021a8

0800abd4 <stdio_exit_handler>:
 800abd4:	4a02      	ldr	r2, [pc, #8]	@ (800abe0 <stdio_exit_handler+0xc>)
 800abd6:	4903      	ldr	r1, [pc, #12]	@ (800abe4 <stdio_exit_handler+0x10>)
 800abd8:	4803      	ldr	r0, [pc, #12]	@ (800abe8 <stdio_exit_handler+0x14>)
 800abda:	f000 b869 	b.w	800acb0 <_fwalk_sglue>
 800abde:	bf00      	nop
 800abe0:	20000108 	.word	0x20000108
 800abe4:	0800bf05 	.word	0x0800bf05
 800abe8:	20000118 	.word	0x20000118

0800abec <cleanup_stdio>:
 800abec:	6841      	ldr	r1, [r0, #4]
 800abee:	4b0c      	ldr	r3, [pc, #48]	@ (800ac20 <cleanup_stdio+0x34>)
 800abf0:	4299      	cmp	r1, r3
 800abf2:	b510      	push	{r4, lr}
 800abf4:	4604      	mov	r4, r0
 800abf6:	d001      	beq.n	800abfc <cleanup_stdio+0x10>
 800abf8:	f001 f984 	bl	800bf04 <_fflush_r>
 800abfc:	68a1      	ldr	r1, [r4, #8]
 800abfe:	4b09      	ldr	r3, [pc, #36]	@ (800ac24 <cleanup_stdio+0x38>)
 800ac00:	4299      	cmp	r1, r3
 800ac02:	d002      	beq.n	800ac0a <cleanup_stdio+0x1e>
 800ac04:	4620      	mov	r0, r4
 800ac06:	f001 f97d 	bl	800bf04 <_fflush_r>
 800ac0a:	68e1      	ldr	r1, [r4, #12]
 800ac0c:	4b06      	ldr	r3, [pc, #24]	@ (800ac28 <cleanup_stdio+0x3c>)
 800ac0e:	4299      	cmp	r1, r3
 800ac10:	d004      	beq.n	800ac1c <cleanup_stdio+0x30>
 800ac12:	4620      	mov	r0, r4
 800ac14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac18:	f001 b974 	b.w	800bf04 <_fflush_r>
 800ac1c:	bd10      	pop	{r4, pc}
 800ac1e:	bf00      	nop
 800ac20:	200021a8 	.word	0x200021a8
 800ac24:	20002210 	.word	0x20002210
 800ac28:	20002278 	.word	0x20002278

0800ac2c <global_stdio_init.part.0>:
 800ac2c:	b510      	push	{r4, lr}
 800ac2e:	4b0b      	ldr	r3, [pc, #44]	@ (800ac5c <global_stdio_init.part.0+0x30>)
 800ac30:	4c0b      	ldr	r4, [pc, #44]	@ (800ac60 <global_stdio_init.part.0+0x34>)
 800ac32:	4a0c      	ldr	r2, [pc, #48]	@ (800ac64 <global_stdio_init.part.0+0x38>)
 800ac34:	601a      	str	r2, [r3, #0]
 800ac36:	4620      	mov	r0, r4
 800ac38:	2200      	movs	r2, #0
 800ac3a:	2104      	movs	r1, #4
 800ac3c:	f7ff ff94 	bl	800ab68 <std>
 800ac40:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ac44:	2201      	movs	r2, #1
 800ac46:	2109      	movs	r1, #9
 800ac48:	f7ff ff8e 	bl	800ab68 <std>
 800ac4c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ac50:	2202      	movs	r2, #2
 800ac52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac56:	2112      	movs	r1, #18
 800ac58:	f7ff bf86 	b.w	800ab68 <std>
 800ac5c:	200022e0 	.word	0x200022e0
 800ac60:	200021a8 	.word	0x200021a8
 800ac64:	0800abd5 	.word	0x0800abd5

0800ac68 <__sfp_lock_acquire>:
 800ac68:	4801      	ldr	r0, [pc, #4]	@ (800ac70 <__sfp_lock_acquire+0x8>)
 800ac6a:	f000 b876 	b.w	800ad5a <__retarget_lock_acquire_recursive>
 800ac6e:	bf00      	nop
 800ac70:	200022e5 	.word	0x200022e5

0800ac74 <__sfp_lock_release>:
 800ac74:	4801      	ldr	r0, [pc, #4]	@ (800ac7c <__sfp_lock_release+0x8>)
 800ac76:	f000 b871 	b.w	800ad5c <__retarget_lock_release_recursive>
 800ac7a:	bf00      	nop
 800ac7c:	200022e5 	.word	0x200022e5

0800ac80 <__sinit>:
 800ac80:	b510      	push	{r4, lr}
 800ac82:	4604      	mov	r4, r0
 800ac84:	f7ff fff0 	bl	800ac68 <__sfp_lock_acquire>
 800ac88:	6a23      	ldr	r3, [r4, #32]
 800ac8a:	b11b      	cbz	r3, 800ac94 <__sinit+0x14>
 800ac8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac90:	f7ff bff0 	b.w	800ac74 <__sfp_lock_release>
 800ac94:	4b04      	ldr	r3, [pc, #16]	@ (800aca8 <__sinit+0x28>)
 800ac96:	6223      	str	r3, [r4, #32]
 800ac98:	4b04      	ldr	r3, [pc, #16]	@ (800acac <__sinit+0x2c>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d1f5      	bne.n	800ac8c <__sinit+0xc>
 800aca0:	f7ff ffc4 	bl	800ac2c <global_stdio_init.part.0>
 800aca4:	e7f2      	b.n	800ac8c <__sinit+0xc>
 800aca6:	bf00      	nop
 800aca8:	0800abed 	.word	0x0800abed
 800acac:	200022e0 	.word	0x200022e0

0800acb0 <_fwalk_sglue>:
 800acb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acb4:	4607      	mov	r7, r0
 800acb6:	4688      	mov	r8, r1
 800acb8:	4614      	mov	r4, r2
 800acba:	2600      	movs	r6, #0
 800acbc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800acc0:	f1b9 0901 	subs.w	r9, r9, #1
 800acc4:	d505      	bpl.n	800acd2 <_fwalk_sglue+0x22>
 800acc6:	6824      	ldr	r4, [r4, #0]
 800acc8:	2c00      	cmp	r4, #0
 800acca:	d1f7      	bne.n	800acbc <_fwalk_sglue+0xc>
 800accc:	4630      	mov	r0, r6
 800acce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acd2:	89ab      	ldrh	r3, [r5, #12]
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d907      	bls.n	800ace8 <_fwalk_sglue+0x38>
 800acd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800acdc:	3301      	adds	r3, #1
 800acde:	d003      	beq.n	800ace8 <_fwalk_sglue+0x38>
 800ace0:	4629      	mov	r1, r5
 800ace2:	4638      	mov	r0, r7
 800ace4:	47c0      	blx	r8
 800ace6:	4306      	orrs	r6, r0
 800ace8:	3568      	adds	r5, #104	@ 0x68
 800acea:	e7e9      	b.n	800acc0 <_fwalk_sglue+0x10>

0800acec <memset>:
 800acec:	4402      	add	r2, r0
 800acee:	4603      	mov	r3, r0
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d100      	bne.n	800acf6 <memset+0xa>
 800acf4:	4770      	bx	lr
 800acf6:	f803 1b01 	strb.w	r1, [r3], #1
 800acfa:	e7f9      	b.n	800acf0 <memset+0x4>

0800acfc <_localeconv_r>:
 800acfc:	4800      	ldr	r0, [pc, #0]	@ (800ad00 <_localeconv_r+0x4>)
 800acfe:	4770      	bx	lr
 800ad00:	20000254 	.word	0x20000254

0800ad04 <__errno>:
 800ad04:	4b01      	ldr	r3, [pc, #4]	@ (800ad0c <__errno+0x8>)
 800ad06:	6818      	ldr	r0, [r3, #0]
 800ad08:	4770      	bx	lr
 800ad0a:	bf00      	nop
 800ad0c:	20000114 	.word	0x20000114

0800ad10 <__libc_init_array>:
 800ad10:	b570      	push	{r4, r5, r6, lr}
 800ad12:	4d0d      	ldr	r5, [pc, #52]	@ (800ad48 <__libc_init_array+0x38>)
 800ad14:	4c0d      	ldr	r4, [pc, #52]	@ (800ad4c <__libc_init_array+0x3c>)
 800ad16:	1b64      	subs	r4, r4, r5
 800ad18:	10a4      	asrs	r4, r4, #2
 800ad1a:	2600      	movs	r6, #0
 800ad1c:	42a6      	cmp	r6, r4
 800ad1e:	d109      	bne.n	800ad34 <__libc_init_array+0x24>
 800ad20:	4d0b      	ldr	r5, [pc, #44]	@ (800ad50 <__libc_init_array+0x40>)
 800ad22:	4c0c      	ldr	r4, [pc, #48]	@ (800ad54 <__libc_init_array+0x44>)
 800ad24:	f002 f8ee 	bl	800cf04 <_init>
 800ad28:	1b64      	subs	r4, r4, r5
 800ad2a:	10a4      	asrs	r4, r4, #2
 800ad2c:	2600      	movs	r6, #0
 800ad2e:	42a6      	cmp	r6, r4
 800ad30:	d105      	bne.n	800ad3e <__libc_init_array+0x2e>
 800ad32:	bd70      	pop	{r4, r5, r6, pc}
 800ad34:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad38:	4798      	blx	r3
 800ad3a:	3601      	adds	r6, #1
 800ad3c:	e7ee      	b.n	800ad1c <__libc_init_array+0xc>
 800ad3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad42:	4798      	blx	r3
 800ad44:	3601      	adds	r6, #1
 800ad46:	e7f2      	b.n	800ad2e <__libc_init_array+0x1e>
 800ad48:	0800d388 	.word	0x0800d388
 800ad4c:	0800d388 	.word	0x0800d388
 800ad50:	0800d388 	.word	0x0800d388
 800ad54:	0800d38c 	.word	0x0800d38c

0800ad58 <__retarget_lock_init_recursive>:
 800ad58:	4770      	bx	lr

0800ad5a <__retarget_lock_acquire_recursive>:
 800ad5a:	4770      	bx	lr

0800ad5c <__retarget_lock_release_recursive>:
 800ad5c:	4770      	bx	lr

0800ad5e <quorem>:
 800ad5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad62:	6903      	ldr	r3, [r0, #16]
 800ad64:	690c      	ldr	r4, [r1, #16]
 800ad66:	42a3      	cmp	r3, r4
 800ad68:	4607      	mov	r7, r0
 800ad6a:	db7e      	blt.n	800ae6a <quorem+0x10c>
 800ad6c:	3c01      	subs	r4, #1
 800ad6e:	f101 0814 	add.w	r8, r1, #20
 800ad72:	00a3      	lsls	r3, r4, #2
 800ad74:	f100 0514 	add.w	r5, r0, #20
 800ad78:	9300      	str	r3, [sp, #0]
 800ad7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ad7e:	9301      	str	r3, [sp, #4]
 800ad80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ad84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ad88:	3301      	adds	r3, #1
 800ad8a:	429a      	cmp	r2, r3
 800ad8c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ad90:	fbb2 f6f3 	udiv	r6, r2, r3
 800ad94:	d32e      	bcc.n	800adf4 <quorem+0x96>
 800ad96:	f04f 0a00 	mov.w	sl, #0
 800ad9a:	46c4      	mov	ip, r8
 800ad9c:	46ae      	mov	lr, r5
 800ad9e:	46d3      	mov	fp, sl
 800ada0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ada4:	b298      	uxth	r0, r3
 800ada6:	fb06 a000 	mla	r0, r6, r0, sl
 800adaa:	0c02      	lsrs	r2, r0, #16
 800adac:	0c1b      	lsrs	r3, r3, #16
 800adae:	fb06 2303 	mla	r3, r6, r3, r2
 800adb2:	f8de 2000 	ldr.w	r2, [lr]
 800adb6:	b280      	uxth	r0, r0
 800adb8:	b292      	uxth	r2, r2
 800adba:	1a12      	subs	r2, r2, r0
 800adbc:	445a      	add	r2, fp
 800adbe:	f8de 0000 	ldr.w	r0, [lr]
 800adc2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800adcc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800add0:	b292      	uxth	r2, r2
 800add2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800add6:	45e1      	cmp	r9, ip
 800add8:	f84e 2b04 	str.w	r2, [lr], #4
 800addc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ade0:	d2de      	bcs.n	800ada0 <quorem+0x42>
 800ade2:	9b00      	ldr	r3, [sp, #0]
 800ade4:	58eb      	ldr	r3, [r5, r3]
 800ade6:	b92b      	cbnz	r3, 800adf4 <quorem+0x96>
 800ade8:	9b01      	ldr	r3, [sp, #4]
 800adea:	3b04      	subs	r3, #4
 800adec:	429d      	cmp	r5, r3
 800adee:	461a      	mov	r2, r3
 800adf0:	d32f      	bcc.n	800ae52 <quorem+0xf4>
 800adf2:	613c      	str	r4, [r7, #16]
 800adf4:	4638      	mov	r0, r7
 800adf6:	f001 fb33 	bl	800c460 <__mcmp>
 800adfa:	2800      	cmp	r0, #0
 800adfc:	db25      	blt.n	800ae4a <quorem+0xec>
 800adfe:	4629      	mov	r1, r5
 800ae00:	2000      	movs	r0, #0
 800ae02:	f858 2b04 	ldr.w	r2, [r8], #4
 800ae06:	f8d1 c000 	ldr.w	ip, [r1]
 800ae0a:	fa1f fe82 	uxth.w	lr, r2
 800ae0e:	fa1f f38c 	uxth.w	r3, ip
 800ae12:	eba3 030e 	sub.w	r3, r3, lr
 800ae16:	4403      	add	r3, r0
 800ae18:	0c12      	lsrs	r2, r2, #16
 800ae1a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800ae1e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae28:	45c1      	cmp	r9, r8
 800ae2a:	f841 3b04 	str.w	r3, [r1], #4
 800ae2e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ae32:	d2e6      	bcs.n	800ae02 <quorem+0xa4>
 800ae34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae3c:	b922      	cbnz	r2, 800ae48 <quorem+0xea>
 800ae3e:	3b04      	subs	r3, #4
 800ae40:	429d      	cmp	r5, r3
 800ae42:	461a      	mov	r2, r3
 800ae44:	d30b      	bcc.n	800ae5e <quorem+0x100>
 800ae46:	613c      	str	r4, [r7, #16]
 800ae48:	3601      	adds	r6, #1
 800ae4a:	4630      	mov	r0, r6
 800ae4c:	b003      	add	sp, #12
 800ae4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae52:	6812      	ldr	r2, [r2, #0]
 800ae54:	3b04      	subs	r3, #4
 800ae56:	2a00      	cmp	r2, #0
 800ae58:	d1cb      	bne.n	800adf2 <quorem+0x94>
 800ae5a:	3c01      	subs	r4, #1
 800ae5c:	e7c6      	b.n	800adec <quorem+0x8e>
 800ae5e:	6812      	ldr	r2, [r2, #0]
 800ae60:	3b04      	subs	r3, #4
 800ae62:	2a00      	cmp	r2, #0
 800ae64:	d1ef      	bne.n	800ae46 <quorem+0xe8>
 800ae66:	3c01      	subs	r4, #1
 800ae68:	e7ea      	b.n	800ae40 <quorem+0xe2>
 800ae6a:	2000      	movs	r0, #0
 800ae6c:	e7ee      	b.n	800ae4c <quorem+0xee>
	...

0800ae70 <_dtoa_r>:
 800ae70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae74:	69c7      	ldr	r7, [r0, #28]
 800ae76:	b099      	sub	sp, #100	@ 0x64
 800ae78:	ed8d 0b02 	vstr	d0, [sp, #8]
 800ae7c:	ec55 4b10 	vmov	r4, r5, d0
 800ae80:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800ae82:	9109      	str	r1, [sp, #36]	@ 0x24
 800ae84:	4683      	mov	fp, r0
 800ae86:	920e      	str	r2, [sp, #56]	@ 0x38
 800ae88:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ae8a:	b97f      	cbnz	r7, 800aeac <_dtoa_r+0x3c>
 800ae8c:	2010      	movs	r0, #16
 800ae8e:	f000 ff0b 	bl	800bca8 <malloc>
 800ae92:	4602      	mov	r2, r0
 800ae94:	f8cb 001c 	str.w	r0, [fp, #28]
 800ae98:	b920      	cbnz	r0, 800aea4 <_dtoa_r+0x34>
 800ae9a:	4ba7      	ldr	r3, [pc, #668]	@ (800b138 <_dtoa_r+0x2c8>)
 800ae9c:	21ef      	movs	r1, #239	@ 0xef
 800ae9e:	48a7      	ldr	r0, [pc, #668]	@ (800b13c <_dtoa_r+0x2cc>)
 800aea0:	f001 fcd6 	bl	800c850 <__assert_func>
 800aea4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aea8:	6007      	str	r7, [r0, #0]
 800aeaa:	60c7      	str	r7, [r0, #12]
 800aeac:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aeb0:	6819      	ldr	r1, [r3, #0]
 800aeb2:	b159      	cbz	r1, 800aecc <_dtoa_r+0x5c>
 800aeb4:	685a      	ldr	r2, [r3, #4]
 800aeb6:	604a      	str	r2, [r1, #4]
 800aeb8:	2301      	movs	r3, #1
 800aeba:	4093      	lsls	r3, r2
 800aebc:	608b      	str	r3, [r1, #8]
 800aebe:	4658      	mov	r0, fp
 800aec0:	f001 f894 	bl	800bfec <_Bfree>
 800aec4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aec8:	2200      	movs	r2, #0
 800aeca:	601a      	str	r2, [r3, #0]
 800aecc:	1e2b      	subs	r3, r5, #0
 800aece:	bfb9      	ittee	lt
 800aed0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aed4:	9303      	strlt	r3, [sp, #12]
 800aed6:	2300      	movge	r3, #0
 800aed8:	6033      	strge	r3, [r6, #0]
 800aeda:	9f03      	ldr	r7, [sp, #12]
 800aedc:	4b98      	ldr	r3, [pc, #608]	@ (800b140 <_dtoa_r+0x2d0>)
 800aede:	bfbc      	itt	lt
 800aee0:	2201      	movlt	r2, #1
 800aee2:	6032      	strlt	r2, [r6, #0]
 800aee4:	43bb      	bics	r3, r7
 800aee6:	d112      	bne.n	800af0e <_dtoa_r+0x9e>
 800aee8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800aeea:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aeee:	6013      	str	r3, [r2, #0]
 800aef0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aef4:	4323      	orrs	r3, r4
 800aef6:	f000 854d 	beq.w	800b994 <_dtoa_r+0xb24>
 800aefa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800aefc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b154 <_dtoa_r+0x2e4>
 800af00:	2b00      	cmp	r3, #0
 800af02:	f000 854f 	beq.w	800b9a4 <_dtoa_r+0xb34>
 800af06:	f10a 0303 	add.w	r3, sl, #3
 800af0a:	f000 bd49 	b.w	800b9a0 <_dtoa_r+0xb30>
 800af0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800af12:	2200      	movs	r2, #0
 800af14:	ec51 0b17 	vmov	r0, r1, d7
 800af18:	2300      	movs	r3, #0
 800af1a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800af1e:	f7f5 fdd3 	bl	8000ac8 <__aeabi_dcmpeq>
 800af22:	4680      	mov	r8, r0
 800af24:	b158      	cbz	r0, 800af3e <_dtoa_r+0xce>
 800af26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800af28:	2301      	movs	r3, #1
 800af2a:	6013      	str	r3, [r2, #0]
 800af2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800af2e:	b113      	cbz	r3, 800af36 <_dtoa_r+0xc6>
 800af30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800af32:	4b84      	ldr	r3, [pc, #528]	@ (800b144 <_dtoa_r+0x2d4>)
 800af34:	6013      	str	r3, [r2, #0]
 800af36:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b158 <_dtoa_r+0x2e8>
 800af3a:	f000 bd33 	b.w	800b9a4 <_dtoa_r+0xb34>
 800af3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800af42:	aa16      	add	r2, sp, #88	@ 0x58
 800af44:	a917      	add	r1, sp, #92	@ 0x5c
 800af46:	4658      	mov	r0, fp
 800af48:	f001 fb3a 	bl	800c5c0 <__d2b>
 800af4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800af50:	4681      	mov	r9, r0
 800af52:	2e00      	cmp	r6, #0
 800af54:	d077      	beq.n	800b046 <_dtoa_r+0x1d6>
 800af56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800af58:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800af5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800af64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800af68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800af6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800af70:	4619      	mov	r1, r3
 800af72:	2200      	movs	r2, #0
 800af74:	4b74      	ldr	r3, [pc, #464]	@ (800b148 <_dtoa_r+0x2d8>)
 800af76:	f7f5 f987 	bl	8000288 <__aeabi_dsub>
 800af7a:	a369      	add	r3, pc, #420	@ (adr r3, 800b120 <_dtoa_r+0x2b0>)
 800af7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af80:	f7f5 fb3a 	bl	80005f8 <__aeabi_dmul>
 800af84:	a368      	add	r3, pc, #416	@ (adr r3, 800b128 <_dtoa_r+0x2b8>)
 800af86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8a:	f7f5 f97f 	bl	800028c <__adddf3>
 800af8e:	4604      	mov	r4, r0
 800af90:	4630      	mov	r0, r6
 800af92:	460d      	mov	r5, r1
 800af94:	f7f5 fac6 	bl	8000524 <__aeabi_i2d>
 800af98:	a365      	add	r3, pc, #404	@ (adr r3, 800b130 <_dtoa_r+0x2c0>)
 800af9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af9e:	f7f5 fb2b 	bl	80005f8 <__aeabi_dmul>
 800afa2:	4602      	mov	r2, r0
 800afa4:	460b      	mov	r3, r1
 800afa6:	4620      	mov	r0, r4
 800afa8:	4629      	mov	r1, r5
 800afaa:	f7f5 f96f 	bl	800028c <__adddf3>
 800afae:	4604      	mov	r4, r0
 800afb0:	460d      	mov	r5, r1
 800afb2:	f7f5 fdd1 	bl	8000b58 <__aeabi_d2iz>
 800afb6:	2200      	movs	r2, #0
 800afb8:	4607      	mov	r7, r0
 800afba:	2300      	movs	r3, #0
 800afbc:	4620      	mov	r0, r4
 800afbe:	4629      	mov	r1, r5
 800afc0:	f7f5 fd8c 	bl	8000adc <__aeabi_dcmplt>
 800afc4:	b140      	cbz	r0, 800afd8 <_dtoa_r+0x168>
 800afc6:	4638      	mov	r0, r7
 800afc8:	f7f5 faac 	bl	8000524 <__aeabi_i2d>
 800afcc:	4622      	mov	r2, r4
 800afce:	462b      	mov	r3, r5
 800afd0:	f7f5 fd7a 	bl	8000ac8 <__aeabi_dcmpeq>
 800afd4:	b900      	cbnz	r0, 800afd8 <_dtoa_r+0x168>
 800afd6:	3f01      	subs	r7, #1
 800afd8:	2f16      	cmp	r7, #22
 800afda:	d851      	bhi.n	800b080 <_dtoa_r+0x210>
 800afdc:	4b5b      	ldr	r3, [pc, #364]	@ (800b14c <_dtoa_r+0x2dc>)
 800afde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800afea:	f7f5 fd77 	bl	8000adc <__aeabi_dcmplt>
 800afee:	2800      	cmp	r0, #0
 800aff0:	d048      	beq.n	800b084 <_dtoa_r+0x214>
 800aff2:	3f01      	subs	r7, #1
 800aff4:	2300      	movs	r3, #0
 800aff6:	9312      	str	r3, [sp, #72]	@ 0x48
 800aff8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800affa:	1b9b      	subs	r3, r3, r6
 800affc:	1e5a      	subs	r2, r3, #1
 800affe:	bf44      	itt	mi
 800b000:	f1c3 0801 	rsbmi	r8, r3, #1
 800b004:	2300      	movmi	r3, #0
 800b006:	9208      	str	r2, [sp, #32]
 800b008:	bf54      	ite	pl
 800b00a:	f04f 0800 	movpl.w	r8, #0
 800b00e:	9308      	strmi	r3, [sp, #32]
 800b010:	2f00      	cmp	r7, #0
 800b012:	db39      	blt.n	800b088 <_dtoa_r+0x218>
 800b014:	9b08      	ldr	r3, [sp, #32]
 800b016:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b018:	443b      	add	r3, r7
 800b01a:	9308      	str	r3, [sp, #32]
 800b01c:	2300      	movs	r3, #0
 800b01e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b022:	2b09      	cmp	r3, #9
 800b024:	d864      	bhi.n	800b0f0 <_dtoa_r+0x280>
 800b026:	2b05      	cmp	r3, #5
 800b028:	bfc4      	itt	gt
 800b02a:	3b04      	subgt	r3, #4
 800b02c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b02e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b030:	f1a3 0302 	sub.w	r3, r3, #2
 800b034:	bfcc      	ite	gt
 800b036:	2400      	movgt	r4, #0
 800b038:	2401      	movle	r4, #1
 800b03a:	2b03      	cmp	r3, #3
 800b03c:	d863      	bhi.n	800b106 <_dtoa_r+0x296>
 800b03e:	e8df f003 	tbb	[pc, r3]
 800b042:	372a      	.short	0x372a
 800b044:	5535      	.short	0x5535
 800b046:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b04a:	441e      	add	r6, r3
 800b04c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b050:	2b20      	cmp	r3, #32
 800b052:	bfc1      	itttt	gt
 800b054:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b058:	409f      	lslgt	r7, r3
 800b05a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b05e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b062:	bfd6      	itet	le
 800b064:	f1c3 0320 	rsble	r3, r3, #32
 800b068:	ea47 0003 	orrgt.w	r0, r7, r3
 800b06c:	fa04 f003 	lslle.w	r0, r4, r3
 800b070:	f7f5 fa48 	bl	8000504 <__aeabi_ui2d>
 800b074:	2201      	movs	r2, #1
 800b076:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b07a:	3e01      	subs	r6, #1
 800b07c:	9214      	str	r2, [sp, #80]	@ 0x50
 800b07e:	e777      	b.n	800af70 <_dtoa_r+0x100>
 800b080:	2301      	movs	r3, #1
 800b082:	e7b8      	b.n	800aff6 <_dtoa_r+0x186>
 800b084:	9012      	str	r0, [sp, #72]	@ 0x48
 800b086:	e7b7      	b.n	800aff8 <_dtoa_r+0x188>
 800b088:	427b      	negs	r3, r7
 800b08a:	930a      	str	r3, [sp, #40]	@ 0x28
 800b08c:	2300      	movs	r3, #0
 800b08e:	eba8 0807 	sub.w	r8, r8, r7
 800b092:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b094:	e7c4      	b.n	800b020 <_dtoa_r+0x1b0>
 800b096:	2300      	movs	r3, #0
 800b098:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b09a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	dc35      	bgt.n	800b10c <_dtoa_r+0x29c>
 800b0a0:	2301      	movs	r3, #1
 800b0a2:	9300      	str	r3, [sp, #0]
 800b0a4:	9307      	str	r3, [sp, #28]
 800b0a6:	461a      	mov	r2, r3
 800b0a8:	920e      	str	r2, [sp, #56]	@ 0x38
 800b0aa:	e00b      	b.n	800b0c4 <_dtoa_r+0x254>
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e7f3      	b.n	800b098 <_dtoa_r+0x228>
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b0b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0b6:	18fb      	adds	r3, r7, r3
 800b0b8:	9300      	str	r3, [sp, #0]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	9307      	str	r3, [sp, #28]
 800b0c0:	bfb8      	it	lt
 800b0c2:	2301      	movlt	r3, #1
 800b0c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b0c8:	2100      	movs	r1, #0
 800b0ca:	2204      	movs	r2, #4
 800b0cc:	f102 0514 	add.w	r5, r2, #20
 800b0d0:	429d      	cmp	r5, r3
 800b0d2:	d91f      	bls.n	800b114 <_dtoa_r+0x2a4>
 800b0d4:	6041      	str	r1, [r0, #4]
 800b0d6:	4658      	mov	r0, fp
 800b0d8:	f000 ff48 	bl	800bf6c <_Balloc>
 800b0dc:	4682      	mov	sl, r0
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	d13c      	bne.n	800b15c <_dtoa_r+0x2ec>
 800b0e2:	4b1b      	ldr	r3, [pc, #108]	@ (800b150 <_dtoa_r+0x2e0>)
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	f240 11af 	movw	r1, #431	@ 0x1af
 800b0ea:	e6d8      	b.n	800ae9e <_dtoa_r+0x2e>
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	e7e0      	b.n	800b0b2 <_dtoa_r+0x242>
 800b0f0:	2401      	movs	r4, #1
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800b0f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b0f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b0fc:	9300      	str	r3, [sp, #0]
 800b0fe:	9307      	str	r3, [sp, #28]
 800b100:	2200      	movs	r2, #0
 800b102:	2312      	movs	r3, #18
 800b104:	e7d0      	b.n	800b0a8 <_dtoa_r+0x238>
 800b106:	2301      	movs	r3, #1
 800b108:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b10a:	e7f5      	b.n	800b0f8 <_dtoa_r+0x288>
 800b10c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	9307      	str	r3, [sp, #28]
 800b112:	e7d7      	b.n	800b0c4 <_dtoa_r+0x254>
 800b114:	3101      	adds	r1, #1
 800b116:	0052      	lsls	r2, r2, #1
 800b118:	e7d8      	b.n	800b0cc <_dtoa_r+0x25c>
 800b11a:	bf00      	nop
 800b11c:	f3af 8000 	nop.w
 800b120:	636f4361 	.word	0x636f4361
 800b124:	3fd287a7 	.word	0x3fd287a7
 800b128:	8b60c8b3 	.word	0x8b60c8b3
 800b12c:	3fc68a28 	.word	0x3fc68a28
 800b130:	509f79fb 	.word	0x509f79fb
 800b134:	3fd34413 	.word	0x3fd34413
 800b138:	0800d051 	.word	0x0800d051
 800b13c:	0800d068 	.word	0x0800d068
 800b140:	7ff00000 	.word	0x7ff00000
 800b144:	0800d021 	.word	0x0800d021
 800b148:	3ff80000 	.word	0x3ff80000
 800b14c:	0800d170 	.word	0x0800d170
 800b150:	0800d0c0 	.word	0x0800d0c0
 800b154:	0800d04d 	.word	0x0800d04d
 800b158:	0800d020 	.word	0x0800d020
 800b15c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b160:	6018      	str	r0, [r3, #0]
 800b162:	9b07      	ldr	r3, [sp, #28]
 800b164:	2b0e      	cmp	r3, #14
 800b166:	f200 80a4 	bhi.w	800b2b2 <_dtoa_r+0x442>
 800b16a:	2c00      	cmp	r4, #0
 800b16c:	f000 80a1 	beq.w	800b2b2 <_dtoa_r+0x442>
 800b170:	2f00      	cmp	r7, #0
 800b172:	dd33      	ble.n	800b1dc <_dtoa_r+0x36c>
 800b174:	4bad      	ldr	r3, [pc, #692]	@ (800b42c <_dtoa_r+0x5bc>)
 800b176:	f007 020f 	and.w	r2, r7, #15
 800b17a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b17e:	ed93 7b00 	vldr	d7, [r3]
 800b182:	05f8      	lsls	r0, r7, #23
 800b184:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b188:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b18c:	d516      	bpl.n	800b1bc <_dtoa_r+0x34c>
 800b18e:	4ba8      	ldr	r3, [pc, #672]	@ (800b430 <_dtoa_r+0x5c0>)
 800b190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b194:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b198:	f7f5 fb58 	bl	800084c <__aeabi_ddiv>
 800b19c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1a0:	f004 040f 	and.w	r4, r4, #15
 800b1a4:	2603      	movs	r6, #3
 800b1a6:	4da2      	ldr	r5, [pc, #648]	@ (800b430 <_dtoa_r+0x5c0>)
 800b1a8:	b954      	cbnz	r4, 800b1c0 <_dtoa_r+0x350>
 800b1aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b1b2:	f7f5 fb4b 	bl	800084c <__aeabi_ddiv>
 800b1b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1ba:	e028      	b.n	800b20e <_dtoa_r+0x39e>
 800b1bc:	2602      	movs	r6, #2
 800b1be:	e7f2      	b.n	800b1a6 <_dtoa_r+0x336>
 800b1c0:	07e1      	lsls	r1, r4, #31
 800b1c2:	d508      	bpl.n	800b1d6 <_dtoa_r+0x366>
 800b1c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b1c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b1cc:	f7f5 fa14 	bl	80005f8 <__aeabi_dmul>
 800b1d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b1d4:	3601      	adds	r6, #1
 800b1d6:	1064      	asrs	r4, r4, #1
 800b1d8:	3508      	adds	r5, #8
 800b1da:	e7e5      	b.n	800b1a8 <_dtoa_r+0x338>
 800b1dc:	f000 80d2 	beq.w	800b384 <_dtoa_r+0x514>
 800b1e0:	427c      	negs	r4, r7
 800b1e2:	4b92      	ldr	r3, [pc, #584]	@ (800b42c <_dtoa_r+0x5bc>)
 800b1e4:	4d92      	ldr	r5, [pc, #584]	@ (800b430 <_dtoa_r+0x5c0>)
 800b1e6:	f004 020f 	and.w	r2, r4, #15
 800b1ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b1f6:	f7f5 f9ff 	bl	80005f8 <__aeabi_dmul>
 800b1fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1fe:	1124      	asrs	r4, r4, #4
 800b200:	2300      	movs	r3, #0
 800b202:	2602      	movs	r6, #2
 800b204:	2c00      	cmp	r4, #0
 800b206:	f040 80b2 	bne.w	800b36e <_dtoa_r+0x4fe>
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d1d3      	bne.n	800b1b6 <_dtoa_r+0x346>
 800b20e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b210:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b214:	2b00      	cmp	r3, #0
 800b216:	f000 80b7 	beq.w	800b388 <_dtoa_r+0x518>
 800b21a:	4b86      	ldr	r3, [pc, #536]	@ (800b434 <_dtoa_r+0x5c4>)
 800b21c:	2200      	movs	r2, #0
 800b21e:	4620      	mov	r0, r4
 800b220:	4629      	mov	r1, r5
 800b222:	f7f5 fc5b 	bl	8000adc <__aeabi_dcmplt>
 800b226:	2800      	cmp	r0, #0
 800b228:	f000 80ae 	beq.w	800b388 <_dtoa_r+0x518>
 800b22c:	9b07      	ldr	r3, [sp, #28]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	f000 80aa 	beq.w	800b388 <_dtoa_r+0x518>
 800b234:	9b00      	ldr	r3, [sp, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	dd37      	ble.n	800b2aa <_dtoa_r+0x43a>
 800b23a:	1e7b      	subs	r3, r7, #1
 800b23c:	9304      	str	r3, [sp, #16]
 800b23e:	4620      	mov	r0, r4
 800b240:	4b7d      	ldr	r3, [pc, #500]	@ (800b438 <_dtoa_r+0x5c8>)
 800b242:	2200      	movs	r2, #0
 800b244:	4629      	mov	r1, r5
 800b246:	f7f5 f9d7 	bl	80005f8 <__aeabi_dmul>
 800b24a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b24e:	9c00      	ldr	r4, [sp, #0]
 800b250:	3601      	adds	r6, #1
 800b252:	4630      	mov	r0, r6
 800b254:	f7f5 f966 	bl	8000524 <__aeabi_i2d>
 800b258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b25c:	f7f5 f9cc 	bl	80005f8 <__aeabi_dmul>
 800b260:	4b76      	ldr	r3, [pc, #472]	@ (800b43c <_dtoa_r+0x5cc>)
 800b262:	2200      	movs	r2, #0
 800b264:	f7f5 f812 	bl	800028c <__adddf3>
 800b268:	4605      	mov	r5, r0
 800b26a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b26e:	2c00      	cmp	r4, #0
 800b270:	f040 808d 	bne.w	800b38e <_dtoa_r+0x51e>
 800b274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b278:	4b71      	ldr	r3, [pc, #452]	@ (800b440 <_dtoa_r+0x5d0>)
 800b27a:	2200      	movs	r2, #0
 800b27c:	f7f5 f804 	bl	8000288 <__aeabi_dsub>
 800b280:	4602      	mov	r2, r0
 800b282:	460b      	mov	r3, r1
 800b284:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b288:	462a      	mov	r2, r5
 800b28a:	4633      	mov	r3, r6
 800b28c:	f7f5 fc44 	bl	8000b18 <__aeabi_dcmpgt>
 800b290:	2800      	cmp	r0, #0
 800b292:	f040 828b 	bne.w	800b7ac <_dtoa_r+0x93c>
 800b296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b29a:	462a      	mov	r2, r5
 800b29c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b2a0:	f7f5 fc1c 	bl	8000adc <__aeabi_dcmplt>
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	f040 8128 	bne.w	800b4fa <_dtoa_r+0x68a>
 800b2aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b2ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b2b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	f2c0 815a 	blt.w	800b56e <_dtoa_r+0x6fe>
 800b2ba:	2f0e      	cmp	r7, #14
 800b2bc:	f300 8157 	bgt.w	800b56e <_dtoa_r+0x6fe>
 800b2c0:	4b5a      	ldr	r3, [pc, #360]	@ (800b42c <_dtoa_r+0x5bc>)
 800b2c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b2c6:	ed93 7b00 	vldr	d7, [r3]
 800b2ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	ed8d 7b00 	vstr	d7, [sp]
 800b2d2:	da03      	bge.n	800b2dc <_dtoa_r+0x46c>
 800b2d4:	9b07      	ldr	r3, [sp, #28]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	f340 8101 	ble.w	800b4de <_dtoa_r+0x66e>
 800b2dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b2e0:	4656      	mov	r6, sl
 800b2e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	4629      	mov	r1, r5
 800b2ea:	f7f5 faaf 	bl	800084c <__aeabi_ddiv>
 800b2ee:	f7f5 fc33 	bl	8000b58 <__aeabi_d2iz>
 800b2f2:	4680      	mov	r8, r0
 800b2f4:	f7f5 f916 	bl	8000524 <__aeabi_i2d>
 800b2f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2fc:	f7f5 f97c 	bl	80005f8 <__aeabi_dmul>
 800b300:	4602      	mov	r2, r0
 800b302:	460b      	mov	r3, r1
 800b304:	4620      	mov	r0, r4
 800b306:	4629      	mov	r1, r5
 800b308:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b30c:	f7f4 ffbc 	bl	8000288 <__aeabi_dsub>
 800b310:	f806 4b01 	strb.w	r4, [r6], #1
 800b314:	9d07      	ldr	r5, [sp, #28]
 800b316:	eba6 040a 	sub.w	r4, r6, sl
 800b31a:	42a5      	cmp	r5, r4
 800b31c:	4602      	mov	r2, r0
 800b31e:	460b      	mov	r3, r1
 800b320:	f040 8117 	bne.w	800b552 <_dtoa_r+0x6e2>
 800b324:	f7f4 ffb2 	bl	800028c <__adddf3>
 800b328:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b32c:	4604      	mov	r4, r0
 800b32e:	460d      	mov	r5, r1
 800b330:	f7f5 fbf2 	bl	8000b18 <__aeabi_dcmpgt>
 800b334:	2800      	cmp	r0, #0
 800b336:	f040 80f9 	bne.w	800b52c <_dtoa_r+0x6bc>
 800b33a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b33e:	4620      	mov	r0, r4
 800b340:	4629      	mov	r1, r5
 800b342:	f7f5 fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 800b346:	b118      	cbz	r0, 800b350 <_dtoa_r+0x4e0>
 800b348:	f018 0f01 	tst.w	r8, #1
 800b34c:	f040 80ee 	bne.w	800b52c <_dtoa_r+0x6bc>
 800b350:	4649      	mov	r1, r9
 800b352:	4658      	mov	r0, fp
 800b354:	f000 fe4a 	bl	800bfec <_Bfree>
 800b358:	2300      	movs	r3, #0
 800b35a:	7033      	strb	r3, [r6, #0]
 800b35c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b35e:	3701      	adds	r7, #1
 800b360:	601f      	str	r7, [r3, #0]
 800b362:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b364:	2b00      	cmp	r3, #0
 800b366:	f000 831d 	beq.w	800b9a4 <_dtoa_r+0xb34>
 800b36a:	601e      	str	r6, [r3, #0]
 800b36c:	e31a      	b.n	800b9a4 <_dtoa_r+0xb34>
 800b36e:	07e2      	lsls	r2, r4, #31
 800b370:	d505      	bpl.n	800b37e <_dtoa_r+0x50e>
 800b372:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b376:	f7f5 f93f 	bl	80005f8 <__aeabi_dmul>
 800b37a:	3601      	adds	r6, #1
 800b37c:	2301      	movs	r3, #1
 800b37e:	1064      	asrs	r4, r4, #1
 800b380:	3508      	adds	r5, #8
 800b382:	e73f      	b.n	800b204 <_dtoa_r+0x394>
 800b384:	2602      	movs	r6, #2
 800b386:	e742      	b.n	800b20e <_dtoa_r+0x39e>
 800b388:	9c07      	ldr	r4, [sp, #28]
 800b38a:	9704      	str	r7, [sp, #16]
 800b38c:	e761      	b.n	800b252 <_dtoa_r+0x3e2>
 800b38e:	4b27      	ldr	r3, [pc, #156]	@ (800b42c <_dtoa_r+0x5bc>)
 800b390:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b392:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b396:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b39a:	4454      	add	r4, sl
 800b39c:	2900      	cmp	r1, #0
 800b39e:	d053      	beq.n	800b448 <_dtoa_r+0x5d8>
 800b3a0:	4928      	ldr	r1, [pc, #160]	@ (800b444 <_dtoa_r+0x5d4>)
 800b3a2:	2000      	movs	r0, #0
 800b3a4:	f7f5 fa52 	bl	800084c <__aeabi_ddiv>
 800b3a8:	4633      	mov	r3, r6
 800b3aa:	462a      	mov	r2, r5
 800b3ac:	f7f4 ff6c 	bl	8000288 <__aeabi_dsub>
 800b3b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b3b4:	4656      	mov	r6, sl
 800b3b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3ba:	f7f5 fbcd 	bl	8000b58 <__aeabi_d2iz>
 800b3be:	4605      	mov	r5, r0
 800b3c0:	f7f5 f8b0 	bl	8000524 <__aeabi_i2d>
 800b3c4:	4602      	mov	r2, r0
 800b3c6:	460b      	mov	r3, r1
 800b3c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3cc:	f7f4 ff5c 	bl	8000288 <__aeabi_dsub>
 800b3d0:	3530      	adds	r5, #48	@ 0x30
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b3da:	f806 5b01 	strb.w	r5, [r6], #1
 800b3de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b3e2:	f7f5 fb7b 	bl	8000adc <__aeabi_dcmplt>
 800b3e6:	2800      	cmp	r0, #0
 800b3e8:	d171      	bne.n	800b4ce <_dtoa_r+0x65e>
 800b3ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b3ee:	4911      	ldr	r1, [pc, #68]	@ (800b434 <_dtoa_r+0x5c4>)
 800b3f0:	2000      	movs	r0, #0
 800b3f2:	f7f4 ff49 	bl	8000288 <__aeabi_dsub>
 800b3f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b3fa:	f7f5 fb6f 	bl	8000adc <__aeabi_dcmplt>
 800b3fe:	2800      	cmp	r0, #0
 800b400:	f040 8095 	bne.w	800b52e <_dtoa_r+0x6be>
 800b404:	42a6      	cmp	r6, r4
 800b406:	f43f af50 	beq.w	800b2aa <_dtoa_r+0x43a>
 800b40a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b40e:	4b0a      	ldr	r3, [pc, #40]	@ (800b438 <_dtoa_r+0x5c8>)
 800b410:	2200      	movs	r2, #0
 800b412:	f7f5 f8f1 	bl	80005f8 <__aeabi_dmul>
 800b416:	4b08      	ldr	r3, [pc, #32]	@ (800b438 <_dtoa_r+0x5c8>)
 800b418:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b41c:	2200      	movs	r2, #0
 800b41e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b422:	f7f5 f8e9 	bl	80005f8 <__aeabi_dmul>
 800b426:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b42a:	e7c4      	b.n	800b3b6 <_dtoa_r+0x546>
 800b42c:	0800d170 	.word	0x0800d170
 800b430:	0800d148 	.word	0x0800d148
 800b434:	3ff00000 	.word	0x3ff00000
 800b438:	40240000 	.word	0x40240000
 800b43c:	401c0000 	.word	0x401c0000
 800b440:	40140000 	.word	0x40140000
 800b444:	3fe00000 	.word	0x3fe00000
 800b448:	4631      	mov	r1, r6
 800b44a:	4628      	mov	r0, r5
 800b44c:	f7f5 f8d4 	bl	80005f8 <__aeabi_dmul>
 800b450:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b454:	9415      	str	r4, [sp, #84]	@ 0x54
 800b456:	4656      	mov	r6, sl
 800b458:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b45c:	f7f5 fb7c 	bl	8000b58 <__aeabi_d2iz>
 800b460:	4605      	mov	r5, r0
 800b462:	f7f5 f85f 	bl	8000524 <__aeabi_i2d>
 800b466:	4602      	mov	r2, r0
 800b468:	460b      	mov	r3, r1
 800b46a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b46e:	f7f4 ff0b 	bl	8000288 <__aeabi_dsub>
 800b472:	3530      	adds	r5, #48	@ 0x30
 800b474:	f806 5b01 	strb.w	r5, [r6], #1
 800b478:	4602      	mov	r2, r0
 800b47a:	460b      	mov	r3, r1
 800b47c:	42a6      	cmp	r6, r4
 800b47e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b482:	f04f 0200 	mov.w	r2, #0
 800b486:	d124      	bne.n	800b4d2 <_dtoa_r+0x662>
 800b488:	4bac      	ldr	r3, [pc, #688]	@ (800b73c <_dtoa_r+0x8cc>)
 800b48a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b48e:	f7f4 fefd 	bl	800028c <__adddf3>
 800b492:	4602      	mov	r2, r0
 800b494:	460b      	mov	r3, r1
 800b496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b49a:	f7f5 fb3d 	bl	8000b18 <__aeabi_dcmpgt>
 800b49e:	2800      	cmp	r0, #0
 800b4a0:	d145      	bne.n	800b52e <_dtoa_r+0x6be>
 800b4a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b4a6:	49a5      	ldr	r1, [pc, #660]	@ (800b73c <_dtoa_r+0x8cc>)
 800b4a8:	2000      	movs	r0, #0
 800b4aa:	f7f4 feed 	bl	8000288 <__aeabi_dsub>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4b6:	f7f5 fb11 	bl	8000adc <__aeabi_dcmplt>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	f43f aef5 	beq.w	800b2aa <_dtoa_r+0x43a>
 800b4c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b4c2:	1e73      	subs	r3, r6, #1
 800b4c4:	9315      	str	r3, [sp, #84]	@ 0x54
 800b4c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b4ca:	2b30      	cmp	r3, #48	@ 0x30
 800b4cc:	d0f8      	beq.n	800b4c0 <_dtoa_r+0x650>
 800b4ce:	9f04      	ldr	r7, [sp, #16]
 800b4d0:	e73e      	b.n	800b350 <_dtoa_r+0x4e0>
 800b4d2:	4b9b      	ldr	r3, [pc, #620]	@ (800b740 <_dtoa_r+0x8d0>)
 800b4d4:	f7f5 f890 	bl	80005f8 <__aeabi_dmul>
 800b4d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b4dc:	e7bc      	b.n	800b458 <_dtoa_r+0x5e8>
 800b4de:	d10c      	bne.n	800b4fa <_dtoa_r+0x68a>
 800b4e0:	4b98      	ldr	r3, [pc, #608]	@ (800b744 <_dtoa_r+0x8d4>)
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4e8:	f7f5 f886 	bl	80005f8 <__aeabi_dmul>
 800b4ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4f0:	f7f5 fb08 	bl	8000b04 <__aeabi_dcmpge>
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	f000 8157 	beq.w	800b7a8 <_dtoa_r+0x938>
 800b4fa:	2400      	movs	r4, #0
 800b4fc:	4625      	mov	r5, r4
 800b4fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b500:	43db      	mvns	r3, r3
 800b502:	9304      	str	r3, [sp, #16]
 800b504:	4656      	mov	r6, sl
 800b506:	2700      	movs	r7, #0
 800b508:	4621      	mov	r1, r4
 800b50a:	4658      	mov	r0, fp
 800b50c:	f000 fd6e 	bl	800bfec <_Bfree>
 800b510:	2d00      	cmp	r5, #0
 800b512:	d0dc      	beq.n	800b4ce <_dtoa_r+0x65e>
 800b514:	b12f      	cbz	r7, 800b522 <_dtoa_r+0x6b2>
 800b516:	42af      	cmp	r7, r5
 800b518:	d003      	beq.n	800b522 <_dtoa_r+0x6b2>
 800b51a:	4639      	mov	r1, r7
 800b51c:	4658      	mov	r0, fp
 800b51e:	f000 fd65 	bl	800bfec <_Bfree>
 800b522:	4629      	mov	r1, r5
 800b524:	4658      	mov	r0, fp
 800b526:	f000 fd61 	bl	800bfec <_Bfree>
 800b52a:	e7d0      	b.n	800b4ce <_dtoa_r+0x65e>
 800b52c:	9704      	str	r7, [sp, #16]
 800b52e:	4633      	mov	r3, r6
 800b530:	461e      	mov	r6, r3
 800b532:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b536:	2a39      	cmp	r2, #57	@ 0x39
 800b538:	d107      	bne.n	800b54a <_dtoa_r+0x6da>
 800b53a:	459a      	cmp	sl, r3
 800b53c:	d1f8      	bne.n	800b530 <_dtoa_r+0x6c0>
 800b53e:	9a04      	ldr	r2, [sp, #16]
 800b540:	3201      	adds	r2, #1
 800b542:	9204      	str	r2, [sp, #16]
 800b544:	2230      	movs	r2, #48	@ 0x30
 800b546:	f88a 2000 	strb.w	r2, [sl]
 800b54a:	781a      	ldrb	r2, [r3, #0]
 800b54c:	3201      	adds	r2, #1
 800b54e:	701a      	strb	r2, [r3, #0]
 800b550:	e7bd      	b.n	800b4ce <_dtoa_r+0x65e>
 800b552:	4b7b      	ldr	r3, [pc, #492]	@ (800b740 <_dtoa_r+0x8d0>)
 800b554:	2200      	movs	r2, #0
 800b556:	f7f5 f84f 	bl	80005f8 <__aeabi_dmul>
 800b55a:	2200      	movs	r2, #0
 800b55c:	2300      	movs	r3, #0
 800b55e:	4604      	mov	r4, r0
 800b560:	460d      	mov	r5, r1
 800b562:	f7f5 fab1 	bl	8000ac8 <__aeabi_dcmpeq>
 800b566:	2800      	cmp	r0, #0
 800b568:	f43f aebb 	beq.w	800b2e2 <_dtoa_r+0x472>
 800b56c:	e6f0      	b.n	800b350 <_dtoa_r+0x4e0>
 800b56e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b570:	2a00      	cmp	r2, #0
 800b572:	f000 80db 	beq.w	800b72c <_dtoa_r+0x8bc>
 800b576:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b578:	2a01      	cmp	r2, #1
 800b57a:	f300 80bf 	bgt.w	800b6fc <_dtoa_r+0x88c>
 800b57e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b580:	2a00      	cmp	r2, #0
 800b582:	f000 80b7 	beq.w	800b6f4 <_dtoa_r+0x884>
 800b586:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b58a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b58c:	4646      	mov	r6, r8
 800b58e:	9a08      	ldr	r2, [sp, #32]
 800b590:	2101      	movs	r1, #1
 800b592:	441a      	add	r2, r3
 800b594:	4658      	mov	r0, fp
 800b596:	4498      	add	r8, r3
 800b598:	9208      	str	r2, [sp, #32]
 800b59a:	f000 fddb 	bl	800c154 <__i2b>
 800b59e:	4605      	mov	r5, r0
 800b5a0:	b15e      	cbz	r6, 800b5ba <_dtoa_r+0x74a>
 800b5a2:	9b08      	ldr	r3, [sp, #32]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	dd08      	ble.n	800b5ba <_dtoa_r+0x74a>
 800b5a8:	42b3      	cmp	r3, r6
 800b5aa:	9a08      	ldr	r2, [sp, #32]
 800b5ac:	bfa8      	it	ge
 800b5ae:	4633      	movge	r3, r6
 800b5b0:	eba8 0803 	sub.w	r8, r8, r3
 800b5b4:	1af6      	subs	r6, r6, r3
 800b5b6:	1ad3      	subs	r3, r2, r3
 800b5b8:	9308      	str	r3, [sp, #32]
 800b5ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5bc:	b1f3      	cbz	r3, 800b5fc <_dtoa_r+0x78c>
 800b5be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f000 80b7 	beq.w	800b734 <_dtoa_r+0x8c4>
 800b5c6:	b18c      	cbz	r4, 800b5ec <_dtoa_r+0x77c>
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	4622      	mov	r2, r4
 800b5cc:	4658      	mov	r0, fp
 800b5ce:	f000 fe81 	bl	800c2d4 <__pow5mult>
 800b5d2:	464a      	mov	r2, r9
 800b5d4:	4601      	mov	r1, r0
 800b5d6:	4605      	mov	r5, r0
 800b5d8:	4658      	mov	r0, fp
 800b5da:	f000 fdd1 	bl	800c180 <__multiply>
 800b5de:	4649      	mov	r1, r9
 800b5e0:	9004      	str	r0, [sp, #16]
 800b5e2:	4658      	mov	r0, fp
 800b5e4:	f000 fd02 	bl	800bfec <_Bfree>
 800b5e8:	9b04      	ldr	r3, [sp, #16]
 800b5ea:	4699      	mov	r9, r3
 800b5ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b5ee:	1b1a      	subs	r2, r3, r4
 800b5f0:	d004      	beq.n	800b5fc <_dtoa_r+0x78c>
 800b5f2:	4649      	mov	r1, r9
 800b5f4:	4658      	mov	r0, fp
 800b5f6:	f000 fe6d 	bl	800c2d4 <__pow5mult>
 800b5fa:	4681      	mov	r9, r0
 800b5fc:	2101      	movs	r1, #1
 800b5fe:	4658      	mov	r0, fp
 800b600:	f000 fda8 	bl	800c154 <__i2b>
 800b604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b606:	4604      	mov	r4, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	f000 81cf 	beq.w	800b9ac <_dtoa_r+0xb3c>
 800b60e:	461a      	mov	r2, r3
 800b610:	4601      	mov	r1, r0
 800b612:	4658      	mov	r0, fp
 800b614:	f000 fe5e 	bl	800c2d4 <__pow5mult>
 800b618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	4604      	mov	r4, r0
 800b61e:	f300 8095 	bgt.w	800b74c <_dtoa_r+0x8dc>
 800b622:	9b02      	ldr	r3, [sp, #8]
 800b624:	2b00      	cmp	r3, #0
 800b626:	f040 8087 	bne.w	800b738 <_dtoa_r+0x8c8>
 800b62a:	9b03      	ldr	r3, [sp, #12]
 800b62c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b630:	2b00      	cmp	r3, #0
 800b632:	f040 8089 	bne.w	800b748 <_dtoa_r+0x8d8>
 800b636:	9b03      	ldr	r3, [sp, #12]
 800b638:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b63c:	0d1b      	lsrs	r3, r3, #20
 800b63e:	051b      	lsls	r3, r3, #20
 800b640:	b12b      	cbz	r3, 800b64e <_dtoa_r+0x7de>
 800b642:	9b08      	ldr	r3, [sp, #32]
 800b644:	3301      	adds	r3, #1
 800b646:	9308      	str	r3, [sp, #32]
 800b648:	f108 0801 	add.w	r8, r8, #1
 800b64c:	2301      	movs	r3, #1
 800b64e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b650:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b652:	2b00      	cmp	r3, #0
 800b654:	f000 81b0 	beq.w	800b9b8 <_dtoa_r+0xb48>
 800b658:	6923      	ldr	r3, [r4, #16]
 800b65a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b65e:	6918      	ldr	r0, [r3, #16]
 800b660:	f000 fd2c 	bl	800c0bc <__hi0bits>
 800b664:	f1c0 0020 	rsb	r0, r0, #32
 800b668:	9b08      	ldr	r3, [sp, #32]
 800b66a:	4418      	add	r0, r3
 800b66c:	f010 001f 	ands.w	r0, r0, #31
 800b670:	d077      	beq.n	800b762 <_dtoa_r+0x8f2>
 800b672:	f1c0 0320 	rsb	r3, r0, #32
 800b676:	2b04      	cmp	r3, #4
 800b678:	dd6b      	ble.n	800b752 <_dtoa_r+0x8e2>
 800b67a:	9b08      	ldr	r3, [sp, #32]
 800b67c:	f1c0 001c 	rsb	r0, r0, #28
 800b680:	4403      	add	r3, r0
 800b682:	4480      	add	r8, r0
 800b684:	4406      	add	r6, r0
 800b686:	9308      	str	r3, [sp, #32]
 800b688:	f1b8 0f00 	cmp.w	r8, #0
 800b68c:	dd05      	ble.n	800b69a <_dtoa_r+0x82a>
 800b68e:	4649      	mov	r1, r9
 800b690:	4642      	mov	r2, r8
 800b692:	4658      	mov	r0, fp
 800b694:	f000 fe78 	bl	800c388 <__lshift>
 800b698:	4681      	mov	r9, r0
 800b69a:	9b08      	ldr	r3, [sp, #32]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	dd05      	ble.n	800b6ac <_dtoa_r+0x83c>
 800b6a0:	4621      	mov	r1, r4
 800b6a2:	461a      	mov	r2, r3
 800b6a4:	4658      	mov	r0, fp
 800b6a6:	f000 fe6f 	bl	800c388 <__lshift>
 800b6aa:	4604      	mov	r4, r0
 800b6ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d059      	beq.n	800b766 <_dtoa_r+0x8f6>
 800b6b2:	4621      	mov	r1, r4
 800b6b4:	4648      	mov	r0, r9
 800b6b6:	f000 fed3 	bl	800c460 <__mcmp>
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	da53      	bge.n	800b766 <_dtoa_r+0x8f6>
 800b6be:	1e7b      	subs	r3, r7, #1
 800b6c0:	9304      	str	r3, [sp, #16]
 800b6c2:	4649      	mov	r1, r9
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	220a      	movs	r2, #10
 800b6c8:	4658      	mov	r0, fp
 800b6ca:	f000 fcb1 	bl	800c030 <__multadd>
 800b6ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b6d0:	4681      	mov	r9, r0
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	f000 8172 	beq.w	800b9bc <_dtoa_r+0xb4c>
 800b6d8:	2300      	movs	r3, #0
 800b6da:	4629      	mov	r1, r5
 800b6dc:	220a      	movs	r2, #10
 800b6de:	4658      	mov	r0, fp
 800b6e0:	f000 fca6 	bl	800c030 <__multadd>
 800b6e4:	9b00      	ldr	r3, [sp, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	4605      	mov	r5, r0
 800b6ea:	dc67      	bgt.n	800b7bc <_dtoa_r+0x94c>
 800b6ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6ee:	2b02      	cmp	r3, #2
 800b6f0:	dc41      	bgt.n	800b776 <_dtoa_r+0x906>
 800b6f2:	e063      	b.n	800b7bc <_dtoa_r+0x94c>
 800b6f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b6f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b6fa:	e746      	b.n	800b58a <_dtoa_r+0x71a>
 800b6fc:	9b07      	ldr	r3, [sp, #28]
 800b6fe:	1e5c      	subs	r4, r3, #1
 800b700:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b702:	42a3      	cmp	r3, r4
 800b704:	bfbf      	itttt	lt
 800b706:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b708:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b70a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b70c:	1ae3      	sublt	r3, r4, r3
 800b70e:	bfb4      	ite	lt
 800b710:	18d2      	addlt	r2, r2, r3
 800b712:	1b1c      	subge	r4, r3, r4
 800b714:	9b07      	ldr	r3, [sp, #28]
 800b716:	bfbc      	itt	lt
 800b718:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b71a:	2400      	movlt	r4, #0
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	bfb5      	itete	lt
 800b720:	eba8 0603 	sublt.w	r6, r8, r3
 800b724:	9b07      	ldrge	r3, [sp, #28]
 800b726:	2300      	movlt	r3, #0
 800b728:	4646      	movge	r6, r8
 800b72a:	e730      	b.n	800b58e <_dtoa_r+0x71e>
 800b72c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b72e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b730:	4646      	mov	r6, r8
 800b732:	e735      	b.n	800b5a0 <_dtoa_r+0x730>
 800b734:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b736:	e75c      	b.n	800b5f2 <_dtoa_r+0x782>
 800b738:	2300      	movs	r3, #0
 800b73a:	e788      	b.n	800b64e <_dtoa_r+0x7de>
 800b73c:	3fe00000 	.word	0x3fe00000
 800b740:	40240000 	.word	0x40240000
 800b744:	40140000 	.word	0x40140000
 800b748:	9b02      	ldr	r3, [sp, #8]
 800b74a:	e780      	b.n	800b64e <_dtoa_r+0x7de>
 800b74c:	2300      	movs	r3, #0
 800b74e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b750:	e782      	b.n	800b658 <_dtoa_r+0x7e8>
 800b752:	d099      	beq.n	800b688 <_dtoa_r+0x818>
 800b754:	9a08      	ldr	r2, [sp, #32]
 800b756:	331c      	adds	r3, #28
 800b758:	441a      	add	r2, r3
 800b75a:	4498      	add	r8, r3
 800b75c:	441e      	add	r6, r3
 800b75e:	9208      	str	r2, [sp, #32]
 800b760:	e792      	b.n	800b688 <_dtoa_r+0x818>
 800b762:	4603      	mov	r3, r0
 800b764:	e7f6      	b.n	800b754 <_dtoa_r+0x8e4>
 800b766:	9b07      	ldr	r3, [sp, #28]
 800b768:	9704      	str	r7, [sp, #16]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	dc20      	bgt.n	800b7b0 <_dtoa_r+0x940>
 800b76e:	9300      	str	r3, [sp, #0]
 800b770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b772:	2b02      	cmp	r3, #2
 800b774:	dd1e      	ble.n	800b7b4 <_dtoa_r+0x944>
 800b776:	9b00      	ldr	r3, [sp, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	f47f aec0 	bne.w	800b4fe <_dtoa_r+0x68e>
 800b77e:	4621      	mov	r1, r4
 800b780:	2205      	movs	r2, #5
 800b782:	4658      	mov	r0, fp
 800b784:	f000 fc54 	bl	800c030 <__multadd>
 800b788:	4601      	mov	r1, r0
 800b78a:	4604      	mov	r4, r0
 800b78c:	4648      	mov	r0, r9
 800b78e:	f000 fe67 	bl	800c460 <__mcmp>
 800b792:	2800      	cmp	r0, #0
 800b794:	f77f aeb3 	ble.w	800b4fe <_dtoa_r+0x68e>
 800b798:	4656      	mov	r6, sl
 800b79a:	2331      	movs	r3, #49	@ 0x31
 800b79c:	f806 3b01 	strb.w	r3, [r6], #1
 800b7a0:	9b04      	ldr	r3, [sp, #16]
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	9304      	str	r3, [sp, #16]
 800b7a6:	e6ae      	b.n	800b506 <_dtoa_r+0x696>
 800b7a8:	9c07      	ldr	r4, [sp, #28]
 800b7aa:	9704      	str	r7, [sp, #16]
 800b7ac:	4625      	mov	r5, r4
 800b7ae:	e7f3      	b.n	800b798 <_dtoa_r+0x928>
 800b7b0:	9b07      	ldr	r3, [sp, #28]
 800b7b2:	9300      	str	r3, [sp, #0]
 800b7b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	f000 8104 	beq.w	800b9c4 <_dtoa_r+0xb54>
 800b7bc:	2e00      	cmp	r6, #0
 800b7be:	dd05      	ble.n	800b7cc <_dtoa_r+0x95c>
 800b7c0:	4629      	mov	r1, r5
 800b7c2:	4632      	mov	r2, r6
 800b7c4:	4658      	mov	r0, fp
 800b7c6:	f000 fddf 	bl	800c388 <__lshift>
 800b7ca:	4605      	mov	r5, r0
 800b7cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d05a      	beq.n	800b888 <_dtoa_r+0xa18>
 800b7d2:	6869      	ldr	r1, [r5, #4]
 800b7d4:	4658      	mov	r0, fp
 800b7d6:	f000 fbc9 	bl	800bf6c <_Balloc>
 800b7da:	4606      	mov	r6, r0
 800b7dc:	b928      	cbnz	r0, 800b7ea <_dtoa_r+0x97a>
 800b7de:	4b84      	ldr	r3, [pc, #528]	@ (800b9f0 <_dtoa_r+0xb80>)
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b7e6:	f7ff bb5a 	b.w	800ae9e <_dtoa_r+0x2e>
 800b7ea:	692a      	ldr	r2, [r5, #16]
 800b7ec:	3202      	adds	r2, #2
 800b7ee:	0092      	lsls	r2, r2, #2
 800b7f0:	f105 010c 	add.w	r1, r5, #12
 800b7f4:	300c      	adds	r0, #12
 800b7f6:	f001 f81d 	bl	800c834 <memcpy>
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	4631      	mov	r1, r6
 800b7fe:	4658      	mov	r0, fp
 800b800:	f000 fdc2 	bl	800c388 <__lshift>
 800b804:	f10a 0301 	add.w	r3, sl, #1
 800b808:	9307      	str	r3, [sp, #28]
 800b80a:	9b00      	ldr	r3, [sp, #0]
 800b80c:	4453      	add	r3, sl
 800b80e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b810:	9b02      	ldr	r3, [sp, #8]
 800b812:	f003 0301 	and.w	r3, r3, #1
 800b816:	462f      	mov	r7, r5
 800b818:	930a      	str	r3, [sp, #40]	@ 0x28
 800b81a:	4605      	mov	r5, r0
 800b81c:	9b07      	ldr	r3, [sp, #28]
 800b81e:	4621      	mov	r1, r4
 800b820:	3b01      	subs	r3, #1
 800b822:	4648      	mov	r0, r9
 800b824:	9300      	str	r3, [sp, #0]
 800b826:	f7ff fa9a 	bl	800ad5e <quorem>
 800b82a:	4639      	mov	r1, r7
 800b82c:	9002      	str	r0, [sp, #8]
 800b82e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b832:	4648      	mov	r0, r9
 800b834:	f000 fe14 	bl	800c460 <__mcmp>
 800b838:	462a      	mov	r2, r5
 800b83a:	9008      	str	r0, [sp, #32]
 800b83c:	4621      	mov	r1, r4
 800b83e:	4658      	mov	r0, fp
 800b840:	f000 fe2a 	bl	800c498 <__mdiff>
 800b844:	68c2      	ldr	r2, [r0, #12]
 800b846:	4606      	mov	r6, r0
 800b848:	bb02      	cbnz	r2, 800b88c <_dtoa_r+0xa1c>
 800b84a:	4601      	mov	r1, r0
 800b84c:	4648      	mov	r0, r9
 800b84e:	f000 fe07 	bl	800c460 <__mcmp>
 800b852:	4602      	mov	r2, r0
 800b854:	4631      	mov	r1, r6
 800b856:	4658      	mov	r0, fp
 800b858:	920e      	str	r2, [sp, #56]	@ 0x38
 800b85a:	f000 fbc7 	bl	800bfec <_Bfree>
 800b85e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b860:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b862:	9e07      	ldr	r6, [sp, #28]
 800b864:	ea43 0102 	orr.w	r1, r3, r2
 800b868:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b86a:	4319      	orrs	r1, r3
 800b86c:	d110      	bne.n	800b890 <_dtoa_r+0xa20>
 800b86e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b872:	d029      	beq.n	800b8c8 <_dtoa_r+0xa58>
 800b874:	9b08      	ldr	r3, [sp, #32]
 800b876:	2b00      	cmp	r3, #0
 800b878:	dd02      	ble.n	800b880 <_dtoa_r+0xa10>
 800b87a:	9b02      	ldr	r3, [sp, #8]
 800b87c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b880:	9b00      	ldr	r3, [sp, #0]
 800b882:	f883 8000 	strb.w	r8, [r3]
 800b886:	e63f      	b.n	800b508 <_dtoa_r+0x698>
 800b888:	4628      	mov	r0, r5
 800b88a:	e7bb      	b.n	800b804 <_dtoa_r+0x994>
 800b88c:	2201      	movs	r2, #1
 800b88e:	e7e1      	b.n	800b854 <_dtoa_r+0x9e4>
 800b890:	9b08      	ldr	r3, [sp, #32]
 800b892:	2b00      	cmp	r3, #0
 800b894:	db04      	blt.n	800b8a0 <_dtoa_r+0xa30>
 800b896:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b898:	430b      	orrs	r3, r1
 800b89a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b89c:	430b      	orrs	r3, r1
 800b89e:	d120      	bne.n	800b8e2 <_dtoa_r+0xa72>
 800b8a0:	2a00      	cmp	r2, #0
 800b8a2:	dded      	ble.n	800b880 <_dtoa_r+0xa10>
 800b8a4:	4649      	mov	r1, r9
 800b8a6:	2201      	movs	r2, #1
 800b8a8:	4658      	mov	r0, fp
 800b8aa:	f000 fd6d 	bl	800c388 <__lshift>
 800b8ae:	4621      	mov	r1, r4
 800b8b0:	4681      	mov	r9, r0
 800b8b2:	f000 fdd5 	bl	800c460 <__mcmp>
 800b8b6:	2800      	cmp	r0, #0
 800b8b8:	dc03      	bgt.n	800b8c2 <_dtoa_r+0xa52>
 800b8ba:	d1e1      	bne.n	800b880 <_dtoa_r+0xa10>
 800b8bc:	f018 0f01 	tst.w	r8, #1
 800b8c0:	d0de      	beq.n	800b880 <_dtoa_r+0xa10>
 800b8c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b8c6:	d1d8      	bne.n	800b87a <_dtoa_r+0xa0a>
 800b8c8:	9a00      	ldr	r2, [sp, #0]
 800b8ca:	2339      	movs	r3, #57	@ 0x39
 800b8cc:	7013      	strb	r3, [r2, #0]
 800b8ce:	4633      	mov	r3, r6
 800b8d0:	461e      	mov	r6, r3
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b8d8:	2a39      	cmp	r2, #57	@ 0x39
 800b8da:	d052      	beq.n	800b982 <_dtoa_r+0xb12>
 800b8dc:	3201      	adds	r2, #1
 800b8de:	701a      	strb	r2, [r3, #0]
 800b8e0:	e612      	b.n	800b508 <_dtoa_r+0x698>
 800b8e2:	2a00      	cmp	r2, #0
 800b8e4:	dd07      	ble.n	800b8f6 <_dtoa_r+0xa86>
 800b8e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b8ea:	d0ed      	beq.n	800b8c8 <_dtoa_r+0xa58>
 800b8ec:	9a00      	ldr	r2, [sp, #0]
 800b8ee:	f108 0301 	add.w	r3, r8, #1
 800b8f2:	7013      	strb	r3, [r2, #0]
 800b8f4:	e608      	b.n	800b508 <_dtoa_r+0x698>
 800b8f6:	9b07      	ldr	r3, [sp, #28]
 800b8f8:	9a07      	ldr	r2, [sp, #28]
 800b8fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b8fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b900:	4293      	cmp	r3, r2
 800b902:	d028      	beq.n	800b956 <_dtoa_r+0xae6>
 800b904:	4649      	mov	r1, r9
 800b906:	2300      	movs	r3, #0
 800b908:	220a      	movs	r2, #10
 800b90a:	4658      	mov	r0, fp
 800b90c:	f000 fb90 	bl	800c030 <__multadd>
 800b910:	42af      	cmp	r7, r5
 800b912:	4681      	mov	r9, r0
 800b914:	f04f 0300 	mov.w	r3, #0
 800b918:	f04f 020a 	mov.w	r2, #10
 800b91c:	4639      	mov	r1, r7
 800b91e:	4658      	mov	r0, fp
 800b920:	d107      	bne.n	800b932 <_dtoa_r+0xac2>
 800b922:	f000 fb85 	bl	800c030 <__multadd>
 800b926:	4607      	mov	r7, r0
 800b928:	4605      	mov	r5, r0
 800b92a:	9b07      	ldr	r3, [sp, #28]
 800b92c:	3301      	adds	r3, #1
 800b92e:	9307      	str	r3, [sp, #28]
 800b930:	e774      	b.n	800b81c <_dtoa_r+0x9ac>
 800b932:	f000 fb7d 	bl	800c030 <__multadd>
 800b936:	4629      	mov	r1, r5
 800b938:	4607      	mov	r7, r0
 800b93a:	2300      	movs	r3, #0
 800b93c:	220a      	movs	r2, #10
 800b93e:	4658      	mov	r0, fp
 800b940:	f000 fb76 	bl	800c030 <__multadd>
 800b944:	4605      	mov	r5, r0
 800b946:	e7f0      	b.n	800b92a <_dtoa_r+0xaba>
 800b948:	9b00      	ldr	r3, [sp, #0]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	bfcc      	ite	gt
 800b94e:	461e      	movgt	r6, r3
 800b950:	2601      	movle	r6, #1
 800b952:	4456      	add	r6, sl
 800b954:	2700      	movs	r7, #0
 800b956:	4649      	mov	r1, r9
 800b958:	2201      	movs	r2, #1
 800b95a:	4658      	mov	r0, fp
 800b95c:	f000 fd14 	bl	800c388 <__lshift>
 800b960:	4621      	mov	r1, r4
 800b962:	4681      	mov	r9, r0
 800b964:	f000 fd7c 	bl	800c460 <__mcmp>
 800b968:	2800      	cmp	r0, #0
 800b96a:	dcb0      	bgt.n	800b8ce <_dtoa_r+0xa5e>
 800b96c:	d102      	bne.n	800b974 <_dtoa_r+0xb04>
 800b96e:	f018 0f01 	tst.w	r8, #1
 800b972:	d1ac      	bne.n	800b8ce <_dtoa_r+0xa5e>
 800b974:	4633      	mov	r3, r6
 800b976:	461e      	mov	r6, r3
 800b978:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b97c:	2a30      	cmp	r2, #48	@ 0x30
 800b97e:	d0fa      	beq.n	800b976 <_dtoa_r+0xb06>
 800b980:	e5c2      	b.n	800b508 <_dtoa_r+0x698>
 800b982:	459a      	cmp	sl, r3
 800b984:	d1a4      	bne.n	800b8d0 <_dtoa_r+0xa60>
 800b986:	9b04      	ldr	r3, [sp, #16]
 800b988:	3301      	adds	r3, #1
 800b98a:	9304      	str	r3, [sp, #16]
 800b98c:	2331      	movs	r3, #49	@ 0x31
 800b98e:	f88a 3000 	strb.w	r3, [sl]
 800b992:	e5b9      	b.n	800b508 <_dtoa_r+0x698>
 800b994:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b996:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b9f4 <_dtoa_r+0xb84>
 800b99a:	b11b      	cbz	r3, 800b9a4 <_dtoa_r+0xb34>
 800b99c:	f10a 0308 	add.w	r3, sl, #8
 800b9a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b9a2:	6013      	str	r3, [r2, #0]
 800b9a4:	4650      	mov	r0, sl
 800b9a6:	b019      	add	sp, #100	@ 0x64
 800b9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9ae:	2b01      	cmp	r3, #1
 800b9b0:	f77f ae37 	ble.w	800b622 <_dtoa_r+0x7b2>
 800b9b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b9b6:	930a      	str	r3, [sp, #40]	@ 0x28
 800b9b8:	2001      	movs	r0, #1
 800b9ba:	e655      	b.n	800b668 <_dtoa_r+0x7f8>
 800b9bc:	9b00      	ldr	r3, [sp, #0]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	f77f aed6 	ble.w	800b770 <_dtoa_r+0x900>
 800b9c4:	4656      	mov	r6, sl
 800b9c6:	4621      	mov	r1, r4
 800b9c8:	4648      	mov	r0, r9
 800b9ca:	f7ff f9c8 	bl	800ad5e <quorem>
 800b9ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b9d2:	f806 8b01 	strb.w	r8, [r6], #1
 800b9d6:	9b00      	ldr	r3, [sp, #0]
 800b9d8:	eba6 020a 	sub.w	r2, r6, sl
 800b9dc:	4293      	cmp	r3, r2
 800b9de:	ddb3      	ble.n	800b948 <_dtoa_r+0xad8>
 800b9e0:	4649      	mov	r1, r9
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	220a      	movs	r2, #10
 800b9e6:	4658      	mov	r0, fp
 800b9e8:	f000 fb22 	bl	800c030 <__multadd>
 800b9ec:	4681      	mov	r9, r0
 800b9ee:	e7ea      	b.n	800b9c6 <_dtoa_r+0xb56>
 800b9f0:	0800d0c0 	.word	0x0800d0c0
 800b9f4:	0800d044 	.word	0x0800d044

0800b9f8 <__ssputs_r>:
 800b9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9fc:	688e      	ldr	r6, [r1, #8]
 800b9fe:	461f      	mov	r7, r3
 800ba00:	42be      	cmp	r6, r7
 800ba02:	680b      	ldr	r3, [r1, #0]
 800ba04:	4682      	mov	sl, r0
 800ba06:	460c      	mov	r4, r1
 800ba08:	4690      	mov	r8, r2
 800ba0a:	d82d      	bhi.n	800ba68 <__ssputs_r+0x70>
 800ba0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba10:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ba14:	d026      	beq.n	800ba64 <__ssputs_r+0x6c>
 800ba16:	6965      	ldr	r5, [r4, #20]
 800ba18:	6909      	ldr	r1, [r1, #16]
 800ba1a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba1e:	eba3 0901 	sub.w	r9, r3, r1
 800ba22:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba26:	1c7b      	adds	r3, r7, #1
 800ba28:	444b      	add	r3, r9
 800ba2a:	106d      	asrs	r5, r5, #1
 800ba2c:	429d      	cmp	r5, r3
 800ba2e:	bf38      	it	cc
 800ba30:	461d      	movcc	r5, r3
 800ba32:	0553      	lsls	r3, r2, #21
 800ba34:	d527      	bpl.n	800ba86 <__ssputs_r+0x8e>
 800ba36:	4629      	mov	r1, r5
 800ba38:	f000 f960 	bl	800bcfc <_malloc_r>
 800ba3c:	4606      	mov	r6, r0
 800ba3e:	b360      	cbz	r0, 800ba9a <__ssputs_r+0xa2>
 800ba40:	6921      	ldr	r1, [r4, #16]
 800ba42:	464a      	mov	r2, r9
 800ba44:	f000 fef6 	bl	800c834 <memcpy>
 800ba48:	89a3      	ldrh	r3, [r4, #12]
 800ba4a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ba4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba52:	81a3      	strh	r3, [r4, #12]
 800ba54:	6126      	str	r6, [r4, #16]
 800ba56:	6165      	str	r5, [r4, #20]
 800ba58:	444e      	add	r6, r9
 800ba5a:	eba5 0509 	sub.w	r5, r5, r9
 800ba5e:	6026      	str	r6, [r4, #0]
 800ba60:	60a5      	str	r5, [r4, #8]
 800ba62:	463e      	mov	r6, r7
 800ba64:	42be      	cmp	r6, r7
 800ba66:	d900      	bls.n	800ba6a <__ssputs_r+0x72>
 800ba68:	463e      	mov	r6, r7
 800ba6a:	6820      	ldr	r0, [r4, #0]
 800ba6c:	4632      	mov	r2, r6
 800ba6e:	4641      	mov	r1, r8
 800ba70:	f000 fe6f 	bl	800c752 <memmove>
 800ba74:	68a3      	ldr	r3, [r4, #8]
 800ba76:	1b9b      	subs	r3, r3, r6
 800ba78:	60a3      	str	r3, [r4, #8]
 800ba7a:	6823      	ldr	r3, [r4, #0]
 800ba7c:	4433      	add	r3, r6
 800ba7e:	6023      	str	r3, [r4, #0]
 800ba80:	2000      	movs	r0, #0
 800ba82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba86:	462a      	mov	r2, r5
 800ba88:	f000 fe35 	bl	800c6f6 <_realloc_r>
 800ba8c:	4606      	mov	r6, r0
 800ba8e:	2800      	cmp	r0, #0
 800ba90:	d1e0      	bne.n	800ba54 <__ssputs_r+0x5c>
 800ba92:	6921      	ldr	r1, [r4, #16]
 800ba94:	4650      	mov	r0, sl
 800ba96:	f000 ff0d 	bl	800c8b4 <_free_r>
 800ba9a:	230c      	movs	r3, #12
 800ba9c:	f8ca 3000 	str.w	r3, [sl]
 800baa0:	89a3      	ldrh	r3, [r4, #12]
 800baa2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800baa6:	81a3      	strh	r3, [r4, #12]
 800baa8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800baac:	e7e9      	b.n	800ba82 <__ssputs_r+0x8a>
	...

0800bab0 <_svfiprintf_r>:
 800bab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab4:	4698      	mov	r8, r3
 800bab6:	898b      	ldrh	r3, [r1, #12]
 800bab8:	061b      	lsls	r3, r3, #24
 800baba:	b09d      	sub	sp, #116	@ 0x74
 800babc:	4607      	mov	r7, r0
 800babe:	460d      	mov	r5, r1
 800bac0:	4614      	mov	r4, r2
 800bac2:	d510      	bpl.n	800bae6 <_svfiprintf_r+0x36>
 800bac4:	690b      	ldr	r3, [r1, #16]
 800bac6:	b973      	cbnz	r3, 800bae6 <_svfiprintf_r+0x36>
 800bac8:	2140      	movs	r1, #64	@ 0x40
 800baca:	f000 f917 	bl	800bcfc <_malloc_r>
 800bace:	6028      	str	r0, [r5, #0]
 800bad0:	6128      	str	r0, [r5, #16]
 800bad2:	b930      	cbnz	r0, 800bae2 <_svfiprintf_r+0x32>
 800bad4:	230c      	movs	r3, #12
 800bad6:	603b      	str	r3, [r7, #0]
 800bad8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800badc:	b01d      	add	sp, #116	@ 0x74
 800bade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae2:	2340      	movs	r3, #64	@ 0x40
 800bae4:	616b      	str	r3, [r5, #20]
 800bae6:	2300      	movs	r3, #0
 800bae8:	9309      	str	r3, [sp, #36]	@ 0x24
 800baea:	2320      	movs	r3, #32
 800baec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800baf0:	f8cd 800c 	str.w	r8, [sp, #12]
 800baf4:	2330      	movs	r3, #48	@ 0x30
 800baf6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bc94 <_svfiprintf_r+0x1e4>
 800bafa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bafe:	f04f 0901 	mov.w	r9, #1
 800bb02:	4623      	mov	r3, r4
 800bb04:	469a      	mov	sl, r3
 800bb06:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb0a:	b10a      	cbz	r2, 800bb10 <_svfiprintf_r+0x60>
 800bb0c:	2a25      	cmp	r2, #37	@ 0x25
 800bb0e:	d1f9      	bne.n	800bb04 <_svfiprintf_r+0x54>
 800bb10:	ebba 0b04 	subs.w	fp, sl, r4
 800bb14:	d00b      	beq.n	800bb2e <_svfiprintf_r+0x7e>
 800bb16:	465b      	mov	r3, fp
 800bb18:	4622      	mov	r2, r4
 800bb1a:	4629      	mov	r1, r5
 800bb1c:	4638      	mov	r0, r7
 800bb1e:	f7ff ff6b 	bl	800b9f8 <__ssputs_r>
 800bb22:	3001      	adds	r0, #1
 800bb24:	f000 80a7 	beq.w	800bc76 <_svfiprintf_r+0x1c6>
 800bb28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb2a:	445a      	add	r2, fp
 800bb2c:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb2e:	f89a 3000 	ldrb.w	r3, [sl]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	f000 809f 	beq.w	800bc76 <_svfiprintf_r+0x1c6>
 800bb38:	2300      	movs	r3, #0
 800bb3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bb3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb42:	f10a 0a01 	add.w	sl, sl, #1
 800bb46:	9304      	str	r3, [sp, #16]
 800bb48:	9307      	str	r3, [sp, #28]
 800bb4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb4e:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb50:	4654      	mov	r4, sl
 800bb52:	2205      	movs	r2, #5
 800bb54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb58:	484e      	ldr	r0, [pc, #312]	@ (800bc94 <_svfiprintf_r+0x1e4>)
 800bb5a:	f7f4 fb39 	bl	80001d0 <memchr>
 800bb5e:	9a04      	ldr	r2, [sp, #16]
 800bb60:	b9d8      	cbnz	r0, 800bb9a <_svfiprintf_r+0xea>
 800bb62:	06d0      	lsls	r0, r2, #27
 800bb64:	bf44      	itt	mi
 800bb66:	2320      	movmi	r3, #32
 800bb68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb6c:	0711      	lsls	r1, r2, #28
 800bb6e:	bf44      	itt	mi
 800bb70:	232b      	movmi	r3, #43	@ 0x2b
 800bb72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb76:	f89a 3000 	ldrb.w	r3, [sl]
 800bb7a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb7c:	d015      	beq.n	800bbaa <_svfiprintf_r+0xfa>
 800bb7e:	9a07      	ldr	r2, [sp, #28]
 800bb80:	4654      	mov	r4, sl
 800bb82:	2000      	movs	r0, #0
 800bb84:	f04f 0c0a 	mov.w	ip, #10
 800bb88:	4621      	mov	r1, r4
 800bb8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb8e:	3b30      	subs	r3, #48	@ 0x30
 800bb90:	2b09      	cmp	r3, #9
 800bb92:	d94b      	bls.n	800bc2c <_svfiprintf_r+0x17c>
 800bb94:	b1b0      	cbz	r0, 800bbc4 <_svfiprintf_r+0x114>
 800bb96:	9207      	str	r2, [sp, #28]
 800bb98:	e014      	b.n	800bbc4 <_svfiprintf_r+0x114>
 800bb9a:	eba0 0308 	sub.w	r3, r0, r8
 800bb9e:	fa09 f303 	lsl.w	r3, r9, r3
 800bba2:	4313      	orrs	r3, r2
 800bba4:	9304      	str	r3, [sp, #16]
 800bba6:	46a2      	mov	sl, r4
 800bba8:	e7d2      	b.n	800bb50 <_svfiprintf_r+0xa0>
 800bbaa:	9b03      	ldr	r3, [sp, #12]
 800bbac:	1d19      	adds	r1, r3, #4
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	9103      	str	r1, [sp, #12]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	bfbb      	ittet	lt
 800bbb6:	425b      	neglt	r3, r3
 800bbb8:	f042 0202 	orrlt.w	r2, r2, #2
 800bbbc:	9307      	strge	r3, [sp, #28]
 800bbbe:	9307      	strlt	r3, [sp, #28]
 800bbc0:	bfb8      	it	lt
 800bbc2:	9204      	strlt	r2, [sp, #16]
 800bbc4:	7823      	ldrb	r3, [r4, #0]
 800bbc6:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbc8:	d10a      	bne.n	800bbe0 <_svfiprintf_r+0x130>
 800bbca:	7863      	ldrb	r3, [r4, #1]
 800bbcc:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbce:	d132      	bne.n	800bc36 <_svfiprintf_r+0x186>
 800bbd0:	9b03      	ldr	r3, [sp, #12]
 800bbd2:	1d1a      	adds	r2, r3, #4
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	9203      	str	r2, [sp, #12]
 800bbd8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bbdc:	3402      	adds	r4, #2
 800bbde:	9305      	str	r3, [sp, #20]
 800bbe0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bca4 <_svfiprintf_r+0x1f4>
 800bbe4:	7821      	ldrb	r1, [r4, #0]
 800bbe6:	2203      	movs	r2, #3
 800bbe8:	4650      	mov	r0, sl
 800bbea:	f7f4 faf1 	bl	80001d0 <memchr>
 800bbee:	b138      	cbz	r0, 800bc00 <_svfiprintf_r+0x150>
 800bbf0:	9b04      	ldr	r3, [sp, #16]
 800bbf2:	eba0 000a 	sub.w	r0, r0, sl
 800bbf6:	2240      	movs	r2, #64	@ 0x40
 800bbf8:	4082      	lsls	r2, r0
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	3401      	adds	r4, #1
 800bbfe:	9304      	str	r3, [sp, #16]
 800bc00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc04:	4824      	ldr	r0, [pc, #144]	@ (800bc98 <_svfiprintf_r+0x1e8>)
 800bc06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc0a:	2206      	movs	r2, #6
 800bc0c:	f7f4 fae0 	bl	80001d0 <memchr>
 800bc10:	2800      	cmp	r0, #0
 800bc12:	d036      	beq.n	800bc82 <_svfiprintf_r+0x1d2>
 800bc14:	4b21      	ldr	r3, [pc, #132]	@ (800bc9c <_svfiprintf_r+0x1ec>)
 800bc16:	bb1b      	cbnz	r3, 800bc60 <_svfiprintf_r+0x1b0>
 800bc18:	9b03      	ldr	r3, [sp, #12]
 800bc1a:	3307      	adds	r3, #7
 800bc1c:	f023 0307 	bic.w	r3, r3, #7
 800bc20:	3308      	adds	r3, #8
 800bc22:	9303      	str	r3, [sp, #12]
 800bc24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc26:	4433      	add	r3, r6
 800bc28:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc2a:	e76a      	b.n	800bb02 <_svfiprintf_r+0x52>
 800bc2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc30:	460c      	mov	r4, r1
 800bc32:	2001      	movs	r0, #1
 800bc34:	e7a8      	b.n	800bb88 <_svfiprintf_r+0xd8>
 800bc36:	2300      	movs	r3, #0
 800bc38:	3401      	adds	r4, #1
 800bc3a:	9305      	str	r3, [sp, #20]
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	f04f 0c0a 	mov.w	ip, #10
 800bc42:	4620      	mov	r0, r4
 800bc44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc48:	3a30      	subs	r2, #48	@ 0x30
 800bc4a:	2a09      	cmp	r2, #9
 800bc4c:	d903      	bls.n	800bc56 <_svfiprintf_r+0x1a6>
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d0c6      	beq.n	800bbe0 <_svfiprintf_r+0x130>
 800bc52:	9105      	str	r1, [sp, #20]
 800bc54:	e7c4      	b.n	800bbe0 <_svfiprintf_r+0x130>
 800bc56:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	e7f0      	b.n	800bc42 <_svfiprintf_r+0x192>
 800bc60:	ab03      	add	r3, sp, #12
 800bc62:	9300      	str	r3, [sp, #0]
 800bc64:	462a      	mov	r2, r5
 800bc66:	4b0e      	ldr	r3, [pc, #56]	@ (800bca0 <_svfiprintf_r+0x1f0>)
 800bc68:	a904      	add	r1, sp, #16
 800bc6a:	4638      	mov	r0, r7
 800bc6c:	f7fe fba4 	bl	800a3b8 <_printf_float>
 800bc70:	1c42      	adds	r2, r0, #1
 800bc72:	4606      	mov	r6, r0
 800bc74:	d1d6      	bne.n	800bc24 <_svfiprintf_r+0x174>
 800bc76:	89ab      	ldrh	r3, [r5, #12]
 800bc78:	065b      	lsls	r3, r3, #25
 800bc7a:	f53f af2d 	bmi.w	800bad8 <_svfiprintf_r+0x28>
 800bc7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc80:	e72c      	b.n	800badc <_svfiprintf_r+0x2c>
 800bc82:	ab03      	add	r3, sp, #12
 800bc84:	9300      	str	r3, [sp, #0]
 800bc86:	462a      	mov	r2, r5
 800bc88:	4b05      	ldr	r3, [pc, #20]	@ (800bca0 <_svfiprintf_r+0x1f0>)
 800bc8a:	a904      	add	r1, sp, #16
 800bc8c:	4638      	mov	r0, r7
 800bc8e:	f7fe fe2b 	bl	800a8e8 <_printf_i>
 800bc92:	e7ed      	b.n	800bc70 <_svfiprintf_r+0x1c0>
 800bc94:	0800d0d1 	.word	0x0800d0d1
 800bc98:	0800d0db 	.word	0x0800d0db
 800bc9c:	0800a3b9 	.word	0x0800a3b9
 800bca0:	0800b9f9 	.word	0x0800b9f9
 800bca4:	0800d0d7 	.word	0x0800d0d7

0800bca8 <malloc>:
 800bca8:	4b02      	ldr	r3, [pc, #8]	@ (800bcb4 <malloc+0xc>)
 800bcaa:	4601      	mov	r1, r0
 800bcac:	6818      	ldr	r0, [r3, #0]
 800bcae:	f000 b825 	b.w	800bcfc <_malloc_r>
 800bcb2:	bf00      	nop
 800bcb4:	20000114 	.word	0x20000114

0800bcb8 <sbrk_aligned>:
 800bcb8:	b570      	push	{r4, r5, r6, lr}
 800bcba:	4e0f      	ldr	r6, [pc, #60]	@ (800bcf8 <sbrk_aligned+0x40>)
 800bcbc:	460c      	mov	r4, r1
 800bcbe:	6831      	ldr	r1, [r6, #0]
 800bcc0:	4605      	mov	r5, r0
 800bcc2:	b911      	cbnz	r1, 800bcca <sbrk_aligned+0x12>
 800bcc4:	f000 fd94 	bl	800c7f0 <_sbrk_r>
 800bcc8:	6030      	str	r0, [r6, #0]
 800bcca:	4621      	mov	r1, r4
 800bccc:	4628      	mov	r0, r5
 800bcce:	f000 fd8f 	bl	800c7f0 <_sbrk_r>
 800bcd2:	1c43      	adds	r3, r0, #1
 800bcd4:	d103      	bne.n	800bcde <sbrk_aligned+0x26>
 800bcd6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bcda:	4620      	mov	r0, r4
 800bcdc:	bd70      	pop	{r4, r5, r6, pc}
 800bcde:	1cc4      	adds	r4, r0, #3
 800bce0:	f024 0403 	bic.w	r4, r4, #3
 800bce4:	42a0      	cmp	r0, r4
 800bce6:	d0f8      	beq.n	800bcda <sbrk_aligned+0x22>
 800bce8:	1a21      	subs	r1, r4, r0
 800bcea:	4628      	mov	r0, r5
 800bcec:	f000 fd80 	bl	800c7f0 <_sbrk_r>
 800bcf0:	3001      	adds	r0, #1
 800bcf2:	d1f2      	bne.n	800bcda <sbrk_aligned+0x22>
 800bcf4:	e7ef      	b.n	800bcd6 <sbrk_aligned+0x1e>
 800bcf6:	bf00      	nop
 800bcf8:	200022e8 	.word	0x200022e8

0800bcfc <_malloc_r>:
 800bcfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd00:	1ccd      	adds	r5, r1, #3
 800bd02:	f025 0503 	bic.w	r5, r5, #3
 800bd06:	3508      	adds	r5, #8
 800bd08:	2d0c      	cmp	r5, #12
 800bd0a:	bf38      	it	cc
 800bd0c:	250c      	movcc	r5, #12
 800bd0e:	2d00      	cmp	r5, #0
 800bd10:	4606      	mov	r6, r0
 800bd12:	db01      	blt.n	800bd18 <_malloc_r+0x1c>
 800bd14:	42a9      	cmp	r1, r5
 800bd16:	d904      	bls.n	800bd22 <_malloc_r+0x26>
 800bd18:	230c      	movs	r3, #12
 800bd1a:	6033      	str	r3, [r6, #0]
 800bd1c:	2000      	movs	r0, #0
 800bd1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bdf8 <_malloc_r+0xfc>
 800bd26:	f000 f915 	bl	800bf54 <__malloc_lock>
 800bd2a:	f8d8 3000 	ldr.w	r3, [r8]
 800bd2e:	461c      	mov	r4, r3
 800bd30:	bb44      	cbnz	r4, 800bd84 <_malloc_r+0x88>
 800bd32:	4629      	mov	r1, r5
 800bd34:	4630      	mov	r0, r6
 800bd36:	f7ff ffbf 	bl	800bcb8 <sbrk_aligned>
 800bd3a:	1c43      	adds	r3, r0, #1
 800bd3c:	4604      	mov	r4, r0
 800bd3e:	d158      	bne.n	800bdf2 <_malloc_r+0xf6>
 800bd40:	f8d8 4000 	ldr.w	r4, [r8]
 800bd44:	4627      	mov	r7, r4
 800bd46:	2f00      	cmp	r7, #0
 800bd48:	d143      	bne.n	800bdd2 <_malloc_r+0xd6>
 800bd4a:	2c00      	cmp	r4, #0
 800bd4c:	d04b      	beq.n	800bde6 <_malloc_r+0xea>
 800bd4e:	6823      	ldr	r3, [r4, #0]
 800bd50:	4639      	mov	r1, r7
 800bd52:	4630      	mov	r0, r6
 800bd54:	eb04 0903 	add.w	r9, r4, r3
 800bd58:	f000 fd4a 	bl	800c7f0 <_sbrk_r>
 800bd5c:	4581      	cmp	r9, r0
 800bd5e:	d142      	bne.n	800bde6 <_malloc_r+0xea>
 800bd60:	6821      	ldr	r1, [r4, #0]
 800bd62:	1a6d      	subs	r5, r5, r1
 800bd64:	4629      	mov	r1, r5
 800bd66:	4630      	mov	r0, r6
 800bd68:	f7ff ffa6 	bl	800bcb8 <sbrk_aligned>
 800bd6c:	3001      	adds	r0, #1
 800bd6e:	d03a      	beq.n	800bde6 <_malloc_r+0xea>
 800bd70:	6823      	ldr	r3, [r4, #0]
 800bd72:	442b      	add	r3, r5
 800bd74:	6023      	str	r3, [r4, #0]
 800bd76:	f8d8 3000 	ldr.w	r3, [r8]
 800bd7a:	685a      	ldr	r2, [r3, #4]
 800bd7c:	bb62      	cbnz	r2, 800bdd8 <_malloc_r+0xdc>
 800bd7e:	f8c8 7000 	str.w	r7, [r8]
 800bd82:	e00f      	b.n	800bda4 <_malloc_r+0xa8>
 800bd84:	6822      	ldr	r2, [r4, #0]
 800bd86:	1b52      	subs	r2, r2, r5
 800bd88:	d420      	bmi.n	800bdcc <_malloc_r+0xd0>
 800bd8a:	2a0b      	cmp	r2, #11
 800bd8c:	d917      	bls.n	800bdbe <_malloc_r+0xc2>
 800bd8e:	1961      	adds	r1, r4, r5
 800bd90:	42a3      	cmp	r3, r4
 800bd92:	6025      	str	r5, [r4, #0]
 800bd94:	bf18      	it	ne
 800bd96:	6059      	strne	r1, [r3, #4]
 800bd98:	6863      	ldr	r3, [r4, #4]
 800bd9a:	bf08      	it	eq
 800bd9c:	f8c8 1000 	streq.w	r1, [r8]
 800bda0:	5162      	str	r2, [r4, r5]
 800bda2:	604b      	str	r3, [r1, #4]
 800bda4:	4630      	mov	r0, r6
 800bda6:	f000 f8db 	bl	800bf60 <__malloc_unlock>
 800bdaa:	f104 000b 	add.w	r0, r4, #11
 800bdae:	1d23      	adds	r3, r4, #4
 800bdb0:	f020 0007 	bic.w	r0, r0, #7
 800bdb4:	1ac2      	subs	r2, r0, r3
 800bdb6:	bf1c      	itt	ne
 800bdb8:	1a1b      	subne	r3, r3, r0
 800bdba:	50a3      	strne	r3, [r4, r2]
 800bdbc:	e7af      	b.n	800bd1e <_malloc_r+0x22>
 800bdbe:	6862      	ldr	r2, [r4, #4]
 800bdc0:	42a3      	cmp	r3, r4
 800bdc2:	bf0c      	ite	eq
 800bdc4:	f8c8 2000 	streq.w	r2, [r8]
 800bdc8:	605a      	strne	r2, [r3, #4]
 800bdca:	e7eb      	b.n	800bda4 <_malloc_r+0xa8>
 800bdcc:	4623      	mov	r3, r4
 800bdce:	6864      	ldr	r4, [r4, #4]
 800bdd0:	e7ae      	b.n	800bd30 <_malloc_r+0x34>
 800bdd2:	463c      	mov	r4, r7
 800bdd4:	687f      	ldr	r7, [r7, #4]
 800bdd6:	e7b6      	b.n	800bd46 <_malloc_r+0x4a>
 800bdd8:	461a      	mov	r2, r3
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	42a3      	cmp	r3, r4
 800bdde:	d1fb      	bne.n	800bdd8 <_malloc_r+0xdc>
 800bde0:	2300      	movs	r3, #0
 800bde2:	6053      	str	r3, [r2, #4]
 800bde4:	e7de      	b.n	800bda4 <_malloc_r+0xa8>
 800bde6:	230c      	movs	r3, #12
 800bde8:	6033      	str	r3, [r6, #0]
 800bdea:	4630      	mov	r0, r6
 800bdec:	f000 f8b8 	bl	800bf60 <__malloc_unlock>
 800bdf0:	e794      	b.n	800bd1c <_malloc_r+0x20>
 800bdf2:	6005      	str	r5, [r0, #0]
 800bdf4:	e7d6      	b.n	800bda4 <_malloc_r+0xa8>
 800bdf6:	bf00      	nop
 800bdf8:	200022ec 	.word	0x200022ec

0800bdfc <__sflush_r>:
 800bdfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be04:	0716      	lsls	r6, r2, #28
 800be06:	4605      	mov	r5, r0
 800be08:	460c      	mov	r4, r1
 800be0a:	d454      	bmi.n	800beb6 <__sflush_r+0xba>
 800be0c:	684b      	ldr	r3, [r1, #4]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	dc02      	bgt.n	800be18 <__sflush_r+0x1c>
 800be12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800be14:	2b00      	cmp	r3, #0
 800be16:	dd48      	ble.n	800beaa <__sflush_r+0xae>
 800be18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be1a:	2e00      	cmp	r6, #0
 800be1c:	d045      	beq.n	800beaa <__sflush_r+0xae>
 800be1e:	2300      	movs	r3, #0
 800be20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800be24:	682f      	ldr	r7, [r5, #0]
 800be26:	6a21      	ldr	r1, [r4, #32]
 800be28:	602b      	str	r3, [r5, #0]
 800be2a:	d030      	beq.n	800be8e <__sflush_r+0x92>
 800be2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be2e:	89a3      	ldrh	r3, [r4, #12]
 800be30:	0759      	lsls	r1, r3, #29
 800be32:	d505      	bpl.n	800be40 <__sflush_r+0x44>
 800be34:	6863      	ldr	r3, [r4, #4]
 800be36:	1ad2      	subs	r2, r2, r3
 800be38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be3a:	b10b      	cbz	r3, 800be40 <__sflush_r+0x44>
 800be3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be3e:	1ad2      	subs	r2, r2, r3
 800be40:	2300      	movs	r3, #0
 800be42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be44:	6a21      	ldr	r1, [r4, #32]
 800be46:	4628      	mov	r0, r5
 800be48:	47b0      	blx	r6
 800be4a:	1c43      	adds	r3, r0, #1
 800be4c:	89a3      	ldrh	r3, [r4, #12]
 800be4e:	d106      	bne.n	800be5e <__sflush_r+0x62>
 800be50:	6829      	ldr	r1, [r5, #0]
 800be52:	291d      	cmp	r1, #29
 800be54:	d82b      	bhi.n	800beae <__sflush_r+0xb2>
 800be56:	4a2a      	ldr	r2, [pc, #168]	@ (800bf00 <__sflush_r+0x104>)
 800be58:	410a      	asrs	r2, r1
 800be5a:	07d6      	lsls	r6, r2, #31
 800be5c:	d427      	bmi.n	800beae <__sflush_r+0xb2>
 800be5e:	2200      	movs	r2, #0
 800be60:	6062      	str	r2, [r4, #4]
 800be62:	04d9      	lsls	r1, r3, #19
 800be64:	6922      	ldr	r2, [r4, #16]
 800be66:	6022      	str	r2, [r4, #0]
 800be68:	d504      	bpl.n	800be74 <__sflush_r+0x78>
 800be6a:	1c42      	adds	r2, r0, #1
 800be6c:	d101      	bne.n	800be72 <__sflush_r+0x76>
 800be6e:	682b      	ldr	r3, [r5, #0]
 800be70:	b903      	cbnz	r3, 800be74 <__sflush_r+0x78>
 800be72:	6560      	str	r0, [r4, #84]	@ 0x54
 800be74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800be76:	602f      	str	r7, [r5, #0]
 800be78:	b1b9      	cbz	r1, 800beaa <__sflush_r+0xae>
 800be7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800be7e:	4299      	cmp	r1, r3
 800be80:	d002      	beq.n	800be88 <__sflush_r+0x8c>
 800be82:	4628      	mov	r0, r5
 800be84:	f000 fd16 	bl	800c8b4 <_free_r>
 800be88:	2300      	movs	r3, #0
 800be8a:	6363      	str	r3, [r4, #52]	@ 0x34
 800be8c:	e00d      	b.n	800beaa <__sflush_r+0xae>
 800be8e:	2301      	movs	r3, #1
 800be90:	4628      	mov	r0, r5
 800be92:	47b0      	blx	r6
 800be94:	4602      	mov	r2, r0
 800be96:	1c50      	adds	r0, r2, #1
 800be98:	d1c9      	bne.n	800be2e <__sflush_r+0x32>
 800be9a:	682b      	ldr	r3, [r5, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d0c6      	beq.n	800be2e <__sflush_r+0x32>
 800bea0:	2b1d      	cmp	r3, #29
 800bea2:	d001      	beq.n	800bea8 <__sflush_r+0xac>
 800bea4:	2b16      	cmp	r3, #22
 800bea6:	d11e      	bne.n	800bee6 <__sflush_r+0xea>
 800bea8:	602f      	str	r7, [r5, #0]
 800beaa:	2000      	movs	r0, #0
 800beac:	e022      	b.n	800bef4 <__sflush_r+0xf8>
 800beae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800beb2:	b21b      	sxth	r3, r3
 800beb4:	e01b      	b.n	800beee <__sflush_r+0xf2>
 800beb6:	690f      	ldr	r7, [r1, #16]
 800beb8:	2f00      	cmp	r7, #0
 800beba:	d0f6      	beq.n	800beaa <__sflush_r+0xae>
 800bebc:	0793      	lsls	r3, r2, #30
 800bebe:	680e      	ldr	r6, [r1, #0]
 800bec0:	bf08      	it	eq
 800bec2:	694b      	ldreq	r3, [r1, #20]
 800bec4:	600f      	str	r7, [r1, #0]
 800bec6:	bf18      	it	ne
 800bec8:	2300      	movne	r3, #0
 800beca:	eba6 0807 	sub.w	r8, r6, r7
 800bece:	608b      	str	r3, [r1, #8]
 800bed0:	f1b8 0f00 	cmp.w	r8, #0
 800bed4:	dde9      	ble.n	800beaa <__sflush_r+0xae>
 800bed6:	6a21      	ldr	r1, [r4, #32]
 800bed8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800beda:	4643      	mov	r3, r8
 800bedc:	463a      	mov	r2, r7
 800bede:	4628      	mov	r0, r5
 800bee0:	47b0      	blx	r6
 800bee2:	2800      	cmp	r0, #0
 800bee4:	dc08      	bgt.n	800bef8 <__sflush_r+0xfc>
 800bee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800beee:	81a3      	strh	r3, [r4, #12]
 800bef0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bef8:	4407      	add	r7, r0
 800befa:	eba8 0800 	sub.w	r8, r8, r0
 800befe:	e7e7      	b.n	800bed0 <__sflush_r+0xd4>
 800bf00:	dfbffffe 	.word	0xdfbffffe

0800bf04 <_fflush_r>:
 800bf04:	b538      	push	{r3, r4, r5, lr}
 800bf06:	690b      	ldr	r3, [r1, #16]
 800bf08:	4605      	mov	r5, r0
 800bf0a:	460c      	mov	r4, r1
 800bf0c:	b913      	cbnz	r3, 800bf14 <_fflush_r+0x10>
 800bf0e:	2500      	movs	r5, #0
 800bf10:	4628      	mov	r0, r5
 800bf12:	bd38      	pop	{r3, r4, r5, pc}
 800bf14:	b118      	cbz	r0, 800bf1e <_fflush_r+0x1a>
 800bf16:	6a03      	ldr	r3, [r0, #32]
 800bf18:	b90b      	cbnz	r3, 800bf1e <_fflush_r+0x1a>
 800bf1a:	f7fe feb1 	bl	800ac80 <__sinit>
 800bf1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d0f3      	beq.n	800bf0e <_fflush_r+0xa>
 800bf26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf28:	07d0      	lsls	r0, r2, #31
 800bf2a:	d404      	bmi.n	800bf36 <_fflush_r+0x32>
 800bf2c:	0599      	lsls	r1, r3, #22
 800bf2e:	d402      	bmi.n	800bf36 <_fflush_r+0x32>
 800bf30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf32:	f7fe ff12 	bl	800ad5a <__retarget_lock_acquire_recursive>
 800bf36:	4628      	mov	r0, r5
 800bf38:	4621      	mov	r1, r4
 800bf3a:	f7ff ff5f 	bl	800bdfc <__sflush_r>
 800bf3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf40:	07da      	lsls	r2, r3, #31
 800bf42:	4605      	mov	r5, r0
 800bf44:	d4e4      	bmi.n	800bf10 <_fflush_r+0xc>
 800bf46:	89a3      	ldrh	r3, [r4, #12]
 800bf48:	059b      	lsls	r3, r3, #22
 800bf4a:	d4e1      	bmi.n	800bf10 <_fflush_r+0xc>
 800bf4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf4e:	f7fe ff05 	bl	800ad5c <__retarget_lock_release_recursive>
 800bf52:	e7dd      	b.n	800bf10 <_fflush_r+0xc>

0800bf54 <__malloc_lock>:
 800bf54:	4801      	ldr	r0, [pc, #4]	@ (800bf5c <__malloc_lock+0x8>)
 800bf56:	f7fe bf00 	b.w	800ad5a <__retarget_lock_acquire_recursive>
 800bf5a:	bf00      	nop
 800bf5c:	200022e4 	.word	0x200022e4

0800bf60 <__malloc_unlock>:
 800bf60:	4801      	ldr	r0, [pc, #4]	@ (800bf68 <__malloc_unlock+0x8>)
 800bf62:	f7fe befb 	b.w	800ad5c <__retarget_lock_release_recursive>
 800bf66:	bf00      	nop
 800bf68:	200022e4 	.word	0x200022e4

0800bf6c <_Balloc>:
 800bf6c:	b570      	push	{r4, r5, r6, lr}
 800bf6e:	69c6      	ldr	r6, [r0, #28]
 800bf70:	4604      	mov	r4, r0
 800bf72:	460d      	mov	r5, r1
 800bf74:	b976      	cbnz	r6, 800bf94 <_Balloc+0x28>
 800bf76:	2010      	movs	r0, #16
 800bf78:	f7ff fe96 	bl	800bca8 <malloc>
 800bf7c:	4602      	mov	r2, r0
 800bf7e:	61e0      	str	r0, [r4, #28]
 800bf80:	b920      	cbnz	r0, 800bf8c <_Balloc+0x20>
 800bf82:	4b18      	ldr	r3, [pc, #96]	@ (800bfe4 <_Balloc+0x78>)
 800bf84:	4818      	ldr	r0, [pc, #96]	@ (800bfe8 <_Balloc+0x7c>)
 800bf86:	216b      	movs	r1, #107	@ 0x6b
 800bf88:	f000 fc62 	bl	800c850 <__assert_func>
 800bf8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf90:	6006      	str	r6, [r0, #0]
 800bf92:	60c6      	str	r6, [r0, #12]
 800bf94:	69e6      	ldr	r6, [r4, #28]
 800bf96:	68f3      	ldr	r3, [r6, #12]
 800bf98:	b183      	cbz	r3, 800bfbc <_Balloc+0x50>
 800bf9a:	69e3      	ldr	r3, [r4, #28]
 800bf9c:	68db      	ldr	r3, [r3, #12]
 800bf9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bfa2:	b9b8      	cbnz	r0, 800bfd4 <_Balloc+0x68>
 800bfa4:	2101      	movs	r1, #1
 800bfa6:	fa01 f605 	lsl.w	r6, r1, r5
 800bfaa:	1d72      	adds	r2, r6, #5
 800bfac:	0092      	lsls	r2, r2, #2
 800bfae:	4620      	mov	r0, r4
 800bfb0:	f000 fc6c 	bl	800c88c <_calloc_r>
 800bfb4:	b160      	cbz	r0, 800bfd0 <_Balloc+0x64>
 800bfb6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bfba:	e00e      	b.n	800bfda <_Balloc+0x6e>
 800bfbc:	2221      	movs	r2, #33	@ 0x21
 800bfbe:	2104      	movs	r1, #4
 800bfc0:	4620      	mov	r0, r4
 800bfc2:	f000 fc63 	bl	800c88c <_calloc_r>
 800bfc6:	69e3      	ldr	r3, [r4, #28]
 800bfc8:	60f0      	str	r0, [r6, #12]
 800bfca:	68db      	ldr	r3, [r3, #12]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d1e4      	bne.n	800bf9a <_Balloc+0x2e>
 800bfd0:	2000      	movs	r0, #0
 800bfd2:	bd70      	pop	{r4, r5, r6, pc}
 800bfd4:	6802      	ldr	r2, [r0, #0]
 800bfd6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bfda:	2300      	movs	r3, #0
 800bfdc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bfe0:	e7f7      	b.n	800bfd2 <_Balloc+0x66>
 800bfe2:	bf00      	nop
 800bfe4:	0800d051 	.word	0x0800d051
 800bfe8:	0800d0e2 	.word	0x0800d0e2

0800bfec <_Bfree>:
 800bfec:	b570      	push	{r4, r5, r6, lr}
 800bfee:	69c6      	ldr	r6, [r0, #28]
 800bff0:	4605      	mov	r5, r0
 800bff2:	460c      	mov	r4, r1
 800bff4:	b976      	cbnz	r6, 800c014 <_Bfree+0x28>
 800bff6:	2010      	movs	r0, #16
 800bff8:	f7ff fe56 	bl	800bca8 <malloc>
 800bffc:	4602      	mov	r2, r0
 800bffe:	61e8      	str	r0, [r5, #28]
 800c000:	b920      	cbnz	r0, 800c00c <_Bfree+0x20>
 800c002:	4b09      	ldr	r3, [pc, #36]	@ (800c028 <_Bfree+0x3c>)
 800c004:	4809      	ldr	r0, [pc, #36]	@ (800c02c <_Bfree+0x40>)
 800c006:	218f      	movs	r1, #143	@ 0x8f
 800c008:	f000 fc22 	bl	800c850 <__assert_func>
 800c00c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c010:	6006      	str	r6, [r0, #0]
 800c012:	60c6      	str	r6, [r0, #12]
 800c014:	b13c      	cbz	r4, 800c026 <_Bfree+0x3a>
 800c016:	69eb      	ldr	r3, [r5, #28]
 800c018:	6862      	ldr	r2, [r4, #4]
 800c01a:	68db      	ldr	r3, [r3, #12]
 800c01c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c020:	6021      	str	r1, [r4, #0]
 800c022:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c026:	bd70      	pop	{r4, r5, r6, pc}
 800c028:	0800d051 	.word	0x0800d051
 800c02c:	0800d0e2 	.word	0x0800d0e2

0800c030 <__multadd>:
 800c030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c034:	690d      	ldr	r5, [r1, #16]
 800c036:	4607      	mov	r7, r0
 800c038:	460c      	mov	r4, r1
 800c03a:	461e      	mov	r6, r3
 800c03c:	f101 0c14 	add.w	ip, r1, #20
 800c040:	2000      	movs	r0, #0
 800c042:	f8dc 3000 	ldr.w	r3, [ip]
 800c046:	b299      	uxth	r1, r3
 800c048:	fb02 6101 	mla	r1, r2, r1, r6
 800c04c:	0c1e      	lsrs	r6, r3, #16
 800c04e:	0c0b      	lsrs	r3, r1, #16
 800c050:	fb02 3306 	mla	r3, r2, r6, r3
 800c054:	b289      	uxth	r1, r1
 800c056:	3001      	adds	r0, #1
 800c058:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c05c:	4285      	cmp	r5, r0
 800c05e:	f84c 1b04 	str.w	r1, [ip], #4
 800c062:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c066:	dcec      	bgt.n	800c042 <__multadd+0x12>
 800c068:	b30e      	cbz	r6, 800c0ae <__multadd+0x7e>
 800c06a:	68a3      	ldr	r3, [r4, #8]
 800c06c:	42ab      	cmp	r3, r5
 800c06e:	dc19      	bgt.n	800c0a4 <__multadd+0x74>
 800c070:	6861      	ldr	r1, [r4, #4]
 800c072:	4638      	mov	r0, r7
 800c074:	3101      	adds	r1, #1
 800c076:	f7ff ff79 	bl	800bf6c <_Balloc>
 800c07a:	4680      	mov	r8, r0
 800c07c:	b928      	cbnz	r0, 800c08a <__multadd+0x5a>
 800c07e:	4602      	mov	r2, r0
 800c080:	4b0c      	ldr	r3, [pc, #48]	@ (800c0b4 <__multadd+0x84>)
 800c082:	480d      	ldr	r0, [pc, #52]	@ (800c0b8 <__multadd+0x88>)
 800c084:	21ba      	movs	r1, #186	@ 0xba
 800c086:	f000 fbe3 	bl	800c850 <__assert_func>
 800c08a:	6922      	ldr	r2, [r4, #16]
 800c08c:	3202      	adds	r2, #2
 800c08e:	f104 010c 	add.w	r1, r4, #12
 800c092:	0092      	lsls	r2, r2, #2
 800c094:	300c      	adds	r0, #12
 800c096:	f000 fbcd 	bl	800c834 <memcpy>
 800c09a:	4621      	mov	r1, r4
 800c09c:	4638      	mov	r0, r7
 800c09e:	f7ff ffa5 	bl	800bfec <_Bfree>
 800c0a2:	4644      	mov	r4, r8
 800c0a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c0a8:	3501      	adds	r5, #1
 800c0aa:	615e      	str	r6, [r3, #20]
 800c0ac:	6125      	str	r5, [r4, #16]
 800c0ae:	4620      	mov	r0, r4
 800c0b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0b4:	0800d0c0 	.word	0x0800d0c0
 800c0b8:	0800d0e2 	.word	0x0800d0e2

0800c0bc <__hi0bits>:
 800c0bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	bf36      	itet	cc
 800c0c4:	0403      	lslcc	r3, r0, #16
 800c0c6:	2000      	movcs	r0, #0
 800c0c8:	2010      	movcc	r0, #16
 800c0ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c0ce:	bf3c      	itt	cc
 800c0d0:	021b      	lslcc	r3, r3, #8
 800c0d2:	3008      	addcc	r0, #8
 800c0d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c0d8:	bf3c      	itt	cc
 800c0da:	011b      	lslcc	r3, r3, #4
 800c0dc:	3004      	addcc	r0, #4
 800c0de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0e2:	bf3c      	itt	cc
 800c0e4:	009b      	lslcc	r3, r3, #2
 800c0e6:	3002      	addcc	r0, #2
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	db05      	blt.n	800c0f8 <__hi0bits+0x3c>
 800c0ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c0f0:	f100 0001 	add.w	r0, r0, #1
 800c0f4:	bf08      	it	eq
 800c0f6:	2020      	moveq	r0, #32
 800c0f8:	4770      	bx	lr

0800c0fa <__lo0bits>:
 800c0fa:	6803      	ldr	r3, [r0, #0]
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	f013 0007 	ands.w	r0, r3, #7
 800c102:	d00b      	beq.n	800c11c <__lo0bits+0x22>
 800c104:	07d9      	lsls	r1, r3, #31
 800c106:	d421      	bmi.n	800c14c <__lo0bits+0x52>
 800c108:	0798      	lsls	r0, r3, #30
 800c10a:	bf49      	itett	mi
 800c10c:	085b      	lsrmi	r3, r3, #1
 800c10e:	089b      	lsrpl	r3, r3, #2
 800c110:	2001      	movmi	r0, #1
 800c112:	6013      	strmi	r3, [r2, #0]
 800c114:	bf5c      	itt	pl
 800c116:	6013      	strpl	r3, [r2, #0]
 800c118:	2002      	movpl	r0, #2
 800c11a:	4770      	bx	lr
 800c11c:	b299      	uxth	r1, r3
 800c11e:	b909      	cbnz	r1, 800c124 <__lo0bits+0x2a>
 800c120:	0c1b      	lsrs	r3, r3, #16
 800c122:	2010      	movs	r0, #16
 800c124:	b2d9      	uxtb	r1, r3
 800c126:	b909      	cbnz	r1, 800c12c <__lo0bits+0x32>
 800c128:	3008      	adds	r0, #8
 800c12a:	0a1b      	lsrs	r3, r3, #8
 800c12c:	0719      	lsls	r1, r3, #28
 800c12e:	bf04      	itt	eq
 800c130:	091b      	lsreq	r3, r3, #4
 800c132:	3004      	addeq	r0, #4
 800c134:	0799      	lsls	r1, r3, #30
 800c136:	bf04      	itt	eq
 800c138:	089b      	lsreq	r3, r3, #2
 800c13a:	3002      	addeq	r0, #2
 800c13c:	07d9      	lsls	r1, r3, #31
 800c13e:	d403      	bmi.n	800c148 <__lo0bits+0x4e>
 800c140:	085b      	lsrs	r3, r3, #1
 800c142:	f100 0001 	add.w	r0, r0, #1
 800c146:	d003      	beq.n	800c150 <__lo0bits+0x56>
 800c148:	6013      	str	r3, [r2, #0]
 800c14a:	4770      	bx	lr
 800c14c:	2000      	movs	r0, #0
 800c14e:	4770      	bx	lr
 800c150:	2020      	movs	r0, #32
 800c152:	4770      	bx	lr

0800c154 <__i2b>:
 800c154:	b510      	push	{r4, lr}
 800c156:	460c      	mov	r4, r1
 800c158:	2101      	movs	r1, #1
 800c15a:	f7ff ff07 	bl	800bf6c <_Balloc>
 800c15e:	4602      	mov	r2, r0
 800c160:	b928      	cbnz	r0, 800c16e <__i2b+0x1a>
 800c162:	4b05      	ldr	r3, [pc, #20]	@ (800c178 <__i2b+0x24>)
 800c164:	4805      	ldr	r0, [pc, #20]	@ (800c17c <__i2b+0x28>)
 800c166:	f240 1145 	movw	r1, #325	@ 0x145
 800c16a:	f000 fb71 	bl	800c850 <__assert_func>
 800c16e:	2301      	movs	r3, #1
 800c170:	6144      	str	r4, [r0, #20]
 800c172:	6103      	str	r3, [r0, #16]
 800c174:	bd10      	pop	{r4, pc}
 800c176:	bf00      	nop
 800c178:	0800d0c0 	.word	0x0800d0c0
 800c17c:	0800d0e2 	.word	0x0800d0e2

0800c180 <__multiply>:
 800c180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c184:	4614      	mov	r4, r2
 800c186:	690a      	ldr	r2, [r1, #16]
 800c188:	6923      	ldr	r3, [r4, #16]
 800c18a:	429a      	cmp	r2, r3
 800c18c:	bfa8      	it	ge
 800c18e:	4623      	movge	r3, r4
 800c190:	460f      	mov	r7, r1
 800c192:	bfa4      	itt	ge
 800c194:	460c      	movge	r4, r1
 800c196:	461f      	movge	r7, r3
 800c198:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c19c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c1a0:	68a3      	ldr	r3, [r4, #8]
 800c1a2:	6861      	ldr	r1, [r4, #4]
 800c1a4:	eb0a 0609 	add.w	r6, sl, r9
 800c1a8:	42b3      	cmp	r3, r6
 800c1aa:	b085      	sub	sp, #20
 800c1ac:	bfb8      	it	lt
 800c1ae:	3101      	addlt	r1, #1
 800c1b0:	f7ff fedc 	bl	800bf6c <_Balloc>
 800c1b4:	b930      	cbnz	r0, 800c1c4 <__multiply+0x44>
 800c1b6:	4602      	mov	r2, r0
 800c1b8:	4b44      	ldr	r3, [pc, #272]	@ (800c2cc <__multiply+0x14c>)
 800c1ba:	4845      	ldr	r0, [pc, #276]	@ (800c2d0 <__multiply+0x150>)
 800c1bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c1c0:	f000 fb46 	bl	800c850 <__assert_func>
 800c1c4:	f100 0514 	add.w	r5, r0, #20
 800c1c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c1cc:	462b      	mov	r3, r5
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	4543      	cmp	r3, r8
 800c1d2:	d321      	bcc.n	800c218 <__multiply+0x98>
 800c1d4:	f107 0114 	add.w	r1, r7, #20
 800c1d8:	f104 0214 	add.w	r2, r4, #20
 800c1dc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c1e0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c1e4:	9302      	str	r3, [sp, #8]
 800c1e6:	1b13      	subs	r3, r2, r4
 800c1e8:	3b15      	subs	r3, #21
 800c1ea:	f023 0303 	bic.w	r3, r3, #3
 800c1ee:	3304      	adds	r3, #4
 800c1f0:	f104 0715 	add.w	r7, r4, #21
 800c1f4:	42ba      	cmp	r2, r7
 800c1f6:	bf38      	it	cc
 800c1f8:	2304      	movcc	r3, #4
 800c1fa:	9301      	str	r3, [sp, #4]
 800c1fc:	9b02      	ldr	r3, [sp, #8]
 800c1fe:	9103      	str	r1, [sp, #12]
 800c200:	428b      	cmp	r3, r1
 800c202:	d80c      	bhi.n	800c21e <__multiply+0x9e>
 800c204:	2e00      	cmp	r6, #0
 800c206:	dd03      	ble.n	800c210 <__multiply+0x90>
 800c208:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d05b      	beq.n	800c2c8 <__multiply+0x148>
 800c210:	6106      	str	r6, [r0, #16]
 800c212:	b005      	add	sp, #20
 800c214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c218:	f843 2b04 	str.w	r2, [r3], #4
 800c21c:	e7d8      	b.n	800c1d0 <__multiply+0x50>
 800c21e:	f8b1 a000 	ldrh.w	sl, [r1]
 800c222:	f1ba 0f00 	cmp.w	sl, #0
 800c226:	d024      	beq.n	800c272 <__multiply+0xf2>
 800c228:	f104 0e14 	add.w	lr, r4, #20
 800c22c:	46a9      	mov	r9, r5
 800c22e:	f04f 0c00 	mov.w	ip, #0
 800c232:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c236:	f8d9 3000 	ldr.w	r3, [r9]
 800c23a:	fa1f fb87 	uxth.w	fp, r7
 800c23e:	b29b      	uxth	r3, r3
 800c240:	fb0a 330b 	mla	r3, sl, fp, r3
 800c244:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c248:	f8d9 7000 	ldr.w	r7, [r9]
 800c24c:	4463      	add	r3, ip
 800c24e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c252:	fb0a c70b 	mla	r7, sl, fp, ip
 800c256:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c25a:	b29b      	uxth	r3, r3
 800c25c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c260:	4572      	cmp	r2, lr
 800c262:	f849 3b04 	str.w	r3, [r9], #4
 800c266:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c26a:	d8e2      	bhi.n	800c232 <__multiply+0xb2>
 800c26c:	9b01      	ldr	r3, [sp, #4]
 800c26e:	f845 c003 	str.w	ip, [r5, r3]
 800c272:	9b03      	ldr	r3, [sp, #12]
 800c274:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c278:	3104      	adds	r1, #4
 800c27a:	f1b9 0f00 	cmp.w	r9, #0
 800c27e:	d021      	beq.n	800c2c4 <__multiply+0x144>
 800c280:	682b      	ldr	r3, [r5, #0]
 800c282:	f104 0c14 	add.w	ip, r4, #20
 800c286:	46ae      	mov	lr, r5
 800c288:	f04f 0a00 	mov.w	sl, #0
 800c28c:	f8bc b000 	ldrh.w	fp, [ip]
 800c290:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c294:	fb09 770b 	mla	r7, r9, fp, r7
 800c298:	4457      	add	r7, sl
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c2a0:	f84e 3b04 	str.w	r3, [lr], #4
 800c2a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c2a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c2ac:	f8be 3000 	ldrh.w	r3, [lr]
 800c2b0:	fb09 330a 	mla	r3, r9, sl, r3
 800c2b4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c2b8:	4562      	cmp	r2, ip
 800c2ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c2be:	d8e5      	bhi.n	800c28c <__multiply+0x10c>
 800c2c0:	9f01      	ldr	r7, [sp, #4]
 800c2c2:	51eb      	str	r3, [r5, r7]
 800c2c4:	3504      	adds	r5, #4
 800c2c6:	e799      	b.n	800c1fc <__multiply+0x7c>
 800c2c8:	3e01      	subs	r6, #1
 800c2ca:	e79b      	b.n	800c204 <__multiply+0x84>
 800c2cc:	0800d0c0 	.word	0x0800d0c0
 800c2d0:	0800d0e2 	.word	0x0800d0e2

0800c2d4 <__pow5mult>:
 800c2d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2d8:	4615      	mov	r5, r2
 800c2da:	f012 0203 	ands.w	r2, r2, #3
 800c2de:	4607      	mov	r7, r0
 800c2e0:	460e      	mov	r6, r1
 800c2e2:	d007      	beq.n	800c2f4 <__pow5mult+0x20>
 800c2e4:	4c25      	ldr	r4, [pc, #148]	@ (800c37c <__pow5mult+0xa8>)
 800c2e6:	3a01      	subs	r2, #1
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c2ee:	f7ff fe9f 	bl	800c030 <__multadd>
 800c2f2:	4606      	mov	r6, r0
 800c2f4:	10ad      	asrs	r5, r5, #2
 800c2f6:	d03d      	beq.n	800c374 <__pow5mult+0xa0>
 800c2f8:	69fc      	ldr	r4, [r7, #28]
 800c2fa:	b97c      	cbnz	r4, 800c31c <__pow5mult+0x48>
 800c2fc:	2010      	movs	r0, #16
 800c2fe:	f7ff fcd3 	bl	800bca8 <malloc>
 800c302:	4602      	mov	r2, r0
 800c304:	61f8      	str	r0, [r7, #28]
 800c306:	b928      	cbnz	r0, 800c314 <__pow5mult+0x40>
 800c308:	4b1d      	ldr	r3, [pc, #116]	@ (800c380 <__pow5mult+0xac>)
 800c30a:	481e      	ldr	r0, [pc, #120]	@ (800c384 <__pow5mult+0xb0>)
 800c30c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c310:	f000 fa9e 	bl	800c850 <__assert_func>
 800c314:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c318:	6004      	str	r4, [r0, #0]
 800c31a:	60c4      	str	r4, [r0, #12]
 800c31c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c320:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c324:	b94c      	cbnz	r4, 800c33a <__pow5mult+0x66>
 800c326:	f240 2171 	movw	r1, #625	@ 0x271
 800c32a:	4638      	mov	r0, r7
 800c32c:	f7ff ff12 	bl	800c154 <__i2b>
 800c330:	2300      	movs	r3, #0
 800c332:	f8c8 0008 	str.w	r0, [r8, #8]
 800c336:	4604      	mov	r4, r0
 800c338:	6003      	str	r3, [r0, #0]
 800c33a:	f04f 0900 	mov.w	r9, #0
 800c33e:	07eb      	lsls	r3, r5, #31
 800c340:	d50a      	bpl.n	800c358 <__pow5mult+0x84>
 800c342:	4631      	mov	r1, r6
 800c344:	4622      	mov	r2, r4
 800c346:	4638      	mov	r0, r7
 800c348:	f7ff ff1a 	bl	800c180 <__multiply>
 800c34c:	4631      	mov	r1, r6
 800c34e:	4680      	mov	r8, r0
 800c350:	4638      	mov	r0, r7
 800c352:	f7ff fe4b 	bl	800bfec <_Bfree>
 800c356:	4646      	mov	r6, r8
 800c358:	106d      	asrs	r5, r5, #1
 800c35a:	d00b      	beq.n	800c374 <__pow5mult+0xa0>
 800c35c:	6820      	ldr	r0, [r4, #0]
 800c35e:	b938      	cbnz	r0, 800c370 <__pow5mult+0x9c>
 800c360:	4622      	mov	r2, r4
 800c362:	4621      	mov	r1, r4
 800c364:	4638      	mov	r0, r7
 800c366:	f7ff ff0b 	bl	800c180 <__multiply>
 800c36a:	6020      	str	r0, [r4, #0]
 800c36c:	f8c0 9000 	str.w	r9, [r0]
 800c370:	4604      	mov	r4, r0
 800c372:	e7e4      	b.n	800c33e <__pow5mult+0x6a>
 800c374:	4630      	mov	r0, r6
 800c376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c37a:	bf00      	nop
 800c37c:	0800d13c 	.word	0x0800d13c
 800c380:	0800d051 	.word	0x0800d051
 800c384:	0800d0e2 	.word	0x0800d0e2

0800c388 <__lshift>:
 800c388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c38c:	460c      	mov	r4, r1
 800c38e:	6849      	ldr	r1, [r1, #4]
 800c390:	6923      	ldr	r3, [r4, #16]
 800c392:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c396:	68a3      	ldr	r3, [r4, #8]
 800c398:	4607      	mov	r7, r0
 800c39a:	4691      	mov	r9, r2
 800c39c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c3a0:	f108 0601 	add.w	r6, r8, #1
 800c3a4:	42b3      	cmp	r3, r6
 800c3a6:	db0b      	blt.n	800c3c0 <__lshift+0x38>
 800c3a8:	4638      	mov	r0, r7
 800c3aa:	f7ff fddf 	bl	800bf6c <_Balloc>
 800c3ae:	4605      	mov	r5, r0
 800c3b0:	b948      	cbnz	r0, 800c3c6 <__lshift+0x3e>
 800c3b2:	4602      	mov	r2, r0
 800c3b4:	4b28      	ldr	r3, [pc, #160]	@ (800c458 <__lshift+0xd0>)
 800c3b6:	4829      	ldr	r0, [pc, #164]	@ (800c45c <__lshift+0xd4>)
 800c3b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c3bc:	f000 fa48 	bl	800c850 <__assert_func>
 800c3c0:	3101      	adds	r1, #1
 800c3c2:	005b      	lsls	r3, r3, #1
 800c3c4:	e7ee      	b.n	800c3a4 <__lshift+0x1c>
 800c3c6:	2300      	movs	r3, #0
 800c3c8:	f100 0114 	add.w	r1, r0, #20
 800c3cc:	f100 0210 	add.w	r2, r0, #16
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	4553      	cmp	r3, sl
 800c3d4:	db33      	blt.n	800c43e <__lshift+0xb6>
 800c3d6:	6920      	ldr	r0, [r4, #16]
 800c3d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c3dc:	f104 0314 	add.w	r3, r4, #20
 800c3e0:	f019 091f 	ands.w	r9, r9, #31
 800c3e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c3e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c3ec:	d02b      	beq.n	800c446 <__lshift+0xbe>
 800c3ee:	f1c9 0e20 	rsb	lr, r9, #32
 800c3f2:	468a      	mov	sl, r1
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	6818      	ldr	r0, [r3, #0]
 800c3f8:	fa00 f009 	lsl.w	r0, r0, r9
 800c3fc:	4310      	orrs	r0, r2
 800c3fe:	f84a 0b04 	str.w	r0, [sl], #4
 800c402:	f853 2b04 	ldr.w	r2, [r3], #4
 800c406:	459c      	cmp	ip, r3
 800c408:	fa22 f20e 	lsr.w	r2, r2, lr
 800c40c:	d8f3      	bhi.n	800c3f6 <__lshift+0x6e>
 800c40e:	ebac 0304 	sub.w	r3, ip, r4
 800c412:	3b15      	subs	r3, #21
 800c414:	f023 0303 	bic.w	r3, r3, #3
 800c418:	3304      	adds	r3, #4
 800c41a:	f104 0015 	add.w	r0, r4, #21
 800c41e:	4584      	cmp	ip, r0
 800c420:	bf38      	it	cc
 800c422:	2304      	movcc	r3, #4
 800c424:	50ca      	str	r2, [r1, r3]
 800c426:	b10a      	cbz	r2, 800c42c <__lshift+0xa4>
 800c428:	f108 0602 	add.w	r6, r8, #2
 800c42c:	3e01      	subs	r6, #1
 800c42e:	4638      	mov	r0, r7
 800c430:	612e      	str	r6, [r5, #16]
 800c432:	4621      	mov	r1, r4
 800c434:	f7ff fdda 	bl	800bfec <_Bfree>
 800c438:	4628      	mov	r0, r5
 800c43a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c43e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c442:	3301      	adds	r3, #1
 800c444:	e7c5      	b.n	800c3d2 <__lshift+0x4a>
 800c446:	3904      	subs	r1, #4
 800c448:	f853 2b04 	ldr.w	r2, [r3], #4
 800c44c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c450:	459c      	cmp	ip, r3
 800c452:	d8f9      	bhi.n	800c448 <__lshift+0xc0>
 800c454:	e7ea      	b.n	800c42c <__lshift+0xa4>
 800c456:	bf00      	nop
 800c458:	0800d0c0 	.word	0x0800d0c0
 800c45c:	0800d0e2 	.word	0x0800d0e2

0800c460 <__mcmp>:
 800c460:	690a      	ldr	r2, [r1, #16]
 800c462:	4603      	mov	r3, r0
 800c464:	6900      	ldr	r0, [r0, #16]
 800c466:	1a80      	subs	r0, r0, r2
 800c468:	b530      	push	{r4, r5, lr}
 800c46a:	d10e      	bne.n	800c48a <__mcmp+0x2a>
 800c46c:	3314      	adds	r3, #20
 800c46e:	3114      	adds	r1, #20
 800c470:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c474:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c478:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c47c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c480:	4295      	cmp	r5, r2
 800c482:	d003      	beq.n	800c48c <__mcmp+0x2c>
 800c484:	d205      	bcs.n	800c492 <__mcmp+0x32>
 800c486:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c48a:	bd30      	pop	{r4, r5, pc}
 800c48c:	42a3      	cmp	r3, r4
 800c48e:	d3f3      	bcc.n	800c478 <__mcmp+0x18>
 800c490:	e7fb      	b.n	800c48a <__mcmp+0x2a>
 800c492:	2001      	movs	r0, #1
 800c494:	e7f9      	b.n	800c48a <__mcmp+0x2a>
	...

0800c498 <__mdiff>:
 800c498:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c49c:	4689      	mov	r9, r1
 800c49e:	4606      	mov	r6, r0
 800c4a0:	4611      	mov	r1, r2
 800c4a2:	4648      	mov	r0, r9
 800c4a4:	4614      	mov	r4, r2
 800c4a6:	f7ff ffdb 	bl	800c460 <__mcmp>
 800c4aa:	1e05      	subs	r5, r0, #0
 800c4ac:	d112      	bne.n	800c4d4 <__mdiff+0x3c>
 800c4ae:	4629      	mov	r1, r5
 800c4b0:	4630      	mov	r0, r6
 800c4b2:	f7ff fd5b 	bl	800bf6c <_Balloc>
 800c4b6:	4602      	mov	r2, r0
 800c4b8:	b928      	cbnz	r0, 800c4c6 <__mdiff+0x2e>
 800c4ba:	4b3f      	ldr	r3, [pc, #252]	@ (800c5b8 <__mdiff+0x120>)
 800c4bc:	f240 2137 	movw	r1, #567	@ 0x237
 800c4c0:	483e      	ldr	r0, [pc, #248]	@ (800c5bc <__mdiff+0x124>)
 800c4c2:	f000 f9c5 	bl	800c850 <__assert_func>
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c4cc:	4610      	mov	r0, r2
 800c4ce:	b003      	add	sp, #12
 800c4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4d4:	bfbc      	itt	lt
 800c4d6:	464b      	movlt	r3, r9
 800c4d8:	46a1      	movlt	r9, r4
 800c4da:	4630      	mov	r0, r6
 800c4dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c4e0:	bfba      	itte	lt
 800c4e2:	461c      	movlt	r4, r3
 800c4e4:	2501      	movlt	r5, #1
 800c4e6:	2500      	movge	r5, #0
 800c4e8:	f7ff fd40 	bl	800bf6c <_Balloc>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	b918      	cbnz	r0, 800c4f8 <__mdiff+0x60>
 800c4f0:	4b31      	ldr	r3, [pc, #196]	@ (800c5b8 <__mdiff+0x120>)
 800c4f2:	f240 2145 	movw	r1, #581	@ 0x245
 800c4f6:	e7e3      	b.n	800c4c0 <__mdiff+0x28>
 800c4f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c4fc:	6926      	ldr	r6, [r4, #16]
 800c4fe:	60c5      	str	r5, [r0, #12]
 800c500:	f109 0310 	add.w	r3, r9, #16
 800c504:	f109 0514 	add.w	r5, r9, #20
 800c508:	f104 0e14 	add.w	lr, r4, #20
 800c50c:	f100 0b14 	add.w	fp, r0, #20
 800c510:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c514:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c518:	9301      	str	r3, [sp, #4]
 800c51a:	46d9      	mov	r9, fp
 800c51c:	f04f 0c00 	mov.w	ip, #0
 800c520:	9b01      	ldr	r3, [sp, #4]
 800c522:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c526:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c52a:	9301      	str	r3, [sp, #4]
 800c52c:	fa1f f38a 	uxth.w	r3, sl
 800c530:	4619      	mov	r1, r3
 800c532:	b283      	uxth	r3, r0
 800c534:	1acb      	subs	r3, r1, r3
 800c536:	0c00      	lsrs	r0, r0, #16
 800c538:	4463      	add	r3, ip
 800c53a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c53e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c542:	b29b      	uxth	r3, r3
 800c544:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c548:	4576      	cmp	r6, lr
 800c54a:	f849 3b04 	str.w	r3, [r9], #4
 800c54e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c552:	d8e5      	bhi.n	800c520 <__mdiff+0x88>
 800c554:	1b33      	subs	r3, r6, r4
 800c556:	3b15      	subs	r3, #21
 800c558:	f023 0303 	bic.w	r3, r3, #3
 800c55c:	3415      	adds	r4, #21
 800c55e:	3304      	adds	r3, #4
 800c560:	42a6      	cmp	r6, r4
 800c562:	bf38      	it	cc
 800c564:	2304      	movcc	r3, #4
 800c566:	441d      	add	r5, r3
 800c568:	445b      	add	r3, fp
 800c56a:	461e      	mov	r6, r3
 800c56c:	462c      	mov	r4, r5
 800c56e:	4544      	cmp	r4, r8
 800c570:	d30e      	bcc.n	800c590 <__mdiff+0xf8>
 800c572:	f108 0103 	add.w	r1, r8, #3
 800c576:	1b49      	subs	r1, r1, r5
 800c578:	f021 0103 	bic.w	r1, r1, #3
 800c57c:	3d03      	subs	r5, #3
 800c57e:	45a8      	cmp	r8, r5
 800c580:	bf38      	it	cc
 800c582:	2100      	movcc	r1, #0
 800c584:	440b      	add	r3, r1
 800c586:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c58a:	b191      	cbz	r1, 800c5b2 <__mdiff+0x11a>
 800c58c:	6117      	str	r7, [r2, #16]
 800c58e:	e79d      	b.n	800c4cc <__mdiff+0x34>
 800c590:	f854 1b04 	ldr.w	r1, [r4], #4
 800c594:	46e6      	mov	lr, ip
 800c596:	0c08      	lsrs	r0, r1, #16
 800c598:	fa1c fc81 	uxtah	ip, ip, r1
 800c59c:	4471      	add	r1, lr
 800c59e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c5a2:	b289      	uxth	r1, r1
 800c5a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c5a8:	f846 1b04 	str.w	r1, [r6], #4
 800c5ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c5b0:	e7dd      	b.n	800c56e <__mdiff+0xd6>
 800c5b2:	3f01      	subs	r7, #1
 800c5b4:	e7e7      	b.n	800c586 <__mdiff+0xee>
 800c5b6:	bf00      	nop
 800c5b8:	0800d0c0 	.word	0x0800d0c0
 800c5bc:	0800d0e2 	.word	0x0800d0e2

0800c5c0 <__d2b>:
 800c5c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c5c4:	460f      	mov	r7, r1
 800c5c6:	2101      	movs	r1, #1
 800c5c8:	ec59 8b10 	vmov	r8, r9, d0
 800c5cc:	4616      	mov	r6, r2
 800c5ce:	f7ff fccd 	bl	800bf6c <_Balloc>
 800c5d2:	4604      	mov	r4, r0
 800c5d4:	b930      	cbnz	r0, 800c5e4 <__d2b+0x24>
 800c5d6:	4602      	mov	r2, r0
 800c5d8:	4b23      	ldr	r3, [pc, #140]	@ (800c668 <__d2b+0xa8>)
 800c5da:	4824      	ldr	r0, [pc, #144]	@ (800c66c <__d2b+0xac>)
 800c5dc:	f240 310f 	movw	r1, #783	@ 0x30f
 800c5e0:	f000 f936 	bl	800c850 <__assert_func>
 800c5e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c5e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c5ec:	b10d      	cbz	r5, 800c5f2 <__d2b+0x32>
 800c5ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c5f2:	9301      	str	r3, [sp, #4]
 800c5f4:	f1b8 0300 	subs.w	r3, r8, #0
 800c5f8:	d023      	beq.n	800c642 <__d2b+0x82>
 800c5fa:	4668      	mov	r0, sp
 800c5fc:	9300      	str	r3, [sp, #0]
 800c5fe:	f7ff fd7c 	bl	800c0fa <__lo0bits>
 800c602:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c606:	b1d0      	cbz	r0, 800c63e <__d2b+0x7e>
 800c608:	f1c0 0320 	rsb	r3, r0, #32
 800c60c:	fa02 f303 	lsl.w	r3, r2, r3
 800c610:	430b      	orrs	r3, r1
 800c612:	40c2      	lsrs	r2, r0
 800c614:	6163      	str	r3, [r4, #20]
 800c616:	9201      	str	r2, [sp, #4]
 800c618:	9b01      	ldr	r3, [sp, #4]
 800c61a:	61a3      	str	r3, [r4, #24]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	bf0c      	ite	eq
 800c620:	2201      	moveq	r2, #1
 800c622:	2202      	movne	r2, #2
 800c624:	6122      	str	r2, [r4, #16]
 800c626:	b1a5      	cbz	r5, 800c652 <__d2b+0x92>
 800c628:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c62c:	4405      	add	r5, r0
 800c62e:	603d      	str	r5, [r7, #0]
 800c630:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c634:	6030      	str	r0, [r6, #0]
 800c636:	4620      	mov	r0, r4
 800c638:	b003      	add	sp, #12
 800c63a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c63e:	6161      	str	r1, [r4, #20]
 800c640:	e7ea      	b.n	800c618 <__d2b+0x58>
 800c642:	a801      	add	r0, sp, #4
 800c644:	f7ff fd59 	bl	800c0fa <__lo0bits>
 800c648:	9b01      	ldr	r3, [sp, #4]
 800c64a:	6163      	str	r3, [r4, #20]
 800c64c:	3020      	adds	r0, #32
 800c64e:	2201      	movs	r2, #1
 800c650:	e7e8      	b.n	800c624 <__d2b+0x64>
 800c652:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c656:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c65a:	6038      	str	r0, [r7, #0]
 800c65c:	6918      	ldr	r0, [r3, #16]
 800c65e:	f7ff fd2d 	bl	800c0bc <__hi0bits>
 800c662:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c666:	e7e5      	b.n	800c634 <__d2b+0x74>
 800c668:	0800d0c0 	.word	0x0800d0c0
 800c66c:	0800d0e2 	.word	0x0800d0e2

0800c670 <__sread>:
 800c670:	b510      	push	{r4, lr}
 800c672:	460c      	mov	r4, r1
 800c674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c678:	f000 f8a8 	bl	800c7cc <_read_r>
 800c67c:	2800      	cmp	r0, #0
 800c67e:	bfab      	itete	ge
 800c680:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c682:	89a3      	ldrhlt	r3, [r4, #12]
 800c684:	181b      	addge	r3, r3, r0
 800c686:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c68a:	bfac      	ite	ge
 800c68c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c68e:	81a3      	strhlt	r3, [r4, #12]
 800c690:	bd10      	pop	{r4, pc}

0800c692 <__swrite>:
 800c692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c696:	461f      	mov	r7, r3
 800c698:	898b      	ldrh	r3, [r1, #12]
 800c69a:	05db      	lsls	r3, r3, #23
 800c69c:	4605      	mov	r5, r0
 800c69e:	460c      	mov	r4, r1
 800c6a0:	4616      	mov	r6, r2
 800c6a2:	d505      	bpl.n	800c6b0 <__swrite+0x1e>
 800c6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6a8:	2302      	movs	r3, #2
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	f000 f87c 	bl	800c7a8 <_lseek_r>
 800c6b0:	89a3      	ldrh	r3, [r4, #12]
 800c6b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c6ba:	81a3      	strh	r3, [r4, #12]
 800c6bc:	4632      	mov	r2, r6
 800c6be:	463b      	mov	r3, r7
 800c6c0:	4628      	mov	r0, r5
 800c6c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6c6:	f000 b8a3 	b.w	800c810 <_write_r>

0800c6ca <__sseek>:
 800c6ca:	b510      	push	{r4, lr}
 800c6cc:	460c      	mov	r4, r1
 800c6ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6d2:	f000 f869 	bl	800c7a8 <_lseek_r>
 800c6d6:	1c43      	adds	r3, r0, #1
 800c6d8:	89a3      	ldrh	r3, [r4, #12]
 800c6da:	bf15      	itete	ne
 800c6dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c6de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c6e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c6e6:	81a3      	strheq	r3, [r4, #12]
 800c6e8:	bf18      	it	ne
 800c6ea:	81a3      	strhne	r3, [r4, #12]
 800c6ec:	bd10      	pop	{r4, pc}

0800c6ee <__sclose>:
 800c6ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6f2:	f000 b849 	b.w	800c788 <_close_r>

0800c6f6 <_realloc_r>:
 800c6f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6fa:	4680      	mov	r8, r0
 800c6fc:	4615      	mov	r5, r2
 800c6fe:	460c      	mov	r4, r1
 800c700:	b921      	cbnz	r1, 800c70c <_realloc_r+0x16>
 800c702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c706:	4611      	mov	r1, r2
 800c708:	f7ff baf8 	b.w	800bcfc <_malloc_r>
 800c70c:	b92a      	cbnz	r2, 800c71a <_realloc_r+0x24>
 800c70e:	f000 f8d1 	bl	800c8b4 <_free_r>
 800c712:	2400      	movs	r4, #0
 800c714:	4620      	mov	r0, r4
 800c716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c71a:	f000 f927 	bl	800c96c <_malloc_usable_size_r>
 800c71e:	4285      	cmp	r5, r0
 800c720:	4606      	mov	r6, r0
 800c722:	d802      	bhi.n	800c72a <_realloc_r+0x34>
 800c724:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c728:	d8f4      	bhi.n	800c714 <_realloc_r+0x1e>
 800c72a:	4629      	mov	r1, r5
 800c72c:	4640      	mov	r0, r8
 800c72e:	f7ff fae5 	bl	800bcfc <_malloc_r>
 800c732:	4607      	mov	r7, r0
 800c734:	2800      	cmp	r0, #0
 800c736:	d0ec      	beq.n	800c712 <_realloc_r+0x1c>
 800c738:	42b5      	cmp	r5, r6
 800c73a:	462a      	mov	r2, r5
 800c73c:	4621      	mov	r1, r4
 800c73e:	bf28      	it	cs
 800c740:	4632      	movcs	r2, r6
 800c742:	f000 f877 	bl	800c834 <memcpy>
 800c746:	4621      	mov	r1, r4
 800c748:	4640      	mov	r0, r8
 800c74a:	f000 f8b3 	bl	800c8b4 <_free_r>
 800c74e:	463c      	mov	r4, r7
 800c750:	e7e0      	b.n	800c714 <_realloc_r+0x1e>

0800c752 <memmove>:
 800c752:	4288      	cmp	r0, r1
 800c754:	b510      	push	{r4, lr}
 800c756:	eb01 0402 	add.w	r4, r1, r2
 800c75a:	d902      	bls.n	800c762 <memmove+0x10>
 800c75c:	4284      	cmp	r4, r0
 800c75e:	4623      	mov	r3, r4
 800c760:	d807      	bhi.n	800c772 <memmove+0x20>
 800c762:	1e43      	subs	r3, r0, #1
 800c764:	42a1      	cmp	r1, r4
 800c766:	d008      	beq.n	800c77a <memmove+0x28>
 800c768:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c76c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c770:	e7f8      	b.n	800c764 <memmove+0x12>
 800c772:	4402      	add	r2, r0
 800c774:	4601      	mov	r1, r0
 800c776:	428a      	cmp	r2, r1
 800c778:	d100      	bne.n	800c77c <memmove+0x2a>
 800c77a:	bd10      	pop	{r4, pc}
 800c77c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c780:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c784:	e7f7      	b.n	800c776 <memmove+0x24>
	...

0800c788 <_close_r>:
 800c788:	b538      	push	{r3, r4, r5, lr}
 800c78a:	4d06      	ldr	r5, [pc, #24]	@ (800c7a4 <_close_r+0x1c>)
 800c78c:	2300      	movs	r3, #0
 800c78e:	4604      	mov	r4, r0
 800c790:	4608      	mov	r0, r1
 800c792:	602b      	str	r3, [r5, #0]
 800c794:	f7f5 fcc0 	bl	8002118 <_close>
 800c798:	1c43      	adds	r3, r0, #1
 800c79a:	d102      	bne.n	800c7a2 <_close_r+0x1a>
 800c79c:	682b      	ldr	r3, [r5, #0]
 800c79e:	b103      	cbz	r3, 800c7a2 <_close_r+0x1a>
 800c7a0:	6023      	str	r3, [r4, #0]
 800c7a2:	bd38      	pop	{r3, r4, r5, pc}
 800c7a4:	200022f0 	.word	0x200022f0

0800c7a8 <_lseek_r>:
 800c7a8:	b538      	push	{r3, r4, r5, lr}
 800c7aa:	4d07      	ldr	r5, [pc, #28]	@ (800c7c8 <_lseek_r+0x20>)
 800c7ac:	4604      	mov	r4, r0
 800c7ae:	4608      	mov	r0, r1
 800c7b0:	4611      	mov	r1, r2
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	602a      	str	r2, [r5, #0]
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	f7f5 fcd5 	bl	8002166 <_lseek>
 800c7bc:	1c43      	adds	r3, r0, #1
 800c7be:	d102      	bne.n	800c7c6 <_lseek_r+0x1e>
 800c7c0:	682b      	ldr	r3, [r5, #0]
 800c7c2:	b103      	cbz	r3, 800c7c6 <_lseek_r+0x1e>
 800c7c4:	6023      	str	r3, [r4, #0]
 800c7c6:	bd38      	pop	{r3, r4, r5, pc}
 800c7c8:	200022f0 	.word	0x200022f0

0800c7cc <_read_r>:
 800c7cc:	b538      	push	{r3, r4, r5, lr}
 800c7ce:	4d07      	ldr	r5, [pc, #28]	@ (800c7ec <_read_r+0x20>)
 800c7d0:	4604      	mov	r4, r0
 800c7d2:	4608      	mov	r0, r1
 800c7d4:	4611      	mov	r1, r2
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	602a      	str	r2, [r5, #0]
 800c7da:	461a      	mov	r2, r3
 800c7dc:	f7f5 fc63 	bl	80020a6 <_read>
 800c7e0:	1c43      	adds	r3, r0, #1
 800c7e2:	d102      	bne.n	800c7ea <_read_r+0x1e>
 800c7e4:	682b      	ldr	r3, [r5, #0]
 800c7e6:	b103      	cbz	r3, 800c7ea <_read_r+0x1e>
 800c7e8:	6023      	str	r3, [r4, #0]
 800c7ea:	bd38      	pop	{r3, r4, r5, pc}
 800c7ec:	200022f0 	.word	0x200022f0

0800c7f0 <_sbrk_r>:
 800c7f0:	b538      	push	{r3, r4, r5, lr}
 800c7f2:	4d06      	ldr	r5, [pc, #24]	@ (800c80c <_sbrk_r+0x1c>)
 800c7f4:	2300      	movs	r3, #0
 800c7f6:	4604      	mov	r4, r0
 800c7f8:	4608      	mov	r0, r1
 800c7fa:	602b      	str	r3, [r5, #0]
 800c7fc:	f7f5 fcc0 	bl	8002180 <_sbrk>
 800c800:	1c43      	adds	r3, r0, #1
 800c802:	d102      	bne.n	800c80a <_sbrk_r+0x1a>
 800c804:	682b      	ldr	r3, [r5, #0]
 800c806:	b103      	cbz	r3, 800c80a <_sbrk_r+0x1a>
 800c808:	6023      	str	r3, [r4, #0]
 800c80a:	bd38      	pop	{r3, r4, r5, pc}
 800c80c:	200022f0 	.word	0x200022f0

0800c810 <_write_r>:
 800c810:	b538      	push	{r3, r4, r5, lr}
 800c812:	4d07      	ldr	r5, [pc, #28]	@ (800c830 <_write_r+0x20>)
 800c814:	4604      	mov	r4, r0
 800c816:	4608      	mov	r0, r1
 800c818:	4611      	mov	r1, r2
 800c81a:	2200      	movs	r2, #0
 800c81c:	602a      	str	r2, [r5, #0]
 800c81e:	461a      	mov	r2, r3
 800c820:	f7f5 fc5e 	bl	80020e0 <_write>
 800c824:	1c43      	adds	r3, r0, #1
 800c826:	d102      	bne.n	800c82e <_write_r+0x1e>
 800c828:	682b      	ldr	r3, [r5, #0]
 800c82a:	b103      	cbz	r3, 800c82e <_write_r+0x1e>
 800c82c:	6023      	str	r3, [r4, #0]
 800c82e:	bd38      	pop	{r3, r4, r5, pc}
 800c830:	200022f0 	.word	0x200022f0

0800c834 <memcpy>:
 800c834:	440a      	add	r2, r1
 800c836:	4291      	cmp	r1, r2
 800c838:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800c83c:	d100      	bne.n	800c840 <memcpy+0xc>
 800c83e:	4770      	bx	lr
 800c840:	b510      	push	{r4, lr}
 800c842:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c846:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c84a:	4291      	cmp	r1, r2
 800c84c:	d1f9      	bne.n	800c842 <memcpy+0xe>
 800c84e:	bd10      	pop	{r4, pc}

0800c850 <__assert_func>:
 800c850:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c852:	4614      	mov	r4, r2
 800c854:	461a      	mov	r2, r3
 800c856:	4b09      	ldr	r3, [pc, #36]	@ (800c87c <__assert_func+0x2c>)
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	4605      	mov	r5, r0
 800c85c:	68d8      	ldr	r0, [r3, #12]
 800c85e:	b954      	cbnz	r4, 800c876 <__assert_func+0x26>
 800c860:	4b07      	ldr	r3, [pc, #28]	@ (800c880 <__assert_func+0x30>)
 800c862:	461c      	mov	r4, r3
 800c864:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c868:	9100      	str	r1, [sp, #0]
 800c86a:	462b      	mov	r3, r5
 800c86c:	4905      	ldr	r1, [pc, #20]	@ (800c884 <__assert_func+0x34>)
 800c86e:	f000 f885 	bl	800c97c <fiprintf>
 800c872:	f000 f8a2 	bl	800c9ba <abort>
 800c876:	4b04      	ldr	r3, [pc, #16]	@ (800c888 <__assert_func+0x38>)
 800c878:	e7f4      	b.n	800c864 <__assert_func+0x14>
 800c87a:	bf00      	nop
 800c87c:	20000114 	.word	0x20000114
 800c880:	0800d37e 	.word	0x0800d37e
 800c884:	0800d350 	.word	0x0800d350
 800c888:	0800d343 	.word	0x0800d343

0800c88c <_calloc_r>:
 800c88c:	b570      	push	{r4, r5, r6, lr}
 800c88e:	fba1 5402 	umull	r5, r4, r1, r2
 800c892:	b93c      	cbnz	r4, 800c8a4 <_calloc_r+0x18>
 800c894:	4629      	mov	r1, r5
 800c896:	f7ff fa31 	bl	800bcfc <_malloc_r>
 800c89a:	4606      	mov	r6, r0
 800c89c:	b928      	cbnz	r0, 800c8aa <_calloc_r+0x1e>
 800c89e:	2600      	movs	r6, #0
 800c8a0:	4630      	mov	r0, r6
 800c8a2:	bd70      	pop	{r4, r5, r6, pc}
 800c8a4:	220c      	movs	r2, #12
 800c8a6:	6002      	str	r2, [r0, #0]
 800c8a8:	e7f9      	b.n	800c89e <_calloc_r+0x12>
 800c8aa:	462a      	mov	r2, r5
 800c8ac:	4621      	mov	r1, r4
 800c8ae:	f7fe fa1d 	bl	800acec <memset>
 800c8b2:	e7f5      	b.n	800c8a0 <_calloc_r+0x14>

0800c8b4 <_free_r>:
 800c8b4:	b538      	push	{r3, r4, r5, lr}
 800c8b6:	4605      	mov	r5, r0
 800c8b8:	2900      	cmp	r1, #0
 800c8ba:	d041      	beq.n	800c940 <_free_r+0x8c>
 800c8bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8c0:	1f0c      	subs	r4, r1, #4
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	bfb8      	it	lt
 800c8c6:	18e4      	addlt	r4, r4, r3
 800c8c8:	f7ff fb44 	bl	800bf54 <__malloc_lock>
 800c8cc:	4a1d      	ldr	r2, [pc, #116]	@ (800c944 <_free_r+0x90>)
 800c8ce:	6813      	ldr	r3, [r2, #0]
 800c8d0:	b933      	cbnz	r3, 800c8e0 <_free_r+0x2c>
 800c8d2:	6063      	str	r3, [r4, #4]
 800c8d4:	6014      	str	r4, [r2, #0]
 800c8d6:	4628      	mov	r0, r5
 800c8d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8dc:	f7ff bb40 	b.w	800bf60 <__malloc_unlock>
 800c8e0:	42a3      	cmp	r3, r4
 800c8e2:	d908      	bls.n	800c8f6 <_free_r+0x42>
 800c8e4:	6820      	ldr	r0, [r4, #0]
 800c8e6:	1821      	adds	r1, r4, r0
 800c8e8:	428b      	cmp	r3, r1
 800c8ea:	bf01      	itttt	eq
 800c8ec:	6819      	ldreq	r1, [r3, #0]
 800c8ee:	685b      	ldreq	r3, [r3, #4]
 800c8f0:	1809      	addeq	r1, r1, r0
 800c8f2:	6021      	streq	r1, [r4, #0]
 800c8f4:	e7ed      	b.n	800c8d2 <_free_r+0x1e>
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	b10b      	cbz	r3, 800c900 <_free_r+0x4c>
 800c8fc:	42a3      	cmp	r3, r4
 800c8fe:	d9fa      	bls.n	800c8f6 <_free_r+0x42>
 800c900:	6811      	ldr	r1, [r2, #0]
 800c902:	1850      	adds	r0, r2, r1
 800c904:	42a0      	cmp	r0, r4
 800c906:	d10b      	bne.n	800c920 <_free_r+0x6c>
 800c908:	6820      	ldr	r0, [r4, #0]
 800c90a:	4401      	add	r1, r0
 800c90c:	1850      	adds	r0, r2, r1
 800c90e:	4283      	cmp	r3, r0
 800c910:	6011      	str	r1, [r2, #0]
 800c912:	d1e0      	bne.n	800c8d6 <_free_r+0x22>
 800c914:	6818      	ldr	r0, [r3, #0]
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	6053      	str	r3, [r2, #4]
 800c91a:	4408      	add	r0, r1
 800c91c:	6010      	str	r0, [r2, #0]
 800c91e:	e7da      	b.n	800c8d6 <_free_r+0x22>
 800c920:	d902      	bls.n	800c928 <_free_r+0x74>
 800c922:	230c      	movs	r3, #12
 800c924:	602b      	str	r3, [r5, #0]
 800c926:	e7d6      	b.n	800c8d6 <_free_r+0x22>
 800c928:	6820      	ldr	r0, [r4, #0]
 800c92a:	1821      	adds	r1, r4, r0
 800c92c:	428b      	cmp	r3, r1
 800c92e:	bf04      	itt	eq
 800c930:	6819      	ldreq	r1, [r3, #0]
 800c932:	685b      	ldreq	r3, [r3, #4]
 800c934:	6063      	str	r3, [r4, #4]
 800c936:	bf04      	itt	eq
 800c938:	1809      	addeq	r1, r1, r0
 800c93a:	6021      	streq	r1, [r4, #0]
 800c93c:	6054      	str	r4, [r2, #4]
 800c93e:	e7ca      	b.n	800c8d6 <_free_r+0x22>
 800c940:	bd38      	pop	{r3, r4, r5, pc}
 800c942:	bf00      	nop
 800c944:	200022ec 	.word	0x200022ec

0800c948 <__ascii_mbtowc>:
 800c948:	b082      	sub	sp, #8
 800c94a:	b901      	cbnz	r1, 800c94e <__ascii_mbtowc+0x6>
 800c94c:	a901      	add	r1, sp, #4
 800c94e:	b142      	cbz	r2, 800c962 <__ascii_mbtowc+0x1a>
 800c950:	b14b      	cbz	r3, 800c966 <__ascii_mbtowc+0x1e>
 800c952:	7813      	ldrb	r3, [r2, #0]
 800c954:	600b      	str	r3, [r1, #0]
 800c956:	7812      	ldrb	r2, [r2, #0]
 800c958:	1e10      	subs	r0, r2, #0
 800c95a:	bf18      	it	ne
 800c95c:	2001      	movne	r0, #1
 800c95e:	b002      	add	sp, #8
 800c960:	4770      	bx	lr
 800c962:	4610      	mov	r0, r2
 800c964:	e7fb      	b.n	800c95e <__ascii_mbtowc+0x16>
 800c966:	f06f 0001 	mvn.w	r0, #1
 800c96a:	e7f8      	b.n	800c95e <__ascii_mbtowc+0x16>

0800c96c <_malloc_usable_size_r>:
 800c96c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c970:	1f18      	subs	r0, r3, #4
 800c972:	2b00      	cmp	r3, #0
 800c974:	bfbc      	itt	lt
 800c976:	580b      	ldrlt	r3, [r1, r0]
 800c978:	18c0      	addlt	r0, r0, r3
 800c97a:	4770      	bx	lr

0800c97c <fiprintf>:
 800c97c:	b40e      	push	{r1, r2, r3}
 800c97e:	b503      	push	{r0, r1, lr}
 800c980:	4601      	mov	r1, r0
 800c982:	ab03      	add	r3, sp, #12
 800c984:	4805      	ldr	r0, [pc, #20]	@ (800c99c <fiprintf+0x20>)
 800c986:	f853 2b04 	ldr.w	r2, [r3], #4
 800c98a:	6800      	ldr	r0, [r0, #0]
 800c98c:	9301      	str	r3, [sp, #4]
 800c98e:	f000 f845 	bl	800ca1c <_vfiprintf_r>
 800c992:	b002      	add	sp, #8
 800c994:	f85d eb04 	ldr.w	lr, [sp], #4
 800c998:	b003      	add	sp, #12
 800c99a:	4770      	bx	lr
 800c99c:	20000114 	.word	0x20000114

0800c9a0 <__ascii_wctomb>:
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	4608      	mov	r0, r1
 800c9a4:	b141      	cbz	r1, 800c9b8 <__ascii_wctomb+0x18>
 800c9a6:	2aff      	cmp	r2, #255	@ 0xff
 800c9a8:	d904      	bls.n	800c9b4 <__ascii_wctomb+0x14>
 800c9aa:	228a      	movs	r2, #138	@ 0x8a
 800c9ac:	601a      	str	r2, [r3, #0]
 800c9ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c9b2:	4770      	bx	lr
 800c9b4:	700a      	strb	r2, [r1, #0]
 800c9b6:	2001      	movs	r0, #1
 800c9b8:	4770      	bx	lr

0800c9ba <abort>:
 800c9ba:	b508      	push	{r3, lr}
 800c9bc:	2006      	movs	r0, #6
 800c9be:	f000 fa85 	bl	800cecc <raise>
 800c9c2:	2001      	movs	r0, #1
 800c9c4:	f7f5 fb64 	bl	8002090 <_exit>

0800c9c8 <__sfputc_r>:
 800c9c8:	6893      	ldr	r3, [r2, #8]
 800c9ca:	3b01      	subs	r3, #1
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	b410      	push	{r4}
 800c9d0:	6093      	str	r3, [r2, #8]
 800c9d2:	da08      	bge.n	800c9e6 <__sfputc_r+0x1e>
 800c9d4:	6994      	ldr	r4, [r2, #24]
 800c9d6:	42a3      	cmp	r3, r4
 800c9d8:	db01      	blt.n	800c9de <__sfputc_r+0x16>
 800c9da:	290a      	cmp	r1, #10
 800c9dc:	d103      	bne.n	800c9e6 <__sfputc_r+0x1e>
 800c9de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9e2:	f000 b933 	b.w	800cc4c <__swbuf_r>
 800c9e6:	6813      	ldr	r3, [r2, #0]
 800c9e8:	1c58      	adds	r0, r3, #1
 800c9ea:	6010      	str	r0, [r2, #0]
 800c9ec:	7019      	strb	r1, [r3, #0]
 800c9ee:	4608      	mov	r0, r1
 800c9f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c9f4:	4770      	bx	lr

0800c9f6 <__sfputs_r>:
 800c9f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9f8:	4606      	mov	r6, r0
 800c9fa:	460f      	mov	r7, r1
 800c9fc:	4614      	mov	r4, r2
 800c9fe:	18d5      	adds	r5, r2, r3
 800ca00:	42ac      	cmp	r4, r5
 800ca02:	d101      	bne.n	800ca08 <__sfputs_r+0x12>
 800ca04:	2000      	movs	r0, #0
 800ca06:	e007      	b.n	800ca18 <__sfputs_r+0x22>
 800ca08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca0c:	463a      	mov	r2, r7
 800ca0e:	4630      	mov	r0, r6
 800ca10:	f7ff ffda 	bl	800c9c8 <__sfputc_r>
 800ca14:	1c43      	adds	r3, r0, #1
 800ca16:	d1f3      	bne.n	800ca00 <__sfputs_r+0xa>
 800ca18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca1c <_vfiprintf_r>:
 800ca1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca20:	460d      	mov	r5, r1
 800ca22:	b09d      	sub	sp, #116	@ 0x74
 800ca24:	4614      	mov	r4, r2
 800ca26:	4698      	mov	r8, r3
 800ca28:	4606      	mov	r6, r0
 800ca2a:	b118      	cbz	r0, 800ca34 <_vfiprintf_r+0x18>
 800ca2c:	6a03      	ldr	r3, [r0, #32]
 800ca2e:	b90b      	cbnz	r3, 800ca34 <_vfiprintf_r+0x18>
 800ca30:	f7fe f926 	bl	800ac80 <__sinit>
 800ca34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca36:	07d9      	lsls	r1, r3, #31
 800ca38:	d405      	bmi.n	800ca46 <_vfiprintf_r+0x2a>
 800ca3a:	89ab      	ldrh	r3, [r5, #12]
 800ca3c:	059a      	lsls	r2, r3, #22
 800ca3e:	d402      	bmi.n	800ca46 <_vfiprintf_r+0x2a>
 800ca40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca42:	f7fe f98a 	bl	800ad5a <__retarget_lock_acquire_recursive>
 800ca46:	89ab      	ldrh	r3, [r5, #12]
 800ca48:	071b      	lsls	r3, r3, #28
 800ca4a:	d501      	bpl.n	800ca50 <_vfiprintf_r+0x34>
 800ca4c:	692b      	ldr	r3, [r5, #16]
 800ca4e:	b99b      	cbnz	r3, 800ca78 <_vfiprintf_r+0x5c>
 800ca50:	4629      	mov	r1, r5
 800ca52:	4630      	mov	r0, r6
 800ca54:	f000 f938 	bl	800ccc8 <__swsetup_r>
 800ca58:	b170      	cbz	r0, 800ca78 <_vfiprintf_r+0x5c>
 800ca5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca5c:	07dc      	lsls	r4, r3, #31
 800ca5e:	d504      	bpl.n	800ca6a <_vfiprintf_r+0x4e>
 800ca60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca64:	b01d      	add	sp, #116	@ 0x74
 800ca66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca6a:	89ab      	ldrh	r3, [r5, #12]
 800ca6c:	0598      	lsls	r0, r3, #22
 800ca6e:	d4f7      	bmi.n	800ca60 <_vfiprintf_r+0x44>
 800ca70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca72:	f7fe f973 	bl	800ad5c <__retarget_lock_release_recursive>
 800ca76:	e7f3      	b.n	800ca60 <_vfiprintf_r+0x44>
 800ca78:	2300      	movs	r3, #0
 800ca7a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca7c:	2320      	movs	r3, #32
 800ca7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca82:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca86:	2330      	movs	r3, #48	@ 0x30
 800ca88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cc38 <_vfiprintf_r+0x21c>
 800ca8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca90:	f04f 0901 	mov.w	r9, #1
 800ca94:	4623      	mov	r3, r4
 800ca96:	469a      	mov	sl, r3
 800ca98:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca9c:	b10a      	cbz	r2, 800caa2 <_vfiprintf_r+0x86>
 800ca9e:	2a25      	cmp	r2, #37	@ 0x25
 800caa0:	d1f9      	bne.n	800ca96 <_vfiprintf_r+0x7a>
 800caa2:	ebba 0b04 	subs.w	fp, sl, r4
 800caa6:	d00b      	beq.n	800cac0 <_vfiprintf_r+0xa4>
 800caa8:	465b      	mov	r3, fp
 800caaa:	4622      	mov	r2, r4
 800caac:	4629      	mov	r1, r5
 800caae:	4630      	mov	r0, r6
 800cab0:	f7ff ffa1 	bl	800c9f6 <__sfputs_r>
 800cab4:	3001      	adds	r0, #1
 800cab6:	f000 80a7 	beq.w	800cc08 <_vfiprintf_r+0x1ec>
 800caba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cabc:	445a      	add	r2, fp
 800cabe:	9209      	str	r2, [sp, #36]	@ 0x24
 800cac0:	f89a 3000 	ldrb.w	r3, [sl]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	f000 809f 	beq.w	800cc08 <_vfiprintf_r+0x1ec>
 800caca:	2300      	movs	r3, #0
 800cacc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cad0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cad4:	f10a 0a01 	add.w	sl, sl, #1
 800cad8:	9304      	str	r3, [sp, #16]
 800cada:	9307      	str	r3, [sp, #28]
 800cadc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cae0:	931a      	str	r3, [sp, #104]	@ 0x68
 800cae2:	4654      	mov	r4, sl
 800cae4:	2205      	movs	r2, #5
 800cae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caea:	4853      	ldr	r0, [pc, #332]	@ (800cc38 <_vfiprintf_r+0x21c>)
 800caec:	f7f3 fb70 	bl	80001d0 <memchr>
 800caf0:	9a04      	ldr	r2, [sp, #16]
 800caf2:	b9d8      	cbnz	r0, 800cb2c <_vfiprintf_r+0x110>
 800caf4:	06d1      	lsls	r1, r2, #27
 800caf6:	bf44      	itt	mi
 800caf8:	2320      	movmi	r3, #32
 800cafa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cafe:	0713      	lsls	r3, r2, #28
 800cb00:	bf44      	itt	mi
 800cb02:	232b      	movmi	r3, #43	@ 0x2b
 800cb04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb08:	f89a 3000 	ldrb.w	r3, [sl]
 800cb0c:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb0e:	d015      	beq.n	800cb3c <_vfiprintf_r+0x120>
 800cb10:	9a07      	ldr	r2, [sp, #28]
 800cb12:	4654      	mov	r4, sl
 800cb14:	2000      	movs	r0, #0
 800cb16:	f04f 0c0a 	mov.w	ip, #10
 800cb1a:	4621      	mov	r1, r4
 800cb1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb20:	3b30      	subs	r3, #48	@ 0x30
 800cb22:	2b09      	cmp	r3, #9
 800cb24:	d94b      	bls.n	800cbbe <_vfiprintf_r+0x1a2>
 800cb26:	b1b0      	cbz	r0, 800cb56 <_vfiprintf_r+0x13a>
 800cb28:	9207      	str	r2, [sp, #28]
 800cb2a:	e014      	b.n	800cb56 <_vfiprintf_r+0x13a>
 800cb2c:	eba0 0308 	sub.w	r3, r0, r8
 800cb30:	fa09 f303 	lsl.w	r3, r9, r3
 800cb34:	4313      	orrs	r3, r2
 800cb36:	9304      	str	r3, [sp, #16]
 800cb38:	46a2      	mov	sl, r4
 800cb3a:	e7d2      	b.n	800cae2 <_vfiprintf_r+0xc6>
 800cb3c:	9b03      	ldr	r3, [sp, #12]
 800cb3e:	1d19      	adds	r1, r3, #4
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	9103      	str	r1, [sp, #12]
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	bfbb      	ittet	lt
 800cb48:	425b      	neglt	r3, r3
 800cb4a:	f042 0202 	orrlt.w	r2, r2, #2
 800cb4e:	9307      	strge	r3, [sp, #28]
 800cb50:	9307      	strlt	r3, [sp, #28]
 800cb52:	bfb8      	it	lt
 800cb54:	9204      	strlt	r2, [sp, #16]
 800cb56:	7823      	ldrb	r3, [r4, #0]
 800cb58:	2b2e      	cmp	r3, #46	@ 0x2e
 800cb5a:	d10a      	bne.n	800cb72 <_vfiprintf_r+0x156>
 800cb5c:	7863      	ldrb	r3, [r4, #1]
 800cb5e:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb60:	d132      	bne.n	800cbc8 <_vfiprintf_r+0x1ac>
 800cb62:	9b03      	ldr	r3, [sp, #12]
 800cb64:	1d1a      	adds	r2, r3, #4
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	9203      	str	r2, [sp, #12]
 800cb6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cb6e:	3402      	adds	r4, #2
 800cb70:	9305      	str	r3, [sp, #20]
 800cb72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cc48 <_vfiprintf_r+0x22c>
 800cb76:	7821      	ldrb	r1, [r4, #0]
 800cb78:	2203      	movs	r2, #3
 800cb7a:	4650      	mov	r0, sl
 800cb7c:	f7f3 fb28 	bl	80001d0 <memchr>
 800cb80:	b138      	cbz	r0, 800cb92 <_vfiprintf_r+0x176>
 800cb82:	9b04      	ldr	r3, [sp, #16]
 800cb84:	eba0 000a 	sub.w	r0, r0, sl
 800cb88:	2240      	movs	r2, #64	@ 0x40
 800cb8a:	4082      	lsls	r2, r0
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	3401      	adds	r4, #1
 800cb90:	9304      	str	r3, [sp, #16]
 800cb92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb96:	4829      	ldr	r0, [pc, #164]	@ (800cc3c <_vfiprintf_r+0x220>)
 800cb98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb9c:	2206      	movs	r2, #6
 800cb9e:	f7f3 fb17 	bl	80001d0 <memchr>
 800cba2:	2800      	cmp	r0, #0
 800cba4:	d03f      	beq.n	800cc26 <_vfiprintf_r+0x20a>
 800cba6:	4b26      	ldr	r3, [pc, #152]	@ (800cc40 <_vfiprintf_r+0x224>)
 800cba8:	bb1b      	cbnz	r3, 800cbf2 <_vfiprintf_r+0x1d6>
 800cbaa:	9b03      	ldr	r3, [sp, #12]
 800cbac:	3307      	adds	r3, #7
 800cbae:	f023 0307 	bic.w	r3, r3, #7
 800cbb2:	3308      	adds	r3, #8
 800cbb4:	9303      	str	r3, [sp, #12]
 800cbb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbb8:	443b      	add	r3, r7
 800cbba:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbbc:	e76a      	b.n	800ca94 <_vfiprintf_r+0x78>
 800cbbe:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbc2:	460c      	mov	r4, r1
 800cbc4:	2001      	movs	r0, #1
 800cbc6:	e7a8      	b.n	800cb1a <_vfiprintf_r+0xfe>
 800cbc8:	2300      	movs	r3, #0
 800cbca:	3401      	adds	r4, #1
 800cbcc:	9305      	str	r3, [sp, #20]
 800cbce:	4619      	mov	r1, r3
 800cbd0:	f04f 0c0a 	mov.w	ip, #10
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbda:	3a30      	subs	r2, #48	@ 0x30
 800cbdc:	2a09      	cmp	r2, #9
 800cbde:	d903      	bls.n	800cbe8 <_vfiprintf_r+0x1cc>
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d0c6      	beq.n	800cb72 <_vfiprintf_r+0x156>
 800cbe4:	9105      	str	r1, [sp, #20]
 800cbe6:	e7c4      	b.n	800cb72 <_vfiprintf_r+0x156>
 800cbe8:	fb0c 2101 	mla	r1, ip, r1, r2
 800cbec:	4604      	mov	r4, r0
 800cbee:	2301      	movs	r3, #1
 800cbf0:	e7f0      	b.n	800cbd4 <_vfiprintf_r+0x1b8>
 800cbf2:	ab03      	add	r3, sp, #12
 800cbf4:	9300      	str	r3, [sp, #0]
 800cbf6:	462a      	mov	r2, r5
 800cbf8:	4b12      	ldr	r3, [pc, #72]	@ (800cc44 <_vfiprintf_r+0x228>)
 800cbfa:	a904      	add	r1, sp, #16
 800cbfc:	4630      	mov	r0, r6
 800cbfe:	f7fd fbdb 	bl	800a3b8 <_printf_float>
 800cc02:	4607      	mov	r7, r0
 800cc04:	1c78      	adds	r0, r7, #1
 800cc06:	d1d6      	bne.n	800cbb6 <_vfiprintf_r+0x19a>
 800cc08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc0a:	07d9      	lsls	r1, r3, #31
 800cc0c:	d405      	bmi.n	800cc1a <_vfiprintf_r+0x1fe>
 800cc0e:	89ab      	ldrh	r3, [r5, #12]
 800cc10:	059a      	lsls	r2, r3, #22
 800cc12:	d402      	bmi.n	800cc1a <_vfiprintf_r+0x1fe>
 800cc14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc16:	f7fe f8a1 	bl	800ad5c <__retarget_lock_release_recursive>
 800cc1a:	89ab      	ldrh	r3, [r5, #12]
 800cc1c:	065b      	lsls	r3, r3, #25
 800cc1e:	f53f af1f 	bmi.w	800ca60 <_vfiprintf_r+0x44>
 800cc22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc24:	e71e      	b.n	800ca64 <_vfiprintf_r+0x48>
 800cc26:	ab03      	add	r3, sp, #12
 800cc28:	9300      	str	r3, [sp, #0]
 800cc2a:	462a      	mov	r2, r5
 800cc2c:	4b05      	ldr	r3, [pc, #20]	@ (800cc44 <_vfiprintf_r+0x228>)
 800cc2e:	a904      	add	r1, sp, #16
 800cc30:	4630      	mov	r0, r6
 800cc32:	f7fd fe59 	bl	800a8e8 <_printf_i>
 800cc36:	e7e4      	b.n	800cc02 <_vfiprintf_r+0x1e6>
 800cc38:	0800d0d1 	.word	0x0800d0d1
 800cc3c:	0800d0db 	.word	0x0800d0db
 800cc40:	0800a3b9 	.word	0x0800a3b9
 800cc44:	0800c9f7 	.word	0x0800c9f7
 800cc48:	0800d0d7 	.word	0x0800d0d7

0800cc4c <__swbuf_r>:
 800cc4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc4e:	460e      	mov	r6, r1
 800cc50:	4614      	mov	r4, r2
 800cc52:	4605      	mov	r5, r0
 800cc54:	b118      	cbz	r0, 800cc5e <__swbuf_r+0x12>
 800cc56:	6a03      	ldr	r3, [r0, #32]
 800cc58:	b90b      	cbnz	r3, 800cc5e <__swbuf_r+0x12>
 800cc5a:	f7fe f811 	bl	800ac80 <__sinit>
 800cc5e:	69a3      	ldr	r3, [r4, #24]
 800cc60:	60a3      	str	r3, [r4, #8]
 800cc62:	89a3      	ldrh	r3, [r4, #12]
 800cc64:	071a      	lsls	r2, r3, #28
 800cc66:	d501      	bpl.n	800cc6c <__swbuf_r+0x20>
 800cc68:	6923      	ldr	r3, [r4, #16]
 800cc6a:	b943      	cbnz	r3, 800cc7e <__swbuf_r+0x32>
 800cc6c:	4621      	mov	r1, r4
 800cc6e:	4628      	mov	r0, r5
 800cc70:	f000 f82a 	bl	800ccc8 <__swsetup_r>
 800cc74:	b118      	cbz	r0, 800cc7e <__swbuf_r+0x32>
 800cc76:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800cc7a:	4638      	mov	r0, r7
 800cc7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc7e:	6823      	ldr	r3, [r4, #0]
 800cc80:	6922      	ldr	r2, [r4, #16]
 800cc82:	1a98      	subs	r0, r3, r2
 800cc84:	6963      	ldr	r3, [r4, #20]
 800cc86:	b2f6      	uxtb	r6, r6
 800cc88:	4283      	cmp	r3, r0
 800cc8a:	4637      	mov	r7, r6
 800cc8c:	dc05      	bgt.n	800cc9a <__swbuf_r+0x4e>
 800cc8e:	4621      	mov	r1, r4
 800cc90:	4628      	mov	r0, r5
 800cc92:	f7ff f937 	bl	800bf04 <_fflush_r>
 800cc96:	2800      	cmp	r0, #0
 800cc98:	d1ed      	bne.n	800cc76 <__swbuf_r+0x2a>
 800cc9a:	68a3      	ldr	r3, [r4, #8]
 800cc9c:	3b01      	subs	r3, #1
 800cc9e:	60a3      	str	r3, [r4, #8]
 800cca0:	6823      	ldr	r3, [r4, #0]
 800cca2:	1c5a      	adds	r2, r3, #1
 800cca4:	6022      	str	r2, [r4, #0]
 800cca6:	701e      	strb	r6, [r3, #0]
 800cca8:	6962      	ldr	r2, [r4, #20]
 800ccaa:	1c43      	adds	r3, r0, #1
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d004      	beq.n	800ccba <__swbuf_r+0x6e>
 800ccb0:	89a3      	ldrh	r3, [r4, #12]
 800ccb2:	07db      	lsls	r3, r3, #31
 800ccb4:	d5e1      	bpl.n	800cc7a <__swbuf_r+0x2e>
 800ccb6:	2e0a      	cmp	r6, #10
 800ccb8:	d1df      	bne.n	800cc7a <__swbuf_r+0x2e>
 800ccba:	4621      	mov	r1, r4
 800ccbc:	4628      	mov	r0, r5
 800ccbe:	f7ff f921 	bl	800bf04 <_fflush_r>
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	d0d9      	beq.n	800cc7a <__swbuf_r+0x2e>
 800ccc6:	e7d6      	b.n	800cc76 <__swbuf_r+0x2a>

0800ccc8 <__swsetup_r>:
 800ccc8:	b538      	push	{r3, r4, r5, lr}
 800ccca:	4b29      	ldr	r3, [pc, #164]	@ (800cd70 <__swsetup_r+0xa8>)
 800cccc:	4605      	mov	r5, r0
 800ccce:	6818      	ldr	r0, [r3, #0]
 800ccd0:	460c      	mov	r4, r1
 800ccd2:	b118      	cbz	r0, 800ccdc <__swsetup_r+0x14>
 800ccd4:	6a03      	ldr	r3, [r0, #32]
 800ccd6:	b90b      	cbnz	r3, 800ccdc <__swsetup_r+0x14>
 800ccd8:	f7fd ffd2 	bl	800ac80 <__sinit>
 800ccdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cce0:	0719      	lsls	r1, r3, #28
 800cce2:	d422      	bmi.n	800cd2a <__swsetup_r+0x62>
 800cce4:	06da      	lsls	r2, r3, #27
 800cce6:	d407      	bmi.n	800ccf8 <__swsetup_r+0x30>
 800cce8:	2209      	movs	r2, #9
 800ccea:	602a      	str	r2, [r5, #0]
 800ccec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ccf0:	81a3      	strh	r3, [r4, #12]
 800ccf2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ccf6:	e033      	b.n	800cd60 <__swsetup_r+0x98>
 800ccf8:	0758      	lsls	r0, r3, #29
 800ccfa:	d512      	bpl.n	800cd22 <__swsetup_r+0x5a>
 800ccfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ccfe:	b141      	cbz	r1, 800cd12 <__swsetup_r+0x4a>
 800cd00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd04:	4299      	cmp	r1, r3
 800cd06:	d002      	beq.n	800cd0e <__swsetup_r+0x46>
 800cd08:	4628      	mov	r0, r5
 800cd0a:	f7ff fdd3 	bl	800c8b4 <_free_r>
 800cd0e:	2300      	movs	r3, #0
 800cd10:	6363      	str	r3, [r4, #52]	@ 0x34
 800cd12:	89a3      	ldrh	r3, [r4, #12]
 800cd14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cd18:	81a3      	strh	r3, [r4, #12]
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	6063      	str	r3, [r4, #4]
 800cd1e:	6923      	ldr	r3, [r4, #16]
 800cd20:	6023      	str	r3, [r4, #0]
 800cd22:	89a3      	ldrh	r3, [r4, #12]
 800cd24:	f043 0308 	orr.w	r3, r3, #8
 800cd28:	81a3      	strh	r3, [r4, #12]
 800cd2a:	6923      	ldr	r3, [r4, #16]
 800cd2c:	b94b      	cbnz	r3, 800cd42 <__swsetup_r+0x7a>
 800cd2e:	89a3      	ldrh	r3, [r4, #12]
 800cd30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cd34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd38:	d003      	beq.n	800cd42 <__swsetup_r+0x7a>
 800cd3a:	4621      	mov	r1, r4
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	f000 f83f 	bl	800cdc0 <__smakebuf_r>
 800cd42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd46:	f013 0201 	ands.w	r2, r3, #1
 800cd4a:	d00a      	beq.n	800cd62 <__swsetup_r+0x9a>
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	60a2      	str	r2, [r4, #8]
 800cd50:	6962      	ldr	r2, [r4, #20]
 800cd52:	4252      	negs	r2, r2
 800cd54:	61a2      	str	r2, [r4, #24]
 800cd56:	6922      	ldr	r2, [r4, #16]
 800cd58:	b942      	cbnz	r2, 800cd6c <__swsetup_r+0xa4>
 800cd5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cd5e:	d1c5      	bne.n	800ccec <__swsetup_r+0x24>
 800cd60:	bd38      	pop	{r3, r4, r5, pc}
 800cd62:	0799      	lsls	r1, r3, #30
 800cd64:	bf58      	it	pl
 800cd66:	6962      	ldrpl	r2, [r4, #20]
 800cd68:	60a2      	str	r2, [r4, #8]
 800cd6a:	e7f4      	b.n	800cd56 <__swsetup_r+0x8e>
 800cd6c:	2000      	movs	r0, #0
 800cd6e:	e7f7      	b.n	800cd60 <__swsetup_r+0x98>
 800cd70:	20000114 	.word	0x20000114

0800cd74 <__swhatbuf_r>:
 800cd74:	b570      	push	{r4, r5, r6, lr}
 800cd76:	460c      	mov	r4, r1
 800cd78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd7c:	2900      	cmp	r1, #0
 800cd7e:	b096      	sub	sp, #88	@ 0x58
 800cd80:	4615      	mov	r5, r2
 800cd82:	461e      	mov	r6, r3
 800cd84:	da0d      	bge.n	800cda2 <__swhatbuf_r+0x2e>
 800cd86:	89a3      	ldrh	r3, [r4, #12]
 800cd88:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cd8c:	f04f 0100 	mov.w	r1, #0
 800cd90:	bf14      	ite	ne
 800cd92:	2340      	movne	r3, #64	@ 0x40
 800cd94:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cd98:	2000      	movs	r0, #0
 800cd9a:	6031      	str	r1, [r6, #0]
 800cd9c:	602b      	str	r3, [r5, #0]
 800cd9e:	b016      	add	sp, #88	@ 0x58
 800cda0:	bd70      	pop	{r4, r5, r6, pc}
 800cda2:	466a      	mov	r2, sp
 800cda4:	f000 f848 	bl	800ce38 <_fstat_r>
 800cda8:	2800      	cmp	r0, #0
 800cdaa:	dbec      	blt.n	800cd86 <__swhatbuf_r+0x12>
 800cdac:	9901      	ldr	r1, [sp, #4]
 800cdae:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cdb2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cdb6:	4259      	negs	r1, r3
 800cdb8:	4159      	adcs	r1, r3
 800cdba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cdbe:	e7eb      	b.n	800cd98 <__swhatbuf_r+0x24>

0800cdc0 <__smakebuf_r>:
 800cdc0:	898b      	ldrh	r3, [r1, #12]
 800cdc2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cdc4:	079d      	lsls	r5, r3, #30
 800cdc6:	4606      	mov	r6, r0
 800cdc8:	460c      	mov	r4, r1
 800cdca:	d507      	bpl.n	800cddc <__smakebuf_r+0x1c>
 800cdcc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cdd0:	6023      	str	r3, [r4, #0]
 800cdd2:	6123      	str	r3, [r4, #16]
 800cdd4:	2301      	movs	r3, #1
 800cdd6:	6163      	str	r3, [r4, #20]
 800cdd8:	b003      	add	sp, #12
 800cdda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cddc:	ab01      	add	r3, sp, #4
 800cdde:	466a      	mov	r2, sp
 800cde0:	f7ff ffc8 	bl	800cd74 <__swhatbuf_r>
 800cde4:	9f00      	ldr	r7, [sp, #0]
 800cde6:	4605      	mov	r5, r0
 800cde8:	4639      	mov	r1, r7
 800cdea:	4630      	mov	r0, r6
 800cdec:	f7fe ff86 	bl	800bcfc <_malloc_r>
 800cdf0:	b948      	cbnz	r0, 800ce06 <__smakebuf_r+0x46>
 800cdf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdf6:	059a      	lsls	r2, r3, #22
 800cdf8:	d4ee      	bmi.n	800cdd8 <__smakebuf_r+0x18>
 800cdfa:	f023 0303 	bic.w	r3, r3, #3
 800cdfe:	f043 0302 	orr.w	r3, r3, #2
 800ce02:	81a3      	strh	r3, [r4, #12]
 800ce04:	e7e2      	b.n	800cdcc <__smakebuf_r+0xc>
 800ce06:	89a3      	ldrh	r3, [r4, #12]
 800ce08:	6020      	str	r0, [r4, #0]
 800ce0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce0e:	81a3      	strh	r3, [r4, #12]
 800ce10:	9b01      	ldr	r3, [sp, #4]
 800ce12:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ce16:	b15b      	cbz	r3, 800ce30 <__smakebuf_r+0x70>
 800ce18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce1c:	4630      	mov	r0, r6
 800ce1e:	f000 f81d 	bl	800ce5c <_isatty_r>
 800ce22:	b128      	cbz	r0, 800ce30 <__smakebuf_r+0x70>
 800ce24:	89a3      	ldrh	r3, [r4, #12]
 800ce26:	f023 0303 	bic.w	r3, r3, #3
 800ce2a:	f043 0301 	orr.w	r3, r3, #1
 800ce2e:	81a3      	strh	r3, [r4, #12]
 800ce30:	89a3      	ldrh	r3, [r4, #12]
 800ce32:	431d      	orrs	r5, r3
 800ce34:	81a5      	strh	r5, [r4, #12]
 800ce36:	e7cf      	b.n	800cdd8 <__smakebuf_r+0x18>

0800ce38 <_fstat_r>:
 800ce38:	b538      	push	{r3, r4, r5, lr}
 800ce3a:	4d07      	ldr	r5, [pc, #28]	@ (800ce58 <_fstat_r+0x20>)
 800ce3c:	2300      	movs	r3, #0
 800ce3e:	4604      	mov	r4, r0
 800ce40:	4608      	mov	r0, r1
 800ce42:	4611      	mov	r1, r2
 800ce44:	602b      	str	r3, [r5, #0]
 800ce46:	f7f5 f973 	bl	8002130 <_fstat>
 800ce4a:	1c43      	adds	r3, r0, #1
 800ce4c:	d102      	bne.n	800ce54 <_fstat_r+0x1c>
 800ce4e:	682b      	ldr	r3, [r5, #0]
 800ce50:	b103      	cbz	r3, 800ce54 <_fstat_r+0x1c>
 800ce52:	6023      	str	r3, [r4, #0]
 800ce54:	bd38      	pop	{r3, r4, r5, pc}
 800ce56:	bf00      	nop
 800ce58:	200022f0 	.word	0x200022f0

0800ce5c <_isatty_r>:
 800ce5c:	b538      	push	{r3, r4, r5, lr}
 800ce5e:	4d06      	ldr	r5, [pc, #24]	@ (800ce78 <_isatty_r+0x1c>)
 800ce60:	2300      	movs	r3, #0
 800ce62:	4604      	mov	r4, r0
 800ce64:	4608      	mov	r0, r1
 800ce66:	602b      	str	r3, [r5, #0]
 800ce68:	f7f5 f972 	bl	8002150 <_isatty>
 800ce6c:	1c43      	adds	r3, r0, #1
 800ce6e:	d102      	bne.n	800ce76 <_isatty_r+0x1a>
 800ce70:	682b      	ldr	r3, [r5, #0]
 800ce72:	b103      	cbz	r3, 800ce76 <_isatty_r+0x1a>
 800ce74:	6023      	str	r3, [r4, #0]
 800ce76:	bd38      	pop	{r3, r4, r5, pc}
 800ce78:	200022f0 	.word	0x200022f0

0800ce7c <_raise_r>:
 800ce7c:	291f      	cmp	r1, #31
 800ce7e:	b538      	push	{r3, r4, r5, lr}
 800ce80:	4605      	mov	r5, r0
 800ce82:	460c      	mov	r4, r1
 800ce84:	d904      	bls.n	800ce90 <_raise_r+0x14>
 800ce86:	2316      	movs	r3, #22
 800ce88:	6003      	str	r3, [r0, #0]
 800ce8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce8e:	bd38      	pop	{r3, r4, r5, pc}
 800ce90:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ce92:	b112      	cbz	r2, 800ce9a <_raise_r+0x1e>
 800ce94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce98:	b94b      	cbnz	r3, 800ceae <_raise_r+0x32>
 800ce9a:	4628      	mov	r0, r5
 800ce9c:	f000 f830 	bl	800cf00 <_getpid_r>
 800cea0:	4622      	mov	r2, r4
 800cea2:	4601      	mov	r1, r0
 800cea4:	4628      	mov	r0, r5
 800cea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ceaa:	f000 b817 	b.w	800cedc <_kill_r>
 800ceae:	2b01      	cmp	r3, #1
 800ceb0:	d00a      	beq.n	800cec8 <_raise_r+0x4c>
 800ceb2:	1c59      	adds	r1, r3, #1
 800ceb4:	d103      	bne.n	800cebe <_raise_r+0x42>
 800ceb6:	2316      	movs	r3, #22
 800ceb8:	6003      	str	r3, [r0, #0]
 800ceba:	2001      	movs	r0, #1
 800cebc:	e7e7      	b.n	800ce8e <_raise_r+0x12>
 800cebe:	2100      	movs	r1, #0
 800cec0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cec4:	4620      	mov	r0, r4
 800cec6:	4798      	blx	r3
 800cec8:	2000      	movs	r0, #0
 800ceca:	e7e0      	b.n	800ce8e <_raise_r+0x12>

0800cecc <raise>:
 800cecc:	4b02      	ldr	r3, [pc, #8]	@ (800ced8 <raise+0xc>)
 800cece:	4601      	mov	r1, r0
 800ced0:	6818      	ldr	r0, [r3, #0]
 800ced2:	f7ff bfd3 	b.w	800ce7c <_raise_r>
 800ced6:	bf00      	nop
 800ced8:	20000114 	.word	0x20000114

0800cedc <_kill_r>:
 800cedc:	b538      	push	{r3, r4, r5, lr}
 800cede:	4d07      	ldr	r5, [pc, #28]	@ (800cefc <_kill_r+0x20>)
 800cee0:	2300      	movs	r3, #0
 800cee2:	4604      	mov	r4, r0
 800cee4:	4608      	mov	r0, r1
 800cee6:	4611      	mov	r1, r2
 800cee8:	602b      	str	r3, [r5, #0]
 800ceea:	f7f5 f8c1 	bl	8002070 <_kill>
 800ceee:	1c43      	adds	r3, r0, #1
 800cef0:	d102      	bne.n	800cef8 <_kill_r+0x1c>
 800cef2:	682b      	ldr	r3, [r5, #0]
 800cef4:	b103      	cbz	r3, 800cef8 <_kill_r+0x1c>
 800cef6:	6023      	str	r3, [r4, #0]
 800cef8:	bd38      	pop	{r3, r4, r5, pc}
 800cefa:	bf00      	nop
 800cefc:	200022f0 	.word	0x200022f0

0800cf00 <_getpid_r>:
 800cf00:	f7f5 b8ae 	b.w	8002060 <_getpid>

0800cf04 <_init>:
 800cf04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf06:	bf00      	nop
 800cf08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf0a:	bc08      	pop	{r3}
 800cf0c:	469e      	mov	lr, r3
 800cf0e:	4770      	bx	lr

0800cf10 <_fini>:
 800cf10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf12:	bf00      	nop
 800cf14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf16:	bc08      	pop	{r3}
 800cf18:	469e      	mov	lr, r3
 800cf1a:	4770      	bx	lr
