
STM32F405_EPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ace4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  0800ae78  0800ae78  0000be78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b288  0800b288  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b288  0800b288  0000c288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b290  0800b290  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b290  0800b290  0000c290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b294  0800b294  0000c294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b298  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1d4  2**0
                  CONTENTS
 10 .bss          000008fc  200001d4  200001d4  0000d1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ad0  20000ad0  0000d1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000166e0  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033d8  00000000  00000000  000238e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001490  00000000  00000000  00026cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000101b  00000000  00000000  00028150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002357b  00000000  00000000  0002916b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bd3d  00000000  00000000  0004c6e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d40e0  00000000  00000000  00068423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013c503  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000068c0  00000000  00000000  0013c548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00142e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ae5c 	.word	0x0800ae5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800ae5c 	.word	0x0800ae5c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eaa:	4b21      	ldr	r3, [pc, #132]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000eac:	4a21      	ldr	r2, [pc, #132]	@ (8000f34 <MX_ADC1_Init+0x9c>)
 8000eae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000eb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000eb2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000eb6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ec4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eca:	4b19      	ldr	r3, [pc, #100]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed2:	4b17      	ldr	r3, [pc, #92]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed8:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000eda:	4a17      	ldr	r2, [pc, #92]	@ (8000f38 <MX_ADC1_Init+0xa0>)
 8000edc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ede:	4b14      	ldr	r3, [pc, #80]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000eea:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ef8:	480d      	ldr	r0, [pc, #52]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000efa:	f001 fa3b 	bl	8002374 <HAL_ADC_Init>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f04:	f000 fd60 	bl	80019c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f08:	2304      	movs	r3, #4
 8000f0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f14:	463b      	mov	r3, r7
 8000f16:	4619      	mov	r1, r3
 8000f18:	4805      	ldr	r0, [pc, #20]	@ (8000f30 <MX_ADC1_Init+0x98>)
 8000f1a:	f001 fa6f 	bl	80023fc <HAL_ADC_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f24:	f000 fd50 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200001f0 	.word	0x200001f0
 8000f34:	40012000 	.word	0x40012000
 8000f38:	0f000001 	.word	0x0f000001

08000f3c <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f42:	463b      	mov	r3, r7
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000f4e:	4b21      	ldr	r3, [pc, #132]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f50:	4a21      	ldr	r2, [pc, #132]	@ (8000fd8 <MX_ADC2_Init+0x9c>)
 8000f52:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f54:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f56:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f5a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000f62:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f76:	4b17      	ldr	r3, [pc, #92]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f7c:	4b15      	ldr	r3, [pc, #84]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f7e:	4a17      	ldr	r2, [pc, #92]	@ (8000fdc <MX_ADC2_Init+0xa0>)
 8000f80:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f82:	4b14      	ldr	r3, [pc, #80]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000f88:	4b12      	ldr	r3, [pc, #72]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f8e:	4b11      	ldr	r3, [pc, #68]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f96:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f9c:	480d      	ldr	r0, [pc, #52]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000f9e:	f001 f9e9 	bl	8002374 <HAL_ADC_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8000fa8:	f000 fd0e 	bl	80019c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fac:	2306      	movs	r3, #6
 8000fae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fb8:	463b      	mov	r3, r7
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4805      	ldr	r0, [pc, #20]	@ (8000fd4 <MX_ADC2_Init+0x98>)
 8000fbe:	f001 fa1d 	bl	80023fc <HAL_ADC_ConfigChannel>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8000fc8:	f000 fcfe 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000238 	.word	0x20000238
 8000fd8:	40012100 	.word	0x40012100
 8000fdc:	0f000001 	.word	0x0f000001

08000fe0 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000ff2:	4b21      	ldr	r3, [pc, #132]	@ (8001078 <MX_ADC3_Init+0x98>)
 8000ff4:	4a21      	ldr	r2, [pc, #132]	@ (800107c <MX_ADC3_Init+0x9c>)
 8000ff6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <MX_ADC3_Init+0x98>)
 8000ffa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ffe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001000:	4b1d      	ldr	r3, [pc, #116]	@ (8001078 <MX_ADC3_Init+0x98>)
 8001002:	2200      	movs	r2, #0
 8001004:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001006:	4b1c      	ldr	r3, [pc, #112]	@ (8001078 <MX_ADC3_Init+0x98>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800100c:	4b1a      	ldr	r3, [pc, #104]	@ (8001078 <MX_ADC3_Init+0x98>)
 800100e:	2200      	movs	r2, #0
 8001010:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001012:	4b19      	ldr	r3, [pc, #100]	@ (8001078 <MX_ADC3_Init+0x98>)
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800101a:	4b17      	ldr	r3, [pc, #92]	@ (8001078 <MX_ADC3_Init+0x98>)
 800101c:	2200      	movs	r2, #0
 800101e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001020:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <MX_ADC3_Init+0x98>)
 8001022:	4a17      	ldr	r2, [pc, #92]	@ (8001080 <MX_ADC3_Init+0xa0>)
 8001024:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001026:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <MX_ADC3_Init+0x98>)
 8001028:	2200      	movs	r2, #0
 800102a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800102c:	4b12      	ldr	r3, [pc, #72]	@ (8001078 <MX_ADC3_Init+0x98>)
 800102e:	2201      	movs	r2, #1
 8001030:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001032:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <MX_ADC3_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800103a:	4b0f      	ldr	r3, [pc, #60]	@ (8001078 <MX_ADC3_Init+0x98>)
 800103c:	2201      	movs	r2, #1
 800103e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001040:	480d      	ldr	r0, [pc, #52]	@ (8001078 <MX_ADC3_Init+0x98>)
 8001042:	f001 f997 	bl	8002374 <HAL_ADC_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800104c:	f000 fcbc 	bl	80019c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001050:	2301      	movs	r3, #1
 8001052:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001054:	2301      	movs	r3, #1
 8001056:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001058:	2300      	movs	r3, #0
 800105a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800105c:	463b      	mov	r3, r7
 800105e:	4619      	mov	r1, r3
 8001060:	4805      	ldr	r0, [pc, #20]	@ (8001078 <MX_ADC3_Init+0x98>)
 8001062:	f001 f9cb 	bl	80023fc <HAL_ADC_ConfigChannel>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800106c:	f000 fcac 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20000280 	.word	0x20000280
 800107c:	40012200 	.word	0x40012200
 8001080:	0f000001 	.word	0x0f000001

08001084 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b090      	sub	sp, #64	@ 0x40
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a6c      	ldr	r2, [pc, #432]	@ (8001254 <HAL_ADC_MspInit+0x1d0>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d142      	bne.n	800112c <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010aa:	4b6b      	ldr	r3, [pc, #428]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ae:	4a6a      	ldr	r2, [pc, #424]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 80010b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010b6:	4b68      	ldr	r3, [pc, #416]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80010c6:	4b64      	ldr	r3, [pc, #400]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	4a63      	ldr	r2, [pc, #396]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d2:	4b61      	ldr	r3, [pc, #388]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	627b      	str	r3, [r7, #36]	@ 0x24
 80010dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]
 80010e2:	4b5d      	ldr	r3, [pc, #372]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	4a5c      	ldr	r2, [pc, #368]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ee:	4b5a      	ldr	r3, [pc, #360]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	623b      	str	r3, [r7, #32]
 80010f8:	6a3b      	ldr	r3, [r7, #32]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = CurrYMPPT_Pin|VoltYMPPT_Pin|Volt5V_Pin|Curr5V_Pin;
 80010fa:	233c      	movs	r3, #60	@ 0x3c
 80010fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fe:	2303      	movs	r3, #3
 8001100:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001106:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800110a:	4619      	mov	r1, r3
 800110c:	4853      	ldr	r0, [pc, #332]	@ (800125c <HAL_ADC_MspInit+0x1d8>)
 800110e:	f001 fcd5 	bl	8002abc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Curr5VBis_Pin|Volt5VBis_Pin;
 8001112:	2330      	movs	r3, #48	@ 0x30
 8001114:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001116:	2303      	movs	r3, #3
 8001118:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001122:	4619      	mov	r1, r3
 8001124:	484e      	ldr	r0, [pc, #312]	@ (8001260 <HAL_ADC_MspInit+0x1dc>)
 8001126:	f001 fcc9 	bl	8002abc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800112a:	e08e      	b.n	800124a <HAL_ADC_MspInit+0x1c6>
  else if(adcHandle->Instance==ADC2)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a4c      	ldr	r2, [pc, #304]	@ (8001264 <HAL_ADC_MspInit+0x1e0>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d15c      	bne.n	80011f0 <HAL_ADC_MspInit+0x16c>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	4b47      	ldr	r3, [pc, #284]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113e:	4a46      	ldr	r2, [pc, #280]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 8001140:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001144:	6453      	str	r3, [r2, #68]	@ 0x44
 8001146:	4b44      	ldr	r3, [pc, #272]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800114a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800114e:	61fb      	str	r3, [r7, #28]
 8001150:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
 8001156:	4b40      	ldr	r3, [pc, #256]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115a:	4a3f      	ldr	r2, [pc, #252]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 800115c:	f043 0304 	orr.w	r3, r3, #4
 8001160:	6313      	str	r3, [r2, #48]	@ 0x30
 8001162:	4b3d      	ldr	r3, [pc, #244]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001166:	f003 0304 	and.w	r3, r3, #4
 800116a:	61bb      	str	r3, [r7, #24]
 800116c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	4b39      	ldr	r3, [pc, #228]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	4a38      	ldr	r2, [pc, #224]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6313      	str	r3, [r2, #48]	@ 0x30
 800117e:	4b36      	ldr	r3, [pc, #216]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	617b      	str	r3, [r7, #20]
 8001188:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b32      	ldr	r3, [pc, #200]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001192:	4a31      	ldr	r2, [pc, #196]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	6313      	str	r3, [r2, #48]	@ 0x30
 800119a:	4b2f      	ldr	r3, [pc, #188]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = CurrXMPPT_Pin|VoltXMPPT_Pin;
 80011a6:	2303      	movs	r3, #3
 80011a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011aa:	2303      	movs	r3, #3
 80011ac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011b6:	4619      	mov	r1, r3
 80011b8:	4828      	ldr	r0, [pc, #160]	@ (800125c <HAL_ADC_MspInit+0x1d8>)
 80011ba:	f001 fc7f 	bl	8002abc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Volt3_3V_Pin|Curr3_3V_Pin;
 80011be:	23c0      	movs	r3, #192	@ 0xc0
 80011c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c2:	2303      	movs	r3, #3
 80011c4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011ce:	4619      	mov	r1, r3
 80011d0:	4823      	ldr	r0, [pc, #140]	@ (8001260 <HAL_ADC_MspInit+0x1dc>)
 80011d2:	f001 fc73 	bl	8002abc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Volt3_3VBis_Pin|Curr3_3Vbis_Pin;
 80011d6:	2303      	movs	r3, #3
 80011d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011da:	2303      	movs	r3, #3
 80011dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011e6:	4619      	mov	r1, r3
 80011e8:	481f      	ldr	r0, [pc, #124]	@ (8001268 <HAL_ADC_MspInit+0x1e4>)
 80011ea:	f001 fc67 	bl	8002abc <HAL_GPIO_Init>
}
 80011ee:	e02c      	b.n	800124a <HAL_ADC_MspInit+0x1c6>
  else if(adcHandle->Instance==ADC3)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a1d      	ldr	r2, [pc, #116]	@ (800126c <HAL_ADC_MspInit+0x1e8>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d127      	bne.n	800124a <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
 80011fe:	4b16      	ldr	r3, [pc, #88]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 8001200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001202:	4a15      	ldr	r2, [pc, #84]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 8001204:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001208:	6453      	str	r3, [r2, #68]	@ 0x44
 800120a:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 800120c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001212:	60fb      	str	r3, [r7, #12]
 8001214:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	4a0e      	ldr	r2, [pc, #56]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	6313      	str	r3, [r2, #48]	@ 0x30
 8001226:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <HAL_ADC_MspInit+0x1d4>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	60bb      	str	r3, [r7, #8]
 8001230:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CurrZMPPT_Pin|VoltZMPPT_Pin;
 8001232:	2306      	movs	r3, #6
 8001234:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001236:	2303      	movs	r3, #3
 8001238:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001242:	4619      	mov	r1, r3
 8001244:	4806      	ldr	r0, [pc, #24]	@ (8001260 <HAL_ADC_MspInit+0x1dc>)
 8001246:	f001 fc39 	bl	8002abc <HAL_GPIO_Init>
}
 800124a:	bf00      	nop
 800124c:	3740      	adds	r7, #64	@ 0x40
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	40012000 	.word	0x40012000
 8001258:	40023800 	.word	0x40023800
 800125c:	40020800 	.word	0x40020800
 8001260:	40020000 	.word	0x40020000
 8001264:	40012100 	.word	0x40012100
 8001268:	40020400 	.word	0x40020400
 800126c:	40012200 	.word	0x40012200

08001270 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	@ 0x28
 8001274:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001276:	f107 0314 	add.w	r3, r7, #20
 800127a:	2200      	movs	r2, #0
 800127c:	601a      	str	r2, [r3, #0]
 800127e:	605a      	str	r2, [r3, #4]
 8001280:	609a      	str	r2, [r3, #8]
 8001282:	60da      	str	r2, [r3, #12]
 8001284:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	4b59      	ldr	r3, [pc, #356]	@ (80013f0 <MX_GPIO_Init+0x180>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a58      	ldr	r2, [pc, #352]	@ (80013f0 <MX_GPIO_Init+0x180>)
 8001290:	f043 0304 	orr.w	r3, r3, #4
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b56      	ldr	r3, [pc, #344]	@ (80013f0 <MX_GPIO_Init+0x180>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b52      	ldr	r3, [pc, #328]	@ (80013f0 <MX_GPIO_Init+0x180>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a51      	ldr	r2, [pc, #324]	@ (80013f0 <MX_GPIO_Init+0x180>)
 80012ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b4f      	ldr	r3, [pc, #316]	@ (80013f0 <MX_GPIO_Init+0x180>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	4b4b      	ldr	r3, [pc, #300]	@ (80013f0 <MX_GPIO_Init+0x180>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a4a      	ldr	r2, [pc, #296]	@ (80013f0 <MX_GPIO_Init+0x180>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b48      	ldr	r3, [pc, #288]	@ (80013f0 <MX_GPIO_Init+0x180>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	4b44      	ldr	r3, [pc, #272]	@ (80013f0 <MX_GPIO_Init+0x180>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	4a43      	ldr	r2, [pc, #268]	@ (80013f0 <MX_GPIO_Init+0x180>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ea:	4b41      	ldr	r3, [pc, #260]	@ (80013f0 <MX_GPIO_Init+0x180>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	4b3d      	ldr	r3, [pc, #244]	@ (80013f0 <MX_GPIO_Init+0x180>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	4a3c      	ldr	r2, [pc, #240]	@ (80013f0 <MX_GPIO_Init+0x180>)
 8001300:	f043 0308 	orr.w	r3, r3, #8
 8001304:	6313      	str	r3, [r2, #48]	@ 0x30
 8001306:	4b3a      	ldr	r3, [pc, #232]	@ (80013f0 <MX_GPIO_Init+0x180>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Enable5V_Pin|Enable3_3VBis_Pin|Enable3_3V_Pin|Enable5VBis_Pin
 8001312:	2200      	movs	r2, #0
 8001314:	f645 4104 	movw	r1, #23556	@ 0x5c04
 8001318:	4836      	ldr	r0, [pc, #216]	@ (80013f4 <MX_GPIO_Init+0x184>)
 800131a:	f001 fd83 	bl	8002e24 <HAL_GPIO_WritePin>
                          |EnableCalefactor_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EnableBatOut_GPIO_Port, EnableBatOut_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001324:	4834      	ldr	r0, [pc, #208]	@ (80013f8 <MX_GPIO_Init+0x188>)
 8001326:	f001 fd7d 	bl	8002e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 PC6
                           PC7 PC8 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_6
 800132a:	f24f 13c0 	movw	r3, #61888	@ 0xf1c0
 800132e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001330:	2303      	movs	r3, #3
 8001332:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	4619      	mov	r1, r3
 800133e:	482f      	ldr	r0, [pc, #188]	@ (80013fc <MX_GPIO_Init+0x18c>)
 8001340:	f001 fbbc 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Enable5V_Pin|Enable3_3VBis_Pin|Enable3_3V_Pin|Enable5VBis_Pin
 8001344:	f645 4304 	movw	r3, #23556	@ 0x5c04
 8001348:	617b      	str	r3, [r7, #20]
                          |EnableCalefactor_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134a:	2301      	movs	r3, #1
 800134c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800134e:	2301      	movs	r3, #1
 8001350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001352:	2300      	movs	r3, #0
 8001354:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	f107 0314 	add.w	r3, r7, #20
 800135a:	4619      	mov	r1, r3
 800135c:	4825      	ldr	r0, [pc, #148]	@ (80013f4 <MX_GPIO_Init+0x184>)
 800135e:	f001 fbad 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
 8001362:	f24a 0338 	movw	r3, #41016	@ 0xa038
 8001366:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001368:	2303      	movs	r3, #3
 800136a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	481f      	ldr	r0, [pc, #124]	@ (80013f4 <MX_GPIO_Init+0x184>)
 8001378:	f001 fba0 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EnableBatOut_Pin;
 800137c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001380:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001382:	2301      	movs	r3, #1
 8001384:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001386:	2301      	movs	r3, #1
 8001388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	2300      	movs	r3, #0
 800138c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(EnableBatOut_GPIO_Port, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	4818      	ldr	r0, [pc, #96]	@ (80013f8 <MX_GPIO_Init+0x188>)
 8001396:	f001 fb91 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800139a:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 800139e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a0:	2303      	movs	r3, #3
 80013a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	4812      	ldr	r0, [pc, #72]	@ (80013f8 <MX_GPIO_Init+0x188>)
 80013b0:	f001 fb84 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013b4:	2304      	movs	r3, #4
 80013b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b8:	2303      	movs	r3, #3
 80013ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	480e      	ldr	r0, [pc, #56]	@ (8001400 <MX_GPIO_Init+0x190>)
 80013c8:	f001 fb78 	bl	8002abc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BMS_Alert_Pin;
 80013cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d2:	2300      	movs	r3, #0
 80013d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013d6:	2301      	movs	r3, #1
 80013d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BMS_Alert_GPIO_Port, &GPIO_InitStruct);
 80013da:	f107 0314 	add.w	r3, r7, #20
 80013de:	4619      	mov	r1, r3
 80013e0:	4804      	ldr	r0, [pc, #16]	@ (80013f4 <MX_GPIO_Init+0x184>)
 80013e2:	f001 fb6b 	bl	8002abc <HAL_GPIO_Init>

}
 80013e6:	bf00      	nop
 80013e8:	3728      	adds	r7, #40	@ 0x28
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40020400 	.word	0x40020400
 80013f8:	40020000 	.word	0x40020000
 80013fc:	40020800 	.word	0x40020800
 8001400:	40020c00 	.word	0x40020c00

08001404 <BQ76905_ReadRegister_test>:
    // Leer los datos del registro
    return HAL_I2C_Master_Receive(&hi2c1, BQ76905_ADDR, data, len, HAL_MAX_DELAY);
}

// Función para leer un registro del BQ76905
HAL_StatusTypeDef BQ76905_ReadRegister_test(uint8_t regAddr, uint8_t *data, uint16_t size) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af04      	add	r7, sp, #16
 800140a:	4603      	mov	r3, r0
 800140c:	6039      	str	r1, [r7, #0]
 800140e:	71fb      	strb	r3, [r7, #7]
 8001410:	4613      	mov	r3, r2
 8001412:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&hi2c1, BQ76905_ADDR, regAddr, I2C_MEMADD_SIZE_8BIT, data, size, HAL_MAX_DELAY);
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	b29a      	uxth	r2, r3
 8001418:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800141c:	9302      	str	r3, [sp, #8]
 800141e:	88bb      	ldrh	r3, [r7, #4]
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	2301      	movs	r3, #1
 8001428:	2120      	movs	r1, #32
 800142a:	4804      	ldr	r0, [pc, #16]	@ (800143c <BQ76905_ReadRegister_test+0x38>)
 800142c:	f002 f99e 	bl	800376c <HAL_I2C_Mem_Read>
 8001430:	4603      	mov	r3, r0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200002c8 	.word	0x200002c8

08001440 <ReadCellVoltage>:

// Función para leer el voltaje de una celda
void ReadCellVoltage(I2C_HandleTypeDef *hi2c, uint8_t cell) {
 8001440:	b5b0      	push	{r4, r5, r7, lr}
 8001442:	b0ac      	sub	sp, #176	@ 0xb0
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	70fb      	strb	r3, [r7, #3]
    uint8_t cmd_addr = 0x14 + (cell * 2);
 800144c:	78fb      	ldrb	r3, [r7, #3]
 800144e:	330a      	adds	r3, #10
 8001450:	b2db      	uxtb	r3, r3
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
    uint8_t result;
	char buffer[100];

	HAL_UART_Transmit(&huart4, (uint8_t) BQ76905_ReadRegister_test(cmd_addr, result, 2),100, HAL_MAX_DELAY);
 8001458:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 800145c:	4619      	mov	r1, r3
 800145e:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8001462:	2202      	movs	r2, #2
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ffcd 	bl	8001404 <BQ76905_ReadRegister_test>
 800146a:	4603      	mov	r3, r0
 800146c:	4619      	mov	r1, r3
 800146e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001472:	2264      	movs	r2, #100	@ 0x64
 8001474:	4826      	ldr	r0, [pc, #152]	@ (8001510 <ReadCellVoltage+0xd0>)
 8001476:	f005 fff1 	bl	800745c <HAL_UART_Transmit>


    if (BQ76905_ReadRegister_test(cmd_addr, result, 2) == HAL_OK) {
 800147a:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 800147e:	4619      	mov	r1, r3
 8001480:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8001484:	2202      	movs	r2, #2
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff ffbc 	bl	8001404 <BQ76905_ReadRegister_test>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d116      	bne.n	80014c0 <ReadCellVoltage+0x80>
    	sprintf(buffer, "Cellda %d = %d mV\n", cell, result); // @suppress("Float formatting support")
 8001492:	78fa      	ldrb	r2, [r7, #3]
 8001494:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 8001498:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 800149c:	491d      	ldr	r1, [pc, #116]	@ (8001514 <ReadCellVoltage+0xd4>)
 800149e:	f007 faef 	bl	8008a80 <siprintf>
    	HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 80014a2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7fe fee2 	bl	8000270 <strlen>
 80014ac:	4603      	mov	r3, r0
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014b8:	4815      	ldr	r0, [pc, #84]	@ (8001510 <ReadCellVoltage+0xd0>)
 80014ba:	f005 ffcf 	bl	800745c <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart4, (uint8_t*) MSG_READ_ERROR,50, HAL_MAX_DELAY);
    	HAL_UART_Transmit(&huart4,(uint8_t*) result,100, HAL_MAX_DELAY);
    	//HAL_UART_Transmit(&huart4, result[1],100, HAL_MAX_DELAY);

    }
}
 80014be:	e022      	b.n	8001506 <ReadCellVoltage+0xc6>
    	char MSG_READ_ERROR[60] =  "\n Error al leer \n";
 80014c0:	4b15      	ldr	r3, [pc, #84]	@ (8001518 <ReadCellVoltage+0xd8>)
 80014c2:	f107 040c 	add.w	r4, r7, #12
 80014c6:	461d      	mov	r5, r3
 80014c8:	6828      	ldr	r0, [r5, #0]
 80014ca:	6869      	ldr	r1, [r5, #4]
 80014cc:	68aa      	ldr	r2, [r5, #8]
 80014ce:	68eb      	ldr	r3, [r5, #12]
 80014d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014d2:	8a2b      	ldrh	r3, [r5, #16]
 80014d4:	8023      	strh	r3, [r4, #0]
 80014d6:	f107 031e 	add.w	r3, r7, #30
 80014da:	222a      	movs	r2, #42	@ 0x2a
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f007 fbb0 	bl	8008c44 <memset>
        HAL_UART_Transmit(&huart4, (uint8_t*) MSG_READ_ERROR,50, HAL_MAX_DELAY);
 80014e4:	f107 010c 	add.w	r1, r7, #12
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014ec:	2232      	movs	r2, #50	@ 0x32
 80014ee:	4808      	ldr	r0, [pc, #32]	@ (8001510 <ReadCellVoltage+0xd0>)
 80014f0:	f005 ffb4 	bl	800745c <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart4,(uint8_t*) result,100, HAL_MAX_DELAY);
 80014f4:	f897 30ae 	ldrb.w	r3, [r7, #174]	@ 0xae
 80014f8:	4619      	mov	r1, r3
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014fe:	2264      	movs	r2, #100	@ 0x64
 8001500:	4803      	ldr	r0, [pc, #12]	@ (8001510 <ReadCellVoltage+0xd0>)
 8001502:	f005 ffab 	bl	800745c <HAL_UART_Transmit>
}
 8001506:	bf00      	nop
 8001508:	37b0      	adds	r7, #176	@ 0xb0
 800150a:	46bd      	mov	sp, r7
 800150c:	bdb0      	pop	{r4, r5, r7, pc}
 800150e:	bf00      	nop
 8001510:	20000454 	.word	0x20000454
 8001514:	0800ae78 	.word	0x0800ae78
 8001518:	0800ae8c 	.word	0x0800ae8c

0800151c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <MX_I2C1_Init+0x50>)
 8001522:	4a13      	ldr	r2, [pc, #76]	@ (8001570 <MX_I2C1_Init+0x54>)
 8001524:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001526:	4b11      	ldr	r3, [pc, #68]	@ (800156c <MX_I2C1_Init+0x50>)
 8001528:	4a12      	ldr	r2, [pc, #72]	@ (8001574 <MX_I2C1_Init+0x58>)
 800152a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800152c:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <MX_I2C1_Init+0x50>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 32;
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <MX_I2C1_Init+0x50>)
 8001534:	2220      	movs	r2, #32
 8001536:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001538:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <MX_I2C1_Init+0x50>)
 800153a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800153e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001540:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <MX_I2C1_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001546:	4b09      	ldr	r3, [pc, #36]	@ (800156c <MX_I2C1_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800154c:	4b07      	ldr	r3, [pc, #28]	@ (800156c <MX_I2C1_Init+0x50>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <MX_I2C1_Init+0x50>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001558:	4804      	ldr	r0, [pc, #16]	@ (800156c <MX_I2C1_Init+0x50>)
 800155a:	f001 fc7d 	bl	8002e58 <HAL_I2C_Init>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001564:	f000 fa30 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200002c8 	.word	0x200002c8
 8001570:	40005400 	.word	0x40005400
 8001574:	00061a80 	.word	0x00061a80

08001578 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800157c:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <MX_I2C3_Init+0x50>)
 800157e:	4a13      	ldr	r2, [pc, #76]	@ (80015cc <MX_I2C3_Init+0x54>)
 8001580:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001582:	4b11      	ldr	r3, [pc, #68]	@ (80015c8 <MX_I2C3_Init+0x50>)
 8001584:	4a12      	ldr	r2, [pc, #72]	@ (80015d0 <MX_I2C3_Init+0x58>)
 8001586:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001588:	4b0f      	ldr	r3, [pc, #60]	@ (80015c8 <MX_I2C3_Init+0x50>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800158e:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <MX_I2C3_Init+0x50>)
 8001590:	2200      	movs	r2, #0
 8001592:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001594:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <MX_I2C3_Init+0x50>)
 8001596:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800159a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800159c:	4b0a      	ldr	r3, [pc, #40]	@ (80015c8 <MX_I2C3_Init+0x50>)
 800159e:	2200      	movs	r2, #0
 80015a0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80015a2:	4b09      	ldr	r3, [pc, #36]	@ (80015c8 <MX_I2C3_Init+0x50>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a8:	4b07      	ldr	r3, [pc, #28]	@ (80015c8 <MX_I2C3_Init+0x50>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015ae:	4b06      	ldr	r3, [pc, #24]	@ (80015c8 <MX_I2C3_Init+0x50>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80015b4:	4804      	ldr	r0, [pc, #16]	@ (80015c8 <MX_I2C3_Init+0x50>)
 80015b6:	f001 fc4f 	bl	8002e58 <HAL_I2C_Init>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80015c0:	f000 fa02 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	2000031c 	.word	0x2000031c
 80015cc:	40005c00 	.word	0x40005c00
 80015d0:	000186a0 	.word	0x000186a0

080015d4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08c      	sub	sp, #48	@ 0x30
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 031c 	add.w	r3, r7, #28
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a4a      	ldr	r2, [pc, #296]	@ (800171c <HAL_I2C_MspInit+0x148>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d13c      	bne.n	8001670 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	61bb      	str	r3, [r7, #24]
 80015fa:	4b49      	ldr	r3, [pc, #292]	@ (8001720 <HAL_I2C_MspInit+0x14c>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	4a48      	ldr	r2, [pc, #288]	@ (8001720 <HAL_I2C_MspInit+0x14c>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	6313      	str	r3, [r2, #48]	@ 0x30
 8001606:	4b46      	ldr	r3, [pc, #280]	@ (8001720 <HAL_I2C_MspInit+0x14c>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	61bb      	str	r3, [r7, #24]
 8001610:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = SCL_BMS_Pin|SDA_BMS_Pin;
 8001612:	23c0      	movs	r3, #192	@ 0xc0
 8001614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001616:	2312      	movs	r3, #18
 8001618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800161a:	2301      	movs	r3, #1
 800161c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001622:	2304      	movs	r3, #4
 8001624:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001626:	f107 031c 	add.w	r3, r7, #28
 800162a:	4619      	mov	r1, r3
 800162c:	483d      	ldr	r0, [pc, #244]	@ (8001724 <HAL_I2C_MspInit+0x150>)
 800162e:	f001 fa45 	bl	8002abc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	4b3a      	ldr	r3, [pc, #232]	@ (8001720 <HAL_I2C_MspInit+0x14c>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163a:	4a39      	ldr	r2, [pc, #228]	@ (8001720 <HAL_I2C_MspInit+0x14c>)
 800163c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001640:	6413      	str	r3, [r2, #64]	@ 0x40
 8001642:	4b37      	ldr	r3, [pc, #220]	@ (8001720 <HAL_I2C_MspInit+0x14c>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001646:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	201f      	movs	r0, #31
 8001654:	f001 f9cb 	bl	80029ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001658:	201f      	movs	r0, #31
 800165a:	f001 f9e4 	bl	8002a26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2100      	movs	r1, #0
 8001662:	2020      	movs	r0, #32
 8001664:	f001 f9c3 	bl	80029ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001668:	2020      	movs	r0, #32
 800166a:	f001 f9dc 	bl	8002a26 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800166e:	e050      	b.n	8001712 <HAL_I2C_MspInit+0x13e>
  else if(i2cHandle->Instance==I2C3)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a2c      	ldr	r2, [pc, #176]	@ (8001728 <HAL_I2C_MspInit+0x154>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d14b      	bne.n	8001712 <HAL_I2C_MspInit+0x13e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	4b28      	ldr	r3, [pc, #160]	@ (8001720 <HAL_I2C_MspInit+0x14c>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	4a27      	ldr	r2, [pc, #156]	@ (8001720 <HAL_I2C_MspInit+0x14c>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6313      	str	r3, [r2, #48]	@ 0x30
 800168a:	4b25      	ldr	r3, [pc, #148]	@ (8001720 <HAL_I2C_MspInit+0x14c>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	4b21      	ldr	r3, [pc, #132]	@ (8001720 <HAL_I2C_MspInit+0x14c>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169e:	4a20      	ldr	r2, [pc, #128]	@ (8001720 <HAL_I2C_MspInit+0x14c>)
 80016a0:	f043 0301 	orr.w	r3, r3, #1
 80016a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001720 <HAL_I2C_MspInit+0x14c>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016b8:	2312      	movs	r3, #18
 80016ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016bc:	2301      	movs	r3, #1
 80016be:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016c4:	2304      	movs	r3, #4
 80016c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016c8:	f107 031c 	add.w	r3, r7, #28
 80016cc:	4619      	mov	r1, r3
 80016ce:	4817      	ldr	r0, [pc, #92]	@ (800172c <HAL_I2C_MspInit+0x158>)
 80016d0:	f001 f9f4 	bl	8002abc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016da:	2312      	movs	r3, #18
 80016dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016de:	2301      	movs	r3, #1
 80016e0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e2:	2303      	movs	r3, #3
 80016e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016e6:	2304      	movs	r3, #4
 80016e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ea:	f107 031c 	add.w	r3, r7, #28
 80016ee:	4619      	mov	r1, r3
 80016f0:	480f      	ldr	r0, [pc, #60]	@ (8001730 <HAL_I2C_MspInit+0x15c>)
 80016f2:	f001 f9e3 	bl	8002abc <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <HAL_I2C_MspInit+0x14c>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fe:	4a08      	ldr	r2, [pc, #32]	@ (8001720 <HAL_I2C_MspInit+0x14c>)
 8001700:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001704:	6413      	str	r3, [r2, #64]	@ 0x40
 8001706:	4b06      	ldr	r3, [pc, #24]	@ (8001720 <HAL_I2C_MspInit+0x14c>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
}
 8001712:	bf00      	nop
 8001714:	3730      	adds	r7, #48	@ 0x30
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40005400 	.word	0x40005400
 8001720:	40023800 	.word	0x40023800
 8001724:	40020400 	.word	0x40020400
 8001728:	40005c00 	.word	0x40005c00
 800172c:	40020800 	.word	0x40020800
 8001730:	40020000 	.word	0x40020000

08001734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001734:	b5b0      	push	{r4, r5, r7, lr}
 8001736:	b0b0      	sub	sp, #192	@ 0xc0
 8001738:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800173a:	f000 fd85 	bl	8002248 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800173e:	f000 f8d9 	bl	80018f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001742:	f7ff fd95 	bl	8001270 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001746:	f7ff fba7 	bl	8000e98 <MX_ADC1_Init>
  MX_ADC2_Init();
 800174a:	f7ff fbf7 	bl	8000f3c <MX_ADC2_Init>
  MX_ADC3_Init();
 800174e:	f7ff fc47 	bl	8000fe0 <MX_ADC3_Init>
  MX_I2C1_Init();
 8001752:	f7ff fee3 	bl	800151c <MX_I2C1_Init>
  MX_I2C3_Init();
 8001756:	f7ff ff0f 	bl	8001578 <MX_I2C3_Init>
  MX_TIM2_Init();
 800175a:	f000 fa7f 	bl	8001c5c <MX_TIM2_Init>
  MX_TIM4_Init();
 800175e:	f000 fad7 	bl	8001d10 <MX_TIM4_Init>
  MX_TIM5_Init();
 8001762:	f000 fb2f 	bl	8001dc4 <MX_TIM5_Init>
  MX_UART4_Init();
 8001766:	f000 fc59 	bl	800201c <MX_UART4_Init>
  MX_USB_OTG_FS_PCD_Init();
 800176a:	f000 fcc9 	bl	8002100 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */



  //COMUNICACION ENTRE PLACAS
  HAL_I2C_EnableListen_IT(&hi2c1); // Habilitar escucha en modo esclavo
 800176e:	4855      	ldr	r0, [pc, #340]	@ (80018c4 <main+0x190>)
 8001770:	f002 fa2e 	bl	8003bd0 <HAL_I2C_EnableListen_IT>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001774:	2100      	movs	r1, #0
 8001776:	4854      	ldr	r0, [pc, #336]	@ (80018c8 <main+0x194>)
 8001778:	f005 f998 	bl	8006aac <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800177c:	210c      	movs	r1, #12
 800177e:	4853      	ldr	r0, [pc, #332]	@ (80018cc <main+0x198>)
 8001780:	f005 f994 	bl	8006aac <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8001784:	210c      	movs	r1, #12
 8001786:	4852      	ldr	r0, [pc, #328]	@ (80018d0 <main+0x19c>)
 8001788:	f005 f990 	bl	8006aac <HAL_TIM_PWM_Start>


  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); 	//5V
 800178c:	2201      	movs	r2, #1
 800178e:	2104      	movs	r1, #4
 8001790:	4850      	ldr	r0, [pc, #320]	@ (80018d4 <main+0x1a0>)
 8001792:	f001 fb47 	bl	8002e24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//3.3V BIS
 8001796:	2201      	movs	r2, #1
 8001798:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800179c:	484d      	ldr	r0, [pc, #308]	@ (80018d4 <main+0x1a0>)
 800179e:	f001 fb41 	bl	8002e24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);	//3.3V
 80017a2:	2201      	movs	r2, #1
 80017a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017a8:	484a      	ldr	r0, [pc, #296]	@ (80018d4 <main+0x1a0>)
 80017aa:	f001 fb3b 	bl	8002e24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);	//5V BIS
 80017ae:	2201      	movs	r2, #1
 80017b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017b4:	4847      	ldr	r0, [pc, #284]	@ (80018d4 <main+0x1a0>)
 80017b6:	f001 fb35 	bl	8002e24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);	//Batery out BIS
 80017ba:	2201      	movs	r2, #1
 80017bc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017c0:	4845      	ldr	r0, [pc, #276]	@ (80018d8 <main+0x1a4>)
 80017c2:	f001 fb2f 	bl	8002e24 <HAL_GPIO_WritePin>

  //char *data = "hello from hell";
  uint8_t direccion = 0x00;
 80017c6:	2300      	movs	r3, #0
 80017c8:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7

		sprintf(buffer, "V3: %.2f V, I3: %.2f A \n", V3, I3); // @suppress("Float formatting support")
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
*/
		char buffer[100];
		sprintf(buffer, "\n V3bis: %.2f V, I3bis: %.2f A \n", V3bis, I3bis); // @suppress("Float formatting support")
 80017cc:	4b43      	ldr	r3, [pc, #268]	@ (80018dc <main+0x1a8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7fe feb9 	bl	8000548 <__aeabi_f2d>
 80017d6:	4604      	mov	r4, r0
 80017d8:	460d      	mov	r5, r1
 80017da:	4b41      	ldr	r3, [pc, #260]	@ (80018e0 <main+0x1ac>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe feb2 	bl	8000548 <__aeabi_f2d>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 80017ec:	e9cd 2300 	strd	r2, r3, [sp]
 80017f0:	4622      	mov	r2, r4
 80017f2:	462b      	mov	r3, r5
 80017f4:	493b      	ldr	r1, [pc, #236]	@ (80018e4 <main+0x1b0>)
 80017f6:	f007 f943 	bl	8008a80 <siprintf>
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
 80017fa:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fd36 	bl	8000270 <strlen>
 8001804:	4603      	mov	r3, r0
 8001806:	b29a      	uxth	r2, r3
 8001808:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 800180c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001810:	4835      	ldr	r0, [pc, #212]	@ (80018e8 <main+0x1b4>)
 8001812:	f005 fe23 	bl	800745c <HAL_UART_Transmit>
		//COMUNICACION BQ76905


		char MSG_para_arduino[20];

		HAL_I2C_Master_Receive(&hi2c3, 0x22 << 1, (uint8_t *) MSG_para_arduino, 20, HAL_MAX_DELAY);
 8001816:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800181a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	2314      	movs	r3, #20
 8001822:	2144      	movs	r1, #68	@ 0x44
 8001824:	4831      	ldr	r0, [pc, #196]	@ (80018ec <main+0x1b8>)
 8001826:	f001 fd6f 	bl	8003308 <HAL_I2C_Master_Receive>
		HAL_I2C_Master_Transmit(&hi2c3, 0x08 << 1, (uint8_t *) MSG_para_arduino, 20, HAL_MAX_DELAY);
 800182a:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 800182e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001832:	9300      	str	r3, [sp, #0]
 8001834:	2314      	movs	r3, #20
 8001836:	2110      	movs	r1, #16
 8001838:	482c      	ldr	r0, [pc, #176]	@ (80018ec <main+0x1b8>)
 800183a:	f001 fc67 	bl	800310c <HAL_I2C_Master_Transmit>
		direccion++;
 800183e:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 8001842:	3301      	adds	r3, #1
 8001844:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
		if(direccion > 128){
 8001848:	f897 30b7 	ldrb.w	r3, [r7, #183]	@ 0xb7
 800184c:	2b80      	cmp	r3, #128	@ 0x80
 800184e:	d902      	bls.n	8001856 <main+0x122>
			direccion =0x00;
 8001850:	2300      	movs	r3, #0
 8001852:	f887 30b7 	strb.w	r3, [r7, #183]	@ 0xb7
		//HAL_I2C_Master_Transmit(&hi2c1, BQ76905_ADDR, &reg, 1, HAL_MAX_DELAY);

		//HAL_UART_Transmit(&huart4, (uint8_t*) &battery_data->alert_status_B, strlen(buffer), HAL_MAX_DELAY);
        //HAL_UART_Transmit(&huart4, (uint8_t*)"\n\n\n",50, HAL_MAX_DELAY);

	    ReadCellVoltage(&hi2c1, 1);
 8001856:	2101      	movs	r1, #1
 8001858:	481a      	ldr	r0, [pc, #104]	@ (80018c4 <main+0x190>)
 800185a:	f7ff fdf1 	bl	8001440 <ReadCellVoltage>

		//CALENTAMIENTO Y CONTROL DE TEMPERATURA

        //if ((battery_data->alert_status_B & UTD) || (battery_data->alert_status_B & UTC) || (battery_data->alert_status_B & OTINT)) {
        if (1) {
        	char MSG_CALENT_OK[60] = "\n Calefactor encendido. Alarma activa. \n";
 800185e:	4b24      	ldr	r3, [pc, #144]	@ (80018f0 <main+0x1bc>)
 8001860:	463c      	mov	r4, r7
 8001862:	461d      	mov	r5, r3
 8001864:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001866:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001868:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800186a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800186c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001870:	c403      	stmia	r4!, {r0, r1}
 8001872:	7022      	strb	r2, [r4, #0]
 8001874:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	f8c3 200f 	str.w	r2, [r3, #15]
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);  // Activar calefactor
 8001886:	2201      	movs	r2, #1
 8001888:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800188c:	4811      	ldr	r0, [pc, #68]	@ (80018d4 <main+0x1a0>)
 800188e:	f001 fac9 	bl	8002e24 <HAL_GPIO_WritePin>
            HAL_UART_Transmit(&huart4, (uint8_t*) MSG_CALENT_OK,50, HAL_MAX_DELAY);
 8001892:	4639      	mov	r1, r7
 8001894:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001898:	2232      	movs	r2, #50	@ 0x32
 800189a:	4813      	ldr	r0, [pc, #76]	@ (80018e8 <main+0x1b4>)
 800189c:	f005 fdde 	bl	800745c <HAL_UART_Transmit>

		//MODO BAJO CONSUMO

		//ALMACENAMIENTO EN FLASH DE VARIBLES

	  	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET){
 80018a0:	2104      	movs	r1, #4
 80018a2:	480c      	ldr	r0, [pc, #48]	@ (80018d4 <main+0x1a0>)
 80018a4:	f001 faa6 	bl	8002df4 <HAL_GPIO_ReadPin>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d105      	bne.n	80018ba <main+0x186>
	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);	//Batery out BIS
 80018ae:	2201      	movs	r2, #1
 80018b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80018b4:	4808      	ldr	r0, [pc, #32]	@ (80018d8 <main+0x1a4>)
 80018b6:	f001 fab5 	bl	8002e24 <HAL_GPIO_WritePin>
	  	}

		HAL_Delay(2000);
 80018ba:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80018be:	f000 fd35 	bl	800232c <HAL_Delay>
  {
 80018c2:	e783      	b.n	80017cc <main+0x98>
 80018c4:	200002c8 	.word	0x200002c8
 80018c8:	2000037c 	.word	0x2000037c
 80018cc:	200003c4 	.word	0x200003c4
 80018d0:	2000040c 	.word	0x2000040c
 80018d4:	40020400 	.word	0x40020400
 80018d8:	40020000 	.word	0x40020000
 80018dc:	20000370 	.word	0x20000370
 80018e0:	20000374 	.word	0x20000374
 80018e4:	0800aea0 	.word	0x0800aea0
 80018e8:	20000454 	.word	0x20000454
 80018ec:	2000031c 	.word	0x2000031c
 80018f0:	0800aec4 	.word	0x0800aec4

080018f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b094      	sub	sp, #80	@ 0x50
 80018f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018fa:	f107 0320 	add.w	r3, r7, #32
 80018fe:	2230      	movs	r2, #48	@ 0x30
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f007 f99e 	bl	8008c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	609a      	str	r2, [r3, #8]
 8001914:	60da      	str	r2, [r3, #12]
 8001916:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	4b28      	ldr	r3, [pc, #160]	@ (80019c0 <SystemClock_Config+0xcc>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001920:	4a27      	ldr	r2, [pc, #156]	@ (80019c0 <SystemClock_Config+0xcc>)
 8001922:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001926:	6413      	str	r3, [r2, #64]	@ 0x40
 8001928:	4b25      	ldr	r3, [pc, #148]	@ (80019c0 <SystemClock_Config+0xcc>)
 800192a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001930:	60bb      	str	r3, [r7, #8]
 8001932:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001934:	2300      	movs	r3, #0
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	4b22      	ldr	r3, [pc, #136]	@ (80019c4 <SystemClock_Config+0xd0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a21      	ldr	r2, [pc, #132]	@ (80019c4 <SystemClock_Config+0xd0>)
 800193e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001942:	6013      	str	r3, [r2, #0]
 8001944:	4b1f      	ldr	r3, [pc, #124]	@ (80019c4 <SystemClock_Config+0xd0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800194c:	607b      	str	r3, [r7, #4]
 800194e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001950:	2301      	movs	r3, #1
 8001952:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001954:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001958:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800195a:	2302      	movs	r3, #2
 800195c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800195e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001962:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001964:	2304      	movs	r3, #4
 8001966:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8001968:	2360      	movs	r3, #96	@ 0x60
 800196a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800196c:	2306      	movs	r3, #6
 800196e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001970:	2304      	movs	r3, #4
 8001972:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001974:	f107 0320 	add.w	r3, r7, #32
 8001978:	4618      	mov	r0, r3
 800197a:	f004 fbaf 	bl	80060dc <HAL_RCC_OscConfig>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001984:	f000 f820 	bl	80019c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001988:	230f      	movs	r3, #15
 800198a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800198c:	2302      	movs	r3, #2
 800198e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8001990:	2380      	movs	r3, #128	@ 0x80
 8001992:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001994:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001998:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800199a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800199e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80019a0:	f107 030c 	add.w	r3, r7, #12
 80019a4:	2100      	movs	r1, #0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f004 fe10 	bl	80065cc <HAL_RCC_ClockConfig>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d001      	beq.n	80019b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80019b2:	f000 f809 	bl	80019c8 <Error_Handler>
  }
}
 80019b6:	bf00      	nop
 80019b8:	3750      	adds	r7, #80	@ 0x50
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40007000 	.word	0x40007000

080019c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019cc:	b672      	cpsid	i
}
 80019ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d0:	bf00      	nop
 80019d2:	e7fd      	b.n	80019d0 <Error_Handler+0x8>

080019d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019da:	2300      	movs	r3, #0
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	4b10      	ldr	r3, [pc, #64]	@ (8001a20 <HAL_MspInit+0x4c>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001a20 <HAL_MspInit+0x4c>)
 80019e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001a20 <HAL_MspInit+0x4c>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <HAL_MspInit+0x4c>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fe:	4a08      	ldr	r2, [pc, #32]	@ (8001a20 <HAL_MspInit+0x4c>)
 8001a00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a06:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <HAL_MspInit+0x4c>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800

08001a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <NMI_Handler+0x4>

08001a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <HardFault_Handler+0x4>

08001a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <MemManage_Handler+0x4>

08001a3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <BusFault_Handler+0x4>

08001a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <UsageFault_Handler+0x4>

08001a4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a7a:	f000 fc37 	bl	80022ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
	...

08001a84 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001a88:	4802      	ldr	r0, [pc, #8]	@ (8001a94 <I2C1_EV_IRQHandler+0x10>)
 8001a8a:	f002 f8d7 	bl	8003c3c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	200002c8 	.word	0x200002c8

08001a98 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001a9c:	4802      	ldr	r0, [pc, #8]	@ (8001aa8 <I2C1_ER_IRQHandler+0x10>)
 8001a9e:	f002 fa20 	bl	8003ee2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	200002c8 	.word	0x200002c8

08001aac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return 1;
 8001ab0:	2301      	movs	r3, #1
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <_kill>:

int _kill(int pid, int sig)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ac6:	f007 f8c9 	bl	8008c5c <__errno>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2216      	movs	r2, #22
 8001ace:	601a      	str	r2, [r3, #0]
  return -1;
 8001ad0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <_exit>:

void _exit (int status)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ae4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ffe7 	bl	8001abc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aee:	bf00      	nop
 8001af0:	e7fd      	b.n	8001aee <_exit+0x12>

08001af2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b086      	sub	sp, #24
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	60f8      	str	r0, [r7, #12]
 8001afa:	60b9      	str	r1, [r7, #8]
 8001afc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	e00a      	b.n	8001b1a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b04:	f3af 8000 	nop.w
 8001b08:	4601      	mov	r1, r0
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	1c5a      	adds	r2, r3, #1
 8001b0e:	60ba      	str	r2, [r7, #8]
 8001b10:	b2ca      	uxtb	r2, r1
 8001b12:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	3301      	adds	r3, #1
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	dbf0      	blt.n	8001b04 <_read+0x12>
  }

  return len;
 8001b22:	687b      	ldr	r3, [r7, #4]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	e009      	b.n	8001b52 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	1c5a      	adds	r2, r3, #1
 8001b42:	60ba      	str	r2, [r7, #8]
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	dbf1      	blt.n	8001b3e <_write+0x12>
  }
  return len;
 8001b5a:	687b      	ldr	r3, [r7, #4]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <_close>:

int _close(int file)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b8c:	605a      	str	r2, [r3, #4]
  return 0;
 8001b8e:	2300      	movs	r3, #0
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <_isatty>:

int _isatty(int file)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ba4:	2301      	movs	r3, #1
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b085      	sub	sp, #20
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	60f8      	str	r0, [r7, #12]
 8001bba:	60b9      	str	r1, [r7, #8]
 8001bbc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd4:	4a14      	ldr	r2, [pc, #80]	@ (8001c28 <_sbrk+0x5c>)
 8001bd6:	4b15      	ldr	r3, [pc, #84]	@ (8001c2c <_sbrk+0x60>)
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001be0:	4b13      	ldr	r3, [pc, #76]	@ (8001c30 <_sbrk+0x64>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d102      	bne.n	8001bee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be8:	4b11      	ldr	r3, [pc, #68]	@ (8001c30 <_sbrk+0x64>)
 8001bea:	4a12      	ldr	r2, [pc, #72]	@ (8001c34 <_sbrk+0x68>)
 8001bec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bee:	4b10      	ldr	r3, [pc, #64]	@ (8001c30 <_sbrk+0x64>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d207      	bcs.n	8001c0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bfc:	f007 f82e 	bl	8008c5c <__errno>
 8001c00:	4603      	mov	r3, r0
 8001c02:	220c      	movs	r2, #12
 8001c04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c0a:	e009      	b.n	8001c20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c0c:	4b08      	ldr	r3, [pc, #32]	@ (8001c30 <_sbrk+0x64>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c12:	4b07      	ldr	r3, [pc, #28]	@ (8001c30 <_sbrk+0x64>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	4a05      	ldr	r2, [pc, #20]	@ (8001c30 <_sbrk+0x64>)
 8001c1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20020000 	.word	0x20020000
 8001c2c:	00000400 	.word	0x00000400
 8001c30:	20000378 	.word	0x20000378
 8001c34:	20000ad0 	.word	0x20000ad0

08001c38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c3c:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <SystemInit+0x20>)
 8001c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c42:	4a05      	ldr	r2, [pc, #20]	@ (8001c58 <SystemInit+0x20>)
 8001c44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c4c:	bf00      	nop
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <MX_TIM2_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08a      	sub	sp, #40	@ 0x28
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c62:	f107 0320 	add.w	r3, r7, #32
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c6c:	1d3b      	adds	r3, r7, #4
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	611a      	str	r2, [r3, #16]
 8001c7a:	615a      	str	r2, [r3, #20]
 8001c7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c7e:	4b23      	ldr	r3, [pc, #140]	@ (8001d0c <MX_TIM2_Init+0xb0>)
 8001c80:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 420-1;
 8001c86:	4b21      	ldr	r3, [pc, #132]	@ (8001d0c <MX_TIM2_Init+0xb0>)
 8001c88:	f240 12a3 	movw	r2, #419	@ 0x1a3
 8001c8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001d0c <MX_TIM2_Init+0xb0>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c94:	4b1d      	ldr	r3, [pc, #116]	@ (8001d0c <MX_TIM2_Init+0xb0>)
 8001c96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8001d0c <MX_TIM2_Init+0xb0>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d0c <MX_TIM2_Init+0xb0>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ca8:	4818      	ldr	r0, [pc, #96]	@ (8001d0c <MX_TIM2_Init+0xb0>)
 8001caa:	f004 feaf 	bl	8006a0c <HAL_TIM_PWM_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001cb4:	f7ff fe88 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cc0:	f107 0320 	add.w	r3, r7, #32
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4811      	ldr	r0, [pc, #68]	@ (8001d0c <MX_TIM2_Init+0xb0>)
 8001cc8:	f005 fafc 	bl	80072c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001cd2:	f7ff fe79 	bl	80019c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cd6:	2360      	movs	r3, #96	@ 0x60
 8001cd8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ce6:	1d3b      	adds	r3, r7, #4
 8001ce8:	2200      	movs	r2, #0
 8001cea:	4619      	mov	r1, r3
 8001cec:	4807      	ldr	r0, [pc, #28]	@ (8001d0c <MX_TIM2_Init+0xb0>)
 8001cee:	f004 ffa5 	bl	8006c3c <HAL_TIM_PWM_ConfigChannel>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001cf8:	f7ff fe66 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cfc:	4803      	ldr	r0, [pc, #12]	@ (8001d0c <MX_TIM2_Init+0xb0>)
 8001cfe:	f000 f907 	bl	8001f10 <HAL_TIM_MspPostInit>

}
 8001d02:	bf00      	nop
 8001d04:	3728      	adds	r7, #40	@ 0x28
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	2000037c 	.word	0x2000037c

08001d10 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	@ 0x28
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d16:	f107 0320 	add.w	r3, r7, #32
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	601a      	str	r2, [r3, #0]
 8001d1e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	2200      	movs	r2, #0
 8001d24:	601a      	str	r2, [r3, #0]
 8001d26:	605a      	str	r2, [r3, #4]
 8001d28:	609a      	str	r2, [r3, #8]
 8001d2a:	60da      	str	r2, [r3, #12]
 8001d2c:	611a      	str	r2, [r3, #16]
 8001d2e:	615a      	str	r2, [r3, #20]
 8001d30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d32:	4b22      	ldr	r3, [pc, #136]	@ (8001dbc <MX_TIM4_Init+0xac>)
 8001d34:	4a22      	ldr	r2, [pc, #136]	@ (8001dc0 <MX_TIM4_Init+0xb0>)
 8001d36:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 420-1;
 8001d38:	4b20      	ldr	r3, [pc, #128]	@ (8001dbc <MX_TIM4_Init+0xac>)
 8001d3a:	f240 12a3 	movw	r2, #419	@ 0x1a3
 8001d3e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d40:	4b1e      	ldr	r3, [pc, #120]	@ (8001dbc <MX_TIM4_Init+0xac>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d46:	4b1d      	ldr	r3, [pc, #116]	@ (8001dbc <MX_TIM4_Init+0xac>)
 8001d48:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d4c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dbc <MX_TIM4_Init+0xac>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d54:	4b19      	ldr	r3, [pc, #100]	@ (8001dbc <MX_TIM4_Init+0xac>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d5a:	4818      	ldr	r0, [pc, #96]	@ (8001dbc <MX_TIM4_Init+0xac>)
 8001d5c:	f004 fe56 	bl	8006a0c <HAL_TIM_PWM_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001d66:	f7ff fe2f 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d72:	f107 0320 	add.w	r3, r7, #32
 8001d76:	4619      	mov	r1, r3
 8001d78:	4810      	ldr	r0, [pc, #64]	@ (8001dbc <MX_TIM4_Init+0xac>)
 8001d7a:	f005 faa3 	bl	80072c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001d84:	f7ff fe20 	bl	80019c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d88:	2360      	movs	r3, #96	@ 0x60
 8001d8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d90:	2300      	movs	r3, #0
 8001d92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	220c      	movs	r2, #12
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4807      	ldr	r0, [pc, #28]	@ (8001dbc <MX_TIM4_Init+0xac>)
 8001da0:	f004 ff4c 	bl	8006c3c <HAL_TIM_PWM_ConfigChannel>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001daa:	f7ff fe0d 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001dae:	4803      	ldr	r0, [pc, #12]	@ (8001dbc <MX_TIM4_Init+0xac>)
 8001db0:	f000 f8ae 	bl	8001f10 <HAL_TIM_MspPostInit>

}
 8001db4:	bf00      	nop
 8001db6:	3728      	adds	r7, #40	@ 0x28
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	200003c4 	.word	0x200003c4
 8001dc0:	40000800 	.word	0x40000800

08001dc4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08a      	sub	sp, #40	@ 0x28
 8001dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dca:	f107 0320 	add.w	r3, r7, #32
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
 8001dd2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dd4:	1d3b      	adds	r3, r7, #4
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
 8001dda:	605a      	str	r2, [r3, #4]
 8001ddc:	609a      	str	r2, [r3, #8]
 8001dde:	60da      	str	r2, [r3, #12]
 8001de0:	611a      	str	r2, [r3, #16]
 8001de2:	615a      	str	r2, [r3, #20]
 8001de4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001de6:	4b22      	ldr	r3, [pc, #136]	@ (8001e70 <MX_TIM5_Init+0xac>)
 8001de8:	4a22      	ldr	r2, [pc, #136]	@ (8001e74 <MX_TIM5_Init+0xb0>)
 8001dea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 420-1;
 8001dec:	4b20      	ldr	r3, [pc, #128]	@ (8001e70 <MX_TIM5_Init+0xac>)
 8001dee:	f240 12a3 	movw	r2, #419	@ 0x1a3
 8001df2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e70 <MX_TIM5_Init+0xac>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8001e70 <MX_TIM5_Init+0xac>)
 8001dfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e00:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e02:	4b1b      	ldr	r3, [pc, #108]	@ (8001e70 <MX_TIM5_Init+0xac>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e08:	4b19      	ldr	r3, [pc, #100]	@ (8001e70 <MX_TIM5_Init+0xac>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001e0e:	4818      	ldr	r0, [pc, #96]	@ (8001e70 <MX_TIM5_Init+0xac>)
 8001e10:	f004 fdfc 	bl	8006a0c <HAL_TIM_PWM_Init>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 8001e1a:	f7ff fdd5 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e26:	f107 0320 	add.w	r3, r7, #32
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4810      	ldr	r0, [pc, #64]	@ (8001e70 <MX_TIM5_Init+0xac>)
 8001e2e:	f005 fa49 	bl	80072c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 8001e38:	f7ff fdc6 	bl	80019c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e3c:	2360      	movs	r3, #96	@ 0x60
 8001e3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e44:	2300      	movs	r3, #0
 8001e46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	220c      	movs	r2, #12
 8001e50:	4619      	mov	r1, r3
 8001e52:	4807      	ldr	r0, [pc, #28]	@ (8001e70 <MX_TIM5_Init+0xac>)
 8001e54:	f004 fef2 	bl	8006c3c <HAL_TIM_PWM_ConfigChannel>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 8001e5e:	f7ff fdb3 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001e62:	4803      	ldr	r0, [pc, #12]	@ (8001e70 <MX_TIM5_Init+0xac>)
 8001e64:	f000 f854 	bl	8001f10 <HAL_TIM_MspPostInit>

}
 8001e68:	bf00      	nop
 8001e6a:	3728      	adds	r7, #40	@ 0x28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	2000040c 	.word	0x2000040c
 8001e74:	40000c00 	.word	0x40000c00

08001e78 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e88:	d10e      	bne.n	8001ea8 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001f04 <HAL_TIM_PWM_MspInit+0x8c>)
 8001e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e92:	4a1c      	ldr	r2, [pc, #112]	@ (8001f04 <HAL_TIM_PWM_MspInit+0x8c>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001f04 <HAL_TIM_PWM_MspInit+0x8c>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	617b      	str	r3, [r7, #20]
 8001ea4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM5_CLK_ENABLE();
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001ea6:	e026      	b.n	8001ef6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM4)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a16      	ldr	r2, [pc, #88]	@ (8001f08 <HAL_TIM_PWM_MspInit+0x90>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d10e      	bne.n	8001ed0 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	4b13      	ldr	r3, [pc, #76]	@ (8001f04 <HAL_TIM_PWM_MspInit+0x8c>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	4a12      	ldr	r2, [pc, #72]	@ (8001f04 <HAL_TIM_PWM_MspInit+0x8c>)
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ec2:	4b10      	ldr	r3, [pc, #64]	@ (8001f04 <HAL_TIM_PWM_MspInit+0x8c>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]
}
 8001ece:	e012      	b.n	8001ef6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM5)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0d      	ldr	r2, [pc, #52]	@ (8001f0c <HAL_TIM_PWM_MspInit+0x94>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d10d      	bne.n	8001ef6 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <HAL_TIM_PWM_MspInit+0x8c>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee2:	4a08      	ldr	r2, [pc, #32]	@ (8001f04 <HAL_TIM_PWM_MspInit+0x8c>)
 8001ee4:	f043 0308 	orr.w	r3, r3, #8
 8001ee8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eea:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <HAL_TIM_PWM_MspInit+0x8c>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
}
 8001ef6:	bf00      	nop
 8001ef8:	371c      	adds	r7, #28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40000800 	.word	0x40000800
 8001f0c:	40000c00 	.word	0x40000c00

08001f10 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	@ 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f30:	d11e      	bne.n	8001f70 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
 8001f36:	4b34      	ldr	r3, [pc, #208]	@ (8002008 <HAL_TIM_MspPostInit+0xf8>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3a:	4a33      	ldr	r2, [pc, #204]	@ (8002008 <HAL_TIM_MspPostInit+0xf8>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f42:	4b31      	ldr	r3, [pc, #196]	@ (8002008 <HAL_TIM_MspPostInit+0xf8>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = MPPTYControl_Pin;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPPTYControl_GPIO_Port, &GPIO_InitStruct);
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	4619      	mov	r1, r3
 8001f68:	4828      	ldr	r0, [pc, #160]	@ (800200c <HAL_TIM_MspPostInit+0xfc>)
 8001f6a:	f000 fda7 	bl	8002abc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001f6e:	e047      	b.n	8002000 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM4)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a26      	ldr	r2, [pc, #152]	@ (8002010 <HAL_TIM_MspPostInit+0x100>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d11f      	bne.n	8001fba <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	4b22      	ldr	r3, [pc, #136]	@ (8002008 <HAL_TIM_MspPostInit+0xf8>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	4a21      	ldr	r2, [pc, #132]	@ (8002008 <HAL_TIM_MspPostInit+0xf8>)
 8001f84:	f043 0302 	orr.w	r3, r3, #2
 8001f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f8a:	4b1f      	ldr	r3, [pc, #124]	@ (8002008 <HAL_TIM_MspPostInit+0xf8>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MPPTXControl_Pin;
 8001f96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPPTXControl_GPIO_Port, &GPIO_InitStruct);
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4818      	ldr	r0, [pc, #96]	@ (8002014 <HAL_TIM_MspPostInit+0x104>)
 8001fb4:	f000 fd82 	bl	8002abc <HAL_GPIO_Init>
}
 8001fb8:	e022      	b.n	8002000 <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM5)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a16      	ldr	r2, [pc, #88]	@ (8002018 <HAL_TIM_MspPostInit+0x108>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d11d      	bne.n	8002000 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8002008 <HAL_TIM_MspPostInit+0xf8>)
 8001fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fcc:	4a0e      	ldr	r2, [pc, #56]	@ (8002008 <HAL_TIM_MspPostInit+0xf8>)
 8001fce:	f043 0301 	orr.w	r3, r3, #1
 8001fd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <HAL_TIM_MspPostInit+0xf8>)
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = MPPTZControl_Pin;
 8001fe0:	2308      	movs	r3, #8
 8001fe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MPPTZControl_GPIO_Port, &GPIO_InitStruct);
 8001ff4:	f107 0314 	add.w	r3, r7, #20
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4804      	ldr	r0, [pc, #16]	@ (800200c <HAL_TIM_MspPostInit+0xfc>)
 8001ffc:	f000 fd5e 	bl	8002abc <HAL_GPIO_Init>
}
 8002000:	bf00      	nop
 8002002:	3728      	adds	r7, #40	@ 0x28
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40023800 	.word	0x40023800
 800200c:	40020000 	.word	0x40020000
 8002010:	40000800 	.word	0x40000800
 8002014:	40020400 	.word	0x40020400
 8002018:	40000c00 	.word	0x40000c00

0800201c <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002020:	4b11      	ldr	r3, [pc, #68]	@ (8002068 <MX_UART4_Init+0x4c>)
 8002022:	4a12      	ldr	r2, [pc, #72]	@ (800206c <MX_UART4_Init+0x50>)
 8002024:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002026:	4b10      	ldr	r3, [pc, #64]	@ (8002068 <MX_UART4_Init+0x4c>)
 8002028:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800202c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800202e:	4b0e      	ldr	r3, [pc, #56]	@ (8002068 <MX_UART4_Init+0x4c>)
 8002030:	2200      	movs	r2, #0
 8002032:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002034:	4b0c      	ldr	r3, [pc, #48]	@ (8002068 <MX_UART4_Init+0x4c>)
 8002036:	2200      	movs	r2, #0
 8002038:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800203a:	4b0b      	ldr	r3, [pc, #44]	@ (8002068 <MX_UART4_Init+0x4c>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002040:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <MX_UART4_Init+0x4c>)
 8002042:	220c      	movs	r2, #12
 8002044:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002046:	4b08      	ldr	r3, [pc, #32]	@ (8002068 <MX_UART4_Init+0x4c>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800204c:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <MX_UART4_Init+0x4c>)
 800204e:	2200      	movs	r2, #0
 8002050:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002052:	4805      	ldr	r0, [pc, #20]	@ (8002068 <MX_UART4_Init+0x4c>)
 8002054:	f005 f9b2 	bl	80073bc <HAL_UART_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800205e:	f7ff fcb3 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000454 	.word	0x20000454
 800206c:	40004c00 	.word	0x40004c00

08002070 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	@ 0x28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a19      	ldr	r2, [pc, #100]	@ (80020f4 <HAL_UART_MspInit+0x84>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d12c      	bne.n	80020ec <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	4b18      	ldr	r3, [pc, #96]	@ (80020f8 <HAL_UART_MspInit+0x88>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209a:	4a17      	ldr	r2, [pc, #92]	@ (80020f8 <HAL_UART_MspInit+0x88>)
 800209c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80020a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020a2:	4b15      	ldr	r3, [pc, #84]	@ (80020f8 <HAL_UART_MspInit+0x88>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <HAL_UART_MspInit+0x88>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b6:	4a10      	ldr	r2, [pc, #64]	@ (80020f8 <HAL_UART_MspInit+0x88>)
 80020b8:	f043 0304 	orr.w	r3, r3, #4
 80020bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020be:	4b0e      	ldr	r3, [pc, #56]	@ (80020f8 <HAL_UART_MspInit+0x88>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	f003 0304 	and.w	r3, r3, #4
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX_Pin|RX_Pin;
 80020ca:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80020ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d0:	2302      	movs	r3, #2
 80020d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020d4:	2301      	movs	r3, #1
 80020d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d8:	2303      	movs	r3, #3
 80020da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80020dc:	2308      	movs	r3, #8
 80020de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	4619      	mov	r1, r3
 80020e6:	4805      	ldr	r0, [pc, #20]	@ (80020fc <HAL_UART_MspInit+0x8c>)
 80020e8:	f000 fce8 	bl	8002abc <HAL_GPIO_Init>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80020ec:	bf00      	nop
 80020ee:	3728      	adds	r7, #40	@ 0x28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40004c00 	.word	0x40004c00
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40020800 	.word	0x40020800

08002100 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002104:	4b14      	ldr	r3, [pc, #80]	@ (8002158 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002106:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800210a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800210c:	4b12      	ldr	r3, [pc, #72]	@ (8002158 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800210e:	2204      	movs	r2, #4
 8002110:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002112:	4b11      	ldr	r3, [pc, #68]	@ (8002158 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002114:	2202      	movs	r2, #2
 8002116:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002118:	4b0f      	ldr	r3, [pc, #60]	@ (8002158 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800211a:	2200      	movs	r2, #0
 800211c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800211e:	4b0e      	ldr	r3, [pc, #56]	@ (8002158 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002120:	2202      	movs	r2, #2
 8002122:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002124:	4b0c      	ldr	r3, [pc, #48]	@ (8002158 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002126:	2200      	movs	r2, #0
 8002128:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800212a:	4b0b      	ldr	r3, [pc, #44]	@ (8002158 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800212c:	2200      	movs	r2, #0
 800212e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002130:	4b09      	ldr	r3, [pc, #36]	@ (8002158 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002132:	2200      	movs	r2, #0
 8002134:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8002136:	4b08      	ldr	r3, [pc, #32]	@ (8002158 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002138:	2200      	movs	r2, #0
 800213a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800213e:	2200      	movs	r2, #0
 8002140:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002142:	4805      	ldr	r0, [pc, #20]	@ (8002158 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002144:	f003 febb 	bl	8005ebe <HAL_PCD_Init>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800214e:	f7ff fc3b 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	2000049c 	.word	0x2000049c

0800215c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	@ 0x28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800217c:	d132      	bne.n	80021e4 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	4b1a      	ldr	r3, [pc, #104]	@ (80021ec <HAL_PCD_MspInit+0x90>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002186:	4a19      	ldr	r2, [pc, #100]	@ (80021ec <HAL_PCD_MspInit+0x90>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6313      	str	r3, [r2, #48]	@ 0x30
 800218e:	4b17      	ldr	r3, [pc, #92]	@ (80021ec <HAL_PCD_MspInit+0x90>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	613b      	str	r3, [r7, #16]
 8002198:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800219a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800219e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a0:	2302      	movs	r3, #2
 80021a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021a8:	2303      	movs	r3, #3
 80021aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021ac:	230a      	movs	r3, #10
 80021ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b0:	f107 0314 	add.w	r3, r7, #20
 80021b4:	4619      	mov	r1, r3
 80021b6:	480e      	ldr	r0, [pc, #56]	@ (80021f0 <HAL_PCD_MspInit+0x94>)
 80021b8:	f000 fc80 	bl	8002abc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80021bc:	4b0b      	ldr	r3, [pc, #44]	@ (80021ec <HAL_PCD_MspInit+0x90>)
 80021be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021c0:	4a0a      	ldr	r2, [pc, #40]	@ (80021ec <HAL_PCD_MspInit+0x90>)
 80021c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80021c6:	6353      	str	r3, [r2, #52]	@ 0x34
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	4b07      	ldr	r3, [pc, #28]	@ (80021ec <HAL_PCD_MspInit+0x90>)
 80021ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d0:	4a06      	ldr	r2, [pc, #24]	@ (80021ec <HAL_PCD_MspInit+0x90>)
 80021d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021d6:	6453      	str	r3, [r2, #68]	@ 0x44
 80021d8:	4b04      	ldr	r3, [pc, #16]	@ (80021ec <HAL_PCD_MspInit+0x90>)
 80021da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80021e4:	bf00      	nop
 80021e6:	3728      	adds	r7, #40	@ 0x28
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40020000 	.word	0x40020000

080021f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80021f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800222c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80021f8:	f7ff fd1e 	bl	8001c38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021fc:	480c      	ldr	r0, [pc, #48]	@ (8002230 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021fe:	490d      	ldr	r1, [pc, #52]	@ (8002234 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002200:	4a0d      	ldr	r2, [pc, #52]	@ (8002238 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002204:	e002      	b.n	800220c <LoopCopyDataInit>

08002206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800220a:	3304      	adds	r3, #4

0800220c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800220c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800220e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002210:	d3f9      	bcc.n	8002206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002212:	4a0a      	ldr	r2, [pc, #40]	@ (800223c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002214:	4c0a      	ldr	r4, [pc, #40]	@ (8002240 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002218:	e001      	b.n	800221e <LoopFillZerobss>

0800221a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800221a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800221c:	3204      	adds	r2, #4

0800221e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800221e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002220:	d3fb      	bcc.n	800221a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002222:	f006 fd21 	bl	8008c68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002226:	f7ff fa85 	bl	8001734 <main>
  bx  lr    
 800222a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800222c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002234:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002238:	0800b298 	.word	0x0800b298
  ldr r2, =_sbss
 800223c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002240:	20000ad0 	.word	0x20000ad0

08002244 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002244:	e7fe      	b.n	8002244 <ADC_IRQHandler>
	...

08002248 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800224c:	4b0e      	ldr	r3, [pc, #56]	@ (8002288 <HAL_Init+0x40>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a0d      	ldr	r2, [pc, #52]	@ (8002288 <HAL_Init+0x40>)
 8002252:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002256:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002258:	4b0b      	ldr	r3, [pc, #44]	@ (8002288 <HAL_Init+0x40>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0a      	ldr	r2, [pc, #40]	@ (8002288 <HAL_Init+0x40>)
 800225e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002262:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002264:	4b08      	ldr	r3, [pc, #32]	@ (8002288 <HAL_Init+0x40>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a07      	ldr	r2, [pc, #28]	@ (8002288 <HAL_Init+0x40>)
 800226a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800226e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002270:	2003      	movs	r0, #3
 8002272:	f000 fbb1 	bl	80029d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002276:	200f      	movs	r0, #15
 8002278:	f000 f808 	bl	800228c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800227c:	f7ff fbaa 	bl	80019d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40023c00 	.word	0x40023c00

0800228c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002294:	4b12      	ldr	r3, [pc, #72]	@ (80022e0 <HAL_InitTick+0x54>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b12      	ldr	r3, [pc, #72]	@ (80022e4 <HAL_InitTick+0x58>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	4619      	mov	r1, r3
 800229e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 fbc9 	bl	8002a42 <HAL_SYSTICK_Config>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d001      	beq.n	80022ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e00e      	b.n	80022d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b0f      	cmp	r3, #15
 80022be:	d80a      	bhi.n	80022d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022c0:	2200      	movs	r2, #0
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022c8:	f000 fb91 	bl	80029ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022cc:	4a06      	ldr	r2, [pc, #24]	@ (80022e8 <HAL_InitTick+0x5c>)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	e000      	b.n	80022d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	20000000 	.word	0x20000000
 80022e4:	20000008 	.word	0x20000008
 80022e8:	20000004 	.word	0x20000004

080022ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022f0:	4b06      	ldr	r3, [pc, #24]	@ (800230c <HAL_IncTick+0x20>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <HAL_IncTick+0x24>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4413      	add	r3, r2
 80022fc:	4a04      	ldr	r2, [pc, #16]	@ (8002310 <HAL_IncTick+0x24>)
 80022fe:	6013      	str	r3, [r2, #0]
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	20000008 	.word	0x20000008
 8002310:	20000980 	.word	0x20000980

08002314 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  return uwTick;
 8002318:	4b03      	ldr	r3, [pc, #12]	@ (8002328 <HAL_GetTick+0x14>)
 800231a:	681b      	ldr	r3, [r3, #0]
}
 800231c:	4618      	mov	r0, r3
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	20000980 	.word	0x20000980

0800232c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002334:	f7ff ffee 	bl	8002314 <HAL_GetTick>
 8002338:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002344:	d005      	beq.n	8002352 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002346:	4b0a      	ldr	r3, [pc, #40]	@ (8002370 <HAL_Delay+0x44>)
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	461a      	mov	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4413      	add	r3, r2
 8002350:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002352:	bf00      	nop
 8002354:	f7ff ffde 	bl	8002314 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	429a      	cmp	r2, r3
 8002362:	d8f7      	bhi.n	8002354 <HAL_Delay+0x28>
  {
  }
}
 8002364:	bf00      	nop
 8002366:	bf00      	nop
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000008 	.word	0x20000008

08002374 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800237c:	2300      	movs	r3, #0
 800237e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e033      	b.n	80023f2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238e:	2b00      	cmp	r3, #0
 8002390:	d109      	bne.n	80023a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7fe fe76 	bl	8001084 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023aa:	f003 0310 	and.w	r3, r3, #16
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d118      	bne.n	80023e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023ba:	f023 0302 	bic.w	r3, r3, #2
 80023be:	f043 0202 	orr.w	r2, r3, #2
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f93a 	bl	8002640 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	f023 0303 	bic.w	r3, r3, #3
 80023da:	f043 0201 	orr.w	r2, r3, #1
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80023e2:	e001      	b.n	80023e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x1c>
 8002414:	2302      	movs	r3, #2
 8002416:	e105      	b.n	8002624 <HAL_ADC_ConfigChannel+0x228>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b09      	cmp	r3, #9
 8002426:	d925      	bls.n	8002474 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68d9      	ldr	r1, [r3, #12]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	461a      	mov	r2, r3
 8002436:	4613      	mov	r3, r2
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4413      	add	r3, r2
 800243c:	3b1e      	subs	r3, #30
 800243e:	2207      	movs	r2, #7
 8002440:	fa02 f303 	lsl.w	r3, r2, r3
 8002444:	43da      	mvns	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	400a      	ands	r2, r1
 800244c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68d9      	ldr	r1, [r3, #12]
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	b29b      	uxth	r3, r3
 800245e:	4618      	mov	r0, r3
 8002460:	4603      	mov	r3, r0
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4403      	add	r3, r0
 8002466:	3b1e      	subs	r3, #30
 8002468:	409a      	lsls	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	e022      	b.n	80024ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6919      	ldr	r1, [r3, #16]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	b29b      	uxth	r3, r3
 8002480:	461a      	mov	r2, r3
 8002482:	4613      	mov	r3, r2
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4413      	add	r3, r2
 8002488:	2207      	movs	r2, #7
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43da      	mvns	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	400a      	ands	r2, r1
 8002496:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6919      	ldr	r1, [r3, #16]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	4618      	mov	r0, r3
 80024aa:	4603      	mov	r3, r0
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	4403      	add	r3, r0
 80024b0:	409a      	lsls	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b06      	cmp	r3, #6
 80024c0:	d824      	bhi.n	800250c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	4613      	mov	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	3b05      	subs	r3, #5
 80024d4:	221f      	movs	r2, #31
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	43da      	mvns	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	400a      	ands	r2, r1
 80024e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	b29b      	uxth	r3, r3
 80024f0:	4618      	mov	r0, r3
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685a      	ldr	r2, [r3, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	4413      	add	r3, r2
 80024fc:	3b05      	subs	r3, #5
 80024fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	635a      	str	r2, [r3, #52]	@ 0x34
 800250a:	e04c      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b0c      	cmp	r3, #12
 8002512:	d824      	bhi.n	800255e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	4413      	add	r3, r2
 8002524:	3b23      	subs	r3, #35	@ 0x23
 8002526:	221f      	movs	r2, #31
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43da      	mvns	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	400a      	ands	r2, r1
 8002534:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	b29b      	uxth	r3, r3
 8002542:	4618      	mov	r0, r3
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	4613      	mov	r3, r2
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	3b23      	subs	r3, #35	@ 0x23
 8002550:	fa00 f203 	lsl.w	r2, r0, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	631a      	str	r2, [r3, #48]	@ 0x30
 800255c:	e023      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	3b41      	subs	r3, #65	@ 0x41
 8002570:	221f      	movs	r2, #31
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	43da      	mvns	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	400a      	ands	r2, r1
 800257e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	b29b      	uxth	r3, r3
 800258c:	4618      	mov	r0, r3
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	3b41      	subs	r3, #65	@ 0x41
 800259a:	fa00 f203 	lsl.w	r2, r0, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025a6:	4b22      	ldr	r3, [pc, #136]	@ (8002630 <HAL_ADC_ConfigChannel+0x234>)
 80025a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a21      	ldr	r2, [pc, #132]	@ (8002634 <HAL_ADC_ConfigChannel+0x238>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d109      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x1cc>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b12      	cmp	r3, #18
 80025ba:	d105      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a19      	ldr	r2, [pc, #100]	@ (8002634 <HAL_ADC_ConfigChannel+0x238>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d123      	bne.n	800261a <HAL_ADC_ConfigChannel+0x21e>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2b10      	cmp	r3, #16
 80025d8:	d003      	beq.n	80025e2 <HAL_ADC_ConfigChannel+0x1e6>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b11      	cmp	r3, #17
 80025e0:	d11b      	bne.n	800261a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2b10      	cmp	r3, #16
 80025f4:	d111      	bne.n	800261a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025f6:	4b10      	ldr	r3, [pc, #64]	@ (8002638 <HAL_ADC_ConfigChannel+0x23c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a10      	ldr	r2, [pc, #64]	@ (800263c <HAL_ADC_ConfigChannel+0x240>)
 80025fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002600:	0c9a      	lsrs	r2, r3, #18
 8002602:	4613      	mov	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	4413      	add	r3, r2
 8002608:	005b      	lsls	r3, r3, #1
 800260a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800260c:	e002      	b.n	8002614 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	3b01      	subs	r3, #1
 8002612:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f9      	bne.n	800260e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3714      	adds	r7, #20
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	40012300 	.word	0x40012300
 8002634:	40012000 	.word	0x40012000
 8002638:	20000000 	.word	0x20000000
 800263c:	431bde83 	.word	0x431bde83

08002640 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002648:	4b79      	ldr	r3, [pc, #484]	@ (8002830 <ADC_Init+0x1f0>)
 800264a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	431a      	orrs	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002674:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	6859      	ldr	r1, [r3, #4]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	021a      	lsls	r2, r3, #8
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002698:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6859      	ldr	r1, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	430a      	orrs	r2, r1
 80026aa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	6899      	ldr	r1, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	430a      	orrs	r2, r1
 80026cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d2:	4a58      	ldr	r2, [pc, #352]	@ (8002834 <ADC_Init+0x1f4>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d022      	beq.n	800271e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689a      	ldr	r2, [r3, #8]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6899      	ldr	r1, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002708:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6899      	ldr	r1, [r3, #8]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	609a      	str	r2, [r3, #8]
 800271c:	e00f      	b.n	800273e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800272c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800273c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0202 	bic.w	r2, r2, #2
 800274c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6899      	ldr	r1, [r3, #8]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	7e1b      	ldrb	r3, [r3, #24]
 8002758:	005a      	lsls	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d01b      	beq.n	80027a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800277a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800278a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6859      	ldr	r1, [r3, #4]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002796:	3b01      	subs	r3, #1
 8002798:	035a      	lsls	r2, r3, #13
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	e007      	b.n	80027b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027b2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80027c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	69db      	ldr	r3, [r3, #28]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	051a      	lsls	r2, r3, #20
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	430a      	orrs	r2, r1
 80027d8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689a      	ldr	r2, [r3, #8]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80027e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6899      	ldr	r1, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027f6:	025a      	lsls	r2, r3, #9
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800280e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	6899      	ldr	r1, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	029a      	lsls	r2, r3, #10
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	609a      	str	r2, [r3, #8]
}
 8002824:	bf00      	nop
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	40012300 	.word	0x40012300
 8002834:	0f000001 	.word	0x0f000001

08002838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002848:	4b0c      	ldr	r3, [pc, #48]	@ (800287c <__NVIC_SetPriorityGrouping+0x44>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800284e:	68ba      	ldr	r2, [r7, #8]
 8002850:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002854:	4013      	ands	r3, r2
 8002856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002860:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800286a:	4a04      	ldr	r2, [pc, #16]	@ (800287c <__NVIC_SetPriorityGrouping+0x44>)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	60d3      	str	r3, [r2, #12]
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	e000ed00 	.word	0xe000ed00

08002880 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002884:	4b04      	ldr	r3, [pc, #16]	@ (8002898 <__NVIC_GetPriorityGrouping+0x18>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	0a1b      	lsrs	r3, r3, #8
 800288a:	f003 0307 	and.w	r3, r3, #7
}
 800288e:	4618      	mov	r0, r3
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr
 8002898:	e000ed00 	.word	0xe000ed00

0800289c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	db0b      	blt.n	80028c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	f003 021f 	and.w	r2, r3, #31
 80028b4:	4907      	ldr	r1, [pc, #28]	@ (80028d4 <__NVIC_EnableIRQ+0x38>)
 80028b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ba:	095b      	lsrs	r3, r3, #5
 80028bc:	2001      	movs	r0, #1
 80028be:	fa00 f202 	lsl.w	r2, r0, r2
 80028c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	e000e100 	.word	0xe000e100

080028d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	6039      	str	r1, [r7, #0]
 80028e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	db0a      	blt.n	8002902 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	b2da      	uxtb	r2, r3
 80028f0:	490c      	ldr	r1, [pc, #48]	@ (8002924 <__NVIC_SetPriority+0x4c>)
 80028f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028f6:	0112      	lsls	r2, r2, #4
 80028f8:	b2d2      	uxtb	r2, r2
 80028fa:	440b      	add	r3, r1
 80028fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002900:	e00a      	b.n	8002918 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	b2da      	uxtb	r2, r3
 8002906:	4908      	ldr	r1, [pc, #32]	@ (8002928 <__NVIC_SetPriority+0x50>)
 8002908:	79fb      	ldrb	r3, [r7, #7]
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	3b04      	subs	r3, #4
 8002910:	0112      	lsls	r2, r2, #4
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	440b      	add	r3, r1
 8002916:	761a      	strb	r2, [r3, #24]
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	e000e100 	.word	0xe000e100
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800292c:	b480      	push	{r7}
 800292e:	b089      	sub	sp, #36	@ 0x24
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f1c3 0307 	rsb	r3, r3, #7
 8002946:	2b04      	cmp	r3, #4
 8002948:	bf28      	it	cs
 800294a:	2304      	movcs	r3, #4
 800294c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	3304      	adds	r3, #4
 8002952:	2b06      	cmp	r3, #6
 8002954:	d902      	bls.n	800295c <NVIC_EncodePriority+0x30>
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	3b03      	subs	r3, #3
 800295a:	e000      	b.n	800295e <NVIC_EncodePriority+0x32>
 800295c:	2300      	movs	r3, #0
 800295e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002960:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43da      	mvns	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	401a      	ands	r2, r3
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002974:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	fa01 f303 	lsl.w	r3, r1, r3
 800297e:	43d9      	mvns	r1, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002984:	4313      	orrs	r3, r2
         );
}
 8002986:	4618      	mov	r0, r3
 8002988:	3724      	adds	r7, #36	@ 0x24
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3b01      	subs	r3, #1
 80029a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80029a4:	d301      	bcc.n	80029aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029a6:	2301      	movs	r3, #1
 80029a8:	e00f      	b.n	80029ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029aa:	4a0a      	ldr	r2, [pc, #40]	@ (80029d4 <SysTick_Config+0x40>)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029b2:	210f      	movs	r1, #15
 80029b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80029b8:	f7ff ff8e 	bl	80028d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029bc:	4b05      	ldr	r3, [pc, #20]	@ (80029d4 <SysTick_Config+0x40>)
 80029be:	2200      	movs	r2, #0
 80029c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029c2:	4b04      	ldr	r3, [pc, #16]	@ (80029d4 <SysTick_Config+0x40>)
 80029c4:	2207      	movs	r2, #7
 80029c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	e000e010 	.word	0xe000e010

080029d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7ff ff29 	bl	8002838 <__NVIC_SetPriorityGrouping>
}
 80029e6:	bf00      	nop
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}

080029ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b086      	sub	sp, #24
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	4603      	mov	r3, r0
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a00:	f7ff ff3e 	bl	8002880 <__NVIC_GetPriorityGrouping>
 8002a04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	68b9      	ldr	r1, [r7, #8]
 8002a0a:	6978      	ldr	r0, [r7, #20]
 8002a0c:	f7ff ff8e 	bl	800292c <NVIC_EncodePriority>
 8002a10:	4602      	mov	r2, r0
 8002a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a16:	4611      	mov	r1, r2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ff5d 	bl	80028d8 <__NVIC_SetPriority>
}
 8002a1e:	bf00      	nop
 8002a20:	3718      	adds	r7, #24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b082      	sub	sp, #8
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff ff31 	bl	800289c <__NVIC_EnableIRQ>
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7ff ffa2 	bl	8002994 <SysTick_Config>
 8002a50:	4603      	mov	r3, r0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d004      	beq.n	8002a78 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2280      	movs	r2, #128	@ 0x80
 8002a72:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e00c      	b.n	8002a92 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2205      	movs	r2, #5
 8002a7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0201 	bic.w	r2, r2, #1
 8002a8e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr

08002a9e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002a9e:	b480      	push	{r7}
 8002aa0:	b083      	sub	sp, #12
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002aac:	b2db      	uxtb	r3, r3
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
	...

08002abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b089      	sub	sp, #36	@ 0x24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002aca:	2300      	movs	r3, #0
 8002acc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61fb      	str	r3, [r7, #28]
 8002ad6:	e16b      	b.n	8002db0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ad8:	2201      	movs	r2, #1
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	f040 815a 	bne.w	8002daa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f003 0303 	and.w	r3, r3, #3
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d005      	beq.n	8002b0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d130      	bne.n	8002b70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	2203      	movs	r2, #3
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4013      	ands	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b44:	2201      	movs	r2, #1
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	091b      	lsrs	r3, r3, #4
 8002b5a:	f003 0201 	and.w	r2, r3, #1
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69ba      	ldr	r2, [r7, #24]
 8002b6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 0303 	and.w	r3, r3, #3
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d017      	beq.n	8002bac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	2203      	movs	r2, #3
 8002b88:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8c:	43db      	mvns	r3, r3
 8002b8e:	69ba      	ldr	r2, [r7, #24]
 8002b90:	4013      	ands	r3, r2
 8002b92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d123      	bne.n	8002c00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	08da      	lsrs	r2, r3, #3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3208      	adds	r2, #8
 8002bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	f003 0307 	and.w	r3, r3, #7
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	220f      	movs	r2, #15
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f003 0307 	and.w	r3, r3, #7
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	08da      	lsrs	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	3208      	adds	r2, #8
 8002bfa:	69b9      	ldr	r1, [r7, #24]
 8002bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	2203      	movs	r2, #3
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 0203 	and.w	r2, r3, #3
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 80b4 	beq.w	8002daa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	4b60      	ldr	r3, [pc, #384]	@ (8002dc8 <HAL_GPIO_Init+0x30c>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4a:	4a5f      	ldr	r2, [pc, #380]	@ (8002dc8 <HAL_GPIO_Init+0x30c>)
 8002c4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c50:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c52:	4b5d      	ldr	r3, [pc, #372]	@ (8002dc8 <HAL_GPIO_Init+0x30c>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c5e:	4a5b      	ldr	r2, [pc, #364]	@ (8002dcc <HAL_GPIO_Init+0x310>)
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	089b      	lsrs	r3, r3, #2
 8002c64:	3302      	adds	r3, #2
 8002c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	220f      	movs	r2, #15
 8002c76:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4013      	ands	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a52      	ldr	r2, [pc, #328]	@ (8002dd0 <HAL_GPIO_Init+0x314>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d02b      	beq.n	8002ce2 <HAL_GPIO_Init+0x226>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a51      	ldr	r2, [pc, #324]	@ (8002dd4 <HAL_GPIO_Init+0x318>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d025      	beq.n	8002cde <HAL_GPIO_Init+0x222>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4a50      	ldr	r2, [pc, #320]	@ (8002dd8 <HAL_GPIO_Init+0x31c>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d01f      	beq.n	8002cda <HAL_GPIO_Init+0x21e>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a4f      	ldr	r2, [pc, #316]	@ (8002ddc <HAL_GPIO_Init+0x320>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d019      	beq.n	8002cd6 <HAL_GPIO_Init+0x21a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a4e      	ldr	r2, [pc, #312]	@ (8002de0 <HAL_GPIO_Init+0x324>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d013      	beq.n	8002cd2 <HAL_GPIO_Init+0x216>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a4d      	ldr	r2, [pc, #308]	@ (8002de4 <HAL_GPIO_Init+0x328>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d00d      	beq.n	8002cce <HAL_GPIO_Init+0x212>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4a4c      	ldr	r2, [pc, #304]	@ (8002de8 <HAL_GPIO_Init+0x32c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d007      	beq.n	8002cca <HAL_GPIO_Init+0x20e>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4a4b      	ldr	r2, [pc, #300]	@ (8002dec <HAL_GPIO_Init+0x330>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d101      	bne.n	8002cc6 <HAL_GPIO_Init+0x20a>
 8002cc2:	2307      	movs	r3, #7
 8002cc4:	e00e      	b.n	8002ce4 <HAL_GPIO_Init+0x228>
 8002cc6:	2308      	movs	r3, #8
 8002cc8:	e00c      	b.n	8002ce4 <HAL_GPIO_Init+0x228>
 8002cca:	2306      	movs	r3, #6
 8002ccc:	e00a      	b.n	8002ce4 <HAL_GPIO_Init+0x228>
 8002cce:	2305      	movs	r3, #5
 8002cd0:	e008      	b.n	8002ce4 <HAL_GPIO_Init+0x228>
 8002cd2:	2304      	movs	r3, #4
 8002cd4:	e006      	b.n	8002ce4 <HAL_GPIO_Init+0x228>
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e004      	b.n	8002ce4 <HAL_GPIO_Init+0x228>
 8002cda:	2302      	movs	r3, #2
 8002cdc:	e002      	b.n	8002ce4 <HAL_GPIO_Init+0x228>
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e000      	b.n	8002ce4 <HAL_GPIO_Init+0x228>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	69fa      	ldr	r2, [r7, #28]
 8002ce6:	f002 0203 	and.w	r2, r2, #3
 8002cea:	0092      	lsls	r2, r2, #2
 8002cec:	4093      	lsls	r3, r2
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cf4:	4935      	ldr	r1, [pc, #212]	@ (8002dcc <HAL_GPIO_Init+0x310>)
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	089b      	lsrs	r3, r3, #2
 8002cfa:	3302      	adds	r3, #2
 8002cfc:	69ba      	ldr	r2, [r7, #24]
 8002cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d02:	4b3b      	ldr	r3, [pc, #236]	@ (8002df0 <HAL_GPIO_Init+0x334>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d26:	4a32      	ldr	r2, [pc, #200]	@ (8002df0 <HAL_GPIO_Init+0x334>)
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d2c:	4b30      	ldr	r3, [pc, #192]	@ (8002df0 <HAL_GPIO_Init+0x334>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d48:	69ba      	ldr	r2, [r7, #24]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d50:	4a27      	ldr	r2, [pc, #156]	@ (8002df0 <HAL_GPIO_Init+0x334>)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d56:	4b26      	ldr	r3, [pc, #152]	@ (8002df0 <HAL_GPIO_Init+0x334>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d7a:	4a1d      	ldr	r2, [pc, #116]	@ (8002df0 <HAL_GPIO_Init+0x334>)
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d80:	4b1b      	ldr	r3, [pc, #108]	@ (8002df0 <HAL_GPIO_Init+0x334>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002da4:	4a12      	ldr	r2, [pc, #72]	@ (8002df0 <HAL_GPIO_Init+0x334>)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	3301      	adds	r3, #1
 8002dae:	61fb      	str	r3, [r7, #28]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	2b0f      	cmp	r3, #15
 8002db4:	f67f ae90 	bls.w	8002ad8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002db8:	bf00      	nop
 8002dba:	bf00      	nop
 8002dbc:	3724      	adds	r7, #36	@ 0x24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	40013800 	.word	0x40013800
 8002dd0:	40020000 	.word	0x40020000
 8002dd4:	40020400 	.word	0x40020400
 8002dd8:	40020800 	.word	0x40020800
 8002ddc:	40020c00 	.word	0x40020c00
 8002de0:	40021000 	.word	0x40021000
 8002de4:	40021400 	.word	0x40021400
 8002de8:	40021800 	.word	0x40021800
 8002dec:	40021c00 	.word	0x40021c00
 8002df0:	40013c00 	.word	0x40013c00

08002df4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	887b      	ldrh	r3, [r7, #2]
 8002e06:	4013      	ands	r3, r2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d002      	beq.n	8002e12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
 8002e10:	e001      	b.n	8002e16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e12:	2300      	movs	r3, #0
 8002e14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3714      	adds	r7, #20
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	807b      	strh	r3, [r7, #2]
 8002e30:	4613      	mov	r3, r2
 8002e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e34:	787b      	ldrb	r3, [r7, #1]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d003      	beq.n	8002e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e3a:	887a      	ldrh	r2, [r7, #2]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e40:	e003      	b.n	8002e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e42:	887b      	ldrh	r3, [r7, #2]
 8002e44:	041a      	lsls	r2, r3, #16
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	619a      	str	r2, [r3, #24]
}
 8002e4a:	bf00      	nop
 8002e4c:	370c      	adds	r7, #12
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e12b      	b.n	80030c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7fe fba8 	bl	80015d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2224      	movs	r2, #36	@ 0x24
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002eaa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002eba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ebc:	f003 fd7e 	bl	80069bc <HAL_RCC_GetPCLK1Freq>
 8002ec0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	4a81      	ldr	r2, [pc, #516]	@ (80030cc <HAL_I2C_Init+0x274>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d807      	bhi.n	8002edc <HAL_I2C_Init+0x84>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4a80      	ldr	r2, [pc, #512]	@ (80030d0 <HAL_I2C_Init+0x278>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	bf94      	ite	ls
 8002ed4:	2301      	movls	r3, #1
 8002ed6:	2300      	movhi	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	e006      	b.n	8002eea <HAL_I2C_Init+0x92>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4a7d      	ldr	r2, [pc, #500]	@ (80030d4 <HAL_I2C_Init+0x27c>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	bf94      	ite	ls
 8002ee4:	2301      	movls	r3, #1
 8002ee6:	2300      	movhi	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e0e7      	b.n	80030c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4a78      	ldr	r2, [pc, #480]	@ (80030d8 <HAL_I2C_Init+0x280>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	0c9b      	lsrs	r3, r3, #18
 8002efc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4a6a      	ldr	r2, [pc, #424]	@ (80030cc <HAL_I2C_Init+0x274>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d802      	bhi.n	8002f2c <HAL_I2C_Init+0xd4>
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	e009      	b.n	8002f40 <HAL_I2C_Init+0xe8>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002f32:	fb02 f303 	mul.w	r3, r2, r3
 8002f36:	4a69      	ldr	r2, [pc, #420]	@ (80030dc <HAL_I2C_Init+0x284>)
 8002f38:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3c:	099b      	lsrs	r3, r3, #6
 8002f3e:	3301      	adds	r3, #1
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6812      	ldr	r2, [r2, #0]
 8002f44:	430b      	orrs	r3, r1
 8002f46:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002f52:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	495c      	ldr	r1, [pc, #368]	@ (80030cc <HAL_I2C_Init+0x274>)
 8002f5c:	428b      	cmp	r3, r1
 8002f5e:	d819      	bhi.n	8002f94 <HAL_I2C_Init+0x13c>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	1e59      	subs	r1, r3, #1
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f6e:	1c59      	adds	r1, r3, #1
 8002f70:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002f74:	400b      	ands	r3, r1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00a      	beq.n	8002f90 <HAL_I2C_Init+0x138>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1e59      	subs	r1, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f88:	3301      	adds	r3, #1
 8002f8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8e:	e051      	b.n	8003034 <HAL_I2C_Init+0x1dc>
 8002f90:	2304      	movs	r3, #4
 8002f92:	e04f      	b.n	8003034 <HAL_I2C_Init+0x1dc>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d111      	bne.n	8002fc0 <HAL_I2C_Init+0x168>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	1e58      	subs	r0, r3, #1
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6859      	ldr	r1, [r3, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	440b      	add	r3, r1
 8002faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	bf0c      	ite	eq
 8002fb8:	2301      	moveq	r3, #1
 8002fba:	2300      	movne	r3, #0
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	e012      	b.n	8002fe6 <HAL_I2C_Init+0x18e>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	1e58      	subs	r0, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6859      	ldr	r1, [r3, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	0099      	lsls	r1, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d001      	beq.n	8002fee <HAL_I2C_Init+0x196>
 8002fea:	2301      	movs	r3, #1
 8002fec:	e022      	b.n	8003034 <HAL_I2C_Init+0x1dc>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10e      	bne.n	8003014 <HAL_I2C_Init+0x1bc>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	1e58      	subs	r0, r3, #1
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6859      	ldr	r1, [r3, #4]
 8002ffe:	460b      	mov	r3, r1
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	440b      	add	r3, r1
 8003004:	fbb0 f3f3 	udiv	r3, r0, r3
 8003008:	3301      	adds	r3, #1
 800300a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800300e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003012:	e00f      	b.n	8003034 <HAL_I2C_Init+0x1dc>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1e58      	subs	r0, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6859      	ldr	r1, [r3, #4]
 800301c:	460b      	mov	r3, r1
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	0099      	lsls	r1, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	fbb0 f3f3 	udiv	r3, r0, r3
 800302a:	3301      	adds	r3, #1
 800302c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003030:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	6809      	ldr	r1, [r1, #0]
 8003038:	4313      	orrs	r3, r2
 800303a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69da      	ldr	r2, [r3, #28]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	431a      	orrs	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003062:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6911      	ldr	r1, [r2, #16]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	68d2      	ldr	r2, [r2, #12]
 800306e:	4311      	orrs	r1, r2
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	430b      	orrs	r3, r1
 8003076:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68db      	ldr	r3, [r3, #12]
 800307e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695a      	ldr	r2, [r3, #20]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	430a      	orrs	r2, r1
 8003092:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f042 0201 	orr.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2220      	movs	r2, #32
 80030ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80030c0:	2300      	movs	r3, #0
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	000186a0 	.word	0x000186a0
 80030d0:	001e847f 	.word	0x001e847f
 80030d4:	003d08ff 	.word	0x003d08ff
 80030d8:	431bde83 	.word	0x431bde83
 80030dc:	10624dd3 	.word	0x10624dd3

080030e0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b083      	sub	sp, #12
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030f2:	2b80      	cmp	r3, #128	@ 0x80
 80030f4:	d103      	bne.n	80030fe <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2200      	movs	r2, #0
 80030fc:	611a      	str	r2, [r3, #16]
  }
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	607a      	str	r2, [r7, #4]
 8003116:	461a      	mov	r2, r3
 8003118:	460b      	mov	r3, r1
 800311a:	817b      	strh	r3, [r7, #10]
 800311c:	4613      	mov	r3, r2
 800311e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003120:	f7ff f8f8 	bl	8002314 <HAL_GetTick>
 8003124:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b20      	cmp	r3, #32
 8003130:	f040 80e0 	bne.w	80032f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	2319      	movs	r3, #25
 800313a:	2201      	movs	r2, #1
 800313c:	4970      	ldr	r1, [pc, #448]	@ (8003300 <HAL_I2C_Master_Transmit+0x1f4>)
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f002 fc3a 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800314a:	2302      	movs	r3, #2
 800314c:	e0d3      	b.n	80032f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003154:	2b01      	cmp	r3, #1
 8003156:	d101      	bne.n	800315c <HAL_I2C_Master_Transmit+0x50>
 8003158:	2302      	movs	r3, #2
 800315a:	e0cc      	b.n	80032f6 <HAL_I2C_Master_Transmit+0x1ea>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b01      	cmp	r3, #1
 8003170:	d007      	beq.n	8003182 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0201 	orr.w	r2, r2, #1
 8003180:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003190:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2221      	movs	r2, #33	@ 0x21
 8003196:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2210      	movs	r2, #16
 800319e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	893a      	ldrh	r2, [r7, #8]
 80031b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4a50      	ldr	r2, [pc, #320]	@ (8003304 <HAL_I2C_Master_Transmit+0x1f8>)
 80031c2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031c4:	8979      	ldrh	r1, [r7, #10]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	6a3a      	ldr	r2, [r7, #32]
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f002 f914 	bl	80053f8 <I2C_MasterRequestWrite>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e08d      	b.n	80032f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031da:	2300      	movs	r3, #0
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031f0:	e066      	b.n	80032c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	6a39      	ldr	r1, [r7, #32]
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f002 fcf8 	bl	8005bec <I2C_WaitOnTXEFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00d      	beq.n	800321e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003206:	2b04      	cmp	r3, #4
 8003208:	d107      	bne.n	800321a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003218:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e06b      	b.n	80032f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003222:	781a      	ldrb	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	3b01      	subs	r3, #1
 800323c:	b29a      	uxth	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003246:	3b01      	subs	r3, #1
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b04      	cmp	r3, #4
 800325a:	d11b      	bne.n	8003294 <HAL_I2C_Master_Transmit+0x188>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003260:	2b00      	cmp	r3, #0
 8003262:	d017      	beq.n	8003294 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003268:	781a      	ldrb	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003274:	1c5a      	adds	r2, r3, #1
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800327e:	b29b      	uxth	r3, r3
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800328c:	3b01      	subs	r3, #1
 800328e:	b29a      	uxth	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	6a39      	ldr	r1, [r7, #32]
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f002 fcef 	bl	8005c7c <I2C_WaitOnBTFFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00d      	beq.n	80032c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d107      	bne.n	80032bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e01a      	b.n	80032f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d194      	bne.n	80031f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80032f0:	2300      	movs	r3, #0
 80032f2:	e000      	b.n	80032f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80032f4:	2302      	movs	r3, #2
  }
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3718      	adds	r7, #24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	00100002 	.word	0x00100002
 8003304:	ffff0000 	.word	0xffff0000

08003308 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b08c      	sub	sp, #48	@ 0x30
 800330c:	af02      	add	r7, sp, #8
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	461a      	mov	r2, r3
 8003314:	460b      	mov	r3, r1
 8003316:	817b      	strh	r3, [r7, #10]
 8003318:	4613      	mov	r3, r2
 800331a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800331c:	f7fe fffa 	bl	8002314 <HAL_GetTick>
 8003320:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b20      	cmp	r3, #32
 800332c:	f040 8217 	bne.w	800375e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	2319      	movs	r3, #25
 8003336:	2201      	movs	r2, #1
 8003338:	497c      	ldr	r1, [pc, #496]	@ (800352c <HAL_I2C_Master_Receive+0x224>)
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f002 fb3c 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003346:	2302      	movs	r3, #2
 8003348:	e20a      	b.n	8003760 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_I2C_Master_Receive+0x50>
 8003354:	2302      	movs	r3, #2
 8003356:	e203      	b.n	8003760 <HAL_I2C_Master_Receive+0x458>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b01      	cmp	r3, #1
 800336c:	d007      	beq.n	800337e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 0201 	orr.w	r2, r2, #1
 800337c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800338c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2222      	movs	r2, #34	@ 0x22
 8003392:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2210      	movs	r2, #16
 800339a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	893a      	ldrh	r2, [r7, #8]
 80033ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	4a5c      	ldr	r2, [pc, #368]	@ (8003530 <HAL_I2C_Master_Receive+0x228>)
 80033be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033c0:	8979      	ldrh	r1, [r7, #10]
 80033c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f002 f898 	bl	80054fc <I2C_MasterRequestRead>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d001      	beq.n	80033d6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e1c4      	b.n	8003760 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d113      	bne.n	8003406 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033de:	2300      	movs	r3, #0
 80033e0:	623b      	str	r3, [r7, #32]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	623b      	str	r3, [r7, #32]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	623b      	str	r3, [r7, #32]
 80033f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	e198      	b.n	8003738 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800340a:	2b01      	cmp	r3, #1
 800340c:	d11b      	bne.n	8003446 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800341c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800341e:	2300      	movs	r3, #0
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	61fb      	str	r3, [r7, #28]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	61fb      	str	r3, [r7, #28]
 8003432:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	e178      	b.n	8003738 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800344a:	2b02      	cmp	r3, #2
 800344c:	d11b      	bne.n	8003486 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800345c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800346c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800346e:	2300      	movs	r3, #0
 8003470:	61bb      	str	r3, [r7, #24]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	61bb      	str	r3, [r7, #24]
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	e158      	b.n	8003738 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003494:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	617b      	str	r3, [r7, #20]
 80034aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80034ac:	e144      	b.n	8003738 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	f200 80f1 	bhi.w	800369a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d123      	bne.n	8003508 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80034c4:	68f8      	ldr	r0, [r7, #12]
 80034c6:	f002 fc53 	bl	8005d70 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e145      	b.n	8003760 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003506:	e117      	b.n	8003738 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800350c:	2b02      	cmp	r3, #2
 800350e:	d14e      	bne.n	80035ae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003516:	2200      	movs	r2, #0
 8003518:	4906      	ldr	r1, [pc, #24]	@ (8003534 <HAL_I2C_Master_Receive+0x22c>)
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f002 fa4c 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d008      	beq.n	8003538 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e11a      	b.n	8003760 <HAL_I2C_Master_Receive+0x458>
 800352a:	bf00      	nop
 800352c:	00100002 	.word	0x00100002
 8003530:	ffff0000 	.word	0xffff0000
 8003534:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003546:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691a      	ldr	r2, [r3, #16]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003564:	3b01      	subs	r3, #1
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	691a      	ldr	r2, [r3, #16]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003584:	b2d2      	uxtb	r2, r2
 8003586:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003596:	3b01      	subs	r3, #1
 8003598:	b29a      	uxth	r2, r3
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3b01      	subs	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035ac:	e0c4      	b.n	8003738 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b0:	9300      	str	r3, [sp, #0]
 80035b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b4:	2200      	movs	r2, #0
 80035b6:	496c      	ldr	r1, [pc, #432]	@ (8003768 <HAL_I2C_Master_Receive+0x460>)
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f002 f9fd 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0cb      	b.n	8003760 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691a      	ldr	r2, [r3, #16]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f4:	3b01      	subs	r3, #1
 80035f6:	b29a      	uxth	r2, r3
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003600:	b29b      	uxth	r3, r3
 8003602:	3b01      	subs	r3, #1
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800360a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003610:	2200      	movs	r2, #0
 8003612:	4955      	ldr	r1, [pc, #340]	@ (8003768 <HAL_I2C_Master_Receive+0x460>)
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f002 f9cf 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e09d      	b.n	8003760 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003632:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	691a      	ldr	r2, [r3, #16]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003646:	1c5a      	adds	r2, r3, #1
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003650:	3b01      	subs	r3, #1
 8003652:	b29a      	uxth	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800365c:	b29b      	uxth	r3, r3
 800365e:	3b01      	subs	r3, #1
 8003660:	b29a      	uxth	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003670:	b2d2      	uxtb	r2, r2
 8003672:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003682:	3b01      	subs	r3, #1
 8003684:	b29a      	uxth	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003698:	e04e      	b.n	8003738 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800369a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800369c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f002 fb66 	bl	8005d70 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e058      	b.n	8003760 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b8:	b2d2      	uxtb	r2, r2
 80036ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	1c5a      	adds	r2, r3, #1
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	3b01      	subs	r3, #1
 80036da:	b29a      	uxth	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	695b      	ldr	r3, [r3, #20]
 80036e6:	f003 0304 	and.w	r3, r3, #4
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d124      	bne.n	8003738 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d107      	bne.n	8003706 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003704:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	691a      	ldr	r2, [r3, #16]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003710:	b2d2      	uxtb	r2, r2
 8003712:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003718:	1c5a      	adds	r2, r3, #1
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800373c:	2b00      	cmp	r3, #0
 800373e:	f47f aeb6 	bne.w	80034ae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2220      	movs	r2, #32
 8003746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	e000      	b.n	8003760 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800375e:	2302      	movs	r3, #2
  }
}
 8003760:	4618      	mov	r0, r3
 8003762:	3728      	adds	r7, #40	@ 0x28
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	00010004 	.word	0x00010004

0800376c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b08c      	sub	sp, #48	@ 0x30
 8003770:	af02      	add	r7, sp, #8
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	4608      	mov	r0, r1
 8003776:	4611      	mov	r1, r2
 8003778:	461a      	mov	r2, r3
 800377a:	4603      	mov	r3, r0
 800377c:	817b      	strh	r3, [r7, #10]
 800377e:	460b      	mov	r3, r1
 8003780:	813b      	strh	r3, [r7, #8]
 8003782:	4613      	mov	r3, r2
 8003784:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003786:	f7fe fdc5 	bl	8002314 <HAL_GetTick>
 800378a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b20      	cmp	r3, #32
 8003796:	f040 8214 	bne.w	8003bc2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800379a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	2319      	movs	r3, #25
 80037a0:	2201      	movs	r2, #1
 80037a2:	497b      	ldr	r1, [pc, #492]	@ (8003990 <HAL_I2C_Mem_Read+0x224>)
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f002 f907 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80037b0:	2302      	movs	r3, #2
 80037b2:	e207      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_I2C_Mem_Read+0x56>
 80037be:	2302      	movs	r3, #2
 80037c0:	e200      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x458>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d007      	beq.n	80037e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f042 0201 	orr.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2222      	movs	r2, #34	@ 0x22
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2240      	movs	r2, #64	@ 0x40
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003812:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003818:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381e:	b29a      	uxth	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4a5b      	ldr	r2, [pc, #364]	@ (8003994 <HAL_I2C_Mem_Read+0x228>)
 8003828:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800382a:	88f8      	ldrh	r0, [r7, #6]
 800382c:	893a      	ldrh	r2, [r7, #8]
 800382e:	8979      	ldrh	r1, [r7, #10]
 8003830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003832:	9301      	str	r3, [sp, #4]
 8003834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	4603      	mov	r3, r0
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f001 ff2c 	bl	8005698 <I2C_RequestMemoryRead>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e1bc      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800384e:	2b00      	cmp	r3, #0
 8003850:	d113      	bne.n	800387a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003852:	2300      	movs	r3, #0
 8003854:	623b      	str	r3, [r7, #32]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	623b      	str	r3, [r7, #32]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	623b      	str	r3, [r7, #32]
 8003866:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003876:	601a      	str	r2, [r3, #0]
 8003878:	e190      	b.n	8003b9c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800387e:	2b01      	cmp	r3, #1
 8003880:	d11b      	bne.n	80038ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003890:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003892:	2300      	movs	r3, #0
 8003894:	61fb      	str	r3, [r7, #28]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	61fb      	str	r3, [r7, #28]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	e170      	b.n	8003b9c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038be:	2b02      	cmp	r3, #2
 80038c0:	d11b      	bne.n	80038fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038e2:	2300      	movs	r3, #0
 80038e4:	61bb      	str	r3, [r7, #24]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	61bb      	str	r3, [r7, #24]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	61bb      	str	r3, [r7, #24]
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	e150      	b.n	8003b9c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038fa:	2300      	movs	r3, #0
 80038fc:	617b      	str	r3, [r7, #20]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	617b      	str	r3, [r7, #20]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003910:	e144      	b.n	8003b9c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003916:	2b03      	cmp	r3, #3
 8003918:	f200 80f1 	bhi.w	8003afe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003920:	2b01      	cmp	r3, #1
 8003922:	d123      	bne.n	800396c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003924:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003926:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f002 fa21 	bl	8005d70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e145      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691a      	ldr	r2, [r3, #16]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800396a:	e117      	b.n	8003b9c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003970:	2b02      	cmp	r3, #2
 8003972:	d14e      	bne.n	8003a12 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800397a:	2200      	movs	r2, #0
 800397c:	4906      	ldr	r1, [pc, #24]	@ (8003998 <HAL_I2C_Mem_Read+0x22c>)
 800397e:	68f8      	ldr	r0, [r7, #12]
 8003980:	f002 f81a 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e11a      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x458>
 800398e:	bf00      	nop
 8003990:	00100002 	.word	0x00100002
 8003994:	ffff0000 	.word	0xffff0000
 8003998:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b29a      	uxth	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a10:	e0c4      	b.n	8003b9c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a18:	2200      	movs	r2, #0
 8003a1a:	496c      	ldr	r1, [pc, #432]	@ (8003bcc <HAL_I2C_Mem_Read+0x460>)
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f001 ffcb 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e0cb      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	691a      	ldr	r2, [r3, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a46:	b2d2      	uxtb	r2, r2
 8003a48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4e:	1c5a      	adds	r2, r3, #1
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	b29a      	uxth	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a74:	2200      	movs	r2, #0
 8003a76:	4955      	ldr	r1, [pc, #340]	@ (8003bcc <HAL_I2C_Mem_Read+0x460>)
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f001 ff9d 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e09d      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691a      	ldr	r2, [r3, #16]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa2:	b2d2      	uxtb	r2, r2
 8003aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab4:	3b01      	subs	r3, #1
 8003ab6:	b29a      	uxth	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	3b01      	subs	r3, #1
 8003ac4:	b29a      	uxth	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	691a      	ldr	r2, [r3, #16]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad4:	b2d2      	uxtb	r2, r2
 8003ad6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	3b01      	subs	r3, #1
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003afc:	e04e      	b.n	8003b9c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003afe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b00:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f002 f934 	bl	8005d70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e058      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	f003 0304 	and.w	r3, r3, #4
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d124      	bne.n	8003b9c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b56:	2b03      	cmp	r3, #3
 8003b58:	d107      	bne.n	8003b6a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b68:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	b2d2      	uxtb	r2, r2
 8003b76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b86:	3b01      	subs	r3, #1
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f47f aeb6 	bne.w	8003912 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e000      	b.n	8003bc4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003bc2:	2302      	movs	r3, #2
  }
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3728      	adds	r7, #40	@ 0x28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	00010004 	.word	0x00010004

08003bd0 <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d124      	bne.n	8003c2e <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2228      	movs	r2, #40	@ 0x28
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d007      	beq.n	8003c0a <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f042 0201 	orr.w	r2, r2, #1
 8003c08:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003c18:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685a      	ldr	r2, [r3, #4]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003c28:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e000      	b.n	8003c30 <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003c2e:	2302      	movs	r3, #2
  }
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b088      	sub	sp, #32
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003c44:	2300      	movs	r3, #0
 8003c46:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c54:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003c5c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c64:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
 8003c68:	2b10      	cmp	r3, #16
 8003c6a:	d003      	beq.n	8003c74 <HAL_I2C_EV_IRQHandler+0x38>
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
 8003c6e:	2b40      	cmp	r3, #64	@ 0x40
 8003c70:	f040 80b1 	bne.w	8003dd6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10d      	bne.n	8003caa <HAL_I2C_EV_IRQHandler+0x6e>
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8003c94:	d003      	beq.n	8003c9e <HAL_I2C_EV_IRQHandler+0x62>
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8003c9c:	d101      	bne.n	8003ca2 <HAL_I2C_EV_IRQHandler+0x66>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <HAL_I2C_EV_IRQHandler+0x68>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	f000 8114 	beq.w	8003ed2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00b      	beq.n	8003ccc <HAL_I2C_EV_IRQHandler+0x90>
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d006      	beq.n	8003ccc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f002 f8e2 	bl	8005e88 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fd7a 	bl	80047be <I2C_Master_SB>
 8003cca:	e083      	b.n	8003dd4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	f003 0308 	and.w	r3, r3, #8
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d008      	beq.n	8003ce8 <HAL_I2C_EV_IRQHandler+0xac>
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 fdf2 	bl	80048ca <I2C_Master_ADD10>
 8003ce6:	e075      	b.n	8003dd4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	f003 0302 	and.w	r3, r3, #2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d008      	beq.n	8003d04 <HAL_I2C_EV_IRQHandler+0xc8>
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d003      	beq.n	8003d04 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 fe0e 	bl	800491e <I2C_Master_ADDR>
 8003d02:	e067      	b.n	8003dd4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d036      	beq.n	8003d7c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d1c:	f000 80db 	beq.w	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00d      	beq.n	8003d46 <HAL_I2C_EV_IRQHandler+0x10a>
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d008      	beq.n	8003d46 <HAL_I2C_EV_IRQHandler+0x10a>
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f003 0304 	and.w	r3, r3, #4
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d103      	bne.n	8003d46 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f9d6 	bl	80040f0 <I2C_MasterTransmit_TXE>
 8003d44:	e046      	b.n	8003dd4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80c2 	beq.w	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 80bc 	beq.w	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003d5e:	7bbb      	ldrb	r3, [r7, #14]
 8003d60:	2b21      	cmp	r3, #33	@ 0x21
 8003d62:	d103      	bne.n	8003d6c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 fa5f 	bl	8004228 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d6a:	e0b4      	b.n	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003d6c:	7bfb      	ldrb	r3, [r7, #15]
 8003d6e:	2b40      	cmp	r3, #64	@ 0x40
 8003d70:	f040 80b1 	bne.w	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 facd 	bl	8004314 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d7a:	e0ac      	b.n	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d8a:	f000 80a4 	beq.w	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00d      	beq.n	8003db4 <HAL_I2C_EV_IRQHandler+0x178>
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d008      	beq.n	8003db4 <HAL_I2C_EV_IRQHandler+0x178>
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d103      	bne.n	8003db4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 fb49 	bl	8004444 <I2C_MasterReceive_RXNE>
 8003db2:	e00f      	b.n	8003dd4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 808b 	beq.w	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 8085 	beq.w	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 fc01 	bl	80045d4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dd2:	e080      	b.n	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
 8003dd4:	e07f      	b.n	8003ed6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d004      	beq.n	8003de8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	61fb      	str	r3, [r7, #28]
 8003de6:	e007      	b.n	8003df8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d011      	beq.n	8003e26 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00c      	beq.n	8003e26 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003e1c:	69b9      	ldr	r1, [r7, #24]
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 ffcc 	bl	8004dbc <I2C_Slave_ADDR>
 8003e24:	e05a      	b.n	8003edc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d008      	beq.n	8003e42 <HAL_I2C_EV_IRQHandler+0x206>
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d003      	beq.n	8003e42 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f001 f806 	bl	8004e4c <I2C_Slave_STOPF>
 8003e40:	e04c      	b.n	8003edc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e42:	7bbb      	ldrb	r3, [r7, #14]
 8003e44:	2b21      	cmp	r3, #33	@ 0x21
 8003e46:	d002      	beq.n	8003e4e <HAL_I2C_EV_IRQHandler+0x212>
 8003e48:	7bbb      	ldrb	r3, [r7, #14]
 8003e4a:	2b29      	cmp	r3, #41	@ 0x29
 8003e4c:	d120      	bne.n	8003e90 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00d      	beq.n	8003e74 <HAL_I2C_EV_IRQHandler+0x238>
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d008      	beq.n	8003e74 <HAL_I2C_EV_IRQHandler+0x238>
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d103      	bne.n	8003e74 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fee7 	bl	8004c40 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e72:	e032      	b.n	8003eda <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d02d      	beq.n	8003eda <HAL_I2C_EV_IRQHandler+0x29e>
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d028      	beq.n	8003eda <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 ff16 	bl	8004cba <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e8e:	e024      	b.n	8003eda <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00d      	beq.n	8003eb6 <HAL_I2C_EV_IRQHandler+0x27a>
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_I2C_EV_IRQHandler+0x27a>
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d103      	bne.n	8003eb6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 ff24 	bl	8004cfc <I2C_SlaveReceive_RXNE>
 8003eb4:	e012      	b.n	8003edc <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00d      	beq.n	8003edc <HAL_I2C_EV_IRQHandler+0x2a0>
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d008      	beq.n	8003edc <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 ff54 	bl	8004d78 <I2C_SlaveReceive_BTF>
 8003ed0:	e004      	b.n	8003edc <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003ed2:	bf00      	nop
 8003ed4:	e002      	b.n	8003edc <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ed6:	bf00      	nop
 8003ed8:	e000      	b.n	8003edc <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003eda:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003edc:	3720      	adds	r7, #32
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b08a      	sub	sp, #40	@ 0x28
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003efa:	2300      	movs	r3, #0
 8003efc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f04:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00d      	beq.n	8003f2c <HAL_I2C_ER_IRQHandler+0x4a>
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d008      	beq.n	8003f2c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1c:	f043 0301 	orr.w	r3, r3, #1
 8003f20:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003f2a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f2c:	6a3b      	ldr	r3, [r7, #32]
 8003f2e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00d      	beq.n	8003f52 <HAL_I2C_ER_IRQHandler+0x70>
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d008      	beq.n	8003f52 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	f043 0302 	orr.w	r3, r3, #2
 8003f46:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8003f50:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d03e      	beq.n	8003fda <HAL_I2C_ER_IRQHandler+0xf8>
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d039      	beq.n	8003fda <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8003f66:	7efb      	ldrb	r3, [r7, #27]
 8003f68:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f78:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003f80:	7ebb      	ldrb	r3, [r7, #26]
 8003f82:	2b20      	cmp	r3, #32
 8003f84:	d112      	bne.n	8003fac <HAL_I2C_ER_IRQHandler+0xca>
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10f      	bne.n	8003fac <HAL_I2C_ER_IRQHandler+0xca>
 8003f8c:	7cfb      	ldrb	r3, [r7, #19]
 8003f8e:	2b21      	cmp	r3, #33	@ 0x21
 8003f90:	d008      	beq.n	8003fa4 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003f92:	7cfb      	ldrb	r3, [r7, #19]
 8003f94:	2b29      	cmp	r3, #41	@ 0x29
 8003f96:	d005      	beq.n	8003fa4 <HAL_I2C_ER_IRQHandler+0xc2>
 8003f98:	7cfb      	ldrb	r3, [r7, #19]
 8003f9a:	2b28      	cmp	r3, #40	@ 0x28
 8003f9c:	d106      	bne.n	8003fac <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2b21      	cmp	r3, #33	@ 0x21
 8003fa2:	d103      	bne.n	8003fac <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f001 f881 	bl	80050ac <I2C_Slave_AF>
 8003faa:	e016      	b.n	8003fda <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003fb4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	f043 0304 	orr.w	r3, r3, #4
 8003fbc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003fbe:	7efb      	ldrb	r3, [r7, #27]
 8003fc0:	2b10      	cmp	r3, #16
 8003fc2:	d002      	beq.n	8003fca <HAL_I2C_ER_IRQHandler+0xe8>
 8003fc4:	7efb      	ldrb	r3, [r7, #27]
 8003fc6:	2b40      	cmp	r3, #64	@ 0x40
 8003fc8:	d107      	bne.n	8003fda <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fd8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00d      	beq.n	8004000 <HAL_I2C_ER_IRQHandler+0x11e>
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d008      	beq.n	8004000 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ff0:	f043 0308 	orr.w	r3, r3, #8
 8003ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8003ffe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004002:	2b00      	cmp	r3, #0
 8004004:	d008      	beq.n	8004018 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f001 f8be 	bl	8005194 <I2C_ITError>
  }
}
 8004018:	bf00      	nop
 800401a:	3728      	adds	r7, #40	@ 0x28
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	460b      	mov	r3, r1
 800407a:	70fb      	strb	r3, [r7, #3]
 800407c:	4613      	mov	r3, r2
 800407e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040fe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004106:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004112:	2b00      	cmp	r3, #0
 8004114:	d150      	bne.n	80041b8 <I2C_MasterTransmit_TXE+0xc8>
 8004116:	7bfb      	ldrb	r3, [r7, #15]
 8004118:	2b21      	cmp	r3, #33	@ 0x21
 800411a:	d14d      	bne.n	80041b8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b08      	cmp	r3, #8
 8004120:	d01d      	beq.n	800415e <I2C_MasterTransmit_TXE+0x6e>
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	2b20      	cmp	r3, #32
 8004126:	d01a      	beq.n	800415e <I2C_MasterTransmit_TXE+0x6e>
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800412e:	d016      	beq.n	800415e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800413e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2211      	movs	r2, #17
 8004144:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2220      	movs	r2, #32
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f7ff ff62 	bl	8004020 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800415c:	e060      	b.n	8004220 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800416c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800417c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b40      	cmp	r3, #64	@ 0x40
 8004196:	d107      	bne.n	80041a8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff ff7d 	bl	80040a0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041a6:	e03b      	b.n	8004220 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff ff35 	bl	8004020 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041b6:	e033      	b.n	8004220 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
 80041ba:	2b21      	cmp	r3, #33	@ 0x21
 80041bc:	d005      	beq.n	80041ca <I2C_MasterTransmit_TXE+0xda>
 80041be:	7bbb      	ldrb	r3, [r7, #14]
 80041c0:	2b40      	cmp	r3, #64	@ 0x40
 80041c2:	d12d      	bne.n	8004220 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80041c4:	7bfb      	ldrb	r3, [r7, #15]
 80041c6:	2b22      	cmp	r3, #34	@ 0x22
 80041c8:	d12a      	bne.n	8004220 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d108      	bne.n	80041e6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041e2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80041e4:	e01c      	b.n	8004220 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b40      	cmp	r3, #64	@ 0x40
 80041f0:	d103      	bne.n	80041fa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f000 f88e 	bl	8004314 <I2C_MemoryTransmit_TXE_BTF>
}
 80041f8:	e012      	b.n	8004220 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fe:	781a      	ldrb	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800421e:	e7ff      	b.n	8004220 <I2C_MasterTransmit_TXE+0x130>
 8004220:	bf00      	nop
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004234:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b21      	cmp	r3, #33	@ 0x21
 8004240:	d164      	bne.n	800430c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004246:	b29b      	uxth	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d012      	beq.n	8004272 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004250:	781a      	ldrb	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004270:	e04c      	b.n	800430c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2b08      	cmp	r3, #8
 8004276:	d01d      	beq.n	80042b4 <I2C_MasterTransmit_BTF+0x8c>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2b20      	cmp	r3, #32
 800427c:	d01a      	beq.n	80042b4 <I2C_MasterTransmit_BTF+0x8c>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004284:	d016      	beq.n	80042b4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004294:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2211      	movs	r2, #17
 800429a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f7ff feb7 	bl	8004020 <HAL_I2C_MasterTxCpltCallback>
}
 80042b2:	e02b      	b.n	800430c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80042c2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042d2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b40      	cmp	r3, #64	@ 0x40
 80042ec:	d107      	bne.n	80042fe <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fed2 	bl	80040a0 <HAL_I2C_MemTxCpltCallback>
}
 80042fc:	e006      	b.n	800430c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7ff fe8a 	bl	8004020 <HAL_I2C_MasterTxCpltCallback>
}
 800430c:	bf00      	nop
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004322:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004328:	2b00      	cmp	r3, #0
 800432a:	d11d      	bne.n	8004368 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004330:	2b01      	cmp	r3, #1
 8004332:	d10b      	bne.n	800434c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004338:	b2da      	uxtb	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004344:	1c9a      	adds	r2, r3, #2
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800434a:	e077      	b.n	800443c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004350:	b29b      	uxth	r3, r3
 8004352:	121b      	asrs	r3, r3, #8
 8004354:	b2da      	uxtb	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004366:	e069      	b.n	800443c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800436c:	2b01      	cmp	r3, #1
 800436e:	d10b      	bne.n	8004388 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004374:	b2da      	uxtb	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004386:	e059      	b.n	800443c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800438c:	2b02      	cmp	r3, #2
 800438e:	d152      	bne.n	8004436 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004390:	7bfb      	ldrb	r3, [r7, #15]
 8004392:	2b22      	cmp	r3, #34	@ 0x22
 8004394:	d10d      	bne.n	80043b2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043a4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80043b0:	e044      	b.n	800443c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d015      	beq.n	80043e8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80043bc:	7bfb      	ldrb	r3, [r7, #15]
 80043be:	2b21      	cmp	r3, #33	@ 0x21
 80043c0:	d112      	bne.n	80043e8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c6:	781a      	ldrb	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043dc:	b29b      	uxth	r3, r3
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80043e6:	e029      	b.n	800443c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d124      	bne.n	800443c <I2C_MemoryTransmit_TXE_BTF+0x128>
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	2b21      	cmp	r3, #33	@ 0x21
 80043f6:	d121      	bne.n	800443c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685a      	ldr	r2, [r3, #4]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004406:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004416:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2220      	movs	r2, #32
 8004422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7ff fe36 	bl	80040a0 <HAL_I2C_MemTxCpltCallback>
}
 8004434:	e002      	b.n	800443c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7fe fe52 	bl	80030e0 <I2C_Flush_DR>
}
 800443c:	bf00      	nop
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b22      	cmp	r3, #34	@ 0x22
 8004456:	f040 80b9 	bne.w	80045cc <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004464:	b29b      	uxth	r3, r3
 8004466:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	2b03      	cmp	r3, #3
 800446c:	d921      	bls.n	80044b2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	691a      	ldr	r2, [r3, #16]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004478:	b2d2      	uxtb	r2, r2
 800447a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004480:	1c5a      	adds	r2, r3, #1
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b03      	cmp	r3, #3
 800449c:	f040 8096 	bne.w	80045cc <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044ae:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80044b0:	e08c      	b.n	80045cc <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d07f      	beq.n	80045ba <I2C_MasterReceive_RXNE+0x176>
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d002      	beq.n	80044c6 <I2C_MasterReceive_RXNE+0x82>
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d179      	bne.n	80045ba <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f001 fc20 	bl	8005d0c <I2C_WaitOnSTOPRequestThroughIT>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d14c      	bne.n	800456c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044e0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80044f0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004504:	1c5a      	adds	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800450e:	b29b      	uxth	r3, r3
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004526:	b2db      	uxtb	r3, r3
 8004528:	2b40      	cmp	r3, #64	@ 0x40
 800452a:	d10a      	bne.n	8004542 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff fdba 	bl	80040b4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004540:	e044      	b.n	80045cc <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2b08      	cmp	r3, #8
 800454e:	d002      	beq.n	8004556 <I2C_MasterReceive_RXNE+0x112>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2b20      	cmp	r3, #32
 8004554:	d103      	bne.n	800455e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	631a      	str	r2, [r3, #48]	@ 0x30
 800455c:	e002      	b.n	8004564 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2212      	movs	r2, #18
 8004562:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7ff fd65 	bl	8004034 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800456a:	e02f      	b.n	80045cc <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800457a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691a      	ldr	r2, [r3, #16]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004586:	b2d2      	uxtb	r2, r2
 8004588:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004598:	b29b      	uxth	r3, r3
 800459a:	3b01      	subs	r3, #1
 800459c:	b29a      	uxth	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2220      	movs	r2, #32
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff fd88 	bl	80040c8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80045b8:	e008      	b.n	80045cc <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045c8:	605a      	str	r2, [r3, #4]
}
 80045ca:	e7ff      	b.n	80045cc <I2C_MasterReceive_RXNE+0x188>
 80045cc:	bf00      	nop
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	2b04      	cmp	r3, #4
 80045ea:	d11b      	bne.n	8004624 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045fa:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460e:	1c5a      	adds	r2, r3, #1
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004622:	e0c8      	b.n	80047b6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004628:	b29b      	uxth	r3, r3
 800462a:	2b03      	cmp	r3, #3
 800462c:	d129      	bne.n	8004682 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685a      	ldr	r2, [r3, #4]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800463c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2b04      	cmp	r3, #4
 8004642:	d00a      	beq.n	800465a <I2C_MasterReceive_BTF+0x86>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2b02      	cmp	r3, #2
 8004648:	d007      	beq.n	800465a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004658:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	691a      	ldr	r2, [r3, #16]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004676:	b29b      	uxth	r3, r3
 8004678:	3b01      	subs	r3, #1
 800467a:	b29a      	uxth	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004680:	e099      	b.n	80047b6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004686:	b29b      	uxth	r3, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	f040 8081 	bne.w	8004790 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d002      	beq.n	800469a <I2C_MasterReceive_BTF+0xc6>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2b10      	cmp	r3, #16
 8004698:	d108      	bne.n	80046ac <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	e019      	b.n	80046e0 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d002      	beq.n	80046b8 <I2C_MasterReceive_BTF+0xe4>
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d108      	bne.n	80046ca <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	e00a      	b.n	80046e0 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2b10      	cmp	r3, #16
 80046ce:	d007      	beq.n	80046e0 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046de:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	691a      	ldr	r2, [r3, #16]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b01      	subs	r3, #1
 8004700:	b29a      	uxth	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	691a      	ldr	r2, [r3, #16]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004718:	1c5a      	adds	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004722:	b29b      	uxth	r3, r3
 8004724:	3b01      	subs	r3, #1
 8004726:	b29a      	uxth	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685a      	ldr	r2, [r3, #4]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800473a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2220      	movs	r2, #32
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b40      	cmp	r3, #64	@ 0x40
 800474e:	d10a      	bne.n	8004766 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7ff fca8 	bl	80040b4 <HAL_I2C_MemRxCpltCallback>
}
 8004764:	e027      	b.n	80047b6 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b08      	cmp	r3, #8
 8004772:	d002      	beq.n	800477a <I2C_MasterReceive_BTF+0x1a6>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2b20      	cmp	r3, #32
 8004778:	d103      	bne.n	8004782 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004780:	e002      	b.n	8004788 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2212      	movs	r2, #18
 8004786:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f7ff fc53 	bl	8004034 <HAL_I2C_MasterRxCpltCallback>
}
 800478e:	e012      	b.n	80047b6 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	691a      	ldr	r2, [r3, #16]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a2:	1c5a      	adds	r2, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80047b6:	bf00      	nop
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}

080047be <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b40      	cmp	r3, #64	@ 0x40
 80047d0:	d117      	bne.n	8004802 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d109      	bne.n	80047ee <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	461a      	mov	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047ea:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80047ec:	e067      	b.n	80048be <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	f043 0301 	orr.w	r3, r3, #1
 80047f8:	b2da      	uxtb	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	611a      	str	r2, [r3, #16]
}
 8004800:	e05d      	b.n	80048be <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800480a:	d133      	bne.n	8004874 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004812:	b2db      	uxtb	r3, r3
 8004814:	2b21      	cmp	r3, #33	@ 0x21
 8004816:	d109      	bne.n	800482c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481c:	b2db      	uxtb	r3, r3
 800481e:	461a      	mov	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004828:	611a      	str	r2, [r3, #16]
 800482a:	e008      	b.n	800483e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004830:	b2db      	uxtb	r3, r3
 8004832:	f043 0301 	orr.w	r3, r3, #1
 8004836:	b2da      	uxtb	r2, r3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004842:	2b00      	cmp	r3, #0
 8004844:	d004      	beq.n	8004850 <I2C_Master_SB+0x92>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800484a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800484c:	2b00      	cmp	r3, #0
 800484e:	d108      	bne.n	8004862 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004854:	2b00      	cmp	r3, #0
 8004856:	d032      	beq.n	80048be <I2C_Master_SB+0x100>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485e:	2b00      	cmp	r3, #0
 8004860:	d02d      	beq.n	80048be <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004870:	605a      	str	r2, [r3, #4]
}
 8004872:	e024      	b.n	80048be <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10e      	bne.n	800489a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004880:	b29b      	uxth	r3, r3
 8004882:	11db      	asrs	r3, r3, #7
 8004884:	b2db      	uxtb	r3, r3
 8004886:	f003 0306 	and.w	r3, r3, #6
 800488a:	b2db      	uxtb	r3, r3
 800488c:	f063 030f 	orn	r3, r3, #15
 8004890:	b2da      	uxtb	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	611a      	str	r2, [r3, #16]
}
 8004898:	e011      	b.n	80048be <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d10d      	bne.n	80048be <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	11db      	asrs	r3, r3, #7
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	f003 0306 	and.w	r3, r3, #6
 80048b0:	b2db      	uxtb	r3, r3
 80048b2:	f063 030e 	orn	r3, r3, #14
 80048b6:	b2da      	uxtb	r2, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	611a      	str	r2, [r3, #16]
}
 80048be:	bf00      	nop
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr

080048ca <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80048ca:	b480      	push	{r7}
 80048cc:	b083      	sub	sp, #12
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d004      	beq.n	80048f0 <I2C_Master_ADD10+0x26>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80048ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d108      	bne.n	8004902 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d00c      	beq.n	8004912 <I2C_Master_ADD10+0x48>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d007      	beq.n	8004912 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004910:	605a      	str	r2, [r3, #4]
  }
}
 8004912:	bf00      	nop
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800491e:	b480      	push	{r7}
 8004920:	b091      	sub	sp, #68	@ 0x44
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800492c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004934:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800493a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b22      	cmp	r3, #34	@ 0x22
 8004946:	f040 8169 	bne.w	8004c1c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10f      	bne.n	8004972 <I2C_Master_ADDR+0x54>
 8004952:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8004956:	2b40      	cmp	r3, #64	@ 0x40
 8004958:	d10b      	bne.n	8004972 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800495a:	2300      	movs	r3, #0
 800495c:	633b      	str	r3, [r7, #48]	@ 0x30
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	633b      	str	r3, [r7, #48]	@ 0x30
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	699b      	ldr	r3, [r3, #24]
 800496c:	633b      	str	r3, [r7, #48]	@ 0x30
 800496e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004970:	e160      	b.n	8004c34 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004976:	2b00      	cmp	r3, #0
 8004978:	d11d      	bne.n	80049b6 <I2C_Master_ADDR+0x98>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004982:	d118      	bne.n	80049b6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004984:	2300      	movs	r3, #0
 8004986:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
 800498e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699b      	ldr	r3, [r3, #24]
 8004996:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049a8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ae:	1c5a      	adds	r2, r3, #1
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	651a      	str	r2, [r3, #80]	@ 0x50
 80049b4:	e13e      	b.n	8004c34 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d113      	bne.n	80049e8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049c0:	2300      	movs	r3, #0
 80049c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	e115      	b.n	8004c14 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	f040 808a 	bne.w	8004b08 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80049f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80049fa:	d137      	bne.n	8004a6c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a0a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a1a:	d113      	bne.n	8004a44 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a2a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695b      	ldr	r3, [r3, #20]
 8004a36:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a42:	e0e7      	b.n	8004c14 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a44:	2300      	movs	r3, #0
 8004a46:	623b      	str	r3, [r7, #32]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	623b      	str	r3, [r7, #32]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	623b      	str	r3, [r7, #32]
 8004a58:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	e0d3      	b.n	8004c14 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a6e:	2b08      	cmp	r3, #8
 8004a70:	d02e      	beq.n	8004ad0 <I2C_Master_ADDR+0x1b2>
 8004a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d02b      	beq.n	8004ad0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a7a:	2b12      	cmp	r3, #18
 8004a7c:	d102      	bne.n	8004a84 <I2C_Master_ADDR+0x166>
 8004a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d125      	bne.n	8004ad0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d00e      	beq.n	8004aa8 <I2C_Master_ADDR+0x18a>
 8004a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a8c:	2b02      	cmp	r3, #2
 8004a8e:	d00b      	beq.n	8004aa8 <I2C_Master_ADDR+0x18a>
 8004a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a92:	2b10      	cmp	r3, #16
 8004a94:	d008      	beq.n	8004aa8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	e007      	b.n	8004ab8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ab6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ab8:	2300      	movs	r3, #0
 8004aba:	61fb      	str	r3, [r7, #28]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	61fb      	str	r3, [r7, #28]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	61fb      	str	r3, [r7, #28]
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	e0a1      	b.n	8004c14 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ade:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61bb      	str	r3, [r7, #24]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	61bb      	str	r3, [r7, #24]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	61bb      	str	r3, [r7, #24]
 8004af4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	e085      	b.n	8004c14 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d14d      	bne.n	8004bae <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004b12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b14:	2b04      	cmp	r3, #4
 8004b16:	d016      	beq.n	8004b46 <I2C_Master_ADDR+0x228>
 8004b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d013      	beq.n	8004b46 <I2C_Master_ADDR+0x228>
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b20:	2b10      	cmp	r3, #16
 8004b22:	d010      	beq.n	8004b46 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b32:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	e007      	b.n	8004b56 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b54:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b64:	d117      	bne.n	8004b96 <I2C_Master_ADDR+0x278>
 8004b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b68:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004b6c:	d00b      	beq.n	8004b86 <I2C_Master_ADDR+0x268>
 8004b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d008      	beq.n	8004b86 <I2C_Master_ADDR+0x268>
 8004b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b76:	2b08      	cmp	r3, #8
 8004b78:	d005      	beq.n	8004b86 <I2C_Master_ADDR+0x268>
 8004b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7c:	2b10      	cmp	r3, #16
 8004b7e:	d002      	beq.n	8004b86 <I2C_Master_ADDR+0x268>
 8004b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b82:	2b20      	cmp	r3, #32
 8004b84:	d107      	bne.n	8004b96 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004b94:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b96:	2300      	movs	r3, #0
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	617b      	str	r3, [r7, #20]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	617b      	str	r3, [r7, #20]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	e032      	b.n	8004c14 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004bbc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004bc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bcc:	d117      	bne.n	8004bfe <I2C_Master_ADDR+0x2e0>
 8004bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004bd4:	d00b      	beq.n	8004bee <I2C_Master_ADDR+0x2d0>
 8004bd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d008      	beq.n	8004bee <I2C_Master_ADDR+0x2d0>
 8004bdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d005      	beq.n	8004bee <I2C_Master_ADDR+0x2d0>
 8004be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004be4:	2b10      	cmp	r3, #16
 8004be6:	d002      	beq.n	8004bee <I2C_Master_ADDR+0x2d0>
 8004be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bea:	2b20      	cmp	r3, #32
 8004bec:	d107      	bne.n	8004bfe <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004bfc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bfe:	2300      	movs	r3, #0
 8004c00:	613b      	str	r3, [r7, #16]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	613b      	str	r3, [r7, #16]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	699b      	ldr	r3, [r3, #24]
 8004c10:	613b      	str	r3, [r7, #16]
 8004c12:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004c1a:	e00b      	b.n	8004c34 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	60fb      	str	r3, [r7, #12]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	60fb      	str	r3, [r7, #12]
 8004c30:	68fb      	ldr	r3, [r7, #12]
}
 8004c32:	e7ff      	b.n	8004c34 <I2C_Master_ADDR+0x316>
 8004c34:	bf00      	nop
 8004c36:	3744      	adds	r7, #68	@ 0x44
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c4e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d02b      	beq.n	8004cb2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5e:	781a      	ldrb	r2, [r3, #0]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6a:	1c5a      	adds	r2, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	3b01      	subs	r3, #1
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d114      	bne.n	8004cb2 <I2C_SlaveTransmit_TXE+0x72>
 8004c88:	7bfb      	ldrb	r3, [r7, #15]
 8004c8a:	2b29      	cmp	r3, #41	@ 0x29
 8004c8c:	d111      	bne.n	8004cb2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c9c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2221      	movs	r2, #33	@ 0x21
 8004ca2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2228      	movs	r2, #40	@ 0x28
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff f9cb 	bl	8004048 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004cb2:	bf00      	nop
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d011      	beq.n	8004cf0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd0:	781a      	ldrb	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d0a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d10:	b29b      	uxth	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d02c      	beq.n	8004d70 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d20:	b2d2      	uxtb	r2, r2
 8004d22:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d114      	bne.n	8004d70 <I2C_SlaveReceive_RXNE+0x74>
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
 8004d48:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d4a:	d111      	bne.n	8004d70 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685a      	ldr	r2, [r3, #4]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d5a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2222      	movs	r2, #34	@ 0x22
 8004d60:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2228      	movs	r2, #40	@ 0x28
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f7ff f976 	bl	800405c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004d70:	bf00      	nop
 8004d72:	3710      	adds	r7, #16
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d012      	beq.n	8004db0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d94:	b2d2      	uxtb	r2, r2
 8004d96:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9c:	1c5a      	adds	r2, r3, #1
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	b29a      	uxth	r2, r3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004dd6:	2b28      	cmp	r3, #40	@ 0x28
 8004dd8:	d125      	bne.n	8004e26 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004de8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d101      	bne.n	8004df8 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004df4:	2301      	movs	r3, #1
 8004df6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d103      	bne.n	8004e0a <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	81bb      	strh	r3, [r7, #12]
 8004e08:	e002      	b.n	8004e10 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	699b      	ldr	r3, [r3, #24]
 8004e0e:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004e18:	89ba      	ldrh	r2, [r7, #12]
 8004e1a:	7bfb      	ldrb	r3, [r7, #15]
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff f926 	bl	8004070 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004e24:	e00e      	b.n	8004e44 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e26:	2300      	movs	r3, #0
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	60bb      	str	r3, [r7, #8]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8004e44:	bf00      	nop
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e5a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e6a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60bb      	str	r3, [r7, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	60bb      	str	r3, [r7, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0201 	orr.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e98:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ea4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ea8:	d172      	bne.n	8004f90 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
 8004eac:	2b22      	cmp	r3, #34	@ 0x22
 8004eae:	d002      	beq.n	8004eb6 <I2C_Slave_STOPF+0x6a>
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004eb4:	d135      	bne.n	8004f22 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d005      	beq.n	8004eda <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed2:	f043 0204 	orr.w	r2, r3, #4
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ee8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fd fdd5 	bl	8002a9e <HAL_DMA_GetState>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d049      	beq.n	8004f8e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efe:	4a69      	ldr	r2, [pc, #420]	@ (80050a4 <I2C_Slave_STOPF+0x258>)
 8004f00:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f06:	4618      	mov	r0, r3
 8004f08:	f7fd fda7 	bl	8002a5a <HAL_DMA_Abort_IT>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d03d      	beq.n	8004f8e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f20:	e035      	b.n	8004f8e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	b29a      	uxth	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d005      	beq.n	8004f46 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3e:	f043 0204 	orr.w	r2, r3, #4
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f54:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fd fd9f 	bl	8002a9e <HAL_DMA_GetState>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d014      	beq.n	8004f90 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f6a:	4a4e      	ldr	r2, [pc, #312]	@ (80050a4 <I2C_Slave_STOPF+0x258>)
 8004f6c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fd fd71 	bl	8002a5a <HAL_DMA_Abort_IT>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d008      	beq.n	8004f90 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004f88:	4610      	mov	r0, r2
 8004f8a:	4798      	blx	r3
 8004f8c:	e000      	b.n	8004f90 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004f8e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d03e      	beq.n	8005018 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	f003 0304 	and.w	r3, r3, #4
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d112      	bne.n	8004fce <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fba:	1c5a      	adds	r2, r3, #1
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd8:	2b40      	cmp	r3, #64	@ 0x40
 8004fda:	d112      	bne.n	8005002 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691a      	ldr	r2, [r3, #16]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	b29a      	uxth	r2, r3
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005006:	b29b      	uxth	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d005      	beq.n	8005018 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005010:	f043 0204 	orr.w	r2, r3, #4
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f8b7 	bl	8005194 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005026:	e039      	b.n	800509c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005028:	7bfb      	ldrb	r3, [r7, #15]
 800502a:	2b2a      	cmp	r3, #42	@ 0x2a
 800502c:	d109      	bne.n	8005042 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2228      	movs	r2, #40	@ 0x28
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7ff f80d 	bl	800405c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b28      	cmp	r3, #40	@ 0x28
 800504c:	d111      	bne.n	8005072 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a15      	ldr	r2, [pc, #84]	@ (80050a8 <I2C_Slave_STOPF+0x25c>)
 8005052:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2220      	movs	r2, #32
 800505e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f7ff f80e 	bl	800408c <HAL_I2C_ListenCpltCallback>
}
 8005070:	e014      	b.n	800509c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005076:	2b22      	cmp	r3, #34	@ 0x22
 8005078:	d002      	beq.n	8005080 <I2C_Slave_STOPF+0x234>
 800507a:	7bfb      	ldrb	r3, [r7, #15]
 800507c:	2b22      	cmp	r3, #34	@ 0x22
 800507e:	d10d      	bne.n	800509c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2220      	movs	r2, #32
 800508a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7fe ffe0 	bl	800405c <HAL_I2C_SlaveRxCpltCallback>
}
 800509c:	bf00      	nop
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}
 80050a4:	08005869 	.word	0x08005869
 80050a8:	ffff0000 	.word	0xffff0000

080050ac <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ba:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d002      	beq.n	80050ce <I2C_Slave_AF+0x22>
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2b20      	cmp	r3, #32
 80050cc:	d129      	bne.n	8005122 <I2C_Slave_AF+0x76>
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
 80050d0:	2b28      	cmp	r3, #40	@ 0x28
 80050d2:	d126      	bne.n	8005122 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a2e      	ldr	r2, [pc, #184]	@ (8005190 <I2C_Slave_AF+0xe4>)
 80050d8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80050e8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80050f2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005102:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2220      	movs	r2, #32
 800510e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7fe ffb6 	bl	800408c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005120:	e031      	b.n	8005186 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	2b21      	cmp	r3, #33	@ 0x21
 8005126:	d129      	bne.n	800517c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a19      	ldr	r2, [pc, #100]	@ (8005190 <I2C_Slave_AF+0xe4>)
 800512c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2221      	movs	r2, #33	@ 0x21
 8005132:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2220      	movs	r2, #32
 8005138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005152:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800515c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800516c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f7fd ffb6 	bl	80030e0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7fe ff67 	bl	8004048 <HAL_I2C_SlaveTxCpltCallback>
}
 800517a:	e004      	b.n	8005186 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005184:	615a      	str	r2, [r3, #20]
}
 8005186:	bf00      	nop
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	ffff0000 	.word	0xffff0000

08005194 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051a2:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051aa:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80051ac:	7bbb      	ldrb	r3, [r7, #14]
 80051ae:	2b10      	cmp	r3, #16
 80051b0:	d002      	beq.n	80051b8 <I2C_ITError+0x24>
 80051b2:	7bbb      	ldrb	r3, [r7, #14]
 80051b4:	2b40      	cmp	r3, #64	@ 0x40
 80051b6:	d10a      	bne.n	80051ce <I2C_ITError+0x3a>
 80051b8:	7bfb      	ldrb	r3, [r7, #15]
 80051ba:	2b22      	cmp	r3, #34	@ 0x22
 80051bc:	d107      	bne.n	80051ce <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80051cc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80051ce:	7bfb      	ldrb	r3, [r7, #15]
 80051d0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80051d4:	2b28      	cmp	r3, #40	@ 0x28
 80051d6:	d107      	bne.n	80051e8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2228      	movs	r2, #40	@ 0x28
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80051e6:	e015      	b.n	8005214 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051f6:	d00a      	beq.n	800520e <I2C_ITError+0x7a>
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
 80051fa:	2b60      	cmp	r3, #96	@ 0x60
 80051fc:	d007      	beq.n	800520e <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2220      	movs	r2, #32
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800521e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005222:	d162      	bne.n	80052ea <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005232:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005238:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b01      	cmp	r3, #1
 8005240:	d020      	beq.n	8005284 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005246:	4a6a      	ldr	r2, [pc, #424]	@ (80053f0 <I2C_ITError+0x25c>)
 8005248:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800524e:	4618      	mov	r0, r3
 8005250:	f7fd fc03 	bl	8002a5a <HAL_DMA_Abort_IT>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 8089 	beq.w	800536e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0201 	bic.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2220      	movs	r2, #32
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800527e:	4610      	mov	r0, r2
 8005280:	4798      	blx	r3
 8005282:	e074      	b.n	800536e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005288:	4a59      	ldr	r2, [pc, #356]	@ (80053f0 <I2C_ITError+0x25c>)
 800528a:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005290:	4618      	mov	r0, r3
 8005292:	f7fd fbe2 	bl	8002a5a <HAL_DMA_Abort_IT>
 8005296:	4603      	mov	r3, r0
 8005298:	2b00      	cmp	r3, #0
 800529a:	d068      	beq.n	800536e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052a6:	2b40      	cmp	r3, #64	@ 0x40
 80052a8:	d10b      	bne.n	80052c2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	691a      	ldr	r2, [r3, #16]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 0201 	bic.w	r2, r2, #1
 80052d0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80052e4:	4610      	mov	r0, r2
 80052e6:	4798      	blx	r3
 80052e8:	e041      	b.n	800536e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052f0:	b2db      	uxtb	r3, r3
 80052f2:	2b60      	cmp	r3, #96	@ 0x60
 80052f4:	d125      	bne.n	8005342 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2220      	movs	r2, #32
 80052fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800530e:	2b40      	cmp	r3, #64	@ 0x40
 8005310:	d10b      	bne.n	800532a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691a      	ldr	r2, [r3, #16]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005324:	1c5a      	adds	r2, r3, #1
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0201 	bic.w	r2, r2, #1
 8005338:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fe fece 	bl	80040dc <HAL_I2C_AbortCpltCallback>
 8005340:	e015      	b.n	800536e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800534c:	2b40      	cmp	r3, #64	@ 0x40
 800534e:	d10b      	bne.n	8005368 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691a      	ldr	r2, [r3, #16]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7fe fead 	bl	80040c8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005372:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f003 0301 	and.w	r3, r3, #1
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10e      	bne.n	800539c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005384:	2b00      	cmp	r3, #0
 8005386:	d109      	bne.n	800539c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800538e:	2b00      	cmp	r3, #0
 8005390:	d104      	bne.n	800539c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005398:	2b00      	cmp	r3, #0
 800539a:	d007      	beq.n	80053ac <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80053aa:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053b2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b04      	cmp	r3, #4
 80053be:	d113      	bne.n	80053e8 <I2C_ITError+0x254>
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
 80053c2:	2b28      	cmp	r3, #40	@ 0x28
 80053c4:	d110      	bne.n	80053e8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a0a      	ldr	r2, [pc, #40]	@ (80053f4 <I2C_ITError+0x260>)
 80053ca:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7fe fe52 	bl	800408c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053e8:	bf00      	nop
 80053ea:	3710      	adds	r7, #16
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	08005869 	.word	0x08005869
 80053f4:	ffff0000 	.word	0xffff0000

080053f8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af02      	add	r7, sp, #8
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	607a      	str	r2, [r7, #4]
 8005402:	603b      	str	r3, [r7, #0]
 8005404:	460b      	mov	r3, r1
 8005406:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2b08      	cmp	r3, #8
 8005412:	d006      	beq.n	8005422 <I2C_MasterRequestWrite+0x2a>
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d003      	beq.n	8005422 <I2C_MasterRequestWrite+0x2a>
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005420:	d108      	bne.n	8005434 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	e00b      	b.n	800544c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005438:	2b12      	cmp	r3, #18
 800543a:	d107      	bne.n	800544c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800544a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005458:	68f8      	ldr	r0, [r7, #12]
 800545a:	f000 faad 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00d      	beq.n	8005480 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800546e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005472:	d103      	bne.n	800547c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800547a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e035      	b.n	80054ec <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005488:	d108      	bne.n	800549c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800548a:	897b      	ldrh	r3, [r7, #10]
 800548c:	b2db      	uxtb	r3, r3
 800548e:	461a      	mov	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005498:	611a      	str	r2, [r3, #16]
 800549a:	e01b      	b.n	80054d4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800549c:	897b      	ldrh	r3, [r7, #10]
 800549e:	11db      	asrs	r3, r3, #7
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	f003 0306 	and.w	r3, r3, #6
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	f063 030f 	orn	r3, r3, #15
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	490e      	ldr	r1, [pc, #56]	@ (80054f4 <I2C_MasterRequestWrite+0xfc>)
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 faf6 	bl	8005aac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054c0:	4603      	mov	r3, r0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e010      	b.n	80054ec <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80054ca:	897b      	ldrh	r3, [r7, #10]
 80054cc:	b2da      	uxtb	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	4907      	ldr	r1, [pc, #28]	@ (80054f8 <I2C_MasterRequestWrite+0x100>)
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 fae6 	bl	8005aac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d001      	beq.n	80054ea <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3718      	adds	r7, #24
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	00010008 	.word	0x00010008
 80054f8:	00010002 	.word	0x00010002

080054fc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af02      	add	r7, sp, #8
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	607a      	str	r2, [r7, #4]
 8005506:	603b      	str	r3, [r7, #0]
 8005508:	460b      	mov	r3, r1
 800550a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005510:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005520:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2b08      	cmp	r3, #8
 8005526:	d006      	beq.n	8005536 <I2C_MasterRequestRead+0x3a>
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d003      	beq.n	8005536 <I2C_MasterRequestRead+0x3a>
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005534:	d108      	bne.n	8005548 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	e00b      	b.n	8005560 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554c:	2b11      	cmp	r3, #17
 800554e:	d107      	bne.n	8005560 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800555e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	9300      	str	r3, [sp, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f000 fa23 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00d      	beq.n	8005594 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005586:	d103      	bne.n	8005590 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800558e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005590:	2303      	movs	r3, #3
 8005592:	e079      	b.n	8005688 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800559c:	d108      	bne.n	80055b0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800559e:	897b      	ldrh	r3, [r7, #10]
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	f043 0301 	orr.w	r3, r3, #1
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	611a      	str	r2, [r3, #16]
 80055ae:	e05f      	b.n	8005670 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80055b0:	897b      	ldrh	r3, [r7, #10]
 80055b2:	11db      	asrs	r3, r3, #7
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	f003 0306 	and.w	r3, r3, #6
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	f063 030f 	orn	r3, r3, #15
 80055c0:	b2da      	uxtb	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	4930      	ldr	r1, [pc, #192]	@ (8005690 <I2C_MasterRequestRead+0x194>)
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 fa6c 	bl	8005aac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d001      	beq.n	80055de <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e054      	b.n	8005688 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80055de:	897b      	ldrh	r3, [r7, #10]
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	4929      	ldr	r1, [pc, #164]	@ (8005694 <I2C_MasterRequestRead+0x198>)
 80055ee:	68f8      	ldr	r0, [r7, #12]
 80055f0:	f000 fa5c 	bl	8005aac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e044      	b.n	8005688 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055fe:	2300      	movs	r3, #0
 8005600:	613b      	str	r3, [r7, #16]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	613b      	str	r3, [r7, #16]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	613b      	str	r3, [r7, #16]
 8005612:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005622:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f000 f9c1 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00d      	beq.n	8005658 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005646:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800564a:	d103      	bne.n	8005654 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005652:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e017      	b.n	8005688 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005658:	897b      	ldrh	r3, [r7, #10]
 800565a:	11db      	asrs	r3, r3, #7
 800565c:	b2db      	uxtb	r3, r3
 800565e:	f003 0306 	and.w	r3, r3, #6
 8005662:	b2db      	uxtb	r3, r3
 8005664:	f063 030e 	orn	r3, r3, #14
 8005668:	b2da      	uxtb	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	4907      	ldr	r1, [pc, #28]	@ (8005694 <I2C_MasterRequestRead+0x198>)
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f000 fa18 	bl	8005aac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e000      	b.n	8005688 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3718      	adds	r7, #24
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	00010008 	.word	0x00010008
 8005694:	00010002 	.word	0x00010002

08005698 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b088      	sub	sp, #32
 800569c:	af02      	add	r7, sp, #8
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	4608      	mov	r0, r1
 80056a2:	4611      	mov	r1, r2
 80056a4:	461a      	mov	r2, r3
 80056a6:	4603      	mov	r3, r0
 80056a8:	817b      	strh	r3, [r7, #10]
 80056aa:	460b      	mov	r3, r1
 80056ac:	813b      	strh	r3, [r7, #8]
 80056ae:	4613      	mov	r3, r2
 80056b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80056c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d4:	9300      	str	r3, [sp, #0]
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	2200      	movs	r2, #0
 80056da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80056de:	68f8      	ldr	r0, [r7, #12]
 80056e0:	f000 f96a 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00d      	beq.n	8005706 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056f8:	d103      	bne.n	8005702 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005700:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005702:	2303      	movs	r3, #3
 8005704:	e0aa      	b.n	800585c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005706:	897b      	ldrh	r3, [r7, #10]
 8005708:	b2db      	uxtb	r3, r3
 800570a:	461a      	mov	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005714:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005718:	6a3a      	ldr	r2, [r7, #32]
 800571a:	4952      	ldr	r1, [pc, #328]	@ (8005864 <I2C_RequestMemoryRead+0x1cc>)
 800571c:	68f8      	ldr	r0, [r7, #12]
 800571e:	f000 f9c5 	bl	8005aac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005722:	4603      	mov	r3, r0
 8005724:	2b00      	cmp	r3, #0
 8005726:	d001      	beq.n	800572c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e097      	b.n	800585c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800572c:	2300      	movs	r3, #0
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	699b      	ldr	r3, [r3, #24]
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005744:	6a39      	ldr	r1, [r7, #32]
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 fa50 	bl	8005bec <I2C_WaitOnTXEFlagUntilTimeout>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00d      	beq.n	800576e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005756:	2b04      	cmp	r3, #4
 8005758:	d107      	bne.n	800576a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005768:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e076      	b.n	800585c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800576e:	88fb      	ldrh	r3, [r7, #6]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d105      	bne.n	8005780 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005774:	893b      	ldrh	r3, [r7, #8]
 8005776:	b2da      	uxtb	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	611a      	str	r2, [r3, #16]
 800577e:	e021      	b.n	80057c4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005780:	893b      	ldrh	r3, [r7, #8]
 8005782:	0a1b      	lsrs	r3, r3, #8
 8005784:	b29b      	uxth	r3, r3
 8005786:	b2da      	uxtb	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800578e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005790:	6a39      	ldr	r1, [r7, #32]
 8005792:	68f8      	ldr	r0, [r7, #12]
 8005794:	f000 fa2a 	bl	8005bec <I2C_WaitOnTXEFlagUntilTimeout>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00d      	beq.n	80057ba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057a2:	2b04      	cmp	r3, #4
 80057a4:	d107      	bne.n	80057b6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057b6:	2301      	movs	r3, #1
 80057b8:	e050      	b.n	800585c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057ba:	893b      	ldrh	r3, [r7, #8]
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057c6:	6a39      	ldr	r1, [r7, #32]
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f000 fa0f 	bl	8005bec <I2C_WaitOnTXEFlagUntilTimeout>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00d      	beq.n	80057f0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057d8:	2b04      	cmp	r3, #4
 80057da:	d107      	bne.n	80057ec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057ea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e035      	b.n	800585c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057fe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	2200      	movs	r2, #0
 8005808:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f000 f8d3 	bl	80059b8 <I2C_WaitOnFlagUntilTimeout>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00d      	beq.n	8005834 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005826:	d103      	bne.n	8005830 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800582e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e013      	b.n	800585c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005834:	897b      	ldrh	r3, [r7, #10]
 8005836:	b2db      	uxtb	r3, r3
 8005838:	f043 0301 	orr.w	r3, r3, #1
 800583c:	b2da      	uxtb	r2, r3
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005846:	6a3a      	ldr	r2, [r7, #32]
 8005848:	4906      	ldr	r1, [pc, #24]	@ (8005864 <I2C_RequestMemoryRead+0x1cc>)
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 f92e 	bl	8005aac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d001      	beq.n	800585a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e000      	b.n	800585c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3718      	adds	r7, #24
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	00010002 	.word	0x00010002

08005868 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b086      	sub	sp, #24
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005878:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005880:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005882:	4b4b      	ldr	r3, [pc, #300]	@ (80059b0 <I2C_DMAAbort+0x148>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	08db      	lsrs	r3, r3, #3
 8005888:	4a4a      	ldr	r2, [pc, #296]	@ (80059b4 <I2C_DMAAbort+0x14c>)
 800588a:	fba2 2303 	umull	r2, r3, r2, r3
 800588e:	0a1a      	lsrs	r2, r3, #8
 8005890:	4613      	mov	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	00da      	lsls	r2, r3, #3
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d106      	bne.n	80058b0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a6:	f043 0220 	orr.w	r2, r3, #32
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80058ae:	e00a      	b.n	80058c6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	3b01      	subs	r3, #1
 80058b4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058c4:	d0ea      	beq.n	800589c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d003      	beq.n	80058d6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058d2:	2200      	movs	r2, #0
 80058d4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e2:	2200      	movs	r2, #0
 80058e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058f4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2200      	movs	r2, #0
 80058fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005908:	2200      	movs	r2, #0
 800590a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005918:	2200      	movs	r2, #0
 800591a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	681a      	ldr	r2, [r3, #0]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0201 	bic.w	r2, r2, #1
 800592a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b60      	cmp	r3, #96	@ 0x60
 8005936:	d10e      	bne.n	8005956 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	2220      	movs	r2, #32
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2200      	movs	r2, #0
 800594c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800594e:	6978      	ldr	r0, [r7, #20]
 8005950:	f7fe fbc4 	bl	80040dc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005954:	e027      	b.n	80059a6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005956:	7cfb      	ldrb	r3, [r7, #19]
 8005958:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800595c:	2b28      	cmp	r3, #40	@ 0x28
 800595e:	d117      	bne.n	8005990 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 0201 	orr.w	r2, r2, #1
 800596e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800597e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	2200      	movs	r2, #0
 8005984:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	2228      	movs	r2, #40	@ 0x28
 800598a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800598e:	e007      	b.n	80059a0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	2220      	movs	r2, #32
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80059a0:	6978      	ldr	r0, [r7, #20]
 80059a2:	f7fe fb91 	bl	80040c8 <HAL_I2C_ErrorCallback>
}
 80059a6:	bf00      	nop
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20000000 	.word	0x20000000
 80059b4:	14f8b589 	.word	0x14f8b589

080059b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	4613      	mov	r3, r2
 80059c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80059c8:	e048      	b.n	8005a5c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059d0:	d044      	beq.n	8005a5c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059d2:	f7fc fc9f 	bl	8002314 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d302      	bcc.n	80059e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d139      	bne.n	8005a5c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	0c1b      	lsrs	r3, r3, #16
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d10d      	bne.n	8005a0e <I2C_WaitOnFlagUntilTimeout+0x56>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	43da      	mvns	r2, r3
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	4013      	ands	r3, r2
 80059fe:	b29b      	uxth	r3, r3
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	bf0c      	ite	eq
 8005a04:	2301      	moveq	r3, #1
 8005a06:	2300      	movne	r3, #0
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	e00c      	b.n	8005a28 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	43da      	mvns	r2, r3
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	4013      	ands	r3, r2
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	bf0c      	ite	eq
 8005a20:	2301      	moveq	r3, #1
 8005a22:	2300      	movne	r3, #0
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	461a      	mov	r2, r3
 8005a28:	79fb      	ldrb	r3, [r7, #7]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d116      	bne.n	8005a5c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2220      	movs	r2, #32
 8005a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a48:	f043 0220 	orr.w	r2, r3, #32
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2200      	movs	r2, #0
 8005a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e023      	b.n	8005aa4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	0c1b      	lsrs	r3, r3, #16
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d10d      	bne.n	8005a82 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	43da      	mvns	r2, r3
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	4013      	ands	r3, r2
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	bf0c      	ite	eq
 8005a78:	2301      	moveq	r3, #1
 8005a7a:	2300      	movne	r3, #0
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	461a      	mov	r2, r3
 8005a80:	e00c      	b.n	8005a9c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	43da      	mvns	r2, r3
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	4013      	ands	r3, r2
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	bf0c      	ite	eq
 8005a94:	2301      	moveq	r3, #1
 8005a96:	2300      	movne	r3, #0
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	79fb      	ldrb	r3, [r7, #7]
 8005a9e:	429a      	cmp	r2, r3
 8005aa0:	d093      	beq.n	80059ca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	60f8      	str	r0, [r7, #12]
 8005ab4:	60b9      	str	r1, [r7, #8]
 8005ab6:	607a      	str	r2, [r7, #4]
 8005ab8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005aba:	e071      	b.n	8005ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005aca:	d123      	bne.n	8005b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ada:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005ae4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2220      	movs	r2, #32
 8005af0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b00:	f043 0204 	orr.w	r2, r3, #4
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005b10:	2301      	movs	r3, #1
 8005b12:	e067      	b.n	8005be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b1a:	d041      	beq.n	8005ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b1c:	f7fc fbfa 	bl	8002314 <HAL_GetTick>
 8005b20:	4602      	mov	r2, r0
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	1ad3      	subs	r3, r2, r3
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d302      	bcc.n	8005b32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d136      	bne.n	8005ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	0c1b      	lsrs	r3, r3, #16
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d10c      	bne.n	8005b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	43da      	mvns	r2, r3
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	4013      	ands	r3, r2
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	bf14      	ite	ne
 8005b4e:	2301      	movne	r3, #1
 8005b50:	2300      	moveq	r3, #0
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	e00b      	b.n	8005b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	699b      	ldr	r3, [r3, #24]
 8005b5c:	43da      	mvns	r2, r3
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	4013      	ands	r3, r2
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	bf14      	ite	ne
 8005b68:	2301      	movne	r3, #1
 8005b6a:	2300      	moveq	r3, #0
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d016      	beq.n	8005ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b8c:	f043 0220 	orr.w	r2, r3, #32
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e021      	b.n	8005be4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	0c1b      	lsrs	r3, r3, #16
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d10c      	bne.n	8005bc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	43da      	mvns	r2, r3
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	b29b      	uxth	r3, r3
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	bf14      	ite	ne
 8005bbc:	2301      	movne	r3, #1
 8005bbe:	2300      	moveq	r3, #0
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	e00b      	b.n	8005bdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	43da      	mvns	r2, r3
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	4013      	ands	r3, r2
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	bf14      	ite	ne
 8005bd6:	2301      	movne	r3, #1
 8005bd8:	2300      	moveq	r3, #0
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f47f af6d 	bne.w	8005abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005bf8:	e034      	b.n	8005c64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005bfa:	68f8      	ldr	r0, [r7, #12]
 8005bfc:	f000 f915 	bl	8005e2a <I2C_IsAcknowledgeFailed>
 8005c00:	4603      	mov	r3, r0
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d001      	beq.n	8005c0a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e034      	b.n	8005c74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c10:	d028      	beq.n	8005c64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c12:	f7fc fb7f 	bl	8002314 <HAL_GetTick>
 8005c16:	4602      	mov	r2, r0
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	1ad3      	subs	r3, r2, r3
 8005c1c:	68ba      	ldr	r2, [r7, #8]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d302      	bcc.n	8005c28 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d11d      	bne.n	8005c64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	695b      	ldr	r3, [r3, #20]
 8005c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c32:	2b80      	cmp	r3, #128	@ 0x80
 8005c34:	d016      	beq.n	8005c64 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2220      	movs	r2, #32
 8005c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c50:	f043 0220 	orr.w	r2, r3, #32
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e007      	b.n	8005c74 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	695b      	ldr	r3, [r3, #20]
 8005c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c6e:	2b80      	cmp	r3, #128	@ 0x80
 8005c70:	d1c3      	bne.n	8005bfa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005c88:	e034      	b.n	8005cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f000 f8cd 	bl	8005e2a <I2C_IsAcknowledgeFailed>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d001      	beq.n	8005c9a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c96:	2301      	movs	r3, #1
 8005c98:	e034      	b.n	8005d04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ca0:	d028      	beq.n	8005cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ca2:	f7fc fb37 	bl	8002314 <HAL_GetTick>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	d302      	bcc.n	8005cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d11d      	bne.n	8005cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	f003 0304 	and.w	r3, r3, #4
 8005cc2:	2b04      	cmp	r3, #4
 8005cc4:	d016      	beq.n	8005cf4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ce0:	f043 0220 	orr.w	r2, r3, #32
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e007      	b.n	8005d04 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	f003 0304 	and.w	r3, r3, #4
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	d1c3      	bne.n	8005c8a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d02:	2300      	movs	r3, #0
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b085      	sub	sp, #20
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005d18:	4b13      	ldr	r3, [pc, #76]	@ (8005d68 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	08db      	lsrs	r3, r3, #3
 8005d1e:	4a13      	ldr	r2, [pc, #76]	@ (8005d6c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005d20:	fba2 2303 	umull	r2, r3, r2, r3
 8005d24:	0a1a      	lsrs	r2, r3, #8
 8005d26:	4613      	mov	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4413      	add	r3, r2
 8005d2c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	3b01      	subs	r3, #1
 8005d32:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d107      	bne.n	8005d4a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3e:	f043 0220 	orr.w	r2, r3, #32
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8005d46:	2301      	movs	r3, #1
 8005d48:	e008      	b.n	8005d5c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d58:	d0e9      	beq.n	8005d2e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3714      	adds	r7, #20
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	20000000 	.word	0x20000000
 8005d6c:	14f8b589 	.word	0x14f8b589

08005d70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d7c:	e049      	b.n	8005e12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	695b      	ldr	r3, [r3, #20]
 8005d84:	f003 0310 	and.w	r3, r3, #16
 8005d88:	2b10      	cmp	r3, #16
 8005d8a:	d119      	bne.n	8005dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f06f 0210 	mvn.w	r2, #16
 8005d94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2220      	movs	r2, #32
 8005da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e030      	b.n	8005e22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dc0:	f7fc faa8 	bl	8002314 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d302      	bcc.n	8005dd6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d11d      	bne.n	8005e12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005de0:	2b40      	cmp	r3, #64	@ 0x40
 8005de2:	d016      	beq.n	8005e12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2220      	movs	r2, #32
 8005dee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dfe:	f043 0220 	orr.w	r2, r3, #32
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e007      	b.n	8005e22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e1c:	2b40      	cmp	r3, #64	@ 0x40
 8005e1e:	d1ae      	bne.n	8005d7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e20:	2300      	movs	r3, #0
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3710      	adds	r7, #16
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}

08005e2a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e40:	d11b      	bne.n	8005e7a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e4a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2220      	movs	r2, #32
 8005e56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e66:	f043 0204 	orr.w	r2, r3, #4
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e000      	b.n	8005e7c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e94:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005e98:	d103      	bne.n	8005ea2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005ea0:	e007      	b.n	8005eb2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea6:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005eaa:	d102      	bne.n	8005eb2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2208      	movs	r2, #8
 8005eb0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8005eb2:	bf00      	nop
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b086      	sub	sp, #24
 8005ec2:	af02      	add	r7, sp, #8
 8005ec4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e101      	b.n	80060d4 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005edc:	b2db      	uxtb	r3, r3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d106      	bne.n	8005ef0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f7fc f936 	bl	800215c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2203      	movs	r2, #3
 8005ef4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005efe:	d102      	bne.n	8005f06 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f001 fec6 	bl	8007c9c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6818      	ldr	r0, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	7c1a      	ldrb	r2, [r3, #16]
 8005f18:	f88d 2000 	strb.w	r2, [sp]
 8005f1c:	3304      	adds	r3, #4
 8005f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005f20:	f001 fe58 	bl	8007bd4 <USB_CoreInit>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d005      	beq.n	8005f36 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e0ce      	b.n	80060d4 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f001 febe 	bl	8007cbe <USB_SetCurrentMode>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d005      	beq.n	8005f54 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2202      	movs	r2, #2
 8005f4c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e0bf      	b.n	80060d4 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f54:	2300      	movs	r3, #0
 8005f56:	73fb      	strb	r3, [r7, #15]
 8005f58:	e04a      	b.n	8005ff0 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005f5a:	7bfa      	ldrb	r2, [r7, #15]
 8005f5c:	6879      	ldr	r1, [r7, #4]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	00db      	lsls	r3, r3, #3
 8005f62:	4413      	add	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	440b      	add	r3, r1
 8005f68:	3315      	adds	r3, #21
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005f6e:	7bfa      	ldrb	r2, [r7, #15]
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	4613      	mov	r3, r2
 8005f74:	00db      	lsls	r3, r3, #3
 8005f76:	4413      	add	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	440b      	add	r3, r1
 8005f7c:	3314      	adds	r3, #20
 8005f7e:	7bfa      	ldrb	r2, [r7, #15]
 8005f80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005f82:	7bfa      	ldrb	r2, [r7, #15]
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
 8005f86:	b298      	uxth	r0, r3
 8005f88:	6879      	ldr	r1, [r7, #4]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	00db      	lsls	r3, r3, #3
 8005f8e:	4413      	add	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	440b      	add	r3, r1
 8005f94:	332e      	adds	r3, #46	@ 0x2e
 8005f96:	4602      	mov	r2, r0
 8005f98:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005f9a:	7bfa      	ldrb	r2, [r7, #15]
 8005f9c:	6879      	ldr	r1, [r7, #4]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	00db      	lsls	r3, r3, #3
 8005fa2:	4413      	add	r3, r2
 8005fa4:	009b      	lsls	r3, r3, #2
 8005fa6:	440b      	add	r3, r1
 8005fa8:	3318      	adds	r3, #24
 8005faa:	2200      	movs	r2, #0
 8005fac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005fae:	7bfa      	ldrb	r2, [r7, #15]
 8005fb0:	6879      	ldr	r1, [r7, #4]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	00db      	lsls	r3, r3, #3
 8005fb6:	4413      	add	r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	440b      	add	r3, r1
 8005fbc:	331c      	adds	r3, #28
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005fc2:	7bfa      	ldrb	r2, [r7, #15]
 8005fc4:	6879      	ldr	r1, [r7, #4]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	00db      	lsls	r3, r3, #3
 8005fca:	4413      	add	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	440b      	add	r3, r1
 8005fd0:	3320      	adds	r3, #32
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005fd6:	7bfa      	ldrb	r2, [r7, #15]
 8005fd8:	6879      	ldr	r1, [r7, #4]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	00db      	lsls	r3, r3, #3
 8005fde:	4413      	add	r3, r2
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	440b      	add	r3, r1
 8005fe4:	3324      	adds	r3, #36	@ 0x24
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	3301      	adds	r3, #1
 8005fee:	73fb      	strb	r3, [r7, #15]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	791b      	ldrb	r3, [r3, #4]
 8005ff4:	7bfa      	ldrb	r2, [r7, #15]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d3af      	bcc.n	8005f5a <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	73fb      	strb	r3, [r7, #15]
 8005ffe:	e044      	b.n	800608a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006000:	7bfa      	ldrb	r2, [r7, #15]
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	4613      	mov	r3, r2
 8006006:	00db      	lsls	r3, r3, #3
 8006008:	4413      	add	r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	440b      	add	r3, r1
 800600e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006012:	2200      	movs	r2, #0
 8006014:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006016:	7bfa      	ldrb	r2, [r7, #15]
 8006018:	6879      	ldr	r1, [r7, #4]
 800601a:	4613      	mov	r3, r2
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	4413      	add	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	440b      	add	r3, r1
 8006024:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006028:	7bfa      	ldrb	r2, [r7, #15]
 800602a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800602c:	7bfa      	ldrb	r2, [r7, #15]
 800602e:	6879      	ldr	r1, [r7, #4]
 8006030:	4613      	mov	r3, r2
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	4413      	add	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	440b      	add	r3, r1
 800603a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800603e:	2200      	movs	r2, #0
 8006040:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006042:	7bfa      	ldrb	r2, [r7, #15]
 8006044:	6879      	ldr	r1, [r7, #4]
 8006046:	4613      	mov	r3, r2
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	4413      	add	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	440b      	add	r3, r1
 8006050:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006054:	2200      	movs	r2, #0
 8006056:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006058:	7bfa      	ldrb	r2, [r7, #15]
 800605a:	6879      	ldr	r1, [r7, #4]
 800605c:	4613      	mov	r3, r2
 800605e:	00db      	lsls	r3, r3, #3
 8006060:	4413      	add	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	440b      	add	r3, r1
 8006066:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800606a:	2200      	movs	r2, #0
 800606c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800606e:	7bfa      	ldrb	r2, [r7, #15]
 8006070:	6879      	ldr	r1, [r7, #4]
 8006072:	4613      	mov	r3, r2
 8006074:	00db      	lsls	r3, r3, #3
 8006076:	4413      	add	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	440b      	add	r3, r1
 800607c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006080:	2200      	movs	r2, #0
 8006082:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006084:	7bfb      	ldrb	r3, [r7, #15]
 8006086:	3301      	adds	r3, #1
 8006088:	73fb      	strb	r3, [r7, #15]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	791b      	ldrb	r3, [r3, #4]
 800608e:	7bfa      	ldrb	r2, [r7, #15]
 8006090:	429a      	cmp	r2, r3
 8006092:	d3b5      	bcc.n	8006000 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6818      	ldr	r0, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	7c1a      	ldrb	r2, [r3, #16]
 800609c:	f88d 2000 	strb.w	r2, [sp]
 80060a0:	3304      	adds	r3, #4
 80060a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80060a4:	f001 fe58 	bl	8007d58 <USB_DevInit>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d005      	beq.n	80060ba <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2202      	movs	r2, #2
 80060b2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e00c      	b.n	80060d4 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f002 f820 	bl	8008112 <USB_DevDisconnect>

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3710      	adds	r7, #16
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b086      	sub	sp, #24
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e267      	b.n	80065be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d075      	beq.n	80061e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80060fa:	4b88      	ldr	r3, [pc, #544]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	f003 030c 	and.w	r3, r3, #12
 8006102:	2b04      	cmp	r3, #4
 8006104:	d00c      	beq.n	8006120 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006106:	4b85      	ldr	r3, [pc, #532]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800610e:	2b08      	cmp	r3, #8
 8006110:	d112      	bne.n	8006138 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006112:	4b82      	ldr	r3, [pc, #520]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800611a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800611e:	d10b      	bne.n	8006138 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006120:	4b7e      	ldr	r3, [pc, #504]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d05b      	beq.n	80061e4 <HAL_RCC_OscConfig+0x108>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d157      	bne.n	80061e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e242      	b.n	80065be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006140:	d106      	bne.n	8006150 <HAL_RCC_OscConfig+0x74>
 8006142:	4b76      	ldr	r3, [pc, #472]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a75      	ldr	r2, [pc, #468]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 8006148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	e01d      	b.n	800618c <HAL_RCC_OscConfig+0xb0>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006158:	d10c      	bne.n	8006174 <HAL_RCC_OscConfig+0x98>
 800615a:	4b70      	ldr	r3, [pc, #448]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a6f      	ldr	r2, [pc, #444]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 8006160:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006164:	6013      	str	r3, [r2, #0]
 8006166:	4b6d      	ldr	r3, [pc, #436]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a6c      	ldr	r2, [pc, #432]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 800616c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006170:	6013      	str	r3, [r2, #0]
 8006172:	e00b      	b.n	800618c <HAL_RCC_OscConfig+0xb0>
 8006174:	4b69      	ldr	r3, [pc, #420]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a68      	ldr	r2, [pc, #416]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 800617a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800617e:	6013      	str	r3, [r2, #0]
 8006180:	4b66      	ldr	r3, [pc, #408]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a65      	ldr	r2, [pc, #404]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 8006186:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800618a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d013      	beq.n	80061bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006194:	f7fc f8be 	bl	8002314 <HAL_GetTick>
 8006198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800619a:	e008      	b.n	80061ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800619c:	f7fc f8ba 	bl	8002314 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b64      	cmp	r3, #100	@ 0x64
 80061a8:	d901      	bls.n	80061ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e207      	b.n	80065be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80061ae:	4b5b      	ldr	r3, [pc, #364]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d0f0      	beq.n	800619c <HAL_RCC_OscConfig+0xc0>
 80061ba:	e014      	b.n	80061e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061bc:	f7fc f8aa 	bl	8002314 <HAL_GetTick>
 80061c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061c2:	e008      	b.n	80061d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80061c4:	f7fc f8a6 	bl	8002314 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	2b64      	cmp	r3, #100	@ 0x64
 80061d0:	d901      	bls.n	80061d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80061d2:	2303      	movs	r3, #3
 80061d4:	e1f3      	b.n	80065be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061d6:	4b51      	ldr	r3, [pc, #324]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1f0      	bne.n	80061c4 <HAL_RCC_OscConfig+0xe8>
 80061e2:	e000      	b.n	80061e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d063      	beq.n	80062ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80061f2:	4b4a      	ldr	r3, [pc, #296]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	f003 030c 	and.w	r3, r3, #12
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00b      	beq.n	8006216 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061fe:	4b47      	ldr	r3, [pc, #284]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006206:	2b08      	cmp	r3, #8
 8006208:	d11c      	bne.n	8006244 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800620a:	4b44      	ldr	r3, [pc, #272]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d116      	bne.n	8006244 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006216:	4b41      	ldr	r3, [pc, #260]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0302 	and.w	r3, r3, #2
 800621e:	2b00      	cmp	r3, #0
 8006220:	d005      	beq.n	800622e <HAL_RCC_OscConfig+0x152>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d001      	beq.n	800622e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e1c7      	b.n	80065be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800622e:	4b3b      	ldr	r3, [pc, #236]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	4937      	ldr	r1, [pc, #220]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 800623e:	4313      	orrs	r3, r2
 8006240:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006242:	e03a      	b.n	80062ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d020      	beq.n	800628e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800624c:	4b34      	ldr	r3, [pc, #208]	@ (8006320 <HAL_RCC_OscConfig+0x244>)
 800624e:	2201      	movs	r2, #1
 8006250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006252:	f7fc f85f 	bl	8002314 <HAL_GetTick>
 8006256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006258:	e008      	b.n	800626c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800625a:	f7fc f85b 	bl	8002314 <HAL_GetTick>
 800625e:	4602      	mov	r2, r0
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	1ad3      	subs	r3, r2, r3
 8006264:	2b02      	cmp	r3, #2
 8006266:	d901      	bls.n	800626c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006268:	2303      	movs	r3, #3
 800626a:	e1a8      	b.n	80065be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800626c:	4b2b      	ldr	r3, [pc, #172]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0f0      	beq.n	800625a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006278:	4b28      	ldr	r3, [pc, #160]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	00db      	lsls	r3, r3, #3
 8006286:	4925      	ldr	r1, [pc, #148]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 8006288:	4313      	orrs	r3, r2
 800628a:	600b      	str	r3, [r1, #0]
 800628c:	e015      	b.n	80062ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800628e:	4b24      	ldr	r3, [pc, #144]	@ (8006320 <HAL_RCC_OscConfig+0x244>)
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006294:	f7fc f83e 	bl	8002314 <HAL_GetTick>
 8006298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800629a:	e008      	b.n	80062ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800629c:	f7fc f83a 	bl	8002314 <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e187      	b.n	80065be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80062ae:	4b1b      	ldr	r3, [pc, #108]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0302 	and.w	r3, r3, #2
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1f0      	bne.n	800629c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f003 0308 	and.w	r3, r3, #8
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d036      	beq.n	8006334 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d016      	beq.n	80062fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062ce:	4b15      	ldr	r3, [pc, #84]	@ (8006324 <HAL_RCC_OscConfig+0x248>)
 80062d0:	2201      	movs	r2, #1
 80062d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d4:	f7fc f81e 	bl	8002314 <HAL_GetTick>
 80062d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062da:	e008      	b.n	80062ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062dc:	f7fc f81a 	bl	8002314 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d901      	bls.n	80062ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80062ea:	2303      	movs	r3, #3
 80062ec:	e167      	b.n	80065be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062ee:	4b0b      	ldr	r3, [pc, #44]	@ (800631c <HAL_RCC_OscConfig+0x240>)
 80062f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062f2:	f003 0302 	and.w	r3, r3, #2
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0f0      	beq.n	80062dc <HAL_RCC_OscConfig+0x200>
 80062fa:	e01b      	b.n	8006334 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062fc:	4b09      	ldr	r3, [pc, #36]	@ (8006324 <HAL_RCC_OscConfig+0x248>)
 80062fe:	2200      	movs	r2, #0
 8006300:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006302:	f7fc f807 	bl	8002314 <HAL_GetTick>
 8006306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006308:	e00e      	b.n	8006328 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800630a:	f7fc f803 	bl	8002314 <HAL_GetTick>
 800630e:	4602      	mov	r2, r0
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	2b02      	cmp	r3, #2
 8006316:	d907      	bls.n	8006328 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006318:	2303      	movs	r3, #3
 800631a:	e150      	b.n	80065be <HAL_RCC_OscConfig+0x4e2>
 800631c:	40023800 	.word	0x40023800
 8006320:	42470000 	.word	0x42470000
 8006324:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006328:	4b88      	ldr	r3, [pc, #544]	@ (800654c <HAL_RCC_OscConfig+0x470>)
 800632a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1ea      	bne.n	800630a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	2b00      	cmp	r3, #0
 800633e:	f000 8097 	beq.w	8006470 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006342:	2300      	movs	r3, #0
 8006344:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006346:	4b81      	ldr	r3, [pc, #516]	@ (800654c <HAL_RCC_OscConfig+0x470>)
 8006348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800634a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10f      	bne.n	8006372 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006352:	2300      	movs	r3, #0
 8006354:	60bb      	str	r3, [r7, #8]
 8006356:	4b7d      	ldr	r3, [pc, #500]	@ (800654c <HAL_RCC_OscConfig+0x470>)
 8006358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635a:	4a7c      	ldr	r2, [pc, #496]	@ (800654c <HAL_RCC_OscConfig+0x470>)
 800635c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006360:	6413      	str	r3, [r2, #64]	@ 0x40
 8006362:	4b7a      	ldr	r3, [pc, #488]	@ (800654c <HAL_RCC_OscConfig+0x470>)
 8006364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006366:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800636a:	60bb      	str	r3, [r7, #8]
 800636c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800636e:	2301      	movs	r3, #1
 8006370:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006372:	4b77      	ldr	r3, [pc, #476]	@ (8006550 <HAL_RCC_OscConfig+0x474>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800637a:	2b00      	cmp	r3, #0
 800637c:	d118      	bne.n	80063b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800637e:	4b74      	ldr	r3, [pc, #464]	@ (8006550 <HAL_RCC_OscConfig+0x474>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a73      	ldr	r2, [pc, #460]	@ (8006550 <HAL_RCC_OscConfig+0x474>)
 8006384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006388:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800638a:	f7fb ffc3 	bl	8002314 <HAL_GetTick>
 800638e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006390:	e008      	b.n	80063a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006392:	f7fb ffbf 	bl	8002314 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	2b02      	cmp	r3, #2
 800639e:	d901      	bls.n	80063a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e10c      	b.n	80065be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80063a4:	4b6a      	ldr	r3, [pc, #424]	@ (8006550 <HAL_RCC_OscConfig+0x474>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d0f0      	beq.n	8006392 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d106      	bne.n	80063c6 <HAL_RCC_OscConfig+0x2ea>
 80063b8:	4b64      	ldr	r3, [pc, #400]	@ (800654c <HAL_RCC_OscConfig+0x470>)
 80063ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063bc:	4a63      	ldr	r2, [pc, #396]	@ (800654c <HAL_RCC_OscConfig+0x470>)
 80063be:	f043 0301 	orr.w	r3, r3, #1
 80063c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80063c4:	e01c      	b.n	8006400 <HAL_RCC_OscConfig+0x324>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	2b05      	cmp	r3, #5
 80063cc:	d10c      	bne.n	80063e8 <HAL_RCC_OscConfig+0x30c>
 80063ce:	4b5f      	ldr	r3, [pc, #380]	@ (800654c <HAL_RCC_OscConfig+0x470>)
 80063d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063d2:	4a5e      	ldr	r2, [pc, #376]	@ (800654c <HAL_RCC_OscConfig+0x470>)
 80063d4:	f043 0304 	orr.w	r3, r3, #4
 80063d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80063da:	4b5c      	ldr	r3, [pc, #368]	@ (800654c <HAL_RCC_OscConfig+0x470>)
 80063dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063de:	4a5b      	ldr	r2, [pc, #364]	@ (800654c <HAL_RCC_OscConfig+0x470>)
 80063e0:	f043 0301 	orr.w	r3, r3, #1
 80063e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80063e6:	e00b      	b.n	8006400 <HAL_RCC_OscConfig+0x324>
 80063e8:	4b58      	ldr	r3, [pc, #352]	@ (800654c <HAL_RCC_OscConfig+0x470>)
 80063ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063ec:	4a57      	ldr	r2, [pc, #348]	@ (800654c <HAL_RCC_OscConfig+0x470>)
 80063ee:	f023 0301 	bic.w	r3, r3, #1
 80063f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80063f4:	4b55      	ldr	r3, [pc, #340]	@ (800654c <HAL_RCC_OscConfig+0x470>)
 80063f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063f8:	4a54      	ldr	r2, [pc, #336]	@ (800654c <HAL_RCC_OscConfig+0x470>)
 80063fa:	f023 0304 	bic.w	r3, r3, #4
 80063fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d015      	beq.n	8006434 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006408:	f7fb ff84 	bl	8002314 <HAL_GetTick>
 800640c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800640e:	e00a      	b.n	8006426 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006410:	f7fb ff80 	bl	8002314 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800641e:	4293      	cmp	r3, r2
 8006420:	d901      	bls.n	8006426 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e0cb      	b.n	80065be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006426:	4b49      	ldr	r3, [pc, #292]	@ (800654c <HAL_RCC_OscConfig+0x470>)
 8006428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800642a:	f003 0302 	and.w	r3, r3, #2
 800642e:	2b00      	cmp	r3, #0
 8006430:	d0ee      	beq.n	8006410 <HAL_RCC_OscConfig+0x334>
 8006432:	e014      	b.n	800645e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006434:	f7fb ff6e 	bl	8002314 <HAL_GetTick>
 8006438:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800643a:	e00a      	b.n	8006452 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800643c:	f7fb ff6a 	bl	8002314 <HAL_GetTick>
 8006440:	4602      	mov	r2, r0
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	1ad3      	subs	r3, r2, r3
 8006446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800644a:	4293      	cmp	r3, r2
 800644c:	d901      	bls.n	8006452 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800644e:	2303      	movs	r3, #3
 8006450:	e0b5      	b.n	80065be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006452:	4b3e      	ldr	r3, [pc, #248]	@ (800654c <HAL_RCC_OscConfig+0x470>)
 8006454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1ee      	bne.n	800643c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800645e:	7dfb      	ldrb	r3, [r7, #23]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d105      	bne.n	8006470 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006464:	4b39      	ldr	r3, [pc, #228]	@ (800654c <HAL_RCC_OscConfig+0x470>)
 8006466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006468:	4a38      	ldr	r2, [pc, #224]	@ (800654c <HAL_RCC_OscConfig+0x470>)
 800646a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800646e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	2b00      	cmp	r3, #0
 8006476:	f000 80a1 	beq.w	80065bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800647a:	4b34      	ldr	r3, [pc, #208]	@ (800654c <HAL_RCC_OscConfig+0x470>)
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	f003 030c 	and.w	r3, r3, #12
 8006482:	2b08      	cmp	r3, #8
 8006484:	d05c      	beq.n	8006540 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	2b02      	cmp	r3, #2
 800648c:	d141      	bne.n	8006512 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800648e:	4b31      	ldr	r3, [pc, #196]	@ (8006554 <HAL_RCC_OscConfig+0x478>)
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006494:	f7fb ff3e 	bl	8002314 <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800649c:	f7fb ff3a 	bl	8002314 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e087      	b.n	80065be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064ae:	4b27      	ldr	r3, [pc, #156]	@ (800654c <HAL_RCC_OscConfig+0x470>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1f0      	bne.n	800649c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	69da      	ldr	r2, [r3, #28]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	431a      	orrs	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c8:	019b      	lsls	r3, r3, #6
 80064ca:	431a      	orrs	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d0:	085b      	lsrs	r3, r3, #1
 80064d2:	3b01      	subs	r3, #1
 80064d4:	041b      	lsls	r3, r3, #16
 80064d6:	431a      	orrs	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064dc:	061b      	lsls	r3, r3, #24
 80064de:	491b      	ldr	r1, [pc, #108]	@ (800654c <HAL_RCC_OscConfig+0x470>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006554 <HAL_RCC_OscConfig+0x478>)
 80064e6:	2201      	movs	r2, #1
 80064e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ea:	f7fb ff13 	bl	8002314 <HAL_GetTick>
 80064ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064f0:	e008      	b.n	8006504 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064f2:	f7fb ff0f 	bl	8002314 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d901      	bls.n	8006504 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e05c      	b.n	80065be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006504:	4b11      	ldr	r3, [pc, #68]	@ (800654c <HAL_RCC_OscConfig+0x470>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800650c:	2b00      	cmp	r3, #0
 800650e:	d0f0      	beq.n	80064f2 <HAL_RCC_OscConfig+0x416>
 8006510:	e054      	b.n	80065bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006512:	4b10      	ldr	r3, [pc, #64]	@ (8006554 <HAL_RCC_OscConfig+0x478>)
 8006514:	2200      	movs	r2, #0
 8006516:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006518:	f7fb fefc 	bl	8002314 <HAL_GetTick>
 800651c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800651e:	e008      	b.n	8006532 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006520:	f7fb fef8 	bl	8002314 <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	2b02      	cmp	r3, #2
 800652c:	d901      	bls.n	8006532 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	e045      	b.n	80065be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006532:	4b06      	ldr	r3, [pc, #24]	@ (800654c <HAL_RCC_OscConfig+0x470>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800653a:	2b00      	cmp	r3, #0
 800653c:	d1f0      	bne.n	8006520 <HAL_RCC_OscConfig+0x444>
 800653e:	e03d      	b.n	80065bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d107      	bne.n	8006558 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006548:	2301      	movs	r3, #1
 800654a:	e038      	b.n	80065be <HAL_RCC_OscConfig+0x4e2>
 800654c:	40023800 	.word	0x40023800
 8006550:	40007000 	.word	0x40007000
 8006554:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006558:	4b1b      	ldr	r3, [pc, #108]	@ (80065c8 <HAL_RCC_OscConfig+0x4ec>)
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d028      	beq.n	80065b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006570:	429a      	cmp	r2, r3
 8006572:	d121      	bne.n	80065b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800657e:	429a      	cmp	r2, r3
 8006580:	d11a      	bne.n	80065b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006588:	4013      	ands	r3, r2
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800658e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006590:	4293      	cmp	r3, r2
 8006592:	d111      	bne.n	80065b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800659e:	085b      	lsrs	r3, r3, #1
 80065a0:	3b01      	subs	r3, #1
 80065a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d107      	bne.n	80065b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d001      	beq.n	80065bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e000      	b.n	80065be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3718      	adds	r7, #24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	40023800 	.word	0x40023800

080065cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d101      	bne.n	80065e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e0cc      	b.n	800677a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065e0:	4b68      	ldr	r3, [pc, #416]	@ (8006784 <HAL_RCC_ClockConfig+0x1b8>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0307 	and.w	r3, r3, #7
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d90c      	bls.n	8006608 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ee:	4b65      	ldr	r3, [pc, #404]	@ (8006784 <HAL_RCC_ClockConfig+0x1b8>)
 80065f0:	683a      	ldr	r2, [r7, #0]
 80065f2:	b2d2      	uxtb	r2, r2
 80065f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065f6:	4b63      	ldr	r3, [pc, #396]	@ (8006784 <HAL_RCC_ClockConfig+0x1b8>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0307 	and.w	r3, r3, #7
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	429a      	cmp	r2, r3
 8006602:	d001      	beq.n	8006608 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006604:	2301      	movs	r3, #1
 8006606:	e0b8      	b.n	800677a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d020      	beq.n	8006656 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0304 	and.w	r3, r3, #4
 800661c:	2b00      	cmp	r3, #0
 800661e:	d005      	beq.n	800662c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006620:	4b59      	ldr	r3, [pc, #356]	@ (8006788 <HAL_RCC_ClockConfig+0x1bc>)
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	4a58      	ldr	r2, [pc, #352]	@ (8006788 <HAL_RCC_ClockConfig+0x1bc>)
 8006626:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800662a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0308 	and.w	r3, r3, #8
 8006634:	2b00      	cmp	r3, #0
 8006636:	d005      	beq.n	8006644 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006638:	4b53      	ldr	r3, [pc, #332]	@ (8006788 <HAL_RCC_ClockConfig+0x1bc>)
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	4a52      	ldr	r2, [pc, #328]	@ (8006788 <HAL_RCC_ClockConfig+0x1bc>)
 800663e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006642:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006644:	4b50      	ldr	r3, [pc, #320]	@ (8006788 <HAL_RCC_ClockConfig+0x1bc>)
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	689b      	ldr	r3, [r3, #8]
 8006650:	494d      	ldr	r1, [pc, #308]	@ (8006788 <HAL_RCC_ClockConfig+0x1bc>)
 8006652:	4313      	orrs	r3, r2
 8006654:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b00      	cmp	r3, #0
 8006660:	d044      	beq.n	80066ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d107      	bne.n	800667a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800666a:	4b47      	ldr	r3, [pc, #284]	@ (8006788 <HAL_RCC_ClockConfig+0x1bc>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d119      	bne.n	80066aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e07f      	b.n	800677a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	2b02      	cmp	r3, #2
 8006680:	d003      	beq.n	800668a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006686:	2b03      	cmp	r3, #3
 8006688:	d107      	bne.n	800669a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800668a:	4b3f      	ldr	r3, [pc, #252]	@ (8006788 <HAL_RCC_ClockConfig+0x1bc>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d109      	bne.n	80066aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e06f      	b.n	800677a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800669a:	4b3b      	ldr	r3, [pc, #236]	@ (8006788 <HAL_RCC_ClockConfig+0x1bc>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e067      	b.n	800677a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066aa:	4b37      	ldr	r3, [pc, #220]	@ (8006788 <HAL_RCC_ClockConfig+0x1bc>)
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f023 0203 	bic.w	r2, r3, #3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	4934      	ldr	r1, [pc, #208]	@ (8006788 <HAL_RCC_ClockConfig+0x1bc>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066bc:	f7fb fe2a 	bl	8002314 <HAL_GetTick>
 80066c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066c2:	e00a      	b.n	80066da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066c4:	f7fb fe26 	bl	8002314 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d901      	bls.n	80066da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e04f      	b.n	800677a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066da:	4b2b      	ldr	r3, [pc, #172]	@ (8006788 <HAL_RCC_ClockConfig+0x1bc>)
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f003 020c 	and.w	r2, r3, #12
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d1eb      	bne.n	80066c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066ec:	4b25      	ldr	r3, [pc, #148]	@ (8006784 <HAL_RCC_ClockConfig+0x1b8>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0307 	and.w	r3, r3, #7
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d20c      	bcs.n	8006714 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066fa:	4b22      	ldr	r3, [pc, #136]	@ (8006784 <HAL_RCC_ClockConfig+0x1b8>)
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	b2d2      	uxtb	r2, r2
 8006700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006702:	4b20      	ldr	r3, [pc, #128]	@ (8006784 <HAL_RCC_ClockConfig+0x1b8>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	429a      	cmp	r2, r3
 800670e:	d001      	beq.n	8006714 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e032      	b.n	800677a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0304 	and.w	r3, r3, #4
 800671c:	2b00      	cmp	r3, #0
 800671e:	d008      	beq.n	8006732 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006720:	4b19      	ldr	r3, [pc, #100]	@ (8006788 <HAL_RCC_ClockConfig+0x1bc>)
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	4916      	ldr	r1, [pc, #88]	@ (8006788 <HAL_RCC_ClockConfig+0x1bc>)
 800672e:	4313      	orrs	r3, r2
 8006730:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f003 0308 	and.w	r3, r3, #8
 800673a:	2b00      	cmp	r3, #0
 800673c:	d009      	beq.n	8006752 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800673e:	4b12      	ldr	r3, [pc, #72]	@ (8006788 <HAL_RCC_ClockConfig+0x1bc>)
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	00db      	lsls	r3, r3, #3
 800674c:	490e      	ldr	r1, [pc, #56]	@ (8006788 <HAL_RCC_ClockConfig+0x1bc>)
 800674e:	4313      	orrs	r3, r2
 8006750:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006752:	f000 f821 	bl	8006798 <HAL_RCC_GetSysClockFreq>
 8006756:	4602      	mov	r2, r0
 8006758:	4b0b      	ldr	r3, [pc, #44]	@ (8006788 <HAL_RCC_ClockConfig+0x1bc>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	091b      	lsrs	r3, r3, #4
 800675e:	f003 030f 	and.w	r3, r3, #15
 8006762:	490a      	ldr	r1, [pc, #40]	@ (800678c <HAL_RCC_ClockConfig+0x1c0>)
 8006764:	5ccb      	ldrb	r3, [r1, r3]
 8006766:	fa22 f303 	lsr.w	r3, r2, r3
 800676a:	4a09      	ldr	r2, [pc, #36]	@ (8006790 <HAL_RCC_ClockConfig+0x1c4>)
 800676c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800676e:	4b09      	ldr	r3, [pc, #36]	@ (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4618      	mov	r0, r3
 8006774:	f7fb fd8a 	bl	800228c <HAL_InitTick>

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	40023c00 	.word	0x40023c00
 8006788:	40023800 	.word	0x40023800
 800678c:	0800af00 	.word	0x0800af00
 8006790:	20000000 	.word	0x20000000
 8006794:	20000004 	.word	0x20000004

08006798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800679c:	b094      	sub	sp, #80	@ 0x50
 800679e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80067a0:	2300      	movs	r3, #0
 80067a2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80067ac:	2300      	movs	r3, #0
 80067ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067b0:	4b79      	ldr	r3, [pc, #484]	@ (8006998 <HAL_RCC_GetSysClockFreq+0x200>)
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	f003 030c 	and.w	r3, r3, #12
 80067b8:	2b08      	cmp	r3, #8
 80067ba:	d00d      	beq.n	80067d8 <HAL_RCC_GetSysClockFreq+0x40>
 80067bc:	2b08      	cmp	r3, #8
 80067be:	f200 80e1 	bhi.w	8006984 <HAL_RCC_GetSysClockFreq+0x1ec>
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d002      	beq.n	80067cc <HAL_RCC_GetSysClockFreq+0x34>
 80067c6:	2b04      	cmp	r3, #4
 80067c8:	d003      	beq.n	80067d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80067ca:	e0db      	b.n	8006984 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067cc:	4b73      	ldr	r3, [pc, #460]	@ (800699c <HAL_RCC_GetSysClockFreq+0x204>)
 80067ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067d0:	e0db      	b.n	800698a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067d2:	4b73      	ldr	r3, [pc, #460]	@ (80069a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80067d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80067d6:	e0d8      	b.n	800698a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067d8:	4b6f      	ldr	r3, [pc, #444]	@ (8006998 <HAL_RCC_GetSysClockFreq+0x200>)
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067e0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067e2:	4b6d      	ldr	r3, [pc, #436]	@ (8006998 <HAL_RCC_GetSysClockFreq+0x200>)
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d063      	beq.n	80068b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067ee:	4b6a      	ldr	r3, [pc, #424]	@ (8006998 <HAL_RCC_GetSysClockFreq+0x200>)
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	099b      	lsrs	r3, r3, #6
 80067f4:	2200      	movs	r2, #0
 80067f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80067fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006800:	633b      	str	r3, [r7, #48]	@ 0x30
 8006802:	2300      	movs	r3, #0
 8006804:	637b      	str	r3, [r7, #52]	@ 0x34
 8006806:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800680a:	4622      	mov	r2, r4
 800680c:	462b      	mov	r3, r5
 800680e:	f04f 0000 	mov.w	r0, #0
 8006812:	f04f 0100 	mov.w	r1, #0
 8006816:	0159      	lsls	r1, r3, #5
 8006818:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800681c:	0150      	lsls	r0, r2, #5
 800681e:	4602      	mov	r2, r0
 8006820:	460b      	mov	r3, r1
 8006822:	4621      	mov	r1, r4
 8006824:	1a51      	subs	r1, r2, r1
 8006826:	6139      	str	r1, [r7, #16]
 8006828:	4629      	mov	r1, r5
 800682a:	eb63 0301 	sbc.w	r3, r3, r1
 800682e:	617b      	str	r3, [r7, #20]
 8006830:	f04f 0200 	mov.w	r2, #0
 8006834:	f04f 0300 	mov.w	r3, #0
 8006838:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800683c:	4659      	mov	r1, fp
 800683e:	018b      	lsls	r3, r1, #6
 8006840:	4651      	mov	r1, sl
 8006842:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006846:	4651      	mov	r1, sl
 8006848:	018a      	lsls	r2, r1, #6
 800684a:	4651      	mov	r1, sl
 800684c:	ebb2 0801 	subs.w	r8, r2, r1
 8006850:	4659      	mov	r1, fp
 8006852:	eb63 0901 	sbc.w	r9, r3, r1
 8006856:	f04f 0200 	mov.w	r2, #0
 800685a:	f04f 0300 	mov.w	r3, #0
 800685e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006862:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006866:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800686a:	4690      	mov	r8, r2
 800686c:	4699      	mov	r9, r3
 800686e:	4623      	mov	r3, r4
 8006870:	eb18 0303 	adds.w	r3, r8, r3
 8006874:	60bb      	str	r3, [r7, #8]
 8006876:	462b      	mov	r3, r5
 8006878:	eb49 0303 	adc.w	r3, r9, r3
 800687c:	60fb      	str	r3, [r7, #12]
 800687e:	f04f 0200 	mov.w	r2, #0
 8006882:	f04f 0300 	mov.w	r3, #0
 8006886:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800688a:	4629      	mov	r1, r5
 800688c:	024b      	lsls	r3, r1, #9
 800688e:	4621      	mov	r1, r4
 8006890:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006894:	4621      	mov	r1, r4
 8006896:	024a      	lsls	r2, r1, #9
 8006898:	4610      	mov	r0, r2
 800689a:	4619      	mov	r1, r3
 800689c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800689e:	2200      	movs	r2, #0
 80068a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80068a8:	f7fa f97e 	bl	8000ba8 <__aeabi_uldivmod>
 80068ac:	4602      	mov	r2, r0
 80068ae:	460b      	mov	r3, r1
 80068b0:	4613      	mov	r3, r2
 80068b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068b4:	e058      	b.n	8006968 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068b6:	4b38      	ldr	r3, [pc, #224]	@ (8006998 <HAL_RCC_GetSysClockFreq+0x200>)
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	099b      	lsrs	r3, r3, #6
 80068bc:	2200      	movs	r2, #0
 80068be:	4618      	mov	r0, r3
 80068c0:	4611      	mov	r1, r2
 80068c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80068c6:	623b      	str	r3, [r7, #32]
 80068c8:	2300      	movs	r3, #0
 80068ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80068cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80068d0:	4642      	mov	r2, r8
 80068d2:	464b      	mov	r3, r9
 80068d4:	f04f 0000 	mov.w	r0, #0
 80068d8:	f04f 0100 	mov.w	r1, #0
 80068dc:	0159      	lsls	r1, r3, #5
 80068de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068e2:	0150      	lsls	r0, r2, #5
 80068e4:	4602      	mov	r2, r0
 80068e6:	460b      	mov	r3, r1
 80068e8:	4641      	mov	r1, r8
 80068ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80068ee:	4649      	mov	r1, r9
 80068f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80068f4:	f04f 0200 	mov.w	r2, #0
 80068f8:	f04f 0300 	mov.w	r3, #0
 80068fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006900:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006904:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006908:	ebb2 040a 	subs.w	r4, r2, sl
 800690c:	eb63 050b 	sbc.w	r5, r3, fp
 8006910:	f04f 0200 	mov.w	r2, #0
 8006914:	f04f 0300 	mov.w	r3, #0
 8006918:	00eb      	lsls	r3, r5, #3
 800691a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800691e:	00e2      	lsls	r2, r4, #3
 8006920:	4614      	mov	r4, r2
 8006922:	461d      	mov	r5, r3
 8006924:	4643      	mov	r3, r8
 8006926:	18e3      	adds	r3, r4, r3
 8006928:	603b      	str	r3, [r7, #0]
 800692a:	464b      	mov	r3, r9
 800692c:	eb45 0303 	adc.w	r3, r5, r3
 8006930:	607b      	str	r3, [r7, #4]
 8006932:	f04f 0200 	mov.w	r2, #0
 8006936:	f04f 0300 	mov.w	r3, #0
 800693a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800693e:	4629      	mov	r1, r5
 8006940:	028b      	lsls	r3, r1, #10
 8006942:	4621      	mov	r1, r4
 8006944:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006948:	4621      	mov	r1, r4
 800694a:	028a      	lsls	r2, r1, #10
 800694c:	4610      	mov	r0, r2
 800694e:	4619      	mov	r1, r3
 8006950:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006952:	2200      	movs	r2, #0
 8006954:	61bb      	str	r3, [r7, #24]
 8006956:	61fa      	str	r2, [r7, #28]
 8006958:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800695c:	f7fa f924 	bl	8000ba8 <__aeabi_uldivmod>
 8006960:	4602      	mov	r2, r0
 8006962:	460b      	mov	r3, r1
 8006964:	4613      	mov	r3, r2
 8006966:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006968:	4b0b      	ldr	r3, [pc, #44]	@ (8006998 <HAL_RCC_GetSysClockFreq+0x200>)
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	0c1b      	lsrs	r3, r3, #16
 800696e:	f003 0303 	and.w	r3, r3, #3
 8006972:	3301      	adds	r3, #1
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006978:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800697a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800697c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006980:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006982:	e002      	b.n	800698a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006984:	4b05      	ldr	r3, [pc, #20]	@ (800699c <HAL_RCC_GetSysClockFreq+0x204>)
 8006986:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800698a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800698c:	4618      	mov	r0, r3
 800698e:	3750      	adds	r7, #80	@ 0x50
 8006990:	46bd      	mov	sp, r7
 8006992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006996:	bf00      	nop
 8006998:	40023800 	.word	0x40023800
 800699c:	00f42400 	.word	0x00f42400
 80069a0:	007a1200 	.word	0x007a1200

080069a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069a4:	b480      	push	{r7}
 80069a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069a8:	4b03      	ldr	r3, [pc, #12]	@ (80069b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80069aa:	681b      	ldr	r3, [r3, #0]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	20000000 	.word	0x20000000

080069bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80069c0:	f7ff fff0 	bl	80069a4 <HAL_RCC_GetHCLKFreq>
 80069c4:	4602      	mov	r2, r0
 80069c6:	4b05      	ldr	r3, [pc, #20]	@ (80069dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	0a9b      	lsrs	r3, r3, #10
 80069cc:	f003 0307 	and.w	r3, r3, #7
 80069d0:	4903      	ldr	r1, [pc, #12]	@ (80069e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069d2:	5ccb      	ldrb	r3, [r1, r3]
 80069d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069d8:	4618      	mov	r0, r3
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	40023800 	.word	0x40023800
 80069e0:	0800af10 	.word	0x0800af10

080069e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80069e8:	f7ff ffdc 	bl	80069a4 <HAL_RCC_GetHCLKFreq>
 80069ec:	4602      	mov	r2, r0
 80069ee:	4b05      	ldr	r3, [pc, #20]	@ (8006a04 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	0b5b      	lsrs	r3, r3, #13
 80069f4:	f003 0307 	and.w	r3, r3, #7
 80069f8:	4903      	ldr	r1, [pc, #12]	@ (8006a08 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069fa:	5ccb      	ldrb	r3, [r1, r3]
 80069fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	40023800 	.word	0x40023800
 8006a08:	0800af10 	.word	0x0800af10

08006a0c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d101      	bne.n	8006a1e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e041      	b.n	8006aa2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d106      	bne.n	8006a38 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f7fb fa20 	bl	8001e78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2202      	movs	r2, #2
 8006a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	3304      	adds	r3, #4
 8006a48:	4619      	mov	r1, r3
 8006a4a:	4610      	mov	r0, r2
 8006a4c:	f000 f9b8 	bl	8006dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3708      	adds	r7, #8
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
	...

08006aac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d109      	bne.n	8006ad0 <HAL_TIM_PWM_Start+0x24>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006ac2:	b2db      	uxtb	r3, r3
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	bf14      	ite	ne
 8006ac8:	2301      	movne	r3, #1
 8006aca:	2300      	moveq	r3, #0
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	e022      	b.n	8006b16 <HAL_TIM_PWM_Start+0x6a>
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	2b04      	cmp	r3, #4
 8006ad4:	d109      	bne.n	8006aea <HAL_TIM_PWM_Start+0x3e>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	bf14      	ite	ne
 8006ae2:	2301      	movne	r3, #1
 8006ae4:	2300      	moveq	r3, #0
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	e015      	b.n	8006b16 <HAL_TIM_PWM_Start+0x6a>
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	2b08      	cmp	r3, #8
 8006aee:	d109      	bne.n	8006b04 <HAL_TIM_PWM_Start+0x58>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	bf14      	ite	ne
 8006afc:	2301      	movne	r3, #1
 8006afe:	2300      	moveq	r3, #0
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	e008      	b.n	8006b16 <HAL_TIM_PWM_Start+0x6a>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	bf14      	ite	ne
 8006b10:	2301      	movne	r3, #1
 8006b12:	2300      	moveq	r3, #0
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d001      	beq.n	8006b1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e07c      	b.n	8006c18 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d104      	bne.n	8006b2e <HAL_TIM_PWM_Start+0x82>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b2c:	e013      	b.n	8006b56 <HAL_TIM_PWM_Start+0xaa>
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	2b04      	cmp	r3, #4
 8006b32:	d104      	bne.n	8006b3e <HAL_TIM_PWM_Start+0x92>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2202      	movs	r2, #2
 8006b38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b3c:	e00b      	b.n	8006b56 <HAL_TIM_PWM_Start+0xaa>
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	2b08      	cmp	r3, #8
 8006b42:	d104      	bne.n	8006b4e <HAL_TIM_PWM_Start+0xa2>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2202      	movs	r2, #2
 8006b48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006b4c:	e003      	b.n	8006b56 <HAL_TIM_PWM_Start+0xaa>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2202      	movs	r2, #2
 8006b52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f000 fb8a 	bl	8007278 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	4a2d      	ldr	r2, [pc, #180]	@ (8006c20 <HAL_TIM_PWM_Start+0x174>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d004      	beq.n	8006b78 <HAL_TIM_PWM_Start+0xcc>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a2c      	ldr	r2, [pc, #176]	@ (8006c24 <HAL_TIM_PWM_Start+0x178>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d101      	bne.n	8006b7c <HAL_TIM_PWM_Start+0xd0>
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e000      	b.n	8006b7e <HAL_TIM_PWM_Start+0xd2>
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d007      	beq.n	8006b92 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006b90:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a22      	ldr	r2, [pc, #136]	@ (8006c20 <HAL_TIM_PWM_Start+0x174>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d022      	beq.n	8006be2 <HAL_TIM_PWM_Start+0x136>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ba4:	d01d      	beq.n	8006be2 <HAL_TIM_PWM_Start+0x136>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a1f      	ldr	r2, [pc, #124]	@ (8006c28 <HAL_TIM_PWM_Start+0x17c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d018      	beq.n	8006be2 <HAL_TIM_PWM_Start+0x136>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8006c2c <HAL_TIM_PWM_Start+0x180>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d013      	beq.n	8006be2 <HAL_TIM_PWM_Start+0x136>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a1c      	ldr	r2, [pc, #112]	@ (8006c30 <HAL_TIM_PWM_Start+0x184>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d00e      	beq.n	8006be2 <HAL_TIM_PWM_Start+0x136>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a16      	ldr	r2, [pc, #88]	@ (8006c24 <HAL_TIM_PWM_Start+0x178>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d009      	beq.n	8006be2 <HAL_TIM_PWM_Start+0x136>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a18      	ldr	r2, [pc, #96]	@ (8006c34 <HAL_TIM_PWM_Start+0x188>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d004      	beq.n	8006be2 <HAL_TIM_PWM_Start+0x136>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a16      	ldr	r2, [pc, #88]	@ (8006c38 <HAL_TIM_PWM_Start+0x18c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d111      	bne.n	8006c06 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f003 0307 	and.w	r3, r3, #7
 8006bec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2b06      	cmp	r3, #6
 8006bf2:	d010      	beq.n	8006c16 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f042 0201 	orr.w	r2, r2, #1
 8006c02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c04:	e007      	b.n	8006c16 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f042 0201 	orr.w	r2, r2, #1
 8006c14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	40010000 	.word	0x40010000
 8006c24:	40010400 	.word	0x40010400
 8006c28:	40000400 	.word	0x40000400
 8006c2c:	40000800 	.word	0x40000800
 8006c30:	40000c00 	.word	0x40000c00
 8006c34:	40014000 	.word	0x40014000
 8006c38:	40001800 	.word	0x40001800

08006c3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b086      	sub	sp, #24
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d101      	bne.n	8006c5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c56:	2302      	movs	r3, #2
 8006c58:	e0ae      	b.n	8006db8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2b0c      	cmp	r3, #12
 8006c66:	f200 809f 	bhi.w	8006da8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c70:	08006ca5 	.word	0x08006ca5
 8006c74:	08006da9 	.word	0x08006da9
 8006c78:	08006da9 	.word	0x08006da9
 8006c7c:	08006da9 	.word	0x08006da9
 8006c80:	08006ce5 	.word	0x08006ce5
 8006c84:	08006da9 	.word	0x08006da9
 8006c88:	08006da9 	.word	0x08006da9
 8006c8c:	08006da9 	.word	0x08006da9
 8006c90:	08006d27 	.word	0x08006d27
 8006c94:	08006da9 	.word	0x08006da9
 8006c98:	08006da9 	.word	0x08006da9
 8006c9c:	08006da9 	.word	0x08006da9
 8006ca0:	08006d67 	.word	0x08006d67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	68b9      	ldr	r1, [r7, #8]
 8006caa:	4618      	mov	r0, r3
 8006cac:	f000 f934 	bl	8006f18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	699a      	ldr	r2, [r3, #24]
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f042 0208 	orr.w	r2, r2, #8
 8006cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699a      	ldr	r2, [r3, #24]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f022 0204 	bic.w	r2, r2, #4
 8006cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6999      	ldr	r1, [r3, #24]
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	691a      	ldr	r2, [r3, #16]
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	430a      	orrs	r2, r1
 8006ce0:	619a      	str	r2, [r3, #24]
      break;
 8006ce2:	e064      	b.n	8006dae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	68b9      	ldr	r1, [r7, #8]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f000 f984 	bl	8006ff8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	699a      	ldr	r2, [r3, #24]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699a      	ldr	r2, [r3, #24]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6999      	ldr	r1, [r3, #24]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	691b      	ldr	r3, [r3, #16]
 8006d1a:	021a      	lsls	r2, r3, #8
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	430a      	orrs	r2, r1
 8006d22:	619a      	str	r2, [r3, #24]
      break;
 8006d24:	e043      	b.n	8006dae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68b9      	ldr	r1, [r7, #8]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f000 f9d9 	bl	80070e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	69da      	ldr	r2, [r3, #28]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f042 0208 	orr.w	r2, r2, #8
 8006d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	69da      	ldr	r2, [r3, #28]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f022 0204 	bic.w	r2, r2, #4
 8006d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69d9      	ldr	r1, [r3, #28]
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	691a      	ldr	r2, [r3, #16]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	430a      	orrs	r2, r1
 8006d62:	61da      	str	r2, [r3, #28]
      break;
 8006d64:	e023      	b.n	8006dae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68b9      	ldr	r1, [r7, #8]
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f000 fa2d 	bl	80071cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	69da      	ldr	r2, [r3, #28]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	69da      	ldr	r2, [r3, #28]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	69d9      	ldr	r1, [r3, #28]
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	691b      	ldr	r3, [r3, #16]
 8006d9c:	021a      	lsls	r2, r3, #8
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	430a      	orrs	r2, r1
 8006da4:	61da      	str	r2, [r3, #28]
      break;
 8006da6:	e002      	b.n	8006dae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	75fb      	strb	r3, [r7, #23]
      break;
 8006dac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
 8006dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a46      	ldr	r2, [pc, #280]	@ (8006eec <TIM_Base_SetConfig+0x12c>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d013      	beq.n	8006e00 <TIM_Base_SetConfig+0x40>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006dde:	d00f      	beq.n	8006e00 <TIM_Base_SetConfig+0x40>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	4a43      	ldr	r2, [pc, #268]	@ (8006ef0 <TIM_Base_SetConfig+0x130>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d00b      	beq.n	8006e00 <TIM_Base_SetConfig+0x40>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	4a42      	ldr	r2, [pc, #264]	@ (8006ef4 <TIM_Base_SetConfig+0x134>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d007      	beq.n	8006e00 <TIM_Base_SetConfig+0x40>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a41      	ldr	r2, [pc, #260]	@ (8006ef8 <TIM_Base_SetConfig+0x138>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d003      	beq.n	8006e00 <TIM_Base_SetConfig+0x40>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a40      	ldr	r2, [pc, #256]	@ (8006efc <TIM_Base_SetConfig+0x13c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d108      	bne.n	8006e12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	68fa      	ldr	r2, [r7, #12]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	4a35      	ldr	r2, [pc, #212]	@ (8006eec <TIM_Base_SetConfig+0x12c>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d02b      	beq.n	8006e72 <TIM_Base_SetConfig+0xb2>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e20:	d027      	beq.n	8006e72 <TIM_Base_SetConfig+0xb2>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a32      	ldr	r2, [pc, #200]	@ (8006ef0 <TIM_Base_SetConfig+0x130>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d023      	beq.n	8006e72 <TIM_Base_SetConfig+0xb2>
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	4a31      	ldr	r2, [pc, #196]	@ (8006ef4 <TIM_Base_SetConfig+0x134>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d01f      	beq.n	8006e72 <TIM_Base_SetConfig+0xb2>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a30      	ldr	r2, [pc, #192]	@ (8006ef8 <TIM_Base_SetConfig+0x138>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d01b      	beq.n	8006e72 <TIM_Base_SetConfig+0xb2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a2f      	ldr	r2, [pc, #188]	@ (8006efc <TIM_Base_SetConfig+0x13c>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d017      	beq.n	8006e72 <TIM_Base_SetConfig+0xb2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a2e      	ldr	r2, [pc, #184]	@ (8006f00 <TIM_Base_SetConfig+0x140>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d013      	beq.n	8006e72 <TIM_Base_SetConfig+0xb2>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a2d      	ldr	r2, [pc, #180]	@ (8006f04 <TIM_Base_SetConfig+0x144>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d00f      	beq.n	8006e72 <TIM_Base_SetConfig+0xb2>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a2c      	ldr	r2, [pc, #176]	@ (8006f08 <TIM_Base_SetConfig+0x148>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d00b      	beq.n	8006e72 <TIM_Base_SetConfig+0xb2>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a2b      	ldr	r2, [pc, #172]	@ (8006f0c <TIM_Base_SetConfig+0x14c>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d007      	beq.n	8006e72 <TIM_Base_SetConfig+0xb2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a2a      	ldr	r2, [pc, #168]	@ (8006f10 <TIM_Base_SetConfig+0x150>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d003      	beq.n	8006e72 <TIM_Base_SetConfig+0xb2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a29      	ldr	r2, [pc, #164]	@ (8006f14 <TIM_Base_SetConfig+0x154>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d108      	bne.n	8006e84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	68db      	ldr	r3, [r3, #12]
 8006e7e:	68fa      	ldr	r2, [r7, #12]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	695b      	ldr	r3, [r3, #20]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	689a      	ldr	r2, [r3, #8]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a10      	ldr	r2, [pc, #64]	@ (8006eec <TIM_Base_SetConfig+0x12c>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d003      	beq.n	8006eb8 <TIM_Base_SetConfig+0xf8>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a12      	ldr	r2, [pc, #72]	@ (8006efc <TIM_Base_SetConfig+0x13c>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d103      	bne.n	8006ec0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	691a      	ldr	r2, [r3, #16]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	691b      	ldr	r3, [r3, #16]
 8006eca:	f003 0301 	and.w	r3, r3, #1
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d105      	bne.n	8006ede <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	f023 0201 	bic.w	r2, r3, #1
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	611a      	str	r2, [r3, #16]
  }
}
 8006ede:	bf00      	nop
 8006ee0:	3714      	adds	r7, #20
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	40010000 	.word	0x40010000
 8006ef0:	40000400 	.word	0x40000400
 8006ef4:	40000800 	.word	0x40000800
 8006ef8:	40000c00 	.word	0x40000c00
 8006efc:	40010400 	.word	0x40010400
 8006f00:	40014000 	.word	0x40014000
 8006f04:	40014400 	.word	0x40014400
 8006f08:	40014800 	.word	0x40014800
 8006f0c:	40001800 	.word	0x40001800
 8006f10:	40001c00 	.word	0x40001c00
 8006f14:	40002000 	.word	0x40002000

08006f18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b087      	sub	sp, #28
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a1b      	ldr	r3, [r3, #32]
 8006f26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a1b      	ldr	r3, [r3, #32]
 8006f2c:	f023 0201 	bic.w	r2, r3, #1
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	699b      	ldr	r3, [r3, #24]
 8006f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 0303 	bic.w	r3, r3, #3
 8006f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f023 0302 	bic.w	r3, r3, #2
 8006f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a20      	ldr	r2, [pc, #128]	@ (8006ff0 <TIM_OC1_SetConfig+0xd8>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d003      	beq.n	8006f7c <TIM_OC1_SetConfig+0x64>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a1f      	ldr	r2, [pc, #124]	@ (8006ff4 <TIM_OC1_SetConfig+0xdc>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d10c      	bne.n	8006f96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	f023 0308 	bic.w	r3, r3, #8
 8006f82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	68db      	ldr	r3, [r3, #12]
 8006f88:	697a      	ldr	r2, [r7, #20]
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f023 0304 	bic.w	r3, r3, #4
 8006f94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a15      	ldr	r2, [pc, #84]	@ (8006ff0 <TIM_OC1_SetConfig+0xd8>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d003      	beq.n	8006fa6 <TIM_OC1_SetConfig+0x8e>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a14      	ldr	r2, [pc, #80]	@ (8006ff4 <TIM_OC1_SetConfig+0xdc>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d111      	bne.n	8006fca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006fac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006fb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	693a      	ldr	r2, [r7, #16]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	693a      	ldr	r2, [r7, #16]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	621a      	str	r2, [r3, #32]
}
 8006fe4:	bf00      	nop
 8006fe6:	371c      	adds	r7, #28
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	40010000 	.word	0x40010000
 8006ff4:	40010400 	.word	0x40010400

08006ff8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a1b      	ldr	r3, [r3, #32]
 800700c:	f023 0210 	bic.w	r2, r3, #16
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	699b      	ldr	r3, [r3, #24]
 800701e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800702e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	021b      	lsls	r3, r3, #8
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	4313      	orrs	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	f023 0320 	bic.w	r3, r3, #32
 8007042:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	011b      	lsls	r3, r3, #4
 800704a:	697a      	ldr	r2, [r7, #20]
 800704c:	4313      	orrs	r3, r2
 800704e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a22      	ldr	r2, [pc, #136]	@ (80070dc <TIM_OC2_SetConfig+0xe4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d003      	beq.n	8007060 <TIM_OC2_SetConfig+0x68>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a21      	ldr	r2, [pc, #132]	@ (80070e0 <TIM_OC2_SetConfig+0xe8>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d10d      	bne.n	800707c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007066:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	011b      	lsls	r3, r3, #4
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	4313      	orrs	r3, r2
 8007072:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800707a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a17      	ldr	r2, [pc, #92]	@ (80070dc <TIM_OC2_SetConfig+0xe4>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d003      	beq.n	800708c <TIM_OC2_SetConfig+0x94>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a16      	ldr	r2, [pc, #88]	@ (80070e0 <TIM_OC2_SetConfig+0xe8>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d113      	bne.n	80070b4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800708c:	693b      	ldr	r3, [r7, #16]
 800708e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007092:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800709a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	695b      	ldr	r3, [r3, #20]
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	4313      	orrs	r3, r2
 80070a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	693a      	ldr	r2, [r7, #16]
 80070b0:	4313      	orrs	r3, r2
 80070b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	685a      	ldr	r2, [r3, #4]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	621a      	str	r2, [r3, #32]
}
 80070ce:	bf00      	nop
 80070d0:	371c      	adds	r7, #28
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
 80070da:	bf00      	nop
 80070dc:	40010000 	.word	0x40010000
 80070e0:	40010400 	.word	0x40010400

080070e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b087      	sub	sp, #28
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a1b      	ldr	r3, [r3, #32]
 80070f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f023 0303 	bic.w	r3, r3, #3
 800711a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	4313      	orrs	r3, r2
 8007124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800712c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	689b      	ldr	r3, [r3, #8]
 8007132:	021b      	lsls	r3, r3, #8
 8007134:	697a      	ldr	r2, [r7, #20]
 8007136:	4313      	orrs	r3, r2
 8007138:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a21      	ldr	r2, [pc, #132]	@ (80071c4 <TIM_OC3_SetConfig+0xe0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d003      	beq.n	800714a <TIM_OC3_SetConfig+0x66>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a20      	ldr	r2, [pc, #128]	@ (80071c8 <TIM_OC3_SetConfig+0xe4>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d10d      	bne.n	8007166 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007150:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	68db      	ldr	r3, [r3, #12]
 8007156:	021b      	lsls	r3, r3, #8
 8007158:	697a      	ldr	r2, [r7, #20]
 800715a:	4313      	orrs	r3, r2
 800715c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a16      	ldr	r2, [pc, #88]	@ (80071c4 <TIM_OC3_SetConfig+0xe0>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d003      	beq.n	8007176 <TIM_OC3_SetConfig+0x92>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a15      	ldr	r2, [pc, #84]	@ (80071c8 <TIM_OC3_SetConfig+0xe4>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d113      	bne.n	800719e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800717c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007184:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	695b      	ldr	r3, [r3, #20]
 800718a:	011b      	lsls	r3, r3, #4
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	4313      	orrs	r3, r2
 8007190:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	699b      	ldr	r3, [r3, #24]
 8007196:	011b      	lsls	r3, r3, #4
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	4313      	orrs	r3, r2
 800719c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	693a      	ldr	r2, [r7, #16]
 80071a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	68fa      	ldr	r2, [r7, #12]
 80071a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	685a      	ldr	r2, [r3, #4]
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	697a      	ldr	r2, [r7, #20]
 80071b6:	621a      	str	r2, [r3, #32]
}
 80071b8:	bf00      	nop
 80071ba:	371c      	adds	r7, #28
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr
 80071c4:	40010000 	.word	0x40010000
 80071c8:	40010400 	.word	0x40010400

080071cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a1b      	ldr	r3, [r3, #32]
 80071e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	69db      	ldr	r3, [r3, #28]
 80071f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	021b      	lsls	r3, r3, #8
 800720a:	68fa      	ldr	r2, [r7, #12]
 800720c:	4313      	orrs	r3, r2
 800720e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007210:	693b      	ldr	r3, [r7, #16]
 8007212:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007216:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	031b      	lsls	r3, r3, #12
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	4313      	orrs	r3, r2
 8007222:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a12      	ldr	r2, [pc, #72]	@ (8007270 <TIM_OC4_SetConfig+0xa4>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d003      	beq.n	8007234 <TIM_OC4_SetConfig+0x68>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	4a11      	ldr	r2, [pc, #68]	@ (8007274 <TIM_OC4_SetConfig+0xa8>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d109      	bne.n	8007248 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800723a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	019b      	lsls	r3, r3, #6
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	4313      	orrs	r3, r2
 8007246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	697a      	ldr	r2, [r7, #20]
 800724c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	685a      	ldr	r2, [r3, #4]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	693a      	ldr	r2, [r7, #16]
 8007260:	621a      	str	r2, [r3, #32]
}
 8007262:	bf00      	nop
 8007264:	371c      	adds	r7, #28
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	40010000 	.word	0x40010000
 8007274:	40010400 	.word	0x40010400

08007278 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	60f8      	str	r0, [r7, #12]
 8007280:	60b9      	str	r1, [r7, #8]
 8007282:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f003 031f 	and.w	r3, r3, #31
 800728a:	2201      	movs	r2, #1
 800728c:	fa02 f303 	lsl.w	r3, r2, r3
 8007290:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6a1a      	ldr	r2, [r3, #32]
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	43db      	mvns	r3, r3
 800729a:	401a      	ands	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6a1a      	ldr	r2, [r3, #32]
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	f003 031f 	and.w	r3, r3, #31
 80072aa:	6879      	ldr	r1, [r7, #4]
 80072ac:	fa01 f303 	lsl.w	r3, r1, r3
 80072b0:	431a      	orrs	r2, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	621a      	str	r2, [r3, #32]
}
 80072b6:	bf00      	nop
 80072b8:	371c      	adds	r7, #28
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr
	...

080072c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d101      	bne.n	80072dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80072d8:	2302      	movs	r3, #2
 80072da:	e05a      	b.n	8007392 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2201      	movs	r2, #1
 80072e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2202      	movs	r2, #2
 80072e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007302:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	4313      	orrs	r3, r2
 800730c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a21      	ldr	r2, [pc, #132]	@ (80073a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d022      	beq.n	8007366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007328:	d01d      	beq.n	8007366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a1d      	ldr	r2, [pc, #116]	@ (80073a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d018      	beq.n	8007366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a1b      	ldr	r2, [pc, #108]	@ (80073a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d013      	beq.n	8007366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a1a      	ldr	r2, [pc, #104]	@ (80073ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d00e      	beq.n	8007366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a18      	ldr	r2, [pc, #96]	@ (80073b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d009      	beq.n	8007366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a17      	ldr	r2, [pc, #92]	@ (80073b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d004      	beq.n	8007366 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a15      	ldr	r2, [pc, #84]	@ (80073b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d10c      	bne.n	8007380 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800736c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	68ba      	ldr	r2, [r7, #8]
 8007374:	4313      	orrs	r3, r2
 8007376:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2200      	movs	r2, #0
 800738c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007390:	2300      	movs	r3, #0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3714      	adds	r7, #20
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop
 80073a0:	40010000 	.word	0x40010000
 80073a4:	40000400 	.word	0x40000400
 80073a8:	40000800 	.word	0x40000800
 80073ac:	40000c00 	.word	0x40000c00
 80073b0:	40010400 	.word	0x40010400
 80073b4:	40014000 	.word	0x40014000
 80073b8:	40001800 	.word	0x40001800

080073bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073ca:	2301      	movs	r3, #1
 80073cc:	e042      	b.n	8007454 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d106      	bne.n	80073e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7fa fe44 	bl	8002070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2224      	movs	r2, #36	@ 0x24
 80073ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68da      	ldr	r2, [r3, #12]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80073fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f000 f973 	bl	80076ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	691a      	ldr	r2, [r3, #16]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007414:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	695a      	ldr	r2, [r3, #20]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007424:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	68da      	ldr	r2, [r3, #12]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007434:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2220      	movs	r2, #32
 8007440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2220      	movs	r2, #32
 8007448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007452:	2300      	movs	r3, #0
}
 8007454:	4618      	mov	r0, r3
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b08a      	sub	sp, #40	@ 0x28
 8007460:	af02      	add	r7, sp, #8
 8007462:	60f8      	str	r0, [r7, #12]
 8007464:	60b9      	str	r1, [r7, #8]
 8007466:	603b      	str	r3, [r7, #0]
 8007468:	4613      	mov	r3, r2
 800746a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800746c:	2300      	movs	r3, #0
 800746e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b20      	cmp	r3, #32
 800747a:	d175      	bne.n	8007568 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d002      	beq.n	8007488 <HAL_UART_Transmit+0x2c>
 8007482:	88fb      	ldrh	r3, [r7, #6]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d101      	bne.n	800748c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007488:	2301      	movs	r3, #1
 800748a:	e06e      	b.n	800756a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2200      	movs	r2, #0
 8007490:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	2221      	movs	r2, #33	@ 0x21
 8007496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800749a:	f7fa ff3b 	bl	8002314 <HAL_GetTick>
 800749e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	88fa      	ldrh	r2, [r7, #6]
 80074a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	88fa      	ldrh	r2, [r7, #6]
 80074aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074b4:	d108      	bne.n	80074c8 <HAL_UART_Transmit+0x6c>
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d104      	bne.n	80074c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80074be:	2300      	movs	r3, #0
 80074c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	61bb      	str	r3, [r7, #24]
 80074c6:	e003      	b.n	80074d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074cc:	2300      	movs	r3, #0
 80074ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074d0:	e02e      	b.n	8007530 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	9300      	str	r3, [sp, #0]
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	2200      	movs	r2, #0
 80074da:	2180      	movs	r1, #128	@ 0x80
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f000 f848 	bl	8007572 <UART_WaitOnFlagUntilTimeout>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d005      	beq.n	80074f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2220      	movs	r2, #32
 80074ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e03a      	b.n	800756a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d10b      	bne.n	8007512 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	881b      	ldrh	r3, [r3, #0]
 80074fe:	461a      	mov	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007508:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	3302      	adds	r3, #2
 800750e:	61bb      	str	r3, [r7, #24]
 8007510:	e007      	b.n	8007522 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	781a      	ldrb	r2, [r3, #0]
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	3301      	adds	r3, #1
 8007520:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007526:	b29b      	uxth	r3, r3
 8007528:	3b01      	subs	r3, #1
 800752a:	b29a      	uxth	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007534:	b29b      	uxth	r3, r3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d1cb      	bne.n	80074d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	2200      	movs	r2, #0
 8007542:	2140      	movs	r1, #64	@ 0x40
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 f814 	bl	8007572 <UART_WaitOnFlagUntilTimeout>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d005      	beq.n	800755c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2220      	movs	r2, #32
 8007554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e006      	b.n	800756a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2220      	movs	r2, #32
 8007560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007564:	2300      	movs	r3, #0
 8007566:	e000      	b.n	800756a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007568:	2302      	movs	r3, #2
  }
}
 800756a:	4618      	mov	r0, r3
 800756c:	3720      	adds	r7, #32
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b086      	sub	sp, #24
 8007576:	af00      	add	r7, sp, #0
 8007578:	60f8      	str	r0, [r7, #12]
 800757a:	60b9      	str	r1, [r7, #8]
 800757c:	603b      	str	r3, [r7, #0]
 800757e:	4613      	mov	r3, r2
 8007580:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007582:	e03b      	b.n	80075fc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800758a:	d037      	beq.n	80075fc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800758c:	f7fa fec2 	bl	8002314 <HAL_GetTick>
 8007590:	4602      	mov	r2, r0
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	6a3a      	ldr	r2, [r7, #32]
 8007598:	429a      	cmp	r2, r3
 800759a:	d302      	bcc.n	80075a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800759c:	6a3b      	ldr	r3, [r7, #32]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e03a      	b.n	800761c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	f003 0304 	and.w	r3, r3, #4
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d023      	beq.n	80075fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	2b80      	cmp	r3, #128	@ 0x80
 80075b8:	d020      	beq.n	80075fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	2b40      	cmp	r3, #64	@ 0x40
 80075be:	d01d      	beq.n	80075fc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0308 	and.w	r3, r3, #8
 80075ca:	2b08      	cmp	r3, #8
 80075cc:	d116      	bne.n	80075fc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80075ce:	2300      	movs	r3, #0
 80075d0:	617b      	str	r3, [r7, #20]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	617b      	str	r3, [r7, #20]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	685b      	ldr	r3, [r3, #4]
 80075e0:	617b      	str	r3, [r7, #20]
 80075e2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 f81d 	bl	8007624 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2208      	movs	r2, #8
 80075ee:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	e00f      	b.n	800761c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	4013      	ands	r3, r2
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	429a      	cmp	r2, r3
 800760a:	bf0c      	ite	eq
 800760c:	2301      	moveq	r3, #1
 800760e:	2300      	movne	r3, #0
 8007610:	b2db      	uxtb	r3, r3
 8007612:	461a      	mov	r2, r3
 8007614:	79fb      	ldrb	r3, [r7, #7]
 8007616:	429a      	cmp	r2, r3
 8007618:	d0b4      	beq.n	8007584 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3718      	adds	r7, #24
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007624:	b480      	push	{r7}
 8007626:	b095      	sub	sp, #84	@ 0x54
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	330c      	adds	r3, #12
 8007632:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007636:	e853 3f00 	ldrex	r3, [r3]
 800763a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800763c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800763e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007642:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	330c      	adds	r3, #12
 800764a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800764c:	643a      	str	r2, [r7, #64]	@ 0x40
 800764e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007652:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007654:	e841 2300 	strex	r3, r2, [r1]
 8007658:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800765a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e5      	bne.n	800762c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	3314      	adds	r3, #20
 8007666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	e853 3f00 	ldrex	r3, [r3]
 800766e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	f023 0301 	bic.w	r3, r3, #1
 8007676:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	3314      	adds	r3, #20
 800767e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007680:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007682:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007684:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007686:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007688:	e841 2300 	strex	r3, r2, [r1]
 800768c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800768e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007690:	2b00      	cmp	r3, #0
 8007692:	d1e5      	bne.n	8007660 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007698:	2b01      	cmp	r3, #1
 800769a:	d119      	bne.n	80076d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	330c      	adds	r3, #12
 80076a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	e853 3f00 	ldrex	r3, [r3]
 80076aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	f023 0310 	bic.w	r3, r3, #16
 80076b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	330c      	adds	r3, #12
 80076ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076bc:	61ba      	str	r2, [r7, #24]
 80076be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c0:	6979      	ldr	r1, [r7, #20]
 80076c2:	69ba      	ldr	r2, [r7, #24]
 80076c4:	e841 2300 	strex	r3, r2, [r1]
 80076c8:	613b      	str	r3, [r7, #16]
   return(result);
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1e5      	bne.n	800769c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2220      	movs	r2, #32
 80076d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2200      	movs	r2, #0
 80076dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80076de:	bf00      	nop
 80076e0:	3754      	adds	r7, #84	@ 0x54
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
	...

080076ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076f0:	b0c0      	sub	sp, #256	@ 0x100
 80076f2:	af00      	add	r7, sp, #0
 80076f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80076f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007708:	68d9      	ldr	r1, [r3, #12]
 800770a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	ea40 0301 	orr.w	r3, r0, r1
 8007714:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800771a:	689a      	ldr	r2, [r3, #8]
 800771c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	431a      	orrs	r2, r3
 8007724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007728:	695b      	ldr	r3, [r3, #20]
 800772a:	431a      	orrs	r2, r3
 800772c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007730:	69db      	ldr	r3, [r3, #28]
 8007732:	4313      	orrs	r3, r2
 8007734:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007744:	f021 010c 	bic.w	r1, r1, #12
 8007748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007752:	430b      	orrs	r3, r1
 8007754:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	695b      	ldr	r3, [r3, #20]
 800775e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007766:	6999      	ldr	r1, [r3, #24]
 8007768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800776c:	681a      	ldr	r2, [r3, #0]
 800776e:	ea40 0301 	orr.w	r3, r0, r1
 8007772:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	4b8f      	ldr	r3, [pc, #572]	@ (80079b8 <UART_SetConfig+0x2cc>)
 800777c:	429a      	cmp	r2, r3
 800777e:	d005      	beq.n	800778c <UART_SetConfig+0xa0>
 8007780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	4b8d      	ldr	r3, [pc, #564]	@ (80079bc <UART_SetConfig+0x2d0>)
 8007788:	429a      	cmp	r2, r3
 800778a:	d104      	bne.n	8007796 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800778c:	f7ff f92a 	bl	80069e4 <HAL_RCC_GetPCLK2Freq>
 8007790:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007794:	e003      	b.n	800779e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007796:	f7ff f911 	bl	80069bc <HAL_RCC_GetPCLK1Freq>
 800779a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800779e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077a2:	69db      	ldr	r3, [r3, #28]
 80077a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077a8:	f040 810c 	bne.w	80079c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80077b0:	2200      	movs	r2, #0
 80077b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80077b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80077ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80077be:	4622      	mov	r2, r4
 80077c0:	462b      	mov	r3, r5
 80077c2:	1891      	adds	r1, r2, r2
 80077c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80077c6:	415b      	adcs	r3, r3
 80077c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80077ce:	4621      	mov	r1, r4
 80077d0:	eb12 0801 	adds.w	r8, r2, r1
 80077d4:	4629      	mov	r1, r5
 80077d6:	eb43 0901 	adc.w	r9, r3, r1
 80077da:	f04f 0200 	mov.w	r2, #0
 80077de:	f04f 0300 	mov.w	r3, #0
 80077e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077ee:	4690      	mov	r8, r2
 80077f0:	4699      	mov	r9, r3
 80077f2:	4623      	mov	r3, r4
 80077f4:	eb18 0303 	adds.w	r3, r8, r3
 80077f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80077fc:	462b      	mov	r3, r5
 80077fe:	eb49 0303 	adc.w	r3, r9, r3
 8007802:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007812:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007816:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800781a:	460b      	mov	r3, r1
 800781c:	18db      	adds	r3, r3, r3
 800781e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007820:	4613      	mov	r3, r2
 8007822:	eb42 0303 	adc.w	r3, r2, r3
 8007826:	657b      	str	r3, [r7, #84]	@ 0x54
 8007828:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800782c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007830:	f7f9 f9ba 	bl	8000ba8 <__aeabi_uldivmod>
 8007834:	4602      	mov	r2, r0
 8007836:	460b      	mov	r3, r1
 8007838:	4b61      	ldr	r3, [pc, #388]	@ (80079c0 <UART_SetConfig+0x2d4>)
 800783a:	fba3 2302 	umull	r2, r3, r3, r2
 800783e:	095b      	lsrs	r3, r3, #5
 8007840:	011c      	lsls	r4, r3, #4
 8007842:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007846:	2200      	movs	r2, #0
 8007848:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800784c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007850:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007854:	4642      	mov	r2, r8
 8007856:	464b      	mov	r3, r9
 8007858:	1891      	adds	r1, r2, r2
 800785a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800785c:	415b      	adcs	r3, r3
 800785e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007860:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007864:	4641      	mov	r1, r8
 8007866:	eb12 0a01 	adds.w	sl, r2, r1
 800786a:	4649      	mov	r1, r9
 800786c:	eb43 0b01 	adc.w	fp, r3, r1
 8007870:	f04f 0200 	mov.w	r2, #0
 8007874:	f04f 0300 	mov.w	r3, #0
 8007878:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800787c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007880:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007884:	4692      	mov	sl, r2
 8007886:	469b      	mov	fp, r3
 8007888:	4643      	mov	r3, r8
 800788a:	eb1a 0303 	adds.w	r3, sl, r3
 800788e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007892:	464b      	mov	r3, r9
 8007894:	eb4b 0303 	adc.w	r3, fp, r3
 8007898:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800789c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80078ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80078b0:	460b      	mov	r3, r1
 80078b2:	18db      	adds	r3, r3, r3
 80078b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80078b6:	4613      	mov	r3, r2
 80078b8:	eb42 0303 	adc.w	r3, r2, r3
 80078bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80078be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80078c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80078c6:	f7f9 f96f 	bl	8000ba8 <__aeabi_uldivmod>
 80078ca:	4602      	mov	r2, r0
 80078cc:	460b      	mov	r3, r1
 80078ce:	4611      	mov	r1, r2
 80078d0:	4b3b      	ldr	r3, [pc, #236]	@ (80079c0 <UART_SetConfig+0x2d4>)
 80078d2:	fba3 2301 	umull	r2, r3, r3, r1
 80078d6:	095b      	lsrs	r3, r3, #5
 80078d8:	2264      	movs	r2, #100	@ 0x64
 80078da:	fb02 f303 	mul.w	r3, r2, r3
 80078de:	1acb      	subs	r3, r1, r3
 80078e0:	00db      	lsls	r3, r3, #3
 80078e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80078e6:	4b36      	ldr	r3, [pc, #216]	@ (80079c0 <UART_SetConfig+0x2d4>)
 80078e8:	fba3 2302 	umull	r2, r3, r3, r2
 80078ec:	095b      	lsrs	r3, r3, #5
 80078ee:	005b      	lsls	r3, r3, #1
 80078f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80078f4:	441c      	add	r4, r3
 80078f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078fa:	2200      	movs	r2, #0
 80078fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007900:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007904:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007908:	4642      	mov	r2, r8
 800790a:	464b      	mov	r3, r9
 800790c:	1891      	adds	r1, r2, r2
 800790e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007910:	415b      	adcs	r3, r3
 8007912:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007914:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007918:	4641      	mov	r1, r8
 800791a:	1851      	adds	r1, r2, r1
 800791c:	6339      	str	r1, [r7, #48]	@ 0x30
 800791e:	4649      	mov	r1, r9
 8007920:	414b      	adcs	r3, r1
 8007922:	637b      	str	r3, [r7, #52]	@ 0x34
 8007924:	f04f 0200 	mov.w	r2, #0
 8007928:	f04f 0300 	mov.w	r3, #0
 800792c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007930:	4659      	mov	r1, fp
 8007932:	00cb      	lsls	r3, r1, #3
 8007934:	4651      	mov	r1, sl
 8007936:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800793a:	4651      	mov	r1, sl
 800793c:	00ca      	lsls	r2, r1, #3
 800793e:	4610      	mov	r0, r2
 8007940:	4619      	mov	r1, r3
 8007942:	4603      	mov	r3, r0
 8007944:	4642      	mov	r2, r8
 8007946:	189b      	adds	r3, r3, r2
 8007948:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800794c:	464b      	mov	r3, r9
 800794e:	460a      	mov	r2, r1
 8007950:	eb42 0303 	adc.w	r3, r2, r3
 8007954:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007964:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007968:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800796c:	460b      	mov	r3, r1
 800796e:	18db      	adds	r3, r3, r3
 8007970:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007972:	4613      	mov	r3, r2
 8007974:	eb42 0303 	adc.w	r3, r2, r3
 8007978:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800797a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800797e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007982:	f7f9 f911 	bl	8000ba8 <__aeabi_uldivmod>
 8007986:	4602      	mov	r2, r0
 8007988:	460b      	mov	r3, r1
 800798a:	4b0d      	ldr	r3, [pc, #52]	@ (80079c0 <UART_SetConfig+0x2d4>)
 800798c:	fba3 1302 	umull	r1, r3, r3, r2
 8007990:	095b      	lsrs	r3, r3, #5
 8007992:	2164      	movs	r1, #100	@ 0x64
 8007994:	fb01 f303 	mul.w	r3, r1, r3
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	00db      	lsls	r3, r3, #3
 800799c:	3332      	adds	r3, #50	@ 0x32
 800799e:	4a08      	ldr	r2, [pc, #32]	@ (80079c0 <UART_SetConfig+0x2d4>)
 80079a0:	fba2 2303 	umull	r2, r3, r2, r3
 80079a4:	095b      	lsrs	r3, r3, #5
 80079a6:	f003 0207 	and.w	r2, r3, #7
 80079aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4422      	add	r2, r4
 80079b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079b4:	e106      	b.n	8007bc4 <UART_SetConfig+0x4d8>
 80079b6:	bf00      	nop
 80079b8:	40011000 	.word	0x40011000
 80079bc:	40011400 	.word	0x40011400
 80079c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80079c8:	2200      	movs	r2, #0
 80079ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80079ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80079d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80079d6:	4642      	mov	r2, r8
 80079d8:	464b      	mov	r3, r9
 80079da:	1891      	adds	r1, r2, r2
 80079dc:	6239      	str	r1, [r7, #32]
 80079de:	415b      	adcs	r3, r3
 80079e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80079e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80079e6:	4641      	mov	r1, r8
 80079e8:	1854      	adds	r4, r2, r1
 80079ea:	4649      	mov	r1, r9
 80079ec:	eb43 0501 	adc.w	r5, r3, r1
 80079f0:	f04f 0200 	mov.w	r2, #0
 80079f4:	f04f 0300 	mov.w	r3, #0
 80079f8:	00eb      	lsls	r3, r5, #3
 80079fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80079fe:	00e2      	lsls	r2, r4, #3
 8007a00:	4614      	mov	r4, r2
 8007a02:	461d      	mov	r5, r3
 8007a04:	4643      	mov	r3, r8
 8007a06:	18e3      	adds	r3, r4, r3
 8007a08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a0c:	464b      	mov	r3, r9
 8007a0e:	eb45 0303 	adc.w	r3, r5, r3
 8007a12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a22:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a26:	f04f 0200 	mov.w	r2, #0
 8007a2a:	f04f 0300 	mov.w	r3, #0
 8007a2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007a32:	4629      	mov	r1, r5
 8007a34:	008b      	lsls	r3, r1, #2
 8007a36:	4621      	mov	r1, r4
 8007a38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a3c:	4621      	mov	r1, r4
 8007a3e:	008a      	lsls	r2, r1, #2
 8007a40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007a44:	f7f9 f8b0 	bl	8000ba8 <__aeabi_uldivmod>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	4b60      	ldr	r3, [pc, #384]	@ (8007bd0 <UART_SetConfig+0x4e4>)
 8007a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8007a52:	095b      	lsrs	r3, r3, #5
 8007a54:	011c      	lsls	r4, r3, #4
 8007a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007a60:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007a64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007a68:	4642      	mov	r2, r8
 8007a6a:	464b      	mov	r3, r9
 8007a6c:	1891      	adds	r1, r2, r2
 8007a6e:	61b9      	str	r1, [r7, #24]
 8007a70:	415b      	adcs	r3, r3
 8007a72:	61fb      	str	r3, [r7, #28]
 8007a74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007a78:	4641      	mov	r1, r8
 8007a7a:	1851      	adds	r1, r2, r1
 8007a7c:	6139      	str	r1, [r7, #16]
 8007a7e:	4649      	mov	r1, r9
 8007a80:	414b      	adcs	r3, r1
 8007a82:	617b      	str	r3, [r7, #20]
 8007a84:	f04f 0200 	mov.w	r2, #0
 8007a88:	f04f 0300 	mov.w	r3, #0
 8007a8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a90:	4659      	mov	r1, fp
 8007a92:	00cb      	lsls	r3, r1, #3
 8007a94:	4651      	mov	r1, sl
 8007a96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007a9a:	4651      	mov	r1, sl
 8007a9c:	00ca      	lsls	r2, r1, #3
 8007a9e:	4610      	mov	r0, r2
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	4642      	mov	r2, r8
 8007aa6:	189b      	adds	r3, r3, r2
 8007aa8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007aac:	464b      	mov	r3, r9
 8007aae:	460a      	mov	r2, r1
 8007ab0:	eb42 0303 	adc.w	r3, r2, r3
 8007ab4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ac2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007ac4:	f04f 0200 	mov.w	r2, #0
 8007ac8:	f04f 0300 	mov.w	r3, #0
 8007acc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007ad0:	4649      	mov	r1, r9
 8007ad2:	008b      	lsls	r3, r1, #2
 8007ad4:	4641      	mov	r1, r8
 8007ad6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ada:	4641      	mov	r1, r8
 8007adc:	008a      	lsls	r2, r1, #2
 8007ade:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007ae2:	f7f9 f861 	bl	8000ba8 <__aeabi_uldivmod>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	460b      	mov	r3, r1
 8007aea:	4611      	mov	r1, r2
 8007aec:	4b38      	ldr	r3, [pc, #224]	@ (8007bd0 <UART_SetConfig+0x4e4>)
 8007aee:	fba3 2301 	umull	r2, r3, r3, r1
 8007af2:	095b      	lsrs	r3, r3, #5
 8007af4:	2264      	movs	r2, #100	@ 0x64
 8007af6:	fb02 f303 	mul.w	r3, r2, r3
 8007afa:	1acb      	subs	r3, r1, r3
 8007afc:	011b      	lsls	r3, r3, #4
 8007afe:	3332      	adds	r3, #50	@ 0x32
 8007b00:	4a33      	ldr	r2, [pc, #204]	@ (8007bd0 <UART_SetConfig+0x4e4>)
 8007b02:	fba2 2303 	umull	r2, r3, r2, r3
 8007b06:	095b      	lsrs	r3, r3, #5
 8007b08:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b0c:	441c      	add	r4, r3
 8007b0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b12:	2200      	movs	r2, #0
 8007b14:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b16:	677a      	str	r2, [r7, #116]	@ 0x74
 8007b18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007b1c:	4642      	mov	r2, r8
 8007b1e:	464b      	mov	r3, r9
 8007b20:	1891      	adds	r1, r2, r2
 8007b22:	60b9      	str	r1, [r7, #8]
 8007b24:	415b      	adcs	r3, r3
 8007b26:	60fb      	str	r3, [r7, #12]
 8007b28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b2c:	4641      	mov	r1, r8
 8007b2e:	1851      	adds	r1, r2, r1
 8007b30:	6039      	str	r1, [r7, #0]
 8007b32:	4649      	mov	r1, r9
 8007b34:	414b      	adcs	r3, r1
 8007b36:	607b      	str	r3, [r7, #4]
 8007b38:	f04f 0200 	mov.w	r2, #0
 8007b3c:	f04f 0300 	mov.w	r3, #0
 8007b40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b44:	4659      	mov	r1, fp
 8007b46:	00cb      	lsls	r3, r1, #3
 8007b48:	4651      	mov	r1, sl
 8007b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b4e:	4651      	mov	r1, sl
 8007b50:	00ca      	lsls	r2, r1, #3
 8007b52:	4610      	mov	r0, r2
 8007b54:	4619      	mov	r1, r3
 8007b56:	4603      	mov	r3, r0
 8007b58:	4642      	mov	r2, r8
 8007b5a:	189b      	adds	r3, r3, r2
 8007b5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b5e:	464b      	mov	r3, r9
 8007b60:	460a      	mov	r2, r1
 8007b62:	eb42 0303 	adc.w	r3, r2, r3
 8007b66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b72:	667a      	str	r2, [r7, #100]	@ 0x64
 8007b74:	f04f 0200 	mov.w	r2, #0
 8007b78:	f04f 0300 	mov.w	r3, #0
 8007b7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007b80:	4649      	mov	r1, r9
 8007b82:	008b      	lsls	r3, r1, #2
 8007b84:	4641      	mov	r1, r8
 8007b86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b8a:	4641      	mov	r1, r8
 8007b8c:	008a      	lsls	r2, r1, #2
 8007b8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007b92:	f7f9 f809 	bl	8000ba8 <__aeabi_uldivmod>
 8007b96:	4602      	mov	r2, r0
 8007b98:	460b      	mov	r3, r1
 8007b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007bd0 <UART_SetConfig+0x4e4>)
 8007b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8007ba0:	095b      	lsrs	r3, r3, #5
 8007ba2:	2164      	movs	r1, #100	@ 0x64
 8007ba4:	fb01 f303 	mul.w	r3, r1, r3
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	011b      	lsls	r3, r3, #4
 8007bac:	3332      	adds	r3, #50	@ 0x32
 8007bae:	4a08      	ldr	r2, [pc, #32]	@ (8007bd0 <UART_SetConfig+0x4e4>)
 8007bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb4:	095b      	lsrs	r3, r3, #5
 8007bb6:	f003 020f 	and.w	r2, r3, #15
 8007bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4422      	add	r2, r4
 8007bc2:	609a      	str	r2, [r3, #8]
}
 8007bc4:	bf00      	nop
 8007bc6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bd0:	51eb851f 	.word	0x51eb851f

08007bd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bd4:	b084      	sub	sp, #16
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b084      	sub	sp, #16
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
 8007bde:	f107 001c 	add.w	r0, r7, #28
 8007be2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007be6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d123      	bne.n	8007c36 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	68db      	ldr	r3, [r3, #12]
 8007bfe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007c02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007c1a:	2b01      	cmp	r3, #1
 8007c1c:	d105      	bne.n	8007c2a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	68db      	ldr	r3, [r3, #12]
 8007c22:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 faa0 	bl	8008170 <USB_CoreReset>
 8007c30:	4603      	mov	r3, r0
 8007c32:	73fb      	strb	r3, [r7, #15]
 8007c34:	e01b      	b.n	8007c6e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	68db      	ldr	r3, [r3, #12]
 8007c3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fa94 	bl	8008170 <USB_CoreReset>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007c4c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d106      	bne.n	8007c62 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c58:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007c60:	e005      	b.n	8007c6e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c66:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007c6e:	7fbb      	ldrb	r3, [r7, #30]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d10b      	bne.n	8007c8c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	f043 0206 	orr.w	r2, r3, #6
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	f043 0220 	orr.w	r2, r3, #32
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3710      	adds	r7, #16
 8007c92:	46bd      	mov	sp, r7
 8007c94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c98:	b004      	add	sp, #16
 8007c9a:	4770      	bx	lr

08007c9c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	f023 0201 	bic.w	r2, r3, #1
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	370c      	adds	r7, #12
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr

08007cbe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007cbe:	b580      	push	{r7, lr}
 8007cc0:	b084      	sub	sp, #16
 8007cc2:	af00      	add	r7, sp, #0
 8007cc4:	6078      	str	r0, [r7, #4]
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007cda:	78fb      	ldrb	r3, [r7, #3]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d115      	bne.n	8007d0c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007cec:	200a      	movs	r0, #10
 8007cee:	f7fa fb1d 	bl	800232c <HAL_Delay>
      ms += 10U;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	330a      	adds	r3, #10
 8007cf6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fa2b 	bl	8008154 <USB_GetMode>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d01e      	beq.n	8007d42 <USB_SetCurrentMode+0x84>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2bc7      	cmp	r3, #199	@ 0xc7
 8007d08:	d9f0      	bls.n	8007cec <USB_SetCurrentMode+0x2e>
 8007d0a:	e01a      	b.n	8007d42 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007d0c:	78fb      	ldrb	r3, [r7, #3]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d115      	bne.n	8007d3e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007d1e:	200a      	movs	r0, #10
 8007d20:	f7fa fb04 	bl	800232c <HAL_Delay>
      ms += 10U;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	330a      	adds	r3, #10
 8007d28:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fa12 	bl	8008154 <USB_GetMode>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d005      	beq.n	8007d42 <USB_SetCurrentMode+0x84>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2bc7      	cmp	r3, #199	@ 0xc7
 8007d3a:	d9f0      	bls.n	8007d1e <USB_SetCurrentMode+0x60>
 8007d3c:	e001      	b.n	8007d42 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e005      	b.n	8007d4e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2bc8      	cmp	r3, #200	@ 0xc8
 8007d46:	d101      	bne.n	8007d4c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e000      	b.n	8007d4e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
	...

08007d58 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d58:	b084      	sub	sp, #16
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b086      	sub	sp, #24
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007d66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007d72:	2300      	movs	r3, #0
 8007d74:	613b      	str	r3, [r7, #16]
 8007d76:	e009      	b.n	8007d8c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	3340      	adds	r3, #64	@ 0x40
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	4413      	add	r3, r2
 8007d82:	2200      	movs	r2, #0
 8007d84:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	613b      	str	r3, [r7, #16]
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	2b0e      	cmp	r3, #14
 8007d90:	d9f2      	bls.n	8007d78 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007d92:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d11c      	bne.n	8007dd4 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007da0:	685b      	ldr	r3, [r3, #4]
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007da8:	f043 0302 	orr.w	r3, r3, #2
 8007dac:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007db2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dbe:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dca:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	639a      	str	r2, [r3, #56]	@ 0x38
 8007dd2:	e00b      	b.n	8007dec <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dd8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007de4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007df2:	461a      	mov	r2, r3
 8007df4:	2300      	movs	r3, #0
 8007df6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007df8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d10d      	bne.n	8007e1c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007e00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d104      	bne.n	8007e12 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007e08:	2100      	movs	r1, #0
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 f968 	bl	80080e0 <USB_SetDevSpeed>
 8007e10:	e008      	b.n	8007e24 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007e12:	2101      	movs	r1, #1
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f963 	bl	80080e0 <USB_SetDevSpeed>
 8007e1a:	e003      	b.n	8007e24 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007e1c:	2103      	movs	r1, #3
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f95e 	bl	80080e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e24:	2110      	movs	r1, #16
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f8fa 	bl	8008020 <USB_FlushTxFifo>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 f924 	bl	8008084 <USB_FlushRxFifo>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8007e42:	2301      	movs	r3, #1
 8007e44:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	2300      	movs	r3, #0
 8007e50:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e58:	461a      	mov	r2, r3
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e64:	461a      	mov	r2, r3
 8007e66:	2300      	movs	r3, #0
 8007e68:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	613b      	str	r3, [r7, #16]
 8007e6e:	e043      	b.n	8007ef8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	015a      	lsls	r2, r3, #5
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e82:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e86:	d118      	bne.n	8007eba <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d10a      	bne.n	8007ea4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	015a      	lsls	r2, r3, #5
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	4413      	add	r3, r2
 8007e96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007ea0:	6013      	str	r3, [r2, #0]
 8007ea2:	e013      	b.n	8007ecc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	015a      	lsls	r2, r3, #5
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	4413      	add	r3, r2
 8007eac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007eb6:	6013      	str	r3, [r2, #0]
 8007eb8:	e008      	b.n	8007ecc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	015a      	lsls	r2, r3, #5
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	4413      	add	r3, r2
 8007ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	2300      	movs	r3, #0
 8007eca:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	015a      	lsls	r2, r3, #5
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ed8:	461a      	mov	r2, r3
 8007eda:	2300      	movs	r3, #0
 8007edc:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	015a      	lsls	r2, r3, #5
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007eea:	461a      	mov	r2, r3
 8007eec:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007ef0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ef2:	693b      	ldr	r3, [r7, #16]
 8007ef4:	3301      	adds	r3, #1
 8007ef6:	613b      	str	r3, [r7, #16]
 8007ef8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007efc:	461a      	mov	r2, r3
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d3b5      	bcc.n	8007e70 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f04:	2300      	movs	r3, #0
 8007f06:	613b      	str	r3, [r7, #16]
 8007f08:	e043      	b.n	8007f92 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	015a      	lsls	r2, r3, #5
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	4413      	add	r3, r2
 8007f12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f1c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f20:	d118      	bne.n	8007f54 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d10a      	bne.n	8007f3e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	015a      	lsls	r2, r3, #5
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	4413      	add	r3, r2
 8007f30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f34:	461a      	mov	r2, r3
 8007f36:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007f3a:	6013      	str	r3, [r2, #0]
 8007f3c:	e013      	b.n	8007f66 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	015a      	lsls	r2, r3, #5
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	4413      	add	r3, r2
 8007f46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007f50:	6013      	str	r3, [r2, #0]
 8007f52:	e008      	b.n	8007f66 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	015a      	lsls	r2, r3, #5
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f60:	461a      	mov	r2, r3
 8007f62:	2300      	movs	r3, #0
 8007f64:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007f66:	693b      	ldr	r3, [r7, #16]
 8007f68:	015a      	lsls	r2, r3, #5
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f72:	461a      	mov	r2, r3
 8007f74:	2300      	movs	r3, #0
 8007f76:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	015a      	lsls	r2, r3, #5
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	4413      	add	r3, r2
 8007f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f84:	461a      	mov	r2, r3
 8007f86:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007f8a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	3301      	adds	r3, #1
 8007f90:	613b      	str	r3, [r7, #16]
 8007f92:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007f96:	461a      	mov	r2, r3
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d3b5      	bcc.n	8007f0a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fa4:	691b      	ldr	r3, [r3, #16]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fb0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007fbe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007fc0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d105      	bne.n	8007fd4 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	699b      	ldr	r3, [r3, #24]
 8007fcc:	f043 0210 	orr.w	r2, r3, #16
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	699a      	ldr	r2, [r3, #24]
 8007fd8:	4b10      	ldr	r3, [pc, #64]	@ (800801c <USB_DevInit+0x2c4>)
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	687a      	ldr	r2, [r7, #4]
 8007fde:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007fe0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d005      	beq.n	8007ff4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	699b      	ldr	r3, [r3, #24]
 8007fec:	f043 0208 	orr.w	r2, r3, #8
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007ff4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d107      	bne.n	800800c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	699b      	ldr	r3, [r3, #24]
 8008000:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008004:	f043 0304 	orr.w	r3, r3, #4
 8008008:	687a      	ldr	r2, [r7, #4]
 800800a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800800c:	7dfb      	ldrb	r3, [r7, #23]
}
 800800e:	4618      	mov	r0, r3
 8008010:	3718      	adds	r7, #24
 8008012:	46bd      	mov	sp, r7
 8008014:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008018:	b004      	add	sp, #16
 800801a:	4770      	bx	lr
 800801c:	803c3800 	.word	0x803c3800

08008020 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	3301      	adds	r3, #1
 8008032:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800803a:	d901      	bls.n	8008040 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800803c:	2303      	movs	r3, #3
 800803e:	e01b      	b.n	8008078 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	2b00      	cmp	r3, #0
 8008046:	daf2      	bge.n	800802e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008048:	2300      	movs	r3, #0
 800804a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	019b      	lsls	r3, r3, #6
 8008050:	f043 0220 	orr.w	r2, r3, #32
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	3301      	adds	r3, #1
 800805c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008064:	d901      	bls.n	800806a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e006      	b.n	8008078 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	f003 0320 	and.w	r3, r3, #32
 8008072:	2b20      	cmp	r3, #32
 8008074:	d0f0      	beq.n	8008058 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008076:	2300      	movs	r3, #0
}
 8008078:	4618      	mov	r0, r3
 800807a:	3714      	adds	r7, #20
 800807c:	46bd      	mov	sp, r7
 800807e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008082:	4770      	bx	lr

08008084 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008084:	b480      	push	{r7}
 8008086:	b085      	sub	sp, #20
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800808c:	2300      	movs	r3, #0
 800808e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	3301      	adds	r3, #1
 8008094:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800809c:	d901      	bls.n	80080a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800809e:	2303      	movs	r3, #3
 80080a0:	e018      	b.n	80080d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	691b      	ldr	r3, [r3, #16]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	daf2      	bge.n	8008090 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80080aa:	2300      	movs	r3, #0
 80080ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2210      	movs	r2, #16
 80080b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	3301      	adds	r3, #1
 80080b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80080c0:	d901      	bls.n	80080c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e006      	b.n	80080d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	f003 0310 	and.w	r3, r3, #16
 80080ce:	2b10      	cmp	r3, #16
 80080d0:	d0f0      	beq.n	80080b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80080d2:	2300      	movs	r3, #0
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	460b      	mov	r3, r1
 80080ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	78fb      	ldrb	r3, [r7, #3]
 80080fa:	68f9      	ldr	r1, [r7, #12]
 80080fc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008100:	4313      	orrs	r3, r2
 8008102:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr

08008112 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008112:	b480      	push	{r7}
 8008114:	b085      	sub	sp, #20
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	68fa      	ldr	r2, [r7, #12]
 8008128:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800812c:	f023 0303 	bic.w	r3, r3, #3
 8008130:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	68fa      	ldr	r2, [r7, #12]
 800813c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008140:	f043 0302 	orr.w	r3, r3, #2
 8008144:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3714      	adds	r7, #20
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	f003 0301 	and.w	r3, r3, #1
}
 8008164:	4618      	mov	r0, r3
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008170:	b480      	push	{r7}
 8008172:	b085      	sub	sp, #20
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008178:	2300      	movs	r3, #0
 800817a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	3301      	adds	r3, #1
 8008180:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008188:	d901      	bls.n	800818e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800818a:	2303      	movs	r3, #3
 800818c:	e01b      	b.n	80081c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	2b00      	cmp	r3, #0
 8008194:	daf2      	bge.n	800817c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008196:	2300      	movs	r3, #0
 8008198:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	f043 0201 	orr.w	r2, r3, #1
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	3301      	adds	r3, #1
 80081aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081b2:	d901      	bls.n	80081b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80081b4:	2303      	movs	r3, #3
 80081b6:	e006      	b.n	80081c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	f003 0301 	and.w	r3, r3, #1
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d0f0      	beq.n	80081a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3714      	adds	r7, #20
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr

080081d2 <__cvt>:
 80081d2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081d6:	ec57 6b10 	vmov	r6, r7, d0
 80081da:	2f00      	cmp	r7, #0
 80081dc:	460c      	mov	r4, r1
 80081de:	4619      	mov	r1, r3
 80081e0:	463b      	mov	r3, r7
 80081e2:	bfbb      	ittet	lt
 80081e4:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80081e8:	461f      	movlt	r7, r3
 80081ea:	2300      	movge	r3, #0
 80081ec:	232d      	movlt	r3, #45	@ 0x2d
 80081ee:	700b      	strb	r3, [r1, #0]
 80081f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081f2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80081f6:	4691      	mov	r9, r2
 80081f8:	f023 0820 	bic.w	r8, r3, #32
 80081fc:	bfbc      	itt	lt
 80081fe:	4632      	movlt	r2, r6
 8008200:	4616      	movlt	r6, r2
 8008202:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008206:	d005      	beq.n	8008214 <__cvt+0x42>
 8008208:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800820c:	d100      	bne.n	8008210 <__cvt+0x3e>
 800820e:	3401      	adds	r4, #1
 8008210:	2102      	movs	r1, #2
 8008212:	e000      	b.n	8008216 <__cvt+0x44>
 8008214:	2103      	movs	r1, #3
 8008216:	ab03      	add	r3, sp, #12
 8008218:	9301      	str	r3, [sp, #4]
 800821a:	ab02      	add	r3, sp, #8
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	ec47 6b10 	vmov	d0, r6, r7
 8008222:	4653      	mov	r3, sl
 8008224:	4622      	mov	r2, r4
 8008226:	f000 fdcf 	bl	8008dc8 <_dtoa_r>
 800822a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800822e:	4605      	mov	r5, r0
 8008230:	d119      	bne.n	8008266 <__cvt+0x94>
 8008232:	f019 0f01 	tst.w	r9, #1
 8008236:	d00e      	beq.n	8008256 <__cvt+0x84>
 8008238:	eb00 0904 	add.w	r9, r0, r4
 800823c:	2200      	movs	r2, #0
 800823e:	2300      	movs	r3, #0
 8008240:	4630      	mov	r0, r6
 8008242:	4639      	mov	r1, r7
 8008244:	f7f8 fc40 	bl	8000ac8 <__aeabi_dcmpeq>
 8008248:	b108      	cbz	r0, 800824e <__cvt+0x7c>
 800824a:	f8cd 900c 	str.w	r9, [sp, #12]
 800824e:	2230      	movs	r2, #48	@ 0x30
 8008250:	9b03      	ldr	r3, [sp, #12]
 8008252:	454b      	cmp	r3, r9
 8008254:	d31e      	bcc.n	8008294 <__cvt+0xc2>
 8008256:	9b03      	ldr	r3, [sp, #12]
 8008258:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800825a:	1b5b      	subs	r3, r3, r5
 800825c:	4628      	mov	r0, r5
 800825e:	6013      	str	r3, [r2, #0]
 8008260:	b004      	add	sp, #16
 8008262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008266:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800826a:	eb00 0904 	add.w	r9, r0, r4
 800826e:	d1e5      	bne.n	800823c <__cvt+0x6a>
 8008270:	7803      	ldrb	r3, [r0, #0]
 8008272:	2b30      	cmp	r3, #48	@ 0x30
 8008274:	d10a      	bne.n	800828c <__cvt+0xba>
 8008276:	2200      	movs	r2, #0
 8008278:	2300      	movs	r3, #0
 800827a:	4630      	mov	r0, r6
 800827c:	4639      	mov	r1, r7
 800827e:	f7f8 fc23 	bl	8000ac8 <__aeabi_dcmpeq>
 8008282:	b918      	cbnz	r0, 800828c <__cvt+0xba>
 8008284:	f1c4 0401 	rsb	r4, r4, #1
 8008288:	f8ca 4000 	str.w	r4, [sl]
 800828c:	f8da 3000 	ldr.w	r3, [sl]
 8008290:	4499      	add	r9, r3
 8008292:	e7d3      	b.n	800823c <__cvt+0x6a>
 8008294:	1c59      	adds	r1, r3, #1
 8008296:	9103      	str	r1, [sp, #12]
 8008298:	701a      	strb	r2, [r3, #0]
 800829a:	e7d9      	b.n	8008250 <__cvt+0x7e>

0800829c <__exponent>:
 800829c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800829e:	2900      	cmp	r1, #0
 80082a0:	bfba      	itte	lt
 80082a2:	4249      	neglt	r1, r1
 80082a4:	232d      	movlt	r3, #45	@ 0x2d
 80082a6:	232b      	movge	r3, #43	@ 0x2b
 80082a8:	2909      	cmp	r1, #9
 80082aa:	7002      	strb	r2, [r0, #0]
 80082ac:	7043      	strb	r3, [r0, #1]
 80082ae:	dd29      	ble.n	8008304 <__exponent+0x68>
 80082b0:	f10d 0307 	add.w	r3, sp, #7
 80082b4:	461d      	mov	r5, r3
 80082b6:	270a      	movs	r7, #10
 80082b8:	461a      	mov	r2, r3
 80082ba:	fbb1 f6f7 	udiv	r6, r1, r7
 80082be:	fb07 1416 	mls	r4, r7, r6, r1
 80082c2:	3430      	adds	r4, #48	@ 0x30
 80082c4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80082c8:	460c      	mov	r4, r1
 80082ca:	2c63      	cmp	r4, #99	@ 0x63
 80082cc:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80082d0:	4631      	mov	r1, r6
 80082d2:	dcf1      	bgt.n	80082b8 <__exponent+0x1c>
 80082d4:	3130      	adds	r1, #48	@ 0x30
 80082d6:	1e94      	subs	r4, r2, #2
 80082d8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80082dc:	1c41      	adds	r1, r0, #1
 80082de:	4623      	mov	r3, r4
 80082e0:	42ab      	cmp	r3, r5
 80082e2:	d30a      	bcc.n	80082fa <__exponent+0x5e>
 80082e4:	f10d 0309 	add.w	r3, sp, #9
 80082e8:	1a9b      	subs	r3, r3, r2
 80082ea:	42ac      	cmp	r4, r5
 80082ec:	bf88      	it	hi
 80082ee:	2300      	movhi	r3, #0
 80082f0:	3302      	adds	r3, #2
 80082f2:	4403      	add	r3, r0
 80082f4:	1a18      	subs	r0, r3, r0
 80082f6:	b003      	add	sp, #12
 80082f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082fa:	f813 6b01 	ldrb.w	r6, [r3], #1
 80082fe:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008302:	e7ed      	b.n	80082e0 <__exponent+0x44>
 8008304:	2330      	movs	r3, #48	@ 0x30
 8008306:	3130      	adds	r1, #48	@ 0x30
 8008308:	7083      	strb	r3, [r0, #2]
 800830a:	70c1      	strb	r1, [r0, #3]
 800830c:	1d03      	adds	r3, r0, #4
 800830e:	e7f1      	b.n	80082f4 <__exponent+0x58>

08008310 <_printf_float>:
 8008310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008314:	b08d      	sub	sp, #52	@ 0x34
 8008316:	460c      	mov	r4, r1
 8008318:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800831c:	4616      	mov	r6, r2
 800831e:	461f      	mov	r7, r3
 8008320:	4605      	mov	r5, r0
 8008322:	f000 fc97 	bl	8008c54 <_localeconv_r>
 8008326:	6803      	ldr	r3, [r0, #0]
 8008328:	9304      	str	r3, [sp, #16]
 800832a:	4618      	mov	r0, r3
 800832c:	f7f7 ffa0 	bl	8000270 <strlen>
 8008330:	2300      	movs	r3, #0
 8008332:	930a      	str	r3, [sp, #40]	@ 0x28
 8008334:	f8d8 3000 	ldr.w	r3, [r8]
 8008338:	9005      	str	r0, [sp, #20]
 800833a:	3307      	adds	r3, #7
 800833c:	f023 0307 	bic.w	r3, r3, #7
 8008340:	f103 0208 	add.w	r2, r3, #8
 8008344:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008348:	f8d4 b000 	ldr.w	fp, [r4]
 800834c:	f8c8 2000 	str.w	r2, [r8]
 8008350:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008354:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008358:	9307      	str	r3, [sp, #28]
 800835a:	f8cd 8018 	str.w	r8, [sp, #24]
 800835e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008362:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008366:	4b9c      	ldr	r3, [pc, #624]	@ (80085d8 <_printf_float+0x2c8>)
 8008368:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800836c:	f7f8 fbde 	bl	8000b2c <__aeabi_dcmpun>
 8008370:	bb70      	cbnz	r0, 80083d0 <_printf_float+0xc0>
 8008372:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008376:	4b98      	ldr	r3, [pc, #608]	@ (80085d8 <_printf_float+0x2c8>)
 8008378:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800837c:	f7f8 fbb8 	bl	8000af0 <__aeabi_dcmple>
 8008380:	bb30      	cbnz	r0, 80083d0 <_printf_float+0xc0>
 8008382:	2200      	movs	r2, #0
 8008384:	2300      	movs	r3, #0
 8008386:	4640      	mov	r0, r8
 8008388:	4649      	mov	r1, r9
 800838a:	f7f8 fba7 	bl	8000adc <__aeabi_dcmplt>
 800838e:	b110      	cbz	r0, 8008396 <_printf_float+0x86>
 8008390:	232d      	movs	r3, #45	@ 0x2d
 8008392:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008396:	4a91      	ldr	r2, [pc, #580]	@ (80085dc <_printf_float+0x2cc>)
 8008398:	4b91      	ldr	r3, [pc, #580]	@ (80085e0 <_printf_float+0x2d0>)
 800839a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800839e:	bf94      	ite	ls
 80083a0:	4690      	movls	r8, r2
 80083a2:	4698      	movhi	r8, r3
 80083a4:	2303      	movs	r3, #3
 80083a6:	6123      	str	r3, [r4, #16]
 80083a8:	f02b 0304 	bic.w	r3, fp, #4
 80083ac:	6023      	str	r3, [r4, #0]
 80083ae:	f04f 0900 	mov.w	r9, #0
 80083b2:	9700      	str	r7, [sp, #0]
 80083b4:	4633      	mov	r3, r6
 80083b6:	aa0b      	add	r2, sp, #44	@ 0x2c
 80083b8:	4621      	mov	r1, r4
 80083ba:	4628      	mov	r0, r5
 80083bc:	f000 f9d2 	bl	8008764 <_printf_common>
 80083c0:	3001      	adds	r0, #1
 80083c2:	f040 808d 	bne.w	80084e0 <_printf_float+0x1d0>
 80083c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083ca:	b00d      	add	sp, #52	@ 0x34
 80083cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083d0:	4642      	mov	r2, r8
 80083d2:	464b      	mov	r3, r9
 80083d4:	4640      	mov	r0, r8
 80083d6:	4649      	mov	r1, r9
 80083d8:	f7f8 fba8 	bl	8000b2c <__aeabi_dcmpun>
 80083dc:	b140      	cbz	r0, 80083f0 <_printf_float+0xe0>
 80083de:	464b      	mov	r3, r9
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	bfbc      	itt	lt
 80083e4:	232d      	movlt	r3, #45	@ 0x2d
 80083e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80083ea:	4a7e      	ldr	r2, [pc, #504]	@ (80085e4 <_printf_float+0x2d4>)
 80083ec:	4b7e      	ldr	r3, [pc, #504]	@ (80085e8 <_printf_float+0x2d8>)
 80083ee:	e7d4      	b.n	800839a <_printf_float+0x8a>
 80083f0:	6863      	ldr	r3, [r4, #4]
 80083f2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80083f6:	9206      	str	r2, [sp, #24]
 80083f8:	1c5a      	adds	r2, r3, #1
 80083fa:	d13b      	bne.n	8008474 <_printf_float+0x164>
 80083fc:	2306      	movs	r3, #6
 80083fe:	6063      	str	r3, [r4, #4]
 8008400:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008404:	2300      	movs	r3, #0
 8008406:	6022      	str	r2, [r4, #0]
 8008408:	9303      	str	r3, [sp, #12]
 800840a:	ab0a      	add	r3, sp, #40	@ 0x28
 800840c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008410:	ab09      	add	r3, sp, #36	@ 0x24
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	6861      	ldr	r1, [r4, #4]
 8008416:	ec49 8b10 	vmov	d0, r8, r9
 800841a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800841e:	4628      	mov	r0, r5
 8008420:	f7ff fed7 	bl	80081d2 <__cvt>
 8008424:	9b06      	ldr	r3, [sp, #24]
 8008426:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008428:	2b47      	cmp	r3, #71	@ 0x47
 800842a:	4680      	mov	r8, r0
 800842c:	d129      	bne.n	8008482 <_printf_float+0x172>
 800842e:	1cc8      	adds	r0, r1, #3
 8008430:	db02      	blt.n	8008438 <_printf_float+0x128>
 8008432:	6863      	ldr	r3, [r4, #4]
 8008434:	4299      	cmp	r1, r3
 8008436:	dd41      	ble.n	80084bc <_printf_float+0x1ac>
 8008438:	f1aa 0a02 	sub.w	sl, sl, #2
 800843c:	fa5f fa8a 	uxtb.w	sl, sl
 8008440:	3901      	subs	r1, #1
 8008442:	4652      	mov	r2, sl
 8008444:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008448:	9109      	str	r1, [sp, #36]	@ 0x24
 800844a:	f7ff ff27 	bl	800829c <__exponent>
 800844e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008450:	1813      	adds	r3, r2, r0
 8008452:	2a01      	cmp	r2, #1
 8008454:	4681      	mov	r9, r0
 8008456:	6123      	str	r3, [r4, #16]
 8008458:	dc02      	bgt.n	8008460 <_printf_float+0x150>
 800845a:	6822      	ldr	r2, [r4, #0]
 800845c:	07d2      	lsls	r2, r2, #31
 800845e:	d501      	bpl.n	8008464 <_printf_float+0x154>
 8008460:	3301      	adds	r3, #1
 8008462:	6123      	str	r3, [r4, #16]
 8008464:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008468:	2b00      	cmp	r3, #0
 800846a:	d0a2      	beq.n	80083b2 <_printf_float+0xa2>
 800846c:	232d      	movs	r3, #45	@ 0x2d
 800846e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008472:	e79e      	b.n	80083b2 <_printf_float+0xa2>
 8008474:	9a06      	ldr	r2, [sp, #24]
 8008476:	2a47      	cmp	r2, #71	@ 0x47
 8008478:	d1c2      	bne.n	8008400 <_printf_float+0xf0>
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1c0      	bne.n	8008400 <_printf_float+0xf0>
 800847e:	2301      	movs	r3, #1
 8008480:	e7bd      	b.n	80083fe <_printf_float+0xee>
 8008482:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008486:	d9db      	bls.n	8008440 <_printf_float+0x130>
 8008488:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800848c:	d118      	bne.n	80084c0 <_printf_float+0x1b0>
 800848e:	2900      	cmp	r1, #0
 8008490:	6863      	ldr	r3, [r4, #4]
 8008492:	dd0b      	ble.n	80084ac <_printf_float+0x19c>
 8008494:	6121      	str	r1, [r4, #16]
 8008496:	b913      	cbnz	r3, 800849e <_printf_float+0x18e>
 8008498:	6822      	ldr	r2, [r4, #0]
 800849a:	07d0      	lsls	r0, r2, #31
 800849c:	d502      	bpl.n	80084a4 <_printf_float+0x194>
 800849e:	3301      	adds	r3, #1
 80084a0:	440b      	add	r3, r1
 80084a2:	6123      	str	r3, [r4, #16]
 80084a4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80084a6:	f04f 0900 	mov.w	r9, #0
 80084aa:	e7db      	b.n	8008464 <_printf_float+0x154>
 80084ac:	b913      	cbnz	r3, 80084b4 <_printf_float+0x1a4>
 80084ae:	6822      	ldr	r2, [r4, #0]
 80084b0:	07d2      	lsls	r2, r2, #31
 80084b2:	d501      	bpl.n	80084b8 <_printf_float+0x1a8>
 80084b4:	3302      	adds	r3, #2
 80084b6:	e7f4      	b.n	80084a2 <_printf_float+0x192>
 80084b8:	2301      	movs	r3, #1
 80084ba:	e7f2      	b.n	80084a2 <_printf_float+0x192>
 80084bc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80084c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084c2:	4299      	cmp	r1, r3
 80084c4:	db05      	blt.n	80084d2 <_printf_float+0x1c2>
 80084c6:	6823      	ldr	r3, [r4, #0]
 80084c8:	6121      	str	r1, [r4, #16]
 80084ca:	07d8      	lsls	r0, r3, #31
 80084cc:	d5ea      	bpl.n	80084a4 <_printf_float+0x194>
 80084ce:	1c4b      	adds	r3, r1, #1
 80084d0:	e7e7      	b.n	80084a2 <_printf_float+0x192>
 80084d2:	2900      	cmp	r1, #0
 80084d4:	bfd4      	ite	le
 80084d6:	f1c1 0202 	rsble	r2, r1, #2
 80084da:	2201      	movgt	r2, #1
 80084dc:	4413      	add	r3, r2
 80084de:	e7e0      	b.n	80084a2 <_printf_float+0x192>
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	055a      	lsls	r2, r3, #21
 80084e4:	d407      	bmi.n	80084f6 <_printf_float+0x1e6>
 80084e6:	6923      	ldr	r3, [r4, #16]
 80084e8:	4642      	mov	r2, r8
 80084ea:	4631      	mov	r1, r6
 80084ec:	4628      	mov	r0, r5
 80084ee:	47b8      	blx	r7
 80084f0:	3001      	adds	r0, #1
 80084f2:	d12b      	bne.n	800854c <_printf_float+0x23c>
 80084f4:	e767      	b.n	80083c6 <_printf_float+0xb6>
 80084f6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80084fa:	f240 80dd 	bls.w	80086b8 <_printf_float+0x3a8>
 80084fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008502:	2200      	movs	r2, #0
 8008504:	2300      	movs	r3, #0
 8008506:	f7f8 fadf 	bl	8000ac8 <__aeabi_dcmpeq>
 800850a:	2800      	cmp	r0, #0
 800850c:	d033      	beq.n	8008576 <_printf_float+0x266>
 800850e:	4a37      	ldr	r2, [pc, #220]	@ (80085ec <_printf_float+0x2dc>)
 8008510:	2301      	movs	r3, #1
 8008512:	4631      	mov	r1, r6
 8008514:	4628      	mov	r0, r5
 8008516:	47b8      	blx	r7
 8008518:	3001      	adds	r0, #1
 800851a:	f43f af54 	beq.w	80083c6 <_printf_float+0xb6>
 800851e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008522:	4543      	cmp	r3, r8
 8008524:	db02      	blt.n	800852c <_printf_float+0x21c>
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	07d8      	lsls	r0, r3, #31
 800852a:	d50f      	bpl.n	800854c <_printf_float+0x23c>
 800852c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008530:	4631      	mov	r1, r6
 8008532:	4628      	mov	r0, r5
 8008534:	47b8      	blx	r7
 8008536:	3001      	adds	r0, #1
 8008538:	f43f af45 	beq.w	80083c6 <_printf_float+0xb6>
 800853c:	f04f 0900 	mov.w	r9, #0
 8008540:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008544:	f104 0a1a 	add.w	sl, r4, #26
 8008548:	45c8      	cmp	r8, r9
 800854a:	dc09      	bgt.n	8008560 <_printf_float+0x250>
 800854c:	6823      	ldr	r3, [r4, #0]
 800854e:	079b      	lsls	r3, r3, #30
 8008550:	f100 8103 	bmi.w	800875a <_printf_float+0x44a>
 8008554:	68e0      	ldr	r0, [r4, #12]
 8008556:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008558:	4298      	cmp	r0, r3
 800855a:	bfb8      	it	lt
 800855c:	4618      	movlt	r0, r3
 800855e:	e734      	b.n	80083ca <_printf_float+0xba>
 8008560:	2301      	movs	r3, #1
 8008562:	4652      	mov	r2, sl
 8008564:	4631      	mov	r1, r6
 8008566:	4628      	mov	r0, r5
 8008568:	47b8      	blx	r7
 800856a:	3001      	adds	r0, #1
 800856c:	f43f af2b 	beq.w	80083c6 <_printf_float+0xb6>
 8008570:	f109 0901 	add.w	r9, r9, #1
 8008574:	e7e8      	b.n	8008548 <_printf_float+0x238>
 8008576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008578:	2b00      	cmp	r3, #0
 800857a:	dc39      	bgt.n	80085f0 <_printf_float+0x2e0>
 800857c:	4a1b      	ldr	r2, [pc, #108]	@ (80085ec <_printf_float+0x2dc>)
 800857e:	2301      	movs	r3, #1
 8008580:	4631      	mov	r1, r6
 8008582:	4628      	mov	r0, r5
 8008584:	47b8      	blx	r7
 8008586:	3001      	adds	r0, #1
 8008588:	f43f af1d 	beq.w	80083c6 <_printf_float+0xb6>
 800858c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008590:	ea59 0303 	orrs.w	r3, r9, r3
 8008594:	d102      	bne.n	800859c <_printf_float+0x28c>
 8008596:	6823      	ldr	r3, [r4, #0]
 8008598:	07d9      	lsls	r1, r3, #31
 800859a:	d5d7      	bpl.n	800854c <_printf_float+0x23c>
 800859c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085a0:	4631      	mov	r1, r6
 80085a2:	4628      	mov	r0, r5
 80085a4:	47b8      	blx	r7
 80085a6:	3001      	adds	r0, #1
 80085a8:	f43f af0d 	beq.w	80083c6 <_printf_float+0xb6>
 80085ac:	f04f 0a00 	mov.w	sl, #0
 80085b0:	f104 0b1a 	add.w	fp, r4, #26
 80085b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085b6:	425b      	negs	r3, r3
 80085b8:	4553      	cmp	r3, sl
 80085ba:	dc01      	bgt.n	80085c0 <_printf_float+0x2b0>
 80085bc:	464b      	mov	r3, r9
 80085be:	e793      	b.n	80084e8 <_printf_float+0x1d8>
 80085c0:	2301      	movs	r3, #1
 80085c2:	465a      	mov	r2, fp
 80085c4:	4631      	mov	r1, r6
 80085c6:	4628      	mov	r0, r5
 80085c8:	47b8      	blx	r7
 80085ca:	3001      	adds	r0, #1
 80085cc:	f43f aefb 	beq.w	80083c6 <_printf_float+0xb6>
 80085d0:	f10a 0a01 	add.w	sl, sl, #1
 80085d4:	e7ee      	b.n	80085b4 <_printf_float+0x2a4>
 80085d6:	bf00      	nop
 80085d8:	7fefffff 	.word	0x7fefffff
 80085dc:	0800af18 	.word	0x0800af18
 80085e0:	0800af1c 	.word	0x0800af1c
 80085e4:	0800af20 	.word	0x0800af20
 80085e8:	0800af24 	.word	0x0800af24
 80085ec:	0800af28 	.word	0x0800af28
 80085f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80085f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80085f6:	4553      	cmp	r3, sl
 80085f8:	bfa8      	it	ge
 80085fa:	4653      	movge	r3, sl
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	4699      	mov	r9, r3
 8008600:	dc36      	bgt.n	8008670 <_printf_float+0x360>
 8008602:	f04f 0b00 	mov.w	fp, #0
 8008606:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800860a:	f104 021a 	add.w	r2, r4, #26
 800860e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008610:	9306      	str	r3, [sp, #24]
 8008612:	eba3 0309 	sub.w	r3, r3, r9
 8008616:	455b      	cmp	r3, fp
 8008618:	dc31      	bgt.n	800867e <_printf_float+0x36e>
 800861a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800861c:	459a      	cmp	sl, r3
 800861e:	dc3a      	bgt.n	8008696 <_printf_float+0x386>
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	07da      	lsls	r2, r3, #31
 8008624:	d437      	bmi.n	8008696 <_printf_float+0x386>
 8008626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008628:	ebaa 0903 	sub.w	r9, sl, r3
 800862c:	9b06      	ldr	r3, [sp, #24]
 800862e:	ebaa 0303 	sub.w	r3, sl, r3
 8008632:	4599      	cmp	r9, r3
 8008634:	bfa8      	it	ge
 8008636:	4699      	movge	r9, r3
 8008638:	f1b9 0f00 	cmp.w	r9, #0
 800863c:	dc33      	bgt.n	80086a6 <_printf_float+0x396>
 800863e:	f04f 0800 	mov.w	r8, #0
 8008642:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008646:	f104 0b1a 	add.w	fp, r4, #26
 800864a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800864c:	ebaa 0303 	sub.w	r3, sl, r3
 8008650:	eba3 0309 	sub.w	r3, r3, r9
 8008654:	4543      	cmp	r3, r8
 8008656:	f77f af79 	ble.w	800854c <_printf_float+0x23c>
 800865a:	2301      	movs	r3, #1
 800865c:	465a      	mov	r2, fp
 800865e:	4631      	mov	r1, r6
 8008660:	4628      	mov	r0, r5
 8008662:	47b8      	blx	r7
 8008664:	3001      	adds	r0, #1
 8008666:	f43f aeae 	beq.w	80083c6 <_printf_float+0xb6>
 800866a:	f108 0801 	add.w	r8, r8, #1
 800866e:	e7ec      	b.n	800864a <_printf_float+0x33a>
 8008670:	4642      	mov	r2, r8
 8008672:	4631      	mov	r1, r6
 8008674:	4628      	mov	r0, r5
 8008676:	47b8      	blx	r7
 8008678:	3001      	adds	r0, #1
 800867a:	d1c2      	bne.n	8008602 <_printf_float+0x2f2>
 800867c:	e6a3      	b.n	80083c6 <_printf_float+0xb6>
 800867e:	2301      	movs	r3, #1
 8008680:	4631      	mov	r1, r6
 8008682:	4628      	mov	r0, r5
 8008684:	9206      	str	r2, [sp, #24]
 8008686:	47b8      	blx	r7
 8008688:	3001      	adds	r0, #1
 800868a:	f43f ae9c 	beq.w	80083c6 <_printf_float+0xb6>
 800868e:	9a06      	ldr	r2, [sp, #24]
 8008690:	f10b 0b01 	add.w	fp, fp, #1
 8008694:	e7bb      	b.n	800860e <_printf_float+0x2fe>
 8008696:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800869a:	4631      	mov	r1, r6
 800869c:	4628      	mov	r0, r5
 800869e:	47b8      	blx	r7
 80086a0:	3001      	adds	r0, #1
 80086a2:	d1c0      	bne.n	8008626 <_printf_float+0x316>
 80086a4:	e68f      	b.n	80083c6 <_printf_float+0xb6>
 80086a6:	9a06      	ldr	r2, [sp, #24]
 80086a8:	464b      	mov	r3, r9
 80086aa:	4442      	add	r2, r8
 80086ac:	4631      	mov	r1, r6
 80086ae:	4628      	mov	r0, r5
 80086b0:	47b8      	blx	r7
 80086b2:	3001      	adds	r0, #1
 80086b4:	d1c3      	bne.n	800863e <_printf_float+0x32e>
 80086b6:	e686      	b.n	80083c6 <_printf_float+0xb6>
 80086b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80086bc:	f1ba 0f01 	cmp.w	sl, #1
 80086c0:	dc01      	bgt.n	80086c6 <_printf_float+0x3b6>
 80086c2:	07db      	lsls	r3, r3, #31
 80086c4:	d536      	bpl.n	8008734 <_printf_float+0x424>
 80086c6:	2301      	movs	r3, #1
 80086c8:	4642      	mov	r2, r8
 80086ca:	4631      	mov	r1, r6
 80086cc:	4628      	mov	r0, r5
 80086ce:	47b8      	blx	r7
 80086d0:	3001      	adds	r0, #1
 80086d2:	f43f ae78 	beq.w	80083c6 <_printf_float+0xb6>
 80086d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086da:	4631      	mov	r1, r6
 80086dc:	4628      	mov	r0, r5
 80086de:	47b8      	blx	r7
 80086e0:	3001      	adds	r0, #1
 80086e2:	f43f ae70 	beq.w	80083c6 <_printf_float+0xb6>
 80086e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80086ea:	2200      	movs	r2, #0
 80086ec:	2300      	movs	r3, #0
 80086ee:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80086f2:	f7f8 f9e9 	bl	8000ac8 <__aeabi_dcmpeq>
 80086f6:	b9c0      	cbnz	r0, 800872a <_printf_float+0x41a>
 80086f8:	4653      	mov	r3, sl
 80086fa:	f108 0201 	add.w	r2, r8, #1
 80086fe:	4631      	mov	r1, r6
 8008700:	4628      	mov	r0, r5
 8008702:	47b8      	blx	r7
 8008704:	3001      	adds	r0, #1
 8008706:	d10c      	bne.n	8008722 <_printf_float+0x412>
 8008708:	e65d      	b.n	80083c6 <_printf_float+0xb6>
 800870a:	2301      	movs	r3, #1
 800870c:	465a      	mov	r2, fp
 800870e:	4631      	mov	r1, r6
 8008710:	4628      	mov	r0, r5
 8008712:	47b8      	blx	r7
 8008714:	3001      	adds	r0, #1
 8008716:	f43f ae56 	beq.w	80083c6 <_printf_float+0xb6>
 800871a:	f108 0801 	add.w	r8, r8, #1
 800871e:	45d0      	cmp	r8, sl
 8008720:	dbf3      	blt.n	800870a <_printf_float+0x3fa>
 8008722:	464b      	mov	r3, r9
 8008724:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008728:	e6df      	b.n	80084ea <_printf_float+0x1da>
 800872a:	f04f 0800 	mov.w	r8, #0
 800872e:	f104 0b1a 	add.w	fp, r4, #26
 8008732:	e7f4      	b.n	800871e <_printf_float+0x40e>
 8008734:	2301      	movs	r3, #1
 8008736:	4642      	mov	r2, r8
 8008738:	e7e1      	b.n	80086fe <_printf_float+0x3ee>
 800873a:	2301      	movs	r3, #1
 800873c:	464a      	mov	r2, r9
 800873e:	4631      	mov	r1, r6
 8008740:	4628      	mov	r0, r5
 8008742:	47b8      	blx	r7
 8008744:	3001      	adds	r0, #1
 8008746:	f43f ae3e 	beq.w	80083c6 <_printf_float+0xb6>
 800874a:	f108 0801 	add.w	r8, r8, #1
 800874e:	68e3      	ldr	r3, [r4, #12]
 8008750:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008752:	1a5b      	subs	r3, r3, r1
 8008754:	4543      	cmp	r3, r8
 8008756:	dcf0      	bgt.n	800873a <_printf_float+0x42a>
 8008758:	e6fc      	b.n	8008554 <_printf_float+0x244>
 800875a:	f04f 0800 	mov.w	r8, #0
 800875e:	f104 0919 	add.w	r9, r4, #25
 8008762:	e7f4      	b.n	800874e <_printf_float+0x43e>

08008764 <_printf_common>:
 8008764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008768:	4616      	mov	r6, r2
 800876a:	4698      	mov	r8, r3
 800876c:	688a      	ldr	r2, [r1, #8]
 800876e:	690b      	ldr	r3, [r1, #16]
 8008770:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008774:	4293      	cmp	r3, r2
 8008776:	bfb8      	it	lt
 8008778:	4613      	movlt	r3, r2
 800877a:	6033      	str	r3, [r6, #0]
 800877c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008780:	4607      	mov	r7, r0
 8008782:	460c      	mov	r4, r1
 8008784:	b10a      	cbz	r2, 800878a <_printf_common+0x26>
 8008786:	3301      	adds	r3, #1
 8008788:	6033      	str	r3, [r6, #0]
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	0699      	lsls	r1, r3, #26
 800878e:	bf42      	ittt	mi
 8008790:	6833      	ldrmi	r3, [r6, #0]
 8008792:	3302      	addmi	r3, #2
 8008794:	6033      	strmi	r3, [r6, #0]
 8008796:	6825      	ldr	r5, [r4, #0]
 8008798:	f015 0506 	ands.w	r5, r5, #6
 800879c:	d106      	bne.n	80087ac <_printf_common+0x48>
 800879e:	f104 0a19 	add.w	sl, r4, #25
 80087a2:	68e3      	ldr	r3, [r4, #12]
 80087a4:	6832      	ldr	r2, [r6, #0]
 80087a6:	1a9b      	subs	r3, r3, r2
 80087a8:	42ab      	cmp	r3, r5
 80087aa:	dc26      	bgt.n	80087fa <_printf_common+0x96>
 80087ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087b0:	6822      	ldr	r2, [r4, #0]
 80087b2:	3b00      	subs	r3, #0
 80087b4:	bf18      	it	ne
 80087b6:	2301      	movne	r3, #1
 80087b8:	0692      	lsls	r2, r2, #26
 80087ba:	d42b      	bmi.n	8008814 <_printf_common+0xb0>
 80087bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087c0:	4641      	mov	r1, r8
 80087c2:	4638      	mov	r0, r7
 80087c4:	47c8      	blx	r9
 80087c6:	3001      	adds	r0, #1
 80087c8:	d01e      	beq.n	8008808 <_printf_common+0xa4>
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	6922      	ldr	r2, [r4, #16]
 80087ce:	f003 0306 	and.w	r3, r3, #6
 80087d2:	2b04      	cmp	r3, #4
 80087d4:	bf02      	ittt	eq
 80087d6:	68e5      	ldreq	r5, [r4, #12]
 80087d8:	6833      	ldreq	r3, [r6, #0]
 80087da:	1aed      	subeq	r5, r5, r3
 80087dc:	68a3      	ldr	r3, [r4, #8]
 80087de:	bf0c      	ite	eq
 80087e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80087e4:	2500      	movne	r5, #0
 80087e6:	4293      	cmp	r3, r2
 80087e8:	bfc4      	itt	gt
 80087ea:	1a9b      	subgt	r3, r3, r2
 80087ec:	18ed      	addgt	r5, r5, r3
 80087ee:	2600      	movs	r6, #0
 80087f0:	341a      	adds	r4, #26
 80087f2:	42b5      	cmp	r5, r6
 80087f4:	d11a      	bne.n	800882c <_printf_common+0xc8>
 80087f6:	2000      	movs	r0, #0
 80087f8:	e008      	b.n	800880c <_printf_common+0xa8>
 80087fa:	2301      	movs	r3, #1
 80087fc:	4652      	mov	r2, sl
 80087fe:	4641      	mov	r1, r8
 8008800:	4638      	mov	r0, r7
 8008802:	47c8      	blx	r9
 8008804:	3001      	adds	r0, #1
 8008806:	d103      	bne.n	8008810 <_printf_common+0xac>
 8008808:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800880c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008810:	3501      	adds	r5, #1
 8008812:	e7c6      	b.n	80087a2 <_printf_common+0x3e>
 8008814:	18e1      	adds	r1, r4, r3
 8008816:	1c5a      	adds	r2, r3, #1
 8008818:	2030      	movs	r0, #48	@ 0x30
 800881a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800881e:	4422      	add	r2, r4
 8008820:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008824:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008828:	3302      	adds	r3, #2
 800882a:	e7c7      	b.n	80087bc <_printf_common+0x58>
 800882c:	2301      	movs	r3, #1
 800882e:	4622      	mov	r2, r4
 8008830:	4641      	mov	r1, r8
 8008832:	4638      	mov	r0, r7
 8008834:	47c8      	blx	r9
 8008836:	3001      	adds	r0, #1
 8008838:	d0e6      	beq.n	8008808 <_printf_common+0xa4>
 800883a:	3601      	adds	r6, #1
 800883c:	e7d9      	b.n	80087f2 <_printf_common+0x8e>
	...

08008840 <_printf_i>:
 8008840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008844:	7e0f      	ldrb	r7, [r1, #24]
 8008846:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008848:	2f78      	cmp	r7, #120	@ 0x78
 800884a:	4691      	mov	r9, r2
 800884c:	4680      	mov	r8, r0
 800884e:	460c      	mov	r4, r1
 8008850:	469a      	mov	sl, r3
 8008852:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008856:	d807      	bhi.n	8008868 <_printf_i+0x28>
 8008858:	2f62      	cmp	r7, #98	@ 0x62
 800885a:	d80a      	bhi.n	8008872 <_printf_i+0x32>
 800885c:	2f00      	cmp	r7, #0
 800885e:	f000 80d2 	beq.w	8008a06 <_printf_i+0x1c6>
 8008862:	2f58      	cmp	r7, #88	@ 0x58
 8008864:	f000 80b9 	beq.w	80089da <_printf_i+0x19a>
 8008868:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800886c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008870:	e03a      	b.n	80088e8 <_printf_i+0xa8>
 8008872:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008876:	2b15      	cmp	r3, #21
 8008878:	d8f6      	bhi.n	8008868 <_printf_i+0x28>
 800887a:	a101      	add	r1, pc, #4	@ (adr r1, 8008880 <_printf_i+0x40>)
 800887c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008880:	080088d9 	.word	0x080088d9
 8008884:	080088ed 	.word	0x080088ed
 8008888:	08008869 	.word	0x08008869
 800888c:	08008869 	.word	0x08008869
 8008890:	08008869 	.word	0x08008869
 8008894:	08008869 	.word	0x08008869
 8008898:	080088ed 	.word	0x080088ed
 800889c:	08008869 	.word	0x08008869
 80088a0:	08008869 	.word	0x08008869
 80088a4:	08008869 	.word	0x08008869
 80088a8:	08008869 	.word	0x08008869
 80088ac:	080089ed 	.word	0x080089ed
 80088b0:	08008917 	.word	0x08008917
 80088b4:	080089a7 	.word	0x080089a7
 80088b8:	08008869 	.word	0x08008869
 80088bc:	08008869 	.word	0x08008869
 80088c0:	08008a0f 	.word	0x08008a0f
 80088c4:	08008869 	.word	0x08008869
 80088c8:	08008917 	.word	0x08008917
 80088cc:	08008869 	.word	0x08008869
 80088d0:	08008869 	.word	0x08008869
 80088d4:	080089af 	.word	0x080089af
 80088d8:	6833      	ldr	r3, [r6, #0]
 80088da:	1d1a      	adds	r2, r3, #4
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	6032      	str	r2, [r6, #0]
 80088e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088e8:	2301      	movs	r3, #1
 80088ea:	e09d      	b.n	8008a28 <_printf_i+0x1e8>
 80088ec:	6833      	ldr	r3, [r6, #0]
 80088ee:	6820      	ldr	r0, [r4, #0]
 80088f0:	1d19      	adds	r1, r3, #4
 80088f2:	6031      	str	r1, [r6, #0]
 80088f4:	0606      	lsls	r6, r0, #24
 80088f6:	d501      	bpl.n	80088fc <_printf_i+0xbc>
 80088f8:	681d      	ldr	r5, [r3, #0]
 80088fa:	e003      	b.n	8008904 <_printf_i+0xc4>
 80088fc:	0645      	lsls	r5, r0, #25
 80088fe:	d5fb      	bpl.n	80088f8 <_printf_i+0xb8>
 8008900:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008904:	2d00      	cmp	r5, #0
 8008906:	da03      	bge.n	8008910 <_printf_i+0xd0>
 8008908:	232d      	movs	r3, #45	@ 0x2d
 800890a:	426d      	negs	r5, r5
 800890c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008910:	4859      	ldr	r0, [pc, #356]	@ (8008a78 <_printf_i+0x238>)
 8008912:	230a      	movs	r3, #10
 8008914:	e011      	b.n	800893a <_printf_i+0xfa>
 8008916:	6821      	ldr	r1, [r4, #0]
 8008918:	6833      	ldr	r3, [r6, #0]
 800891a:	0608      	lsls	r0, r1, #24
 800891c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008920:	d402      	bmi.n	8008928 <_printf_i+0xe8>
 8008922:	0649      	lsls	r1, r1, #25
 8008924:	bf48      	it	mi
 8008926:	b2ad      	uxthmi	r5, r5
 8008928:	2f6f      	cmp	r7, #111	@ 0x6f
 800892a:	4853      	ldr	r0, [pc, #332]	@ (8008a78 <_printf_i+0x238>)
 800892c:	6033      	str	r3, [r6, #0]
 800892e:	bf14      	ite	ne
 8008930:	230a      	movne	r3, #10
 8008932:	2308      	moveq	r3, #8
 8008934:	2100      	movs	r1, #0
 8008936:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800893a:	6866      	ldr	r6, [r4, #4]
 800893c:	60a6      	str	r6, [r4, #8]
 800893e:	2e00      	cmp	r6, #0
 8008940:	bfa2      	ittt	ge
 8008942:	6821      	ldrge	r1, [r4, #0]
 8008944:	f021 0104 	bicge.w	r1, r1, #4
 8008948:	6021      	strge	r1, [r4, #0]
 800894a:	b90d      	cbnz	r5, 8008950 <_printf_i+0x110>
 800894c:	2e00      	cmp	r6, #0
 800894e:	d04b      	beq.n	80089e8 <_printf_i+0x1a8>
 8008950:	4616      	mov	r6, r2
 8008952:	fbb5 f1f3 	udiv	r1, r5, r3
 8008956:	fb03 5711 	mls	r7, r3, r1, r5
 800895a:	5dc7      	ldrb	r7, [r0, r7]
 800895c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008960:	462f      	mov	r7, r5
 8008962:	42bb      	cmp	r3, r7
 8008964:	460d      	mov	r5, r1
 8008966:	d9f4      	bls.n	8008952 <_printf_i+0x112>
 8008968:	2b08      	cmp	r3, #8
 800896a:	d10b      	bne.n	8008984 <_printf_i+0x144>
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	07df      	lsls	r7, r3, #31
 8008970:	d508      	bpl.n	8008984 <_printf_i+0x144>
 8008972:	6923      	ldr	r3, [r4, #16]
 8008974:	6861      	ldr	r1, [r4, #4]
 8008976:	4299      	cmp	r1, r3
 8008978:	bfde      	ittt	le
 800897a:	2330      	movle	r3, #48	@ 0x30
 800897c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008980:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008984:	1b92      	subs	r2, r2, r6
 8008986:	6122      	str	r2, [r4, #16]
 8008988:	f8cd a000 	str.w	sl, [sp]
 800898c:	464b      	mov	r3, r9
 800898e:	aa03      	add	r2, sp, #12
 8008990:	4621      	mov	r1, r4
 8008992:	4640      	mov	r0, r8
 8008994:	f7ff fee6 	bl	8008764 <_printf_common>
 8008998:	3001      	adds	r0, #1
 800899a:	d14a      	bne.n	8008a32 <_printf_i+0x1f2>
 800899c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089a0:	b004      	add	sp, #16
 80089a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089a6:	6823      	ldr	r3, [r4, #0]
 80089a8:	f043 0320 	orr.w	r3, r3, #32
 80089ac:	6023      	str	r3, [r4, #0]
 80089ae:	4833      	ldr	r0, [pc, #204]	@ (8008a7c <_printf_i+0x23c>)
 80089b0:	2778      	movs	r7, #120	@ 0x78
 80089b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089b6:	6823      	ldr	r3, [r4, #0]
 80089b8:	6831      	ldr	r1, [r6, #0]
 80089ba:	061f      	lsls	r7, r3, #24
 80089bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80089c0:	d402      	bmi.n	80089c8 <_printf_i+0x188>
 80089c2:	065f      	lsls	r7, r3, #25
 80089c4:	bf48      	it	mi
 80089c6:	b2ad      	uxthmi	r5, r5
 80089c8:	6031      	str	r1, [r6, #0]
 80089ca:	07d9      	lsls	r1, r3, #31
 80089cc:	bf44      	itt	mi
 80089ce:	f043 0320 	orrmi.w	r3, r3, #32
 80089d2:	6023      	strmi	r3, [r4, #0]
 80089d4:	b11d      	cbz	r5, 80089de <_printf_i+0x19e>
 80089d6:	2310      	movs	r3, #16
 80089d8:	e7ac      	b.n	8008934 <_printf_i+0xf4>
 80089da:	4827      	ldr	r0, [pc, #156]	@ (8008a78 <_printf_i+0x238>)
 80089dc:	e7e9      	b.n	80089b2 <_printf_i+0x172>
 80089de:	6823      	ldr	r3, [r4, #0]
 80089e0:	f023 0320 	bic.w	r3, r3, #32
 80089e4:	6023      	str	r3, [r4, #0]
 80089e6:	e7f6      	b.n	80089d6 <_printf_i+0x196>
 80089e8:	4616      	mov	r6, r2
 80089ea:	e7bd      	b.n	8008968 <_printf_i+0x128>
 80089ec:	6833      	ldr	r3, [r6, #0]
 80089ee:	6825      	ldr	r5, [r4, #0]
 80089f0:	6961      	ldr	r1, [r4, #20]
 80089f2:	1d18      	adds	r0, r3, #4
 80089f4:	6030      	str	r0, [r6, #0]
 80089f6:	062e      	lsls	r6, r5, #24
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	d501      	bpl.n	8008a00 <_printf_i+0x1c0>
 80089fc:	6019      	str	r1, [r3, #0]
 80089fe:	e002      	b.n	8008a06 <_printf_i+0x1c6>
 8008a00:	0668      	lsls	r0, r5, #25
 8008a02:	d5fb      	bpl.n	80089fc <_printf_i+0x1bc>
 8008a04:	8019      	strh	r1, [r3, #0]
 8008a06:	2300      	movs	r3, #0
 8008a08:	6123      	str	r3, [r4, #16]
 8008a0a:	4616      	mov	r6, r2
 8008a0c:	e7bc      	b.n	8008988 <_printf_i+0x148>
 8008a0e:	6833      	ldr	r3, [r6, #0]
 8008a10:	1d1a      	adds	r2, r3, #4
 8008a12:	6032      	str	r2, [r6, #0]
 8008a14:	681e      	ldr	r6, [r3, #0]
 8008a16:	6862      	ldr	r2, [r4, #4]
 8008a18:	2100      	movs	r1, #0
 8008a1a:	4630      	mov	r0, r6
 8008a1c:	f7f7 fbd8 	bl	80001d0 <memchr>
 8008a20:	b108      	cbz	r0, 8008a26 <_printf_i+0x1e6>
 8008a22:	1b80      	subs	r0, r0, r6
 8008a24:	6060      	str	r0, [r4, #4]
 8008a26:	6863      	ldr	r3, [r4, #4]
 8008a28:	6123      	str	r3, [r4, #16]
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a30:	e7aa      	b.n	8008988 <_printf_i+0x148>
 8008a32:	6923      	ldr	r3, [r4, #16]
 8008a34:	4632      	mov	r2, r6
 8008a36:	4649      	mov	r1, r9
 8008a38:	4640      	mov	r0, r8
 8008a3a:	47d0      	blx	sl
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	d0ad      	beq.n	800899c <_printf_i+0x15c>
 8008a40:	6823      	ldr	r3, [r4, #0]
 8008a42:	079b      	lsls	r3, r3, #30
 8008a44:	d413      	bmi.n	8008a6e <_printf_i+0x22e>
 8008a46:	68e0      	ldr	r0, [r4, #12]
 8008a48:	9b03      	ldr	r3, [sp, #12]
 8008a4a:	4298      	cmp	r0, r3
 8008a4c:	bfb8      	it	lt
 8008a4e:	4618      	movlt	r0, r3
 8008a50:	e7a6      	b.n	80089a0 <_printf_i+0x160>
 8008a52:	2301      	movs	r3, #1
 8008a54:	4632      	mov	r2, r6
 8008a56:	4649      	mov	r1, r9
 8008a58:	4640      	mov	r0, r8
 8008a5a:	47d0      	blx	sl
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	d09d      	beq.n	800899c <_printf_i+0x15c>
 8008a60:	3501      	adds	r5, #1
 8008a62:	68e3      	ldr	r3, [r4, #12]
 8008a64:	9903      	ldr	r1, [sp, #12]
 8008a66:	1a5b      	subs	r3, r3, r1
 8008a68:	42ab      	cmp	r3, r5
 8008a6a:	dcf2      	bgt.n	8008a52 <_printf_i+0x212>
 8008a6c:	e7eb      	b.n	8008a46 <_printf_i+0x206>
 8008a6e:	2500      	movs	r5, #0
 8008a70:	f104 0619 	add.w	r6, r4, #25
 8008a74:	e7f5      	b.n	8008a62 <_printf_i+0x222>
 8008a76:	bf00      	nop
 8008a78:	0800af2a 	.word	0x0800af2a
 8008a7c:	0800af3b 	.word	0x0800af3b

08008a80 <siprintf>:
 8008a80:	b40e      	push	{r1, r2, r3}
 8008a82:	b500      	push	{lr}
 8008a84:	b09c      	sub	sp, #112	@ 0x70
 8008a86:	ab1d      	add	r3, sp, #116	@ 0x74
 8008a88:	9002      	str	r0, [sp, #8]
 8008a8a:	9006      	str	r0, [sp, #24]
 8008a8c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008a90:	4809      	ldr	r0, [pc, #36]	@ (8008ab8 <siprintf+0x38>)
 8008a92:	9107      	str	r1, [sp, #28]
 8008a94:	9104      	str	r1, [sp, #16]
 8008a96:	4909      	ldr	r1, [pc, #36]	@ (8008abc <siprintf+0x3c>)
 8008a98:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a9c:	9105      	str	r1, [sp, #20]
 8008a9e:	6800      	ldr	r0, [r0, #0]
 8008aa0:	9301      	str	r3, [sp, #4]
 8008aa2:	a902      	add	r1, sp, #8
 8008aa4:	f000 ffb0 	bl	8009a08 <_svfiprintf_r>
 8008aa8:	9b02      	ldr	r3, [sp, #8]
 8008aaa:	2200      	movs	r2, #0
 8008aac:	701a      	strb	r2, [r3, #0]
 8008aae:	b01c      	add	sp, #112	@ 0x70
 8008ab0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ab4:	b003      	add	sp, #12
 8008ab6:	4770      	bx	lr
 8008ab8:	20000018 	.word	0x20000018
 8008abc:	ffff0208 	.word	0xffff0208

08008ac0 <std>:
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	b510      	push	{r4, lr}
 8008ac4:	4604      	mov	r4, r0
 8008ac6:	e9c0 3300 	strd	r3, r3, [r0]
 8008aca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008ace:	6083      	str	r3, [r0, #8]
 8008ad0:	8181      	strh	r1, [r0, #12]
 8008ad2:	6643      	str	r3, [r0, #100]	@ 0x64
 8008ad4:	81c2      	strh	r2, [r0, #14]
 8008ad6:	6183      	str	r3, [r0, #24]
 8008ad8:	4619      	mov	r1, r3
 8008ada:	2208      	movs	r2, #8
 8008adc:	305c      	adds	r0, #92	@ 0x5c
 8008ade:	f000 f8b1 	bl	8008c44 <memset>
 8008ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8008b18 <std+0x58>)
 8008ae4:	6263      	str	r3, [r4, #36]	@ 0x24
 8008ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8008b1c <std+0x5c>)
 8008ae8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008aea:	4b0d      	ldr	r3, [pc, #52]	@ (8008b20 <std+0x60>)
 8008aec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008aee:	4b0d      	ldr	r3, [pc, #52]	@ (8008b24 <std+0x64>)
 8008af0:	6323      	str	r3, [r4, #48]	@ 0x30
 8008af2:	4b0d      	ldr	r3, [pc, #52]	@ (8008b28 <std+0x68>)
 8008af4:	6224      	str	r4, [r4, #32]
 8008af6:	429c      	cmp	r4, r3
 8008af8:	d006      	beq.n	8008b08 <std+0x48>
 8008afa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008afe:	4294      	cmp	r4, r2
 8008b00:	d002      	beq.n	8008b08 <std+0x48>
 8008b02:	33d0      	adds	r3, #208	@ 0xd0
 8008b04:	429c      	cmp	r4, r3
 8008b06:	d105      	bne.n	8008b14 <std+0x54>
 8008b08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b10:	f000 b8ce 	b.w	8008cb0 <__retarget_lock_init_recursive>
 8008b14:	bd10      	pop	{r4, pc}
 8008b16:	bf00      	nop
 8008b18:	0800a5c9 	.word	0x0800a5c9
 8008b1c:	0800a5eb 	.word	0x0800a5eb
 8008b20:	0800a623 	.word	0x0800a623
 8008b24:	0800a647 	.word	0x0800a647
 8008b28:	20000984 	.word	0x20000984

08008b2c <stdio_exit_handler>:
 8008b2c:	4a02      	ldr	r2, [pc, #8]	@ (8008b38 <stdio_exit_handler+0xc>)
 8008b2e:	4903      	ldr	r1, [pc, #12]	@ (8008b3c <stdio_exit_handler+0x10>)
 8008b30:	4803      	ldr	r0, [pc, #12]	@ (8008b40 <stdio_exit_handler+0x14>)
 8008b32:	f000 b869 	b.w	8008c08 <_fwalk_sglue>
 8008b36:	bf00      	nop
 8008b38:	2000000c 	.word	0x2000000c
 8008b3c:	08009e5d 	.word	0x08009e5d
 8008b40:	2000001c 	.word	0x2000001c

08008b44 <cleanup_stdio>:
 8008b44:	6841      	ldr	r1, [r0, #4]
 8008b46:	4b0c      	ldr	r3, [pc, #48]	@ (8008b78 <cleanup_stdio+0x34>)
 8008b48:	4299      	cmp	r1, r3
 8008b4a:	b510      	push	{r4, lr}
 8008b4c:	4604      	mov	r4, r0
 8008b4e:	d001      	beq.n	8008b54 <cleanup_stdio+0x10>
 8008b50:	f001 f984 	bl	8009e5c <_fflush_r>
 8008b54:	68a1      	ldr	r1, [r4, #8]
 8008b56:	4b09      	ldr	r3, [pc, #36]	@ (8008b7c <cleanup_stdio+0x38>)
 8008b58:	4299      	cmp	r1, r3
 8008b5a:	d002      	beq.n	8008b62 <cleanup_stdio+0x1e>
 8008b5c:	4620      	mov	r0, r4
 8008b5e:	f001 f97d 	bl	8009e5c <_fflush_r>
 8008b62:	68e1      	ldr	r1, [r4, #12]
 8008b64:	4b06      	ldr	r3, [pc, #24]	@ (8008b80 <cleanup_stdio+0x3c>)
 8008b66:	4299      	cmp	r1, r3
 8008b68:	d004      	beq.n	8008b74 <cleanup_stdio+0x30>
 8008b6a:	4620      	mov	r0, r4
 8008b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b70:	f001 b974 	b.w	8009e5c <_fflush_r>
 8008b74:	bd10      	pop	{r4, pc}
 8008b76:	bf00      	nop
 8008b78:	20000984 	.word	0x20000984
 8008b7c:	200009ec 	.word	0x200009ec
 8008b80:	20000a54 	.word	0x20000a54

08008b84 <global_stdio_init.part.0>:
 8008b84:	b510      	push	{r4, lr}
 8008b86:	4b0b      	ldr	r3, [pc, #44]	@ (8008bb4 <global_stdio_init.part.0+0x30>)
 8008b88:	4c0b      	ldr	r4, [pc, #44]	@ (8008bb8 <global_stdio_init.part.0+0x34>)
 8008b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8008bbc <global_stdio_init.part.0+0x38>)
 8008b8c:	601a      	str	r2, [r3, #0]
 8008b8e:	4620      	mov	r0, r4
 8008b90:	2200      	movs	r2, #0
 8008b92:	2104      	movs	r1, #4
 8008b94:	f7ff ff94 	bl	8008ac0 <std>
 8008b98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	2109      	movs	r1, #9
 8008ba0:	f7ff ff8e 	bl	8008ac0 <std>
 8008ba4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008ba8:	2202      	movs	r2, #2
 8008baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008bae:	2112      	movs	r1, #18
 8008bb0:	f7ff bf86 	b.w	8008ac0 <std>
 8008bb4:	20000abc 	.word	0x20000abc
 8008bb8:	20000984 	.word	0x20000984
 8008bbc:	08008b2d 	.word	0x08008b2d

08008bc0 <__sfp_lock_acquire>:
 8008bc0:	4801      	ldr	r0, [pc, #4]	@ (8008bc8 <__sfp_lock_acquire+0x8>)
 8008bc2:	f000 b876 	b.w	8008cb2 <__retarget_lock_acquire_recursive>
 8008bc6:	bf00      	nop
 8008bc8:	20000ac1 	.word	0x20000ac1

08008bcc <__sfp_lock_release>:
 8008bcc:	4801      	ldr	r0, [pc, #4]	@ (8008bd4 <__sfp_lock_release+0x8>)
 8008bce:	f000 b871 	b.w	8008cb4 <__retarget_lock_release_recursive>
 8008bd2:	bf00      	nop
 8008bd4:	20000ac1 	.word	0x20000ac1

08008bd8 <__sinit>:
 8008bd8:	b510      	push	{r4, lr}
 8008bda:	4604      	mov	r4, r0
 8008bdc:	f7ff fff0 	bl	8008bc0 <__sfp_lock_acquire>
 8008be0:	6a23      	ldr	r3, [r4, #32]
 8008be2:	b11b      	cbz	r3, 8008bec <__sinit+0x14>
 8008be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008be8:	f7ff bff0 	b.w	8008bcc <__sfp_lock_release>
 8008bec:	4b04      	ldr	r3, [pc, #16]	@ (8008c00 <__sinit+0x28>)
 8008bee:	6223      	str	r3, [r4, #32]
 8008bf0:	4b04      	ldr	r3, [pc, #16]	@ (8008c04 <__sinit+0x2c>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d1f5      	bne.n	8008be4 <__sinit+0xc>
 8008bf8:	f7ff ffc4 	bl	8008b84 <global_stdio_init.part.0>
 8008bfc:	e7f2      	b.n	8008be4 <__sinit+0xc>
 8008bfe:	bf00      	nop
 8008c00:	08008b45 	.word	0x08008b45
 8008c04:	20000abc 	.word	0x20000abc

08008c08 <_fwalk_sglue>:
 8008c08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c0c:	4607      	mov	r7, r0
 8008c0e:	4688      	mov	r8, r1
 8008c10:	4614      	mov	r4, r2
 8008c12:	2600      	movs	r6, #0
 8008c14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c18:	f1b9 0901 	subs.w	r9, r9, #1
 8008c1c:	d505      	bpl.n	8008c2a <_fwalk_sglue+0x22>
 8008c1e:	6824      	ldr	r4, [r4, #0]
 8008c20:	2c00      	cmp	r4, #0
 8008c22:	d1f7      	bne.n	8008c14 <_fwalk_sglue+0xc>
 8008c24:	4630      	mov	r0, r6
 8008c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c2a:	89ab      	ldrh	r3, [r5, #12]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d907      	bls.n	8008c40 <_fwalk_sglue+0x38>
 8008c30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c34:	3301      	adds	r3, #1
 8008c36:	d003      	beq.n	8008c40 <_fwalk_sglue+0x38>
 8008c38:	4629      	mov	r1, r5
 8008c3a:	4638      	mov	r0, r7
 8008c3c:	47c0      	blx	r8
 8008c3e:	4306      	orrs	r6, r0
 8008c40:	3568      	adds	r5, #104	@ 0x68
 8008c42:	e7e9      	b.n	8008c18 <_fwalk_sglue+0x10>

08008c44 <memset>:
 8008c44:	4402      	add	r2, r0
 8008c46:	4603      	mov	r3, r0
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d100      	bne.n	8008c4e <memset+0xa>
 8008c4c:	4770      	bx	lr
 8008c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c52:	e7f9      	b.n	8008c48 <memset+0x4>

08008c54 <_localeconv_r>:
 8008c54:	4800      	ldr	r0, [pc, #0]	@ (8008c58 <_localeconv_r+0x4>)
 8008c56:	4770      	bx	lr
 8008c58:	20000158 	.word	0x20000158

08008c5c <__errno>:
 8008c5c:	4b01      	ldr	r3, [pc, #4]	@ (8008c64 <__errno+0x8>)
 8008c5e:	6818      	ldr	r0, [r3, #0]
 8008c60:	4770      	bx	lr
 8008c62:	bf00      	nop
 8008c64:	20000018 	.word	0x20000018

08008c68 <__libc_init_array>:
 8008c68:	b570      	push	{r4, r5, r6, lr}
 8008c6a:	4d0d      	ldr	r5, [pc, #52]	@ (8008ca0 <__libc_init_array+0x38>)
 8008c6c:	4c0d      	ldr	r4, [pc, #52]	@ (8008ca4 <__libc_init_array+0x3c>)
 8008c6e:	1b64      	subs	r4, r4, r5
 8008c70:	10a4      	asrs	r4, r4, #2
 8008c72:	2600      	movs	r6, #0
 8008c74:	42a6      	cmp	r6, r4
 8008c76:	d109      	bne.n	8008c8c <__libc_init_array+0x24>
 8008c78:	4d0b      	ldr	r5, [pc, #44]	@ (8008ca8 <__libc_init_array+0x40>)
 8008c7a:	4c0c      	ldr	r4, [pc, #48]	@ (8008cac <__libc_init_array+0x44>)
 8008c7c:	f002 f8ee 	bl	800ae5c <_init>
 8008c80:	1b64      	subs	r4, r4, r5
 8008c82:	10a4      	asrs	r4, r4, #2
 8008c84:	2600      	movs	r6, #0
 8008c86:	42a6      	cmp	r6, r4
 8008c88:	d105      	bne.n	8008c96 <__libc_init_array+0x2e>
 8008c8a:	bd70      	pop	{r4, r5, r6, pc}
 8008c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c90:	4798      	blx	r3
 8008c92:	3601      	adds	r6, #1
 8008c94:	e7ee      	b.n	8008c74 <__libc_init_array+0xc>
 8008c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8008c9a:	4798      	blx	r3
 8008c9c:	3601      	adds	r6, #1
 8008c9e:	e7f2      	b.n	8008c86 <__libc_init_array+0x1e>
 8008ca0:	0800b290 	.word	0x0800b290
 8008ca4:	0800b290 	.word	0x0800b290
 8008ca8:	0800b290 	.word	0x0800b290
 8008cac:	0800b294 	.word	0x0800b294

08008cb0 <__retarget_lock_init_recursive>:
 8008cb0:	4770      	bx	lr

08008cb2 <__retarget_lock_acquire_recursive>:
 8008cb2:	4770      	bx	lr

08008cb4 <__retarget_lock_release_recursive>:
 8008cb4:	4770      	bx	lr

08008cb6 <quorem>:
 8008cb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cba:	6903      	ldr	r3, [r0, #16]
 8008cbc:	690c      	ldr	r4, [r1, #16]
 8008cbe:	42a3      	cmp	r3, r4
 8008cc0:	4607      	mov	r7, r0
 8008cc2:	db7e      	blt.n	8008dc2 <quorem+0x10c>
 8008cc4:	3c01      	subs	r4, #1
 8008cc6:	f101 0814 	add.w	r8, r1, #20
 8008cca:	00a3      	lsls	r3, r4, #2
 8008ccc:	f100 0514 	add.w	r5, r0, #20
 8008cd0:	9300      	str	r3, [sp, #0]
 8008cd2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cd6:	9301      	str	r3, [sp, #4]
 8008cd8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008cdc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ce0:	3301      	adds	r3, #1
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ce8:	fbb2 f6f3 	udiv	r6, r2, r3
 8008cec:	d32e      	bcc.n	8008d4c <quorem+0x96>
 8008cee:	f04f 0a00 	mov.w	sl, #0
 8008cf2:	46c4      	mov	ip, r8
 8008cf4:	46ae      	mov	lr, r5
 8008cf6:	46d3      	mov	fp, sl
 8008cf8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008cfc:	b298      	uxth	r0, r3
 8008cfe:	fb06 a000 	mla	r0, r6, r0, sl
 8008d02:	0c02      	lsrs	r2, r0, #16
 8008d04:	0c1b      	lsrs	r3, r3, #16
 8008d06:	fb06 2303 	mla	r3, r6, r3, r2
 8008d0a:	f8de 2000 	ldr.w	r2, [lr]
 8008d0e:	b280      	uxth	r0, r0
 8008d10:	b292      	uxth	r2, r2
 8008d12:	1a12      	subs	r2, r2, r0
 8008d14:	445a      	add	r2, fp
 8008d16:	f8de 0000 	ldr.w	r0, [lr]
 8008d1a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008d1e:	b29b      	uxth	r3, r3
 8008d20:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008d24:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008d28:	b292      	uxth	r2, r2
 8008d2a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008d2e:	45e1      	cmp	r9, ip
 8008d30:	f84e 2b04 	str.w	r2, [lr], #4
 8008d34:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008d38:	d2de      	bcs.n	8008cf8 <quorem+0x42>
 8008d3a:	9b00      	ldr	r3, [sp, #0]
 8008d3c:	58eb      	ldr	r3, [r5, r3]
 8008d3e:	b92b      	cbnz	r3, 8008d4c <quorem+0x96>
 8008d40:	9b01      	ldr	r3, [sp, #4]
 8008d42:	3b04      	subs	r3, #4
 8008d44:	429d      	cmp	r5, r3
 8008d46:	461a      	mov	r2, r3
 8008d48:	d32f      	bcc.n	8008daa <quorem+0xf4>
 8008d4a:	613c      	str	r4, [r7, #16]
 8008d4c:	4638      	mov	r0, r7
 8008d4e:	f001 fb33 	bl	800a3b8 <__mcmp>
 8008d52:	2800      	cmp	r0, #0
 8008d54:	db25      	blt.n	8008da2 <quorem+0xec>
 8008d56:	4629      	mov	r1, r5
 8008d58:	2000      	movs	r0, #0
 8008d5a:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d5e:	f8d1 c000 	ldr.w	ip, [r1]
 8008d62:	fa1f fe82 	uxth.w	lr, r2
 8008d66:	fa1f f38c 	uxth.w	r3, ip
 8008d6a:	eba3 030e 	sub.w	r3, r3, lr
 8008d6e:	4403      	add	r3, r0
 8008d70:	0c12      	lsrs	r2, r2, #16
 8008d72:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008d76:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d80:	45c1      	cmp	r9, r8
 8008d82:	f841 3b04 	str.w	r3, [r1], #4
 8008d86:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008d8a:	d2e6      	bcs.n	8008d5a <quorem+0xa4>
 8008d8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008d90:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008d94:	b922      	cbnz	r2, 8008da0 <quorem+0xea>
 8008d96:	3b04      	subs	r3, #4
 8008d98:	429d      	cmp	r5, r3
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	d30b      	bcc.n	8008db6 <quorem+0x100>
 8008d9e:	613c      	str	r4, [r7, #16]
 8008da0:	3601      	adds	r6, #1
 8008da2:	4630      	mov	r0, r6
 8008da4:	b003      	add	sp, #12
 8008da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008daa:	6812      	ldr	r2, [r2, #0]
 8008dac:	3b04      	subs	r3, #4
 8008dae:	2a00      	cmp	r2, #0
 8008db0:	d1cb      	bne.n	8008d4a <quorem+0x94>
 8008db2:	3c01      	subs	r4, #1
 8008db4:	e7c6      	b.n	8008d44 <quorem+0x8e>
 8008db6:	6812      	ldr	r2, [r2, #0]
 8008db8:	3b04      	subs	r3, #4
 8008dba:	2a00      	cmp	r2, #0
 8008dbc:	d1ef      	bne.n	8008d9e <quorem+0xe8>
 8008dbe:	3c01      	subs	r4, #1
 8008dc0:	e7ea      	b.n	8008d98 <quorem+0xe2>
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	e7ee      	b.n	8008da4 <quorem+0xee>
	...

08008dc8 <_dtoa_r>:
 8008dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dcc:	69c7      	ldr	r7, [r0, #28]
 8008dce:	b099      	sub	sp, #100	@ 0x64
 8008dd0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008dd4:	ec55 4b10 	vmov	r4, r5, d0
 8008dd8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008dda:	9109      	str	r1, [sp, #36]	@ 0x24
 8008ddc:	4683      	mov	fp, r0
 8008dde:	920e      	str	r2, [sp, #56]	@ 0x38
 8008de0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008de2:	b97f      	cbnz	r7, 8008e04 <_dtoa_r+0x3c>
 8008de4:	2010      	movs	r0, #16
 8008de6:	f000 ff0b 	bl	8009c00 <malloc>
 8008dea:	4602      	mov	r2, r0
 8008dec:	f8cb 001c 	str.w	r0, [fp, #28]
 8008df0:	b920      	cbnz	r0, 8008dfc <_dtoa_r+0x34>
 8008df2:	4ba7      	ldr	r3, [pc, #668]	@ (8009090 <_dtoa_r+0x2c8>)
 8008df4:	21ef      	movs	r1, #239	@ 0xef
 8008df6:	48a7      	ldr	r0, [pc, #668]	@ (8009094 <_dtoa_r+0x2cc>)
 8008df8:	f001 fcd6 	bl	800a7a8 <__assert_func>
 8008dfc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008e00:	6007      	str	r7, [r0, #0]
 8008e02:	60c7      	str	r7, [r0, #12]
 8008e04:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008e08:	6819      	ldr	r1, [r3, #0]
 8008e0a:	b159      	cbz	r1, 8008e24 <_dtoa_r+0x5c>
 8008e0c:	685a      	ldr	r2, [r3, #4]
 8008e0e:	604a      	str	r2, [r1, #4]
 8008e10:	2301      	movs	r3, #1
 8008e12:	4093      	lsls	r3, r2
 8008e14:	608b      	str	r3, [r1, #8]
 8008e16:	4658      	mov	r0, fp
 8008e18:	f001 f894 	bl	8009f44 <_Bfree>
 8008e1c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008e20:	2200      	movs	r2, #0
 8008e22:	601a      	str	r2, [r3, #0]
 8008e24:	1e2b      	subs	r3, r5, #0
 8008e26:	bfb9      	ittee	lt
 8008e28:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008e2c:	9303      	strlt	r3, [sp, #12]
 8008e2e:	2300      	movge	r3, #0
 8008e30:	6033      	strge	r3, [r6, #0]
 8008e32:	9f03      	ldr	r7, [sp, #12]
 8008e34:	4b98      	ldr	r3, [pc, #608]	@ (8009098 <_dtoa_r+0x2d0>)
 8008e36:	bfbc      	itt	lt
 8008e38:	2201      	movlt	r2, #1
 8008e3a:	6032      	strlt	r2, [r6, #0]
 8008e3c:	43bb      	bics	r3, r7
 8008e3e:	d112      	bne.n	8008e66 <_dtoa_r+0x9e>
 8008e40:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008e42:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008e46:	6013      	str	r3, [r2, #0]
 8008e48:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008e4c:	4323      	orrs	r3, r4
 8008e4e:	f000 854d 	beq.w	80098ec <_dtoa_r+0xb24>
 8008e52:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e54:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80090ac <_dtoa_r+0x2e4>
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	f000 854f 	beq.w	80098fc <_dtoa_r+0xb34>
 8008e5e:	f10a 0303 	add.w	r3, sl, #3
 8008e62:	f000 bd49 	b.w	80098f8 <_dtoa_r+0xb30>
 8008e66:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	ec51 0b17 	vmov	r0, r1, d7
 8008e70:	2300      	movs	r3, #0
 8008e72:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008e76:	f7f7 fe27 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e7a:	4680      	mov	r8, r0
 8008e7c:	b158      	cbz	r0, 8008e96 <_dtoa_r+0xce>
 8008e7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008e80:	2301      	movs	r3, #1
 8008e82:	6013      	str	r3, [r2, #0]
 8008e84:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008e86:	b113      	cbz	r3, 8008e8e <_dtoa_r+0xc6>
 8008e88:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008e8a:	4b84      	ldr	r3, [pc, #528]	@ (800909c <_dtoa_r+0x2d4>)
 8008e8c:	6013      	str	r3, [r2, #0]
 8008e8e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80090b0 <_dtoa_r+0x2e8>
 8008e92:	f000 bd33 	b.w	80098fc <_dtoa_r+0xb34>
 8008e96:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008e9a:	aa16      	add	r2, sp, #88	@ 0x58
 8008e9c:	a917      	add	r1, sp, #92	@ 0x5c
 8008e9e:	4658      	mov	r0, fp
 8008ea0:	f001 fb3a 	bl	800a518 <__d2b>
 8008ea4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008ea8:	4681      	mov	r9, r0
 8008eaa:	2e00      	cmp	r6, #0
 8008eac:	d077      	beq.n	8008f9e <_dtoa_r+0x1d6>
 8008eae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008eb0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008eb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ebc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008ec0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008ec4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008ec8:	4619      	mov	r1, r3
 8008eca:	2200      	movs	r2, #0
 8008ecc:	4b74      	ldr	r3, [pc, #464]	@ (80090a0 <_dtoa_r+0x2d8>)
 8008ece:	f7f7 f9db 	bl	8000288 <__aeabi_dsub>
 8008ed2:	a369      	add	r3, pc, #420	@ (adr r3, 8009078 <_dtoa_r+0x2b0>)
 8008ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed8:	f7f7 fb8e 	bl	80005f8 <__aeabi_dmul>
 8008edc:	a368      	add	r3, pc, #416	@ (adr r3, 8009080 <_dtoa_r+0x2b8>)
 8008ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ee2:	f7f7 f9d3 	bl	800028c <__adddf3>
 8008ee6:	4604      	mov	r4, r0
 8008ee8:	4630      	mov	r0, r6
 8008eea:	460d      	mov	r5, r1
 8008eec:	f7f7 fb1a 	bl	8000524 <__aeabi_i2d>
 8008ef0:	a365      	add	r3, pc, #404	@ (adr r3, 8009088 <_dtoa_r+0x2c0>)
 8008ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef6:	f7f7 fb7f 	bl	80005f8 <__aeabi_dmul>
 8008efa:	4602      	mov	r2, r0
 8008efc:	460b      	mov	r3, r1
 8008efe:	4620      	mov	r0, r4
 8008f00:	4629      	mov	r1, r5
 8008f02:	f7f7 f9c3 	bl	800028c <__adddf3>
 8008f06:	4604      	mov	r4, r0
 8008f08:	460d      	mov	r5, r1
 8008f0a:	f7f7 fe25 	bl	8000b58 <__aeabi_d2iz>
 8008f0e:	2200      	movs	r2, #0
 8008f10:	4607      	mov	r7, r0
 8008f12:	2300      	movs	r3, #0
 8008f14:	4620      	mov	r0, r4
 8008f16:	4629      	mov	r1, r5
 8008f18:	f7f7 fde0 	bl	8000adc <__aeabi_dcmplt>
 8008f1c:	b140      	cbz	r0, 8008f30 <_dtoa_r+0x168>
 8008f1e:	4638      	mov	r0, r7
 8008f20:	f7f7 fb00 	bl	8000524 <__aeabi_i2d>
 8008f24:	4622      	mov	r2, r4
 8008f26:	462b      	mov	r3, r5
 8008f28:	f7f7 fdce 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f2c:	b900      	cbnz	r0, 8008f30 <_dtoa_r+0x168>
 8008f2e:	3f01      	subs	r7, #1
 8008f30:	2f16      	cmp	r7, #22
 8008f32:	d851      	bhi.n	8008fd8 <_dtoa_r+0x210>
 8008f34:	4b5b      	ldr	r3, [pc, #364]	@ (80090a4 <_dtoa_r+0x2dc>)
 8008f36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008f42:	f7f7 fdcb 	bl	8000adc <__aeabi_dcmplt>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d048      	beq.n	8008fdc <_dtoa_r+0x214>
 8008f4a:	3f01      	subs	r7, #1
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	9312      	str	r3, [sp, #72]	@ 0x48
 8008f50:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008f52:	1b9b      	subs	r3, r3, r6
 8008f54:	1e5a      	subs	r2, r3, #1
 8008f56:	bf44      	itt	mi
 8008f58:	f1c3 0801 	rsbmi	r8, r3, #1
 8008f5c:	2300      	movmi	r3, #0
 8008f5e:	9208      	str	r2, [sp, #32]
 8008f60:	bf54      	ite	pl
 8008f62:	f04f 0800 	movpl.w	r8, #0
 8008f66:	9308      	strmi	r3, [sp, #32]
 8008f68:	2f00      	cmp	r7, #0
 8008f6a:	db39      	blt.n	8008fe0 <_dtoa_r+0x218>
 8008f6c:	9b08      	ldr	r3, [sp, #32]
 8008f6e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008f70:	443b      	add	r3, r7
 8008f72:	9308      	str	r3, [sp, #32]
 8008f74:	2300      	movs	r3, #0
 8008f76:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f7a:	2b09      	cmp	r3, #9
 8008f7c:	d864      	bhi.n	8009048 <_dtoa_r+0x280>
 8008f7e:	2b05      	cmp	r3, #5
 8008f80:	bfc4      	itt	gt
 8008f82:	3b04      	subgt	r3, #4
 8008f84:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f88:	f1a3 0302 	sub.w	r3, r3, #2
 8008f8c:	bfcc      	ite	gt
 8008f8e:	2400      	movgt	r4, #0
 8008f90:	2401      	movle	r4, #1
 8008f92:	2b03      	cmp	r3, #3
 8008f94:	d863      	bhi.n	800905e <_dtoa_r+0x296>
 8008f96:	e8df f003 	tbb	[pc, r3]
 8008f9a:	372a      	.short	0x372a
 8008f9c:	5535      	.short	0x5535
 8008f9e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008fa2:	441e      	add	r6, r3
 8008fa4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008fa8:	2b20      	cmp	r3, #32
 8008faa:	bfc1      	itttt	gt
 8008fac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008fb0:	409f      	lslgt	r7, r3
 8008fb2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008fb6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008fba:	bfd6      	itet	le
 8008fbc:	f1c3 0320 	rsble	r3, r3, #32
 8008fc0:	ea47 0003 	orrgt.w	r0, r7, r3
 8008fc4:	fa04 f003 	lslle.w	r0, r4, r3
 8008fc8:	f7f7 fa9c 	bl	8000504 <__aeabi_ui2d>
 8008fcc:	2201      	movs	r2, #1
 8008fce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008fd2:	3e01      	subs	r6, #1
 8008fd4:	9214      	str	r2, [sp, #80]	@ 0x50
 8008fd6:	e777      	b.n	8008ec8 <_dtoa_r+0x100>
 8008fd8:	2301      	movs	r3, #1
 8008fda:	e7b8      	b.n	8008f4e <_dtoa_r+0x186>
 8008fdc:	9012      	str	r0, [sp, #72]	@ 0x48
 8008fde:	e7b7      	b.n	8008f50 <_dtoa_r+0x188>
 8008fe0:	427b      	negs	r3, r7
 8008fe2:	930a      	str	r3, [sp, #40]	@ 0x28
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	eba8 0807 	sub.w	r8, r8, r7
 8008fea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008fec:	e7c4      	b.n	8008f78 <_dtoa_r+0x1b0>
 8008fee:	2300      	movs	r3, #0
 8008ff0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ff2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	dc35      	bgt.n	8009064 <_dtoa_r+0x29c>
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	9307      	str	r3, [sp, #28]
 8008ffe:	461a      	mov	r2, r3
 8009000:	920e      	str	r2, [sp, #56]	@ 0x38
 8009002:	e00b      	b.n	800901c <_dtoa_r+0x254>
 8009004:	2301      	movs	r3, #1
 8009006:	e7f3      	b.n	8008ff0 <_dtoa_r+0x228>
 8009008:	2300      	movs	r3, #0
 800900a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800900c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800900e:	18fb      	adds	r3, r7, r3
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	3301      	adds	r3, #1
 8009014:	2b01      	cmp	r3, #1
 8009016:	9307      	str	r3, [sp, #28]
 8009018:	bfb8      	it	lt
 800901a:	2301      	movlt	r3, #1
 800901c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009020:	2100      	movs	r1, #0
 8009022:	2204      	movs	r2, #4
 8009024:	f102 0514 	add.w	r5, r2, #20
 8009028:	429d      	cmp	r5, r3
 800902a:	d91f      	bls.n	800906c <_dtoa_r+0x2a4>
 800902c:	6041      	str	r1, [r0, #4]
 800902e:	4658      	mov	r0, fp
 8009030:	f000 ff48 	bl	8009ec4 <_Balloc>
 8009034:	4682      	mov	sl, r0
 8009036:	2800      	cmp	r0, #0
 8009038:	d13c      	bne.n	80090b4 <_dtoa_r+0x2ec>
 800903a:	4b1b      	ldr	r3, [pc, #108]	@ (80090a8 <_dtoa_r+0x2e0>)
 800903c:	4602      	mov	r2, r0
 800903e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009042:	e6d8      	b.n	8008df6 <_dtoa_r+0x2e>
 8009044:	2301      	movs	r3, #1
 8009046:	e7e0      	b.n	800900a <_dtoa_r+0x242>
 8009048:	2401      	movs	r4, #1
 800904a:	2300      	movs	r3, #0
 800904c:	9309      	str	r3, [sp, #36]	@ 0x24
 800904e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009050:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009054:	9300      	str	r3, [sp, #0]
 8009056:	9307      	str	r3, [sp, #28]
 8009058:	2200      	movs	r2, #0
 800905a:	2312      	movs	r3, #18
 800905c:	e7d0      	b.n	8009000 <_dtoa_r+0x238>
 800905e:	2301      	movs	r3, #1
 8009060:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009062:	e7f5      	b.n	8009050 <_dtoa_r+0x288>
 8009064:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	9307      	str	r3, [sp, #28]
 800906a:	e7d7      	b.n	800901c <_dtoa_r+0x254>
 800906c:	3101      	adds	r1, #1
 800906e:	0052      	lsls	r2, r2, #1
 8009070:	e7d8      	b.n	8009024 <_dtoa_r+0x25c>
 8009072:	bf00      	nop
 8009074:	f3af 8000 	nop.w
 8009078:	636f4361 	.word	0x636f4361
 800907c:	3fd287a7 	.word	0x3fd287a7
 8009080:	8b60c8b3 	.word	0x8b60c8b3
 8009084:	3fc68a28 	.word	0x3fc68a28
 8009088:	509f79fb 	.word	0x509f79fb
 800908c:	3fd34413 	.word	0x3fd34413
 8009090:	0800af59 	.word	0x0800af59
 8009094:	0800af70 	.word	0x0800af70
 8009098:	7ff00000 	.word	0x7ff00000
 800909c:	0800af29 	.word	0x0800af29
 80090a0:	3ff80000 	.word	0x3ff80000
 80090a4:	0800b078 	.word	0x0800b078
 80090a8:	0800afc8 	.word	0x0800afc8
 80090ac:	0800af55 	.word	0x0800af55
 80090b0:	0800af28 	.word	0x0800af28
 80090b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80090b8:	6018      	str	r0, [r3, #0]
 80090ba:	9b07      	ldr	r3, [sp, #28]
 80090bc:	2b0e      	cmp	r3, #14
 80090be:	f200 80a4 	bhi.w	800920a <_dtoa_r+0x442>
 80090c2:	2c00      	cmp	r4, #0
 80090c4:	f000 80a1 	beq.w	800920a <_dtoa_r+0x442>
 80090c8:	2f00      	cmp	r7, #0
 80090ca:	dd33      	ble.n	8009134 <_dtoa_r+0x36c>
 80090cc:	4bad      	ldr	r3, [pc, #692]	@ (8009384 <_dtoa_r+0x5bc>)
 80090ce:	f007 020f 	and.w	r2, r7, #15
 80090d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090d6:	ed93 7b00 	vldr	d7, [r3]
 80090da:	05f8      	lsls	r0, r7, #23
 80090dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80090e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80090e4:	d516      	bpl.n	8009114 <_dtoa_r+0x34c>
 80090e6:	4ba8      	ldr	r3, [pc, #672]	@ (8009388 <_dtoa_r+0x5c0>)
 80090e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80090f0:	f7f7 fbac 	bl	800084c <__aeabi_ddiv>
 80090f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090f8:	f004 040f 	and.w	r4, r4, #15
 80090fc:	2603      	movs	r6, #3
 80090fe:	4da2      	ldr	r5, [pc, #648]	@ (8009388 <_dtoa_r+0x5c0>)
 8009100:	b954      	cbnz	r4, 8009118 <_dtoa_r+0x350>
 8009102:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009106:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800910a:	f7f7 fb9f 	bl	800084c <__aeabi_ddiv>
 800910e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009112:	e028      	b.n	8009166 <_dtoa_r+0x39e>
 8009114:	2602      	movs	r6, #2
 8009116:	e7f2      	b.n	80090fe <_dtoa_r+0x336>
 8009118:	07e1      	lsls	r1, r4, #31
 800911a:	d508      	bpl.n	800912e <_dtoa_r+0x366>
 800911c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009120:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009124:	f7f7 fa68 	bl	80005f8 <__aeabi_dmul>
 8009128:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800912c:	3601      	adds	r6, #1
 800912e:	1064      	asrs	r4, r4, #1
 8009130:	3508      	adds	r5, #8
 8009132:	e7e5      	b.n	8009100 <_dtoa_r+0x338>
 8009134:	f000 80d2 	beq.w	80092dc <_dtoa_r+0x514>
 8009138:	427c      	negs	r4, r7
 800913a:	4b92      	ldr	r3, [pc, #584]	@ (8009384 <_dtoa_r+0x5bc>)
 800913c:	4d92      	ldr	r5, [pc, #584]	@ (8009388 <_dtoa_r+0x5c0>)
 800913e:	f004 020f 	and.w	r2, r4, #15
 8009142:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800914e:	f7f7 fa53 	bl	80005f8 <__aeabi_dmul>
 8009152:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009156:	1124      	asrs	r4, r4, #4
 8009158:	2300      	movs	r3, #0
 800915a:	2602      	movs	r6, #2
 800915c:	2c00      	cmp	r4, #0
 800915e:	f040 80b2 	bne.w	80092c6 <_dtoa_r+0x4fe>
 8009162:	2b00      	cmp	r3, #0
 8009164:	d1d3      	bne.n	800910e <_dtoa_r+0x346>
 8009166:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009168:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800916c:	2b00      	cmp	r3, #0
 800916e:	f000 80b7 	beq.w	80092e0 <_dtoa_r+0x518>
 8009172:	4b86      	ldr	r3, [pc, #536]	@ (800938c <_dtoa_r+0x5c4>)
 8009174:	2200      	movs	r2, #0
 8009176:	4620      	mov	r0, r4
 8009178:	4629      	mov	r1, r5
 800917a:	f7f7 fcaf 	bl	8000adc <__aeabi_dcmplt>
 800917e:	2800      	cmp	r0, #0
 8009180:	f000 80ae 	beq.w	80092e0 <_dtoa_r+0x518>
 8009184:	9b07      	ldr	r3, [sp, #28]
 8009186:	2b00      	cmp	r3, #0
 8009188:	f000 80aa 	beq.w	80092e0 <_dtoa_r+0x518>
 800918c:	9b00      	ldr	r3, [sp, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	dd37      	ble.n	8009202 <_dtoa_r+0x43a>
 8009192:	1e7b      	subs	r3, r7, #1
 8009194:	9304      	str	r3, [sp, #16]
 8009196:	4620      	mov	r0, r4
 8009198:	4b7d      	ldr	r3, [pc, #500]	@ (8009390 <_dtoa_r+0x5c8>)
 800919a:	2200      	movs	r2, #0
 800919c:	4629      	mov	r1, r5
 800919e:	f7f7 fa2b 	bl	80005f8 <__aeabi_dmul>
 80091a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80091a6:	9c00      	ldr	r4, [sp, #0]
 80091a8:	3601      	adds	r6, #1
 80091aa:	4630      	mov	r0, r6
 80091ac:	f7f7 f9ba 	bl	8000524 <__aeabi_i2d>
 80091b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091b4:	f7f7 fa20 	bl	80005f8 <__aeabi_dmul>
 80091b8:	4b76      	ldr	r3, [pc, #472]	@ (8009394 <_dtoa_r+0x5cc>)
 80091ba:	2200      	movs	r2, #0
 80091bc:	f7f7 f866 	bl	800028c <__adddf3>
 80091c0:	4605      	mov	r5, r0
 80091c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80091c6:	2c00      	cmp	r4, #0
 80091c8:	f040 808d 	bne.w	80092e6 <_dtoa_r+0x51e>
 80091cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091d0:	4b71      	ldr	r3, [pc, #452]	@ (8009398 <_dtoa_r+0x5d0>)
 80091d2:	2200      	movs	r2, #0
 80091d4:	f7f7 f858 	bl	8000288 <__aeabi_dsub>
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80091e0:	462a      	mov	r2, r5
 80091e2:	4633      	mov	r3, r6
 80091e4:	f7f7 fc98 	bl	8000b18 <__aeabi_dcmpgt>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	f040 828b 	bne.w	8009704 <_dtoa_r+0x93c>
 80091ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091f2:	462a      	mov	r2, r5
 80091f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80091f8:	f7f7 fc70 	bl	8000adc <__aeabi_dcmplt>
 80091fc:	2800      	cmp	r0, #0
 80091fe:	f040 8128 	bne.w	8009452 <_dtoa_r+0x68a>
 8009202:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009206:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800920a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800920c:	2b00      	cmp	r3, #0
 800920e:	f2c0 815a 	blt.w	80094c6 <_dtoa_r+0x6fe>
 8009212:	2f0e      	cmp	r7, #14
 8009214:	f300 8157 	bgt.w	80094c6 <_dtoa_r+0x6fe>
 8009218:	4b5a      	ldr	r3, [pc, #360]	@ (8009384 <_dtoa_r+0x5bc>)
 800921a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800921e:	ed93 7b00 	vldr	d7, [r3]
 8009222:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009224:	2b00      	cmp	r3, #0
 8009226:	ed8d 7b00 	vstr	d7, [sp]
 800922a:	da03      	bge.n	8009234 <_dtoa_r+0x46c>
 800922c:	9b07      	ldr	r3, [sp, #28]
 800922e:	2b00      	cmp	r3, #0
 8009230:	f340 8101 	ble.w	8009436 <_dtoa_r+0x66e>
 8009234:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009238:	4656      	mov	r6, sl
 800923a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800923e:	4620      	mov	r0, r4
 8009240:	4629      	mov	r1, r5
 8009242:	f7f7 fb03 	bl	800084c <__aeabi_ddiv>
 8009246:	f7f7 fc87 	bl	8000b58 <__aeabi_d2iz>
 800924a:	4680      	mov	r8, r0
 800924c:	f7f7 f96a 	bl	8000524 <__aeabi_i2d>
 8009250:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009254:	f7f7 f9d0 	bl	80005f8 <__aeabi_dmul>
 8009258:	4602      	mov	r2, r0
 800925a:	460b      	mov	r3, r1
 800925c:	4620      	mov	r0, r4
 800925e:	4629      	mov	r1, r5
 8009260:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009264:	f7f7 f810 	bl	8000288 <__aeabi_dsub>
 8009268:	f806 4b01 	strb.w	r4, [r6], #1
 800926c:	9d07      	ldr	r5, [sp, #28]
 800926e:	eba6 040a 	sub.w	r4, r6, sl
 8009272:	42a5      	cmp	r5, r4
 8009274:	4602      	mov	r2, r0
 8009276:	460b      	mov	r3, r1
 8009278:	f040 8117 	bne.w	80094aa <_dtoa_r+0x6e2>
 800927c:	f7f7 f806 	bl	800028c <__adddf3>
 8009280:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009284:	4604      	mov	r4, r0
 8009286:	460d      	mov	r5, r1
 8009288:	f7f7 fc46 	bl	8000b18 <__aeabi_dcmpgt>
 800928c:	2800      	cmp	r0, #0
 800928e:	f040 80f9 	bne.w	8009484 <_dtoa_r+0x6bc>
 8009292:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009296:	4620      	mov	r0, r4
 8009298:	4629      	mov	r1, r5
 800929a:	f7f7 fc15 	bl	8000ac8 <__aeabi_dcmpeq>
 800929e:	b118      	cbz	r0, 80092a8 <_dtoa_r+0x4e0>
 80092a0:	f018 0f01 	tst.w	r8, #1
 80092a4:	f040 80ee 	bne.w	8009484 <_dtoa_r+0x6bc>
 80092a8:	4649      	mov	r1, r9
 80092aa:	4658      	mov	r0, fp
 80092ac:	f000 fe4a 	bl	8009f44 <_Bfree>
 80092b0:	2300      	movs	r3, #0
 80092b2:	7033      	strb	r3, [r6, #0]
 80092b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80092b6:	3701      	adds	r7, #1
 80092b8:	601f      	str	r7, [r3, #0]
 80092ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80092bc:	2b00      	cmp	r3, #0
 80092be:	f000 831d 	beq.w	80098fc <_dtoa_r+0xb34>
 80092c2:	601e      	str	r6, [r3, #0]
 80092c4:	e31a      	b.n	80098fc <_dtoa_r+0xb34>
 80092c6:	07e2      	lsls	r2, r4, #31
 80092c8:	d505      	bpl.n	80092d6 <_dtoa_r+0x50e>
 80092ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 80092ce:	f7f7 f993 	bl	80005f8 <__aeabi_dmul>
 80092d2:	3601      	adds	r6, #1
 80092d4:	2301      	movs	r3, #1
 80092d6:	1064      	asrs	r4, r4, #1
 80092d8:	3508      	adds	r5, #8
 80092da:	e73f      	b.n	800915c <_dtoa_r+0x394>
 80092dc:	2602      	movs	r6, #2
 80092de:	e742      	b.n	8009166 <_dtoa_r+0x39e>
 80092e0:	9c07      	ldr	r4, [sp, #28]
 80092e2:	9704      	str	r7, [sp, #16]
 80092e4:	e761      	b.n	80091aa <_dtoa_r+0x3e2>
 80092e6:	4b27      	ldr	r3, [pc, #156]	@ (8009384 <_dtoa_r+0x5bc>)
 80092e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80092ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80092ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80092f2:	4454      	add	r4, sl
 80092f4:	2900      	cmp	r1, #0
 80092f6:	d053      	beq.n	80093a0 <_dtoa_r+0x5d8>
 80092f8:	4928      	ldr	r1, [pc, #160]	@ (800939c <_dtoa_r+0x5d4>)
 80092fa:	2000      	movs	r0, #0
 80092fc:	f7f7 faa6 	bl	800084c <__aeabi_ddiv>
 8009300:	4633      	mov	r3, r6
 8009302:	462a      	mov	r2, r5
 8009304:	f7f6 ffc0 	bl	8000288 <__aeabi_dsub>
 8009308:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800930c:	4656      	mov	r6, sl
 800930e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009312:	f7f7 fc21 	bl	8000b58 <__aeabi_d2iz>
 8009316:	4605      	mov	r5, r0
 8009318:	f7f7 f904 	bl	8000524 <__aeabi_i2d>
 800931c:	4602      	mov	r2, r0
 800931e:	460b      	mov	r3, r1
 8009320:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009324:	f7f6 ffb0 	bl	8000288 <__aeabi_dsub>
 8009328:	3530      	adds	r5, #48	@ 0x30
 800932a:	4602      	mov	r2, r0
 800932c:	460b      	mov	r3, r1
 800932e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009332:	f806 5b01 	strb.w	r5, [r6], #1
 8009336:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800933a:	f7f7 fbcf 	bl	8000adc <__aeabi_dcmplt>
 800933e:	2800      	cmp	r0, #0
 8009340:	d171      	bne.n	8009426 <_dtoa_r+0x65e>
 8009342:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009346:	4911      	ldr	r1, [pc, #68]	@ (800938c <_dtoa_r+0x5c4>)
 8009348:	2000      	movs	r0, #0
 800934a:	f7f6 ff9d 	bl	8000288 <__aeabi_dsub>
 800934e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009352:	f7f7 fbc3 	bl	8000adc <__aeabi_dcmplt>
 8009356:	2800      	cmp	r0, #0
 8009358:	f040 8095 	bne.w	8009486 <_dtoa_r+0x6be>
 800935c:	42a6      	cmp	r6, r4
 800935e:	f43f af50 	beq.w	8009202 <_dtoa_r+0x43a>
 8009362:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009366:	4b0a      	ldr	r3, [pc, #40]	@ (8009390 <_dtoa_r+0x5c8>)
 8009368:	2200      	movs	r2, #0
 800936a:	f7f7 f945 	bl	80005f8 <__aeabi_dmul>
 800936e:	4b08      	ldr	r3, [pc, #32]	@ (8009390 <_dtoa_r+0x5c8>)
 8009370:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009374:	2200      	movs	r2, #0
 8009376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800937a:	f7f7 f93d 	bl	80005f8 <__aeabi_dmul>
 800937e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009382:	e7c4      	b.n	800930e <_dtoa_r+0x546>
 8009384:	0800b078 	.word	0x0800b078
 8009388:	0800b050 	.word	0x0800b050
 800938c:	3ff00000 	.word	0x3ff00000
 8009390:	40240000 	.word	0x40240000
 8009394:	401c0000 	.word	0x401c0000
 8009398:	40140000 	.word	0x40140000
 800939c:	3fe00000 	.word	0x3fe00000
 80093a0:	4631      	mov	r1, r6
 80093a2:	4628      	mov	r0, r5
 80093a4:	f7f7 f928 	bl	80005f8 <__aeabi_dmul>
 80093a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80093ac:	9415      	str	r4, [sp, #84]	@ 0x54
 80093ae:	4656      	mov	r6, sl
 80093b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093b4:	f7f7 fbd0 	bl	8000b58 <__aeabi_d2iz>
 80093b8:	4605      	mov	r5, r0
 80093ba:	f7f7 f8b3 	bl	8000524 <__aeabi_i2d>
 80093be:	4602      	mov	r2, r0
 80093c0:	460b      	mov	r3, r1
 80093c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093c6:	f7f6 ff5f 	bl	8000288 <__aeabi_dsub>
 80093ca:	3530      	adds	r5, #48	@ 0x30
 80093cc:	f806 5b01 	strb.w	r5, [r6], #1
 80093d0:	4602      	mov	r2, r0
 80093d2:	460b      	mov	r3, r1
 80093d4:	42a6      	cmp	r6, r4
 80093d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80093da:	f04f 0200 	mov.w	r2, #0
 80093de:	d124      	bne.n	800942a <_dtoa_r+0x662>
 80093e0:	4bac      	ldr	r3, [pc, #688]	@ (8009694 <_dtoa_r+0x8cc>)
 80093e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80093e6:	f7f6 ff51 	bl	800028c <__adddf3>
 80093ea:	4602      	mov	r2, r0
 80093ec:	460b      	mov	r3, r1
 80093ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093f2:	f7f7 fb91 	bl	8000b18 <__aeabi_dcmpgt>
 80093f6:	2800      	cmp	r0, #0
 80093f8:	d145      	bne.n	8009486 <_dtoa_r+0x6be>
 80093fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80093fe:	49a5      	ldr	r1, [pc, #660]	@ (8009694 <_dtoa_r+0x8cc>)
 8009400:	2000      	movs	r0, #0
 8009402:	f7f6 ff41 	bl	8000288 <__aeabi_dsub>
 8009406:	4602      	mov	r2, r0
 8009408:	460b      	mov	r3, r1
 800940a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800940e:	f7f7 fb65 	bl	8000adc <__aeabi_dcmplt>
 8009412:	2800      	cmp	r0, #0
 8009414:	f43f aef5 	beq.w	8009202 <_dtoa_r+0x43a>
 8009418:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800941a:	1e73      	subs	r3, r6, #1
 800941c:	9315      	str	r3, [sp, #84]	@ 0x54
 800941e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009422:	2b30      	cmp	r3, #48	@ 0x30
 8009424:	d0f8      	beq.n	8009418 <_dtoa_r+0x650>
 8009426:	9f04      	ldr	r7, [sp, #16]
 8009428:	e73e      	b.n	80092a8 <_dtoa_r+0x4e0>
 800942a:	4b9b      	ldr	r3, [pc, #620]	@ (8009698 <_dtoa_r+0x8d0>)
 800942c:	f7f7 f8e4 	bl	80005f8 <__aeabi_dmul>
 8009430:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009434:	e7bc      	b.n	80093b0 <_dtoa_r+0x5e8>
 8009436:	d10c      	bne.n	8009452 <_dtoa_r+0x68a>
 8009438:	4b98      	ldr	r3, [pc, #608]	@ (800969c <_dtoa_r+0x8d4>)
 800943a:	2200      	movs	r2, #0
 800943c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009440:	f7f7 f8da 	bl	80005f8 <__aeabi_dmul>
 8009444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009448:	f7f7 fb5c 	bl	8000b04 <__aeabi_dcmpge>
 800944c:	2800      	cmp	r0, #0
 800944e:	f000 8157 	beq.w	8009700 <_dtoa_r+0x938>
 8009452:	2400      	movs	r4, #0
 8009454:	4625      	mov	r5, r4
 8009456:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009458:	43db      	mvns	r3, r3
 800945a:	9304      	str	r3, [sp, #16]
 800945c:	4656      	mov	r6, sl
 800945e:	2700      	movs	r7, #0
 8009460:	4621      	mov	r1, r4
 8009462:	4658      	mov	r0, fp
 8009464:	f000 fd6e 	bl	8009f44 <_Bfree>
 8009468:	2d00      	cmp	r5, #0
 800946a:	d0dc      	beq.n	8009426 <_dtoa_r+0x65e>
 800946c:	b12f      	cbz	r7, 800947a <_dtoa_r+0x6b2>
 800946e:	42af      	cmp	r7, r5
 8009470:	d003      	beq.n	800947a <_dtoa_r+0x6b2>
 8009472:	4639      	mov	r1, r7
 8009474:	4658      	mov	r0, fp
 8009476:	f000 fd65 	bl	8009f44 <_Bfree>
 800947a:	4629      	mov	r1, r5
 800947c:	4658      	mov	r0, fp
 800947e:	f000 fd61 	bl	8009f44 <_Bfree>
 8009482:	e7d0      	b.n	8009426 <_dtoa_r+0x65e>
 8009484:	9704      	str	r7, [sp, #16]
 8009486:	4633      	mov	r3, r6
 8009488:	461e      	mov	r6, r3
 800948a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800948e:	2a39      	cmp	r2, #57	@ 0x39
 8009490:	d107      	bne.n	80094a2 <_dtoa_r+0x6da>
 8009492:	459a      	cmp	sl, r3
 8009494:	d1f8      	bne.n	8009488 <_dtoa_r+0x6c0>
 8009496:	9a04      	ldr	r2, [sp, #16]
 8009498:	3201      	adds	r2, #1
 800949a:	9204      	str	r2, [sp, #16]
 800949c:	2230      	movs	r2, #48	@ 0x30
 800949e:	f88a 2000 	strb.w	r2, [sl]
 80094a2:	781a      	ldrb	r2, [r3, #0]
 80094a4:	3201      	adds	r2, #1
 80094a6:	701a      	strb	r2, [r3, #0]
 80094a8:	e7bd      	b.n	8009426 <_dtoa_r+0x65e>
 80094aa:	4b7b      	ldr	r3, [pc, #492]	@ (8009698 <_dtoa_r+0x8d0>)
 80094ac:	2200      	movs	r2, #0
 80094ae:	f7f7 f8a3 	bl	80005f8 <__aeabi_dmul>
 80094b2:	2200      	movs	r2, #0
 80094b4:	2300      	movs	r3, #0
 80094b6:	4604      	mov	r4, r0
 80094b8:	460d      	mov	r5, r1
 80094ba:	f7f7 fb05 	bl	8000ac8 <__aeabi_dcmpeq>
 80094be:	2800      	cmp	r0, #0
 80094c0:	f43f aebb 	beq.w	800923a <_dtoa_r+0x472>
 80094c4:	e6f0      	b.n	80092a8 <_dtoa_r+0x4e0>
 80094c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80094c8:	2a00      	cmp	r2, #0
 80094ca:	f000 80db 	beq.w	8009684 <_dtoa_r+0x8bc>
 80094ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094d0:	2a01      	cmp	r2, #1
 80094d2:	f300 80bf 	bgt.w	8009654 <_dtoa_r+0x88c>
 80094d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80094d8:	2a00      	cmp	r2, #0
 80094da:	f000 80b7 	beq.w	800964c <_dtoa_r+0x884>
 80094de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80094e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80094e4:	4646      	mov	r6, r8
 80094e6:	9a08      	ldr	r2, [sp, #32]
 80094e8:	2101      	movs	r1, #1
 80094ea:	441a      	add	r2, r3
 80094ec:	4658      	mov	r0, fp
 80094ee:	4498      	add	r8, r3
 80094f0:	9208      	str	r2, [sp, #32]
 80094f2:	f000 fddb 	bl	800a0ac <__i2b>
 80094f6:	4605      	mov	r5, r0
 80094f8:	b15e      	cbz	r6, 8009512 <_dtoa_r+0x74a>
 80094fa:	9b08      	ldr	r3, [sp, #32]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	dd08      	ble.n	8009512 <_dtoa_r+0x74a>
 8009500:	42b3      	cmp	r3, r6
 8009502:	9a08      	ldr	r2, [sp, #32]
 8009504:	bfa8      	it	ge
 8009506:	4633      	movge	r3, r6
 8009508:	eba8 0803 	sub.w	r8, r8, r3
 800950c:	1af6      	subs	r6, r6, r3
 800950e:	1ad3      	subs	r3, r2, r3
 8009510:	9308      	str	r3, [sp, #32]
 8009512:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009514:	b1f3      	cbz	r3, 8009554 <_dtoa_r+0x78c>
 8009516:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009518:	2b00      	cmp	r3, #0
 800951a:	f000 80b7 	beq.w	800968c <_dtoa_r+0x8c4>
 800951e:	b18c      	cbz	r4, 8009544 <_dtoa_r+0x77c>
 8009520:	4629      	mov	r1, r5
 8009522:	4622      	mov	r2, r4
 8009524:	4658      	mov	r0, fp
 8009526:	f000 fe81 	bl	800a22c <__pow5mult>
 800952a:	464a      	mov	r2, r9
 800952c:	4601      	mov	r1, r0
 800952e:	4605      	mov	r5, r0
 8009530:	4658      	mov	r0, fp
 8009532:	f000 fdd1 	bl	800a0d8 <__multiply>
 8009536:	4649      	mov	r1, r9
 8009538:	9004      	str	r0, [sp, #16]
 800953a:	4658      	mov	r0, fp
 800953c:	f000 fd02 	bl	8009f44 <_Bfree>
 8009540:	9b04      	ldr	r3, [sp, #16]
 8009542:	4699      	mov	r9, r3
 8009544:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009546:	1b1a      	subs	r2, r3, r4
 8009548:	d004      	beq.n	8009554 <_dtoa_r+0x78c>
 800954a:	4649      	mov	r1, r9
 800954c:	4658      	mov	r0, fp
 800954e:	f000 fe6d 	bl	800a22c <__pow5mult>
 8009552:	4681      	mov	r9, r0
 8009554:	2101      	movs	r1, #1
 8009556:	4658      	mov	r0, fp
 8009558:	f000 fda8 	bl	800a0ac <__i2b>
 800955c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800955e:	4604      	mov	r4, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	f000 81cf 	beq.w	8009904 <_dtoa_r+0xb3c>
 8009566:	461a      	mov	r2, r3
 8009568:	4601      	mov	r1, r0
 800956a:	4658      	mov	r0, fp
 800956c:	f000 fe5e 	bl	800a22c <__pow5mult>
 8009570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009572:	2b01      	cmp	r3, #1
 8009574:	4604      	mov	r4, r0
 8009576:	f300 8095 	bgt.w	80096a4 <_dtoa_r+0x8dc>
 800957a:	9b02      	ldr	r3, [sp, #8]
 800957c:	2b00      	cmp	r3, #0
 800957e:	f040 8087 	bne.w	8009690 <_dtoa_r+0x8c8>
 8009582:	9b03      	ldr	r3, [sp, #12]
 8009584:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009588:	2b00      	cmp	r3, #0
 800958a:	f040 8089 	bne.w	80096a0 <_dtoa_r+0x8d8>
 800958e:	9b03      	ldr	r3, [sp, #12]
 8009590:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009594:	0d1b      	lsrs	r3, r3, #20
 8009596:	051b      	lsls	r3, r3, #20
 8009598:	b12b      	cbz	r3, 80095a6 <_dtoa_r+0x7de>
 800959a:	9b08      	ldr	r3, [sp, #32]
 800959c:	3301      	adds	r3, #1
 800959e:	9308      	str	r3, [sp, #32]
 80095a0:	f108 0801 	add.w	r8, r8, #1
 80095a4:	2301      	movs	r3, #1
 80095a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80095a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	f000 81b0 	beq.w	8009910 <_dtoa_r+0xb48>
 80095b0:	6923      	ldr	r3, [r4, #16]
 80095b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80095b6:	6918      	ldr	r0, [r3, #16]
 80095b8:	f000 fd2c 	bl	800a014 <__hi0bits>
 80095bc:	f1c0 0020 	rsb	r0, r0, #32
 80095c0:	9b08      	ldr	r3, [sp, #32]
 80095c2:	4418      	add	r0, r3
 80095c4:	f010 001f 	ands.w	r0, r0, #31
 80095c8:	d077      	beq.n	80096ba <_dtoa_r+0x8f2>
 80095ca:	f1c0 0320 	rsb	r3, r0, #32
 80095ce:	2b04      	cmp	r3, #4
 80095d0:	dd6b      	ble.n	80096aa <_dtoa_r+0x8e2>
 80095d2:	9b08      	ldr	r3, [sp, #32]
 80095d4:	f1c0 001c 	rsb	r0, r0, #28
 80095d8:	4403      	add	r3, r0
 80095da:	4480      	add	r8, r0
 80095dc:	4406      	add	r6, r0
 80095de:	9308      	str	r3, [sp, #32]
 80095e0:	f1b8 0f00 	cmp.w	r8, #0
 80095e4:	dd05      	ble.n	80095f2 <_dtoa_r+0x82a>
 80095e6:	4649      	mov	r1, r9
 80095e8:	4642      	mov	r2, r8
 80095ea:	4658      	mov	r0, fp
 80095ec:	f000 fe78 	bl	800a2e0 <__lshift>
 80095f0:	4681      	mov	r9, r0
 80095f2:	9b08      	ldr	r3, [sp, #32]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	dd05      	ble.n	8009604 <_dtoa_r+0x83c>
 80095f8:	4621      	mov	r1, r4
 80095fa:	461a      	mov	r2, r3
 80095fc:	4658      	mov	r0, fp
 80095fe:	f000 fe6f 	bl	800a2e0 <__lshift>
 8009602:	4604      	mov	r4, r0
 8009604:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009606:	2b00      	cmp	r3, #0
 8009608:	d059      	beq.n	80096be <_dtoa_r+0x8f6>
 800960a:	4621      	mov	r1, r4
 800960c:	4648      	mov	r0, r9
 800960e:	f000 fed3 	bl	800a3b8 <__mcmp>
 8009612:	2800      	cmp	r0, #0
 8009614:	da53      	bge.n	80096be <_dtoa_r+0x8f6>
 8009616:	1e7b      	subs	r3, r7, #1
 8009618:	9304      	str	r3, [sp, #16]
 800961a:	4649      	mov	r1, r9
 800961c:	2300      	movs	r3, #0
 800961e:	220a      	movs	r2, #10
 8009620:	4658      	mov	r0, fp
 8009622:	f000 fcb1 	bl	8009f88 <__multadd>
 8009626:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009628:	4681      	mov	r9, r0
 800962a:	2b00      	cmp	r3, #0
 800962c:	f000 8172 	beq.w	8009914 <_dtoa_r+0xb4c>
 8009630:	2300      	movs	r3, #0
 8009632:	4629      	mov	r1, r5
 8009634:	220a      	movs	r2, #10
 8009636:	4658      	mov	r0, fp
 8009638:	f000 fca6 	bl	8009f88 <__multadd>
 800963c:	9b00      	ldr	r3, [sp, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	4605      	mov	r5, r0
 8009642:	dc67      	bgt.n	8009714 <_dtoa_r+0x94c>
 8009644:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009646:	2b02      	cmp	r3, #2
 8009648:	dc41      	bgt.n	80096ce <_dtoa_r+0x906>
 800964a:	e063      	b.n	8009714 <_dtoa_r+0x94c>
 800964c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800964e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009652:	e746      	b.n	80094e2 <_dtoa_r+0x71a>
 8009654:	9b07      	ldr	r3, [sp, #28]
 8009656:	1e5c      	subs	r4, r3, #1
 8009658:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800965a:	42a3      	cmp	r3, r4
 800965c:	bfbf      	itttt	lt
 800965e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009660:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009662:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009664:	1ae3      	sublt	r3, r4, r3
 8009666:	bfb4      	ite	lt
 8009668:	18d2      	addlt	r2, r2, r3
 800966a:	1b1c      	subge	r4, r3, r4
 800966c:	9b07      	ldr	r3, [sp, #28]
 800966e:	bfbc      	itt	lt
 8009670:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009672:	2400      	movlt	r4, #0
 8009674:	2b00      	cmp	r3, #0
 8009676:	bfb5      	itete	lt
 8009678:	eba8 0603 	sublt.w	r6, r8, r3
 800967c:	9b07      	ldrge	r3, [sp, #28]
 800967e:	2300      	movlt	r3, #0
 8009680:	4646      	movge	r6, r8
 8009682:	e730      	b.n	80094e6 <_dtoa_r+0x71e>
 8009684:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009686:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009688:	4646      	mov	r6, r8
 800968a:	e735      	b.n	80094f8 <_dtoa_r+0x730>
 800968c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800968e:	e75c      	b.n	800954a <_dtoa_r+0x782>
 8009690:	2300      	movs	r3, #0
 8009692:	e788      	b.n	80095a6 <_dtoa_r+0x7de>
 8009694:	3fe00000 	.word	0x3fe00000
 8009698:	40240000 	.word	0x40240000
 800969c:	40140000 	.word	0x40140000
 80096a0:	9b02      	ldr	r3, [sp, #8]
 80096a2:	e780      	b.n	80095a6 <_dtoa_r+0x7de>
 80096a4:	2300      	movs	r3, #0
 80096a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80096a8:	e782      	b.n	80095b0 <_dtoa_r+0x7e8>
 80096aa:	d099      	beq.n	80095e0 <_dtoa_r+0x818>
 80096ac:	9a08      	ldr	r2, [sp, #32]
 80096ae:	331c      	adds	r3, #28
 80096b0:	441a      	add	r2, r3
 80096b2:	4498      	add	r8, r3
 80096b4:	441e      	add	r6, r3
 80096b6:	9208      	str	r2, [sp, #32]
 80096b8:	e792      	b.n	80095e0 <_dtoa_r+0x818>
 80096ba:	4603      	mov	r3, r0
 80096bc:	e7f6      	b.n	80096ac <_dtoa_r+0x8e4>
 80096be:	9b07      	ldr	r3, [sp, #28]
 80096c0:	9704      	str	r7, [sp, #16]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	dc20      	bgt.n	8009708 <_dtoa_r+0x940>
 80096c6:	9300      	str	r3, [sp, #0]
 80096c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096ca:	2b02      	cmp	r3, #2
 80096cc:	dd1e      	ble.n	800970c <_dtoa_r+0x944>
 80096ce:	9b00      	ldr	r3, [sp, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f47f aec0 	bne.w	8009456 <_dtoa_r+0x68e>
 80096d6:	4621      	mov	r1, r4
 80096d8:	2205      	movs	r2, #5
 80096da:	4658      	mov	r0, fp
 80096dc:	f000 fc54 	bl	8009f88 <__multadd>
 80096e0:	4601      	mov	r1, r0
 80096e2:	4604      	mov	r4, r0
 80096e4:	4648      	mov	r0, r9
 80096e6:	f000 fe67 	bl	800a3b8 <__mcmp>
 80096ea:	2800      	cmp	r0, #0
 80096ec:	f77f aeb3 	ble.w	8009456 <_dtoa_r+0x68e>
 80096f0:	4656      	mov	r6, sl
 80096f2:	2331      	movs	r3, #49	@ 0x31
 80096f4:	f806 3b01 	strb.w	r3, [r6], #1
 80096f8:	9b04      	ldr	r3, [sp, #16]
 80096fa:	3301      	adds	r3, #1
 80096fc:	9304      	str	r3, [sp, #16]
 80096fe:	e6ae      	b.n	800945e <_dtoa_r+0x696>
 8009700:	9c07      	ldr	r4, [sp, #28]
 8009702:	9704      	str	r7, [sp, #16]
 8009704:	4625      	mov	r5, r4
 8009706:	e7f3      	b.n	80096f0 <_dtoa_r+0x928>
 8009708:	9b07      	ldr	r3, [sp, #28]
 800970a:	9300      	str	r3, [sp, #0]
 800970c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800970e:	2b00      	cmp	r3, #0
 8009710:	f000 8104 	beq.w	800991c <_dtoa_r+0xb54>
 8009714:	2e00      	cmp	r6, #0
 8009716:	dd05      	ble.n	8009724 <_dtoa_r+0x95c>
 8009718:	4629      	mov	r1, r5
 800971a:	4632      	mov	r2, r6
 800971c:	4658      	mov	r0, fp
 800971e:	f000 fddf 	bl	800a2e0 <__lshift>
 8009722:	4605      	mov	r5, r0
 8009724:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009726:	2b00      	cmp	r3, #0
 8009728:	d05a      	beq.n	80097e0 <_dtoa_r+0xa18>
 800972a:	6869      	ldr	r1, [r5, #4]
 800972c:	4658      	mov	r0, fp
 800972e:	f000 fbc9 	bl	8009ec4 <_Balloc>
 8009732:	4606      	mov	r6, r0
 8009734:	b928      	cbnz	r0, 8009742 <_dtoa_r+0x97a>
 8009736:	4b84      	ldr	r3, [pc, #528]	@ (8009948 <_dtoa_r+0xb80>)
 8009738:	4602      	mov	r2, r0
 800973a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800973e:	f7ff bb5a 	b.w	8008df6 <_dtoa_r+0x2e>
 8009742:	692a      	ldr	r2, [r5, #16]
 8009744:	3202      	adds	r2, #2
 8009746:	0092      	lsls	r2, r2, #2
 8009748:	f105 010c 	add.w	r1, r5, #12
 800974c:	300c      	adds	r0, #12
 800974e:	f001 f81d 	bl	800a78c <memcpy>
 8009752:	2201      	movs	r2, #1
 8009754:	4631      	mov	r1, r6
 8009756:	4658      	mov	r0, fp
 8009758:	f000 fdc2 	bl	800a2e0 <__lshift>
 800975c:	f10a 0301 	add.w	r3, sl, #1
 8009760:	9307      	str	r3, [sp, #28]
 8009762:	9b00      	ldr	r3, [sp, #0]
 8009764:	4453      	add	r3, sl
 8009766:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009768:	9b02      	ldr	r3, [sp, #8]
 800976a:	f003 0301 	and.w	r3, r3, #1
 800976e:	462f      	mov	r7, r5
 8009770:	930a      	str	r3, [sp, #40]	@ 0x28
 8009772:	4605      	mov	r5, r0
 8009774:	9b07      	ldr	r3, [sp, #28]
 8009776:	4621      	mov	r1, r4
 8009778:	3b01      	subs	r3, #1
 800977a:	4648      	mov	r0, r9
 800977c:	9300      	str	r3, [sp, #0]
 800977e:	f7ff fa9a 	bl	8008cb6 <quorem>
 8009782:	4639      	mov	r1, r7
 8009784:	9002      	str	r0, [sp, #8]
 8009786:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800978a:	4648      	mov	r0, r9
 800978c:	f000 fe14 	bl	800a3b8 <__mcmp>
 8009790:	462a      	mov	r2, r5
 8009792:	9008      	str	r0, [sp, #32]
 8009794:	4621      	mov	r1, r4
 8009796:	4658      	mov	r0, fp
 8009798:	f000 fe2a 	bl	800a3f0 <__mdiff>
 800979c:	68c2      	ldr	r2, [r0, #12]
 800979e:	4606      	mov	r6, r0
 80097a0:	bb02      	cbnz	r2, 80097e4 <_dtoa_r+0xa1c>
 80097a2:	4601      	mov	r1, r0
 80097a4:	4648      	mov	r0, r9
 80097a6:	f000 fe07 	bl	800a3b8 <__mcmp>
 80097aa:	4602      	mov	r2, r0
 80097ac:	4631      	mov	r1, r6
 80097ae:	4658      	mov	r0, fp
 80097b0:	920e      	str	r2, [sp, #56]	@ 0x38
 80097b2:	f000 fbc7 	bl	8009f44 <_Bfree>
 80097b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097b8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097ba:	9e07      	ldr	r6, [sp, #28]
 80097bc:	ea43 0102 	orr.w	r1, r3, r2
 80097c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097c2:	4319      	orrs	r1, r3
 80097c4:	d110      	bne.n	80097e8 <_dtoa_r+0xa20>
 80097c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80097ca:	d029      	beq.n	8009820 <_dtoa_r+0xa58>
 80097cc:	9b08      	ldr	r3, [sp, #32]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	dd02      	ble.n	80097d8 <_dtoa_r+0xa10>
 80097d2:	9b02      	ldr	r3, [sp, #8]
 80097d4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80097d8:	9b00      	ldr	r3, [sp, #0]
 80097da:	f883 8000 	strb.w	r8, [r3]
 80097de:	e63f      	b.n	8009460 <_dtoa_r+0x698>
 80097e0:	4628      	mov	r0, r5
 80097e2:	e7bb      	b.n	800975c <_dtoa_r+0x994>
 80097e4:	2201      	movs	r2, #1
 80097e6:	e7e1      	b.n	80097ac <_dtoa_r+0x9e4>
 80097e8:	9b08      	ldr	r3, [sp, #32]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	db04      	blt.n	80097f8 <_dtoa_r+0xa30>
 80097ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80097f0:	430b      	orrs	r3, r1
 80097f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80097f4:	430b      	orrs	r3, r1
 80097f6:	d120      	bne.n	800983a <_dtoa_r+0xa72>
 80097f8:	2a00      	cmp	r2, #0
 80097fa:	dded      	ble.n	80097d8 <_dtoa_r+0xa10>
 80097fc:	4649      	mov	r1, r9
 80097fe:	2201      	movs	r2, #1
 8009800:	4658      	mov	r0, fp
 8009802:	f000 fd6d 	bl	800a2e0 <__lshift>
 8009806:	4621      	mov	r1, r4
 8009808:	4681      	mov	r9, r0
 800980a:	f000 fdd5 	bl	800a3b8 <__mcmp>
 800980e:	2800      	cmp	r0, #0
 8009810:	dc03      	bgt.n	800981a <_dtoa_r+0xa52>
 8009812:	d1e1      	bne.n	80097d8 <_dtoa_r+0xa10>
 8009814:	f018 0f01 	tst.w	r8, #1
 8009818:	d0de      	beq.n	80097d8 <_dtoa_r+0xa10>
 800981a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800981e:	d1d8      	bne.n	80097d2 <_dtoa_r+0xa0a>
 8009820:	9a00      	ldr	r2, [sp, #0]
 8009822:	2339      	movs	r3, #57	@ 0x39
 8009824:	7013      	strb	r3, [r2, #0]
 8009826:	4633      	mov	r3, r6
 8009828:	461e      	mov	r6, r3
 800982a:	3b01      	subs	r3, #1
 800982c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009830:	2a39      	cmp	r2, #57	@ 0x39
 8009832:	d052      	beq.n	80098da <_dtoa_r+0xb12>
 8009834:	3201      	adds	r2, #1
 8009836:	701a      	strb	r2, [r3, #0]
 8009838:	e612      	b.n	8009460 <_dtoa_r+0x698>
 800983a:	2a00      	cmp	r2, #0
 800983c:	dd07      	ble.n	800984e <_dtoa_r+0xa86>
 800983e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009842:	d0ed      	beq.n	8009820 <_dtoa_r+0xa58>
 8009844:	9a00      	ldr	r2, [sp, #0]
 8009846:	f108 0301 	add.w	r3, r8, #1
 800984a:	7013      	strb	r3, [r2, #0]
 800984c:	e608      	b.n	8009460 <_dtoa_r+0x698>
 800984e:	9b07      	ldr	r3, [sp, #28]
 8009850:	9a07      	ldr	r2, [sp, #28]
 8009852:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009856:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009858:	4293      	cmp	r3, r2
 800985a:	d028      	beq.n	80098ae <_dtoa_r+0xae6>
 800985c:	4649      	mov	r1, r9
 800985e:	2300      	movs	r3, #0
 8009860:	220a      	movs	r2, #10
 8009862:	4658      	mov	r0, fp
 8009864:	f000 fb90 	bl	8009f88 <__multadd>
 8009868:	42af      	cmp	r7, r5
 800986a:	4681      	mov	r9, r0
 800986c:	f04f 0300 	mov.w	r3, #0
 8009870:	f04f 020a 	mov.w	r2, #10
 8009874:	4639      	mov	r1, r7
 8009876:	4658      	mov	r0, fp
 8009878:	d107      	bne.n	800988a <_dtoa_r+0xac2>
 800987a:	f000 fb85 	bl	8009f88 <__multadd>
 800987e:	4607      	mov	r7, r0
 8009880:	4605      	mov	r5, r0
 8009882:	9b07      	ldr	r3, [sp, #28]
 8009884:	3301      	adds	r3, #1
 8009886:	9307      	str	r3, [sp, #28]
 8009888:	e774      	b.n	8009774 <_dtoa_r+0x9ac>
 800988a:	f000 fb7d 	bl	8009f88 <__multadd>
 800988e:	4629      	mov	r1, r5
 8009890:	4607      	mov	r7, r0
 8009892:	2300      	movs	r3, #0
 8009894:	220a      	movs	r2, #10
 8009896:	4658      	mov	r0, fp
 8009898:	f000 fb76 	bl	8009f88 <__multadd>
 800989c:	4605      	mov	r5, r0
 800989e:	e7f0      	b.n	8009882 <_dtoa_r+0xaba>
 80098a0:	9b00      	ldr	r3, [sp, #0]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	bfcc      	ite	gt
 80098a6:	461e      	movgt	r6, r3
 80098a8:	2601      	movle	r6, #1
 80098aa:	4456      	add	r6, sl
 80098ac:	2700      	movs	r7, #0
 80098ae:	4649      	mov	r1, r9
 80098b0:	2201      	movs	r2, #1
 80098b2:	4658      	mov	r0, fp
 80098b4:	f000 fd14 	bl	800a2e0 <__lshift>
 80098b8:	4621      	mov	r1, r4
 80098ba:	4681      	mov	r9, r0
 80098bc:	f000 fd7c 	bl	800a3b8 <__mcmp>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	dcb0      	bgt.n	8009826 <_dtoa_r+0xa5e>
 80098c4:	d102      	bne.n	80098cc <_dtoa_r+0xb04>
 80098c6:	f018 0f01 	tst.w	r8, #1
 80098ca:	d1ac      	bne.n	8009826 <_dtoa_r+0xa5e>
 80098cc:	4633      	mov	r3, r6
 80098ce:	461e      	mov	r6, r3
 80098d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098d4:	2a30      	cmp	r2, #48	@ 0x30
 80098d6:	d0fa      	beq.n	80098ce <_dtoa_r+0xb06>
 80098d8:	e5c2      	b.n	8009460 <_dtoa_r+0x698>
 80098da:	459a      	cmp	sl, r3
 80098dc:	d1a4      	bne.n	8009828 <_dtoa_r+0xa60>
 80098de:	9b04      	ldr	r3, [sp, #16]
 80098e0:	3301      	adds	r3, #1
 80098e2:	9304      	str	r3, [sp, #16]
 80098e4:	2331      	movs	r3, #49	@ 0x31
 80098e6:	f88a 3000 	strb.w	r3, [sl]
 80098ea:	e5b9      	b.n	8009460 <_dtoa_r+0x698>
 80098ec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80098ee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800994c <_dtoa_r+0xb84>
 80098f2:	b11b      	cbz	r3, 80098fc <_dtoa_r+0xb34>
 80098f4:	f10a 0308 	add.w	r3, sl, #8
 80098f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80098fa:	6013      	str	r3, [r2, #0]
 80098fc:	4650      	mov	r0, sl
 80098fe:	b019      	add	sp, #100	@ 0x64
 8009900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009906:	2b01      	cmp	r3, #1
 8009908:	f77f ae37 	ble.w	800957a <_dtoa_r+0x7b2>
 800990c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800990e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009910:	2001      	movs	r0, #1
 8009912:	e655      	b.n	80095c0 <_dtoa_r+0x7f8>
 8009914:	9b00      	ldr	r3, [sp, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	f77f aed6 	ble.w	80096c8 <_dtoa_r+0x900>
 800991c:	4656      	mov	r6, sl
 800991e:	4621      	mov	r1, r4
 8009920:	4648      	mov	r0, r9
 8009922:	f7ff f9c8 	bl	8008cb6 <quorem>
 8009926:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800992a:	f806 8b01 	strb.w	r8, [r6], #1
 800992e:	9b00      	ldr	r3, [sp, #0]
 8009930:	eba6 020a 	sub.w	r2, r6, sl
 8009934:	4293      	cmp	r3, r2
 8009936:	ddb3      	ble.n	80098a0 <_dtoa_r+0xad8>
 8009938:	4649      	mov	r1, r9
 800993a:	2300      	movs	r3, #0
 800993c:	220a      	movs	r2, #10
 800993e:	4658      	mov	r0, fp
 8009940:	f000 fb22 	bl	8009f88 <__multadd>
 8009944:	4681      	mov	r9, r0
 8009946:	e7ea      	b.n	800991e <_dtoa_r+0xb56>
 8009948:	0800afc8 	.word	0x0800afc8
 800994c:	0800af4c 	.word	0x0800af4c

08009950 <__ssputs_r>:
 8009950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009954:	688e      	ldr	r6, [r1, #8]
 8009956:	461f      	mov	r7, r3
 8009958:	42be      	cmp	r6, r7
 800995a:	680b      	ldr	r3, [r1, #0]
 800995c:	4682      	mov	sl, r0
 800995e:	460c      	mov	r4, r1
 8009960:	4690      	mov	r8, r2
 8009962:	d82d      	bhi.n	80099c0 <__ssputs_r+0x70>
 8009964:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009968:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800996c:	d026      	beq.n	80099bc <__ssputs_r+0x6c>
 800996e:	6965      	ldr	r5, [r4, #20]
 8009970:	6909      	ldr	r1, [r1, #16]
 8009972:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009976:	eba3 0901 	sub.w	r9, r3, r1
 800997a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800997e:	1c7b      	adds	r3, r7, #1
 8009980:	444b      	add	r3, r9
 8009982:	106d      	asrs	r5, r5, #1
 8009984:	429d      	cmp	r5, r3
 8009986:	bf38      	it	cc
 8009988:	461d      	movcc	r5, r3
 800998a:	0553      	lsls	r3, r2, #21
 800998c:	d527      	bpl.n	80099de <__ssputs_r+0x8e>
 800998e:	4629      	mov	r1, r5
 8009990:	f000 f960 	bl	8009c54 <_malloc_r>
 8009994:	4606      	mov	r6, r0
 8009996:	b360      	cbz	r0, 80099f2 <__ssputs_r+0xa2>
 8009998:	6921      	ldr	r1, [r4, #16]
 800999a:	464a      	mov	r2, r9
 800999c:	f000 fef6 	bl	800a78c <memcpy>
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80099a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099aa:	81a3      	strh	r3, [r4, #12]
 80099ac:	6126      	str	r6, [r4, #16]
 80099ae:	6165      	str	r5, [r4, #20]
 80099b0:	444e      	add	r6, r9
 80099b2:	eba5 0509 	sub.w	r5, r5, r9
 80099b6:	6026      	str	r6, [r4, #0]
 80099b8:	60a5      	str	r5, [r4, #8]
 80099ba:	463e      	mov	r6, r7
 80099bc:	42be      	cmp	r6, r7
 80099be:	d900      	bls.n	80099c2 <__ssputs_r+0x72>
 80099c0:	463e      	mov	r6, r7
 80099c2:	6820      	ldr	r0, [r4, #0]
 80099c4:	4632      	mov	r2, r6
 80099c6:	4641      	mov	r1, r8
 80099c8:	f000 fe6f 	bl	800a6aa <memmove>
 80099cc:	68a3      	ldr	r3, [r4, #8]
 80099ce:	1b9b      	subs	r3, r3, r6
 80099d0:	60a3      	str	r3, [r4, #8]
 80099d2:	6823      	ldr	r3, [r4, #0]
 80099d4:	4433      	add	r3, r6
 80099d6:	6023      	str	r3, [r4, #0]
 80099d8:	2000      	movs	r0, #0
 80099da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099de:	462a      	mov	r2, r5
 80099e0:	f000 fe35 	bl	800a64e <_realloc_r>
 80099e4:	4606      	mov	r6, r0
 80099e6:	2800      	cmp	r0, #0
 80099e8:	d1e0      	bne.n	80099ac <__ssputs_r+0x5c>
 80099ea:	6921      	ldr	r1, [r4, #16]
 80099ec:	4650      	mov	r0, sl
 80099ee:	f000 ff0d 	bl	800a80c <_free_r>
 80099f2:	230c      	movs	r3, #12
 80099f4:	f8ca 3000 	str.w	r3, [sl]
 80099f8:	89a3      	ldrh	r3, [r4, #12]
 80099fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099fe:	81a3      	strh	r3, [r4, #12]
 8009a00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a04:	e7e9      	b.n	80099da <__ssputs_r+0x8a>
	...

08009a08 <_svfiprintf_r>:
 8009a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a0c:	4698      	mov	r8, r3
 8009a0e:	898b      	ldrh	r3, [r1, #12]
 8009a10:	061b      	lsls	r3, r3, #24
 8009a12:	b09d      	sub	sp, #116	@ 0x74
 8009a14:	4607      	mov	r7, r0
 8009a16:	460d      	mov	r5, r1
 8009a18:	4614      	mov	r4, r2
 8009a1a:	d510      	bpl.n	8009a3e <_svfiprintf_r+0x36>
 8009a1c:	690b      	ldr	r3, [r1, #16]
 8009a1e:	b973      	cbnz	r3, 8009a3e <_svfiprintf_r+0x36>
 8009a20:	2140      	movs	r1, #64	@ 0x40
 8009a22:	f000 f917 	bl	8009c54 <_malloc_r>
 8009a26:	6028      	str	r0, [r5, #0]
 8009a28:	6128      	str	r0, [r5, #16]
 8009a2a:	b930      	cbnz	r0, 8009a3a <_svfiprintf_r+0x32>
 8009a2c:	230c      	movs	r3, #12
 8009a2e:	603b      	str	r3, [r7, #0]
 8009a30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a34:	b01d      	add	sp, #116	@ 0x74
 8009a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a3a:	2340      	movs	r3, #64	@ 0x40
 8009a3c:	616b      	str	r3, [r5, #20]
 8009a3e:	2300      	movs	r3, #0
 8009a40:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a42:	2320      	movs	r3, #32
 8009a44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a48:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a4c:	2330      	movs	r3, #48	@ 0x30
 8009a4e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009bec <_svfiprintf_r+0x1e4>
 8009a52:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a56:	f04f 0901 	mov.w	r9, #1
 8009a5a:	4623      	mov	r3, r4
 8009a5c:	469a      	mov	sl, r3
 8009a5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a62:	b10a      	cbz	r2, 8009a68 <_svfiprintf_r+0x60>
 8009a64:	2a25      	cmp	r2, #37	@ 0x25
 8009a66:	d1f9      	bne.n	8009a5c <_svfiprintf_r+0x54>
 8009a68:	ebba 0b04 	subs.w	fp, sl, r4
 8009a6c:	d00b      	beq.n	8009a86 <_svfiprintf_r+0x7e>
 8009a6e:	465b      	mov	r3, fp
 8009a70:	4622      	mov	r2, r4
 8009a72:	4629      	mov	r1, r5
 8009a74:	4638      	mov	r0, r7
 8009a76:	f7ff ff6b 	bl	8009950 <__ssputs_r>
 8009a7a:	3001      	adds	r0, #1
 8009a7c:	f000 80a7 	beq.w	8009bce <_svfiprintf_r+0x1c6>
 8009a80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a82:	445a      	add	r2, fp
 8009a84:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a86:	f89a 3000 	ldrb.w	r3, [sl]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f000 809f 	beq.w	8009bce <_svfiprintf_r+0x1c6>
 8009a90:	2300      	movs	r3, #0
 8009a92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a9a:	f10a 0a01 	add.w	sl, sl, #1
 8009a9e:	9304      	str	r3, [sp, #16]
 8009aa0:	9307      	str	r3, [sp, #28]
 8009aa2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009aa6:	931a      	str	r3, [sp, #104]	@ 0x68
 8009aa8:	4654      	mov	r4, sl
 8009aaa:	2205      	movs	r2, #5
 8009aac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ab0:	484e      	ldr	r0, [pc, #312]	@ (8009bec <_svfiprintf_r+0x1e4>)
 8009ab2:	f7f6 fb8d 	bl	80001d0 <memchr>
 8009ab6:	9a04      	ldr	r2, [sp, #16]
 8009ab8:	b9d8      	cbnz	r0, 8009af2 <_svfiprintf_r+0xea>
 8009aba:	06d0      	lsls	r0, r2, #27
 8009abc:	bf44      	itt	mi
 8009abe:	2320      	movmi	r3, #32
 8009ac0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ac4:	0711      	lsls	r1, r2, #28
 8009ac6:	bf44      	itt	mi
 8009ac8:	232b      	movmi	r3, #43	@ 0x2b
 8009aca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ace:	f89a 3000 	ldrb.w	r3, [sl]
 8009ad2:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ad4:	d015      	beq.n	8009b02 <_svfiprintf_r+0xfa>
 8009ad6:	9a07      	ldr	r2, [sp, #28]
 8009ad8:	4654      	mov	r4, sl
 8009ada:	2000      	movs	r0, #0
 8009adc:	f04f 0c0a 	mov.w	ip, #10
 8009ae0:	4621      	mov	r1, r4
 8009ae2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ae6:	3b30      	subs	r3, #48	@ 0x30
 8009ae8:	2b09      	cmp	r3, #9
 8009aea:	d94b      	bls.n	8009b84 <_svfiprintf_r+0x17c>
 8009aec:	b1b0      	cbz	r0, 8009b1c <_svfiprintf_r+0x114>
 8009aee:	9207      	str	r2, [sp, #28]
 8009af0:	e014      	b.n	8009b1c <_svfiprintf_r+0x114>
 8009af2:	eba0 0308 	sub.w	r3, r0, r8
 8009af6:	fa09 f303 	lsl.w	r3, r9, r3
 8009afa:	4313      	orrs	r3, r2
 8009afc:	9304      	str	r3, [sp, #16]
 8009afe:	46a2      	mov	sl, r4
 8009b00:	e7d2      	b.n	8009aa8 <_svfiprintf_r+0xa0>
 8009b02:	9b03      	ldr	r3, [sp, #12]
 8009b04:	1d19      	adds	r1, r3, #4
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	9103      	str	r1, [sp, #12]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	bfbb      	ittet	lt
 8009b0e:	425b      	neglt	r3, r3
 8009b10:	f042 0202 	orrlt.w	r2, r2, #2
 8009b14:	9307      	strge	r3, [sp, #28]
 8009b16:	9307      	strlt	r3, [sp, #28]
 8009b18:	bfb8      	it	lt
 8009b1a:	9204      	strlt	r2, [sp, #16]
 8009b1c:	7823      	ldrb	r3, [r4, #0]
 8009b1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b20:	d10a      	bne.n	8009b38 <_svfiprintf_r+0x130>
 8009b22:	7863      	ldrb	r3, [r4, #1]
 8009b24:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b26:	d132      	bne.n	8009b8e <_svfiprintf_r+0x186>
 8009b28:	9b03      	ldr	r3, [sp, #12]
 8009b2a:	1d1a      	adds	r2, r3, #4
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	9203      	str	r2, [sp, #12]
 8009b30:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b34:	3402      	adds	r4, #2
 8009b36:	9305      	str	r3, [sp, #20]
 8009b38:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009bfc <_svfiprintf_r+0x1f4>
 8009b3c:	7821      	ldrb	r1, [r4, #0]
 8009b3e:	2203      	movs	r2, #3
 8009b40:	4650      	mov	r0, sl
 8009b42:	f7f6 fb45 	bl	80001d0 <memchr>
 8009b46:	b138      	cbz	r0, 8009b58 <_svfiprintf_r+0x150>
 8009b48:	9b04      	ldr	r3, [sp, #16]
 8009b4a:	eba0 000a 	sub.w	r0, r0, sl
 8009b4e:	2240      	movs	r2, #64	@ 0x40
 8009b50:	4082      	lsls	r2, r0
 8009b52:	4313      	orrs	r3, r2
 8009b54:	3401      	adds	r4, #1
 8009b56:	9304      	str	r3, [sp, #16]
 8009b58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b5c:	4824      	ldr	r0, [pc, #144]	@ (8009bf0 <_svfiprintf_r+0x1e8>)
 8009b5e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b62:	2206      	movs	r2, #6
 8009b64:	f7f6 fb34 	bl	80001d0 <memchr>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	d036      	beq.n	8009bda <_svfiprintf_r+0x1d2>
 8009b6c:	4b21      	ldr	r3, [pc, #132]	@ (8009bf4 <_svfiprintf_r+0x1ec>)
 8009b6e:	bb1b      	cbnz	r3, 8009bb8 <_svfiprintf_r+0x1b0>
 8009b70:	9b03      	ldr	r3, [sp, #12]
 8009b72:	3307      	adds	r3, #7
 8009b74:	f023 0307 	bic.w	r3, r3, #7
 8009b78:	3308      	adds	r3, #8
 8009b7a:	9303      	str	r3, [sp, #12]
 8009b7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b7e:	4433      	add	r3, r6
 8009b80:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b82:	e76a      	b.n	8009a5a <_svfiprintf_r+0x52>
 8009b84:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b88:	460c      	mov	r4, r1
 8009b8a:	2001      	movs	r0, #1
 8009b8c:	e7a8      	b.n	8009ae0 <_svfiprintf_r+0xd8>
 8009b8e:	2300      	movs	r3, #0
 8009b90:	3401      	adds	r4, #1
 8009b92:	9305      	str	r3, [sp, #20]
 8009b94:	4619      	mov	r1, r3
 8009b96:	f04f 0c0a 	mov.w	ip, #10
 8009b9a:	4620      	mov	r0, r4
 8009b9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ba0:	3a30      	subs	r2, #48	@ 0x30
 8009ba2:	2a09      	cmp	r2, #9
 8009ba4:	d903      	bls.n	8009bae <_svfiprintf_r+0x1a6>
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d0c6      	beq.n	8009b38 <_svfiprintf_r+0x130>
 8009baa:	9105      	str	r1, [sp, #20]
 8009bac:	e7c4      	b.n	8009b38 <_svfiprintf_r+0x130>
 8009bae:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	2301      	movs	r3, #1
 8009bb6:	e7f0      	b.n	8009b9a <_svfiprintf_r+0x192>
 8009bb8:	ab03      	add	r3, sp, #12
 8009bba:	9300      	str	r3, [sp, #0]
 8009bbc:	462a      	mov	r2, r5
 8009bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8009bf8 <_svfiprintf_r+0x1f0>)
 8009bc0:	a904      	add	r1, sp, #16
 8009bc2:	4638      	mov	r0, r7
 8009bc4:	f7fe fba4 	bl	8008310 <_printf_float>
 8009bc8:	1c42      	adds	r2, r0, #1
 8009bca:	4606      	mov	r6, r0
 8009bcc:	d1d6      	bne.n	8009b7c <_svfiprintf_r+0x174>
 8009bce:	89ab      	ldrh	r3, [r5, #12]
 8009bd0:	065b      	lsls	r3, r3, #25
 8009bd2:	f53f af2d 	bmi.w	8009a30 <_svfiprintf_r+0x28>
 8009bd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bd8:	e72c      	b.n	8009a34 <_svfiprintf_r+0x2c>
 8009bda:	ab03      	add	r3, sp, #12
 8009bdc:	9300      	str	r3, [sp, #0]
 8009bde:	462a      	mov	r2, r5
 8009be0:	4b05      	ldr	r3, [pc, #20]	@ (8009bf8 <_svfiprintf_r+0x1f0>)
 8009be2:	a904      	add	r1, sp, #16
 8009be4:	4638      	mov	r0, r7
 8009be6:	f7fe fe2b 	bl	8008840 <_printf_i>
 8009bea:	e7ed      	b.n	8009bc8 <_svfiprintf_r+0x1c0>
 8009bec:	0800afd9 	.word	0x0800afd9
 8009bf0:	0800afe3 	.word	0x0800afe3
 8009bf4:	08008311 	.word	0x08008311
 8009bf8:	08009951 	.word	0x08009951
 8009bfc:	0800afdf 	.word	0x0800afdf

08009c00 <malloc>:
 8009c00:	4b02      	ldr	r3, [pc, #8]	@ (8009c0c <malloc+0xc>)
 8009c02:	4601      	mov	r1, r0
 8009c04:	6818      	ldr	r0, [r3, #0]
 8009c06:	f000 b825 	b.w	8009c54 <_malloc_r>
 8009c0a:	bf00      	nop
 8009c0c:	20000018 	.word	0x20000018

08009c10 <sbrk_aligned>:
 8009c10:	b570      	push	{r4, r5, r6, lr}
 8009c12:	4e0f      	ldr	r6, [pc, #60]	@ (8009c50 <sbrk_aligned+0x40>)
 8009c14:	460c      	mov	r4, r1
 8009c16:	6831      	ldr	r1, [r6, #0]
 8009c18:	4605      	mov	r5, r0
 8009c1a:	b911      	cbnz	r1, 8009c22 <sbrk_aligned+0x12>
 8009c1c:	f000 fd94 	bl	800a748 <_sbrk_r>
 8009c20:	6030      	str	r0, [r6, #0]
 8009c22:	4621      	mov	r1, r4
 8009c24:	4628      	mov	r0, r5
 8009c26:	f000 fd8f 	bl	800a748 <_sbrk_r>
 8009c2a:	1c43      	adds	r3, r0, #1
 8009c2c:	d103      	bne.n	8009c36 <sbrk_aligned+0x26>
 8009c2e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009c32:	4620      	mov	r0, r4
 8009c34:	bd70      	pop	{r4, r5, r6, pc}
 8009c36:	1cc4      	adds	r4, r0, #3
 8009c38:	f024 0403 	bic.w	r4, r4, #3
 8009c3c:	42a0      	cmp	r0, r4
 8009c3e:	d0f8      	beq.n	8009c32 <sbrk_aligned+0x22>
 8009c40:	1a21      	subs	r1, r4, r0
 8009c42:	4628      	mov	r0, r5
 8009c44:	f000 fd80 	bl	800a748 <_sbrk_r>
 8009c48:	3001      	adds	r0, #1
 8009c4a:	d1f2      	bne.n	8009c32 <sbrk_aligned+0x22>
 8009c4c:	e7ef      	b.n	8009c2e <sbrk_aligned+0x1e>
 8009c4e:	bf00      	nop
 8009c50:	20000ac4 	.word	0x20000ac4

08009c54 <_malloc_r>:
 8009c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c58:	1ccd      	adds	r5, r1, #3
 8009c5a:	f025 0503 	bic.w	r5, r5, #3
 8009c5e:	3508      	adds	r5, #8
 8009c60:	2d0c      	cmp	r5, #12
 8009c62:	bf38      	it	cc
 8009c64:	250c      	movcc	r5, #12
 8009c66:	2d00      	cmp	r5, #0
 8009c68:	4606      	mov	r6, r0
 8009c6a:	db01      	blt.n	8009c70 <_malloc_r+0x1c>
 8009c6c:	42a9      	cmp	r1, r5
 8009c6e:	d904      	bls.n	8009c7a <_malloc_r+0x26>
 8009c70:	230c      	movs	r3, #12
 8009c72:	6033      	str	r3, [r6, #0]
 8009c74:	2000      	movs	r0, #0
 8009c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009d50 <_malloc_r+0xfc>
 8009c7e:	f000 f915 	bl	8009eac <__malloc_lock>
 8009c82:	f8d8 3000 	ldr.w	r3, [r8]
 8009c86:	461c      	mov	r4, r3
 8009c88:	bb44      	cbnz	r4, 8009cdc <_malloc_r+0x88>
 8009c8a:	4629      	mov	r1, r5
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	f7ff ffbf 	bl	8009c10 <sbrk_aligned>
 8009c92:	1c43      	adds	r3, r0, #1
 8009c94:	4604      	mov	r4, r0
 8009c96:	d158      	bne.n	8009d4a <_malloc_r+0xf6>
 8009c98:	f8d8 4000 	ldr.w	r4, [r8]
 8009c9c:	4627      	mov	r7, r4
 8009c9e:	2f00      	cmp	r7, #0
 8009ca0:	d143      	bne.n	8009d2a <_malloc_r+0xd6>
 8009ca2:	2c00      	cmp	r4, #0
 8009ca4:	d04b      	beq.n	8009d3e <_malloc_r+0xea>
 8009ca6:	6823      	ldr	r3, [r4, #0]
 8009ca8:	4639      	mov	r1, r7
 8009caa:	4630      	mov	r0, r6
 8009cac:	eb04 0903 	add.w	r9, r4, r3
 8009cb0:	f000 fd4a 	bl	800a748 <_sbrk_r>
 8009cb4:	4581      	cmp	r9, r0
 8009cb6:	d142      	bne.n	8009d3e <_malloc_r+0xea>
 8009cb8:	6821      	ldr	r1, [r4, #0]
 8009cba:	1a6d      	subs	r5, r5, r1
 8009cbc:	4629      	mov	r1, r5
 8009cbe:	4630      	mov	r0, r6
 8009cc0:	f7ff ffa6 	bl	8009c10 <sbrk_aligned>
 8009cc4:	3001      	adds	r0, #1
 8009cc6:	d03a      	beq.n	8009d3e <_malloc_r+0xea>
 8009cc8:	6823      	ldr	r3, [r4, #0]
 8009cca:	442b      	add	r3, r5
 8009ccc:	6023      	str	r3, [r4, #0]
 8009cce:	f8d8 3000 	ldr.w	r3, [r8]
 8009cd2:	685a      	ldr	r2, [r3, #4]
 8009cd4:	bb62      	cbnz	r2, 8009d30 <_malloc_r+0xdc>
 8009cd6:	f8c8 7000 	str.w	r7, [r8]
 8009cda:	e00f      	b.n	8009cfc <_malloc_r+0xa8>
 8009cdc:	6822      	ldr	r2, [r4, #0]
 8009cde:	1b52      	subs	r2, r2, r5
 8009ce0:	d420      	bmi.n	8009d24 <_malloc_r+0xd0>
 8009ce2:	2a0b      	cmp	r2, #11
 8009ce4:	d917      	bls.n	8009d16 <_malloc_r+0xc2>
 8009ce6:	1961      	adds	r1, r4, r5
 8009ce8:	42a3      	cmp	r3, r4
 8009cea:	6025      	str	r5, [r4, #0]
 8009cec:	bf18      	it	ne
 8009cee:	6059      	strne	r1, [r3, #4]
 8009cf0:	6863      	ldr	r3, [r4, #4]
 8009cf2:	bf08      	it	eq
 8009cf4:	f8c8 1000 	streq.w	r1, [r8]
 8009cf8:	5162      	str	r2, [r4, r5]
 8009cfa:	604b      	str	r3, [r1, #4]
 8009cfc:	4630      	mov	r0, r6
 8009cfe:	f000 f8db 	bl	8009eb8 <__malloc_unlock>
 8009d02:	f104 000b 	add.w	r0, r4, #11
 8009d06:	1d23      	adds	r3, r4, #4
 8009d08:	f020 0007 	bic.w	r0, r0, #7
 8009d0c:	1ac2      	subs	r2, r0, r3
 8009d0e:	bf1c      	itt	ne
 8009d10:	1a1b      	subne	r3, r3, r0
 8009d12:	50a3      	strne	r3, [r4, r2]
 8009d14:	e7af      	b.n	8009c76 <_malloc_r+0x22>
 8009d16:	6862      	ldr	r2, [r4, #4]
 8009d18:	42a3      	cmp	r3, r4
 8009d1a:	bf0c      	ite	eq
 8009d1c:	f8c8 2000 	streq.w	r2, [r8]
 8009d20:	605a      	strne	r2, [r3, #4]
 8009d22:	e7eb      	b.n	8009cfc <_malloc_r+0xa8>
 8009d24:	4623      	mov	r3, r4
 8009d26:	6864      	ldr	r4, [r4, #4]
 8009d28:	e7ae      	b.n	8009c88 <_malloc_r+0x34>
 8009d2a:	463c      	mov	r4, r7
 8009d2c:	687f      	ldr	r7, [r7, #4]
 8009d2e:	e7b6      	b.n	8009c9e <_malloc_r+0x4a>
 8009d30:	461a      	mov	r2, r3
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	42a3      	cmp	r3, r4
 8009d36:	d1fb      	bne.n	8009d30 <_malloc_r+0xdc>
 8009d38:	2300      	movs	r3, #0
 8009d3a:	6053      	str	r3, [r2, #4]
 8009d3c:	e7de      	b.n	8009cfc <_malloc_r+0xa8>
 8009d3e:	230c      	movs	r3, #12
 8009d40:	6033      	str	r3, [r6, #0]
 8009d42:	4630      	mov	r0, r6
 8009d44:	f000 f8b8 	bl	8009eb8 <__malloc_unlock>
 8009d48:	e794      	b.n	8009c74 <_malloc_r+0x20>
 8009d4a:	6005      	str	r5, [r0, #0]
 8009d4c:	e7d6      	b.n	8009cfc <_malloc_r+0xa8>
 8009d4e:	bf00      	nop
 8009d50:	20000ac8 	.word	0x20000ac8

08009d54 <__sflush_r>:
 8009d54:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d5c:	0716      	lsls	r6, r2, #28
 8009d5e:	4605      	mov	r5, r0
 8009d60:	460c      	mov	r4, r1
 8009d62:	d454      	bmi.n	8009e0e <__sflush_r+0xba>
 8009d64:	684b      	ldr	r3, [r1, #4]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	dc02      	bgt.n	8009d70 <__sflush_r+0x1c>
 8009d6a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	dd48      	ble.n	8009e02 <__sflush_r+0xae>
 8009d70:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d72:	2e00      	cmp	r6, #0
 8009d74:	d045      	beq.n	8009e02 <__sflush_r+0xae>
 8009d76:	2300      	movs	r3, #0
 8009d78:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009d7c:	682f      	ldr	r7, [r5, #0]
 8009d7e:	6a21      	ldr	r1, [r4, #32]
 8009d80:	602b      	str	r3, [r5, #0]
 8009d82:	d030      	beq.n	8009de6 <__sflush_r+0x92>
 8009d84:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d86:	89a3      	ldrh	r3, [r4, #12]
 8009d88:	0759      	lsls	r1, r3, #29
 8009d8a:	d505      	bpl.n	8009d98 <__sflush_r+0x44>
 8009d8c:	6863      	ldr	r3, [r4, #4]
 8009d8e:	1ad2      	subs	r2, r2, r3
 8009d90:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009d92:	b10b      	cbz	r3, 8009d98 <__sflush_r+0x44>
 8009d94:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d96:	1ad2      	subs	r2, r2, r3
 8009d98:	2300      	movs	r3, #0
 8009d9a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009d9c:	6a21      	ldr	r1, [r4, #32]
 8009d9e:	4628      	mov	r0, r5
 8009da0:	47b0      	blx	r6
 8009da2:	1c43      	adds	r3, r0, #1
 8009da4:	89a3      	ldrh	r3, [r4, #12]
 8009da6:	d106      	bne.n	8009db6 <__sflush_r+0x62>
 8009da8:	6829      	ldr	r1, [r5, #0]
 8009daa:	291d      	cmp	r1, #29
 8009dac:	d82b      	bhi.n	8009e06 <__sflush_r+0xb2>
 8009dae:	4a2a      	ldr	r2, [pc, #168]	@ (8009e58 <__sflush_r+0x104>)
 8009db0:	410a      	asrs	r2, r1
 8009db2:	07d6      	lsls	r6, r2, #31
 8009db4:	d427      	bmi.n	8009e06 <__sflush_r+0xb2>
 8009db6:	2200      	movs	r2, #0
 8009db8:	6062      	str	r2, [r4, #4]
 8009dba:	04d9      	lsls	r1, r3, #19
 8009dbc:	6922      	ldr	r2, [r4, #16]
 8009dbe:	6022      	str	r2, [r4, #0]
 8009dc0:	d504      	bpl.n	8009dcc <__sflush_r+0x78>
 8009dc2:	1c42      	adds	r2, r0, #1
 8009dc4:	d101      	bne.n	8009dca <__sflush_r+0x76>
 8009dc6:	682b      	ldr	r3, [r5, #0]
 8009dc8:	b903      	cbnz	r3, 8009dcc <__sflush_r+0x78>
 8009dca:	6560      	str	r0, [r4, #84]	@ 0x54
 8009dcc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009dce:	602f      	str	r7, [r5, #0]
 8009dd0:	b1b9      	cbz	r1, 8009e02 <__sflush_r+0xae>
 8009dd2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009dd6:	4299      	cmp	r1, r3
 8009dd8:	d002      	beq.n	8009de0 <__sflush_r+0x8c>
 8009dda:	4628      	mov	r0, r5
 8009ddc:	f000 fd16 	bl	800a80c <_free_r>
 8009de0:	2300      	movs	r3, #0
 8009de2:	6363      	str	r3, [r4, #52]	@ 0x34
 8009de4:	e00d      	b.n	8009e02 <__sflush_r+0xae>
 8009de6:	2301      	movs	r3, #1
 8009de8:	4628      	mov	r0, r5
 8009dea:	47b0      	blx	r6
 8009dec:	4602      	mov	r2, r0
 8009dee:	1c50      	adds	r0, r2, #1
 8009df0:	d1c9      	bne.n	8009d86 <__sflush_r+0x32>
 8009df2:	682b      	ldr	r3, [r5, #0]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d0c6      	beq.n	8009d86 <__sflush_r+0x32>
 8009df8:	2b1d      	cmp	r3, #29
 8009dfa:	d001      	beq.n	8009e00 <__sflush_r+0xac>
 8009dfc:	2b16      	cmp	r3, #22
 8009dfe:	d11e      	bne.n	8009e3e <__sflush_r+0xea>
 8009e00:	602f      	str	r7, [r5, #0]
 8009e02:	2000      	movs	r0, #0
 8009e04:	e022      	b.n	8009e4c <__sflush_r+0xf8>
 8009e06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e0a:	b21b      	sxth	r3, r3
 8009e0c:	e01b      	b.n	8009e46 <__sflush_r+0xf2>
 8009e0e:	690f      	ldr	r7, [r1, #16]
 8009e10:	2f00      	cmp	r7, #0
 8009e12:	d0f6      	beq.n	8009e02 <__sflush_r+0xae>
 8009e14:	0793      	lsls	r3, r2, #30
 8009e16:	680e      	ldr	r6, [r1, #0]
 8009e18:	bf08      	it	eq
 8009e1a:	694b      	ldreq	r3, [r1, #20]
 8009e1c:	600f      	str	r7, [r1, #0]
 8009e1e:	bf18      	it	ne
 8009e20:	2300      	movne	r3, #0
 8009e22:	eba6 0807 	sub.w	r8, r6, r7
 8009e26:	608b      	str	r3, [r1, #8]
 8009e28:	f1b8 0f00 	cmp.w	r8, #0
 8009e2c:	dde9      	ble.n	8009e02 <__sflush_r+0xae>
 8009e2e:	6a21      	ldr	r1, [r4, #32]
 8009e30:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009e32:	4643      	mov	r3, r8
 8009e34:	463a      	mov	r2, r7
 8009e36:	4628      	mov	r0, r5
 8009e38:	47b0      	blx	r6
 8009e3a:	2800      	cmp	r0, #0
 8009e3c:	dc08      	bgt.n	8009e50 <__sflush_r+0xfc>
 8009e3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e46:	81a3      	strh	r3, [r4, #12]
 8009e48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e50:	4407      	add	r7, r0
 8009e52:	eba8 0800 	sub.w	r8, r8, r0
 8009e56:	e7e7      	b.n	8009e28 <__sflush_r+0xd4>
 8009e58:	dfbffffe 	.word	0xdfbffffe

08009e5c <_fflush_r>:
 8009e5c:	b538      	push	{r3, r4, r5, lr}
 8009e5e:	690b      	ldr	r3, [r1, #16]
 8009e60:	4605      	mov	r5, r0
 8009e62:	460c      	mov	r4, r1
 8009e64:	b913      	cbnz	r3, 8009e6c <_fflush_r+0x10>
 8009e66:	2500      	movs	r5, #0
 8009e68:	4628      	mov	r0, r5
 8009e6a:	bd38      	pop	{r3, r4, r5, pc}
 8009e6c:	b118      	cbz	r0, 8009e76 <_fflush_r+0x1a>
 8009e6e:	6a03      	ldr	r3, [r0, #32]
 8009e70:	b90b      	cbnz	r3, 8009e76 <_fflush_r+0x1a>
 8009e72:	f7fe feb1 	bl	8008bd8 <__sinit>
 8009e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d0f3      	beq.n	8009e66 <_fflush_r+0xa>
 8009e7e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e80:	07d0      	lsls	r0, r2, #31
 8009e82:	d404      	bmi.n	8009e8e <_fflush_r+0x32>
 8009e84:	0599      	lsls	r1, r3, #22
 8009e86:	d402      	bmi.n	8009e8e <_fflush_r+0x32>
 8009e88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e8a:	f7fe ff12 	bl	8008cb2 <__retarget_lock_acquire_recursive>
 8009e8e:	4628      	mov	r0, r5
 8009e90:	4621      	mov	r1, r4
 8009e92:	f7ff ff5f 	bl	8009d54 <__sflush_r>
 8009e96:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e98:	07da      	lsls	r2, r3, #31
 8009e9a:	4605      	mov	r5, r0
 8009e9c:	d4e4      	bmi.n	8009e68 <_fflush_r+0xc>
 8009e9e:	89a3      	ldrh	r3, [r4, #12]
 8009ea0:	059b      	lsls	r3, r3, #22
 8009ea2:	d4e1      	bmi.n	8009e68 <_fflush_r+0xc>
 8009ea4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ea6:	f7fe ff05 	bl	8008cb4 <__retarget_lock_release_recursive>
 8009eaa:	e7dd      	b.n	8009e68 <_fflush_r+0xc>

08009eac <__malloc_lock>:
 8009eac:	4801      	ldr	r0, [pc, #4]	@ (8009eb4 <__malloc_lock+0x8>)
 8009eae:	f7fe bf00 	b.w	8008cb2 <__retarget_lock_acquire_recursive>
 8009eb2:	bf00      	nop
 8009eb4:	20000ac0 	.word	0x20000ac0

08009eb8 <__malloc_unlock>:
 8009eb8:	4801      	ldr	r0, [pc, #4]	@ (8009ec0 <__malloc_unlock+0x8>)
 8009eba:	f7fe befb 	b.w	8008cb4 <__retarget_lock_release_recursive>
 8009ebe:	bf00      	nop
 8009ec0:	20000ac0 	.word	0x20000ac0

08009ec4 <_Balloc>:
 8009ec4:	b570      	push	{r4, r5, r6, lr}
 8009ec6:	69c6      	ldr	r6, [r0, #28]
 8009ec8:	4604      	mov	r4, r0
 8009eca:	460d      	mov	r5, r1
 8009ecc:	b976      	cbnz	r6, 8009eec <_Balloc+0x28>
 8009ece:	2010      	movs	r0, #16
 8009ed0:	f7ff fe96 	bl	8009c00 <malloc>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	61e0      	str	r0, [r4, #28]
 8009ed8:	b920      	cbnz	r0, 8009ee4 <_Balloc+0x20>
 8009eda:	4b18      	ldr	r3, [pc, #96]	@ (8009f3c <_Balloc+0x78>)
 8009edc:	4818      	ldr	r0, [pc, #96]	@ (8009f40 <_Balloc+0x7c>)
 8009ede:	216b      	movs	r1, #107	@ 0x6b
 8009ee0:	f000 fc62 	bl	800a7a8 <__assert_func>
 8009ee4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ee8:	6006      	str	r6, [r0, #0]
 8009eea:	60c6      	str	r6, [r0, #12]
 8009eec:	69e6      	ldr	r6, [r4, #28]
 8009eee:	68f3      	ldr	r3, [r6, #12]
 8009ef0:	b183      	cbz	r3, 8009f14 <_Balloc+0x50>
 8009ef2:	69e3      	ldr	r3, [r4, #28]
 8009ef4:	68db      	ldr	r3, [r3, #12]
 8009ef6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009efa:	b9b8      	cbnz	r0, 8009f2c <_Balloc+0x68>
 8009efc:	2101      	movs	r1, #1
 8009efe:	fa01 f605 	lsl.w	r6, r1, r5
 8009f02:	1d72      	adds	r2, r6, #5
 8009f04:	0092      	lsls	r2, r2, #2
 8009f06:	4620      	mov	r0, r4
 8009f08:	f000 fc6c 	bl	800a7e4 <_calloc_r>
 8009f0c:	b160      	cbz	r0, 8009f28 <_Balloc+0x64>
 8009f0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f12:	e00e      	b.n	8009f32 <_Balloc+0x6e>
 8009f14:	2221      	movs	r2, #33	@ 0x21
 8009f16:	2104      	movs	r1, #4
 8009f18:	4620      	mov	r0, r4
 8009f1a:	f000 fc63 	bl	800a7e4 <_calloc_r>
 8009f1e:	69e3      	ldr	r3, [r4, #28]
 8009f20:	60f0      	str	r0, [r6, #12]
 8009f22:	68db      	ldr	r3, [r3, #12]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d1e4      	bne.n	8009ef2 <_Balloc+0x2e>
 8009f28:	2000      	movs	r0, #0
 8009f2a:	bd70      	pop	{r4, r5, r6, pc}
 8009f2c:	6802      	ldr	r2, [r0, #0]
 8009f2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009f32:	2300      	movs	r3, #0
 8009f34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009f38:	e7f7      	b.n	8009f2a <_Balloc+0x66>
 8009f3a:	bf00      	nop
 8009f3c:	0800af59 	.word	0x0800af59
 8009f40:	0800afea 	.word	0x0800afea

08009f44 <_Bfree>:
 8009f44:	b570      	push	{r4, r5, r6, lr}
 8009f46:	69c6      	ldr	r6, [r0, #28]
 8009f48:	4605      	mov	r5, r0
 8009f4a:	460c      	mov	r4, r1
 8009f4c:	b976      	cbnz	r6, 8009f6c <_Bfree+0x28>
 8009f4e:	2010      	movs	r0, #16
 8009f50:	f7ff fe56 	bl	8009c00 <malloc>
 8009f54:	4602      	mov	r2, r0
 8009f56:	61e8      	str	r0, [r5, #28]
 8009f58:	b920      	cbnz	r0, 8009f64 <_Bfree+0x20>
 8009f5a:	4b09      	ldr	r3, [pc, #36]	@ (8009f80 <_Bfree+0x3c>)
 8009f5c:	4809      	ldr	r0, [pc, #36]	@ (8009f84 <_Bfree+0x40>)
 8009f5e:	218f      	movs	r1, #143	@ 0x8f
 8009f60:	f000 fc22 	bl	800a7a8 <__assert_func>
 8009f64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f68:	6006      	str	r6, [r0, #0]
 8009f6a:	60c6      	str	r6, [r0, #12]
 8009f6c:	b13c      	cbz	r4, 8009f7e <_Bfree+0x3a>
 8009f6e:	69eb      	ldr	r3, [r5, #28]
 8009f70:	6862      	ldr	r2, [r4, #4]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009f78:	6021      	str	r1, [r4, #0]
 8009f7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009f7e:	bd70      	pop	{r4, r5, r6, pc}
 8009f80:	0800af59 	.word	0x0800af59
 8009f84:	0800afea 	.word	0x0800afea

08009f88 <__multadd>:
 8009f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f8c:	690d      	ldr	r5, [r1, #16]
 8009f8e:	4607      	mov	r7, r0
 8009f90:	460c      	mov	r4, r1
 8009f92:	461e      	mov	r6, r3
 8009f94:	f101 0c14 	add.w	ip, r1, #20
 8009f98:	2000      	movs	r0, #0
 8009f9a:	f8dc 3000 	ldr.w	r3, [ip]
 8009f9e:	b299      	uxth	r1, r3
 8009fa0:	fb02 6101 	mla	r1, r2, r1, r6
 8009fa4:	0c1e      	lsrs	r6, r3, #16
 8009fa6:	0c0b      	lsrs	r3, r1, #16
 8009fa8:	fb02 3306 	mla	r3, r2, r6, r3
 8009fac:	b289      	uxth	r1, r1
 8009fae:	3001      	adds	r0, #1
 8009fb0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009fb4:	4285      	cmp	r5, r0
 8009fb6:	f84c 1b04 	str.w	r1, [ip], #4
 8009fba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009fbe:	dcec      	bgt.n	8009f9a <__multadd+0x12>
 8009fc0:	b30e      	cbz	r6, 800a006 <__multadd+0x7e>
 8009fc2:	68a3      	ldr	r3, [r4, #8]
 8009fc4:	42ab      	cmp	r3, r5
 8009fc6:	dc19      	bgt.n	8009ffc <__multadd+0x74>
 8009fc8:	6861      	ldr	r1, [r4, #4]
 8009fca:	4638      	mov	r0, r7
 8009fcc:	3101      	adds	r1, #1
 8009fce:	f7ff ff79 	bl	8009ec4 <_Balloc>
 8009fd2:	4680      	mov	r8, r0
 8009fd4:	b928      	cbnz	r0, 8009fe2 <__multadd+0x5a>
 8009fd6:	4602      	mov	r2, r0
 8009fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800a00c <__multadd+0x84>)
 8009fda:	480d      	ldr	r0, [pc, #52]	@ (800a010 <__multadd+0x88>)
 8009fdc:	21ba      	movs	r1, #186	@ 0xba
 8009fde:	f000 fbe3 	bl	800a7a8 <__assert_func>
 8009fe2:	6922      	ldr	r2, [r4, #16]
 8009fe4:	3202      	adds	r2, #2
 8009fe6:	f104 010c 	add.w	r1, r4, #12
 8009fea:	0092      	lsls	r2, r2, #2
 8009fec:	300c      	adds	r0, #12
 8009fee:	f000 fbcd 	bl	800a78c <memcpy>
 8009ff2:	4621      	mov	r1, r4
 8009ff4:	4638      	mov	r0, r7
 8009ff6:	f7ff ffa5 	bl	8009f44 <_Bfree>
 8009ffa:	4644      	mov	r4, r8
 8009ffc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a000:	3501      	adds	r5, #1
 800a002:	615e      	str	r6, [r3, #20]
 800a004:	6125      	str	r5, [r4, #16]
 800a006:	4620      	mov	r0, r4
 800a008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a00c:	0800afc8 	.word	0x0800afc8
 800a010:	0800afea 	.word	0x0800afea

0800a014 <__hi0bits>:
 800a014:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a018:	4603      	mov	r3, r0
 800a01a:	bf36      	itet	cc
 800a01c:	0403      	lslcc	r3, r0, #16
 800a01e:	2000      	movcs	r0, #0
 800a020:	2010      	movcc	r0, #16
 800a022:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a026:	bf3c      	itt	cc
 800a028:	021b      	lslcc	r3, r3, #8
 800a02a:	3008      	addcc	r0, #8
 800a02c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a030:	bf3c      	itt	cc
 800a032:	011b      	lslcc	r3, r3, #4
 800a034:	3004      	addcc	r0, #4
 800a036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a03a:	bf3c      	itt	cc
 800a03c:	009b      	lslcc	r3, r3, #2
 800a03e:	3002      	addcc	r0, #2
 800a040:	2b00      	cmp	r3, #0
 800a042:	db05      	blt.n	800a050 <__hi0bits+0x3c>
 800a044:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a048:	f100 0001 	add.w	r0, r0, #1
 800a04c:	bf08      	it	eq
 800a04e:	2020      	moveq	r0, #32
 800a050:	4770      	bx	lr

0800a052 <__lo0bits>:
 800a052:	6803      	ldr	r3, [r0, #0]
 800a054:	4602      	mov	r2, r0
 800a056:	f013 0007 	ands.w	r0, r3, #7
 800a05a:	d00b      	beq.n	800a074 <__lo0bits+0x22>
 800a05c:	07d9      	lsls	r1, r3, #31
 800a05e:	d421      	bmi.n	800a0a4 <__lo0bits+0x52>
 800a060:	0798      	lsls	r0, r3, #30
 800a062:	bf49      	itett	mi
 800a064:	085b      	lsrmi	r3, r3, #1
 800a066:	089b      	lsrpl	r3, r3, #2
 800a068:	2001      	movmi	r0, #1
 800a06a:	6013      	strmi	r3, [r2, #0]
 800a06c:	bf5c      	itt	pl
 800a06e:	6013      	strpl	r3, [r2, #0]
 800a070:	2002      	movpl	r0, #2
 800a072:	4770      	bx	lr
 800a074:	b299      	uxth	r1, r3
 800a076:	b909      	cbnz	r1, 800a07c <__lo0bits+0x2a>
 800a078:	0c1b      	lsrs	r3, r3, #16
 800a07a:	2010      	movs	r0, #16
 800a07c:	b2d9      	uxtb	r1, r3
 800a07e:	b909      	cbnz	r1, 800a084 <__lo0bits+0x32>
 800a080:	3008      	adds	r0, #8
 800a082:	0a1b      	lsrs	r3, r3, #8
 800a084:	0719      	lsls	r1, r3, #28
 800a086:	bf04      	itt	eq
 800a088:	091b      	lsreq	r3, r3, #4
 800a08a:	3004      	addeq	r0, #4
 800a08c:	0799      	lsls	r1, r3, #30
 800a08e:	bf04      	itt	eq
 800a090:	089b      	lsreq	r3, r3, #2
 800a092:	3002      	addeq	r0, #2
 800a094:	07d9      	lsls	r1, r3, #31
 800a096:	d403      	bmi.n	800a0a0 <__lo0bits+0x4e>
 800a098:	085b      	lsrs	r3, r3, #1
 800a09a:	f100 0001 	add.w	r0, r0, #1
 800a09e:	d003      	beq.n	800a0a8 <__lo0bits+0x56>
 800a0a0:	6013      	str	r3, [r2, #0]
 800a0a2:	4770      	bx	lr
 800a0a4:	2000      	movs	r0, #0
 800a0a6:	4770      	bx	lr
 800a0a8:	2020      	movs	r0, #32
 800a0aa:	4770      	bx	lr

0800a0ac <__i2b>:
 800a0ac:	b510      	push	{r4, lr}
 800a0ae:	460c      	mov	r4, r1
 800a0b0:	2101      	movs	r1, #1
 800a0b2:	f7ff ff07 	bl	8009ec4 <_Balloc>
 800a0b6:	4602      	mov	r2, r0
 800a0b8:	b928      	cbnz	r0, 800a0c6 <__i2b+0x1a>
 800a0ba:	4b05      	ldr	r3, [pc, #20]	@ (800a0d0 <__i2b+0x24>)
 800a0bc:	4805      	ldr	r0, [pc, #20]	@ (800a0d4 <__i2b+0x28>)
 800a0be:	f240 1145 	movw	r1, #325	@ 0x145
 800a0c2:	f000 fb71 	bl	800a7a8 <__assert_func>
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	6144      	str	r4, [r0, #20]
 800a0ca:	6103      	str	r3, [r0, #16]
 800a0cc:	bd10      	pop	{r4, pc}
 800a0ce:	bf00      	nop
 800a0d0:	0800afc8 	.word	0x0800afc8
 800a0d4:	0800afea 	.word	0x0800afea

0800a0d8 <__multiply>:
 800a0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0dc:	4614      	mov	r4, r2
 800a0de:	690a      	ldr	r2, [r1, #16]
 800a0e0:	6923      	ldr	r3, [r4, #16]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	bfa8      	it	ge
 800a0e6:	4623      	movge	r3, r4
 800a0e8:	460f      	mov	r7, r1
 800a0ea:	bfa4      	itt	ge
 800a0ec:	460c      	movge	r4, r1
 800a0ee:	461f      	movge	r7, r3
 800a0f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a0f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a0f8:	68a3      	ldr	r3, [r4, #8]
 800a0fa:	6861      	ldr	r1, [r4, #4]
 800a0fc:	eb0a 0609 	add.w	r6, sl, r9
 800a100:	42b3      	cmp	r3, r6
 800a102:	b085      	sub	sp, #20
 800a104:	bfb8      	it	lt
 800a106:	3101      	addlt	r1, #1
 800a108:	f7ff fedc 	bl	8009ec4 <_Balloc>
 800a10c:	b930      	cbnz	r0, 800a11c <__multiply+0x44>
 800a10e:	4602      	mov	r2, r0
 800a110:	4b44      	ldr	r3, [pc, #272]	@ (800a224 <__multiply+0x14c>)
 800a112:	4845      	ldr	r0, [pc, #276]	@ (800a228 <__multiply+0x150>)
 800a114:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a118:	f000 fb46 	bl	800a7a8 <__assert_func>
 800a11c:	f100 0514 	add.w	r5, r0, #20
 800a120:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a124:	462b      	mov	r3, r5
 800a126:	2200      	movs	r2, #0
 800a128:	4543      	cmp	r3, r8
 800a12a:	d321      	bcc.n	800a170 <__multiply+0x98>
 800a12c:	f107 0114 	add.w	r1, r7, #20
 800a130:	f104 0214 	add.w	r2, r4, #20
 800a134:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a138:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a13c:	9302      	str	r3, [sp, #8]
 800a13e:	1b13      	subs	r3, r2, r4
 800a140:	3b15      	subs	r3, #21
 800a142:	f023 0303 	bic.w	r3, r3, #3
 800a146:	3304      	adds	r3, #4
 800a148:	f104 0715 	add.w	r7, r4, #21
 800a14c:	42ba      	cmp	r2, r7
 800a14e:	bf38      	it	cc
 800a150:	2304      	movcc	r3, #4
 800a152:	9301      	str	r3, [sp, #4]
 800a154:	9b02      	ldr	r3, [sp, #8]
 800a156:	9103      	str	r1, [sp, #12]
 800a158:	428b      	cmp	r3, r1
 800a15a:	d80c      	bhi.n	800a176 <__multiply+0x9e>
 800a15c:	2e00      	cmp	r6, #0
 800a15e:	dd03      	ble.n	800a168 <__multiply+0x90>
 800a160:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a164:	2b00      	cmp	r3, #0
 800a166:	d05b      	beq.n	800a220 <__multiply+0x148>
 800a168:	6106      	str	r6, [r0, #16]
 800a16a:	b005      	add	sp, #20
 800a16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a170:	f843 2b04 	str.w	r2, [r3], #4
 800a174:	e7d8      	b.n	800a128 <__multiply+0x50>
 800a176:	f8b1 a000 	ldrh.w	sl, [r1]
 800a17a:	f1ba 0f00 	cmp.w	sl, #0
 800a17e:	d024      	beq.n	800a1ca <__multiply+0xf2>
 800a180:	f104 0e14 	add.w	lr, r4, #20
 800a184:	46a9      	mov	r9, r5
 800a186:	f04f 0c00 	mov.w	ip, #0
 800a18a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a18e:	f8d9 3000 	ldr.w	r3, [r9]
 800a192:	fa1f fb87 	uxth.w	fp, r7
 800a196:	b29b      	uxth	r3, r3
 800a198:	fb0a 330b 	mla	r3, sl, fp, r3
 800a19c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a1a0:	f8d9 7000 	ldr.w	r7, [r9]
 800a1a4:	4463      	add	r3, ip
 800a1a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a1aa:	fb0a c70b 	mla	r7, sl, fp, ip
 800a1ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a1b8:	4572      	cmp	r2, lr
 800a1ba:	f849 3b04 	str.w	r3, [r9], #4
 800a1be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a1c2:	d8e2      	bhi.n	800a18a <__multiply+0xb2>
 800a1c4:	9b01      	ldr	r3, [sp, #4]
 800a1c6:	f845 c003 	str.w	ip, [r5, r3]
 800a1ca:	9b03      	ldr	r3, [sp, #12]
 800a1cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a1d0:	3104      	adds	r1, #4
 800a1d2:	f1b9 0f00 	cmp.w	r9, #0
 800a1d6:	d021      	beq.n	800a21c <__multiply+0x144>
 800a1d8:	682b      	ldr	r3, [r5, #0]
 800a1da:	f104 0c14 	add.w	ip, r4, #20
 800a1de:	46ae      	mov	lr, r5
 800a1e0:	f04f 0a00 	mov.w	sl, #0
 800a1e4:	f8bc b000 	ldrh.w	fp, [ip]
 800a1e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a1ec:	fb09 770b 	mla	r7, r9, fp, r7
 800a1f0:	4457      	add	r7, sl
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a1f8:	f84e 3b04 	str.w	r3, [lr], #4
 800a1fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a200:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a204:	f8be 3000 	ldrh.w	r3, [lr]
 800a208:	fb09 330a 	mla	r3, r9, sl, r3
 800a20c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a210:	4562      	cmp	r2, ip
 800a212:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a216:	d8e5      	bhi.n	800a1e4 <__multiply+0x10c>
 800a218:	9f01      	ldr	r7, [sp, #4]
 800a21a:	51eb      	str	r3, [r5, r7]
 800a21c:	3504      	adds	r5, #4
 800a21e:	e799      	b.n	800a154 <__multiply+0x7c>
 800a220:	3e01      	subs	r6, #1
 800a222:	e79b      	b.n	800a15c <__multiply+0x84>
 800a224:	0800afc8 	.word	0x0800afc8
 800a228:	0800afea 	.word	0x0800afea

0800a22c <__pow5mult>:
 800a22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a230:	4615      	mov	r5, r2
 800a232:	f012 0203 	ands.w	r2, r2, #3
 800a236:	4607      	mov	r7, r0
 800a238:	460e      	mov	r6, r1
 800a23a:	d007      	beq.n	800a24c <__pow5mult+0x20>
 800a23c:	4c25      	ldr	r4, [pc, #148]	@ (800a2d4 <__pow5mult+0xa8>)
 800a23e:	3a01      	subs	r2, #1
 800a240:	2300      	movs	r3, #0
 800a242:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a246:	f7ff fe9f 	bl	8009f88 <__multadd>
 800a24a:	4606      	mov	r6, r0
 800a24c:	10ad      	asrs	r5, r5, #2
 800a24e:	d03d      	beq.n	800a2cc <__pow5mult+0xa0>
 800a250:	69fc      	ldr	r4, [r7, #28]
 800a252:	b97c      	cbnz	r4, 800a274 <__pow5mult+0x48>
 800a254:	2010      	movs	r0, #16
 800a256:	f7ff fcd3 	bl	8009c00 <malloc>
 800a25a:	4602      	mov	r2, r0
 800a25c:	61f8      	str	r0, [r7, #28]
 800a25e:	b928      	cbnz	r0, 800a26c <__pow5mult+0x40>
 800a260:	4b1d      	ldr	r3, [pc, #116]	@ (800a2d8 <__pow5mult+0xac>)
 800a262:	481e      	ldr	r0, [pc, #120]	@ (800a2dc <__pow5mult+0xb0>)
 800a264:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a268:	f000 fa9e 	bl	800a7a8 <__assert_func>
 800a26c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a270:	6004      	str	r4, [r0, #0]
 800a272:	60c4      	str	r4, [r0, #12]
 800a274:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a278:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a27c:	b94c      	cbnz	r4, 800a292 <__pow5mult+0x66>
 800a27e:	f240 2171 	movw	r1, #625	@ 0x271
 800a282:	4638      	mov	r0, r7
 800a284:	f7ff ff12 	bl	800a0ac <__i2b>
 800a288:	2300      	movs	r3, #0
 800a28a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a28e:	4604      	mov	r4, r0
 800a290:	6003      	str	r3, [r0, #0]
 800a292:	f04f 0900 	mov.w	r9, #0
 800a296:	07eb      	lsls	r3, r5, #31
 800a298:	d50a      	bpl.n	800a2b0 <__pow5mult+0x84>
 800a29a:	4631      	mov	r1, r6
 800a29c:	4622      	mov	r2, r4
 800a29e:	4638      	mov	r0, r7
 800a2a0:	f7ff ff1a 	bl	800a0d8 <__multiply>
 800a2a4:	4631      	mov	r1, r6
 800a2a6:	4680      	mov	r8, r0
 800a2a8:	4638      	mov	r0, r7
 800a2aa:	f7ff fe4b 	bl	8009f44 <_Bfree>
 800a2ae:	4646      	mov	r6, r8
 800a2b0:	106d      	asrs	r5, r5, #1
 800a2b2:	d00b      	beq.n	800a2cc <__pow5mult+0xa0>
 800a2b4:	6820      	ldr	r0, [r4, #0]
 800a2b6:	b938      	cbnz	r0, 800a2c8 <__pow5mult+0x9c>
 800a2b8:	4622      	mov	r2, r4
 800a2ba:	4621      	mov	r1, r4
 800a2bc:	4638      	mov	r0, r7
 800a2be:	f7ff ff0b 	bl	800a0d8 <__multiply>
 800a2c2:	6020      	str	r0, [r4, #0]
 800a2c4:	f8c0 9000 	str.w	r9, [r0]
 800a2c8:	4604      	mov	r4, r0
 800a2ca:	e7e4      	b.n	800a296 <__pow5mult+0x6a>
 800a2cc:	4630      	mov	r0, r6
 800a2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2d2:	bf00      	nop
 800a2d4:	0800b044 	.word	0x0800b044
 800a2d8:	0800af59 	.word	0x0800af59
 800a2dc:	0800afea 	.word	0x0800afea

0800a2e0 <__lshift>:
 800a2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2e4:	460c      	mov	r4, r1
 800a2e6:	6849      	ldr	r1, [r1, #4]
 800a2e8:	6923      	ldr	r3, [r4, #16]
 800a2ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a2ee:	68a3      	ldr	r3, [r4, #8]
 800a2f0:	4607      	mov	r7, r0
 800a2f2:	4691      	mov	r9, r2
 800a2f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2f8:	f108 0601 	add.w	r6, r8, #1
 800a2fc:	42b3      	cmp	r3, r6
 800a2fe:	db0b      	blt.n	800a318 <__lshift+0x38>
 800a300:	4638      	mov	r0, r7
 800a302:	f7ff fddf 	bl	8009ec4 <_Balloc>
 800a306:	4605      	mov	r5, r0
 800a308:	b948      	cbnz	r0, 800a31e <__lshift+0x3e>
 800a30a:	4602      	mov	r2, r0
 800a30c:	4b28      	ldr	r3, [pc, #160]	@ (800a3b0 <__lshift+0xd0>)
 800a30e:	4829      	ldr	r0, [pc, #164]	@ (800a3b4 <__lshift+0xd4>)
 800a310:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a314:	f000 fa48 	bl	800a7a8 <__assert_func>
 800a318:	3101      	adds	r1, #1
 800a31a:	005b      	lsls	r3, r3, #1
 800a31c:	e7ee      	b.n	800a2fc <__lshift+0x1c>
 800a31e:	2300      	movs	r3, #0
 800a320:	f100 0114 	add.w	r1, r0, #20
 800a324:	f100 0210 	add.w	r2, r0, #16
 800a328:	4618      	mov	r0, r3
 800a32a:	4553      	cmp	r3, sl
 800a32c:	db33      	blt.n	800a396 <__lshift+0xb6>
 800a32e:	6920      	ldr	r0, [r4, #16]
 800a330:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a334:	f104 0314 	add.w	r3, r4, #20
 800a338:	f019 091f 	ands.w	r9, r9, #31
 800a33c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a340:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a344:	d02b      	beq.n	800a39e <__lshift+0xbe>
 800a346:	f1c9 0e20 	rsb	lr, r9, #32
 800a34a:	468a      	mov	sl, r1
 800a34c:	2200      	movs	r2, #0
 800a34e:	6818      	ldr	r0, [r3, #0]
 800a350:	fa00 f009 	lsl.w	r0, r0, r9
 800a354:	4310      	orrs	r0, r2
 800a356:	f84a 0b04 	str.w	r0, [sl], #4
 800a35a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a35e:	459c      	cmp	ip, r3
 800a360:	fa22 f20e 	lsr.w	r2, r2, lr
 800a364:	d8f3      	bhi.n	800a34e <__lshift+0x6e>
 800a366:	ebac 0304 	sub.w	r3, ip, r4
 800a36a:	3b15      	subs	r3, #21
 800a36c:	f023 0303 	bic.w	r3, r3, #3
 800a370:	3304      	adds	r3, #4
 800a372:	f104 0015 	add.w	r0, r4, #21
 800a376:	4584      	cmp	ip, r0
 800a378:	bf38      	it	cc
 800a37a:	2304      	movcc	r3, #4
 800a37c:	50ca      	str	r2, [r1, r3]
 800a37e:	b10a      	cbz	r2, 800a384 <__lshift+0xa4>
 800a380:	f108 0602 	add.w	r6, r8, #2
 800a384:	3e01      	subs	r6, #1
 800a386:	4638      	mov	r0, r7
 800a388:	612e      	str	r6, [r5, #16]
 800a38a:	4621      	mov	r1, r4
 800a38c:	f7ff fdda 	bl	8009f44 <_Bfree>
 800a390:	4628      	mov	r0, r5
 800a392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a396:	f842 0f04 	str.w	r0, [r2, #4]!
 800a39a:	3301      	adds	r3, #1
 800a39c:	e7c5      	b.n	800a32a <__lshift+0x4a>
 800a39e:	3904      	subs	r1, #4
 800a3a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a3a8:	459c      	cmp	ip, r3
 800a3aa:	d8f9      	bhi.n	800a3a0 <__lshift+0xc0>
 800a3ac:	e7ea      	b.n	800a384 <__lshift+0xa4>
 800a3ae:	bf00      	nop
 800a3b0:	0800afc8 	.word	0x0800afc8
 800a3b4:	0800afea 	.word	0x0800afea

0800a3b8 <__mcmp>:
 800a3b8:	690a      	ldr	r2, [r1, #16]
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	6900      	ldr	r0, [r0, #16]
 800a3be:	1a80      	subs	r0, r0, r2
 800a3c0:	b530      	push	{r4, r5, lr}
 800a3c2:	d10e      	bne.n	800a3e2 <__mcmp+0x2a>
 800a3c4:	3314      	adds	r3, #20
 800a3c6:	3114      	adds	r1, #20
 800a3c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a3cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a3d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a3d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a3d8:	4295      	cmp	r5, r2
 800a3da:	d003      	beq.n	800a3e4 <__mcmp+0x2c>
 800a3dc:	d205      	bcs.n	800a3ea <__mcmp+0x32>
 800a3de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a3e2:	bd30      	pop	{r4, r5, pc}
 800a3e4:	42a3      	cmp	r3, r4
 800a3e6:	d3f3      	bcc.n	800a3d0 <__mcmp+0x18>
 800a3e8:	e7fb      	b.n	800a3e2 <__mcmp+0x2a>
 800a3ea:	2001      	movs	r0, #1
 800a3ec:	e7f9      	b.n	800a3e2 <__mcmp+0x2a>
	...

0800a3f0 <__mdiff>:
 800a3f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3f4:	4689      	mov	r9, r1
 800a3f6:	4606      	mov	r6, r0
 800a3f8:	4611      	mov	r1, r2
 800a3fa:	4648      	mov	r0, r9
 800a3fc:	4614      	mov	r4, r2
 800a3fe:	f7ff ffdb 	bl	800a3b8 <__mcmp>
 800a402:	1e05      	subs	r5, r0, #0
 800a404:	d112      	bne.n	800a42c <__mdiff+0x3c>
 800a406:	4629      	mov	r1, r5
 800a408:	4630      	mov	r0, r6
 800a40a:	f7ff fd5b 	bl	8009ec4 <_Balloc>
 800a40e:	4602      	mov	r2, r0
 800a410:	b928      	cbnz	r0, 800a41e <__mdiff+0x2e>
 800a412:	4b3f      	ldr	r3, [pc, #252]	@ (800a510 <__mdiff+0x120>)
 800a414:	f240 2137 	movw	r1, #567	@ 0x237
 800a418:	483e      	ldr	r0, [pc, #248]	@ (800a514 <__mdiff+0x124>)
 800a41a:	f000 f9c5 	bl	800a7a8 <__assert_func>
 800a41e:	2301      	movs	r3, #1
 800a420:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a424:	4610      	mov	r0, r2
 800a426:	b003      	add	sp, #12
 800a428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a42c:	bfbc      	itt	lt
 800a42e:	464b      	movlt	r3, r9
 800a430:	46a1      	movlt	r9, r4
 800a432:	4630      	mov	r0, r6
 800a434:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a438:	bfba      	itte	lt
 800a43a:	461c      	movlt	r4, r3
 800a43c:	2501      	movlt	r5, #1
 800a43e:	2500      	movge	r5, #0
 800a440:	f7ff fd40 	bl	8009ec4 <_Balloc>
 800a444:	4602      	mov	r2, r0
 800a446:	b918      	cbnz	r0, 800a450 <__mdiff+0x60>
 800a448:	4b31      	ldr	r3, [pc, #196]	@ (800a510 <__mdiff+0x120>)
 800a44a:	f240 2145 	movw	r1, #581	@ 0x245
 800a44e:	e7e3      	b.n	800a418 <__mdiff+0x28>
 800a450:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a454:	6926      	ldr	r6, [r4, #16]
 800a456:	60c5      	str	r5, [r0, #12]
 800a458:	f109 0310 	add.w	r3, r9, #16
 800a45c:	f109 0514 	add.w	r5, r9, #20
 800a460:	f104 0e14 	add.w	lr, r4, #20
 800a464:	f100 0b14 	add.w	fp, r0, #20
 800a468:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a46c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a470:	9301      	str	r3, [sp, #4]
 800a472:	46d9      	mov	r9, fp
 800a474:	f04f 0c00 	mov.w	ip, #0
 800a478:	9b01      	ldr	r3, [sp, #4]
 800a47a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a47e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a482:	9301      	str	r3, [sp, #4]
 800a484:	fa1f f38a 	uxth.w	r3, sl
 800a488:	4619      	mov	r1, r3
 800a48a:	b283      	uxth	r3, r0
 800a48c:	1acb      	subs	r3, r1, r3
 800a48e:	0c00      	lsrs	r0, r0, #16
 800a490:	4463      	add	r3, ip
 800a492:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a496:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a49a:	b29b      	uxth	r3, r3
 800a49c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a4a0:	4576      	cmp	r6, lr
 800a4a2:	f849 3b04 	str.w	r3, [r9], #4
 800a4a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a4aa:	d8e5      	bhi.n	800a478 <__mdiff+0x88>
 800a4ac:	1b33      	subs	r3, r6, r4
 800a4ae:	3b15      	subs	r3, #21
 800a4b0:	f023 0303 	bic.w	r3, r3, #3
 800a4b4:	3415      	adds	r4, #21
 800a4b6:	3304      	adds	r3, #4
 800a4b8:	42a6      	cmp	r6, r4
 800a4ba:	bf38      	it	cc
 800a4bc:	2304      	movcc	r3, #4
 800a4be:	441d      	add	r5, r3
 800a4c0:	445b      	add	r3, fp
 800a4c2:	461e      	mov	r6, r3
 800a4c4:	462c      	mov	r4, r5
 800a4c6:	4544      	cmp	r4, r8
 800a4c8:	d30e      	bcc.n	800a4e8 <__mdiff+0xf8>
 800a4ca:	f108 0103 	add.w	r1, r8, #3
 800a4ce:	1b49      	subs	r1, r1, r5
 800a4d0:	f021 0103 	bic.w	r1, r1, #3
 800a4d4:	3d03      	subs	r5, #3
 800a4d6:	45a8      	cmp	r8, r5
 800a4d8:	bf38      	it	cc
 800a4da:	2100      	movcc	r1, #0
 800a4dc:	440b      	add	r3, r1
 800a4de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a4e2:	b191      	cbz	r1, 800a50a <__mdiff+0x11a>
 800a4e4:	6117      	str	r7, [r2, #16]
 800a4e6:	e79d      	b.n	800a424 <__mdiff+0x34>
 800a4e8:	f854 1b04 	ldr.w	r1, [r4], #4
 800a4ec:	46e6      	mov	lr, ip
 800a4ee:	0c08      	lsrs	r0, r1, #16
 800a4f0:	fa1c fc81 	uxtah	ip, ip, r1
 800a4f4:	4471      	add	r1, lr
 800a4f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a4fa:	b289      	uxth	r1, r1
 800a4fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a500:	f846 1b04 	str.w	r1, [r6], #4
 800a504:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a508:	e7dd      	b.n	800a4c6 <__mdiff+0xd6>
 800a50a:	3f01      	subs	r7, #1
 800a50c:	e7e7      	b.n	800a4de <__mdiff+0xee>
 800a50e:	bf00      	nop
 800a510:	0800afc8 	.word	0x0800afc8
 800a514:	0800afea 	.word	0x0800afea

0800a518 <__d2b>:
 800a518:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a51c:	460f      	mov	r7, r1
 800a51e:	2101      	movs	r1, #1
 800a520:	ec59 8b10 	vmov	r8, r9, d0
 800a524:	4616      	mov	r6, r2
 800a526:	f7ff fccd 	bl	8009ec4 <_Balloc>
 800a52a:	4604      	mov	r4, r0
 800a52c:	b930      	cbnz	r0, 800a53c <__d2b+0x24>
 800a52e:	4602      	mov	r2, r0
 800a530:	4b23      	ldr	r3, [pc, #140]	@ (800a5c0 <__d2b+0xa8>)
 800a532:	4824      	ldr	r0, [pc, #144]	@ (800a5c4 <__d2b+0xac>)
 800a534:	f240 310f 	movw	r1, #783	@ 0x30f
 800a538:	f000 f936 	bl	800a7a8 <__assert_func>
 800a53c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a540:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a544:	b10d      	cbz	r5, 800a54a <__d2b+0x32>
 800a546:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a54a:	9301      	str	r3, [sp, #4]
 800a54c:	f1b8 0300 	subs.w	r3, r8, #0
 800a550:	d023      	beq.n	800a59a <__d2b+0x82>
 800a552:	4668      	mov	r0, sp
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	f7ff fd7c 	bl	800a052 <__lo0bits>
 800a55a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a55e:	b1d0      	cbz	r0, 800a596 <__d2b+0x7e>
 800a560:	f1c0 0320 	rsb	r3, r0, #32
 800a564:	fa02 f303 	lsl.w	r3, r2, r3
 800a568:	430b      	orrs	r3, r1
 800a56a:	40c2      	lsrs	r2, r0
 800a56c:	6163      	str	r3, [r4, #20]
 800a56e:	9201      	str	r2, [sp, #4]
 800a570:	9b01      	ldr	r3, [sp, #4]
 800a572:	61a3      	str	r3, [r4, #24]
 800a574:	2b00      	cmp	r3, #0
 800a576:	bf0c      	ite	eq
 800a578:	2201      	moveq	r2, #1
 800a57a:	2202      	movne	r2, #2
 800a57c:	6122      	str	r2, [r4, #16]
 800a57e:	b1a5      	cbz	r5, 800a5aa <__d2b+0x92>
 800a580:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a584:	4405      	add	r5, r0
 800a586:	603d      	str	r5, [r7, #0]
 800a588:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a58c:	6030      	str	r0, [r6, #0]
 800a58e:	4620      	mov	r0, r4
 800a590:	b003      	add	sp, #12
 800a592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a596:	6161      	str	r1, [r4, #20]
 800a598:	e7ea      	b.n	800a570 <__d2b+0x58>
 800a59a:	a801      	add	r0, sp, #4
 800a59c:	f7ff fd59 	bl	800a052 <__lo0bits>
 800a5a0:	9b01      	ldr	r3, [sp, #4]
 800a5a2:	6163      	str	r3, [r4, #20]
 800a5a4:	3020      	adds	r0, #32
 800a5a6:	2201      	movs	r2, #1
 800a5a8:	e7e8      	b.n	800a57c <__d2b+0x64>
 800a5aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a5ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a5b2:	6038      	str	r0, [r7, #0]
 800a5b4:	6918      	ldr	r0, [r3, #16]
 800a5b6:	f7ff fd2d 	bl	800a014 <__hi0bits>
 800a5ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a5be:	e7e5      	b.n	800a58c <__d2b+0x74>
 800a5c0:	0800afc8 	.word	0x0800afc8
 800a5c4:	0800afea 	.word	0x0800afea

0800a5c8 <__sread>:
 800a5c8:	b510      	push	{r4, lr}
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5d0:	f000 f8a8 	bl	800a724 <_read_r>
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	bfab      	itete	ge
 800a5d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a5da:	89a3      	ldrhlt	r3, [r4, #12]
 800a5dc:	181b      	addge	r3, r3, r0
 800a5de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a5e2:	bfac      	ite	ge
 800a5e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a5e6:	81a3      	strhlt	r3, [r4, #12]
 800a5e8:	bd10      	pop	{r4, pc}

0800a5ea <__swrite>:
 800a5ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5ee:	461f      	mov	r7, r3
 800a5f0:	898b      	ldrh	r3, [r1, #12]
 800a5f2:	05db      	lsls	r3, r3, #23
 800a5f4:	4605      	mov	r5, r0
 800a5f6:	460c      	mov	r4, r1
 800a5f8:	4616      	mov	r6, r2
 800a5fa:	d505      	bpl.n	800a608 <__swrite+0x1e>
 800a5fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a600:	2302      	movs	r3, #2
 800a602:	2200      	movs	r2, #0
 800a604:	f000 f87c 	bl	800a700 <_lseek_r>
 800a608:	89a3      	ldrh	r3, [r4, #12]
 800a60a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a60e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a612:	81a3      	strh	r3, [r4, #12]
 800a614:	4632      	mov	r2, r6
 800a616:	463b      	mov	r3, r7
 800a618:	4628      	mov	r0, r5
 800a61a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a61e:	f000 b8a3 	b.w	800a768 <_write_r>

0800a622 <__sseek>:
 800a622:	b510      	push	{r4, lr}
 800a624:	460c      	mov	r4, r1
 800a626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a62a:	f000 f869 	bl	800a700 <_lseek_r>
 800a62e:	1c43      	adds	r3, r0, #1
 800a630:	89a3      	ldrh	r3, [r4, #12]
 800a632:	bf15      	itete	ne
 800a634:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a636:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a63a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a63e:	81a3      	strheq	r3, [r4, #12]
 800a640:	bf18      	it	ne
 800a642:	81a3      	strhne	r3, [r4, #12]
 800a644:	bd10      	pop	{r4, pc}

0800a646 <__sclose>:
 800a646:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a64a:	f000 b849 	b.w	800a6e0 <_close_r>

0800a64e <_realloc_r>:
 800a64e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a652:	4680      	mov	r8, r0
 800a654:	4615      	mov	r5, r2
 800a656:	460c      	mov	r4, r1
 800a658:	b921      	cbnz	r1, 800a664 <_realloc_r+0x16>
 800a65a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a65e:	4611      	mov	r1, r2
 800a660:	f7ff baf8 	b.w	8009c54 <_malloc_r>
 800a664:	b92a      	cbnz	r2, 800a672 <_realloc_r+0x24>
 800a666:	f000 f8d1 	bl	800a80c <_free_r>
 800a66a:	2400      	movs	r4, #0
 800a66c:	4620      	mov	r0, r4
 800a66e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a672:	f000 f927 	bl	800a8c4 <_malloc_usable_size_r>
 800a676:	4285      	cmp	r5, r0
 800a678:	4606      	mov	r6, r0
 800a67a:	d802      	bhi.n	800a682 <_realloc_r+0x34>
 800a67c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a680:	d8f4      	bhi.n	800a66c <_realloc_r+0x1e>
 800a682:	4629      	mov	r1, r5
 800a684:	4640      	mov	r0, r8
 800a686:	f7ff fae5 	bl	8009c54 <_malloc_r>
 800a68a:	4607      	mov	r7, r0
 800a68c:	2800      	cmp	r0, #0
 800a68e:	d0ec      	beq.n	800a66a <_realloc_r+0x1c>
 800a690:	42b5      	cmp	r5, r6
 800a692:	462a      	mov	r2, r5
 800a694:	4621      	mov	r1, r4
 800a696:	bf28      	it	cs
 800a698:	4632      	movcs	r2, r6
 800a69a:	f000 f877 	bl	800a78c <memcpy>
 800a69e:	4621      	mov	r1, r4
 800a6a0:	4640      	mov	r0, r8
 800a6a2:	f000 f8b3 	bl	800a80c <_free_r>
 800a6a6:	463c      	mov	r4, r7
 800a6a8:	e7e0      	b.n	800a66c <_realloc_r+0x1e>

0800a6aa <memmove>:
 800a6aa:	4288      	cmp	r0, r1
 800a6ac:	b510      	push	{r4, lr}
 800a6ae:	eb01 0402 	add.w	r4, r1, r2
 800a6b2:	d902      	bls.n	800a6ba <memmove+0x10>
 800a6b4:	4284      	cmp	r4, r0
 800a6b6:	4623      	mov	r3, r4
 800a6b8:	d807      	bhi.n	800a6ca <memmove+0x20>
 800a6ba:	1e43      	subs	r3, r0, #1
 800a6bc:	42a1      	cmp	r1, r4
 800a6be:	d008      	beq.n	800a6d2 <memmove+0x28>
 800a6c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a6c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a6c8:	e7f8      	b.n	800a6bc <memmove+0x12>
 800a6ca:	4402      	add	r2, r0
 800a6cc:	4601      	mov	r1, r0
 800a6ce:	428a      	cmp	r2, r1
 800a6d0:	d100      	bne.n	800a6d4 <memmove+0x2a>
 800a6d2:	bd10      	pop	{r4, pc}
 800a6d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6dc:	e7f7      	b.n	800a6ce <memmove+0x24>
	...

0800a6e0 <_close_r>:
 800a6e0:	b538      	push	{r3, r4, r5, lr}
 800a6e2:	4d06      	ldr	r5, [pc, #24]	@ (800a6fc <_close_r+0x1c>)
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	4604      	mov	r4, r0
 800a6e8:	4608      	mov	r0, r1
 800a6ea:	602b      	str	r3, [r5, #0]
 800a6ec:	f7f7 fa3a 	bl	8001b64 <_close>
 800a6f0:	1c43      	adds	r3, r0, #1
 800a6f2:	d102      	bne.n	800a6fa <_close_r+0x1a>
 800a6f4:	682b      	ldr	r3, [r5, #0]
 800a6f6:	b103      	cbz	r3, 800a6fa <_close_r+0x1a>
 800a6f8:	6023      	str	r3, [r4, #0]
 800a6fa:	bd38      	pop	{r3, r4, r5, pc}
 800a6fc:	20000acc 	.word	0x20000acc

0800a700 <_lseek_r>:
 800a700:	b538      	push	{r3, r4, r5, lr}
 800a702:	4d07      	ldr	r5, [pc, #28]	@ (800a720 <_lseek_r+0x20>)
 800a704:	4604      	mov	r4, r0
 800a706:	4608      	mov	r0, r1
 800a708:	4611      	mov	r1, r2
 800a70a:	2200      	movs	r2, #0
 800a70c:	602a      	str	r2, [r5, #0]
 800a70e:	461a      	mov	r2, r3
 800a710:	f7f7 fa4f 	bl	8001bb2 <_lseek>
 800a714:	1c43      	adds	r3, r0, #1
 800a716:	d102      	bne.n	800a71e <_lseek_r+0x1e>
 800a718:	682b      	ldr	r3, [r5, #0]
 800a71a:	b103      	cbz	r3, 800a71e <_lseek_r+0x1e>
 800a71c:	6023      	str	r3, [r4, #0]
 800a71e:	bd38      	pop	{r3, r4, r5, pc}
 800a720:	20000acc 	.word	0x20000acc

0800a724 <_read_r>:
 800a724:	b538      	push	{r3, r4, r5, lr}
 800a726:	4d07      	ldr	r5, [pc, #28]	@ (800a744 <_read_r+0x20>)
 800a728:	4604      	mov	r4, r0
 800a72a:	4608      	mov	r0, r1
 800a72c:	4611      	mov	r1, r2
 800a72e:	2200      	movs	r2, #0
 800a730:	602a      	str	r2, [r5, #0]
 800a732:	461a      	mov	r2, r3
 800a734:	f7f7 f9dd 	bl	8001af2 <_read>
 800a738:	1c43      	adds	r3, r0, #1
 800a73a:	d102      	bne.n	800a742 <_read_r+0x1e>
 800a73c:	682b      	ldr	r3, [r5, #0]
 800a73e:	b103      	cbz	r3, 800a742 <_read_r+0x1e>
 800a740:	6023      	str	r3, [r4, #0]
 800a742:	bd38      	pop	{r3, r4, r5, pc}
 800a744:	20000acc 	.word	0x20000acc

0800a748 <_sbrk_r>:
 800a748:	b538      	push	{r3, r4, r5, lr}
 800a74a:	4d06      	ldr	r5, [pc, #24]	@ (800a764 <_sbrk_r+0x1c>)
 800a74c:	2300      	movs	r3, #0
 800a74e:	4604      	mov	r4, r0
 800a750:	4608      	mov	r0, r1
 800a752:	602b      	str	r3, [r5, #0]
 800a754:	f7f7 fa3a 	bl	8001bcc <_sbrk>
 800a758:	1c43      	adds	r3, r0, #1
 800a75a:	d102      	bne.n	800a762 <_sbrk_r+0x1a>
 800a75c:	682b      	ldr	r3, [r5, #0]
 800a75e:	b103      	cbz	r3, 800a762 <_sbrk_r+0x1a>
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	bd38      	pop	{r3, r4, r5, pc}
 800a764:	20000acc 	.word	0x20000acc

0800a768 <_write_r>:
 800a768:	b538      	push	{r3, r4, r5, lr}
 800a76a:	4d07      	ldr	r5, [pc, #28]	@ (800a788 <_write_r+0x20>)
 800a76c:	4604      	mov	r4, r0
 800a76e:	4608      	mov	r0, r1
 800a770:	4611      	mov	r1, r2
 800a772:	2200      	movs	r2, #0
 800a774:	602a      	str	r2, [r5, #0]
 800a776:	461a      	mov	r2, r3
 800a778:	f7f7 f9d8 	bl	8001b2c <_write>
 800a77c:	1c43      	adds	r3, r0, #1
 800a77e:	d102      	bne.n	800a786 <_write_r+0x1e>
 800a780:	682b      	ldr	r3, [r5, #0]
 800a782:	b103      	cbz	r3, 800a786 <_write_r+0x1e>
 800a784:	6023      	str	r3, [r4, #0]
 800a786:	bd38      	pop	{r3, r4, r5, pc}
 800a788:	20000acc 	.word	0x20000acc

0800a78c <memcpy>:
 800a78c:	440a      	add	r2, r1
 800a78e:	4291      	cmp	r1, r2
 800a790:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a794:	d100      	bne.n	800a798 <memcpy+0xc>
 800a796:	4770      	bx	lr
 800a798:	b510      	push	{r4, lr}
 800a79a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a79e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7a2:	4291      	cmp	r1, r2
 800a7a4:	d1f9      	bne.n	800a79a <memcpy+0xe>
 800a7a6:	bd10      	pop	{r4, pc}

0800a7a8 <__assert_func>:
 800a7a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7aa:	4614      	mov	r4, r2
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	4b09      	ldr	r3, [pc, #36]	@ (800a7d4 <__assert_func+0x2c>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4605      	mov	r5, r0
 800a7b4:	68d8      	ldr	r0, [r3, #12]
 800a7b6:	b954      	cbnz	r4, 800a7ce <__assert_func+0x26>
 800a7b8:	4b07      	ldr	r3, [pc, #28]	@ (800a7d8 <__assert_func+0x30>)
 800a7ba:	461c      	mov	r4, r3
 800a7bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a7c0:	9100      	str	r1, [sp, #0]
 800a7c2:	462b      	mov	r3, r5
 800a7c4:	4905      	ldr	r1, [pc, #20]	@ (800a7dc <__assert_func+0x34>)
 800a7c6:	f000 f885 	bl	800a8d4 <fiprintf>
 800a7ca:	f000 f8a2 	bl	800a912 <abort>
 800a7ce:	4b04      	ldr	r3, [pc, #16]	@ (800a7e0 <__assert_func+0x38>)
 800a7d0:	e7f4      	b.n	800a7bc <__assert_func+0x14>
 800a7d2:	bf00      	nop
 800a7d4:	20000018 	.word	0x20000018
 800a7d8:	0800b286 	.word	0x0800b286
 800a7dc:	0800b258 	.word	0x0800b258
 800a7e0:	0800b24b 	.word	0x0800b24b

0800a7e4 <_calloc_r>:
 800a7e4:	b570      	push	{r4, r5, r6, lr}
 800a7e6:	fba1 5402 	umull	r5, r4, r1, r2
 800a7ea:	b93c      	cbnz	r4, 800a7fc <_calloc_r+0x18>
 800a7ec:	4629      	mov	r1, r5
 800a7ee:	f7ff fa31 	bl	8009c54 <_malloc_r>
 800a7f2:	4606      	mov	r6, r0
 800a7f4:	b928      	cbnz	r0, 800a802 <_calloc_r+0x1e>
 800a7f6:	2600      	movs	r6, #0
 800a7f8:	4630      	mov	r0, r6
 800a7fa:	bd70      	pop	{r4, r5, r6, pc}
 800a7fc:	220c      	movs	r2, #12
 800a7fe:	6002      	str	r2, [r0, #0]
 800a800:	e7f9      	b.n	800a7f6 <_calloc_r+0x12>
 800a802:	462a      	mov	r2, r5
 800a804:	4621      	mov	r1, r4
 800a806:	f7fe fa1d 	bl	8008c44 <memset>
 800a80a:	e7f5      	b.n	800a7f8 <_calloc_r+0x14>

0800a80c <_free_r>:
 800a80c:	b538      	push	{r3, r4, r5, lr}
 800a80e:	4605      	mov	r5, r0
 800a810:	2900      	cmp	r1, #0
 800a812:	d041      	beq.n	800a898 <_free_r+0x8c>
 800a814:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a818:	1f0c      	subs	r4, r1, #4
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	bfb8      	it	lt
 800a81e:	18e4      	addlt	r4, r4, r3
 800a820:	f7ff fb44 	bl	8009eac <__malloc_lock>
 800a824:	4a1d      	ldr	r2, [pc, #116]	@ (800a89c <_free_r+0x90>)
 800a826:	6813      	ldr	r3, [r2, #0]
 800a828:	b933      	cbnz	r3, 800a838 <_free_r+0x2c>
 800a82a:	6063      	str	r3, [r4, #4]
 800a82c:	6014      	str	r4, [r2, #0]
 800a82e:	4628      	mov	r0, r5
 800a830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a834:	f7ff bb40 	b.w	8009eb8 <__malloc_unlock>
 800a838:	42a3      	cmp	r3, r4
 800a83a:	d908      	bls.n	800a84e <_free_r+0x42>
 800a83c:	6820      	ldr	r0, [r4, #0]
 800a83e:	1821      	adds	r1, r4, r0
 800a840:	428b      	cmp	r3, r1
 800a842:	bf01      	itttt	eq
 800a844:	6819      	ldreq	r1, [r3, #0]
 800a846:	685b      	ldreq	r3, [r3, #4]
 800a848:	1809      	addeq	r1, r1, r0
 800a84a:	6021      	streq	r1, [r4, #0]
 800a84c:	e7ed      	b.n	800a82a <_free_r+0x1e>
 800a84e:	461a      	mov	r2, r3
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	b10b      	cbz	r3, 800a858 <_free_r+0x4c>
 800a854:	42a3      	cmp	r3, r4
 800a856:	d9fa      	bls.n	800a84e <_free_r+0x42>
 800a858:	6811      	ldr	r1, [r2, #0]
 800a85a:	1850      	adds	r0, r2, r1
 800a85c:	42a0      	cmp	r0, r4
 800a85e:	d10b      	bne.n	800a878 <_free_r+0x6c>
 800a860:	6820      	ldr	r0, [r4, #0]
 800a862:	4401      	add	r1, r0
 800a864:	1850      	adds	r0, r2, r1
 800a866:	4283      	cmp	r3, r0
 800a868:	6011      	str	r1, [r2, #0]
 800a86a:	d1e0      	bne.n	800a82e <_free_r+0x22>
 800a86c:	6818      	ldr	r0, [r3, #0]
 800a86e:	685b      	ldr	r3, [r3, #4]
 800a870:	6053      	str	r3, [r2, #4]
 800a872:	4408      	add	r0, r1
 800a874:	6010      	str	r0, [r2, #0]
 800a876:	e7da      	b.n	800a82e <_free_r+0x22>
 800a878:	d902      	bls.n	800a880 <_free_r+0x74>
 800a87a:	230c      	movs	r3, #12
 800a87c:	602b      	str	r3, [r5, #0]
 800a87e:	e7d6      	b.n	800a82e <_free_r+0x22>
 800a880:	6820      	ldr	r0, [r4, #0]
 800a882:	1821      	adds	r1, r4, r0
 800a884:	428b      	cmp	r3, r1
 800a886:	bf04      	itt	eq
 800a888:	6819      	ldreq	r1, [r3, #0]
 800a88a:	685b      	ldreq	r3, [r3, #4]
 800a88c:	6063      	str	r3, [r4, #4]
 800a88e:	bf04      	itt	eq
 800a890:	1809      	addeq	r1, r1, r0
 800a892:	6021      	streq	r1, [r4, #0]
 800a894:	6054      	str	r4, [r2, #4]
 800a896:	e7ca      	b.n	800a82e <_free_r+0x22>
 800a898:	bd38      	pop	{r3, r4, r5, pc}
 800a89a:	bf00      	nop
 800a89c:	20000ac8 	.word	0x20000ac8

0800a8a0 <__ascii_mbtowc>:
 800a8a0:	b082      	sub	sp, #8
 800a8a2:	b901      	cbnz	r1, 800a8a6 <__ascii_mbtowc+0x6>
 800a8a4:	a901      	add	r1, sp, #4
 800a8a6:	b142      	cbz	r2, 800a8ba <__ascii_mbtowc+0x1a>
 800a8a8:	b14b      	cbz	r3, 800a8be <__ascii_mbtowc+0x1e>
 800a8aa:	7813      	ldrb	r3, [r2, #0]
 800a8ac:	600b      	str	r3, [r1, #0]
 800a8ae:	7812      	ldrb	r2, [r2, #0]
 800a8b0:	1e10      	subs	r0, r2, #0
 800a8b2:	bf18      	it	ne
 800a8b4:	2001      	movne	r0, #1
 800a8b6:	b002      	add	sp, #8
 800a8b8:	4770      	bx	lr
 800a8ba:	4610      	mov	r0, r2
 800a8bc:	e7fb      	b.n	800a8b6 <__ascii_mbtowc+0x16>
 800a8be:	f06f 0001 	mvn.w	r0, #1
 800a8c2:	e7f8      	b.n	800a8b6 <__ascii_mbtowc+0x16>

0800a8c4 <_malloc_usable_size_r>:
 800a8c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8c8:	1f18      	subs	r0, r3, #4
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	bfbc      	itt	lt
 800a8ce:	580b      	ldrlt	r3, [r1, r0]
 800a8d0:	18c0      	addlt	r0, r0, r3
 800a8d2:	4770      	bx	lr

0800a8d4 <fiprintf>:
 800a8d4:	b40e      	push	{r1, r2, r3}
 800a8d6:	b503      	push	{r0, r1, lr}
 800a8d8:	4601      	mov	r1, r0
 800a8da:	ab03      	add	r3, sp, #12
 800a8dc:	4805      	ldr	r0, [pc, #20]	@ (800a8f4 <fiprintf+0x20>)
 800a8de:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8e2:	6800      	ldr	r0, [r0, #0]
 800a8e4:	9301      	str	r3, [sp, #4]
 800a8e6:	f000 f845 	bl	800a974 <_vfiprintf_r>
 800a8ea:	b002      	add	sp, #8
 800a8ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8f0:	b003      	add	sp, #12
 800a8f2:	4770      	bx	lr
 800a8f4:	20000018 	.word	0x20000018

0800a8f8 <__ascii_wctomb>:
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	4608      	mov	r0, r1
 800a8fc:	b141      	cbz	r1, 800a910 <__ascii_wctomb+0x18>
 800a8fe:	2aff      	cmp	r2, #255	@ 0xff
 800a900:	d904      	bls.n	800a90c <__ascii_wctomb+0x14>
 800a902:	228a      	movs	r2, #138	@ 0x8a
 800a904:	601a      	str	r2, [r3, #0]
 800a906:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a90a:	4770      	bx	lr
 800a90c:	700a      	strb	r2, [r1, #0]
 800a90e:	2001      	movs	r0, #1
 800a910:	4770      	bx	lr

0800a912 <abort>:
 800a912:	b508      	push	{r3, lr}
 800a914:	2006      	movs	r0, #6
 800a916:	f000 fa85 	bl	800ae24 <raise>
 800a91a:	2001      	movs	r0, #1
 800a91c:	f7f7 f8de 	bl	8001adc <_exit>

0800a920 <__sfputc_r>:
 800a920:	6893      	ldr	r3, [r2, #8]
 800a922:	3b01      	subs	r3, #1
 800a924:	2b00      	cmp	r3, #0
 800a926:	b410      	push	{r4}
 800a928:	6093      	str	r3, [r2, #8]
 800a92a:	da08      	bge.n	800a93e <__sfputc_r+0x1e>
 800a92c:	6994      	ldr	r4, [r2, #24]
 800a92e:	42a3      	cmp	r3, r4
 800a930:	db01      	blt.n	800a936 <__sfputc_r+0x16>
 800a932:	290a      	cmp	r1, #10
 800a934:	d103      	bne.n	800a93e <__sfputc_r+0x1e>
 800a936:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a93a:	f000 b933 	b.w	800aba4 <__swbuf_r>
 800a93e:	6813      	ldr	r3, [r2, #0]
 800a940:	1c58      	adds	r0, r3, #1
 800a942:	6010      	str	r0, [r2, #0]
 800a944:	7019      	strb	r1, [r3, #0]
 800a946:	4608      	mov	r0, r1
 800a948:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a94c:	4770      	bx	lr

0800a94e <__sfputs_r>:
 800a94e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a950:	4606      	mov	r6, r0
 800a952:	460f      	mov	r7, r1
 800a954:	4614      	mov	r4, r2
 800a956:	18d5      	adds	r5, r2, r3
 800a958:	42ac      	cmp	r4, r5
 800a95a:	d101      	bne.n	800a960 <__sfputs_r+0x12>
 800a95c:	2000      	movs	r0, #0
 800a95e:	e007      	b.n	800a970 <__sfputs_r+0x22>
 800a960:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a964:	463a      	mov	r2, r7
 800a966:	4630      	mov	r0, r6
 800a968:	f7ff ffda 	bl	800a920 <__sfputc_r>
 800a96c:	1c43      	adds	r3, r0, #1
 800a96e:	d1f3      	bne.n	800a958 <__sfputs_r+0xa>
 800a970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a974 <_vfiprintf_r>:
 800a974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a978:	460d      	mov	r5, r1
 800a97a:	b09d      	sub	sp, #116	@ 0x74
 800a97c:	4614      	mov	r4, r2
 800a97e:	4698      	mov	r8, r3
 800a980:	4606      	mov	r6, r0
 800a982:	b118      	cbz	r0, 800a98c <_vfiprintf_r+0x18>
 800a984:	6a03      	ldr	r3, [r0, #32]
 800a986:	b90b      	cbnz	r3, 800a98c <_vfiprintf_r+0x18>
 800a988:	f7fe f926 	bl	8008bd8 <__sinit>
 800a98c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a98e:	07d9      	lsls	r1, r3, #31
 800a990:	d405      	bmi.n	800a99e <_vfiprintf_r+0x2a>
 800a992:	89ab      	ldrh	r3, [r5, #12]
 800a994:	059a      	lsls	r2, r3, #22
 800a996:	d402      	bmi.n	800a99e <_vfiprintf_r+0x2a>
 800a998:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a99a:	f7fe f98a 	bl	8008cb2 <__retarget_lock_acquire_recursive>
 800a99e:	89ab      	ldrh	r3, [r5, #12]
 800a9a0:	071b      	lsls	r3, r3, #28
 800a9a2:	d501      	bpl.n	800a9a8 <_vfiprintf_r+0x34>
 800a9a4:	692b      	ldr	r3, [r5, #16]
 800a9a6:	b99b      	cbnz	r3, 800a9d0 <_vfiprintf_r+0x5c>
 800a9a8:	4629      	mov	r1, r5
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	f000 f938 	bl	800ac20 <__swsetup_r>
 800a9b0:	b170      	cbz	r0, 800a9d0 <_vfiprintf_r+0x5c>
 800a9b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9b4:	07dc      	lsls	r4, r3, #31
 800a9b6:	d504      	bpl.n	800a9c2 <_vfiprintf_r+0x4e>
 800a9b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a9bc:	b01d      	add	sp, #116	@ 0x74
 800a9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9c2:	89ab      	ldrh	r3, [r5, #12]
 800a9c4:	0598      	lsls	r0, r3, #22
 800a9c6:	d4f7      	bmi.n	800a9b8 <_vfiprintf_r+0x44>
 800a9c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9ca:	f7fe f973 	bl	8008cb4 <__retarget_lock_release_recursive>
 800a9ce:	e7f3      	b.n	800a9b8 <_vfiprintf_r+0x44>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9d4:	2320      	movs	r3, #32
 800a9d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a9da:	f8cd 800c 	str.w	r8, [sp, #12]
 800a9de:	2330      	movs	r3, #48	@ 0x30
 800a9e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ab90 <_vfiprintf_r+0x21c>
 800a9e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a9e8:	f04f 0901 	mov.w	r9, #1
 800a9ec:	4623      	mov	r3, r4
 800a9ee:	469a      	mov	sl, r3
 800a9f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9f4:	b10a      	cbz	r2, 800a9fa <_vfiprintf_r+0x86>
 800a9f6:	2a25      	cmp	r2, #37	@ 0x25
 800a9f8:	d1f9      	bne.n	800a9ee <_vfiprintf_r+0x7a>
 800a9fa:	ebba 0b04 	subs.w	fp, sl, r4
 800a9fe:	d00b      	beq.n	800aa18 <_vfiprintf_r+0xa4>
 800aa00:	465b      	mov	r3, fp
 800aa02:	4622      	mov	r2, r4
 800aa04:	4629      	mov	r1, r5
 800aa06:	4630      	mov	r0, r6
 800aa08:	f7ff ffa1 	bl	800a94e <__sfputs_r>
 800aa0c:	3001      	adds	r0, #1
 800aa0e:	f000 80a7 	beq.w	800ab60 <_vfiprintf_r+0x1ec>
 800aa12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aa14:	445a      	add	r2, fp
 800aa16:	9209      	str	r2, [sp, #36]	@ 0x24
 800aa18:	f89a 3000 	ldrb.w	r3, [sl]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	f000 809f 	beq.w	800ab60 <_vfiprintf_r+0x1ec>
 800aa22:	2300      	movs	r3, #0
 800aa24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800aa28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa2c:	f10a 0a01 	add.w	sl, sl, #1
 800aa30:	9304      	str	r3, [sp, #16]
 800aa32:	9307      	str	r3, [sp, #28]
 800aa34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800aa38:	931a      	str	r3, [sp, #104]	@ 0x68
 800aa3a:	4654      	mov	r4, sl
 800aa3c:	2205      	movs	r2, #5
 800aa3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa42:	4853      	ldr	r0, [pc, #332]	@ (800ab90 <_vfiprintf_r+0x21c>)
 800aa44:	f7f5 fbc4 	bl	80001d0 <memchr>
 800aa48:	9a04      	ldr	r2, [sp, #16]
 800aa4a:	b9d8      	cbnz	r0, 800aa84 <_vfiprintf_r+0x110>
 800aa4c:	06d1      	lsls	r1, r2, #27
 800aa4e:	bf44      	itt	mi
 800aa50:	2320      	movmi	r3, #32
 800aa52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa56:	0713      	lsls	r3, r2, #28
 800aa58:	bf44      	itt	mi
 800aa5a:	232b      	movmi	r3, #43	@ 0x2b
 800aa5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aa60:	f89a 3000 	ldrb.w	r3, [sl]
 800aa64:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa66:	d015      	beq.n	800aa94 <_vfiprintf_r+0x120>
 800aa68:	9a07      	ldr	r2, [sp, #28]
 800aa6a:	4654      	mov	r4, sl
 800aa6c:	2000      	movs	r0, #0
 800aa6e:	f04f 0c0a 	mov.w	ip, #10
 800aa72:	4621      	mov	r1, r4
 800aa74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa78:	3b30      	subs	r3, #48	@ 0x30
 800aa7a:	2b09      	cmp	r3, #9
 800aa7c:	d94b      	bls.n	800ab16 <_vfiprintf_r+0x1a2>
 800aa7e:	b1b0      	cbz	r0, 800aaae <_vfiprintf_r+0x13a>
 800aa80:	9207      	str	r2, [sp, #28]
 800aa82:	e014      	b.n	800aaae <_vfiprintf_r+0x13a>
 800aa84:	eba0 0308 	sub.w	r3, r0, r8
 800aa88:	fa09 f303 	lsl.w	r3, r9, r3
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	9304      	str	r3, [sp, #16]
 800aa90:	46a2      	mov	sl, r4
 800aa92:	e7d2      	b.n	800aa3a <_vfiprintf_r+0xc6>
 800aa94:	9b03      	ldr	r3, [sp, #12]
 800aa96:	1d19      	adds	r1, r3, #4
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	9103      	str	r1, [sp, #12]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	bfbb      	ittet	lt
 800aaa0:	425b      	neglt	r3, r3
 800aaa2:	f042 0202 	orrlt.w	r2, r2, #2
 800aaa6:	9307      	strge	r3, [sp, #28]
 800aaa8:	9307      	strlt	r3, [sp, #28]
 800aaaa:	bfb8      	it	lt
 800aaac:	9204      	strlt	r2, [sp, #16]
 800aaae:	7823      	ldrb	r3, [r4, #0]
 800aab0:	2b2e      	cmp	r3, #46	@ 0x2e
 800aab2:	d10a      	bne.n	800aaca <_vfiprintf_r+0x156>
 800aab4:	7863      	ldrb	r3, [r4, #1]
 800aab6:	2b2a      	cmp	r3, #42	@ 0x2a
 800aab8:	d132      	bne.n	800ab20 <_vfiprintf_r+0x1ac>
 800aaba:	9b03      	ldr	r3, [sp, #12]
 800aabc:	1d1a      	adds	r2, r3, #4
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	9203      	str	r2, [sp, #12]
 800aac2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aac6:	3402      	adds	r4, #2
 800aac8:	9305      	str	r3, [sp, #20]
 800aaca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800aba0 <_vfiprintf_r+0x22c>
 800aace:	7821      	ldrb	r1, [r4, #0]
 800aad0:	2203      	movs	r2, #3
 800aad2:	4650      	mov	r0, sl
 800aad4:	f7f5 fb7c 	bl	80001d0 <memchr>
 800aad8:	b138      	cbz	r0, 800aaea <_vfiprintf_r+0x176>
 800aada:	9b04      	ldr	r3, [sp, #16]
 800aadc:	eba0 000a 	sub.w	r0, r0, sl
 800aae0:	2240      	movs	r2, #64	@ 0x40
 800aae2:	4082      	lsls	r2, r0
 800aae4:	4313      	orrs	r3, r2
 800aae6:	3401      	adds	r4, #1
 800aae8:	9304      	str	r3, [sp, #16]
 800aaea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaee:	4829      	ldr	r0, [pc, #164]	@ (800ab94 <_vfiprintf_r+0x220>)
 800aaf0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aaf4:	2206      	movs	r2, #6
 800aaf6:	f7f5 fb6b 	bl	80001d0 <memchr>
 800aafa:	2800      	cmp	r0, #0
 800aafc:	d03f      	beq.n	800ab7e <_vfiprintf_r+0x20a>
 800aafe:	4b26      	ldr	r3, [pc, #152]	@ (800ab98 <_vfiprintf_r+0x224>)
 800ab00:	bb1b      	cbnz	r3, 800ab4a <_vfiprintf_r+0x1d6>
 800ab02:	9b03      	ldr	r3, [sp, #12]
 800ab04:	3307      	adds	r3, #7
 800ab06:	f023 0307 	bic.w	r3, r3, #7
 800ab0a:	3308      	adds	r3, #8
 800ab0c:	9303      	str	r3, [sp, #12]
 800ab0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ab10:	443b      	add	r3, r7
 800ab12:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab14:	e76a      	b.n	800a9ec <_vfiprintf_r+0x78>
 800ab16:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab1a:	460c      	mov	r4, r1
 800ab1c:	2001      	movs	r0, #1
 800ab1e:	e7a8      	b.n	800aa72 <_vfiprintf_r+0xfe>
 800ab20:	2300      	movs	r3, #0
 800ab22:	3401      	adds	r4, #1
 800ab24:	9305      	str	r3, [sp, #20]
 800ab26:	4619      	mov	r1, r3
 800ab28:	f04f 0c0a 	mov.w	ip, #10
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab32:	3a30      	subs	r2, #48	@ 0x30
 800ab34:	2a09      	cmp	r2, #9
 800ab36:	d903      	bls.n	800ab40 <_vfiprintf_r+0x1cc>
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d0c6      	beq.n	800aaca <_vfiprintf_r+0x156>
 800ab3c:	9105      	str	r1, [sp, #20]
 800ab3e:	e7c4      	b.n	800aaca <_vfiprintf_r+0x156>
 800ab40:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab44:	4604      	mov	r4, r0
 800ab46:	2301      	movs	r3, #1
 800ab48:	e7f0      	b.n	800ab2c <_vfiprintf_r+0x1b8>
 800ab4a:	ab03      	add	r3, sp, #12
 800ab4c:	9300      	str	r3, [sp, #0]
 800ab4e:	462a      	mov	r2, r5
 800ab50:	4b12      	ldr	r3, [pc, #72]	@ (800ab9c <_vfiprintf_r+0x228>)
 800ab52:	a904      	add	r1, sp, #16
 800ab54:	4630      	mov	r0, r6
 800ab56:	f7fd fbdb 	bl	8008310 <_printf_float>
 800ab5a:	4607      	mov	r7, r0
 800ab5c:	1c78      	adds	r0, r7, #1
 800ab5e:	d1d6      	bne.n	800ab0e <_vfiprintf_r+0x19a>
 800ab60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab62:	07d9      	lsls	r1, r3, #31
 800ab64:	d405      	bmi.n	800ab72 <_vfiprintf_r+0x1fe>
 800ab66:	89ab      	ldrh	r3, [r5, #12]
 800ab68:	059a      	lsls	r2, r3, #22
 800ab6a:	d402      	bmi.n	800ab72 <_vfiprintf_r+0x1fe>
 800ab6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab6e:	f7fe f8a1 	bl	8008cb4 <__retarget_lock_release_recursive>
 800ab72:	89ab      	ldrh	r3, [r5, #12]
 800ab74:	065b      	lsls	r3, r3, #25
 800ab76:	f53f af1f 	bmi.w	800a9b8 <_vfiprintf_r+0x44>
 800ab7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ab7c:	e71e      	b.n	800a9bc <_vfiprintf_r+0x48>
 800ab7e:	ab03      	add	r3, sp, #12
 800ab80:	9300      	str	r3, [sp, #0]
 800ab82:	462a      	mov	r2, r5
 800ab84:	4b05      	ldr	r3, [pc, #20]	@ (800ab9c <_vfiprintf_r+0x228>)
 800ab86:	a904      	add	r1, sp, #16
 800ab88:	4630      	mov	r0, r6
 800ab8a:	f7fd fe59 	bl	8008840 <_printf_i>
 800ab8e:	e7e4      	b.n	800ab5a <_vfiprintf_r+0x1e6>
 800ab90:	0800afd9 	.word	0x0800afd9
 800ab94:	0800afe3 	.word	0x0800afe3
 800ab98:	08008311 	.word	0x08008311
 800ab9c:	0800a94f 	.word	0x0800a94f
 800aba0:	0800afdf 	.word	0x0800afdf

0800aba4 <__swbuf_r>:
 800aba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aba6:	460e      	mov	r6, r1
 800aba8:	4614      	mov	r4, r2
 800abaa:	4605      	mov	r5, r0
 800abac:	b118      	cbz	r0, 800abb6 <__swbuf_r+0x12>
 800abae:	6a03      	ldr	r3, [r0, #32]
 800abb0:	b90b      	cbnz	r3, 800abb6 <__swbuf_r+0x12>
 800abb2:	f7fe f811 	bl	8008bd8 <__sinit>
 800abb6:	69a3      	ldr	r3, [r4, #24]
 800abb8:	60a3      	str	r3, [r4, #8]
 800abba:	89a3      	ldrh	r3, [r4, #12]
 800abbc:	071a      	lsls	r2, r3, #28
 800abbe:	d501      	bpl.n	800abc4 <__swbuf_r+0x20>
 800abc0:	6923      	ldr	r3, [r4, #16]
 800abc2:	b943      	cbnz	r3, 800abd6 <__swbuf_r+0x32>
 800abc4:	4621      	mov	r1, r4
 800abc6:	4628      	mov	r0, r5
 800abc8:	f000 f82a 	bl	800ac20 <__swsetup_r>
 800abcc:	b118      	cbz	r0, 800abd6 <__swbuf_r+0x32>
 800abce:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800abd2:	4638      	mov	r0, r7
 800abd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abd6:	6823      	ldr	r3, [r4, #0]
 800abd8:	6922      	ldr	r2, [r4, #16]
 800abda:	1a98      	subs	r0, r3, r2
 800abdc:	6963      	ldr	r3, [r4, #20]
 800abde:	b2f6      	uxtb	r6, r6
 800abe0:	4283      	cmp	r3, r0
 800abe2:	4637      	mov	r7, r6
 800abe4:	dc05      	bgt.n	800abf2 <__swbuf_r+0x4e>
 800abe6:	4621      	mov	r1, r4
 800abe8:	4628      	mov	r0, r5
 800abea:	f7ff f937 	bl	8009e5c <_fflush_r>
 800abee:	2800      	cmp	r0, #0
 800abf0:	d1ed      	bne.n	800abce <__swbuf_r+0x2a>
 800abf2:	68a3      	ldr	r3, [r4, #8]
 800abf4:	3b01      	subs	r3, #1
 800abf6:	60a3      	str	r3, [r4, #8]
 800abf8:	6823      	ldr	r3, [r4, #0]
 800abfa:	1c5a      	adds	r2, r3, #1
 800abfc:	6022      	str	r2, [r4, #0]
 800abfe:	701e      	strb	r6, [r3, #0]
 800ac00:	6962      	ldr	r2, [r4, #20]
 800ac02:	1c43      	adds	r3, r0, #1
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d004      	beq.n	800ac12 <__swbuf_r+0x6e>
 800ac08:	89a3      	ldrh	r3, [r4, #12]
 800ac0a:	07db      	lsls	r3, r3, #31
 800ac0c:	d5e1      	bpl.n	800abd2 <__swbuf_r+0x2e>
 800ac0e:	2e0a      	cmp	r6, #10
 800ac10:	d1df      	bne.n	800abd2 <__swbuf_r+0x2e>
 800ac12:	4621      	mov	r1, r4
 800ac14:	4628      	mov	r0, r5
 800ac16:	f7ff f921 	bl	8009e5c <_fflush_r>
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	d0d9      	beq.n	800abd2 <__swbuf_r+0x2e>
 800ac1e:	e7d6      	b.n	800abce <__swbuf_r+0x2a>

0800ac20 <__swsetup_r>:
 800ac20:	b538      	push	{r3, r4, r5, lr}
 800ac22:	4b29      	ldr	r3, [pc, #164]	@ (800acc8 <__swsetup_r+0xa8>)
 800ac24:	4605      	mov	r5, r0
 800ac26:	6818      	ldr	r0, [r3, #0]
 800ac28:	460c      	mov	r4, r1
 800ac2a:	b118      	cbz	r0, 800ac34 <__swsetup_r+0x14>
 800ac2c:	6a03      	ldr	r3, [r0, #32]
 800ac2e:	b90b      	cbnz	r3, 800ac34 <__swsetup_r+0x14>
 800ac30:	f7fd ffd2 	bl	8008bd8 <__sinit>
 800ac34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac38:	0719      	lsls	r1, r3, #28
 800ac3a:	d422      	bmi.n	800ac82 <__swsetup_r+0x62>
 800ac3c:	06da      	lsls	r2, r3, #27
 800ac3e:	d407      	bmi.n	800ac50 <__swsetup_r+0x30>
 800ac40:	2209      	movs	r2, #9
 800ac42:	602a      	str	r2, [r5, #0]
 800ac44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac48:	81a3      	strh	r3, [r4, #12]
 800ac4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ac4e:	e033      	b.n	800acb8 <__swsetup_r+0x98>
 800ac50:	0758      	lsls	r0, r3, #29
 800ac52:	d512      	bpl.n	800ac7a <__swsetup_r+0x5a>
 800ac54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac56:	b141      	cbz	r1, 800ac6a <__swsetup_r+0x4a>
 800ac58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac5c:	4299      	cmp	r1, r3
 800ac5e:	d002      	beq.n	800ac66 <__swsetup_r+0x46>
 800ac60:	4628      	mov	r0, r5
 800ac62:	f7ff fdd3 	bl	800a80c <_free_r>
 800ac66:	2300      	movs	r3, #0
 800ac68:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac6a:	89a3      	ldrh	r3, [r4, #12]
 800ac6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ac70:	81a3      	strh	r3, [r4, #12]
 800ac72:	2300      	movs	r3, #0
 800ac74:	6063      	str	r3, [r4, #4]
 800ac76:	6923      	ldr	r3, [r4, #16]
 800ac78:	6023      	str	r3, [r4, #0]
 800ac7a:	89a3      	ldrh	r3, [r4, #12]
 800ac7c:	f043 0308 	orr.w	r3, r3, #8
 800ac80:	81a3      	strh	r3, [r4, #12]
 800ac82:	6923      	ldr	r3, [r4, #16]
 800ac84:	b94b      	cbnz	r3, 800ac9a <__swsetup_r+0x7a>
 800ac86:	89a3      	ldrh	r3, [r4, #12]
 800ac88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ac8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac90:	d003      	beq.n	800ac9a <__swsetup_r+0x7a>
 800ac92:	4621      	mov	r1, r4
 800ac94:	4628      	mov	r0, r5
 800ac96:	f000 f83f 	bl	800ad18 <__smakebuf_r>
 800ac9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac9e:	f013 0201 	ands.w	r2, r3, #1
 800aca2:	d00a      	beq.n	800acba <__swsetup_r+0x9a>
 800aca4:	2200      	movs	r2, #0
 800aca6:	60a2      	str	r2, [r4, #8]
 800aca8:	6962      	ldr	r2, [r4, #20]
 800acaa:	4252      	negs	r2, r2
 800acac:	61a2      	str	r2, [r4, #24]
 800acae:	6922      	ldr	r2, [r4, #16]
 800acb0:	b942      	cbnz	r2, 800acc4 <__swsetup_r+0xa4>
 800acb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800acb6:	d1c5      	bne.n	800ac44 <__swsetup_r+0x24>
 800acb8:	bd38      	pop	{r3, r4, r5, pc}
 800acba:	0799      	lsls	r1, r3, #30
 800acbc:	bf58      	it	pl
 800acbe:	6962      	ldrpl	r2, [r4, #20]
 800acc0:	60a2      	str	r2, [r4, #8]
 800acc2:	e7f4      	b.n	800acae <__swsetup_r+0x8e>
 800acc4:	2000      	movs	r0, #0
 800acc6:	e7f7      	b.n	800acb8 <__swsetup_r+0x98>
 800acc8:	20000018 	.word	0x20000018

0800accc <__swhatbuf_r>:
 800accc:	b570      	push	{r4, r5, r6, lr}
 800acce:	460c      	mov	r4, r1
 800acd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acd4:	2900      	cmp	r1, #0
 800acd6:	b096      	sub	sp, #88	@ 0x58
 800acd8:	4615      	mov	r5, r2
 800acda:	461e      	mov	r6, r3
 800acdc:	da0d      	bge.n	800acfa <__swhatbuf_r+0x2e>
 800acde:	89a3      	ldrh	r3, [r4, #12]
 800ace0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ace4:	f04f 0100 	mov.w	r1, #0
 800ace8:	bf14      	ite	ne
 800acea:	2340      	movne	r3, #64	@ 0x40
 800acec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800acf0:	2000      	movs	r0, #0
 800acf2:	6031      	str	r1, [r6, #0]
 800acf4:	602b      	str	r3, [r5, #0]
 800acf6:	b016      	add	sp, #88	@ 0x58
 800acf8:	bd70      	pop	{r4, r5, r6, pc}
 800acfa:	466a      	mov	r2, sp
 800acfc:	f000 f848 	bl	800ad90 <_fstat_r>
 800ad00:	2800      	cmp	r0, #0
 800ad02:	dbec      	blt.n	800acde <__swhatbuf_r+0x12>
 800ad04:	9901      	ldr	r1, [sp, #4]
 800ad06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ad0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ad0e:	4259      	negs	r1, r3
 800ad10:	4159      	adcs	r1, r3
 800ad12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad16:	e7eb      	b.n	800acf0 <__swhatbuf_r+0x24>

0800ad18 <__smakebuf_r>:
 800ad18:	898b      	ldrh	r3, [r1, #12]
 800ad1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad1c:	079d      	lsls	r5, r3, #30
 800ad1e:	4606      	mov	r6, r0
 800ad20:	460c      	mov	r4, r1
 800ad22:	d507      	bpl.n	800ad34 <__smakebuf_r+0x1c>
 800ad24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ad28:	6023      	str	r3, [r4, #0]
 800ad2a:	6123      	str	r3, [r4, #16]
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	6163      	str	r3, [r4, #20]
 800ad30:	b003      	add	sp, #12
 800ad32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad34:	ab01      	add	r3, sp, #4
 800ad36:	466a      	mov	r2, sp
 800ad38:	f7ff ffc8 	bl	800accc <__swhatbuf_r>
 800ad3c:	9f00      	ldr	r7, [sp, #0]
 800ad3e:	4605      	mov	r5, r0
 800ad40:	4639      	mov	r1, r7
 800ad42:	4630      	mov	r0, r6
 800ad44:	f7fe ff86 	bl	8009c54 <_malloc_r>
 800ad48:	b948      	cbnz	r0, 800ad5e <__smakebuf_r+0x46>
 800ad4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad4e:	059a      	lsls	r2, r3, #22
 800ad50:	d4ee      	bmi.n	800ad30 <__smakebuf_r+0x18>
 800ad52:	f023 0303 	bic.w	r3, r3, #3
 800ad56:	f043 0302 	orr.w	r3, r3, #2
 800ad5a:	81a3      	strh	r3, [r4, #12]
 800ad5c:	e7e2      	b.n	800ad24 <__smakebuf_r+0xc>
 800ad5e:	89a3      	ldrh	r3, [r4, #12]
 800ad60:	6020      	str	r0, [r4, #0]
 800ad62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad66:	81a3      	strh	r3, [r4, #12]
 800ad68:	9b01      	ldr	r3, [sp, #4]
 800ad6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ad6e:	b15b      	cbz	r3, 800ad88 <__smakebuf_r+0x70>
 800ad70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad74:	4630      	mov	r0, r6
 800ad76:	f000 f81d 	bl	800adb4 <_isatty_r>
 800ad7a:	b128      	cbz	r0, 800ad88 <__smakebuf_r+0x70>
 800ad7c:	89a3      	ldrh	r3, [r4, #12]
 800ad7e:	f023 0303 	bic.w	r3, r3, #3
 800ad82:	f043 0301 	orr.w	r3, r3, #1
 800ad86:	81a3      	strh	r3, [r4, #12]
 800ad88:	89a3      	ldrh	r3, [r4, #12]
 800ad8a:	431d      	orrs	r5, r3
 800ad8c:	81a5      	strh	r5, [r4, #12]
 800ad8e:	e7cf      	b.n	800ad30 <__smakebuf_r+0x18>

0800ad90 <_fstat_r>:
 800ad90:	b538      	push	{r3, r4, r5, lr}
 800ad92:	4d07      	ldr	r5, [pc, #28]	@ (800adb0 <_fstat_r+0x20>)
 800ad94:	2300      	movs	r3, #0
 800ad96:	4604      	mov	r4, r0
 800ad98:	4608      	mov	r0, r1
 800ad9a:	4611      	mov	r1, r2
 800ad9c:	602b      	str	r3, [r5, #0]
 800ad9e:	f7f6 feed 	bl	8001b7c <_fstat>
 800ada2:	1c43      	adds	r3, r0, #1
 800ada4:	d102      	bne.n	800adac <_fstat_r+0x1c>
 800ada6:	682b      	ldr	r3, [r5, #0]
 800ada8:	b103      	cbz	r3, 800adac <_fstat_r+0x1c>
 800adaa:	6023      	str	r3, [r4, #0]
 800adac:	bd38      	pop	{r3, r4, r5, pc}
 800adae:	bf00      	nop
 800adb0:	20000acc 	.word	0x20000acc

0800adb4 <_isatty_r>:
 800adb4:	b538      	push	{r3, r4, r5, lr}
 800adb6:	4d06      	ldr	r5, [pc, #24]	@ (800add0 <_isatty_r+0x1c>)
 800adb8:	2300      	movs	r3, #0
 800adba:	4604      	mov	r4, r0
 800adbc:	4608      	mov	r0, r1
 800adbe:	602b      	str	r3, [r5, #0]
 800adc0:	f7f6 feec 	bl	8001b9c <_isatty>
 800adc4:	1c43      	adds	r3, r0, #1
 800adc6:	d102      	bne.n	800adce <_isatty_r+0x1a>
 800adc8:	682b      	ldr	r3, [r5, #0]
 800adca:	b103      	cbz	r3, 800adce <_isatty_r+0x1a>
 800adcc:	6023      	str	r3, [r4, #0]
 800adce:	bd38      	pop	{r3, r4, r5, pc}
 800add0:	20000acc 	.word	0x20000acc

0800add4 <_raise_r>:
 800add4:	291f      	cmp	r1, #31
 800add6:	b538      	push	{r3, r4, r5, lr}
 800add8:	4605      	mov	r5, r0
 800adda:	460c      	mov	r4, r1
 800addc:	d904      	bls.n	800ade8 <_raise_r+0x14>
 800adde:	2316      	movs	r3, #22
 800ade0:	6003      	str	r3, [r0, #0]
 800ade2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ade6:	bd38      	pop	{r3, r4, r5, pc}
 800ade8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800adea:	b112      	cbz	r2, 800adf2 <_raise_r+0x1e>
 800adec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800adf0:	b94b      	cbnz	r3, 800ae06 <_raise_r+0x32>
 800adf2:	4628      	mov	r0, r5
 800adf4:	f000 f830 	bl	800ae58 <_getpid_r>
 800adf8:	4622      	mov	r2, r4
 800adfa:	4601      	mov	r1, r0
 800adfc:	4628      	mov	r0, r5
 800adfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae02:	f000 b817 	b.w	800ae34 <_kill_r>
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d00a      	beq.n	800ae20 <_raise_r+0x4c>
 800ae0a:	1c59      	adds	r1, r3, #1
 800ae0c:	d103      	bne.n	800ae16 <_raise_r+0x42>
 800ae0e:	2316      	movs	r3, #22
 800ae10:	6003      	str	r3, [r0, #0]
 800ae12:	2001      	movs	r0, #1
 800ae14:	e7e7      	b.n	800ade6 <_raise_r+0x12>
 800ae16:	2100      	movs	r1, #0
 800ae18:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ae1c:	4620      	mov	r0, r4
 800ae1e:	4798      	blx	r3
 800ae20:	2000      	movs	r0, #0
 800ae22:	e7e0      	b.n	800ade6 <_raise_r+0x12>

0800ae24 <raise>:
 800ae24:	4b02      	ldr	r3, [pc, #8]	@ (800ae30 <raise+0xc>)
 800ae26:	4601      	mov	r1, r0
 800ae28:	6818      	ldr	r0, [r3, #0]
 800ae2a:	f7ff bfd3 	b.w	800add4 <_raise_r>
 800ae2e:	bf00      	nop
 800ae30:	20000018 	.word	0x20000018

0800ae34 <_kill_r>:
 800ae34:	b538      	push	{r3, r4, r5, lr}
 800ae36:	4d07      	ldr	r5, [pc, #28]	@ (800ae54 <_kill_r+0x20>)
 800ae38:	2300      	movs	r3, #0
 800ae3a:	4604      	mov	r4, r0
 800ae3c:	4608      	mov	r0, r1
 800ae3e:	4611      	mov	r1, r2
 800ae40:	602b      	str	r3, [r5, #0]
 800ae42:	f7f6 fe3b 	bl	8001abc <_kill>
 800ae46:	1c43      	adds	r3, r0, #1
 800ae48:	d102      	bne.n	800ae50 <_kill_r+0x1c>
 800ae4a:	682b      	ldr	r3, [r5, #0]
 800ae4c:	b103      	cbz	r3, 800ae50 <_kill_r+0x1c>
 800ae4e:	6023      	str	r3, [r4, #0]
 800ae50:	bd38      	pop	{r3, r4, r5, pc}
 800ae52:	bf00      	nop
 800ae54:	20000acc 	.word	0x20000acc

0800ae58 <_getpid_r>:
 800ae58:	f7f6 be28 	b.w	8001aac <_getpid>

0800ae5c <_init>:
 800ae5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae5e:	bf00      	nop
 800ae60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae62:	bc08      	pop	{r3}
 800ae64:	469e      	mov	lr, r3
 800ae66:	4770      	bx	lr

0800ae68 <_fini>:
 800ae68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae6a:	bf00      	nop
 800ae6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae6e:	bc08      	pop	{r3}
 800ae70:	469e      	mov	lr, r3
 800ae72:	4770      	bx	lr
