/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "i2c.h"
#include "tim.h"
#include "usart.h"
#include "usb_otg.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
#include "string.h"

#define BQ76905_ADDR (0x10 << 1) // Dirección del BQ76905 desplazada a la izquierda para I2C
#define UTD (1 << 5)	//Undertemperature in Discharge Safety Alert
#define UTC (1 << 4) 	//Undertemperature in Charge Safety Alert
#define OTINT (1 << 3)	//Internal Overtemperature Safety Alert





/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */
//MPPT VARS
float VX_in = 0, VY_in = 0, VZ_in = 0;
float IX_in = 0, IY_in = 0, IZ_in = 0;
float powerX = 0, powerY = 0, powerZ = 0;
float prevPowerX = 0, prevPowerY = 0, prevPowerZ = 0;
int dutyCycleX = 255 * 0.5, dutyCycleY = 255 * 0.5, dutyCycleZ = 255 * 0.5; // Valor inicial del Duty Cycle (50% para PWM de 8 bits)

//PDU VARS
float V5, I5, V5bis, I5bis, V3, I3, V3bis, I3bis;

//BMS

typedef struct {
    short cell1_voltage;        // Voltaje de la celda 1 (mV)
    short cell2_voltage;        // Voltaje de la celda 2 (mV)
    char alert_status_A;        // Registro de alertas A
    char fault_status_A;        // Registro de fallas A
    char alert_status_B;        // Registro de alertas B
    char fault_status_B;        // Registro de fallas B
    short battery_status;       // Registro de estado de la batería
} BatteryData;

uint8_t regData;


//comunication other boards


uint8_t i2c_rx_buffer[10]; // Buffer para datos recibidos
uint8_t i2c_tx_buffer[10] = "ACK"; // Respuesta para el maestro







/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

uint32_t readADC(ADC_HandleTypeDef *hadc, uint32_t channel);
void mppt(int *dutyCycle, float *power, float *prevPower);

HAL_StatusTypeDef BQ76905_ReadRegister(uint8_t reg, uint8_t* data, uint16_t len);
// Función para leer un registro del BQ76905
HAL_StatusTypeDef BQ76905_ReadRegisterTest(I2C_HandleTypeDef *hi2c, uint8_t regAddr, uint8_t *data);

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t readADC(ADC_HandleTypeDef *hadc, uint32_t channel) {
    ADC_ChannelConfTypeDef sConfig = { 0 };

    // Configurar el canal que se desea leer
    sConfig.Channel = channel;
    sConfig.Rank = 0x00000001U; // Reemplazado con el valor correcto
    sConfig.SamplingTime = 0x00000000U; // Reemplazado con el valor correcto

    if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK) {
        Error_Handler(); // Maneja errores de configuración
    }

    // Inicia la conversión del ADC
    HAL_ADC_Start(hadc);

    // Espera hasta que la conversión termine
    if (HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY) == HAL_OK) {
        // Retorna el valor convertido
        return HAL_ADC_GetValue(hadc) * (3.3 / 4095.0);
    }

    return 0; // Retorna 0 en caso de error
}


void mppt(int *dutyCycle, float *power, float *prevPower) {
	const int deltaDuty = 10;    // Incremento o decremento del Duty Cycle
	if (*power > *prevPower) {
		if (*dutyCycle < 255)
			*dutyCycle += deltaDuty; // Si la potencia ha aumentado, continuar ajustando en la misma dirección
	} else {
		if (*dutyCycle > 0)
			*dutyCycle -= deltaDuty; // Si la potencia ha disminuido, invertir la dirección del ajuste
	}

	if (*dutyCycle < 0)
		*dutyCycle = 0; // Asegurar que el Duty Cycle esté dentro de los límites permitidos (0-255)
	if (*dutyCycle > 255)
		*dutyCycle = 255;

	*prevPower = *power; // Actualizar `prevPower` con el valor actual de `power`
}

HAL_StatusTypeDef BQ76905_WriteRegister(uint8_t reg, uint8_t* data, uint16_t len) {
	HAL_StatusTypeDef status;
    status = HAL_I2C_Master_Transmit(&hi2c1, BQ76905_ADDR, &reg, 1, HAL_MAX_DELAY);
    if (status != HAL_OK) {
        return status; // Retorna el error si no se pudo enviar el registro
    }

    // Leer los datos del registro
    return HAL_I2C_Master_Receive(&hi2c1, BQ76905_ADDR, data, len, HAL_MAX_DELAY);
}




// Función para leer un registro específico del BQ76905
HAL_StatusTypeDef BQ76905_ReadRegister(uint8_t reg, uint8_t* data, uint16_t len) {
    HAL_StatusTypeDef status;

    // Enviar el registro desde el cual leeremos
    status = HAL_I2C_Master_Transmit(&hi2c1, BQ76905_ADDR, &reg, 1, HAL_MAX_DELAY);
    if (status != HAL_OK) {
        return status; // Retorna el error si no se pudo enviar el registro
    }

    // Leer los datos del registro
    return HAL_I2C_Master_Receive(&hi2c1, BQ76905_ADDR, data, len, HAL_MAX_DELAY);
}


// Función para leer un registro del BQ76905
HAL_StatusTypeDef BQ76905_ReadRegister_test(I2C_HandleTypeDef *hi2c, uint8_t regAddr, uint8_t *data, uint16_t size) {
    return HAL_I2C_Mem_Read(hi2c, BQ76905_ADDR << 1, regAddr, I2C_MEMADD_SIZE_8BIT, data, size, HAL_MAX_DELAY);
}

// Función para leer el voltaje de una celda
void ReadCellVoltage(I2C_HandleTypeDef *hi2c, UART_HandleTypeDef *huart, uint8_t cell) {
    uint8_t cmd_addr = 0x14 + (cell * 2);
    uint8_t result[2] = {0};
	char buffer[100];

    if (BQ76905_ReadRegister_test(hi2c, cmd_addr, result, 2) == HAL_OK) {
        uint16_t voltage = (result[1] << 8) | result[0];
    	sprintf(buffer, "Cell %d = %d mV\n", cell, voltage); // @suppress("Float formatting support")
    	HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
    } else {
        printf("Error al leer el voltaje de la celda %d\n", cell);
    }
}


/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_ADC1_Init();
  MX_ADC2_Init();
  MX_ADC3_Init();
  MX_I2C1_Init();
  MX_I2C3_Init();
  MX_TIM2_Init();
  MX_TIM4_Init();
  MX_TIM5_Init();
  MX_UART4_Init();
  MX_USB_OTG_FS_PCD_Init();
  /* USER CODE BEGIN 2 */



  //COMUNICACION ENTRE PLACAS
  HAL_I2C_EnableListen_IT(&hi2c1); // Habilitar escucha en modo esclavo

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);

  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);


  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET); 	//5V
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);	//3.3V BIS
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);	//3.3V
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);	//5V BIS
  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);	//Batery out BIS

  //char *data = "hello from hell";
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  //CDC_Transmit_FS((uint8_t *) data, strlen(data));

	  /*
	  	//MPPT
		VX_in = readADC(&hadc2, ADC_CHANNEL_11);
		IX_in = readADC(&hadc2, ADC_CHANNEL_10);
		powerX = VX_in * IX_in;

		VY_in = readADC(&hadc1, ADC_CHANNEL_13);
		IY_in = readADC(&hadc1, ADC_CHANNEL_12);
		powerY = VY_in * IY_in;

		VZ_in = readADC(&hadc3, ADC_CHANNEL_2);
		IZ_in = readADC(&hadc3, ADC_CHANNEL_1);
		powerZ = VZ_in * IZ_in;


		mppt(&dutyCycleX, &powerX, &prevPowerX);
		mppt(&dutyCycleY, &powerY, &prevPowerY);
		mppt(&dutyCycleZ, &powerZ, &prevPowerZ);

		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, dutyCycleX);
		__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, dutyCycleY);
		__HAL_TIM_SET_COMPARE(&htim5, TIM_CHANNEL_4, dutyCycleZ);


		// Imprimir datos al puerto serie
		char buffer[100];
		sprintf(buffer, "VX_in: %.2f V, IX_in: %.2f A, PowerX: %.2f W\n", VX_in, IX_in, powerX); // @suppress("Float formatting support")
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
		sprintf(buffer, "VY_in: %.2f V, IY_in: %.2f A, PowerY: %.2f W\n", VY_in, IY_in, powerY);
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
		sprintf(buffer, "VZ_in: %.2f V, IZ_in: %.2f A, PowerZ: %.2f W\n", VZ_in, IZ_in, powerZ);
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);


		//PDU
		V5 = readADC(&hadc2, ADC_CHANNEL_11);
		I5 = readADC(&hadc2, ADC_CHANNEL_10);

		V5bis = readADC(&hadc2, ADC_CHANNEL_11);
		I5bis = readADC(&hadc2, ADC_CHANNEL_10);

		V3 = readADC(&hadc2, ADC_CHANNEL_11);
		I3 = readADC(&hadc2, ADC_CHANNEL_10);

		V3bis = readADC(&hadc2, ADC_CHANNEL_11);
		I3bis = readADC(&hadc2, ADC_CHANNEL_10);
		// Imprimir datos al puerto serie

		sprintf(buffer, "V5: %.2f V, I5: %.2f A \n", V5, I5); // @suppress("Float formatting support")
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);

		sprintf(buffer, "V5bis: %.2f V, I5bis: %.2f A \n", V5bis, I5bis); // @suppress("Float formatting support")
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);

		sprintf(buffer, "V3: %.2f V, I3: %.2f A \n", V3, I3); // @suppress("Float formatting support")
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);
*/
		char buffer[100];
		sprintf(buffer, "\n V3bis: %.2f V, I3bis: %.2f A \n", V3bis, I3bis); // @suppress("Float formatting support")
		HAL_UART_Transmit(&huart4, (uint8_t*) buffer, strlen(buffer), HAL_MAX_DELAY);

		//COMUNICACION BQ76905



		//HAL_UART_Transmit(&huart4, (uint8_t*) &battery_data->alert_status_B, strlen(buffer), HAL_MAX_DELAY);
        //HAL_UART_Transmit(&huart4, (uint8_t*)"\n\n\n",50, HAL_MAX_DELAY);

	    ReadCellVoltage(&hi2c1, &huart1, 1);

		//CALENTAMIENTO Y CONTROL DE TEMPERATURA

        //if ((battery_data->alert_status_B & UTD) || (battery_data->alert_status_B & UTC) || (battery_data->alert_status_B & OTINT)) {
        if (1) {
        	char MSG_CALENT_OK[60] = "\n Calefactor encendido. Alarma activa. \n";
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);  // Activar calefactor
            HAL_UART_Transmit(&huart4, (uint8_t*) MSG_CALENT_OK,50, HAL_MAX_DELAY);

        } else {
        	char MSG_CALENT_ERROR[60] =  "\n Calefactor apagado. Todas las alarmas inactivas.\n";
            HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);  // Apagar calefactor
            HAL_UART_Transmit(&huart4, (uint8_t*) MSG_CALENT_ERROR,50, HAL_MAX_DELAY);
        }

		//MODO BAJO CONSUMO

		//ALMACENAMIENTO EN FLASH DE VARIBLES

	  	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2) == GPIO_PIN_SET){
	  		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);	//Batery out BIS
	  	}

		HAL_Delay(2000);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 96;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
