
BLUEPILL ORIGINAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa7c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800ab90  0800ab90  0000bb90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b084  0800b084  0000d1f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b084  0800b084  0000c084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b08c  0800b08c  0000d1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b08c  0800b08c  0000c08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b090  0800b090  0000c090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800b094  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  200001f0  0800b284  0000d1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  0800b284  0000d52c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134c8  00000000  00000000  0000d219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000341c  00000000  00000000  000206e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b8  00000000  00000000  00023b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e99  00000000  00000000  00024db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b42b  00000000  00000000  00025c51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ebd  00000000  00000000  0004107c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094756  00000000  00000000  00059f39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ee68f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006258  00000000  00000000  000ee6d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000f492c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ab74 	.word	0x0800ab74

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800ab74 	.word	0x0800ab74

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000be4:	4b20      	ldr	r3, [pc, #128]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000be6:	4a21      	ldr	r2, [pc, #132]	@ (8000c6c <MX_ADC1_Init+0x98>)
 8000be8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bea:	4b1f      	ldr	r3, [pc, #124]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000bec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bf0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000c00:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000c04:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c06:	4b18      	ldr	r3, [pc, #96]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000c0c:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000c0e:	2202      	movs	r2, #2
 8000c10:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c12:	4815      	ldr	r0, [pc, #84]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000c14:	f001 f97a 	bl	8001f0c <HAL_ADC_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8000c1e:	f000 fe1d 	bl	800185c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	4619      	mov	r1, r3
 8000c32:	480d      	ldr	r0, [pc, #52]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000c34:	f001 fbfa 	bl	800242c <HAL_ADC_ConfigChannel>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c3e:	f000 fe0d 	bl	800185c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c42:	2301      	movs	r3, #1
 8000c44:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c46:	2302      	movs	r3, #2
 8000c48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4806      	ldr	r0, [pc, #24]	@ (8000c68 <MX_ADC1_Init+0x94>)
 8000c50:	f001 fbec 	bl	800242c <HAL_ADC_ConfigChannel>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000c5a:	f000 fdff 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	3710      	adds	r7, #16
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000020c 	.word	0x2000020c
 8000c6c:	40012400 	.word	0x40012400

08000c70 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8000d3c <HAL_ADC_MspInit+0xcc>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d151      	bne.n	8000d34 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c90:	4b2b      	ldr	r3, [pc, #172]	@ (8000d40 <HAL_ADC_MspInit+0xd0>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	4a2a      	ldr	r2, [pc, #168]	@ (8000d40 <HAL_ADC_MspInit+0xd0>)
 8000c96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c9a:	6193      	str	r3, [r2, #24]
 8000c9c:	4b28      	ldr	r3, [pc, #160]	@ (8000d40 <HAL_ADC_MspInit+0xd0>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b25      	ldr	r3, [pc, #148]	@ (8000d40 <HAL_ADC_MspInit+0xd0>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a24      	ldr	r2, [pc, #144]	@ (8000d40 <HAL_ADC_MspInit+0xd0>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b22      	ldr	r3, [pc, #136]	@ (8000d40 <HAL_ADC_MspInit+0xd0>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = VCellMas_Pin|VCellMenos_Pin;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	4619      	mov	r1, r3
 8000cce:	481d      	ldr	r0, [pc, #116]	@ (8000d44 <HAL_ADC_MspInit+0xd4>)
 8000cd0:	f002 f8aa 	bl	8002e28 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000cd6:	4a1d      	ldr	r2, [pc, #116]	@ (8000d4c <HAL_ADC_MspInit+0xdc>)
 8000cd8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cda:	4b1b      	ldr	r3, [pc, #108]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce0:	4b19      	ldr	r3, [pc, #100]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000ce6:	4b18      	ldr	r3, [pc, #96]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000ce8:	2280      	movs	r2, #128	@ 0x80
 8000cea:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000cec:	4b16      	ldr	r3, [pc, #88]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000cee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cf2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000cf6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cfa:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000cfc:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000cfe:	2220      	movs	r2, #32
 8000d00:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d02:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d08:	480f      	ldr	r0, [pc, #60]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000d0a:	f001 fe9f 	bl	8002a4c <HAL_DMA_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000d14:	f000 fda2 	bl	800185c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000d1c:	621a      	str	r2, [r3, #32]
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <HAL_ADC_MspInit+0xd8>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 1, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2101      	movs	r1, #1
 8000d28:	2012      	movs	r0, #18
 8000d2a:	f001 fe58 	bl	80029de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000d2e:	2012      	movs	r0, #18
 8000d30:	f001 fe71 	bl	8002a16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000d34:	bf00      	nop
 8000d36:	3720      	adds	r7, #32
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40012400 	.word	0x40012400
 8000d40:	40021000 	.word	0x40021000
 8000d44:	40010800 	.word	0x40010800
 8000d48:	2000023c 	.word	0x2000023c
 8000d4c:	40020008 	.word	0x40020008

08000d50 <BQ29330_ReadFunctionControl>:



// Lee el valor actual del registro FUNCTION_CONTROL (0x03) del BQ29330
HAL_StatusTypeDef BQ29330_ReadFunctionControl(BQ29330_Registers reg, uint8_t *valor_leido)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af02      	add	r7, sp, #8
 8000d56:	4603      	mov	r3, r0
 8000d58:	6039      	str	r1, [r7, #0]
 8000d5a:	71fb      	strb	r3, [r7, #7]
	uint8_t buffer[1];
    buffer[0] = reg; 		// Dirección del registro
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	733b      	strb	r3, [r7, #12]
    // Paso 1: Enviar la dirección del registro que queremos leer (0x03)
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(&hi2c1, BMS_I2C_ADDRESS, buffer, 1, HAL_MAX_DELAY);
 8000d60:	f107 020c 	add.w	r2, r7, #12
 8000d64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	2140      	movs	r1, #64	@ 0x40
 8000d6e:	480c      	ldr	r0, [pc, #48]	@ (8000da0 <BQ29330_ReadFunctionControl+0x50>)
 8000d70:	f002 fb54 	bl	800341c <HAL_I2C_Master_Transmit>
 8000d74:	4603      	mov	r3, r0
 8000d76:	73fb      	strb	r3, [r7, #15]
    if (status != HAL_OK) return status;  // Si falla al enviar la dirección del registro, retornamos el error
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <BQ29330_ReadFunctionControl+0x32>
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
 8000d80:	e009      	b.n	8000d96 <BQ29330_ReadFunctionControl+0x46>
    // Paso 2: Leer un byte desde el dispositivo (valor del registro FUNCTION_CONTROL)
    return HAL_I2C_Master_Receive(&hi2c1, BMS_I2C_ADDRESS, valor_leido, 1, HAL_MAX_DELAY);  // Devolver el estado de la operación y el valor leído en *valor_leido
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	2140      	movs	r1, #64	@ 0x40
 8000d8e:	4804      	ldr	r0, [pc, #16]	@ (8000da0 <BQ29330_ReadFunctionControl+0x50>)
 8000d90:	f002 fc42 	bl	8003618 <HAL_I2C_Master_Receive>
 8000d94:	4603      	mov	r3, r0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	20000280 	.word	0x20000280

08000da4 <BQ29330_WriteRegister>:



// Función para escribir en un registro del BQ29330
HAL_StatusTypeDef BQ29330_WriteRegister(BQ29330_Registers reg, uint8_t data)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af02      	add	r7, sp, #8
 8000daa:	4603      	mov	r3, r0
 8000dac:	460a      	mov	r2, r1
 8000dae:	71fb      	strb	r3, [r7, #7]
 8000db0:	4613      	mov	r3, r2
 8000db2:	71bb      	strb	r3, [r7, #6]
    uint8_t buffer[2];
    buffer[0] = reg; 		// Dirección del registro
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	733b      	strb	r3, [r7, #12]
    buffer[1] = data;        // Dato a escribir
 8000db8:	79bb      	ldrb	r3, [r7, #6]
 8000dba:	737b      	strb	r3, [r7, #13]
    return HAL_I2C_Master_Transmit(&hi2c1, BMS_I2C_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 8000dbc:	f107 020c 	add.w	r2, r7, #12
 8000dc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	2140      	movs	r1, #64	@ 0x40
 8000dca:	4804      	ldr	r0, [pc, #16]	@ (8000ddc <BQ29330_WriteRegister+0x38>)
 8000dcc:	f002 fb26 	bl	800341c <HAL_I2C_Master_Transmit>
 8000dd0:	4603      	mov	r3, r0
}
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000280 	.word	0x20000280

08000de0 <BQ29330_config>:

HAL_StatusTypeDef BQ29330_config(){
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
	BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL, 0x07);
 8000de4:	2107      	movs	r1, #7
 8000de6:	2001      	movs	r0, #1
 8000de8:	f7ff ffdc 	bl	8000da4 <BQ29330_WriteRegister>
	BQ29330_WriteRegister(BQ29330_STATE_CONTROL, 4);   // WDDIS = 1, all else = 0
 8000dec:	2104      	movs	r1, #4
 8000dee:	2002      	movs	r0, #2
 8000df0:	f7ff ffd8 	bl	8000da4 <BQ29330_WriteRegister>
	BQ29330_WriteRegister(BQ29330_FUNCTION_CONTROL, 0x05); // BAT = 1 y vmem 1
 8000df4:	2105      	movs	r1, #5
 8000df6:	2003      	movs	r0, #3
 8000df8:	f7ff ffd4 	bl	8000da4 <BQ29330_WriteRegister>
	BQ29330_WriteRegister(BQ29330_CELL, 0x01); 			   //
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	2004      	movs	r0, #4
 8000e00:	f7ff ffd0 	bl	8000da4 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_OLV, 0x1F);              // 50 mV 0x00
 8000e04:	211f      	movs	r1, #31
 8000e06:	2005      	movs	r0, #5
 8000e08:	f7ff ffcc 	bl	8000da4 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_OLD, 0x0F);              // 31 ms
 8000e0c:	210f      	movs	r1, #15
 8000e0e:	2006      	movs	r0, #6
 8000e10:	f7ff ffc8 	bl	8000da4 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_SCC, 0x0F);              // 475 mV y 915 μs
 8000e14:	210f      	movs	r1, #15
 8000e16:	2007      	movs	r0, #7
 8000e18:	f7ff ffc4 	bl	8000da4 <BQ29330_WriteRegister>
    BQ29330_WriteRegister(BQ29330_SCD, 0x0F);              // idem for discharge
 8000e1c:	210f      	movs	r1, #15
 8000e1e:	2008      	movs	r0, #8
 8000e20:	f7ff ffc0 	bl	8000da4 <BQ29330_WriteRegister>

}
 8000e24:	bf00      	nop
 8000e26:	4618      	mov	r0, r3
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e32:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <MX_DMA_Init+0x38>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	4a0b      	ldr	r2, [pc, #44]	@ (8000e64 <MX_DMA_Init+0x38>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6153      	str	r3, [r2, #20]
 8000e3e:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <MX_DMA_Init+0x38>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	200b      	movs	r0, #11
 8000e50:	f001 fdc5 	bl	80029de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e54:	200b      	movs	r0, #11
 8000e56:	f001 fdde 	bl	8002a16 <HAL_NVIC_EnableIRQ>

}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40021000 	.word	0x40021000

08000e68 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6e:	f107 0310 	add.w	r3, r7, #16
 8000e72:	2200      	movs	r2, #0
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	605a      	str	r2, [r3, #4]
 8000e78:	609a      	str	r2, [r3, #8]
 8000e7a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e7c:	4b24      	ldr	r3, [pc, #144]	@ (8000f10 <MX_GPIO_Init+0xa8>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	4a23      	ldr	r2, [pc, #140]	@ (8000f10 <MX_GPIO_Init+0xa8>)
 8000e82:	f043 0310 	orr.w	r3, r3, #16
 8000e86:	6193      	str	r3, [r2, #24]
 8000e88:	4b21      	ldr	r3, [pc, #132]	@ (8000f10 <MX_GPIO_Init+0xa8>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	f003 0310 	and.w	r3, r3, #16
 8000e90:	60fb      	str	r3, [r7, #12]
 8000e92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e94:	4b1e      	ldr	r3, [pc, #120]	@ (8000f10 <MX_GPIO_Init+0xa8>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a1d      	ldr	r2, [pc, #116]	@ (8000f10 <MX_GPIO_Init+0xa8>)
 8000e9a:	f043 0320 	orr.w	r3, r3, #32
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f10 <MX_GPIO_Init+0xa8>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0320 	and.w	r3, r3, #32
 8000ea8:	60bb      	str	r3, [r7, #8]
 8000eaa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eac:	4b18      	ldr	r3, [pc, #96]	@ (8000f10 <MX_GPIO_Init+0xa8>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a17      	ldr	r2, [pc, #92]	@ (8000f10 <MX_GPIO_Init+0xa8>)
 8000eb2:	f043 0304 	orr.w	r3, r3, #4
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b15      	ldr	r3, [pc, #84]	@ (8000f10 <MX_GPIO_Init+0xa8>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec4:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <MX_GPIO_Init+0xa8>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a11      	ldr	r2, [pc, #68]	@ (8000f10 <MX_GPIO_Init+0xa8>)
 8000eca:	f043 0308 	orr.w	r3, r3, #8
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f10 <MX_GPIO_Init+0xa8>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f003 0308 	and.w	r3, r3, #8
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(activador_GPIO_Port, activador_Pin, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ee2:	480c      	ldr	r0, [pc, #48]	@ (8000f14 <MX_GPIO_Init+0xac>)
 8000ee4:	f002 f924 	bl	8003130 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = activador_Pin;
 8000ee8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	2302      	movs	r3, #2
 8000ef8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(activador_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 0310 	add.w	r3, r7, #16
 8000efe:	4619      	mov	r1, r3
 8000f00:	4804      	ldr	r0, [pc, #16]	@ (8000f14 <MX_GPIO_Init+0xac>)
 8000f02:	f001 ff91 	bl	8002e28 <HAL_GPIO_Init>

}
 8000f06:	bf00      	nop
 8000f08:	3720      	adds	r7, #32
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40021000 	.word	0x40021000
 8000f14:	40011000 	.word	0x40011000

08000f18 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f1e:	4a13      	ldr	r2, [pc, #76]	@ (8000f6c <MX_I2C1_Init+0x54>)
 8000f20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f22:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f24:	4a12      	ldr	r2, [pc, #72]	@ (8000f70 <MX_I2C1_Init+0x58>)
 8000f26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f36:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f42:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	@ (8000f68 <MX_I2C1_Init+0x50>)
 8000f56:	f002 f91d 	bl	8003194 <HAL_I2C_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f60:	f000 fc7c 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000280 	.word	0x20000280
 8000f6c:	40005400 	.word	0x40005400
 8000f70:	000186a0 	.word	0x000186a0

08000f74 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f7a:	4a13      	ldr	r2, [pc, #76]	@ (8000fc8 <MX_I2C2_Init+0x54>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f80:	4a12      	ldr	r2, [pc, #72]	@ (8000fcc <MX_I2C2_Init+0x58>)
 8000f82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f96:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000faa:	4b06      	ldr	r3, [pc, #24]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fb0:	4804      	ldr	r0, [pc, #16]	@ (8000fc4 <MX_I2C2_Init+0x50>)
 8000fb2:	f002 f8ef 	bl	8003194 <HAL_I2C_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000fbc:	f000 fc4e 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	200002d4 	.word	0x200002d4
 8000fc8:	40005800 	.word	0x40005800
 8000fcc:	000186a0 	.word	0x000186a0

08000fd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	@ 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0318 	add.w	r3, r7, #24
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4a2b      	ldr	r2, [pc, #172]	@ (8001098 <HAL_I2C_MspInit+0xc8>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d124      	bne.n	800103a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800109c <HAL_I2C_MspInit+0xcc>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a29      	ldr	r2, [pc, #164]	@ (800109c <HAL_I2C_MspInit+0xcc>)
 8000ff6:	f043 0308 	orr.w	r3, r3, #8
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b27      	ldr	r3, [pc, #156]	@ (800109c <HAL_I2C_MspInit+0xcc>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0308 	and.w	r3, r3, #8
 8001004:	617b      	str	r3, [r7, #20]
 8001006:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001008:	23c0      	movs	r3, #192	@ 0xc0
 800100a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800100c:	2312      	movs	r3, #18
 800100e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001010:	2303      	movs	r3, #3
 8001012:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	f107 0318 	add.w	r3, r7, #24
 8001018:	4619      	mov	r1, r3
 800101a:	4821      	ldr	r0, [pc, #132]	@ (80010a0 <HAL_I2C_MspInit+0xd0>)
 800101c:	f001 ff04 	bl	8002e28 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001020:	4b1e      	ldr	r3, [pc, #120]	@ (800109c <HAL_I2C_MspInit+0xcc>)
 8001022:	69db      	ldr	r3, [r3, #28]
 8001024:	4a1d      	ldr	r2, [pc, #116]	@ (800109c <HAL_I2C_MspInit+0xcc>)
 8001026:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800102a:	61d3      	str	r3, [r2, #28]
 800102c:	4b1b      	ldr	r3, [pc, #108]	@ (800109c <HAL_I2C_MspInit+0xcc>)
 800102e:	69db      	ldr	r3, [r3, #28]
 8001030:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001038:	e029      	b.n	800108e <HAL_I2C_MspInit+0xbe>
  else if(i2cHandle->Instance==I2C2)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a19      	ldr	r2, [pc, #100]	@ (80010a4 <HAL_I2C_MspInit+0xd4>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d124      	bne.n	800108e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	4b15      	ldr	r3, [pc, #84]	@ (800109c <HAL_I2C_MspInit+0xcc>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a14      	ldr	r2, [pc, #80]	@ (800109c <HAL_I2C_MspInit+0xcc>)
 800104a:	f043 0308 	orr.w	r3, r3, #8
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b12      	ldr	r3, [pc, #72]	@ (800109c <HAL_I2C_MspInit+0xcc>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f003 0308 	and.w	r3, r3, #8
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800105c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001062:	2312      	movs	r3, #18
 8001064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001066:	2303      	movs	r3, #3
 8001068:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106a:	f107 0318 	add.w	r3, r7, #24
 800106e:	4619      	mov	r1, r3
 8001070:	480b      	ldr	r0, [pc, #44]	@ (80010a0 <HAL_I2C_MspInit+0xd0>)
 8001072:	f001 fed9 	bl	8002e28 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001076:	4b09      	ldr	r3, [pc, #36]	@ (800109c <HAL_I2C_MspInit+0xcc>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	4a08      	ldr	r2, [pc, #32]	@ (800109c <HAL_I2C_MspInit+0xcc>)
 800107c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001080:	61d3      	str	r3, [r2, #28]
 8001082:	4b06      	ldr	r3, [pc, #24]	@ (800109c <HAL_I2C_MspInit+0xcc>)
 8001084:	69db      	ldr	r3, [r3, #28]
 8001086:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	@ 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40005400 	.word	0x40005400
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010c00 	.word	0x40010c00
 80010a4:	40005800 	.word	0x40005800

080010a8 <Read16>:
uint16_t ina219_calibrationValue;
int16_t  ina219_currentDivider_mA;
int16_t  ina219_powerMultiplier_mW;

uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af04      	add	r7, sp, #16
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	70fb      	strb	r3, [r7, #3]
	uint8_t Value[2];

	HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, Value, 2, 1000);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6818      	ldr	r0, [r3, #0]
 80010b8:	78fb      	ldrb	r3, [r7, #3]
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c0:	9302      	str	r3, [sp, #8]
 80010c2:	2302      	movs	r3, #2
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	f107 030c 	add.w	r3, r7, #12
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2301      	movs	r3, #1
 80010ce:	2180      	movs	r1, #128	@ 0x80
 80010d0:	f002 fe08 	bl	8003ce4 <HAL_I2C_Mem_Read>

	return ((Value[0] << 8) | Value[1]);
 80010d4:	7b3b      	ldrb	r3, [r7, #12]
 80010d6:	021b      	lsls	r3, r3, #8
 80010d8:	b21a      	sxth	r2, r3
 80010da:	7b7b      	ldrb	r3, [r7, #13]
 80010dc:	b21b      	sxth	r3, r3
 80010de:	4313      	orrs	r3, r2
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	b29b      	uxth	r3, r3
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}

080010ec <Write16>:


void Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af04      	add	r7, sp, #16
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	70fb      	strb	r3, [r7, #3]
 80010f8:	4613      	mov	r3, r2
 80010fa:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 80010fc:	883b      	ldrh	r3, [r7, #0]
 80010fe:	0a1b      	lsrs	r3, r3, #8
 8001100:	b29b      	uxth	r3, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 8001106:	883b      	ldrh	r3, [r7, #0]
 8001108:	b2db      	uxtb	r3, r3
 800110a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	78fb      	ldrb	r3, [r7, #3]
 8001112:	b29a      	uxth	r2, r3
 8001114:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001118:	9302      	str	r3, [sp, #8]
 800111a:	2302      	movs	r3, #2
 800111c:	9301      	str	r3, [sp, #4]
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	9300      	str	r3, [sp, #0]
 8001124:	2301      	movs	r3, #1
 8001126:	2180      	movs	r1, #128	@ 0x80
 8001128:	f002 fce2 	bl	8003af0 <HAL_I2C_Mem_Write>
}
 800112c:	bf00      	nop
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <INA219_ReadBusVoltage>:

uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 800113c:	2102      	movs	r1, #2
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ffb2 	bl	80010a8 <Read16>
 8001144:	4603      	mov	r3, r0
 8001146:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 8001148:	89fb      	ldrh	r3, [r7, #14]
 800114a:	08db      	lsrs	r3, r3, #3
 800114c:	b29b      	uxth	r3, r3
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	b29b      	uxth	r3, r3

}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <INA219_ReadCurrent_raw>:

int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b084      	sub	sp, #16
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 8001162:	2104      	movs	r1, #4
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff9f 	bl	80010a8 <Read16>
 800116a:	4603      	mov	r3, r0
 800116c:	81fb      	strh	r3, [r7, #14]

	return (result );
 800116e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	0000      	movs	r0, r0
 800117c:	0000      	movs	r0, r0
	...

08001180 <INA219_ReadShuntVolage>:

	return (result);// / ina219_currentDivider_mA );
}

uint16_t INA219_ReadShuntVolage(INA219_t *ina219)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_SHUNTVOLTAGE);
 8001188:	2101      	movs	r1, #1
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ff8c 	bl	80010a8 <Read16>
 8001190:	4603      	mov	r3, r0
 8001192:	81fb      	strh	r3, [r7, #14]

	return (result * 0.01);
 8001194:	89fb      	ldrh	r3, [r7, #14]
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f934 	bl	8000404 <__aeabi_i2d>
 800119c:	a308      	add	r3, pc, #32	@ (adr r3, 80011c0 <INA219_ReadShuntVolage+0x40>)
 800119e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a2:	f7ff f999 	bl	80004d8 <__aeabi_dmul>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fc6b 	bl	8000a88 <__aeabi_d2uiz>
 80011b2:	4603      	mov	r3, r0
 80011b4:	b29b      	uxth	r3, r3
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	47ae147b 	.word	0x47ae147b
 80011c4:	3f847ae1 	.word	0x3f847ae1

080011c8 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 80011d0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011d4:	2100      	movs	r1, #0
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ff88 	bl	80010ec <Write16>
	HAL_Delay(1);
 80011dc:	2001      	movs	r0, #1
 80011de:	f000 fe71 	bl	8001ec4 <HAL_Delay>
}
 80011e2:	bf00      	nop
 80011e4:	3708      	adds	r7, #8
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	460b      	mov	r3, r1
 80011f4:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	461a      	mov	r2, r3
 80011fa:	2105      	movs	r1, #5
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff75 	bl	80010ec <Write16>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	460b      	mov	r3, r1
 8001214:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8001216:	887b      	ldrh	r3, [r7, #2]
 8001218:	461a      	mov	r2, r3
 800121a:	2100      	movs	r1, #0
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ff65 	bl	80010ec <Write16>
}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
	...

0800122c <INA219_setCalibration_32V_1A>:
	INA219_setCalibration(ina219, ina219_calibrationValue);
	INA219_setConfig(ina219, config);
}

void INA219_setCalibration_32V_1A(INA219_t *ina219)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 8001234:	f643 139f 	movw	r3, #14751	@ 0x399f
 8001238:	81fb      	strh	r3, [r7, #14]
	                    INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	                    INA219_CONFIG_SADCRES_12BIT_1S_532US |
	                    INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 10240;
 800123a:	4b0c      	ldr	r3, [pc, #48]	@ (800126c <INA219_setCalibration_32V_1A+0x40>)
 800123c:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 8001240:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 25;    // Current LSB = 40uA per bit (1000/40 = 25)
 8001242:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <INA219_setCalibration_32V_1A+0x44>)
 8001244:	2219      	movs	r2, #25
 8001246:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0.8f; // Power LSB = 800uW per bit
 8001248:	4b0a      	ldr	r3, [pc, #40]	@ (8001274 <INA219_setCalibration_32V_1A+0x48>)
 800124a:	2200      	movs	r2, #0
 800124c:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 800124e:	4b07      	ldr	r3, [pc, #28]	@ (800126c <INA219_setCalibration_32V_1A+0x40>)
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	4619      	mov	r1, r3
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff ffc8 	bl	80011ea <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 800125a:	89fb      	ldrh	r3, [r7, #14]
 800125c:	4619      	mov	r1, r3
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff ffd3 	bl	800120a <INA219_setConfig>
}
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000328 	.word	0x20000328
 8001270:	2000032a 	.word	0x2000032a
 8001274:	2000032c 	.word	0x2000032c

08001278 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	4613      	mov	r3, r2
 8001284:	71fb      	strb	r3, [r7, #7]
	ina219->ina219_i2c = i2c;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	68ba      	ldr	r2, [r7, #8]
 800128a:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	79fa      	ldrb	r2, [r7, #7]
 8001290:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8001292:	4b10      	ldr	r3, [pc, #64]	@ (80012d4 <INA219_Init+0x5c>)
 8001294:	2200      	movs	r2, #0
 8001296:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <INA219_Init+0x60>)
 800129a:	2200      	movs	r2, #0
 800129c:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	b299      	uxth	r1, r3
 80012a6:	2302      	movs	r3, #2
 80012a8:	2203      	movs	r2, #3
 80012aa:	68b8      	ldr	r0, [r7, #8]
 80012ac:	f002 ff8e 	bl	80041cc <HAL_I2C_IsDeviceReady>
 80012b0:	4603      	mov	r3, r0
 80012b2:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d107      	bne.n	80012ca <INA219_Init+0x52>
	{

		INA219_Reset(ina219);
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f7ff ff84 	bl	80011c8 <INA219_Reset>
		INA219_setCalibration_32V_1A(ina219);
 80012c0:	68f8      	ldr	r0, [r7, #12]
 80012c2:	f7ff ffb3 	bl	800122c <INA219_setCalibration_32V_1A>

		return 1;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <INA219_Init+0x54>
	}

	else
	{
		return 0;
 80012ca:	2300      	movs	r3, #0
	}
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2000032a 	.word	0x2000032a
 80012d8:	2000032c 	.word	0x2000032c

080012dc <HAL_ADC_ConvCpltCallback>:
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */


uint8_t conv_complete = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){ conv_complete=1; }
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	4b03      	ldr	r3, [pc, #12]	@ (80012f4 <HAL_ADC_ConvCpltCallback+0x18>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	701a      	strb	r2, [r3, #0]
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr
 80012f4:	20000346 	.word	0x20000346

080012f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fe:	f000 fd7f 	bl	8001e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001302:	f000 f8c7 	bl	8001494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001306:	f7ff fdaf 	bl	8000e68 <MX_GPIO_Init>
  MX_DMA_Init();
 800130a:	f7ff fd8f 	bl	8000e2c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800130e:	f000 fcb3 	bl	8001c78 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001312:	f7ff fc5f 	bl	8000bd4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001316:	f000 fc05 	bl	8001b24 <MX_TIM3_Init>
  MX_I2C1_Init();
 800131a:	f7ff fdfd 	bl	8000f18 <MX_I2C1_Init>
  MX_I2C2_Init();
 800131e:	f7ff fe29 	bl	8000f74 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
//timer
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8001322:	210c      	movs	r1, #12
 8001324:	4850      	ldr	r0, [pc, #320]	@ (8001468 <main+0x170>)
 8001326:	f004 fa99 	bl	800585c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, htim3.Init.Period/2);
 800132a:	4b4f      	ldr	r3, [pc, #316]	@ (8001468 <main+0x170>)
 800132c:	68da      	ldr	r2, [r3, #12]
 800132e:	4b4e      	ldr	r3, [pc, #312]	@ (8001468 <main+0x170>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	0852      	lsrs	r2, r2, #1
 8001334:	641a      	str	r2, [r3, #64]	@ 0x40

  //adc
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 8001336:	2202      	movs	r2, #2
 8001338:	494c      	ldr	r1, [pc, #304]	@ (800146c <main+0x174>)
 800133a:	484d      	ldr	r0, [pc, #308]	@ (8001470 <main+0x178>)
 800133c:	f000 febe 	bl	80020bc <HAL_ADC_Start_DMA>

// INA219
  //while(!INA219_Init(&ina219, &hi2c2, INA219_ADDRESS));
  INA219_Init(&ina219, &hi2c2, INA219_ADDRESS);
 8001340:	2240      	movs	r2, #64	@ 0x40
 8001342:	494c      	ldr	r1, [pc, #304]	@ (8001474 <main+0x17c>)
 8001344:	484c      	ldr	r0, [pc, #304]	@ (8001478 <main+0x180>)
 8001346:	f7ff ff97 	bl	8001278 <INA219_Init>
  //INA219_setCalibration_32V_2A(&ina219);
  INA219_setCalibration_32V_1A(&ina219);
 800134a:	484b      	ldr	r0, [pc, #300]	@ (8001478 <main+0x180>)
 800134c:	f7ff ff6e 	bl	800122c <INA219_setCalibration_32V_1A>
  //INA219_setCalibration_16V_400mA(&ina219);
  HAL_StatusTypeDef statusI2c = 0x00;
 8001350:	2300      	movs	r3, #0
 8001352:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
while (1) {

	leer_promediado(&cell_mas, &cell_menos);
 8001354:	4949      	ldr	r1, [pc, #292]	@ (800147c <main+0x184>)
 8001356:	484a      	ldr	r0, [pc, #296]	@ (8001480 <main+0x188>)
 8001358:	f000 f8f8 	bl	800154c <leer_promediado>
	cell_menos = cell_menos * 3.3 / 4.096 * 1.1;
 800135c:	4b47      	ldr	r3, [pc, #284]	@ (800147c <main+0x184>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f84f 	bl	8000404 <__aeabi_i2d>
 8001366:	a33a      	add	r3, pc, #232	@ (adr r3, 8001450 <main+0x158>)
 8001368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136c:	f7ff f8b4 	bl	80004d8 <__aeabi_dmul>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	a337      	add	r3, pc, #220	@ (adr r3, 8001458 <main+0x160>)
 800137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137e:	f7ff f9d5 	bl	800072c <__aeabi_ddiv>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4610      	mov	r0, r2
 8001388:	4619      	mov	r1, r3
 800138a:	a335      	add	r3, pc, #212	@ (adr r3, 8001460 <main+0x168>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	f7ff f8a2 	bl	80004d8 <__aeabi_dmul>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4610      	mov	r0, r2
 800139a:	4619      	mov	r1, r3
 800139c:	f7ff fb74 	bl	8000a88 <__aeabi_d2uiz>
 80013a0:	4603      	mov	r3, r0
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	4b35      	ldr	r3, [pc, #212]	@ (800147c <main+0x184>)
 80013a6:	801a      	strh	r2, [r3, #0]
	cell_mas = cell_mas * 3.3 / 4.096 * 1.1;
 80013a8:	4b35      	ldr	r3, [pc, #212]	@ (8001480 <main+0x188>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f829 	bl	8000404 <__aeabi_i2d>
 80013b2:	a327      	add	r3, pc, #156	@ (adr r3, 8001450 <main+0x158>)
 80013b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b8:	f7ff f88e 	bl	80004d8 <__aeabi_dmul>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	a324      	add	r3, pc, #144	@ (adr r3, 8001458 <main+0x160>)
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	f7ff f9af 	bl	800072c <__aeabi_ddiv>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	a322      	add	r3, pc, #136	@ (adr r3, 8001460 <main+0x168>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	f7ff f87c 	bl	80004d8 <__aeabi_dmul>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fb4e 	bl	8000a88 <__aeabi_d2uiz>
 80013ec:	4603      	mov	r3, r0
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	4b23      	ldr	r3, [pc, #140]	@ (8001480 <main+0x188>)
 80013f2:	801a      	strh	r2, [r3, #0]

	//escribo
	BQ29330_config();
 80013f4:	f7ff fcf4 	bl	8000de0 <BQ29330_config>

    //update the struct with the values in the bq reading them with I2c
	statusI2c = BMSreadAll();
 80013f8:	f000 f8f2 	bl	80015e0 <BMSreadAll>
 80013fc:	4603      	mov	r3, r0
 80013fe:	71fb      	strb	r3, [r7, #7]

	BMSlogic();
 8001400:	f000 f9e6 	bl	80017d0 <BMSlogic>

    //INA219_setPowerMode(&ina219, INA219_CONFIG_MODE_ADCOFF);//apago el adc para guardar energia
    vbus = INA219_ReadBusVoltage(&ina219);
 8001404:	481c      	ldr	r0, [pc, #112]	@ (8001478 <main+0x180>)
 8001406:	f7ff fe95 	bl	8001134 <INA219_ReadBusVoltage>
 800140a:	4603      	mov	r3, r0
 800140c:	461a      	mov	r2, r3
 800140e:	4b1d      	ldr	r3, [pc, #116]	@ (8001484 <main+0x18c>)
 8001410:	801a      	strh	r2, [r3, #0]
    vshunt = INA219_ReadShuntVolage(&ina219);
 8001412:	4819      	ldr	r0, [pc, #100]	@ (8001478 <main+0x180>)
 8001414:	f7ff feb4 	bl	8001180 <INA219_ReadShuntVolage>
 8001418:	4603      	mov	r3, r0
 800141a:	461a      	mov	r2, r3
 800141c:	4b1a      	ldr	r3, [pc, #104]	@ (8001488 <main+0x190>)
 800141e:	801a      	strh	r2, [r3, #0]
    current = INA219_ReadCurrent_raw(&ina219) ;
 8001420:	4815      	ldr	r0, [pc, #84]	@ (8001478 <main+0x180>)
 8001422:	f7ff fe9a 	bl	800115a <INA219_ReadCurrent_raw>
 8001426:	4603      	mov	r3, r0
 8001428:	b29a      	uxth	r2, r3
 800142a:	4b18      	ldr	r3, [pc, #96]	@ (800148c <main+0x194>)
 800142c:	801a      	strh	r2, [r3, #0]

	sendMSGS(statusI2c);
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	4618      	mov	r0, r3
 8001432:	f000 f945 	bl	80016c0 <sendMSGS>


	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001436:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800143a:	4815      	ldr	r0, [pc, #84]	@ (8001490 <main+0x198>)
 800143c:	f001 fe90 	bl	8003160 <HAL_GPIO_TogglePin>
	HAL_Delay(1000); // 1 segundo de delay
 8001440:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001444:	f000 fd3e 	bl	8001ec4 <HAL_Delay>
	leer_promediado(&cell_mas, &cell_menos);
 8001448:	bf00      	nop
 800144a:	e783      	b.n	8001354 <main+0x5c>
 800144c:	f3af 8000 	nop.w
 8001450:	66666666 	.word	0x66666666
 8001454:	400a6666 	.word	0x400a6666
 8001458:	d2f1a9fc 	.word	0xd2f1a9fc
 800145c:	4010624d 	.word	0x4010624d
 8001460:	9999999a 	.word	0x9999999a
 8001464:	3ff19999 	.word	0x3ff19999
 8001468:	2000034c 	.word	0x2000034c
 800146c:	20000330 	.word	0x20000330
 8001470:	2000020c 	.word	0x2000020c
 8001474:	200002d4 	.word	0x200002d4
 8001478:	20000338 	.word	0x20000338
 800147c:	20000336 	.word	0x20000336
 8001480:	20000334 	.word	0x20000334
 8001484:	20000340 	.word	0x20000340
 8001488:	20000342 	.word	0x20000342
 800148c:	20000344 	.word	0x20000344
 8001490:	40011000 	.word	0x40011000

08001494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b094      	sub	sp, #80	@ 0x50
 8001498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800149e:	2228      	movs	r2, #40	@ 0x28
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f006 fdea 	bl	800807c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a8:	f107 0314 	add.w	r3, r7, #20
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014c4:	2301      	movs	r3, #1
 80014c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014ce:	2300      	movs	r3, #0
 80014d0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014d2:	2301      	movs	r3, #1
 80014d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014d6:	2302      	movs	r3, #2
 80014d8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014da:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80014e0:	2300      	movs	r3, #0
 80014e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 fca1 	bl	8004e30 <HAL_RCC_OscConfig>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <SystemClock_Config+0x64>
  {
    Error_Handler();
 80014f4:	f000 f9b2 	bl	800185c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f8:	230f      	movs	r3, #15
 80014fa:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fc:	2302      	movs	r3, #2
 80014fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001504:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001508:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 800150a:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 800150e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001510:	f107 0314 	add.w	r3, r7, #20
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f003 ff0c 	bl	8005334 <HAL_RCC_ClockConfig>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001522:	f000 f99b 	bl	800185c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001526:	2302      	movs	r3, #2
 8001528:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800152a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800152e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001530:	1d3b      	adds	r3, r7, #4
 8001532:	4618      	mov	r0, r3
 8001534:	f004 f88c 	bl	8005650 <HAL_RCCEx_PeriphCLKConfig>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800153e:	f000 f98d 	bl	800185c <Error_Handler>
  }
}
 8001542:	bf00      	nop
 8001544:	3750      	adds	r7, #80	@ 0x50
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <leer_promediado>:

/* USER CODE BEGIN 4 */


void leer_promediado(uint16_t *cell_mas,uint16_t *cell_menos) {
 800154c:	b480      	push	{r7}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
	uint32_t cell_mas_total = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
	uint32_t cell_menos_total = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]

	for(uint8_t i = 0; i < NUM_SAMPLES ; i++) {
 800155e:	2300      	movs	r3, #0
 8001560:	73fb      	strb	r3, [r7, #15]
 8001562:	e01e      	b.n	80015a2 <leer_promediado+0x56>
	    while(!conv_complete);
 8001564:	bf00      	nop
 8001566:	4b1b      	ldr	r3, [pc, #108]	@ (80015d4 <leer_promediado+0x88>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0fb      	beq.n	8001566 <leer_promediado+0x1a>

	    *cell_mas = (uint16_t) rawValues[0];
 800156e:	4b1a      	ldr	r3, [pc, #104]	@ (80015d8 <leer_promediado+0x8c>)
 8001570:	881a      	ldrh	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	801a      	strh	r2, [r3, #0]
	    *cell_menos = (uint16_t) rawValues[1];
 8001576:	4b18      	ldr	r3, [pc, #96]	@ (80015d8 <leer_promediado+0x8c>)
 8001578:	885a      	ldrh	r2, [r3, #2]
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	801a      	strh	r2, [r3, #0]

	    cell_mas_total += *cell_mas;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	881b      	ldrh	r3, [r3, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	4413      	add	r3, r2
 8001588:	617b      	str	r3, [r7, #20]
	    cell_menos_total += *cell_menos;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	881b      	ldrh	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4413      	add	r3, r2
 8001594:	613b      	str	r3, [r7, #16]

	    conv_complete = 0;
 8001596:	4b0f      	ldr	r3, [pc, #60]	@ (80015d4 <leer_promediado+0x88>)
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < NUM_SAMPLES ; i++) {
 800159c:	7bfb      	ldrb	r3, [r7, #15]
 800159e:	3301      	adds	r3, #1
 80015a0:	73fb      	strb	r3, [r7, #15]
 80015a2:	7bfb      	ldrb	r3, [r7, #15]
 80015a4:	2bc7      	cmp	r3, #199	@ 0xc7
 80015a6:	d9dd      	bls.n	8001564 <leer_promediado+0x18>
	}

	// Promedio final
	*cell_mas = cell_mas_total / NUM_SAMPLES;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	4a0c      	ldr	r2, [pc, #48]	@ (80015dc <leer_promediado+0x90>)
 80015ac:	fba2 2303 	umull	r2, r3, r2, r3
 80015b0:	099b      	lsrs	r3, r3, #6
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	801a      	strh	r2, [r3, #0]
	*cell_menos = cell_menos_total / NUM_SAMPLES;
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	4a08      	ldr	r2, [pc, #32]	@ (80015dc <leer_promediado+0x90>)
 80015bc:	fba2 2303 	umull	r2, r3, r2, r3
 80015c0:	099b      	lsrs	r3, r3, #6
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	801a      	strh	r2, [r3, #0]

}
 80015c8:	bf00      	nop
 80015ca:	371c      	adds	r7, #28
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	20000346 	.word	0x20000346
 80015d8:	20000330 	.word	0x20000330
 80015dc:	51eb851f 	.word	0x51eb851f

080015e0 <BMSreadAll>:


HAL_StatusTypeDef BMSreadAll(){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef statusI2c = 0x00;
 80015e6:	2300      	movs	r3, #0
 80015e8:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_STATUS, 					&bq.BQ29330_status);
 80015ea:	492b      	ldr	r1, [pc, #172]	@ (8001698 <BMSreadAll+0xb8>)
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7ff fbaf 	bl	8000d50 <BQ29330_ReadFunctionControl>
 80015f2:	4603      	mov	r3, r0
 80015f4:	461a      	mov	r2, r3
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_OUTPUT_CONTROL, 			&bq.BQ29330_output_countrol);
 80015fc:	4927      	ldr	r1, [pc, #156]	@ (800169c <BMSreadAll+0xbc>)
 80015fe:	2001      	movs	r0, #1
 8001600:	f7ff fba6 	bl	8000d50 <BQ29330_ReadFunctionControl>
 8001604:	4603      	mov	r3, r0
 8001606:	461a      	mov	r2, r3
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	4313      	orrs	r3, r2
 800160c:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_STATE_CONTROL, 			&bq.BQ29330_state_countrol);
 800160e:	4924      	ldr	r1, [pc, #144]	@ (80016a0 <BMSreadAll+0xc0>)
 8001610:	2002      	movs	r0, #2
 8001612:	f7ff fb9d 	bl	8000d50 <BQ29330_ReadFunctionControl>
 8001616:	4603      	mov	r3, r0
 8001618:	461a      	mov	r2, r3
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	4313      	orrs	r3, r2
 800161e:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_FUNCTION_CONTROL, 		&bq.BQ29330_function_control);
 8001620:	4920      	ldr	r1, [pc, #128]	@ (80016a4 <BMSreadAll+0xc4>)
 8001622:	2003      	movs	r0, #3
 8001624:	f7ff fb94 	bl	8000d50 <BQ29330_ReadFunctionControl>
 8001628:	4603      	mov	r3, r0
 800162a:	461a      	mov	r2, r3
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	4313      	orrs	r3, r2
 8001630:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_CELL, 					&bq.BQ29330_cell);
 8001632:	491d      	ldr	r1, [pc, #116]	@ (80016a8 <BMSreadAll+0xc8>)
 8001634:	2004      	movs	r0, #4
 8001636:	f7ff fb8b 	bl	8000d50 <BQ29330_ReadFunctionControl>
 800163a:	4603      	mov	r3, r0
 800163c:	461a      	mov	r2, r3
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	4313      	orrs	r3, r2
 8001642:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_OLV, 						&bq.BQ29330_OLV);
 8001644:	4919      	ldr	r1, [pc, #100]	@ (80016ac <BMSreadAll+0xcc>)
 8001646:	2005      	movs	r0, #5
 8001648:	f7ff fb82 	bl	8000d50 <BQ29330_ReadFunctionControl>
 800164c:	4603      	mov	r3, r0
 800164e:	461a      	mov	r2, r3
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	4313      	orrs	r3, r2
 8001654:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_OLD, 						&bq.BQ29330_OLD);
 8001656:	4916      	ldr	r1, [pc, #88]	@ (80016b0 <BMSreadAll+0xd0>)
 8001658:	2006      	movs	r0, #6
 800165a:	f7ff fb79 	bl	8000d50 <BQ29330_ReadFunctionControl>
 800165e:	4603      	mov	r3, r0
 8001660:	461a      	mov	r2, r3
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	4313      	orrs	r3, r2
 8001666:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_SCC, 						&bq.BQ29330_SCC);
 8001668:	4912      	ldr	r1, [pc, #72]	@ (80016b4 <BMSreadAll+0xd4>)
 800166a:	2007      	movs	r0, #7
 800166c:	f7ff fb70 	bl	8000d50 <BQ29330_ReadFunctionControl>
 8001670:	4603      	mov	r3, r0
 8001672:	461a      	mov	r2, r3
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	4313      	orrs	r3, r2
 8001678:	71fb      	strb	r3, [r7, #7]
	statusI2c |=  BQ29330_ReadFunctionControl(BQ29330_SCD, 						&bq.BQ29330_SCD);
 800167a:	490f      	ldr	r1, [pc, #60]	@ (80016b8 <BMSreadAll+0xd8>)
 800167c:	2008      	movs	r0, #8
 800167e:	f7ff fb67 	bl	8000d50 <BQ29330_ReadFunctionControl>
 8001682:	4603      	mov	r3, r0
 8001684:	461a      	mov	r2, r3
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	4313      	orrs	r3, r2
 800168a:	71fb      	strb	r3, [r7, #7]

	return statusI2c;
 800168c:	79fb      	ldrb	r3, [r7, #7]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000010 	.word	0x20000010
 800169c:	20000011 	.word	0x20000011
 80016a0:	20000012 	.word	0x20000012
 80016a4:	20000013 	.word	0x20000013
 80016a8:	20000014 	.word	0x20000014
 80016ac:	20000015 	.word	0x20000015
 80016b0:	20000016 	.word	0x20000016
 80016b4:	20000017 	.word	0x20000017
 80016b8:	20000018 	.word	0x20000018
 80016bc:	00000000 	.word	0x00000000

080016c0 <sendMSGS>:

void sendMSGS(HAL_StatusTypeDef statusI2c) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
	//bms
	sendUsartMsg("\nstatusI2c ", statusI2c);
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	4619      	mov	r1, r3
 80016d0:	482f      	ldr	r0, [pc, #188]	@ (8001790 <sendMSGS+0xd0>)
 80016d2:	f000 fb47 	bl	8001d64 <sendUsartMsg>

	sendUsartMsg("\nEstatus del bms : ", 					bq.BQ29330_status);
 80016d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001794 <sendMSGS+0xd4>)
 80016d8:	7c1b      	ldrb	r3, [r3, #16]
 80016da:	4619      	mov	r1, r3
 80016dc:	482e      	ldr	r0, [pc, #184]	@ (8001798 <sendMSGS+0xd8>)
 80016de:	f000 fb41 	bl	8001d64 <sendUsartMsg>
	sendUsartMsg("OUTPUT_CONTROL : ", 					bq.BQ29330_output_countrol);
 80016e2:	4b2c      	ldr	r3, [pc, #176]	@ (8001794 <sendMSGS+0xd4>)
 80016e4:	7c5b      	ldrb	r3, [r3, #17]
 80016e6:	4619      	mov	r1, r3
 80016e8:	482c      	ldr	r0, [pc, #176]	@ (800179c <sendMSGS+0xdc>)
 80016ea:	f000 fb3b 	bl	8001d64 <sendUsartMsg>
	sendUsartMsg("STATE_CONTROL : ", 					bq.BQ29330_state_countrol);
 80016ee:	4b29      	ldr	r3, [pc, #164]	@ (8001794 <sendMSGS+0xd4>)
 80016f0:	7c9b      	ldrb	r3, [r3, #18]
 80016f2:	4619      	mov	r1, r3
 80016f4:	482a      	ldr	r0, [pc, #168]	@ (80017a0 <sendMSGS+0xe0>)
 80016f6:	f000 fb35 	bl	8001d64 <sendUsartMsg>
	sendUsartMsg("FUNCTION_CONTROL : ", 				bq.BQ29330_function_control);
 80016fa:	4b26      	ldr	r3, [pc, #152]	@ (8001794 <sendMSGS+0xd4>)
 80016fc:	7cdb      	ldrb	r3, [r3, #19]
 80016fe:	4619      	mov	r1, r3
 8001700:	4828      	ldr	r0, [pc, #160]	@ (80017a4 <sendMSGS+0xe4>)
 8001702:	f000 fb2f 	bl	8001d64 <sendUsartMsg>
	sendUsartMsg("SCD (Short circuit in discharge): ", 	bq.BQ29330_SCD);
*/


	if(BQ29330_FUNCTION_CONTROL == 0x03 || BQ29330_FUNCTION_CONTROL == 0x05){
		sendUsartMsg("\ncell_mas: ", 						cell_mas * 18);
 8001706:	4b28      	ldr	r3, [pc, #160]	@ (80017a8 <sendMSGS+0xe8>)
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	00d2      	lsls	r2, r2, #3
 800170e:	4413      	add	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	b29b      	uxth	r3, r3
 8001714:	4619      	mov	r1, r3
 8001716:	4825      	ldr	r0, [pc, #148]	@ (80017ac <sendMSGS+0xec>)
 8001718:	f000 fb24 	bl	8001d64 <sendUsartMsg>
		sendUsartMsg("cell_menos: ", 						cell_menos * 18);
 800171c:	4b24      	ldr	r3, [pc, #144]	@ (80017b0 <sendMSGS+0xf0>)
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	461a      	mov	r2, r3
 8001722:	00d2      	lsls	r2, r2, #3
 8001724:	4413      	add	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	b29b      	uxth	r3, r3
 800172a:	4619      	mov	r1, r3
 800172c:	4821      	ldr	r0, [pc, #132]	@ (80017b4 <sendMSGS+0xf4>)
 800172e:	f000 fb19 	bl	8001d64 <sendUsartMsg>
		uint16_t celda = (975 - (cell_menos -cell_mas)/0.15 );
		sendUsartMsg("\m tension de celda : ", 				celda);
	}

	//ina219
	sendUsartMsg("\nvbus ", 								vbus);
 8001732:	4b21      	ldr	r3, [pc, #132]	@ (80017b8 <sendMSGS+0xf8>)
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	4619      	mov	r1, r3
 8001738:	4820      	ldr	r0, [pc, #128]	@ (80017bc <sendMSGS+0xfc>)
 800173a:	f000 fb13 	bl	8001d64 <sendUsartMsg>
	sendUsartMsg("shunt ", 								vshunt * 4);
 800173e:	4b20      	ldr	r3, [pc, #128]	@ (80017c0 <sendMSGS+0x100>)
 8001740:	881b      	ldrh	r3, [r3, #0]
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	b29b      	uxth	r3, r3
 8001746:	4619      	mov	r1, r3
 8001748:	481e      	ldr	r0, [pc, #120]	@ (80017c4 <sendMSGS+0x104>)
 800174a:	f000 fb0b 	bl	8001d64 <sendUsartMsg>
	sendUsartMsg("current ", 							current * 0.95);
 800174e:	4b1e      	ldr	r3, [pc, #120]	@ (80017c8 <sendMSGS+0x108>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	4618      	mov	r0, r3
 8001754:	f7fe fe56 	bl	8000404 <__aeabi_i2d>
 8001758:	a30b      	add	r3, pc, #44	@ (adr r3, 8001788 <sendMSGS+0xc8>)
 800175a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175e:	f7fe febb 	bl	80004d8 <__aeabi_dmul>
 8001762:	4602      	mov	r2, r0
 8001764:	460b      	mov	r3, r1
 8001766:	4610      	mov	r0, r2
 8001768:	4619      	mov	r1, r3
 800176a:	f7ff f98d 	bl	8000a88 <__aeabi_d2uiz>
 800176e:	4603      	mov	r3, r0
 8001770:	b29b      	uxth	r3, r3
 8001772:	4619      	mov	r1, r3
 8001774:	4815      	ldr	r0, [pc, #84]	@ (80017cc <sendMSGS+0x10c>)
 8001776:	f000 faf5 	bl	8001d64 <sendUsartMsg>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	f3af 8000 	nop.w
 8001788:	66666666 	.word	0x66666666
 800178c:	3fee6666 	.word	0x3fee6666
 8001790:	0800ab90 	.word	0x0800ab90
 8001794:	20000000 	.word	0x20000000
 8001798:	0800ab9c 	.word	0x0800ab9c
 800179c:	0800abb0 	.word	0x0800abb0
 80017a0:	0800abc4 	.word	0x0800abc4
 80017a4:	0800abd8 	.word	0x0800abd8
 80017a8:	20000334 	.word	0x20000334
 80017ac:	0800abec 	.word	0x0800abec
 80017b0:	20000336 	.word	0x20000336
 80017b4:	0800abf8 	.word	0x0800abf8
 80017b8:	20000340 	.word	0x20000340
 80017bc:	0800ac08 	.word	0x0800ac08
 80017c0:	20000342 	.word	0x20000342
 80017c4:	0800ac10 	.word	0x0800ac10
 80017c8:	20000344 	.word	0x20000344
 80017cc:	0800ac18 	.word	0x0800ac18

080017d0 <BMSlogic>:

void BMSlogic(){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	//reseteo el estatus register
    if(bq.BQ29330_status != 0){
 80017d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001850 <BMSlogic+0x80>)
 80017d6:	7c1b      	ldrb	r3, [r3, #16]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d00a      	beq.n	80017f2 <BMSlogic+0x22>
        BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL, 0x06);
 80017dc:	2106      	movs	r1, #6
 80017de:	2001      	movs	r0, #1
 80017e0:	f7ff fae0 	bl	8000da4 <BQ29330_WriteRegister>
        HAL_Delay(10);
 80017e4:	200a      	movs	r0, #10
 80017e6:	f000 fb6d 	bl	8001ec4 <HAL_Delay>
        BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL, 0x07);
 80017ea:	2107      	movs	r1, #7
 80017ec:	2001      	movs	r0, #1
 80017ee:	f7ff fad9 	bl	8000da4 <BQ29330_WriteRegister>
    }

    //cierro las llaves por OV o UV
    if(cell_mas - cell_menos < 6000/18){
 80017f2:	4b18      	ldr	r3, [pc, #96]	@ (8001854 <BMSlogic+0x84>)
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b17      	ldr	r3, [pc, #92]	@ (8001858 <BMSlogic+0x88>)
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	f5b3 7fa6 	cmp.w	r3, #332	@ 0x14c
 8001802:	dc0c      	bgt.n	800181e <BMSlogic+0x4e>
    	bq.BQ29330_output_countrol  &= ~(1U << 1);
 8001804:	4b12      	ldr	r3, [pc, #72]	@ (8001850 <BMSlogic+0x80>)
 8001806:	7c5b      	ldrb	r3, [r3, #17]
 8001808:	f023 0302 	bic.w	r3, r3, #2
 800180c:	b2da      	uxtb	r2, r3
 800180e:	4b10      	ldr	r3, [pc, #64]	@ (8001850 <BMSlogic+0x80>)
 8001810:	745a      	strb	r2, [r3, #17]
        BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL, bq.BQ29330_output_countrol);
 8001812:	4b0f      	ldr	r3, [pc, #60]	@ (8001850 <BMSlogic+0x80>)
 8001814:	7c5b      	ldrb	r3, [r3, #17]
 8001816:	4619      	mov	r1, r3
 8001818:	2001      	movs	r0, #1
 800181a:	f7ff fac3 	bl	8000da4 <BQ29330_WriteRegister>
    }

    if(cell_mas - cell_menos > 8400/18){
 800181e:	4b0d      	ldr	r3, [pc, #52]	@ (8001854 <BMSlogic+0x84>)
 8001820:	881b      	ldrh	r3, [r3, #0]
 8001822:	461a      	mov	r2, r3
 8001824:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <BMSlogic+0x88>)
 8001826:	881b      	ldrh	r3, [r3, #0]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f5b3 7fe9 	cmp.w	r3, #466	@ 0x1d2
 800182e:	dd0c      	ble.n	800184a <BMSlogic+0x7a>
    	bq.BQ29330_output_countrol &= ~(1U << 2);
 8001830:	4b07      	ldr	r3, [pc, #28]	@ (8001850 <BMSlogic+0x80>)
 8001832:	7c5b      	ldrb	r3, [r3, #17]
 8001834:	f023 0304 	bic.w	r3, r3, #4
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4b05      	ldr	r3, [pc, #20]	@ (8001850 <BMSlogic+0x80>)
 800183c:	745a      	strb	r2, [r3, #17]
        BQ29330_WriteRegister(BQ29330_OUTPUT_CONTROL, bq.BQ29330_output_countrol);
 800183e:	4b04      	ldr	r3, [pc, #16]	@ (8001850 <BMSlogic+0x80>)
 8001840:	7c5b      	ldrb	r3, [r3, #17]
 8001842:	4619      	mov	r1, r3
 8001844:	2001      	movs	r0, #1
 8001846:	f7ff faad 	bl	8000da4 <BQ29330_WriteRegister>
    }

}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000000 	.word	0x20000000
 8001854:	20000334 	.word	0x20000334
 8001858:	20000336 	.word	0x20000336

0800185c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001860:	b672      	cpsid	i
}
 8001862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001864:	bf00      	nop
 8001866:	e7fd      	b.n	8001864 <Error_Handler+0x8>

08001868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800186e:	4b27      	ldr	r3, [pc, #156]	@ (800190c <HAL_MspInit+0xa4>)
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	4a26      	ldr	r2, [pc, #152]	@ (800190c <HAL_MspInit+0xa4>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6193      	str	r3, [r2, #24]
 800187a:	4b24      	ldr	r3, [pc, #144]	@ (800190c <HAL_MspInit+0xa4>)
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	4b21      	ldr	r3, [pc, #132]	@ (800190c <HAL_MspInit+0xa4>)
 8001888:	69db      	ldr	r3, [r3, #28]
 800188a:	4a20      	ldr	r2, [pc, #128]	@ (800190c <HAL_MspInit+0xa4>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001890:	61d3      	str	r3, [r2, #28]
 8001892:	4b1e      	ldr	r3, [pc, #120]	@ (800190c <HAL_MspInit+0xa4>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 2, 0);
 800189e:	2200      	movs	r2, #0
 80018a0:	2102      	movs	r1, #2
 80018a2:	f06f 000b 	mvn.w	r0, #11
 80018a6:	f001 f89a 	bl	80029de <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	2102      	movs	r1, #2
 80018ae:	f06f 000a 	mvn.w	r0, #10
 80018b2:	f001 f894 	bl	80029de <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 2, 0);
 80018b6:	2200      	movs	r2, #0
 80018b8:	2102      	movs	r1, #2
 80018ba:	f06f 0009 	mvn.w	r0, #9
 80018be:	f001 f88e 	bl	80029de <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 2, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2102      	movs	r1, #2
 80018c6:	f06f 0004 	mvn.w	r0, #4
 80018ca:	f001 f888 	bl	80029de <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 2, 0);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2102      	movs	r1, #2
 80018d2:	f06f 0003 	mvn.w	r0, #3
 80018d6:	f001 f882 	bl	80029de <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 2, 0);
 80018da:	2200      	movs	r2, #0
 80018dc:	2102      	movs	r1, #2
 80018de:	f06f 0001 	mvn.w	r0, #1
 80018e2:	f001 f87c 	bl	80029de <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001910 <HAL_MspInit+0xa8>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	60fb      	str	r3, [r7, #12]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	4a04      	ldr	r2, [pc, #16]	@ (8001910 <HAL_MspInit+0xa8>)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000
 8001910:	40010000 	.word	0x40010000

08001914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <NMI_Handler+0x4>

0800191c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <HardFault_Handler+0x4>

08001924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <MemManage_Handler+0x4>

0800192c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <BusFault_Handler+0x4>

08001934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <UsageFault_Handler+0x4>

0800193c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	bc80      	pop	{r7}
 8001952:	4770      	bx	lr

08001954 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001964:	f000 fa92 	bl	8001e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}

0800196c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001970:	4802      	ldr	r0, [pc, #8]	@ (800197c <DMA1_Channel1_IRQHandler+0x10>)
 8001972:	f001 f925 	bl	8002bc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	2000023c 	.word	0x2000023c

08001980 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001984:	4802      	ldr	r0, [pc, #8]	@ (8001990 <ADC1_2_IRQHandler+0x10>)
 8001986:	f000 fc77 	bl	8002278 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	2000020c 	.word	0x2000020c

08001994 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return 1;
 8001998:	2301      	movs	r3, #1
}
 800199a:	4618      	mov	r0, r3
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr

080019a2 <_kill>:

int _kill(int pid, int sig)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019ac:	f006 fb72 	bl	8008094 <__errno>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2216      	movs	r2, #22
 80019b4:	601a      	str	r2, [r3, #0]
  return -1;
 80019b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <_exit>:

void _exit (int status)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019ca:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ffe7 	bl	80019a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019d4:	bf00      	nop
 80019d6:	e7fd      	b.n	80019d4 <_exit+0x12>

080019d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	60b9      	str	r1, [r7, #8]
 80019e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	e00a      	b.n	8001a00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019ea:	f3af 8000 	nop.w
 80019ee:	4601      	mov	r1, r0
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	1c5a      	adds	r2, r3, #1
 80019f4:	60ba      	str	r2, [r7, #8]
 80019f6:	b2ca      	uxtb	r2, r1
 80019f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	3301      	adds	r3, #1
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	dbf0      	blt.n	80019ea <_read+0x12>
  }

  return len;
 8001a08:	687b      	ldr	r3, [r7, #4]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b086      	sub	sp, #24
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	60b9      	str	r1, [r7, #8]
 8001a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	e009      	b.n	8001a38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	60ba      	str	r2, [r7, #8]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	3301      	adds	r3, #1
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbf1      	blt.n	8001a24 <_write+0x12>
  }
  return len;
 8001a40:	687b      	ldr	r3, [r7, #4]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3718      	adds	r7, #24
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <_close>:

int _close(int file)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b083      	sub	sp, #12
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr

08001a60 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a70:	605a      	str	r2, [r3, #4]
  return 0;
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bc80      	pop	{r7}
 8001a7c:	4770      	bx	lr

08001a7e <_isatty>:

int _isatty(int file)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b083      	sub	sp, #12
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a86:	2301      	movs	r3, #1
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b085      	sub	sp, #20
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	60f8      	str	r0, [r7, #12]
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
	...

08001aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab4:	4a14      	ldr	r2, [pc, #80]	@ (8001b08 <_sbrk+0x5c>)
 8001ab6:	4b15      	ldr	r3, [pc, #84]	@ (8001b0c <_sbrk+0x60>)
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ac0:	4b13      	ldr	r3, [pc, #76]	@ (8001b10 <_sbrk+0x64>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d102      	bne.n	8001ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <_sbrk+0x64>)
 8001aca:	4a12      	ldr	r2, [pc, #72]	@ (8001b14 <_sbrk+0x68>)
 8001acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ace:	4b10      	ldr	r3, [pc, #64]	@ (8001b10 <_sbrk+0x64>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d207      	bcs.n	8001aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001adc:	f006 fada 	bl	8008094 <__errno>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	220c      	movs	r2, #12
 8001ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ae6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aea:	e009      	b.n	8001b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aec:	4b08      	ldr	r3, [pc, #32]	@ (8001b10 <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001af2:	4b07      	ldr	r3, [pc, #28]	@ (8001b10 <_sbrk+0x64>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4413      	add	r3, r2
 8001afa:	4a05      	ldr	r2, [pc, #20]	@ (8001b10 <_sbrk+0x64>)
 8001afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001afe:	68fb      	ldr	r3, [r7, #12]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20005000 	.word	0x20005000
 8001b0c:	00000400 	.word	0x00000400
 8001b10:	20000348 	.word	0x20000348
 8001b14:	20000530 	.word	0x20000530

08001b18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b1c:	bf00      	nop
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	@ 0x28
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b2a:	f107 0320 	add.w	r3, r7, #32
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b34:	1d3b      	adds	r3, r7, #4
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	611a      	str	r2, [r3, #16]
 8001b42:	615a      	str	r2, [r3, #20]
 8001b44:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b46:	4b22      	ldr	r3, [pc, #136]	@ (8001bd0 <MX_TIM3_Init+0xac>)
 8001b48:	4a22      	ldr	r2, [pc, #136]	@ (8001bd4 <MX_TIM3_Init+0xb0>)
 8001b4a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b4c:	4b20      	ldr	r3, [pc, #128]	@ (8001bd0 <MX_TIM3_Init+0xac>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b52:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd0 <MX_TIM3_Init+0xac>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 490;
 8001b58:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd0 <MX_TIM3_Init+0xac>)
 8001b5a:	f44f 72f5 	mov.w	r2, #490	@ 0x1ea
 8001b5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b60:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd0 <MX_TIM3_Init+0xac>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b66:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd0 <MX_TIM3_Init+0xac>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b6c:	4818      	ldr	r0, [pc, #96]	@ (8001bd0 <MX_TIM3_Init+0xac>)
 8001b6e:	f003 fe25 	bl	80057bc <HAL_TIM_PWM_Init>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001b78:	f7ff fe70 	bl	800185c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b84:	f107 0320 	add.w	r3, r7, #32
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4811      	ldr	r0, [pc, #68]	@ (8001bd0 <MX_TIM3_Init+0xac>)
 8001b8c:	f004 f9e4 	bl	8005f58 <HAL_TIMEx_MasterConfigSynchronization>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001b96:	f7ff fe61 	bl	800185c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b9a:	2360      	movs	r3, #96	@ 0x60
 8001b9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	220c      	movs	r2, #12
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4807      	ldr	r0, [pc, #28]	@ (8001bd0 <MX_TIM3_Init+0xac>)
 8001bb2:	f003 fef5 	bl	80059a0 <HAL_TIM_PWM_ConfigChannel>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001bbc:	f7ff fe4e 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001bc0:	4803      	ldr	r0, [pc, #12]	@ (8001bd0 <MX_TIM3_Init+0xac>)
 8001bc2:	f000 f827 	bl	8001c14 <HAL_TIM_MspPostInit>

}
 8001bc6:	bf00      	nop
 8001bc8:	3728      	adds	r7, #40	@ 0x28
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	2000034c 	.word	0x2000034c
 8001bd4:	40000400 	.word	0x40000400

08001bd8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a09      	ldr	r2, [pc, #36]	@ (8001c0c <HAL_TIM_PWM_MspInit+0x34>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d10b      	bne.n	8001c02 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bea:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <HAL_TIM_PWM_MspInit+0x38>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	4a08      	ldr	r2, [pc, #32]	@ (8001c10 <HAL_TIM_PWM_MspInit+0x38>)
 8001bf0:	f043 0302 	orr.w	r3, r3, #2
 8001bf4:	61d3      	str	r3, [r2, #28]
 8001bf6:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <HAL_TIM_PWM_MspInit+0x38>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bc80      	pop	{r7}
 8001c0a:	4770      	bx	lr
 8001c0c:	40000400 	.word	0x40000400
 8001c10:	40021000 	.word	0x40021000

08001c14 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 0310 	add.w	r3, r7, #16
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a0f      	ldr	r2, [pc, #60]	@ (8001c6c <HAL_TIM_MspPostInit+0x58>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d117      	bne.n	8001c64 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c34:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <HAL_TIM_MspPostInit+0x5c>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	4a0d      	ldr	r2, [pc, #52]	@ (8001c70 <HAL_TIM_MspPostInit+0x5c>)
 8001c3a:	f043 0308 	orr.w	r3, r3, #8
 8001c3e:	6193      	str	r3, [r2, #24]
 8001c40:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <HAL_TIM_MspPostInit+0x5c>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c50:	2302      	movs	r3, #2
 8001c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c54:	2302      	movs	r3, #2
 8001c56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c58:	f107 0310 	add.w	r3, r7, #16
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4805      	ldr	r0, [pc, #20]	@ (8001c74 <HAL_TIM_MspPostInit+0x60>)
 8001c60:	f001 f8e2 	bl	8002e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c64:	bf00      	nop
 8001c66:	3720      	adds	r7, #32
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40000400 	.word	0x40000400
 8001c70:	40021000 	.word	0x40021000
 8001c74:	40010c00 	.word	0x40010c00

08001c78 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001c7e:	4a12      	ldr	r2, [pc, #72]	@ (8001cc8 <MX_USART1_UART_Init+0x50>)
 8001c80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001c82:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001c84:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001c88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c96:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca2:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cae:	4805      	ldr	r0, [pc, #20]	@ (8001cc4 <MX_USART1_UART_Init+0x4c>)
 8001cb0:	f004 f9b0 	bl	8006014 <HAL_UART_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cba:	f7ff fdcf 	bl	800185c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000394 	.word	0x20000394
 8001cc8:	40013800 	.word	0x40013800

08001ccc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd4:	f107 0310 	add.w	r3, r7, #16
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]
 8001cde:	609a      	str	r2, [r3, #8]
 8001ce0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a1c      	ldr	r2, [pc, #112]	@ (8001d58 <HAL_UART_MspInit+0x8c>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d131      	bne.n	8001d50 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cec:	4b1b      	ldr	r3, [pc, #108]	@ (8001d5c <HAL_UART_MspInit+0x90>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8001d5c <HAL_UART_MspInit+0x90>)
 8001cf2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cf6:	6193      	str	r3, [r2, #24]
 8001cf8:	4b18      	ldr	r3, [pc, #96]	@ (8001d5c <HAL_UART_MspInit+0x90>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d04:	4b15      	ldr	r3, [pc, #84]	@ (8001d5c <HAL_UART_MspInit+0x90>)
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	4a14      	ldr	r2, [pc, #80]	@ (8001d5c <HAL_UART_MspInit+0x90>)
 8001d0a:	f043 0304 	orr.w	r3, r3, #4
 8001d0e:	6193      	str	r3, [r2, #24]
 8001d10:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <HAL_UART_MspInit+0x90>)
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d26:	2303      	movs	r3, #3
 8001d28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2a:	f107 0310 	add.w	r3, r7, #16
 8001d2e:	4619      	mov	r1, r3
 8001d30:	480b      	ldr	r0, [pc, #44]	@ (8001d60 <HAL_UART_MspInit+0x94>)
 8001d32:	f001 f879 	bl	8002e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d44:	f107 0310 	add.w	r3, r7, #16
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4805      	ldr	r0, [pc, #20]	@ (8001d60 <HAL_UART_MspInit+0x94>)
 8001d4c:	f001 f86c 	bl	8002e28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001d50:	bf00      	nop
 8001d52:	3720      	adds	r7, #32
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40013800 	.word	0x40013800
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40010800 	.word	0x40010800

08001d64 <sendUsartMsg>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void sendUsartMsg(const char* label, uint16_t value) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b094      	sub	sp, #80	@ 0x50
 8001d68:	af02      	add	r7, sp, #8
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	807b      	strh	r3, [r7, #2]
    char buffer[BUFFER_SIZE];
    snprintf(buffer, BUFFER_SIZE, "%s %u \n", label, value);
 8001d70:	887b      	ldrh	r3, [r7, #2]
 8001d72:	f107 0008 	add.w	r0, r7, #8
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8001dac <sendUsartMsg+0x48>)
 8001d7c:	2140      	movs	r1, #64	@ 0x40
 8001d7e:	f005 f9d9 	bl	8007134 <sniprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001d82:	f107 0308 	add.w	r3, r7, #8
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe f9e2 	bl	8000150 <strlen>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	b29a      	uxth	r2, r3
 8001d90:	f107 0108 	add.w	r1, r7, #8
 8001d94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d98:	4805      	ldr	r0, [pc, #20]	@ (8001db0 <sendUsartMsg+0x4c>)
 8001d9a:	f004 f98b 	bl	80060b4 <HAL_UART_Transmit>
    HAL_Delay(10);
 8001d9e:	200a      	movs	r0, #10
 8001da0:	f000 f890 	bl	8001ec4 <HAL_Delay>
}
 8001da4:	bf00      	nop
 8001da6:	3748      	adds	r7, #72	@ 0x48
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	0800ac24 	.word	0x0800ac24
 8001db0:	20000394 	.word	0x20000394

08001db4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001db4:	f7ff feb0 	bl	8001b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001db8:	480b      	ldr	r0, [pc, #44]	@ (8001de8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001dba:	490c      	ldr	r1, [pc, #48]	@ (8001dec <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001dbc:	4a0c      	ldr	r2, [pc, #48]	@ (8001df0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001dbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dc0:	e002      	b.n	8001dc8 <LoopCopyDataInit>

08001dc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dc6:	3304      	adds	r3, #4

08001dc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dcc:	d3f9      	bcc.n	8001dc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dce:	4a09      	ldr	r2, [pc, #36]	@ (8001df4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001dd0:	4c09      	ldr	r4, [pc, #36]	@ (8001df8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dd4:	e001      	b.n	8001dda <LoopFillZerobss>

08001dd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd8:	3204      	adds	r2, #4

08001dda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ddc:	d3fb      	bcc.n	8001dd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dde:	f006 f95f 	bl	80080a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001de2:	f7ff fa89 	bl	80012f8 <main>
  bx lr
 8001de6:	4770      	bx	lr
  ldr r0, =_sdata
 8001de8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dec:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001df0:	0800b094 	.word	0x0800b094
  ldr r2, =_sbss
 8001df4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001df8:	2000052c 	.word	0x2000052c

08001dfc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dfc:	e7fe      	b.n	8001dfc <CAN1_RX1_IRQHandler>
	...

08001e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e04:	4b08      	ldr	r3, [pc, #32]	@ (8001e28 <HAL_Init+0x28>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a07      	ldr	r2, [pc, #28]	@ (8001e28 <HAL_Init+0x28>)
 8001e0a:	f043 0310 	orr.w	r3, r3, #16
 8001e0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e10:	2003      	movs	r0, #3
 8001e12:	f000 fdd9 	bl	80029c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e16:	200f      	movs	r0, #15
 8001e18:	f000 f808 	bl	8001e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e1c:	f7ff fd24 	bl	8001868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40022000 	.word	0x40022000

08001e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e34:	4b12      	ldr	r3, [pc, #72]	@ (8001e80 <HAL_InitTick+0x54>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b12      	ldr	r3, [pc, #72]	@ (8001e84 <HAL_InitTick+0x58>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 fdf1 	bl	8002a32 <HAL_SYSTICK_Config>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e00e      	b.n	8001e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b0f      	cmp	r3, #15
 8001e5e:	d80a      	bhi.n	8001e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e60:	2200      	movs	r2, #0
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e68:	f000 fdb9 	bl	80029de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e6c:	4a06      	ldr	r2, [pc, #24]	@ (8001e88 <HAL_InitTick+0x5c>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	e000      	b.n	8001e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	2000001c 	.word	0x2000001c
 8001e84:	20000024 	.word	0x20000024
 8001e88:	20000020 	.word	0x20000020

08001e8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e90:	4b05      	ldr	r3, [pc, #20]	@ (8001ea8 <HAL_IncTick+0x1c>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <HAL_IncTick+0x20>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	4a03      	ldr	r2, [pc, #12]	@ (8001eac <HAL_IncTick+0x20>)
 8001e9e:	6013      	str	r3, [r2, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	20000024 	.word	0x20000024
 8001eac:	200003dc 	.word	0x200003dc

08001eb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb4:	4b02      	ldr	r3, [pc, #8]	@ (8001ec0 <HAL_GetTick+0x10>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	200003dc 	.word	0x200003dc

08001ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ecc:	f7ff fff0 	bl	8001eb0 <HAL_GetTick>
 8001ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001edc:	d005      	beq.n	8001eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ede:	4b0a      	ldr	r3, [pc, #40]	@ (8001f08 <HAL_Delay+0x44>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eea:	bf00      	nop
 8001eec:	f7ff ffe0 	bl	8001eb0 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d8f7      	bhi.n	8001eec <HAL_Delay+0x28>
  {
  }
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20000024 	.word	0x20000024

08001f0c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e0be      	b.n	80020ac <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d109      	bne.n	8001f50 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7fe fe90 	bl	8000c70 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 fbbd 	bl	80026d0 <ADC_ConversionStop_Disable>
 8001f56:	4603      	mov	r3, r0
 8001f58:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5e:	f003 0310 	and.w	r3, r3, #16
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f040 8099 	bne.w	800209a <HAL_ADC_Init+0x18e>
 8001f68:	7dfb      	ldrb	r3, [r7, #23]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	f040 8095 	bne.w	800209a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f74:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f78:	f023 0302 	bic.w	r3, r3, #2
 8001f7c:	f043 0202 	orr.w	r2, r3, #2
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f8c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	7b1b      	ldrb	r3, [r3, #12]
 8001f92:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001f94:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001f96:	68ba      	ldr	r2, [r7, #8]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fa4:	d003      	beq.n	8001fae <HAL_ADC_Init+0xa2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d102      	bne.n	8001fb4 <HAL_ADC_Init+0xa8>
 8001fae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fb2:	e000      	b.n	8001fb6 <HAL_ADC_Init+0xaa>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	693a      	ldr	r2, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	7d1b      	ldrb	r3, [r3, #20]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d119      	bne.n	8001ff8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	7b1b      	ldrb	r3, [r3, #12]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d109      	bne.n	8001fe0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	3b01      	subs	r3, #1
 8001fd2:	035a      	lsls	r2, r3, #13
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	e00b      	b.n	8001ff8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe4:	f043 0220 	orr.w	r2, r3, #32
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff0:	f043 0201 	orr.w	r2, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	430a      	orrs	r2, r1
 800200a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689a      	ldr	r2, [r3, #8]
 8002012:	4b28      	ldr	r3, [pc, #160]	@ (80020b4 <HAL_ADC_Init+0x1a8>)
 8002014:	4013      	ands	r3, r2
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6812      	ldr	r2, [r2, #0]
 800201a:	68b9      	ldr	r1, [r7, #8]
 800201c:	430b      	orrs	r3, r1
 800201e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002028:	d003      	beq.n	8002032 <HAL_ADC_Init+0x126>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	689b      	ldr	r3, [r3, #8]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d104      	bne.n	800203c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	3b01      	subs	r3, #1
 8002038:	051b      	lsls	r3, r3, #20
 800203a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002042:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	430a      	orrs	r2, r1
 800204e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	689a      	ldr	r2, [r3, #8]
 8002056:	4b18      	ldr	r3, [pc, #96]	@ (80020b8 <HAL_ADC_Init+0x1ac>)
 8002058:	4013      	ands	r3, r2
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	429a      	cmp	r2, r3
 800205e:	d10b      	bne.n	8002078 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800206a:	f023 0303 	bic.w	r3, r3, #3
 800206e:	f043 0201 	orr.w	r2, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002076:	e018      	b.n	80020aa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800207c:	f023 0312 	bic.w	r3, r3, #18
 8002080:	f043 0210 	orr.w	r2, r3, #16
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208c:	f043 0201 	orr.w	r2, r3, #1
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002098:	e007      	b.n	80020aa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209e:	f043 0210 	orr.w	r2, r3, #16
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80020aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3718      	adds	r7, #24
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	ffe1f7fd 	.word	0xffe1f7fd
 80020b8:	ff1f0efe 	.word	0xff1f0efe

080020bc <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b086      	sub	sp, #24
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a64      	ldr	r2, [pc, #400]	@ (8002264 <HAL_ADC_Start_DMA+0x1a8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d004      	beq.n	80020e0 <HAL_ADC_Start_DMA+0x24>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a63      	ldr	r2, [pc, #396]	@ (8002268 <HAL_ADC_Start_DMA+0x1ac>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d106      	bne.n	80020ee <HAL_ADC_Start_DMA+0x32>
 80020e0:	4b60      	ldr	r3, [pc, #384]	@ (8002264 <HAL_ADC_Start_DMA+0x1a8>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f040 80b3 	bne.w	8002254 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <HAL_ADC_Start_DMA+0x40>
 80020f8:	2302      	movs	r3, #2
 80020fa:	e0ae      	b.n	800225a <HAL_ADC_Start_DMA+0x19e>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f000 fa89 	bl	800261c <ADC_Enable>
 800210a:	4603      	mov	r3, r0
 800210c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800210e:	7dfb      	ldrb	r3, [r7, #23]
 8002110:	2b00      	cmp	r3, #0
 8002112:	f040 809a 	bne.w	800224a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800211a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800211e:	f023 0301 	bic.w	r3, r3, #1
 8002122:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a4e      	ldr	r2, [pc, #312]	@ (8002268 <HAL_ADC_Start_DMA+0x1ac>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d105      	bne.n	8002140 <HAL_ADC_Start_DMA+0x84>
 8002134:	4b4b      	ldr	r3, [pc, #300]	@ (8002264 <HAL_ADC_Start_DMA+0x1a8>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d115      	bne.n	800216c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002144:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002156:	2b00      	cmp	r3, #0
 8002158:	d026      	beq.n	80021a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002162:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800216a:	e01d      	b.n	80021a8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002170:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a39      	ldr	r2, [pc, #228]	@ (8002264 <HAL_ADC_Start_DMA+0x1a8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d004      	beq.n	800218c <HAL_ADC_Start_DMA+0xd0>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a38      	ldr	r2, [pc, #224]	@ (8002268 <HAL_ADC_Start_DMA+0x1ac>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d10d      	bne.n	80021a8 <HAL_ADC_Start_DMA+0xec>
 800218c:	4b35      	ldr	r3, [pc, #212]	@ (8002264 <HAL_ADC_Start_DMA+0x1a8>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002194:	2b00      	cmp	r3, #0
 8002196:	d007      	beq.n	80021a8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d006      	beq.n	80021c2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b8:	f023 0206 	bic.w	r2, r3, #6
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021c0:	e002      	b.n	80021c8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	4a25      	ldr	r2, [pc, #148]	@ (800226c <HAL_ADC_Start_DMA+0x1b0>)
 80021d6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	4a24      	ldr	r2, [pc, #144]	@ (8002270 <HAL_ADC_Start_DMA+0x1b4>)
 80021de:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	4a23      	ldr	r2, [pc, #140]	@ (8002274 <HAL_ADC_Start_DMA+0x1b8>)
 80021e6:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f06f 0202 	mvn.w	r2, #2
 80021f0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689a      	ldr	r2, [r3, #8]
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002200:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6a18      	ldr	r0, [r3, #32]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	334c      	adds	r3, #76	@ 0x4c
 800220c:	4619      	mov	r1, r3
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f000 fc75 	bl	8002b00 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002220:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002224:	d108      	bne.n	8002238 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8002234:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002236:	e00f      	b.n	8002258 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8002246:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8002248:	e006      	b.n	8002258 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8002252:	e001      	b.n	8002258 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002258:	7dfb      	ldrb	r3, [r7, #23]
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40012400 	.word	0x40012400
 8002268:	40012800 	.word	0x40012800
 800226c:	08002753 	.word	0x08002753
 8002270:	080027cf 	.word	0x080027cf
 8002274:	080027eb 	.word	0x080027eb

08002278 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f003 0320 	and.w	r3, r3, #32
 8002296:	2b00      	cmp	r3, #0
 8002298:	d03e      	beq.n	8002318 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d039      	beq.n	8002318 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022a8:	f003 0310 	and.w	r3, r3, #16
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d105      	bne.n	80022bc <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022b4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80022c6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80022ca:	d11d      	bne.n	8002308 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d119      	bne.n	8002308 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685a      	ldr	r2, [r3, #4]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0220 	bic.w	r2, r2, #32
 80022e2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d105      	bne.n	8002308 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002300:	f043 0201 	orr.w	r2, r3, #1
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7fe ffe7 	bl	80012dc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f06f 0212 	mvn.w	r2, #18
 8002316:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800231e:	2b00      	cmp	r3, #0
 8002320:	d04d      	beq.n	80023be <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	2b00      	cmp	r3, #0
 800232a:	d048      	beq.n	80023be <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b00      	cmp	r3, #0
 8002336:	d105      	bne.n	8002344 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800233c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800234e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002352:	d012      	beq.n	800237a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800235e:	2b00      	cmp	r3, #0
 8002360:	d125      	bne.n	80023ae <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800236c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002370:	d11d      	bne.n	80023ae <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8002376:	2b00      	cmp	r3, #0
 8002378:	d119      	bne.n	80023ae <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002388:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d105      	bne.n	80023ae <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a6:	f043 0201 	orr.w	r2, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 fa35 	bl	800281e <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f06f 020c 	mvn.w	r2, #12
 80023bc:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d012      	beq.n	80023ee <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00d      	beq.n	80023ee <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023d6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f000 f812 	bl	8002408 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0201 	mvn.w	r2, #1
 80023ec:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr

0800241a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800243a:	2300      	movs	r3, #0
 800243c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_ADC_ConfigChannel+0x20>
 8002448:	2302      	movs	r3, #2
 800244a:	e0dc      	b.n	8002606 <HAL_ADC_ConfigChannel+0x1da>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b06      	cmp	r3, #6
 800245a:	d81c      	bhi.n	8002496 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	4613      	mov	r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	4413      	add	r3, r2
 800246c:	3b05      	subs	r3, #5
 800246e:	221f      	movs	r2, #31
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	4019      	ands	r1, r3
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	6818      	ldr	r0, [r3, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	3b05      	subs	r3, #5
 8002488:	fa00 f203 	lsl.w	r2, r0, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	635a      	str	r2, [r3, #52]	@ 0x34
 8002494:	e03c      	b.n	8002510 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b0c      	cmp	r3, #12
 800249c:	d81c      	bhi.n	80024d8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4413      	add	r3, r2
 80024ae:	3b23      	subs	r3, #35	@ 0x23
 80024b0:	221f      	movs	r2, #31
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	4019      	ands	r1, r3
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	3b23      	subs	r3, #35	@ 0x23
 80024ca:	fa00 f203 	lsl.w	r2, r0, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	430a      	orrs	r2, r1
 80024d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80024d6:	e01b      	b.n	8002510 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	4613      	mov	r3, r2
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	4413      	add	r3, r2
 80024e8:	3b41      	subs	r3, #65	@ 0x41
 80024ea:	221f      	movs	r2, #31
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	43db      	mvns	r3, r3
 80024f2:	4019      	ands	r1, r3
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	6818      	ldr	r0, [r3, #0]
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	3b41      	subs	r3, #65	@ 0x41
 8002504:	fa00 f203 	lsl.w	r2, r0, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	430a      	orrs	r2, r1
 800250e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b09      	cmp	r3, #9
 8002516:	d91c      	bls.n	8002552 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68d9      	ldr	r1, [r3, #12]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	4613      	mov	r3, r2
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	4413      	add	r3, r2
 8002528:	3b1e      	subs	r3, #30
 800252a:	2207      	movs	r2, #7
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	43db      	mvns	r3, r3
 8002532:	4019      	ands	r1, r3
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	6898      	ldr	r0, [r3, #8]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	4613      	mov	r3, r2
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	4413      	add	r3, r2
 8002542:	3b1e      	subs	r3, #30
 8002544:	fa00 f203 	lsl.w	r2, r0, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	60da      	str	r2, [r3, #12]
 8002550:	e019      	b.n	8002586 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6919      	ldr	r1, [r3, #16]
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4613      	mov	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	4413      	add	r3, r2
 8002562:	2207      	movs	r2, #7
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43db      	mvns	r3, r3
 800256a:	4019      	ands	r1, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	6898      	ldr	r0, [r3, #8]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4613      	mov	r3, r2
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4413      	add	r3, r2
 800257a:	fa00 f203 	lsl.w	r2, r0, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	430a      	orrs	r2, r1
 8002584:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b10      	cmp	r3, #16
 800258c:	d003      	beq.n	8002596 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002592:	2b11      	cmp	r3, #17
 8002594:	d132      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a1d      	ldr	r2, [pc, #116]	@ (8002610 <HAL_ADC_ConfigChannel+0x1e4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d125      	bne.n	80025ec <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d126      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80025bc:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2b10      	cmp	r3, #16
 80025c4:	d11a      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80025c6:	4b13      	ldr	r3, [pc, #76]	@ (8002614 <HAL_ADC_ConfigChannel+0x1e8>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a13      	ldr	r2, [pc, #76]	@ (8002618 <HAL_ADC_ConfigChannel+0x1ec>)
 80025cc:	fba2 2303 	umull	r2, r3, r2, r3
 80025d0:	0c9a      	lsrs	r2, r3, #18
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025dc:	e002      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	3b01      	subs	r3, #1
 80025e2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f9      	bne.n	80025de <HAL_ADC_ConfigChannel+0x1b2>
 80025ea:	e007      	b.n	80025fc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f0:	f043 0220 	orr.w	r2, r3, #32
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002604:	7bfb      	ldrb	r3, [r7, #15]
}
 8002606:	4618      	mov	r0, r3
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	bc80      	pop	{r7}
 800260e:	4770      	bx	lr
 8002610:	40012400 	.word	0x40012400
 8002614:	2000001c 	.word	0x2000001c
 8002618:	431bde83 	.word	0x431bde83

0800261c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b01      	cmp	r3, #1
 8002638:	d040      	beq.n	80026bc <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f042 0201 	orr.w	r2, r2, #1
 8002648:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800264a:	4b1f      	ldr	r3, [pc, #124]	@ (80026c8 <ADC_Enable+0xac>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a1f      	ldr	r2, [pc, #124]	@ (80026cc <ADC_Enable+0xb0>)
 8002650:	fba2 2303 	umull	r2, r3, r2, r3
 8002654:	0c9b      	lsrs	r3, r3, #18
 8002656:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002658:	e002      	b.n	8002660 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	3b01      	subs	r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f9      	bne.n	800265a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002666:	f7ff fc23 	bl	8001eb0 <HAL_GetTick>
 800266a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800266c:	e01f      	b.n	80026ae <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800266e:	f7ff fc1f 	bl	8001eb0 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d918      	bls.n	80026ae <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b01      	cmp	r3, #1
 8002688:	d011      	beq.n	80026ae <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800268e:	f043 0210 	orr.w	r2, r3, #16
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800269a:	f043 0201 	orr.w	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e007      	b.n	80026be <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d1d8      	bne.n	800266e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	2000001c 	.word	0x2000001c
 80026cc:	431bde83 	.word	0x431bde83

080026d0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d12e      	bne.n	8002748 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0201 	bic.w	r2, r2, #1
 80026f8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026fa:	f7ff fbd9 	bl	8001eb0 <HAL_GetTick>
 80026fe:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002700:	e01b      	b.n	800273a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002702:	f7ff fbd5 	bl	8001eb0 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d914      	bls.n	800273a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 0301 	and.w	r3, r3, #1
 800271a:	2b01      	cmp	r3, #1
 800271c:	d10d      	bne.n	800273a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002722:	f043 0210 	orr.w	r2, r3, #16
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272e:	f043 0201 	orr.w	r2, r3, #1
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e007      	b.n	800274a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b01      	cmp	r3, #1
 8002746:	d0dc      	beq.n	8002702 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3710      	adds	r7, #16
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b084      	sub	sp, #16
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002764:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002768:	2b00      	cmp	r3, #0
 800276a:	d127      	bne.n	80027bc <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002770:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002782:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002786:	d115      	bne.n	80027b4 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800278c:	2b00      	cmp	r3, #0
 800278e:	d111      	bne.n	80027b4 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002794:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d105      	bne.n	80027b4 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ac:	f043 0201 	orr.w	r2, r3, #1
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f7fe fd91 	bl	80012dc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80027ba:	e004      	b.n	80027c6 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	4798      	blx	r3
}
 80027c6:	bf00      	nop
 80027c8:	3710      	adds	r7, #16
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027da:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f7ff fe0a 	bl	80023f6 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80027e2:	bf00      	nop
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b084      	sub	sp, #16
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027f6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002808:	f043 0204 	orr.w	r2, r3, #4
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f7ff fe02 	bl	800241a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr

08002830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002830:	b480      	push	{r7}
 8002832:	b085      	sub	sp, #20
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002840:	4b0c      	ldr	r3, [pc, #48]	@ (8002874 <__NVIC_SetPriorityGrouping+0x44>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002846:	68ba      	ldr	r2, [r7, #8]
 8002848:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800284c:	4013      	ands	r3, r2
 800284e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002858:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800285c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002862:	4a04      	ldr	r2, [pc, #16]	@ (8002874 <__NVIC_SetPriorityGrouping+0x44>)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	60d3      	str	r3, [r2, #12]
}
 8002868:	bf00      	nop
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	bc80      	pop	{r7}
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	e000ed00 	.word	0xe000ed00

08002878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800287c:	4b04      	ldr	r3, [pc, #16]	@ (8002890 <__NVIC_GetPriorityGrouping+0x18>)
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	0a1b      	lsrs	r3, r3, #8
 8002882:	f003 0307 	and.w	r3, r3, #7
}
 8002886:	4618      	mov	r0, r3
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	4603      	mov	r3, r0
 800289c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800289e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	db0b      	blt.n	80028be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028a6:	79fb      	ldrb	r3, [r7, #7]
 80028a8:	f003 021f 	and.w	r2, r3, #31
 80028ac:	4906      	ldr	r1, [pc, #24]	@ (80028c8 <__NVIC_EnableIRQ+0x34>)
 80028ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	2001      	movs	r0, #1
 80028b6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bc80      	pop	{r7}
 80028c6:	4770      	bx	lr
 80028c8:	e000e100 	.word	0xe000e100

080028cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	6039      	str	r1, [r7, #0]
 80028d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	db0a      	blt.n	80028f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	490c      	ldr	r1, [pc, #48]	@ (8002918 <__NVIC_SetPriority+0x4c>)
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	0112      	lsls	r2, r2, #4
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	440b      	add	r3, r1
 80028f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028f4:	e00a      	b.n	800290c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	4908      	ldr	r1, [pc, #32]	@ (800291c <__NVIC_SetPriority+0x50>)
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	3b04      	subs	r3, #4
 8002904:	0112      	lsls	r2, r2, #4
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	440b      	add	r3, r1
 800290a:	761a      	strb	r2, [r3, #24]
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	e000e100 	.word	0xe000e100
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002920:	b480      	push	{r7}
 8002922:	b089      	sub	sp, #36	@ 0x24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f1c3 0307 	rsb	r3, r3, #7
 800293a:	2b04      	cmp	r3, #4
 800293c:	bf28      	it	cs
 800293e:	2304      	movcs	r3, #4
 8002940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3304      	adds	r3, #4
 8002946:	2b06      	cmp	r3, #6
 8002948:	d902      	bls.n	8002950 <NVIC_EncodePriority+0x30>
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3b03      	subs	r3, #3
 800294e:	e000      	b.n	8002952 <NVIC_EncodePriority+0x32>
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43da      	mvns	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	401a      	ands	r2, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002968:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	43d9      	mvns	r1, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002978:	4313      	orrs	r3, r2
         );
}
 800297a:	4618      	mov	r0, r3
 800297c:	3724      	adds	r7, #36	@ 0x24
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr

08002984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3b01      	subs	r3, #1
 8002990:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002994:	d301      	bcc.n	800299a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002996:	2301      	movs	r3, #1
 8002998:	e00f      	b.n	80029ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800299a:	4a0a      	ldr	r2, [pc, #40]	@ (80029c4 <SysTick_Config+0x40>)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3b01      	subs	r3, #1
 80029a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029a2:	210f      	movs	r1, #15
 80029a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80029a8:	f7ff ff90 	bl	80028cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029ac:	4b05      	ldr	r3, [pc, #20]	@ (80029c4 <SysTick_Config+0x40>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029b2:	4b04      	ldr	r3, [pc, #16]	@ (80029c4 <SysTick_Config+0x40>)
 80029b4:	2207      	movs	r2, #7
 80029b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
 80029c2:	bf00      	nop
 80029c4:	e000e010 	.word	0xe000e010

080029c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7ff ff2d 	bl	8002830 <__NVIC_SetPriorityGrouping>
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029de:	b580      	push	{r7, lr}
 80029e0:	b086      	sub	sp, #24
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	4603      	mov	r3, r0
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
 80029ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029ec:	2300      	movs	r3, #0
 80029ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029f0:	f7ff ff42 	bl	8002878 <__NVIC_GetPriorityGrouping>
 80029f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	68b9      	ldr	r1, [r7, #8]
 80029fa:	6978      	ldr	r0, [r7, #20]
 80029fc:	f7ff ff90 	bl	8002920 <NVIC_EncodePriority>
 8002a00:	4602      	mov	r2, r0
 8002a02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a06:	4611      	mov	r1, r2
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff5f 	bl	80028cc <__NVIC_SetPriority>
}
 8002a0e:	bf00      	nop
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a16:	b580      	push	{r7, lr}
 8002a18:	b082      	sub	sp, #8
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff35 	bl	8002894 <__NVIC_EnableIRQ>
}
 8002a2a:	bf00      	nop
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7ff ffa2 	bl	8002984 <SysTick_Config>
 8002a40:	4603      	mov	r3, r0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a54:	2300      	movs	r3, #0
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e043      	b.n	8002aea <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	4b22      	ldr	r3, [pc, #136]	@ (8002af4 <HAL_DMA_Init+0xa8>)
 8002a6a:	4413      	add	r3, r2
 8002a6c:	4a22      	ldr	r2, [pc, #136]	@ (8002af8 <HAL_DMA_Init+0xac>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	091b      	lsrs	r3, r3, #4
 8002a74:	009a      	lsls	r2, r3, #2
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8002afc <HAL_DMA_Init+0xb0>)
 8002a7e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002a96:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002a9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002aa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	695b      	ldr	r3, [r3, #20]
 8002ab6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002abc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	69db      	ldr	r3, [r3, #28]
 8002ac2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	68fa      	ldr	r2, [r7, #12]
 8002ad0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3714      	adds	r7, #20
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bc80      	pop	{r7}
 8002af2:	4770      	bx	lr
 8002af4:	bffdfff8 	.word	0xbffdfff8
 8002af8:	cccccccd 	.word	0xcccccccd
 8002afc:	40020000 	.word	0x40020000

08002b00 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
 8002b0c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <HAL_DMA_Start_IT+0x20>
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	e04b      	b.n	8002bb8 <HAL_DMA_Start_IT+0xb8>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d13a      	bne.n	8002baa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2202      	movs	r2, #2
 8002b38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0201 	bic.w	r2, r2, #1
 8002b50:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	68f8      	ldr	r0, [r7, #12]
 8002b5a:	f000 f937 	bl	8002dcc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d008      	beq.n	8002b78 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f042 020e 	orr.w	r2, r2, #14
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	e00f      	b.n	8002b98 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0204 	bic.w	r2, r2, #4
 8002b86:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 020a 	orr.w	r2, r2, #10
 8002b96:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]
 8002ba8:	e005      	b.n	8002bb6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bdc:	2204      	movs	r2, #4
 8002bde:	409a      	lsls	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4013      	ands	r3, r2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d04f      	beq.n	8002c88 <HAL_DMA_IRQHandler+0xc8>
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	f003 0304 	and.w	r3, r3, #4
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d04a      	beq.n	8002c88 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0320 	and.w	r3, r3, #32
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d107      	bne.n	8002c10 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0204 	bic.w	r2, r2, #4
 8002c0e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a66      	ldr	r2, [pc, #408]	@ (8002db0 <HAL_DMA_IRQHandler+0x1f0>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d029      	beq.n	8002c6e <HAL_DMA_IRQHandler+0xae>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a65      	ldr	r2, [pc, #404]	@ (8002db4 <HAL_DMA_IRQHandler+0x1f4>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d022      	beq.n	8002c6a <HAL_DMA_IRQHandler+0xaa>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a63      	ldr	r2, [pc, #396]	@ (8002db8 <HAL_DMA_IRQHandler+0x1f8>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d01a      	beq.n	8002c64 <HAL_DMA_IRQHandler+0xa4>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a62      	ldr	r2, [pc, #392]	@ (8002dbc <HAL_DMA_IRQHandler+0x1fc>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d012      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x9e>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a60      	ldr	r2, [pc, #384]	@ (8002dc0 <HAL_DMA_IRQHandler+0x200>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d00a      	beq.n	8002c58 <HAL_DMA_IRQHandler+0x98>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a5f      	ldr	r2, [pc, #380]	@ (8002dc4 <HAL_DMA_IRQHandler+0x204>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d102      	bne.n	8002c52 <HAL_DMA_IRQHandler+0x92>
 8002c4c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002c50:	e00e      	b.n	8002c70 <HAL_DMA_IRQHandler+0xb0>
 8002c52:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002c56:	e00b      	b.n	8002c70 <HAL_DMA_IRQHandler+0xb0>
 8002c58:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002c5c:	e008      	b.n	8002c70 <HAL_DMA_IRQHandler+0xb0>
 8002c5e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002c62:	e005      	b.n	8002c70 <HAL_DMA_IRQHandler+0xb0>
 8002c64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c68:	e002      	b.n	8002c70 <HAL_DMA_IRQHandler+0xb0>
 8002c6a:	2340      	movs	r3, #64	@ 0x40
 8002c6c:	e000      	b.n	8002c70 <HAL_DMA_IRQHandler+0xb0>
 8002c6e:	2304      	movs	r3, #4
 8002c70:	4a55      	ldr	r2, [pc, #340]	@ (8002dc8 <HAL_DMA_IRQHandler+0x208>)
 8002c72:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 8094 	beq.w	8002da6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002c86:	e08e      	b.n	8002da6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	409a      	lsls	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4013      	ands	r3, r2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d056      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x186>
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d051      	beq.n	8002d46 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0320 	and.w	r3, r3, #32
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10b      	bne.n	8002cc8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 020a 	bic.w	r2, r2, #10
 8002cbe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a38      	ldr	r2, [pc, #224]	@ (8002db0 <HAL_DMA_IRQHandler+0x1f0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d029      	beq.n	8002d26 <HAL_DMA_IRQHandler+0x166>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a37      	ldr	r2, [pc, #220]	@ (8002db4 <HAL_DMA_IRQHandler+0x1f4>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d022      	beq.n	8002d22 <HAL_DMA_IRQHandler+0x162>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a35      	ldr	r2, [pc, #212]	@ (8002db8 <HAL_DMA_IRQHandler+0x1f8>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d01a      	beq.n	8002d1c <HAL_DMA_IRQHandler+0x15c>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a34      	ldr	r2, [pc, #208]	@ (8002dbc <HAL_DMA_IRQHandler+0x1fc>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d012      	beq.n	8002d16 <HAL_DMA_IRQHandler+0x156>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a32      	ldr	r2, [pc, #200]	@ (8002dc0 <HAL_DMA_IRQHandler+0x200>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00a      	beq.n	8002d10 <HAL_DMA_IRQHandler+0x150>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a31      	ldr	r2, [pc, #196]	@ (8002dc4 <HAL_DMA_IRQHandler+0x204>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d102      	bne.n	8002d0a <HAL_DMA_IRQHandler+0x14a>
 8002d04:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002d08:	e00e      	b.n	8002d28 <HAL_DMA_IRQHandler+0x168>
 8002d0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d0e:	e00b      	b.n	8002d28 <HAL_DMA_IRQHandler+0x168>
 8002d10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d14:	e008      	b.n	8002d28 <HAL_DMA_IRQHandler+0x168>
 8002d16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002d1a:	e005      	b.n	8002d28 <HAL_DMA_IRQHandler+0x168>
 8002d1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d20:	e002      	b.n	8002d28 <HAL_DMA_IRQHandler+0x168>
 8002d22:	2320      	movs	r3, #32
 8002d24:	e000      	b.n	8002d28 <HAL_DMA_IRQHandler+0x168>
 8002d26:	2302      	movs	r3, #2
 8002d28:	4a27      	ldr	r2, [pc, #156]	@ (8002dc8 <HAL_DMA_IRQHandler+0x208>)
 8002d2a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d034      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002d44:	e02f      	b.n	8002da6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4a:	2208      	movs	r2, #8
 8002d4c:	409a      	lsls	r2, r3
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	4013      	ands	r3, r2
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d028      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x1e8>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d023      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 020e 	bic.w	r2, r2, #14
 8002d6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d78:	2101      	movs	r1, #1
 8002d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d004      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	4798      	blx	r3
    }
  }
  return;
 8002da6:	bf00      	nop
 8002da8:	bf00      	nop
}
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40020008 	.word	0x40020008
 8002db4:	4002001c 	.word	0x4002001c
 8002db8:	40020030 	.word	0x40020030
 8002dbc:	40020044 	.word	0x40020044
 8002dc0:	40020058 	.word	0x40020058
 8002dc4:	4002006c 	.word	0x4002006c
 8002dc8:	40020000 	.word	0x40020000

08002dcc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de2:	2101      	movs	r1, #1
 8002de4:	fa01 f202 	lsl.w	r2, r1, r2
 8002de8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	2b10      	cmp	r3, #16
 8002df8:	d108      	bne.n	8002e0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002e0a:	e007      	b.n	8002e1c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	60da      	str	r2, [r3, #12]
}
 8002e1c:	bf00      	nop
 8002e1e:	3714      	adds	r7, #20
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr
	...

08002e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b08b      	sub	sp, #44	@ 0x2c
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e32:	2300      	movs	r3, #0
 8002e34:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e36:	2300      	movs	r3, #0
 8002e38:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e3a:	e169      	b.n	8003110 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	69fa      	ldr	r2, [r7, #28]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	f040 8158 	bne.w	800310a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	4a9a      	ldr	r2, [pc, #616]	@ (80030c8 <HAL_GPIO_Init+0x2a0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d05e      	beq.n	8002f22 <HAL_GPIO_Init+0xfa>
 8002e64:	4a98      	ldr	r2, [pc, #608]	@ (80030c8 <HAL_GPIO_Init+0x2a0>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d875      	bhi.n	8002f56 <HAL_GPIO_Init+0x12e>
 8002e6a:	4a98      	ldr	r2, [pc, #608]	@ (80030cc <HAL_GPIO_Init+0x2a4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d058      	beq.n	8002f22 <HAL_GPIO_Init+0xfa>
 8002e70:	4a96      	ldr	r2, [pc, #600]	@ (80030cc <HAL_GPIO_Init+0x2a4>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d86f      	bhi.n	8002f56 <HAL_GPIO_Init+0x12e>
 8002e76:	4a96      	ldr	r2, [pc, #600]	@ (80030d0 <HAL_GPIO_Init+0x2a8>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d052      	beq.n	8002f22 <HAL_GPIO_Init+0xfa>
 8002e7c:	4a94      	ldr	r2, [pc, #592]	@ (80030d0 <HAL_GPIO_Init+0x2a8>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d869      	bhi.n	8002f56 <HAL_GPIO_Init+0x12e>
 8002e82:	4a94      	ldr	r2, [pc, #592]	@ (80030d4 <HAL_GPIO_Init+0x2ac>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d04c      	beq.n	8002f22 <HAL_GPIO_Init+0xfa>
 8002e88:	4a92      	ldr	r2, [pc, #584]	@ (80030d4 <HAL_GPIO_Init+0x2ac>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d863      	bhi.n	8002f56 <HAL_GPIO_Init+0x12e>
 8002e8e:	4a92      	ldr	r2, [pc, #584]	@ (80030d8 <HAL_GPIO_Init+0x2b0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d046      	beq.n	8002f22 <HAL_GPIO_Init+0xfa>
 8002e94:	4a90      	ldr	r2, [pc, #576]	@ (80030d8 <HAL_GPIO_Init+0x2b0>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d85d      	bhi.n	8002f56 <HAL_GPIO_Init+0x12e>
 8002e9a:	2b12      	cmp	r3, #18
 8002e9c:	d82a      	bhi.n	8002ef4 <HAL_GPIO_Init+0xcc>
 8002e9e:	2b12      	cmp	r3, #18
 8002ea0:	d859      	bhi.n	8002f56 <HAL_GPIO_Init+0x12e>
 8002ea2:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea8 <HAL_GPIO_Init+0x80>)
 8002ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea8:	08002f23 	.word	0x08002f23
 8002eac:	08002efd 	.word	0x08002efd
 8002eb0:	08002f0f 	.word	0x08002f0f
 8002eb4:	08002f51 	.word	0x08002f51
 8002eb8:	08002f57 	.word	0x08002f57
 8002ebc:	08002f57 	.word	0x08002f57
 8002ec0:	08002f57 	.word	0x08002f57
 8002ec4:	08002f57 	.word	0x08002f57
 8002ec8:	08002f57 	.word	0x08002f57
 8002ecc:	08002f57 	.word	0x08002f57
 8002ed0:	08002f57 	.word	0x08002f57
 8002ed4:	08002f57 	.word	0x08002f57
 8002ed8:	08002f57 	.word	0x08002f57
 8002edc:	08002f57 	.word	0x08002f57
 8002ee0:	08002f57 	.word	0x08002f57
 8002ee4:	08002f57 	.word	0x08002f57
 8002ee8:	08002f57 	.word	0x08002f57
 8002eec:	08002f05 	.word	0x08002f05
 8002ef0:	08002f19 	.word	0x08002f19
 8002ef4:	4a79      	ldr	r2, [pc, #484]	@ (80030dc <HAL_GPIO_Init+0x2b4>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d013      	beq.n	8002f22 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002efa:	e02c      	b.n	8002f56 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	623b      	str	r3, [r7, #32]
          break;
 8002f02:	e029      	b.n	8002f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	3304      	adds	r3, #4
 8002f0a:	623b      	str	r3, [r7, #32]
          break;
 8002f0c:	e024      	b.n	8002f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	3308      	adds	r3, #8
 8002f14:	623b      	str	r3, [r7, #32]
          break;
 8002f16:	e01f      	b.n	8002f58 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	330c      	adds	r3, #12
 8002f1e:	623b      	str	r3, [r7, #32]
          break;
 8002f20:	e01a      	b.n	8002f58 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d102      	bne.n	8002f30 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f2a:	2304      	movs	r3, #4
 8002f2c:	623b      	str	r3, [r7, #32]
          break;
 8002f2e:	e013      	b.n	8002f58 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d105      	bne.n	8002f44 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f38:	2308      	movs	r3, #8
 8002f3a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69fa      	ldr	r2, [r7, #28]
 8002f40:	611a      	str	r2, [r3, #16]
          break;
 8002f42:	e009      	b.n	8002f58 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f44:	2308      	movs	r3, #8
 8002f46:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69fa      	ldr	r2, [r7, #28]
 8002f4c:	615a      	str	r2, [r3, #20]
          break;
 8002f4e:	e003      	b.n	8002f58 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f50:	2300      	movs	r3, #0
 8002f52:	623b      	str	r3, [r7, #32]
          break;
 8002f54:	e000      	b.n	8002f58 <HAL_GPIO_Init+0x130>
          break;
 8002f56:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	2bff      	cmp	r3, #255	@ 0xff
 8002f5c:	d801      	bhi.n	8002f62 <HAL_GPIO_Init+0x13a>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	e001      	b.n	8002f66 <HAL_GPIO_Init+0x13e>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	3304      	adds	r3, #4
 8002f66:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	2bff      	cmp	r3, #255	@ 0xff
 8002f6c:	d802      	bhi.n	8002f74 <HAL_GPIO_Init+0x14c>
 8002f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	e002      	b.n	8002f7a <HAL_GPIO_Init+0x152>
 8002f74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f76:	3b08      	subs	r3, #8
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	210f      	movs	r1, #15
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	fa01 f303 	lsl.w	r3, r1, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	401a      	ands	r2, r3
 8002f8c:	6a39      	ldr	r1, [r7, #32]
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	fa01 f303 	lsl.w	r3, r1, r3
 8002f94:	431a      	orrs	r2, r3
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 80b1 	beq.w	800310a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fa8:	4b4d      	ldr	r3, [pc, #308]	@ (80030e0 <HAL_GPIO_Init+0x2b8>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	4a4c      	ldr	r2, [pc, #304]	@ (80030e0 <HAL_GPIO_Init+0x2b8>)
 8002fae:	f043 0301 	orr.w	r3, r3, #1
 8002fb2:	6193      	str	r3, [r2, #24]
 8002fb4:	4b4a      	ldr	r3, [pc, #296]	@ (80030e0 <HAL_GPIO_Init+0x2b8>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fc0:	4a48      	ldr	r2, [pc, #288]	@ (80030e4 <HAL_GPIO_Init+0x2bc>)
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc4:	089b      	lsrs	r3, r3, #2
 8002fc6:	3302      	adds	r3, #2
 8002fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fcc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd0:	f003 0303 	and.w	r3, r3, #3
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	220f      	movs	r2, #15
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a40      	ldr	r2, [pc, #256]	@ (80030e8 <HAL_GPIO_Init+0x2c0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d013      	beq.n	8003014 <HAL_GPIO_Init+0x1ec>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a3f      	ldr	r2, [pc, #252]	@ (80030ec <HAL_GPIO_Init+0x2c4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d00d      	beq.n	8003010 <HAL_GPIO_Init+0x1e8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a3e      	ldr	r2, [pc, #248]	@ (80030f0 <HAL_GPIO_Init+0x2c8>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d007      	beq.n	800300c <HAL_GPIO_Init+0x1e4>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a3d      	ldr	r2, [pc, #244]	@ (80030f4 <HAL_GPIO_Init+0x2cc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d101      	bne.n	8003008 <HAL_GPIO_Init+0x1e0>
 8003004:	2303      	movs	r3, #3
 8003006:	e006      	b.n	8003016 <HAL_GPIO_Init+0x1ee>
 8003008:	2304      	movs	r3, #4
 800300a:	e004      	b.n	8003016 <HAL_GPIO_Init+0x1ee>
 800300c:	2302      	movs	r3, #2
 800300e:	e002      	b.n	8003016 <HAL_GPIO_Init+0x1ee>
 8003010:	2301      	movs	r3, #1
 8003012:	e000      	b.n	8003016 <HAL_GPIO_Init+0x1ee>
 8003014:	2300      	movs	r3, #0
 8003016:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003018:	f002 0203 	and.w	r2, r2, #3
 800301c:	0092      	lsls	r2, r2, #2
 800301e:	4093      	lsls	r3, r2
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003026:	492f      	ldr	r1, [pc, #188]	@ (80030e4 <HAL_GPIO_Init+0x2bc>)
 8003028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800302a:	089b      	lsrs	r3, r3, #2
 800302c:	3302      	adds	r3, #2
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d006      	beq.n	800304e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003040:	4b2d      	ldr	r3, [pc, #180]	@ (80030f8 <HAL_GPIO_Init+0x2d0>)
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	492c      	ldr	r1, [pc, #176]	@ (80030f8 <HAL_GPIO_Init+0x2d0>)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	4313      	orrs	r3, r2
 800304a:	608b      	str	r3, [r1, #8]
 800304c:	e006      	b.n	800305c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800304e:	4b2a      	ldr	r3, [pc, #168]	@ (80030f8 <HAL_GPIO_Init+0x2d0>)
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	43db      	mvns	r3, r3
 8003056:	4928      	ldr	r1, [pc, #160]	@ (80030f8 <HAL_GPIO_Init+0x2d0>)
 8003058:	4013      	ands	r3, r2
 800305a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d006      	beq.n	8003076 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003068:	4b23      	ldr	r3, [pc, #140]	@ (80030f8 <HAL_GPIO_Init+0x2d0>)
 800306a:	68da      	ldr	r2, [r3, #12]
 800306c:	4922      	ldr	r1, [pc, #136]	@ (80030f8 <HAL_GPIO_Init+0x2d0>)
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	4313      	orrs	r3, r2
 8003072:	60cb      	str	r3, [r1, #12]
 8003074:	e006      	b.n	8003084 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003076:	4b20      	ldr	r3, [pc, #128]	@ (80030f8 <HAL_GPIO_Init+0x2d0>)
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	43db      	mvns	r3, r3
 800307e:	491e      	ldr	r1, [pc, #120]	@ (80030f8 <HAL_GPIO_Init+0x2d0>)
 8003080:	4013      	ands	r3, r2
 8003082:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d006      	beq.n	800309e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003090:	4b19      	ldr	r3, [pc, #100]	@ (80030f8 <HAL_GPIO_Init+0x2d0>)
 8003092:	685a      	ldr	r2, [r3, #4]
 8003094:	4918      	ldr	r1, [pc, #96]	@ (80030f8 <HAL_GPIO_Init+0x2d0>)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	4313      	orrs	r3, r2
 800309a:	604b      	str	r3, [r1, #4]
 800309c:	e006      	b.n	80030ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800309e:	4b16      	ldr	r3, [pc, #88]	@ (80030f8 <HAL_GPIO_Init+0x2d0>)
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	4914      	ldr	r1, [pc, #80]	@ (80030f8 <HAL_GPIO_Init+0x2d0>)
 80030a8:	4013      	ands	r3, r2
 80030aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d021      	beq.n	80030fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030b8:	4b0f      	ldr	r3, [pc, #60]	@ (80030f8 <HAL_GPIO_Init+0x2d0>)
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	490e      	ldr	r1, [pc, #56]	@ (80030f8 <HAL_GPIO_Init+0x2d0>)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	600b      	str	r3, [r1, #0]
 80030c4:	e021      	b.n	800310a <HAL_GPIO_Init+0x2e2>
 80030c6:	bf00      	nop
 80030c8:	10320000 	.word	0x10320000
 80030cc:	10310000 	.word	0x10310000
 80030d0:	10220000 	.word	0x10220000
 80030d4:	10210000 	.word	0x10210000
 80030d8:	10120000 	.word	0x10120000
 80030dc:	10110000 	.word	0x10110000
 80030e0:	40021000 	.word	0x40021000
 80030e4:	40010000 	.word	0x40010000
 80030e8:	40010800 	.word	0x40010800
 80030ec:	40010c00 	.word	0x40010c00
 80030f0:	40011000 	.word	0x40011000
 80030f4:	40011400 	.word	0x40011400
 80030f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030fc:	4b0b      	ldr	r3, [pc, #44]	@ (800312c <HAL_GPIO_Init+0x304>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	43db      	mvns	r3, r3
 8003104:	4909      	ldr	r1, [pc, #36]	@ (800312c <HAL_GPIO_Init+0x304>)
 8003106:	4013      	ands	r3, r2
 8003108:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800310a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310c:	3301      	adds	r3, #1
 800310e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003116:	fa22 f303 	lsr.w	r3, r2, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	f47f ae8e 	bne.w	8002e3c <HAL_GPIO_Init+0x14>
  }
}
 8003120:	bf00      	nop
 8003122:	bf00      	nop
 8003124:	372c      	adds	r7, #44	@ 0x2c
 8003126:	46bd      	mov	sp, r7
 8003128:	bc80      	pop	{r7}
 800312a:	4770      	bx	lr
 800312c:	40010400 	.word	0x40010400

08003130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	807b      	strh	r3, [r7, #2]
 800313c:	4613      	mov	r3, r2
 800313e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003140:	787b      	ldrb	r3, [r7, #1]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003146:	887a      	ldrh	r2, [r7, #2]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800314c:	e003      	b.n	8003156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800314e:	887b      	ldrh	r3, [r7, #2]
 8003150:	041a      	lsls	r2, r3, #16
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	611a      	str	r2, [r3, #16]
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	bc80      	pop	{r7}
 800315e:	4770      	bx	lr

08003160 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003160:	b480      	push	{r7}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003172:	887a      	ldrh	r2, [r7, #2]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	4013      	ands	r3, r2
 8003178:	041a      	lsls	r2, r3, #16
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	43d9      	mvns	r1, r3
 800317e:	887b      	ldrh	r3, [r7, #2]
 8003180:	400b      	ands	r3, r1
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	611a      	str	r2, [r3, #16]
}
 8003188:	bf00      	nop
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr
	...

08003194 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e12b      	b.n	80033fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fd ff08 	bl	8000fd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2224      	movs	r2, #36	@ 0x24
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f022 0201 	bic.w	r2, r2, #1
 80031d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80031e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80031f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031f8:	f002 f9e4 	bl	80055c4 <HAL_RCC_GetPCLK1Freq>
 80031fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	4a81      	ldr	r2, [pc, #516]	@ (8003408 <HAL_I2C_Init+0x274>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d807      	bhi.n	8003218 <HAL_I2C_Init+0x84>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4a80      	ldr	r2, [pc, #512]	@ (800340c <HAL_I2C_Init+0x278>)
 800320c:	4293      	cmp	r3, r2
 800320e:	bf94      	ite	ls
 8003210:	2301      	movls	r3, #1
 8003212:	2300      	movhi	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	e006      	b.n	8003226 <HAL_I2C_Init+0x92>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	4a7d      	ldr	r2, [pc, #500]	@ (8003410 <HAL_I2C_Init+0x27c>)
 800321c:	4293      	cmp	r3, r2
 800321e:	bf94      	ite	ls
 8003220:	2301      	movls	r3, #1
 8003222:	2300      	movhi	r3, #0
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e0e7      	b.n	80033fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	4a78      	ldr	r2, [pc, #480]	@ (8003414 <HAL_I2C_Init+0x280>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	0c9b      	lsrs	r3, r3, #18
 8003238:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	430a      	orrs	r2, r1
 800324c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6a1b      	ldr	r3, [r3, #32]
 8003254:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4a6a      	ldr	r2, [pc, #424]	@ (8003408 <HAL_I2C_Init+0x274>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d802      	bhi.n	8003268 <HAL_I2C_Init+0xd4>
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	3301      	adds	r3, #1
 8003266:	e009      	b.n	800327c <HAL_I2C_Init+0xe8>
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800326e:	fb02 f303 	mul.w	r3, r2, r3
 8003272:	4a69      	ldr	r2, [pc, #420]	@ (8003418 <HAL_I2C_Init+0x284>)
 8003274:	fba2 2303 	umull	r2, r3, r2, r3
 8003278:	099b      	lsrs	r3, r3, #6
 800327a:	3301      	adds	r3, #1
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	430b      	orrs	r3, r1
 8003282:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	69db      	ldr	r3, [r3, #28]
 800328a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800328e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	495c      	ldr	r1, [pc, #368]	@ (8003408 <HAL_I2C_Init+0x274>)
 8003298:	428b      	cmp	r3, r1
 800329a:	d819      	bhi.n	80032d0 <HAL_I2C_Init+0x13c>
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	1e59      	subs	r1, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80032aa:	1c59      	adds	r1, r3, #1
 80032ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80032b0:	400b      	ands	r3, r1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_I2C_Init+0x138>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	1e59      	subs	r1, r3, #1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032c4:	3301      	adds	r3, #1
 80032c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032ca:	e051      	b.n	8003370 <HAL_I2C_Init+0x1dc>
 80032cc:	2304      	movs	r3, #4
 80032ce:	e04f      	b.n	8003370 <HAL_I2C_Init+0x1dc>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d111      	bne.n	80032fc <HAL_I2C_Init+0x168>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	1e58      	subs	r0, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6859      	ldr	r1, [r3, #4]
 80032e0:	460b      	mov	r3, r1
 80032e2:	005b      	lsls	r3, r3, #1
 80032e4:	440b      	add	r3, r1
 80032e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ea:	3301      	adds	r3, #1
 80032ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	bf0c      	ite	eq
 80032f4:	2301      	moveq	r3, #1
 80032f6:	2300      	movne	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	e012      	b.n	8003322 <HAL_I2C_Init+0x18e>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	1e58      	subs	r0, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6859      	ldr	r1, [r3, #4]
 8003304:	460b      	mov	r3, r1
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	0099      	lsls	r1, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003312:	3301      	adds	r3, #1
 8003314:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003318:	2b00      	cmp	r3, #0
 800331a:	bf0c      	ite	eq
 800331c:	2301      	moveq	r3, #1
 800331e:	2300      	movne	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_I2C_Init+0x196>
 8003326:	2301      	movs	r3, #1
 8003328:	e022      	b.n	8003370 <HAL_I2C_Init+0x1dc>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d10e      	bne.n	8003350 <HAL_I2C_Init+0x1bc>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1e58      	subs	r0, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6859      	ldr	r1, [r3, #4]
 800333a:	460b      	mov	r3, r1
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	440b      	add	r3, r1
 8003340:	fbb0 f3f3 	udiv	r3, r0, r3
 8003344:	3301      	adds	r3, #1
 8003346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800334a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800334e:	e00f      	b.n	8003370 <HAL_I2C_Init+0x1dc>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1e58      	subs	r0, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	440b      	add	r3, r1
 800335e:	0099      	lsls	r1, r3, #2
 8003360:	440b      	add	r3, r1
 8003362:	fbb0 f3f3 	udiv	r3, r0, r3
 8003366:	3301      	adds	r3, #1
 8003368:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800336c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	6809      	ldr	r1, [r1, #0]
 8003374:	4313      	orrs	r3, r2
 8003376:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69da      	ldr	r2, [r3, #28]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800339e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80033a2:	687a      	ldr	r2, [r7, #4]
 80033a4:	6911      	ldr	r1, [r2, #16]
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	68d2      	ldr	r2, [r2, #12]
 80033aa:	4311      	orrs	r1, r2
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6812      	ldr	r2, [r2, #0]
 80033b0:	430b      	orrs	r3, r1
 80033b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	695a      	ldr	r2, [r3, #20]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0201 	orr.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2220      	movs	r2, #32
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	000186a0 	.word	0x000186a0
 800340c:	001e847f 	.word	0x001e847f
 8003410:	003d08ff 	.word	0x003d08ff
 8003414:	431bde83 	.word	0x431bde83
 8003418:	10624dd3 	.word	0x10624dd3

0800341c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af02      	add	r7, sp, #8
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	607a      	str	r2, [r7, #4]
 8003426:	461a      	mov	r2, r3
 8003428:	460b      	mov	r3, r1
 800342a:	817b      	strh	r3, [r7, #10]
 800342c:	4613      	mov	r3, r2
 800342e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003430:	f7fe fd3e 	bl	8001eb0 <HAL_GetTick>
 8003434:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b20      	cmp	r3, #32
 8003440:	f040 80e0 	bne.w	8003604 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	9300      	str	r3, [sp, #0]
 8003448:	2319      	movs	r3, #25
 800344a:	2201      	movs	r2, #1
 800344c:	4970      	ldr	r1, [pc, #448]	@ (8003610 <HAL_I2C_Master_Transmit+0x1f4>)
 800344e:	68f8      	ldr	r0, [r7, #12]
 8003450:	f001 fab8 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8003454:	4603      	mov	r3, r0
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800345a:	2302      	movs	r3, #2
 800345c:	e0d3      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003464:	2b01      	cmp	r3, #1
 8003466:	d101      	bne.n	800346c <HAL_I2C_Master_Transmit+0x50>
 8003468:	2302      	movs	r3, #2
 800346a:	e0cc      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b01      	cmp	r3, #1
 8003480:	d007      	beq.n	8003492 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0201 	orr.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2221      	movs	r2, #33	@ 0x21
 80034a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2210      	movs	r2, #16
 80034ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2200      	movs	r2, #0
 80034b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	893a      	ldrh	r2, [r7, #8]
 80034c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	4a50      	ldr	r2, [pc, #320]	@ (8003614 <HAL_I2C_Master_Transmit+0x1f8>)
 80034d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034d4:	8979      	ldrh	r1, [r7, #10]
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	6a3a      	ldr	r2, [r7, #32]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 ffa4 	bl	8004428 <I2C_MasterRequestWrite>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e08d      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ea:	2300      	movs	r3, #0
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	613b      	str	r3, [r7, #16]
 80034fe:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003500:	e066      	b.n	80035d0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	6a39      	ldr	r1, [r7, #32]
 8003506:	68f8      	ldr	r0, [r7, #12]
 8003508:	f001 fb76 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00d      	beq.n	800352e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003516:	2b04      	cmp	r3, #4
 8003518:	d107      	bne.n	800352a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003528:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e06b      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003532:	781a      	ldrb	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003548:	b29b      	uxth	r3, r3
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003556:	3b01      	subs	r3, #1
 8003558:	b29a      	uxth	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695b      	ldr	r3, [r3, #20]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b04      	cmp	r3, #4
 800356a:	d11b      	bne.n	80035a4 <HAL_I2C_Master_Transmit+0x188>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003570:	2b00      	cmp	r3, #0
 8003572:	d017      	beq.n	80035a4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003578:	781a      	ldrb	r2, [r3, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800358e:	b29b      	uxth	r3, r3
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800359c:	3b01      	subs	r3, #1
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035a4:	697a      	ldr	r2, [r7, #20]
 80035a6:	6a39      	ldr	r1, [r7, #32]
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f001 fb6d 	bl	8004c88 <I2C_WaitOnBTFFlagUntilTimeout>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d00d      	beq.n	80035d0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	d107      	bne.n	80035cc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035ca:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e01a      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d194      	bne.n	8003502 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2220      	movs	r2, #32
 80035ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	e000      	b.n	8003606 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003604:	2302      	movs	r3, #2
  }
}
 8003606:	4618      	mov	r0, r3
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	00100002 	.word	0x00100002
 8003614:	ffff0000 	.word	0xffff0000

08003618 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b08c      	sub	sp, #48	@ 0x30
 800361c:	af02      	add	r7, sp, #8
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	607a      	str	r2, [r7, #4]
 8003622:	461a      	mov	r2, r3
 8003624:	460b      	mov	r3, r1
 8003626:	817b      	strh	r3, [r7, #10]
 8003628:	4613      	mov	r3, r2
 800362a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003630:	f7fe fc3e 	bl	8001eb0 <HAL_GetTick>
 8003634:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b20      	cmp	r3, #32
 8003640:	f040 824b 	bne.w	8003ada <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	2319      	movs	r3, #25
 800364a:	2201      	movs	r2, #1
 800364c:	497f      	ldr	r1, [pc, #508]	@ (800384c <HAL_I2C_Master_Receive+0x234>)
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f001 f9b8 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d001      	beq.n	800365e <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800365a:	2302      	movs	r3, #2
 800365c:	e23e      	b.n	8003adc <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003664:	2b01      	cmp	r3, #1
 8003666:	d101      	bne.n	800366c <HAL_I2C_Master_Receive+0x54>
 8003668:	2302      	movs	r3, #2
 800366a:	e237      	b.n	8003adc <HAL_I2C_Master_Receive+0x4c4>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b01      	cmp	r3, #1
 8003680:	d007      	beq.n	8003692 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f042 0201 	orr.w	r2, r2, #1
 8003690:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2222      	movs	r2, #34	@ 0x22
 80036a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2210      	movs	r2, #16
 80036ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2200      	movs	r2, #0
 80036b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	893a      	ldrh	r2, [r7, #8]
 80036c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	4a5f      	ldr	r2, [pc, #380]	@ (8003850 <HAL_I2C_Master_Receive+0x238>)
 80036d2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036d4:	8979      	ldrh	r1, [r7, #10]
 80036d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 ff26 	bl	800452c <I2C_MasterRequestRead>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e1f8      	b.n	8003adc <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d113      	bne.n	800371a <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036f2:	2300      	movs	r3, #0
 80036f4:	61fb      	str	r3, [r7, #28]
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	61fb      	str	r3, [r7, #28]
 8003706:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	e1cc      	b.n	8003ab4 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800371e:	2b01      	cmp	r3, #1
 8003720:	d11e      	bne.n	8003760 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003730:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003732:	b672      	cpsid	i
}
 8003734:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003736:	2300      	movs	r3, #0
 8003738:	61bb      	str	r3, [r7, #24]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	695b      	ldr	r3, [r3, #20]
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	699b      	ldr	r3, [r3, #24]
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800375a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800375c:	b662      	cpsie	i
}
 800375e:	e035      	b.n	80037cc <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003764:	2b02      	cmp	r3, #2
 8003766:	d11e      	bne.n	80037a6 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003776:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003778:	b672      	cpsid	i
}
 800377a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800377c:	2300      	movs	r3, #0
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	617b      	str	r3, [r7, #20]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	617b      	str	r3, [r7, #20]
 8003790:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80037a2:	b662      	cpsie	i
}
 80037a4:	e012      	b.n	80037cc <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80037b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037b6:	2300      	movs	r3, #0
 80037b8:	613b      	str	r3, [r7, #16]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	613b      	str	r3, [r7, #16]
 80037ca:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80037cc:	e172      	b.n	8003ab4 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d2:	2b03      	cmp	r3, #3
 80037d4:	f200 811f 	bhi.w	8003a16 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d123      	bne.n	8003828 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f001 fa97 	bl	8004d18 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e173      	b.n	8003adc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	691a      	ldr	r2, [r3, #16]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037fe:	b2d2      	uxtb	r2, r2
 8003800:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800381c:	b29b      	uxth	r3, r3
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003826:	e145      	b.n	8003ab4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800382c:	2b02      	cmp	r3, #2
 800382e:	d152      	bne.n	80038d6 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003836:	2200      	movs	r2, #0
 8003838:	4906      	ldr	r1, [pc, #24]	@ (8003854 <HAL_I2C_Master_Receive+0x23c>)
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f001 f8c2 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d008      	beq.n	8003858 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e148      	b.n	8003adc <HAL_I2C_Master_Receive+0x4c4>
 800384a:	bf00      	nop
 800384c:	00100002 	.word	0x00100002
 8003850:	ffff0000 	.word	0xffff0000
 8003854:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003858:	b672      	cpsid	i
}
 800385a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800386a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	691a      	ldr	r2, [r3, #16]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800387e:	1c5a      	adds	r2, r3, #1
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003894:	b29b      	uxth	r3, r3
 8003896:	3b01      	subs	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800389e:	b662      	cpsie	i
}
 80038a0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	691a      	ldr	r2, [r3, #16]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038b4:	1c5a      	adds	r2, r3, #1
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	3b01      	subs	r3, #1
 80038ce:	b29a      	uxth	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80038d4:	e0ee      	b.n	8003ab4 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038dc:	2200      	movs	r2, #0
 80038de:	4981      	ldr	r1, [pc, #516]	@ (8003ae4 <HAL_I2C_Master_Receive+0x4cc>)
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f001 f86f 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d001      	beq.n	80038f0 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e0f5      	b.n	8003adc <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003900:	b672      	cpsid	i
}
 8003902:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691a      	ldr	r2, [r3, #16]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003920:	3b01      	subs	r3, #1
 8003922:	b29a      	uxth	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003936:	4b6c      	ldr	r3, [pc, #432]	@ (8003ae8 <HAL_I2C_Master_Receive+0x4d0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	08db      	lsrs	r3, r3, #3
 800393c:	4a6b      	ldr	r2, [pc, #428]	@ (8003aec <HAL_I2C_Master_Receive+0x4d4>)
 800393e:	fba2 2303 	umull	r2, r3, r2, r3
 8003942:	0a1a      	lsrs	r2, r3, #8
 8003944:	4613      	mov	r3, r2
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	00da      	lsls	r2, r3, #3
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	3b01      	subs	r3, #1
 8003954:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d118      	bne.n	800398e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2220      	movs	r2, #32
 8003966:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003976:	f043 0220 	orr.w	r2, r3, #32
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800397e:	b662      	cpsie	i
}
 8003980:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e0a6      	b.n	8003adc <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	695b      	ldr	r3, [r3, #20]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b04      	cmp	r3, #4
 800399a:	d1d9      	bne.n	8003950 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b6:	b2d2      	uxtb	r2, r2
 80039b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039be:	1c5a      	adds	r2, r3, #1
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b29a      	uxth	r2, r3
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80039de:	b662      	cpsie	i
}
 80039e0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	691a      	ldr	r2, [r3, #16]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f4:	1c5a      	adds	r2, r3, #1
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039fe:	3b01      	subs	r3, #1
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a14:	e04e      	b.n	8003ab4 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a18:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f001 f97c 	bl	8004d18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e058      	b.n	8003adc <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	691a      	ldr	r2, [r3, #16]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a46:	3b01      	subs	r3, #1
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	f003 0304 	and.w	r3, r3, #4
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	d124      	bne.n	8003ab4 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d107      	bne.n	8003a82 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a80:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	691a      	ldr	r2, [r3, #16]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8c:	b2d2      	uxtb	r2, r2
 8003a8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aaa:	b29b      	uxth	r3, r3
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f47f ae88 	bne.w	80037ce <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2220      	movs	r2, #32
 8003ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	e000      	b.n	8003adc <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003ada:	2302      	movs	r3, #2
  }
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3728      	adds	r7, #40	@ 0x28
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	00010004 	.word	0x00010004
 8003ae8:	2000001c 	.word	0x2000001c
 8003aec:	14f8b589 	.word	0x14f8b589

08003af0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af02      	add	r7, sp, #8
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	4608      	mov	r0, r1
 8003afa:	4611      	mov	r1, r2
 8003afc:	461a      	mov	r2, r3
 8003afe:	4603      	mov	r3, r0
 8003b00:	817b      	strh	r3, [r7, #10]
 8003b02:	460b      	mov	r3, r1
 8003b04:	813b      	strh	r3, [r7, #8]
 8003b06:	4613      	mov	r3, r2
 8003b08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b0a:	f7fe f9d1 	bl	8001eb0 <HAL_GetTick>
 8003b0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b20      	cmp	r3, #32
 8003b1a:	f040 80d9 	bne.w	8003cd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	2319      	movs	r3, #25
 8003b24:	2201      	movs	r2, #1
 8003b26:	496d      	ldr	r1, [pc, #436]	@ (8003cdc <HAL_I2C_Mem_Write+0x1ec>)
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 ff4b 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d001      	beq.n	8003b38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b34:	2302      	movs	r3, #2
 8003b36:	e0cc      	b.n	8003cd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d101      	bne.n	8003b46 <HAL_I2C_Mem_Write+0x56>
 8003b42:	2302      	movs	r3, #2
 8003b44:	e0c5      	b.n	8003cd2 <HAL_I2C_Mem_Write+0x1e2>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d007      	beq.n	8003b6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f042 0201 	orr.w	r2, r2, #1
 8003b6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2221      	movs	r2, #33	@ 0x21
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2240      	movs	r2, #64	@ 0x40
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a3a      	ldr	r2, [r7, #32]
 8003b96:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ba2:	b29a      	uxth	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4a4d      	ldr	r2, [pc, #308]	@ (8003ce0 <HAL_I2C_Mem_Write+0x1f0>)
 8003bac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bae:	88f8      	ldrh	r0, [r7, #6]
 8003bb0:	893a      	ldrh	r2, [r7, #8]
 8003bb2:	8979      	ldrh	r1, [r7, #10]
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 fd82 	bl	80046c8 <I2C_RequestMemoryWrite>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d052      	beq.n	8003c70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e081      	b.n	8003cd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bd2:	68f8      	ldr	r0, [r7, #12]
 8003bd4:	f001 f810 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00d      	beq.n	8003bfa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d107      	bne.n	8003bf6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bf4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e06b      	b.n	8003cd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfe:	781a      	ldrb	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	d11b      	bne.n	8003c70 <HAL_I2C_Mem_Write+0x180>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d017      	beq.n	8003c70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c44:	781a      	ldrb	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d1aa      	bne.n	8003bce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f001 f803 	bl	8004c88 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00d      	beq.n	8003ca4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8c:	2b04      	cmp	r3, #4
 8003c8e:	d107      	bne.n	8003ca0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e016      	b.n	8003cd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e000      	b.n	8003cd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003cd0:	2302      	movs	r3, #2
  }
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	00100002 	.word	0x00100002
 8003ce0:	ffff0000 	.word	0xffff0000

08003ce4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b08c      	sub	sp, #48	@ 0x30
 8003ce8:	af02      	add	r7, sp, #8
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	4608      	mov	r0, r1
 8003cee:	4611      	mov	r1, r2
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	817b      	strh	r3, [r7, #10]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	813b      	strh	r3, [r7, #8]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d02:	f7fe f8d5 	bl	8001eb0 <HAL_GetTick>
 8003d06:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b20      	cmp	r3, #32
 8003d12:	f040 8250 	bne.w	80041b6 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	2319      	movs	r3, #25
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	4982      	ldr	r1, [pc, #520]	@ (8003f28 <HAL_I2C_Mem_Read+0x244>)
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 fe4f 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e243      	b.n	80041b8 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d101      	bne.n	8003d3e <HAL_I2C_Mem_Read+0x5a>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e23c      	b.n	80041b8 <HAL_I2C_Mem_Read+0x4d4>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d007      	beq.n	8003d64 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0201 	orr.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2222      	movs	r2, #34	@ 0x22
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2240      	movs	r2, #64	@ 0x40
 8003d80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	4a62      	ldr	r2, [pc, #392]	@ (8003f2c <HAL_I2C_Mem_Read+0x248>)
 8003da4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003da6:	88f8      	ldrh	r0, [r7, #6]
 8003da8:	893a      	ldrh	r2, [r7, #8]
 8003daa:	8979      	ldrh	r1, [r7, #10]
 8003dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dae:	9301      	str	r3, [sp, #4]
 8003db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	4603      	mov	r3, r0
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 fd1c 	bl	80047f4 <I2C_RequestMemoryRead>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e1f8      	b.n	80041b8 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d113      	bne.n	8003df6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dce:	2300      	movs	r3, #0
 8003dd0:	61fb      	str	r3, [r7, #28]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	61fb      	str	r3, [r7, #28]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	e1cc      	b.n	8004190 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d11e      	bne.n	8003e3c <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e0c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e0e:	b672      	cpsid	i
}
 8003e10:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e12:	2300      	movs	r3, #0
 8003e14:	61bb      	str	r3, [r7, #24]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	695b      	ldr	r3, [r3, #20]
 8003e1c:	61bb      	str	r3, [r7, #24]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	61bb      	str	r3, [r7, #24]
 8003e26:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e36:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e38:	b662      	cpsie	i
}
 8003e3a:	e035      	b.n	8003ea8 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d11e      	bne.n	8003e82 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e54:	b672      	cpsid	i
}
 8003e56:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695b      	ldr	r3, [r3, #20]
 8003e62:	617b      	str	r3, [r7, #20]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003e7e:	b662      	cpsie	i
}
 8003e80:	e012      	b.n	8003ea8 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e90:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e92:	2300      	movs	r3, #0
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	613b      	str	r3, [r7, #16]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	613b      	str	r3, [r7, #16]
 8003ea6:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003ea8:	e172      	b.n	8004190 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eae:	2b03      	cmp	r3, #3
 8003eb0:	f200 811f 	bhi.w	80040f2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d123      	bne.n	8003f04 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ebe:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ec0:	68f8      	ldr	r0, [r7, #12]
 8003ec2:	f000 ff29 	bl	8004d18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e173      	b.n	80041b8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691a      	ldr	r2, [r3, #16]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f02:	e145      	b.n	8004190 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d152      	bne.n	8003fb2 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f12:	2200      	movs	r2, #0
 8003f14:	4906      	ldr	r1, [pc, #24]	@ (8003f30 <HAL_I2C_Mem_Read+0x24c>)
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 fd54 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d008      	beq.n	8003f34 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e148      	b.n	80041b8 <HAL_I2C_Mem_Read+0x4d4>
 8003f26:	bf00      	nop
 8003f28:	00100002 	.word	0x00100002
 8003f2c:	ffff0000 	.word	0xffff0000
 8003f30:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003f34:	b672      	cpsid	i
}
 8003f36:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	691a      	ldr	r2, [r3, #16]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f52:	b2d2      	uxtb	r2, r2
 8003f54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003f7a:	b662      	cpsie	i
}
 8003f7c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f90:	1c5a      	adds	r2, r3, #1
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b29a      	uxth	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003fb0:	e0ee      	b.n	8004190 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb8:	2200      	movs	r2, #0
 8003fba:	4981      	ldr	r1, [pc, #516]	@ (80041c0 <HAL_I2C_Mem_Read+0x4dc>)
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 fd01 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0f5      	b.n	80041b8 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fda:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003fdc:	b672      	cpsid	i
}
 8003fde:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691a      	ldr	r2, [r3, #16]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff2:	1c5a      	adds	r2, r3, #1
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004008:	b29b      	uxth	r3, r3
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004012:	4b6c      	ldr	r3, [pc, #432]	@ (80041c4 <HAL_I2C_Mem_Read+0x4e0>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	08db      	lsrs	r3, r3, #3
 8004018:	4a6b      	ldr	r2, [pc, #428]	@ (80041c8 <HAL_I2C_Mem_Read+0x4e4>)
 800401a:	fba2 2303 	umull	r2, r3, r2, r3
 800401e:	0a1a      	lsrs	r2, r3, #8
 8004020:	4613      	mov	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	00da      	lsls	r2, r3, #3
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800402c:	6a3b      	ldr	r3, [r7, #32]
 800402e:	3b01      	subs	r3, #1
 8004030:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d118      	bne.n	800406a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2220      	movs	r2, #32
 8004042:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004052:	f043 0220 	orr.w	r2, r3, #32
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800405a:	b662      	cpsie	i
}
 800405c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e0a6      	b.n	80041b8 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	f003 0304 	and.w	r3, r3, #4
 8004074:	2b04      	cmp	r3, #4
 8004076:	d1d9      	bne.n	800402c <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004086:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691a      	ldr	r2, [r3, #16]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a4:	3b01      	subs	r3, #1
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80040ba:	b662      	cpsie	i
}
 80040bc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	691a      	ldr	r2, [r3, #16]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040da:	3b01      	subs	r3, #1
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80040f0:	e04e      	b.n	8004190 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040f4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 fe0e 	bl	8004d18 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e058      	b.n	80041b8 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	691a      	ldr	r2, [r3, #16]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004122:	3b01      	subs	r3, #1
 8004124:	b29a      	uxth	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	f003 0304 	and.w	r3, r3, #4
 8004142:	2b04      	cmp	r3, #4
 8004144:	d124      	bne.n	8004190 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800414a:	2b03      	cmp	r3, #3
 800414c:	d107      	bne.n	800415e <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800415c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	691a      	ldr	r2, [r3, #16]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004168:	b2d2      	uxtb	r2, r2
 800416a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800417a:	3b01      	subs	r3, #1
 800417c:	b29a      	uxth	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004186:	b29b      	uxth	r3, r3
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004194:	2b00      	cmp	r3, #0
 8004196:	f47f ae88 	bne.w	8003eaa <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2220      	movs	r2, #32
 800419e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	e000      	b.n	80041b8 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 80041b6:	2302      	movs	r3, #2
  }
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3728      	adds	r7, #40	@ 0x28
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	00010004 	.word	0x00010004
 80041c4:	2000001c 	.word	0x2000001c
 80041c8:	14f8b589 	.word	0x14f8b589

080041cc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08a      	sub	sp, #40	@ 0x28
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	607a      	str	r2, [r7, #4]
 80041d6:	603b      	str	r3, [r7, #0]
 80041d8:	460b      	mov	r3, r1
 80041da:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80041dc:	f7fd fe68 	bl	8001eb0 <HAL_GetTick>
 80041e0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b20      	cmp	r3, #32
 80041f0:	f040 8111 	bne.w	8004416 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	2319      	movs	r3, #25
 80041fa:	2201      	movs	r2, #1
 80041fc:	4988      	ldr	r1, [pc, #544]	@ (8004420 <HAL_I2C_IsDeviceReady+0x254>)
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	f000 fbe0 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8004204:	4603      	mov	r3, r0
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800420a:	2302      	movs	r3, #2
 800420c:	e104      	b.n	8004418 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004214:	2b01      	cmp	r3, #1
 8004216:	d101      	bne.n	800421c <HAL_I2C_IsDeviceReady+0x50>
 8004218:	2302      	movs	r3, #2
 800421a:	e0fd      	b.n	8004418 <HAL_I2C_IsDeviceReady+0x24c>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b01      	cmp	r3, #1
 8004230:	d007      	beq.n	8004242 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0201 	orr.w	r2, r2, #1
 8004240:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004250:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2224      	movs	r2, #36	@ 0x24
 8004256:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4a70      	ldr	r2, [pc, #448]	@ (8004424 <HAL_I2C_IsDeviceReady+0x258>)
 8004264:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004274:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	2200      	movs	r2, #0
 800427e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 fb9e 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00d      	beq.n	80042aa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004298:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800429c:	d103      	bne.n	80042a6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042a4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e0b6      	b.n	8004418 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042aa:	897b      	ldrh	r3, [r7, #10]
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	461a      	mov	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042b8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80042ba:	f7fd fdf9 	bl	8001eb0 <HAL_GetTick>
 80042be:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	bf0c      	ite	eq
 80042ce:	2301      	moveq	r3, #1
 80042d0:	2300      	movne	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042e4:	bf0c      	ite	eq
 80042e6:	2301      	moveq	r3, #1
 80042e8:	2300      	movne	r3, #0
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80042ee:	e025      	b.n	800433c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80042f0:	f7fd fdde 	bl	8001eb0 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	683a      	ldr	r2, [r7, #0]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d302      	bcc.n	8004306 <HAL_I2C_IsDeviceReady+0x13a>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d103      	bne.n	800430e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	22a0      	movs	r2, #160	@ 0xa0
 800430a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	f003 0302 	and.w	r3, r3, #2
 8004318:	2b02      	cmp	r3, #2
 800431a:	bf0c      	ite	eq
 800431c:	2301      	moveq	r3, #1
 800431e:	2300      	movne	r3, #0
 8004320:	b2db      	uxtb	r3, r3
 8004322:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800432e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004332:	bf0c      	ite	eq
 8004334:	2301      	moveq	r3, #1
 8004336:	2300      	movne	r3, #0
 8004338:	b2db      	uxtb	r3, r3
 800433a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004342:	b2db      	uxtb	r3, r3
 8004344:	2ba0      	cmp	r3, #160	@ 0xa0
 8004346:	d005      	beq.n	8004354 <HAL_I2C_IsDeviceReady+0x188>
 8004348:	7dfb      	ldrb	r3, [r7, #23]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d102      	bne.n	8004354 <HAL_I2C_IsDeviceReady+0x188>
 800434e:	7dbb      	ldrb	r3, [r7, #22]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0cd      	beq.n	80042f0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b02      	cmp	r3, #2
 8004368:	d129      	bne.n	80043be <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004378:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800437a:	2300      	movs	r3, #0
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	613b      	str	r3, [r7, #16]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	9300      	str	r3, [sp, #0]
 8004394:	2319      	movs	r3, #25
 8004396:	2201      	movs	r2, #1
 8004398:	4921      	ldr	r1, [pc, #132]	@ (8004420 <HAL_I2C_IsDeviceReady+0x254>)
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	f000 fb12 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e036      	b.n	8004418 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2220      	movs	r2, #32
 80043ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	e02c      	b.n	8004418 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043cc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043d6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	9300      	str	r3, [sp, #0]
 80043dc:	2319      	movs	r3, #25
 80043de:	2201      	movs	r2, #1
 80043e0:	490f      	ldr	r1, [pc, #60]	@ (8004420 <HAL_I2C_IsDeviceReady+0x254>)
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 faee 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d001      	beq.n	80043f2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e012      	b.n	8004418 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	3301      	adds	r3, #1
 80043f6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80043f8:	69ba      	ldr	r2, [r7, #24]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	f4ff af32 	bcc.w	8004266 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2220      	movs	r2, #32
 8004406:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e000      	b.n	8004418 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004416:	2302      	movs	r3, #2
  }
}
 8004418:	4618      	mov	r0, r3
 800441a:	3720      	adds	r7, #32
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	00100002 	.word	0x00100002
 8004424:	ffff0000 	.word	0xffff0000

08004428 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b088      	sub	sp, #32
 800442c:	af02      	add	r7, sp, #8
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	607a      	str	r2, [r7, #4]
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	460b      	mov	r3, r1
 8004436:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	2b08      	cmp	r3, #8
 8004442:	d006      	beq.n	8004452 <I2C_MasterRequestWrite+0x2a>
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d003      	beq.n	8004452 <I2C_MasterRequestWrite+0x2a>
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004450:	d108      	bne.n	8004464 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	e00b      	b.n	800447c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004468:	2b12      	cmp	r3, #18
 800446a:	d107      	bne.n	800447c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800447a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 fa9b 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 800448e:	4603      	mov	r3, r0
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00d      	beq.n	80044b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800449e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044a2:	d103      	bne.n	80044ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80044aa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e035      	b.n	800451c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044b8:	d108      	bne.n	80044cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044ba:	897b      	ldrh	r3, [r7, #10]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	461a      	mov	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80044c8:	611a      	str	r2, [r3, #16]
 80044ca:	e01b      	b.n	8004504 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80044cc:	897b      	ldrh	r3, [r7, #10]
 80044ce:	11db      	asrs	r3, r3, #7
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	f003 0306 	and.w	r3, r3, #6
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	f063 030f 	orn	r3, r3, #15
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	490e      	ldr	r1, [pc, #56]	@ (8004524 <I2C_MasterRequestWrite+0xfc>)
 80044ea:	68f8      	ldr	r0, [r7, #12]
 80044ec:	f000 fae4 	bl	8004ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d001      	beq.n	80044fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e010      	b.n	800451c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80044fa:	897b      	ldrh	r3, [r7, #10]
 80044fc:	b2da      	uxtb	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	4907      	ldr	r1, [pc, #28]	@ (8004528 <I2C_MasterRequestWrite+0x100>)
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 fad4 	bl	8004ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3718      	adds	r7, #24
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	00010008 	.word	0x00010008
 8004528:	00010002 	.word	0x00010002

0800452c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b088      	sub	sp, #32
 8004530:	af02      	add	r7, sp, #8
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	607a      	str	r2, [r7, #4]
 8004536:	603b      	str	r3, [r7, #0]
 8004538:	460b      	mov	r3, r1
 800453a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004540:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004550:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	2b08      	cmp	r3, #8
 8004556:	d006      	beq.n	8004566 <I2C_MasterRequestRead+0x3a>
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d003      	beq.n	8004566 <I2C_MasterRequestRead+0x3a>
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004564:	d108      	bne.n	8004578 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	e00b      	b.n	8004590 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457c:	2b11      	cmp	r3, #17
 800457e:	d107      	bne.n	8004590 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800458e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	9300      	str	r3, [sp, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 fa11 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00d      	beq.n	80045c4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045b6:	d103      	bne.n	80045c0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045be:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e079      	b.n	80046b8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	691b      	ldr	r3, [r3, #16]
 80045c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045cc:	d108      	bne.n	80045e0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045ce:	897b      	ldrh	r3, [r7, #10]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	f043 0301 	orr.w	r3, r3, #1
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	611a      	str	r2, [r3, #16]
 80045de:	e05f      	b.n	80046a0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80045e0:	897b      	ldrh	r3, [r7, #10]
 80045e2:	11db      	asrs	r3, r3, #7
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	f003 0306 	and.w	r3, r3, #6
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	f063 030f 	orn	r3, r3, #15
 80045f0:	b2da      	uxtb	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	4930      	ldr	r1, [pc, #192]	@ (80046c0 <I2C_MasterRequestRead+0x194>)
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 fa5a 	bl	8004ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e054      	b.n	80046b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800460e:	897b      	ldrh	r3, [r7, #10]
 8004610:	b2da      	uxtb	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	4929      	ldr	r1, [pc, #164]	@ (80046c4 <I2C_MasterRequestRead+0x198>)
 800461e:	68f8      	ldr	r0, [r7, #12]
 8004620:	f000 fa4a 	bl	8004ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004624:	4603      	mov	r3, r0
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e044      	b.n	80046b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800462e:	2300      	movs	r3, #0
 8004630:	613b      	str	r3, [r7, #16]
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	699b      	ldr	r3, [r3, #24]
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004652:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 f9af 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00d      	beq.n	8004688 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800467a:	d103      	bne.n	8004684 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004682:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e017      	b.n	80046b8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004688:	897b      	ldrh	r3, [r7, #10]
 800468a:	11db      	asrs	r3, r3, #7
 800468c:	b2db      	uxtb	r3, r3
 800468e:	f003 0306 	and.w	r3, r3, #6
 8004692:	b2db      	uxtb	r3, r3
 8004694:	f063 030e 	orn	r3, r3, #14
 8004698:	b2da      	uxtb	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	4907      	ldr	r1, [pc, #28]	@ (80046c4 <I2C_MasterRequestRead+0x198>)
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 fa06 	bl	8004ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3718      	adds	r7, #24
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	00010008 	.word	0x00010008
 80046c4:	00010002 	.word	0x00010002

080046c8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af02      	add	r7, sp, #8
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	4608      	mov	r0, r1
 80046d2:	4611      	mov	r1, r2
 80046d4:	461a      	mov	r2, r3
 80046d6:	4603      	mov	r3, r0
 80046d8:	817b      	strh	r3, [r7, #10]
 80046da:	460b      	mov	r3, r1
 80046dc:	813b      	strh	r3, [r7, #8]
 80046de:	4613      	mov	r3, r2
 80046e0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 f960 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00d      	beq.n	8004726 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004714:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004718:	d103      	bne.n	8004722 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004720:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e05f      	b.n	80047e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004726:	897b      	ldrh	r3, [r7, #10]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	461a      	mov	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004734:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004738:	6a3a      	ldr	r2, [r7, #32]
 800473a:	492d      	ldr	r1, [pc, #180]	@ (80047f0 <I2C_RequestMemoryWrite+0x128>)
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 f9bb 	bl	8004ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e04c      	b.n	80047e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	695b      	ldr	r3, [r3, #20]
 8004756:	617b      	str	r3, [r7, #20]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699b      	ldr	r3, [r3, #24]
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004762:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004764:	6a39      	ldr	r1, [r7, #32]
 8004766:	68f8      	ldr	r0, [r7, #12]
 8004768:	f000 fa46 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00d      	beq.n	800478e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004776:	2b04      	cmp	r3, #4
 8004778:	d107      	bne.n	800478a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004788:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e02b      	b.n	80047e6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800478e:	88fb      	ldrh	r3, [r7, #6]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d105      	bne.n	80047a0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004794:	893b      	ldrh	r3, [r7, #8]
 8004796:	b2da      	uxtb	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	611a      	str	r2, [r3, #16]
 800479e:	e021      	b.n	80047e4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80047a0:	893b      	ldrh	r3, [r7, #8]
 80047a2:	0a1b      	lsrs	r3, r3, #8
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80047ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047b0:	6a39      	ldr	r1, [r7, #32]
 80047b2:	68f8      	ldr	r0, [r7, #12]
 80047b4:	f000 fa20 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00d      	beq.n	80047da <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d107      	bne.n	80047d6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e005      	b.n	80047e6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80047da:	893b      	ldrh	r3, [r7, #8]
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3718      	adds	r7, #24
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	00010002 	.word	0x00010002

080047f4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	4608      	mov	r0, r1
 80047fe:	4611      	mov	r1, r2
 8004800:	461a      	mov	r2, r3
 8004802:	4603      	mov	r3, r0
 8004804:	817b      	strh	r3, [r7, #10]
 8004806:	460b      	mov	r3, r1
 8004808:	813b      	strh	r3, [r7, #8]
 800480a:	4613      	mov	r3, r2
 800480c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800481c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800482c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	2200      	movs	r2, #0
 8004836:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 f8c2 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00d      	beq.n	8004862 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004850:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004854:	d103      	bne.n	800485e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800485c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e0aa      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004862:	897b      	ldrh	r3, [r7, #10]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	461a      	mov	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004870:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004874:	6a3a      	ldr	r2, [r7, #32]
 8004876:	4952      	ldr	r1, [pc, #328]	@ (80049c0 <I2C_RequestMemoryRead+0x1cc>)
 8004878:	68f8      	ldr	r0, [r7, #12]
 800487a:	f000 f91d 	bl	8004ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800487e:	4603      	mov	r3, r0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e097      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004888:	2300      	movs	r3, #0
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	617b      	str	r3, [r7, #20]
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800489e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048a0:	6a39      	ldr	r1, [r7, #32]
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 f9a8 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00d      	beq.n	80048ca <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d107      	bne.n	80048c6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048c4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e076      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80048ca:	88fb      	ldrh	r3, [r7, #6]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d105      	bne.n	80048dc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048d0:	893b      	ldrh	r3, [r7, #8]
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	611a      	str	r2, [r3, #16]
 80048da:	e021      	b.n	8004920 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80048dc:	893b      	ldrh	r3, [r7, #8]
 80048de:	0a1b      	lsrs	r3, r3, #8
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	b2da      	uxtb	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80048ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ec:	6a39      	ldr	r1, [r7, #32]
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 f982 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00d      	beq.n	8004916 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fe:	2b04      	cmp	r3, #4
 8004900:	d107      	bne.n	8004912 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004910:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e050      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004916:	893b      	ldrh	r3, [r7, #8]
 8004918:	b2da      	uxtb	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004920:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004922:	6a39      	ldr	r1, [r7, #32]
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f000 f967 	bl	8004bf8 <I2C_WaitOnTXEFlagUntilTimeout>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00d      	beq.n	800494c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004934:	2b04      	cmp	r3, #4
 8004936:	d107      	bne.n	8004948 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004946:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e035      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800495a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800495c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	2200      	movs	r2, #0
 8004964:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004968:	68f8      	ldr	r0, [r7, #12]
 800496a:	f000 f82b 	bl	80049c4 <I2C_WaitOnFlagUntilTimeout>
 800496e:	4603      	mov	r3, r0
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00d      	beq.n	8004990 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004982:	d103      	bne.n	800498c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800498a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e013      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004990:	897b      	ldrh	r3, [r7, #10]
 8004992:	b2db      	uxtb	r3, r3
 8004994:	f043 0301 	orr.w	r3, r3, #1
 8004998:	b2da      	uxtb	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a2:	6a3a      	ldr	r2, [r7, #32]
 80049a4:	4906      	ldr	r1, [pc, #24]	@ (80049c0 <I2C_RequestMemoryRead+0x1cc>)
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 f886 	bl	8004ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e000      	b.n	80049b8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	00010002 	.word	0x00010002

080049c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	603b      	str	r3, [r7, #0]
 80049d0:	4613      	mov	r3, r2
 80049d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049d4:	e048      	b.n	8004a68 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049dc:	d044      	beq.n	8004a68 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049de:	f7fd fa67 	bl	8001eb0 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d302      	bcc.n	80049f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d139      	bne.n	8004a68 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	0c1b      	lsrs	r3, r3, #16
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d10d      	bne.n	8004a1a <I2C_WaitOnFlagUntilTimeout+0x56>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	695b      	ldr	r3, [r3, #20]
 8004a04:	43da      	mvns	r2, r3
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	bf0c      	ite	eq
 8004a10:	2301      	moveq	r3, #1
 8004a12:	2300      	movne	r3, #0
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	461a      	mov	r2, r3
 8004a18:	e00c      	b.n	8004a34 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	43da      	mvns	r2, r3
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	4013      	ands	r3, r2
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2301      	moveq	r3, #1
 8004a2e:	2300      	movne	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	461a      	mov	r2, r3
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d116      	bne.n	8004a68 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2220      	movs	r2, #32
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a54:	f043 0220 	orr.w	r2, r3, #32
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e023      	b.n	8004ab0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	0c1b      	lsrs	r3, r3, #16
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d10d      	bne.n	8004a8e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	43da      	mvns	r2, r3
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	bf0c      	ite	eq
 8004a84:	2301      	moveq	r3, #1
 8004a86:	2300      	movne	r3, #0
 8004a88:	b2db      	uxtb	r3, r3
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	e00c      	b.n	8004aa8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	43da      	mvns	r2, r3
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	bf0c      	ite	eq
 8004aa0:	2301      	moveq	r3, #1
 8004aa2:	2300      	movne	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d093      	beq.n	80049d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b084      	sub	sp, #16
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
 8004ac4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ac6:	e071      	b.n	8004bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	695b      	ldr	r3, [r3, #20]
 8004ace:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ad6:	d123      	bne.n	8004b20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ae6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004af0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2220      	movs	r2, #32
 8004afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0c:	f043 0204 	orr.w	r2, r3, #4
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e067      	b.n	8004bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b26:	d041      	beq.n	8004bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b28:	f7fd f9c2 	bl	8001eb0 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d302      	bcc.n	8004b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d136      	bne.n	8004bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	0c1b      	lsrs	r3, r3, #16
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d10c      	bne.n	8004b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	43da      	mvns	r2, r3
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	4013      	ands	r3, r2
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	bf14      	ite	ne
 8004b5a:	2301      	movne	r3, #1
 8004b5c:	2300      	moveq	r3, #0
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	e00b      	b.n	8004b7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	699b      	ldr	r3, [r3, #24]
 8004b68:	43da      	mvns	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	bf14      	ite	ne
 8004b74:	2301      	movne	r3, #1
 8004b76:	2300      	moveq	r3, #0
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d016      	beq.n	8004bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b98:	f043 0220 	orr.w	r2, r3, #32
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e021      	b.n	8004bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	0c1b      	lsrs	r3, r3, #16
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d10c      	bne.n	8004bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	43da      	mvns	r2, r3
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	bf14      	ite	ne
 8004bc8:	2301      	movne	r3, #1
 8004bca:	2300      	moveq	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	e00b      	b.n	8004be8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	43da      	mvns	r2, r3
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	4013      	ands	r3, r2
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	bf14      	ite	ne
 8004be2:	2301      	movne	r3, #1
 8004be4:	2300      	moveq	r3, #0
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f47f af6d 	bne.w	8004ac8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c04:	e034      	b.n	8004c70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	f000 f8e3 	bl	8004dd2 <I2C_IsAcknowledgeFailed>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e034      	b.n	8004c80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c1c:	d028      	beq.n	8004c70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c1e:	f7fd f947 	bl	8001eb0 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d302      	bcc.n	8004c34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d11d      	bne.n	8004c70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c3e:	2b80      	cmp	r3, #128	@ 0x80
 8004c40:	d016      	beq.n	8004c70 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5c:	f043 0220 	orr.w	r2, r3, #32
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e007      	b.n	8004c80 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c7a:	2b80      	cmp	r3, #128	@ 0x80
 8004c7c:	d1c3      	bne.n	8004c06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004c7e:	2300      	movs	r3, #0
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c94:	e034      	b.n	8004d00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f89b 	bl	8004dd2 <I2C_IsAcknowledgeFailed>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d001      	beq.n	8004ca6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e034      	b.n	8004d10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004cac:	d028      	beq.n	8004d00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cae:	f7fd f8ff 	bl	8001eb0 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d302      	bcc.n	8004cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d11d      	bne.n	8004d00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d016      	beq.n	8004d00 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cec:	f043 0220 	orr.w	r2, r3, #32
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e007      	b.n	8004d10 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b04      	cmp	r3, #4
 8004d0c:	d1c3      	bne.n	8004c96 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	60f8      	str	r0, [r7, #12]
 8004d20:	60b9      	str	r1, [r7, #8]
 8004d22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d24:	e049      	b.n	8004dba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	695b      	ldr	r3, [r3, #20]
 8004d2c:	f003 0310 	and.w	r3, r3, #16
 8004d30:	2b10      	cmp	r3, #16
 8004d32:	d119      	bne.n	8004d68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0210 	mvn.w	r2, #16
 8004d3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e030      	b.n	8004dca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d68:	f7fd f8a2 	bl	8001eb0 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d302      	bcc.n	8004d7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d11d      	bne.n	8004dba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d88:	2b40      	cmp	r3, #64	@ 0x40
 8004d8a:	d016      	beq.n	8004dba <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	f043 0220 	orr.w	r2, r3, #32
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e007      	b.n	8004dca <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dc4:	2b40      	cmp	r3, #64	@ 0x40
 8004dc6:	d1ae      	bne.n	8004d26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695b      	ldr	r3, [r3, #20]
 8004de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004de4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004de8:	d11b      	bne.n	8004e22 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004df2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0e:	f043 0204 	orr.w	r2, r3, #4
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bc80      	pop	{r7}
 8004e2c:	4770      	bx	lr
	...

08004e30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e272      	b.n	8005328 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 8087 	beq.w	8004f5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004e50:	4b92      	ldr	r3, [pc, #584]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	f003 030c 	and.w	r3, r3, #12
 8004e58:	2b04      	cmp	r3, #4
 8004e5a:	d00c      	beq.n	8004e76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004e5c:	4b8f      	ldr	r3, [pc, #572]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f003 030c 	and.w	r3, r3, #12
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d112      	bne.n	8004e8e <HAL_RCC_OscConfig+0x5e>
 8004e68:	4b8c      	ldr	r3, [pc, #560]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e74:	d10b      	bne.n	8004e8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e76:	4b89      	ldr	r3, [pc, #548]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d06c      	beq.n	8004f5c <HAL_RCC_OscConfig+0x12c>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d168      	bne.n	8004f5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e24c      	b.n	8005328 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e96:	d106      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x76>
 8004e98:	4b80      	ldr	r3, [pc, #512]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a7f      	ldr	r2, [pc, #508]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004e9e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ea2:	6013      	str	r3, [r2, #0]
 8004ea4:	e02e      	b.n	8004f04 <HAL_RCC_OscConfig+0xd4>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10c      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x98>
 8004eae:	4b7b      	ldr	r3, [pc, #492]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a7a      	ldr	r2, [pc, #488]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004eb4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	4b78      	ldr	r3, [pc, #480]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a77      	ldr	r2, [pc, #476]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004ec0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	e01d      	b.n	8004f04 <HAL_RCC_OscConfig+0xd4>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ed0:	d10c      	bne.n	8004eec <HAL_RCC_OscConfig+0xbc>
 8004ed2:	4b72      	ldr	r3, [pc, #456]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a71      	ldr	r2, [pc, #452]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004ed8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	4b6f      	ldr	r3, [pc, #444]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a6e      	ldr	r2, [pc, #440]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004ee4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	e00b      	b.n	8004f04 <HAL_RCC_OscConfig+0xd4>
 8004eec:	4b6b      	ldr	r3, [pc, #428]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a6a      	ldr	r2, [pc, #424]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004ef2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ef6:	6013      	str	r3, [r2, #0]
 8004ef8:	4b68      	ldr	r3, [pc, #416]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a67      	ldr	r2, [pc, #412]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004efe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d013      	beq.n	8004f34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f0c:	f7fc ffd0 	bl	8001eb0 <HAL_GetTick>
 8004f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f12:	e008      	b.n	8004f26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f14:	f7fc ffcc 	bl	8001eb0 <HAL_GetTick>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b64      	cmp	r3, #100	@ 0x64
 8004f20:	d901      	bls.n	8004f26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e200      	b.n	8005328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f26:	4b5d      	ldr	r3, [pc, #372]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d0f0      	beq.n	8004f14 <HAL_RCC_OscConfig+0xe4>
 8004f32:	e014      	b.n	8004f5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f34:	f7fc ffbc 	bl	8001eb0 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f3c:	f7fc ffb8 	bl	8001eb0 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b64      	cmp	r3, #100	@ 0x64
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e1ec      	b.n	8005328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f4e:	4b53      	ldr	r3, [pc, #332]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f0      	bne.n	8004f3c <HAL_RCC_OscConfig+0x10c>
 8004f5a:	e000      	b.n	8004f5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d063      	beq.n	8005032 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004f6a:	4b4c      	ldr	r3, [pc, #304]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f003 030c 	and.w	r3, r3, #12
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00b      	beq.n	8004f8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004f76:	4b49      	ldr	r3, [pc, #292]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f003 030c 	and.w	r3, r3, #12
 8004f7e:	2b08      	cmp	r3, #8
 8004f80:	d11c      	bne.n	8004fbc <HAL_RCC_OscConfig+0x18c>
 8004f82:	4b46      	ldr	r3, [pc, #280]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d116      	bne.n	8004fbc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f8e:	4b43      	ldr	r3, [pc, #268]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d005      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x176>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d001      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e1c0      	b.n	8005328 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa6:	4b3d      	ldr	r3, [pc, #244]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	00db      	lsls	r3, r3, #3
 8004fb4:	4939      	ldr	r1, [pc, #228]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fba:	e03a      	b.n	8005032 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d020      	beq.n	8005006 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fc4:	4b36      	ldr	r3, [pc, #216]	@ (80050a0 <HAL_RCC_OscConfig+0x270>)
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fca:	f7fc ff71 	bl	8001eb0 <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fd2:	f7fc ff6d 	bl	8001eb0 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e1a1      	b.n	8005328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe4:	4b2d      	ldr	r3, [pc, #180]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f0      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff0:	4b2a      	ldr	r3, [pc, #168]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	695b      	ldr	r3, [r3, #20]
 8004ffc:	00db      	lsls	r3, r3, #3
 8004ffe:	4927      	ldr	r1, [pc, #156]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8005000:	4313      	orrs	r3, r2
 8005002:	600b      	str	r3, [r1, #0]
 8005004:	e015      	b.n	8005032 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005006:	4b26      	ldr	r3, [pc, #152]	@ (80050a0 <HAL_RCC_OscConfig+0x270>)
 8005008:	2200      	movs	r2, #0
 800500a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800500c:	f7fc ff50 	bl	8001eb0 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005014:	f7fc ff4c 	bl	8001eb0 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e180      	b.n	8005328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005026:	4b1d      	ldr	r3, [pc, #116]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d1f0      	bne.n	8005014 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d03a      	beq.n	80050b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d019      	beq.n	800507a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005046:	4b17      	ldr	r3, [pc, #92]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 8005048:	2201      	movs	r2, #1
 800504a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800504c:	f7fc ff30 	bl	8001eb0 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005052:	e008      	b.n	8005066 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005054:	f7fc ff2c 	bl	8001eb0 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	2b02      	cmp	r3, #2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e160      	b.n	8005328 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005066:	4b0d      	ldr	r3, [pc, #52]	@ (800509c <HAL_RCC_OscConfig+0x26c>)
 8005068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d0f0      	beq.n	8005054 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005072:	2001      	movs	r0, #1
 8005074:	f000 face 	bl	8005614 <RCC_Delay>
 8005078:	e01c      	b.n	80050b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800507a:	4b0a      	ldr	r3, [pc, #40]	@ (80050a4 <HAL_RCC_OscConfig+0x274>)
 800507c:	2200      	movs	r2, #0
 800507e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005080:	f7fc ff16 	bl	8001eb0 <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005086:	e00f      	b.n	80050a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005088:	f7fc ff12 	bl	8001eb0 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d908      	bls.n	80050a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e146      	b.n	8005328 <HAL_RCC_OscConfig+0x4f8>
 800509a:	bf00      	nop
 800509c:	40021000 	.word	0x40021000
 80050a0:	42420000 	.word	0x42420000
 80050a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050a8:	4b92      	ldr	r3, [pc, #584]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 80050aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d1e9      	bne.n	8005088 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0304 	and.w	r3, r3, #4
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f000 80a6 	beq.w	800520e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050c2:	2300      	movs	r3, #0
 80050c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050c6:	4b8b      	ldr	r3, [pc, #556]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 80050c8:	69db      	ldr	r3, [r3, #28]
 80050ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d10d      	bne.n	80050ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050d2:	4b88      	ldr	r3, [pc, #544]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 80050d4:	69db      	ldr	r3, [r3, #28]
 80050d6:	4a87      	ldr	r2, [pc, #540]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 80050d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050dc:	61d3      	str	r3, [r2, #28]
 80050de:	4b85      	ldr	r3, [pc, #532]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050e6:	60bb      	str	r3, [r7, #8]
 80050e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050ea:	2301      	movs	r3, #1
 80050ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050ee:	4b82      	ldr	r3, [pc, #520]	@ (80052f8 <HAL_RCC_OscConfig+0x4c8>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d118      	bne.n	800512c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050fa:	4b7f      	ldr	r3, [pc, #508]	@ (80052f8 <HAL_RCC_OscConfig+0x4c8>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a7e      	ldr	r2, [pc, #504]	@ (80052f8 <HAL_RCC_OscConfig+0x4c8>)
 8005100:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005106:	f7fc fed3 	bl	8001eb0 <HAL_GetTick>
 800510a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800510c:	e008      	b.n	8005120 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800510e:	f7fc fecf 	bl	8001eb0 <HAL_GetTick>
 8005112:	4602      	mov	r2, r0
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	1ad3      	subs	r3, r2, r3
 8005118:	2b64      	cmp	r3, #100	@ 0x64
 800511a:	d901      	bls.n	8005120 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e103      	b.n	8005328 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005120:	4b75      	ldr	r3, [pc, #468]	@ (80052f8 <HAL_RCC_OscConfig+0x4c8>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005128:	2b00      	cmp	r3, #0
 800512a:	d0f0      	beq.n	800510e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d106      	bne.n	8005142 <HAL_RCC_OscConfig+0x312>
 8005134:	4b6f      	ldr	r3, [pc, #444]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 8005136:	6a1b      	ldr	r3, [r3, #32]
 8005138:	4a6e      	ldr	r2, [pc, #440]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 800513a:	f043 0301 	orr.w	r3, r3, #1
 800513e:	6213      	str	r3, [r2, #32]
 8005140:	e02d      	b.n	800519e <HAL_RCC_OscConfig+0x36e>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10c      	bne.n	8005164 <HAL_RCC_OscConfig+0x334>
 800514a:	4b6a      	ldr	r3, [pc, #424]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	4a69      	ldr	r2, [pc, #420]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 8005150:	f023 0301 	bic.w	r3, r3, #1
 8005154:	6213      	str	r3, [r2, #32]
 8005156:	4b67      	ldr	r3, [pc, #412]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	4a66      	ldr	r2, [pc, #408]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 800515c:	f023 0304 	bic.w	r3, r3, #4
 8005160:	6213      	str	r3, [r2, #32]
 8005162:	e01c      	b.n	800519e <HAL_RCC_OscConfig+0x36e>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	2b05      	cmp	r3, #5
 800516a:	d10c      	bne.n	8005186 <HAL_RCC_OscConfig+0x356>
 800516c:	4b61      	ldr	r3, [pc, #388]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	4a60      	ldr	r2, [pc, #384]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 8005172:	f043 0304 	orr.w	r3, r3, #4
 8005176:	6213      	str	r3, [r2, #32]
 8005178:	4b5e      	ldr	r3, [pc, #376]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	4a5d      	ldr	r2, [pc, #372]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 800517e:	f043 0301 	orr.w	r3, r3, #1
 8005182:	6213      	str	r3, [r2, #32]
 8005184:	e00b      	b.n	800519e <HAL_RCC_OscConfig+0x36e>
 8005186:	4b5b      	ldr	r3, [pc, #364]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	4a5a      	ldr	r2, [pc, #360]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 800518c:	f023 0301 	bic.w	r3, r3, #1
 8005190:	6213      	str	r3, [r2, #32]
 8005192:	4b58      	ldr	r3, [pc, #352]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	4a57      	ldr	r2, [pc, #348]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 8005198:	f023 0304 	bic.w	r3, r3, #4
 800519c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d015      	beq.n	80051d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051a6:	f7fc fe83 	bl	8001eb0 <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ac:	e00a      	b.n	80051c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ae:	f7fc fe7f 	bl	8001eb0 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051bc:	4293      	cmp	r3, r2
 80051be:	d901      	bls.n	80051c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e0b1      	b.n	8005328 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c4:	4b4b      	ldr	r3, [pc, #300]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0ee      	beq.n	80051ae <HAL_RCC_OscConfig+0x37e>
 80051d0:	e014      	b.n	80051fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051d2:	f7fc fe6d 	bl	8001eb0 <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051d8:	e00a      	b.n	80051f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051da:	f7fc fe69 	bl	8001eb0 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e09b      	b.n	8005328 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051f0:	4b40      	ldr	r3, [pc, #256]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1ee      	bne.n	80051da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051fc:	7dfb      	ldrb	r3, [r7, #23]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d105      	bne.n	800520e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005202:	4b3c      	ldr	r3, [pc, #240]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	4a3b      	ldr	r2, [pc, #236]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 8005208:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800520c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 8087 	beq.w	8005326 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005218:	4b36      	ldr	r3, [pc, #216]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	f003 030c 	and.w	r3, r3, #12
 8005220:	2b08      	cmp	r3, #8
 8005222:	d061      	beq.n	80052e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	2b02      	cmp	r3, #2
 800522a:	d146      	bne.n	80052ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800522c:	4b33      	ldr	r3, [pc, #204]	@ (80052fc <HAL_RCC_OscConfig+0x4cc>)
 800522e:	2200      	movs	r2, #0
 8005230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005232:	f7fc fe3d 	bl	8001eb0 <HAL_GetTick>
 8005236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005238:	e008      	b.n	800524c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800523a:	f7fc fe39 	bl	8001eb0 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e06d      	b.n	8005328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800524c:	4b29      	ldr	r3, [pc, #164]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1f0      	bne.n	800523a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005260:	d108      	bne.n	8005274 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005262:	4b24      	ldr	r3, [pc, #144]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	4921      	ldr	r1, [pc, #132]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 8005270:	4313      	orrs	r3, r2
 8005272:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005274:	4b1f      	ldr	r3, [pc, #124]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a19      	ldr	r1, [r3, #32]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005284:	430b      	orrs	r3, r1
 8005286:	491b      	ldr	r1, [pc, #108]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 8005288:	4313      	orrs	r3, r2
 800528a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800528c:	4b1b      	ldr	r3, [pc, #108]	@ (80052fc <HAL_RCC_OscConfig+0x4cc>)
 800528e:	2201      	movs	r2, #1
 8005290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005292:	f7fc fe0d 	bl	8001eb0 <HAL_GetTick>
 8005296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005298:	e008      	b.n	80052ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800529a:	f7fc fe09 	bl	8001eb0 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d901      	bls.n	80052ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e03d      	b.n	8005328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80052ac:	4b11      	ldr	r3, [pc, #68]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0f0      	beq.n	800529a <HAL_RCC_OscConfig+0x46a>
 80052b8:	e035      	b.n	8005326 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ba:	4b10      	ldr	r3, [pc, #64]	@ (80052fc <HAL_RCC_OscConfig+0x4cc>)
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c0:	f7fc fdf6 	bl	8001eb0 <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c8:	f7fc fdf2 	bl	8001eb0 <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e026      	b.n	8005328 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052da:	4b06      	ldr	r3, [pc, #24]	@ (80052f4 <HAL_RCC_OscConfig+0x4c4>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1f0      	bne.n	80052c8 <HAL_RCC_OscConfig+0x498>
 80052e6:	e01e      	b.n	8005326 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	69db      	ldr	r3, [r3, #28]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d107      	bne.n	8005300 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e019      	b.n	8005328 <HAL_RCC_OscConfig+0x4f8>
 80052f4:	40021000 	.word	0x40021000
 80052f8:	40007000 	.word	0x40007000
 80052fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005300:	4b0b      	ldr	r3, [pc, #44]	@ (8005330 <HAL_RCC_OscConfig+0x500>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	429a      	cmp	r2, r3
 8005312:	d106      	bne.n	8005322 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800531e:	429a      	cmp	r2, r3
 8005320:	d001      	beq.n	8005326 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e000      	b.n	8005328 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40021000 	.word	0x40021000

08005334 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e0d0      	b.n	80054ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005348:	4b6a      	ldr	r3, [pc, #424]	@ (80054f4 <HAL_RCC_ClockConfig+0x1c0>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0307 	and.w	r3, r3, #7
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	429a      	cmp	r2, r3
 8005354:	d910      	bls.n	8005378 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005356:	4b67      	ldr	r3, [pc, #412]	@ (80054f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f023 0207 	bic.w	r2, r3, #7
 800535e:	4965      	ldr	r1, [pc, #404]	@ (80054f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	4313      	orrs	r3, r2
 8005364:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005366:	4b63      	ldr	r3, [pc, #396]	@ (80054f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0307 	and.w	r3, r3, #7
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d001      	beq.n	8005378 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e0b8      	b.n	80054ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f003 0302 	and.w	r3, r3, #2
 8005380:	2b00      	cmp	r3, #0
 8005382:	d020      	beq.n	80053c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b00      	cmp	r3, #0
 800538e:	d005      	beq.n	800539c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005390:	4b59      	ldr	r3, [pc, #356]	@ (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	4a58      	ldr	r2, [pc, #352]	@ (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005396:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800539a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0308 	and.w	r3, r3, #8
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d005      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053a8:	4b53      	ldr	r3, [pc, #332]	@ (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	4a52      	ldr	r2, [pc, #328]	@ (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 80053ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80053b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053b4:	4b50      	ldr	r3, [pc, #320]	@ (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	494d      	ldr	r1, [pc, #308]	@ (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 80053c2:	4313      	orrs	r3, r2
 80053c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d040      	beq.n	8005454 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d107      	bne.n	80053ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053da:	4b47      	ldr	r3, [pc, #284]	@ (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d115      	bne.n	8005412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e07f      	b.n	80054ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d107      	bne.n	8005402 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053f2:	4b41      	ldr	r3, [pc, #260]	@ (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d109      	bne.n	8005412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e073      	b.n	80054ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005402:	4b3d      	ldr	r3, [pc, #244]	@ (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d101      	bne.n	8005412 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e06b      	b.n	80054ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005412:	4b39      	ldr	r3, [pc, #228]	@ (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	f023 0203 	bic.w	r2, r3, #3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	4936      	ldr	r1, [pc, #216]	@ (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005420:	4313      	orrs	r3, r2
 8005422:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005424:	f7fc fd44 	bl	8001eb0 <HAL_GetTick>
 8005428:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800542a:	e00a      	b.n	8005442 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800542c:	f7fc fd40 	bl	8001eb0 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	f241 3288 	movw	r2, #5000	@ 0x1388
 800543a:	4293      	cmp	r3, r2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e053      	b.n	80054ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005442:	4b2d      	ldr	r3, [pc, #180]	@ (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f003 020c 	and.w	r2, r3, #12
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	429a      	cmp	r2, r3
 8005452:	d1eb      	bne.n	800542c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005454:	4b27      	ldr	r3, [pc, #156]	@ (80054f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	429a      	cmp	r2, r3
 8005460:	d210      	bcs.n	8005484 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005462:	4b24      	ldr	r3, [pc, #144]	@ (80054f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f023 0207 	bic.w	r2, r3, #7
 800546a:	4922      	ldr	r1, [pc, #136]	@ (80054f4 <HAL_RCC_ClockConfig+0x1c0>)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	4313      	orrs	r3, r2
 8005470:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005472:	4b20      	ldr	r3, [pc, #128]	@ (80054f4 <HAL_RCC_ClockConfig+0x1c0>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	683a      	ldr	r2, [r7, #0]
 800547c:	429a      	cmp	r2, r3
 800547e:	d001      	beq.n	8005484 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e032      	b.n	80054ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0304 	and.w	r3, r3, #4
 800548c:	2b00      	cmp	r3, #0
 800548e:	d008      	beq.n	80054a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005490:	4b19      	ldr	r3, [pc, #100]	@ (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	4916      	ldr	r1, [pc, #88]	@ (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d009      	beq.n	80054c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80054ae:	4b12      	ldr	r3, [pc, #72]	@ (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	490e      	ldr	r1, [pc, #56]	@ (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054c2:	f000 f821 	bl	8005508 <HAL_RCC_GetSysClockFreq>
 80054c6:	4602      	mov	r2, r0
 80054c8:	4b0b      	ldr	r3, [pc, #44]	@ (80054f8 <HAL_RCC_ClockConfig+0x1c4>)
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	091b      	lsrs	r3, r3, #4
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	490a      	ldr	r1, [pc, #40]	@ (80054fc <HAL_RCC_ClockConfig+0x1c8>)
 80054d4:	5ccb      	ldrb	r3, [r1, r3]
 80054d6:	fa22 f303 	lsr.w	r3, r2, r3
 80054da:	4a09      	ldr	r2, [pc, #36]	@ (8005500 <HAL_RCC_ClockConfig+0x1cc>)
 80054dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80054de:	4b09      	ldr	r3, [pc, #36]	@ (8005504 <HAL_RCC_ClockConfig+0x1d0>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4618      	mov	r0, r3
 80054e4:	f7fc fca2 	bl	8001e2c <HAL_InitTick>

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	40022000 	.word	0x40022000
 80054f8:	40021000 	.word	0x40021000
 80054fc:	0800ac2c 	.word	0x0800ac2c
 8005500:	2000001c 	.word	0x2000001c
 8005504:	20000020 	.word	0x20000020

08005508 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	2300      	movs	r3, #0
 8005514:	60bb      	str	r3, [r7, #8]
 8005516:	2300      	movs	r3, #0
 8005518:	617b      	str	r3, [r7, #20]
 800551a:	2300      	movs	r3, #0
 800551c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005522:	4b1e      	ldr	r3, [pc, #120]	@ (800559c <HAL_RCC_GetSysClockFreq+0x94>)
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f003 030c 	and.w	r3, r3, #12
 800552e:	2b04      	cmp	r3, #4
 8005530:	d002      	beq.n	8005538 <HAL_RCC_GetSysClockFreq+0x30>
 8005532:	2b08      	cmp	r3, #8
 8005534:	d003      	beq.n	800553e <HAL_RCC_GetSysClockFreq+0x36>
 8005536:	e027      	b.n	8005588 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005538:	4b19      	ldr	r3, [pc, #100]	@ (80055a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800553a:	613b      	str	r3, [r7, #16]
      break;
 800553c:	e027      	b.n	800558e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	0c9b      	lsrs	r3, r3, #18
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	4a17      	ldr	r2, [pc, #92]	@ (80055a4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005548:	5cd3      	ldrb	r3, [r2, r3]
 800554a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005552:	2b00      	cmp	r3, #0
 8005554:	d010      	beq.n	8005578 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005556:	4b11      	ldr	r3, [pc, #68]	@ (800559c <HAL_RCC_GetSysClockFreq+0x94>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	0c5b      	lsrs	r3, r3, #17
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	4a11      	ldr	r2, [pc, #68]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005562:	5cd3      	ldrb	r3, [r2, r3]
 8005564:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a0d      	ldr	r2, [pc, #52]	@ (80055a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800556a:	fb03 f202 	mul.w	r2, r3, r2
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	fbb2 f3f3 	udiv	r3, r2, r3
 8005574:	617b      	str	r3, [r7, #20]
 8005576:	e004      	b.n	8005582 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a0c      	ldr	r2, [pc, #48]	@ (80055ac <HAL_RCC_GetSysClockFreq+0xa4>)
 800557c:	fb02 f303 	mul.w	r3, r2, r3
 8005580:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	613b      	str	r3, [r7, #16]
      break;
 8005586:	e002      	b.n	800558e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005588:	4b05      	ldr	r3, [pc, #20]	@ (80055a0 <HAL_RCC_GetSysClockFreq+0x98>)
 800558a:	613b      	str	r3, [r7, #16]
      break;
 800558c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800558e:	693b      	ldr	r3, [r7, #16]
}
 8005590:	4618      	mov	r0, r3
 8005592:	371c      	adds	r7, #28
 8005594:	46bd      	mov	sp, r7
 8005596:	bc80      	pop	{r7}
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	40021000 	.word	0x40021000
 80055a0:	007a1200 	.word	0x007a1200
 80055a4:	0800ac44 	.word	0x0800ac44
 80055a8:	0800ac54 	.word	0x0800ac54
 80055ac:	003d0900 	.word	0x003d0900

080055b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055b4:	4b02      	ldr	r3, [pc, #8]	@ (80055c0 <HAL_RCC_GetHCLKFreq+0x10>)
 80055b6:	681b      	ldr	r3, [r3, #0]
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bc80      	pop	{r7}
 80055be:	4770      	bx	lr
 80055c0:	2000001c 	.word	0x2000001c

080055c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055c8:	f7ff fff2 	bl	80055b0 <HAL_RCC_GetHCLKFreq>
 80055cc:	4602      	mov	r2, r0
 80055ce:	4b05      	ldr	r3, [pc, #20]	@ (80055e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	0a1b      	lsrs	r3, r3, #8
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	4903      	ldr	r1, [pc, #12]	@ (80055e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055da:	5ccb      	ldrb	r3, [r1, r3]
 80055dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	40021000 	.word	0x40021000
 80055e8:	0800ac3c 	.word	0x0800ac3c

080055ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80055f0:	f7ff ffde 	bl	80055b0 <HAL_RCC_GetHCLKFreq>
 80055f4:	4602      	mov	r2, r0
 80055f6:	4b05      	ldr	r3, [pc, #20]	@ (800560c <HAL_RCC_GetPCLK2Freq+0x20>)
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	0adb      	lsrs	r3, r3, #11
 80055fc:	f003 0307 	and.w	r3, r3, #7
 8005600:	4903      	ldr	r1, [pc, #12]	@ (8005610 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005602:	5ccb      	ldrb	r3, [r1, r3]
 8005604:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005608:	4618      	mov	r0, r3
 800560a:	bd80      	pop	{r7, pc}
 800560c:	40021000 	.word	0x40021000
 8005610:	0800ac3c 	.word	0x0800ac3c

08005614 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800561c:	4b0a      	ldr	r3, [pc, #40]	@ (8005648 <RCC_Delay+0x34>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a0a      	ldr	r2, [pc, #40]	@ (800564c <RCC_Delay+0x38>)
 8005622:	fba2 2303 	umull	r2, r3, r2, r3
 8005626:	0a5b      	lsrs	r3, r3, #9
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	fb02 f303 	mul.w	r3, r2, r3
 800562e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005630:	bf00      	nop
  }
  while (Delay --);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1e5a      	subs	r2, r3, #1
 8005636:	60fa      	str	r2, [r7, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1f9      	bne.n	8005630 <RCC_Delay+0x1c>
}
 800563c:	bf00      	nop
 800563e:	bf00      	nop
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	bc80      	pop	{r7}
 8005646:	4770      	bx	lr
 8005648:	2000001c 	.word	0x2000001c
 800564c:	10624dd3 	.word	0x10624dd3

08005650 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	613b      	str	r3, [r7, #16]
 800565c:	2300      	movs	r3, #0
 800565e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0301 	and.w	r3, r3, #1
 8005668:	2b00      	cmp	r3, #0
 800566a:	d07d      	beq.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800566c:	2300      	movs	r3, #0
 800566e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005670:	4b4f      	ldr	r3, [pc, #316]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10d      	bne.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800567c:	4b4c      	ldr	r3, [pc, #304]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800567e:	69db      	ldr	r3, [r3, #28]
 8005680:	4a4b      	ldr	r2, [pc, #300]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005686:	61d3      	str	r3, [r2, #28]
 8005688:	4b49      	ldr	r3, [pc, #292]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005690:	60bb      	str	r3, [r7, #8]
 8005692:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005694:	2301      	movs	r3, #1
 8005696:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005698:	4b46      	ldr	r3, [pc, #280]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d118      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056a4:	4b43      	ldr	r3, [pc, #268]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a42      	ldr	r2, [pc, #264]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056ae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056b0:	f7fc fbfe 	bl	8001eb0 <HAL_GetTick>
 80056b4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b6:	e008      	b.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056b8:	f7fc fbfa 	bl	8001eb0 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b64      	cmp	r3, #100	@ 0x64
 80056c4:	d901      	bls.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e06d      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ca:	4b3a      	ldr	r3, [pc, #232]	@ (80057b4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0f0      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056d6:	4b36      	ldr	r3, [pc, #216]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056de:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d02e      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d027      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056f4:	4b2e      	ldr	r3, [pc, #184]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056f6:	6a1b      	ldr	r3, [r3, #32]
 80056f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056fc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056fe:	4b2e      	ldr	r3, [pc, #184]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005700:	2201      	movs	r2, #1
 8005702:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005704:	4b2c      	ldr	r3, [pc, #176]	@ (80057b8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005706:	2200      	movs	r2, #0
 8005708:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800570a:	4a29      	ldr	r2, [pc, #164]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	2b00      	cmp	r3, #0
 8005718:	d014      	beq.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800571a:	f7fc fbc9 	bl	8001eb0 <HAL_GetTick>
 800571e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005720:	e00a      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005722:	f7fc fbc5 	bl	8001eb0 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005730:	4293      	cmp	r3, r2
 8005732:	d901      	bls.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e036      	b.n	80057a6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005738:	4b1d      	ldr	r3, [pc, #116]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	f003 0302 	and.w	r3, r3, #2
 8005740:	2b00      	cmp	r3, #0
 8005742:	d0ee      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005744:	4b1a      	ldr	r3, [pc, #104]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	4917      	ldr	r1, [pc, #92]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005752:	4313      	orrs	r3, r2
 8005754:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005756:	7dfb      	ldrb	r3, [r7, #23]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d105      	bne.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800575c:	4b14      	ldr	r3, [pc, #80]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800575e:	69db      	ldr	r3, [r3, #28]
 8005760:	4a13      	ldr	r2, [pc, #76]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005762:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005766:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	d008      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005774:	4b0e      	ldr	r3, [pc, #56]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	490b      	ldr	r1, [pc, #44]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005782:	4313      	orrs	r3, r2
 8005784:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f003 0310 	and.w	r3, r3, #16
 800578e:	2b00      	cmp	r3, #0
 8005790:	d008      	beq.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005792:	4b07      	ldr	r3, [pc, #28]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	4904      	ldr	r1, [pc, #16]	@ (80057b0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80057a4:	2300      	movs	r3, #0
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	40021000 	.word	0x40021000
 80057b4:	40007000 	.word	0x40007000
 80057b8:	42420440 	.word	0x42420440

080057bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e041      	b.n	8005852 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d106      	bne.n	80057e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f7fc f9f8 	bl	8001bd8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3304      	adds	r3, #4
 80057f8:	4619      	mov	r1, r3
 80057fa:	4610      	mov	r0, r2
 80057fc:	f000 f992 	bl	8005b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2201      	movs	r2, #1
 800583c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3708      	adds	r7, #8
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
	...

0800585c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b084      	sub	sp, #16
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d109      	bne.n	8005880 <HAL_TIM_PWM_Start+0x24>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b01      	cmp	r3, #1
 8005876:	bf14      	ite	ne
 8005878:	2301      	movne	r3, #1
 800587a:	2300      	moveq	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	e022      	b.n	80058c6 <HAL_TIM_PWM_Start+0x6a>
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	2b04      	cmp	r3, #4
 8005884:	d109      	bne.n	800589a <HAL_TIM_PWM_Start+0x3e>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b01      	cmp	r3, #1
 8005890:	bf14      	ite	ne
 8005892:	2301      	movne	r3, #1
 8005894:	2300      	moveq	r3, #0
 8005896:	b2db      	uxtb	r3, r3
 8005898:	e015      	b.n	80058c6 <HAL_TIM_PWM_Start+0x6a>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b08      	cmp	r3, #8
 800589e:	d109      	bne.n	80058b4 <HAL_TIM_PWM_Start+0x58>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	bf14      	ite	ne
 80058ac:	2301      	movne	r3, #1
 80058ae:	2300      	moveq	r3, #0
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	e008      	b.n	80058c6 <HAL_TIM_PWM_Start+0x6a>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b01      	cmp	r3, #1
 80058be:	bf14      	ite	ne
 80058c0:	2301      	movne	r3, #1
 80058c2:	2300      	moveq	r3, #0
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e05e      	b.n	800598c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d104      	bne.n	80058de <HAL_TIM_PWM_Start+0x82>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2202      	movs	r2, #2
 80058d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80058dc:	e013      	b.n	8005906 <HAL_TIM_PWM_Start+0xaa>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d104      	bne.n	80058ee <HAL_TIM_PWM_Start+0x92>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80058ec:	e00b      	b.n	8005906 <HAL_TIM_PWM_Start+0xaa>
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b08      	cmp	r3, #8
 80058f2:	d104      	bne.n	80058fe <HAL_TIM_PWM_Start+0xa2>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80058fc:	e003      	b.n	8005906 <HAL_TIM_PWM_Start+0xaa>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2202      	movs	r2, #2
 8005902:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2201      	movs	r2, #1
 800590c:	6839      	ldr	r1, [r7, #0]
 800590e:	4618      	mov	r0, r3
 8005910:	f000 fafe 	bl	8005f10 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a1e      	ldr	r2, [pc, #120]	@ (8005994 <HAL_TIM_PWM_Start+0x138>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d107      	bne.n	800592e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800592c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a18      	ldr	r2, [pc, #96]	@ (8005994 <HAL_TIM_PWM_Start+0x138>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d00e      	beq.n	8005956 <HAL_TIM_PWM_Start+0xfa>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005940:	d009      	beq.n	8005956 <HAL_TIM_PWM_Start+0xfa>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a14      	ldr	r2, [pc, #80]	@ (8005998 <HAL_TIM_PWM_Start+0x13c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d004      	beq.n	8005956 <HAL_TIM_PWM_Start+0xfa>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a12      	ldr	r2, [pc, #72]	@ (800599c <HAL_TIM_PWM_Start+0x140>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d111      	bne.n	800597a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2b06      	cmp	r3, #6
 8005966:	d010      	beq.n	800598a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f042 0201 	orr.w	r2, r2, #1
 8005976:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005978:	e007      	b.n	800598a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f042 0201 	orr.w	r2, r2, #1
 8005988:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	40012c00 	.word	0x40012c00
 8005998:	40000400 	.word	0x40000400
 800599c:	40000800 	.word	0x40000800

080059a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b086      	sub	sp, #24
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d101      	bne.n	80059be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059ba:	2302      	movs	r3, #2
 80059bc:	e0ae      	b.n	8005b1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b0c      	cmp	r3, #12
 80059ca:	f200 809f 	bhi.w	8005b0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80059ce:	a201      	add	r2, pc, #4	@ (adr r2, 80059d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d4:	08005a09 	.word	0x08005a09
 80059d8:	08005b0d 	.word	0x08005b0d
 80059dc:	08005b0d 	.word	0x08005b0d
 80059e0:	08005b0d 	.word	0x08005b0d
 80059e4:	08005a49 	.word	0x08005a49
 80059e8:	08005b0d 	.word	0x08005b0d
 80059ec:	08005b0d 	.word	0x08005b0d
 80059f0:	08005b0d 	.word	0x08005b0d
 80059f4:	08005a8b 	.word	0x08005a8b
 80059f8:	08005b0d 	.word	0x08005b0d
 80059fc:	08005b0d 	.word	0x08005b0d
 8005a00:	08005b0d 	.word	0x08005b0d
 8005a04:	08005acb 	.word	0x08005acb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68b9      	ldr	r1, [r7, #8]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 f8f6 	bl	8005c00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	699a      	ldr	r2, [r3, #24]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0208 	orr.w	r2, r2, #8
 8005a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	699a      	ldr	r2, [r3, #24]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 0204 	bic.w	r2, r2, #4
 8005a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6999      	ldr	r1, [r3, #24]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	691a      	ldr	r2, [r3, #16]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	619a      	str	r2, [r3, #24]
      break;
 8005a46:	e064      	b.n	8005b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68b9      	ldr	r1, [r7, #8]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 f93c 	bl	8005ccc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699a      	ldr	r2, [r3, #24]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	699a      	ldr	r2, [r3, #24]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6999      	ldr	r1, [r3, #24]
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	021a      	lsls	r2, r3, #8
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	430a      	orrs	r2, r1
 8005a86:	619a      	str	r2, [r3, #24]
      break;
 8005a88:	e043      	b.n	8005b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68b9      	ldr	r1, [r7, #8]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 f985 	bl	8005da0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	69da      	ldr	r2, [r3, #28]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f042 0208 	orr.w	r2, r2, #8
 8005aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69da      	ldr	r2, [r3, #28]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f022 0204 	bic.w	r2, r2, #4
 8005ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	69d9      	ldr	r1, [r3, #28]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	691a      	ldr	r2, [r3, #16]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	61da      	str	r2, [r3, #28]
      break;
 8005ac8:	e023      	b.n	8005b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68b9      	ldr	r1, [r7, #8]
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 f9cf 	bl	8005e74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69da      	ldr	r2, [r3, #28]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ae4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69da      	ldr	r2, [r3, #28]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005af4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69d9      	ldr	r1, [r3, #28]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	021a      	lsls	r2, r3, #8
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	61da      	str	r2, [r3, #28]
      break;
 8005b0a:	e002      	b.n	8005b12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b0c:	2301      	movs	r3, #1
 8005b0e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	3718      	adds	r7, #24
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b085      	sub	sp, #20
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a2f      	ldr	r2, [pc, #188]	@ (8005bf4 <TIM_Base_SetConfig+0xd0>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d00b      	beq.n	8005b54 <TIM_Base_SetConfig+0x30>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b42:	d007      	beq.n	8005b54 <TIM_Base_SetConfig+0x30>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a2c      	ldr	r2, [pc, #176]	@ (8005bf8 <TIM_Base_SetConfig+0xd4>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d003      	beq.n	8005b54 <TIM_Base_SetConfig+0x30>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a2b      	ldr	r2, [pc, #172]	@ (8005bfc <TIM_Base_SetConfig+0xd8>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d108      	bne.n	8005b66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a22      	ldr	r2, [pc, #136]	@ (8005bf4 <TIM_Base_SetConfig+0xd0>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d00b      	beq.n	8005b86 <TIM_Base_SetConfig+0x62>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b74:	d007      	beq.n	8005b86 <TIM_Base_SetConfig+0x62>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a1f      	ldr	r2, [pc, #124]	@ (8005bf8 <TIM_Base_SetConfig+0xd4>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d003      	beq.n	8005b86 <TIM_Base_SetConfig+0x62>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a1e      	ldr	r2, [pc, #120]	@ (8005bfc <TIM_Base_SetConfig+0xd8>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d108      	bne.n	8005b98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	68fa      	ldr	r2, [r7, #12]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68fa      	ldr	r2, [r7, #12]
 8005baa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	689a      	ldr	r2, [r3, #8]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a0d      	ldr	r2, [pc, #52]	@ (8005bf4 <TIM_Base_SetConfig+0xd0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d103      	bne.n	8005bcc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	691a      	ldr	r2, [r3, #16]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	f003 0301 	and.w	r3, r3, #1
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d005      	beq.n	8005bea <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	f023 0201 	bic.w	r2, r3, #1
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	611a      	str	r2, [r3, #16]
  }
}
 8005bea:	bf00      	nop
 8005bec:	3714      	adds	r7, #20
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bc80      	pop	{r7}
 8005bf2:	4770      	bx	lr
 8005bf4:	40012c00 	.word	0x40012c00
 8005bf8:	40000400 	.word	0x40000400
 8005bfc:	40000800 	.word	0x40000800

08005c00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b087      	sub	sp, #28
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a1b      	ldr	r3, [r3, #32]
 8005c14:	f023 0201 	bic.w	r2, r3, #1
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	699b      	ldr	r3, [r3, #24]
 8005c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f023 0303 	bic.w	r3, r3, #3
 8005c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	f023 0302 	bic.w	r3, r3, #2
 8005c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	697a      	ldr	r2, [r7, #20]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a1c      	ldr	r2, [pc, #112]	@ (8005cc8 <TIM_OC1_SetConfig+0xc8>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d10c      	bne.n	8005c76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f023 0308 	bic.w	r3, r3, #8
 8005c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f023 0304 	bic.w	r3, r3, #4
 8005c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a13      	ldr	r2, [pc, #76]	@ (8005cc8 <TIM_OC1_SetConfig+0xc8>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d111      	bne.n	8005ca2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	695b      	ldr	r3, [r3, #20]
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	693a      	ldr	r2, [r7, #16]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	685a      	ldr	r2, [r3, #4]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	621a      	str	r2, [r3, #32]
}
 8005cbc:	bf00      	nop
 8005cbe:	371c      	adds	r7, #28
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bc80      	pop	{r7}
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	40012c00 	.word	0x40012c00

08005ccc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b087      	sub	sp, #28
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a1b      	ldr	r3, [r3, #32]
 8005cda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a1b      	ldr	r3, [r3, #32]
 8005ce0:	f023 0210 	bic.w	r2, r3, #16
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	021b      	lsls	r3, r3, #8
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f023 0320 	bic.w	r3, r3, #32
 8005d16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	011b      	lsls	r3, r3, #4
 8005d1e:	697a      	ldr	r2, [r7, #20]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a1d      	ldr	r2, [pc, #116]	@ (8005d9c <TIM_OC2_SetConfig+0xd0>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d10d      	bne.n	8005d48 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	011b      	lsls	r3, r3, #4
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a14      	ldr	r2, [pc, #80]	@ (8005d9c <TIM_OC2_SetConfig+0xd0>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d113      	bne.n	8005d78 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	695b      	ldr	r3, [r3, #20]
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	693a      	ldr	r2, [r7, #16]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685a      	ldr	r2, [r3, #4]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	621a      	str	r2, [r3, #32]
}
 8005d92:	bf00      	nop
 8005d94:	371c      	adds	r7, #28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bc80      	pop	{r7}
 8005d9a:	4770      	bx	lr
 8005d9c:	40012c00 	.word	0x40012c00

08005da0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b087      	sub	sp, #28
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 0303 	bic.w	r3, r3, #3
 8005dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	021b      	lsls	r3, r3, #8
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a1d      	ldr	r2, [pc, #116]	@ (8005e70 <TIM_OC3_SetConfig+0xd0>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d10d      	bne.n	8005e1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	021b      	lsls	r3, r3, #8
 8005e0c:	697a      	ldr	r2, [r7, #20]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a14      	ldr	r2, [pc, #80]	@ (8005e70 <TIM_OC3_SetConfig+0xd0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d113      	bne.n	8005e4a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	695b      	ldr	r3, [r3, #20]
 8005e36:	011b      	lsls	r3, r3, #4
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	699b      	ldr	r3, [r3, #24]
 8005e42:	011b      	lsls	r3, r3, #4
 8005e44:	693a      	ldr	r2, [r7, #16]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	693a      	ldr	r2, [r7, #16]
 8005e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685a      	ldr	r2, [r3, #4]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	621a      	str	r2, [r3, #32]
}
 8005e64:	bf00      	nop
 8005e66:	371c      	adds	r7, #28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bc80      	pop	{r7}
 8005e6c:	4770      	bx	lr
 8005e6e:	bf00      	nop
 8005e70:	40012c00 	.word	0x40012c00

08005e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ea2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	021b      	lsls	r3, r3, #8
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ebe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	031b      	lsls	r3, r3, #12
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a0f      	ldr	r2, [pc, #60]	@ (8005f0c <TIM_OC4_SetConfig+0x98>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d109      	bne.n	8005ee8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005eda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	019b      	lsls	r3, r3, #6
 8005ee2:	697a      	ldr	r2, [r7, #20]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685a      	ldr	r2, [r3, #4]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	693a      	ldr	r2, [r7, #16]
 8005f00:	621a      	str	r2, [r3, #32]
}
 8005f02:	bf00      	nop
 8005f04:	371c      	adds	r7, #28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bc80      	pop	{r7}
 8005f0a:	4770      	bx	lr
 8005f0c:	40012c00 	.word	0x40012c00

08005f10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b087      	sub	sp, #28
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f003 031f 	and.w	r3, r3, #31
 8005f22:	2201      	movs	r2, #1
 8005f24:	fa02 f303 	lsl.w	r3, r2, r3
 8005f28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6a1a      	ldr	r2, [r3, #32]
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	43db      	mvns	r3, r3
 8005f32:	401a      	ands	r2, r3
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6a1a      	ldr	r2, [r3, #32]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f003 031f 	and.w	r3, r3, #31
 8005f42:	6879      	ldr	r1, [r7, #4]
 8005f44:	fa01 f303 	lsl.w	r3, r1, r3
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	621a      	str	r2, [r3, #32]
}
 8005f4e:	bf00      	nop
 8005f50:	371c      	adds	r7, #28
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bc80      	pop	{r7}
 8005f56:	4770      	bx	lr

08005f58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d101      	bne.n	8005f70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	e046      	b.n	8005ffe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a16      	ldr	r2, [pc, #88]	@ (8006008 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d00e      	beq.n	8005fd2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fbc:	d009      	beq.n	8005fd2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a12      	ldr	r2, [pc, #72]	@ (800600c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d004      	beq.n	8005fd2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a10      	ldr	r2, [pc, #64]	@ (8006010 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d10c      	bne.n	8005fec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68ba      	ldr	r2, [r7, #8]
 8005fea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	bc80      	pop	{r7}
 8006006:	4770      	bx	lr
 8006008:	40012c00 	.word	0x40012c00
 800600c:	40000400 	.word	0x40000400
 8006010:	40000800 	.word	0x40000800

08006014 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e042      	b.n	80060ac <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d106      	bne.n	8006040 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7fb fe46 	bl	8001ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2224      	movs	r2, #36	@ 0x24
 8006044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006056:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f971 	bl	8006340 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	691a      	ldr	r2, [r3, #16]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800606c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	695a      	ldr	r2, [r3, #20]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800607c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	68da      	ldr	r2, [r3, #12]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800608c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2220      	movs	r2, #32
 8006098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2220      	movs	r2, #32
 80060a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b08a      	sub	sp, #40	@ 0x28
 80060b8:	af02      	add	r7, sp, #8
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	603b      	str	r3, [r7, #0]
 80060c0:	4613      	mov	r3, r2
 80060c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b20      	cmp	r3, #32
 80060d2:	d175      	bne.n	80061c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d002      	beq.n	80060e0 <HAL_UART_Transmit+0x2c>
 80060da:	88fb      	ldrh	r3, [r7, #6]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e06e      	b.n	80061c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2200      	movs	r2, #0
 80060e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2221      	movs	r2, #33	@ 0x21
 80060ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060f2:	f7fb fedd 	bl	8001eb0 <HAL_GetTick>
 80060f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	88fa      	ldrh	r2, [r7, #6]
 80060fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	88fa      	ldrh	r2, [r7, #6]
 8006102:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	689b      	ldr	r3, [r3, #8]
 8006108:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800610c:	d108      	bne.n	8006120 <HAL_UART_Transmit+0x6c>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d104      	bne.n	8006120 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006116:	2300      	movs	r3, #0
 8006118:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	61bb      	str	r3, [r7, #24]
 800611e:	e003      	b.n	8006128 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006124:	2300      	movs	r3, #0
 8006126:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006128:	e02e      	b.n	8006188 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2200      	movs	r2, #0
 8006132:	2180      	movs	r1, #128	@ 0x80
 8006134:	68f8      	ldr	r0, [r7, #12]
 8006136:	f000 f848 	bl	80061ca <UART_WaitOnFlagUntilTimeout>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d005      	beq.n	800614c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2220      	movs	r2, #32
 8006144:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006148:	2303      	movs	r3, #3
 800614a:	e03a      	b.n	80061c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10b      	bne.n	800616a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	461a      	mov	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006160:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	3302      	adds	r3, #2
 8006166:	61bb      	str	r3, [r7, #24]
 8006168:	e007      	b.n	800617a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	781a      	ldrb	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	3301      	adds	r3, #1
 8006178:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800617e:	b29b      	uxth	r3, r3
 8006180:	3b01      	subs	r3, #1
 8006182:	b29a      	uxth	r2, r3
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800618c:	b29b      	uxth	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1cb      	bne.n	800612a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	9300      	str	r3, [sp, #0]
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	2200      	movs	r2, #0
 800619a:	2140      	movs	r1, #64	@ 0x40
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 f814 	bl	80061ca <UART_WaitOnFlagUntilTimeout>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d005      	beq.n	80061b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2220      	movs	r2, #32
 80061ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e006      	b.n	80061c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2220      	movs	r2, #32
 80061b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80061bc:	2300      	movs	r3, #0
 80061be:	e000      	b.n	80061c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80061c0:	2302      	movs	r3, #2
  }
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3720      	adds	r7, #32
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b086      	sub	sp, #24
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	60f8      	str	r0, [r7, #12]
 80061d2:	60b9      	str	r1, [r7, #8]
 80061d4:	603b      	str	r3, [r7, #0]
 80061d6:	4613      	mov	r3, r2
 80061d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061da:	e03b      	b.n	8006254 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061dc:	6a3b      	ldr	r3, [r7, #32]
 80061de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061e2:	d037      	beq.n	8006254 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061e4:	f7fb fe64 	bl	8001eb0 <HAL_GetTick>
 80061e8:	4602      	mov	r2, r0
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	1ad3      	subs	r3, r2, r3
 80061ee:	6a3a      	ldr	r2, [r7, #32]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d302      	bcc.n	80061fa <UART_WaitOnFlagUntilTimeout+0x30>
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e03a      	b.n	8006274 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b00      	cmp	r3, #0
 800620a:	d023      	beq.n	8006254 <UART_WaitOnFlagUntilTimeout+0x8a>
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	2b80      	cmp	r3, #128	@ 0x80
 8006210:	d020      	beq.n	8006254 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	2b40      	cmp	r3, #64	@ 0x40
 8006216:	d01d      	beq.n	8006254 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0308 	and.w	r3, r3, #8
 8006222:	2b08      	cmp	r3, #8
 8006224:	d116      	bne.n	8006254 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006226:	2300      	movs	r3, #0
 8006228:	617b      	str	r3, [r7, #20]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	617b      	str	r3, [r7, #20]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	617b      	str	r3, [r7, #20]
 800623a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 f81d 	bl	800627c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2208      	movs	r2, #8
 8006246:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006250:	2301      	movs	r3, #1
 8006252:	e00f      	b.n	8006274 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	4013      	ands	r3, r2
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	429a      	cmp	r2, r3
 8006262:	bf0c      	ite	eq
 8006264:	2301      	moveq	r3, #1
 8006266:	2300      	movne	r3, #0
 8006268:	b2db      	uxtb	r3, r3
 800626a:	461a      	mov	r2, r3
 800626c:	79fb      	ldrb	r3, [r7, #7]
 800626e:	429a      	cmp	r2, r3
 8006270:	d0b4      	beq.n	80061dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3718      	adds	r7, #24
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800627c:	b480      	push	{r7}
 800627e:	b095      	sub	sp, #84	@ 0x54
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	330c      	adds	r3, #12
 800628a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006296:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800629a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	330c      	adds	r3, #12
 80062a2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062a4:	643a      	str	r2, [r7, #64]	@ 0x40
 80062a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062ac:	e841 2300 	strex	r3, r2, [r1]
 80062b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e5      	bne.n	8006284 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	3314      	adds	r3, #20
 80062be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062c0:	6a3b      	ldr	r3, [r7, #32]
 80062c2:	e853 3f00 	ldrex	r3, [r3]
 80062c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	f023 0301 	bic.w	r3, r3, #1
 80062ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	3314      	adds	r3, #20
 80062d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80062e0:	e841 2300 	strex	r3, r2, [r1]
 80062e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80062e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1e5      	bne.n	80062b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d119      	bne.n	8006328 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	330c      	adds	r3, #12
 80062fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	e853 3f00 	ldrex	r3, [r3]
 8006302:	60bb      	str	r3, [r7, #8]
   return(result);
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	f023 0310 	bic.w	r3, r3, #16
 800630a:	647b      	str	r3, [r7, #68]	@ 0x44
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	330c      	adds	r3, #12
 8006312:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006314:	61ba      	str	r2, [r7, #24]
 8006316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006318:	6979      	ldr	r1, [r7, #20]
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	e841 2300 	strex	r3, r2, [r1]
 8006320:	613b      	str	r3, [r7, #16]
   return(result);
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d1e5      	bne.n	80062f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2220      	movs	r2, #32
 800632c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006336:	bf00      	nop
 8006338:	3754      	adds	r7, #84	@ 0x54
 800633a:	46bd      	mov	sp, r7
 800633c:	bc80      	pop	{r7}
 800633e:	4770      	bx	lr

08006340 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	68da      	ldr	r2, [r3, #12]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	431a      	orrs	r2, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	695b      	ldr	r3, [r3, #20]
 800636c:	4313      	orrs	r3, r2
 800636e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800637a:	f023 030c 	bic.w	r3, r3, #12
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	6812      	ldr	r2, [r2, #0]
 8006382:	68b9      	ldr	r1, [r7, #8]
 8006384:	430b      	orrs	r3, r1
 8006386:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	699a      	ldr	r2, [r3, #24]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	430a      	orrs	r2, r1
 800639c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a2c      	ldr	r2, [pc, #176]	@ (8006454 <UART_SetConfig+0x114>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d103      	bne.n	80063b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80063a8:	f7ff f920 	bl	80055ec <HAL_RCC_GetPCLK2Freq>
 80063ac:	60f8      	str	r0, [r7, #12]
 80063ae:	e002      	b.n	80063b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80063b0:	f7ff f908 	bl	80055c4 <HAL_RCC_GetPCLK1Freq>
 80063b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80063b6:	68fa      	ldr	r2, [r7, #12]
 80063b8:	4613      	mov	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	009a      	lsls	r2, r3, #2
 80063c0:	441a      	add	r2, r3
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	009b      	lsls	r3, r3, #2
 80063c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063cc:	4a22      	ldr	r2, [pc, #136]	@ (8006458 <UART_SetConfig+0x118>)
 80063ce:	fba2 2303 	umull	r2, r3, r2, r3
 80063d2:	095b      	lsrs	r3, r3, #5
 80063d4:	0119      	lsls	r1, r3, #4
 80063d6:	68fa      	ldr	r2, [r7, #12]
 80063d8:	4613      	mov	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	4413      	add	r3, r2
 80063de:	009a      	lsls	r2, r3, #2
 80063e0:	441a      	add	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80063ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006458 <UART_SetConfig+0x118>)
 80063ee:	fba3 0302 	umull	r0, r3, r3, r2
 80063f2:	095b      	lsrs	r3, r3, #5
 80063f4:	2064      	movs	r0, #100	@ 0x64
 80063f6:	fb00 f303 	mul.w	r3, r0, r3
 80063fa:	1ad3      	subs	r3, r2, r3
 80063fc:	011b      	lsls	r3, r3, #4
 80063fe:	3332      	adds	r3, #50	@ 0x32
 8006400:	4a15      	ldr	r2, [pc, #84]	@ (8006458 <UART_SetConfig+0x118>)
 8006402:	fba2 2303 	umull	r2, r3, r2, r3
 8006406:	095b      	lsrs	r3, r3, #5
 8006408:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800640c:	4419      	add	r1, r3
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	4613      	mov	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	009a      	lsls	r2, r3, #2
 8006418:	441a      	add	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	fbb2 f2f3 	udiv	r2, r2, r3
 8006424:	4b0c      	ldr	r3, [pc, #48]	@ (8006458 <UART_SetConfig+0x118>)
 8006426:	fba3 0302 	umull	r0, r3, r3, r2
 800642a:	095b      	lsrs	r3, r3, #5
 800642c:	2064      	movs	r0, #100	@ 0x64
 800642e:	fb00 f303 	mul.w	r3, r0, r3
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	011b      	lsls	r3, r3, #4
 8006436:	3332      	adds	r3, #50	@ 0x32
 8006438:	4a07      	ldr	r2, [pc, #28]	@ (8006458 <UART_SetConfig+0x118>)
 800643a:	fba2 2303 	umull	r2, r3, r2, r3
 800643e:	095b      	lsrs	r3, r3, #5
 8006440:	f003 020f 	and.w	r2, r3, #15
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	440a      	add	r2, r1
 800644a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800644c:	bf00      	nop
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	40013800 	.word	0x40013800
 8006458:	51eb851f 	.word	0x51eb851f

0800645c <__cvt>:
 800645c:	2b00      	cmp	r3, #0
 800645e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006462:	461d      	mov	r5, r3
 8006464:	bfbb      	ittet	lt
 8006466:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800646a:	461d      	movlt	r5, r3
 800646c:	2300      	movge	r3, #0
 800646e:	232d      	movlt	r3, #45	@ 0x2d
 8006470:	b088      	sub	sp, #32
 8006472:	4614      	mov	r4, r2
 8006474:	bfb8      	it	lt
 8006476:	4614      	movlt	r4, r2
 8006478:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800647a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800647c:	7013      	strb	r3, [r2, #0]
 800647e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006480:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006484:	f023 0820 	bic.w	r8, r3, #32
 8006488:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800648c:	d005      	beq.n	800649a <__cvt+0x3e>
 800648e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006492:	d100      	bne.n	8006496 <__cvt+0x3a>
 8006494:	3601      	adds	r6, #1
 8006496:	2302      	movs	r3, #2
 8006498:	e000      	b.n	800649c <__cvt+0x40>
 800649a:	2303      	movs	r3, #3
 800649c:	aa07      	add	r2, sp, #28
 800649e:	9204      	str	r2, [sp, #16]
 80064a0:	aa06      	add	r2, sp, #24
 80064a2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80064a6:	e9cd 3600 	strd	r3, r6, [sp]
 80064aa:	4622      	mov	r2, r4
 80064ac:	462b      	mov	r3, r5
 80064ae:	f001 fecf 	bl	8008250 <_dtoa_r>
 80064b2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80064b6:	4607      	mov	r7, r0
 80064b8:	d119      	bne.n	80064ee <__cvt+0x92>
 80064ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80064bc:	07db      	lsls	r3, r3, #31
 80064be:	d50e      	bpl.n	80064de <__cvt+0x82>
 80064c0:	eb00 0906 	add.w	r9, r0, r6
 80064c4:	2200      	movs	r2, #0
 80064c6:	2300      	movs	r3, #0
 80064c8:	4620      	mov	r0, r4
 80064ca:	4629      	mov	r1, r5
 80064cc:	f7fa fa6c 	bl	80009a8 <__aeabi_dcmpeq>
 80064d0:	b108      	cbz	r0, 80064d6 <__cvt+0x7a>
 80064d2:	f8cd 901c 	str.w	r9, [sp, #28]
 80064d6:	2230      	movs	r2, #48	@ 0x30
 80064d8:	9b07      	ldr	r3, [sp, #28]
 80064da:	454b      	cmp	r3, r9
 80064dc:	d31e      	bcc.n	800651c <__cvt+0xc0>
 80064de:	4638      	mov	r0, r7
 80064e0:	9b07      	ldr	r3, [sp, #28]
 80064e2:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80064e4:	1bdb      	subs	r3, r3, r7
 80064e6:	6013      	str	r3, [r2, #0]
 80064e8:	b008      	add	sp, #32
 80064ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064ee:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80064f2:	eb00 0906 	add.w	r9, r0, r6
 80064f6:	d1e5      	bne.n	80064c4 <__cvt+0x68>
 80064f8:	7803      	ldrb	r3, [r0, #0]
 80064fa:	2b30      	cmp	r3, #48	@ 0x30
 80064fc:	d10a      	bne.n	8006514 <__cvt+0xb8>
 80064fe:	2200      	movs	r2, #0
 8006500:	2300      	movs	r3, #0
 8006502:	4620      	mov	r0, r4
 8006504:	4629      	mov	r1, r5
 8006506:	f7fa fa4f 	bl	80009a8 <__aeabi_dcmpeq>
 800650a:	b918      	cbnz	r0, 8006514 <__cvt+0xb8>
 800650c:	f1c6 0601 	rsb	r6, r6, #1
 8006510:	f8ca 6000 	str.w	r6, [sl]
 8006514:	f8da 3000 	ldr.w	r3, [sl]
 8006518:	4499      	add	r9, r3
 800651a:	e7d3      	b.n	80064c4 <__cvt+0x68>
 800651c:	1c59      	adds	r1, r3, #1
 800651e:	9107      	str	r1, [sp, #28]
 8006520:	701a      	strb	r2, [r3, #0]
 8006522:	e7d9      	b.n	80064d8 <__cvt+0x7c>

08006524 <__exponent>:
 8006524:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006526:	2900      	cmp	r1, #0
 8006528:	bfb6      	itet	lt
 800652a:	232d      	movlt	r3, #45	@ 0x2d
 800652c:	232b      	movge	r3, #43	@ 0x2b
 800652e:	4249      	neglt	r1, r1
 8006530:	2909      	cmp	r1, #9
 8006532:	7002      	strb	r2, [r0, #0]
 8006534:	7043      	strb	r3, [r0, #1]
 8006536:	dd29      	ble.n	800658c <__exponent+0x68>
 8006538:	f10d 0307 	add.w	r3, sp, #7
 800653c:	461d      	mov	r5, r3
 800653e:	270a      	movs	r7, #10
 8006540:	fbb1 f6f7 	udiv	r6, r1, r7
 8006544:	461a      	mov	r2, r3
 8006546:	fb07 1416 	mls	r4, r7, r6, r1
 800654a:	3430      	adds	r4, #48	@ 0x30
 800654c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006550:	460c      	mov	r4, r1
 8006552:	2c63      	cmp	r4, #99	@ 0x63
 8006554:	4631      	mov	r1, r6
 8006556:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800655a:	dcf1      	bgt.n	8006540 <__exponent+0x1c>
 800655c:	3130      	adds	r1, #48	@ 0x30
 800655e:	1e94      	subs	r4, r2, #2
 8006560:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006564:	4623      	mov	r3, r4
 8006566:	1c41      	adds	r1, r0, #1
 8006568:	42ab      	cmp	r3, r5
 800656a:	d30a      	bcc.n	8006582 <__exponent+0x5e>
 800656c:	f10d 0309 	add.w	r3, sp, #9
 8006570:	1a9b      	subs	r3, r3, r2
 8006572:	42ac      	cmp	r4, r5
 8006574:	bf88      	it	hi
 8006576:	2300      	movhi	r3, #0
 8006578:	3302      	adds	r3, #2
 800657a:	4403      	add	r3, r0
 800657c:	1a18      	subs	r0, r3, r0
 800657e:	b003      	add	sp, #12
 8006580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006582:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006586:	f801 6f01 	strb.w	r6, [r1, #1]!
 800658a:	e7ed      	b.n	8006568 <__exponent+0x44>
 800658c:	2330      	movs	r3, #48	@ 0x30
 800658e:	3130      	adds	r1, #48	@ 0x30
 8006590:	7083      	strb	r3, [r0, #2]
 8006592:	70c1      	strb	r1, [r0, #3]
 8006594:	1d03      	adds	r3, r0, #4
 8006596:	e7f1      	b.n	800657c <__exponent+0x58>

08006598 <_printf_float>:
 8006598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800659c:	b091      	sub	sp, #68	@ 0x44
 800659e:	460c      	mov	r4, r1
 80065a0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80065a4:	4616      	mov	r6, r2
 80065a6:	461f      	mov	r7, r3
 80065a8:	4605      	mov	r5, r0
 80065aa:	f001 fd6f 	bl	800808c <_localeconv_r>
 80065ae:	6803      	ldr	r3, [r0, #0]
 80065b0:	4618      	mov	r0, r3
 80065b2:	9308      	str	r3, [sp, #32]
 80065b4:	f7f9 fdcc 	bl	8000150 <strlen>
 80065b8:	2300      	movs	r3, #0
 80065ba:	930e      	str	r3, [sp, #56]	@ 0x38
 80065bc:	f8d8 3000 	ldr.w	r3, [r8]
 80065c0:	9009      	str	r0, [sp, #36]	@ 0x24
 80065c2:	3307      	adds	r3, #7
 80065c4:	f023 0307 	bic.w	r3, r3, #7
 80065c8:	f103 0208 	add.w	r2, r3, #8
 80065cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80065d0:	f8d4 b000 	ldr.w	fp, [r4]
 80065d4:	f8c8 2000 	str.w	r2, [r8]
 80065d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065dc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80065e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065e2:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80065e6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80065ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80065ee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80065f2:	4b9c      	ldr	r3, [pc, #624]	@ (8006864 <_printf_float+0x2cc>)
 80065f4:	f7fa fa0a 	bl	8000a0c <__aeabi_dcmpun>
 80065f8:	bb70      	cbnz	r0, 8006658 <_printf_float+0xc0>
 80065fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80065fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006602:	4b98      	ldr	r3, [pc, #608]	@ (8006864 <_printf_float+0x2cc>)
 8006604:	f7fa f9e4 	bl	80009d0 <__aeabi_dcmple>
 8006608:	bb30      	cbnz	r0, 8006658 <_printf_float+0xc0>
 800660a:	2200      	movs	r2, #0
 800660c:	2300      	movs	r3, #0
 800660e:	4640      	mov	r0, r8
 8006610:	4649      	mov	r1, r9
 8006612:	f7fa f9d3 	bl	80009bc <__aeabi_dcmplt>
 8006616:	b110      	cbz	r0, 800661e <_printf_float+0x86>
 8006618:	232d      	movs	r3, #45	@ 0x2d
 800661a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800661e:	4a92      	ldr	r2, [pc, #584]	@ (8006868 <_printf_float+0x2d0>)
 8006620:	4b92      	ldr	r3, [pc, #584]	@ (800686c <_printf_float+0x2d4>)
 8006622:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006626:	bf94      	ite	ls
 8006628:	4690      	movls	r8, r2
 800662a:	4698      	movhi	r8, r3
 800662c:	2303      	movs	r3, #3
 800662e:	f04f 0900 	mov.w	r9, #0
 8006632:	6123      	str	r3, [r4, #16]
 8006634:	f02b 0304 	bic.w	r3, fp, #4
 8006638:	6023      	str	r3, [r4, #0]
 800663a:	4633      	mov	r3, r6
 800663c:	4621      	mov	r1, r4
 800663e:	4628      	mov	r0, r5
 8006640:	9700      	str	r7, [sp, #0]
 8006642:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006644:	f000 f9d4 	bl	80069f0 <_printf_common>
 8006648:	3001      	adds	r0, #1
 800664a:	f040 8090 	bne.w	800676e <_printf_float+0x1d6>
 800664e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006652:	b011      	add	sp, #68	@ 0x44
 8006654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006658:	4642      	mov	r2, r8
 800665a:	464b      	mov	r3, r9
 800665c:	4640      	mov	r0, r8
 800665e:	4649      	mov	r1, r9
 8006660:	f7fa f9d4 	bl	8000a0c <__aeabi_dcmpun>
 8006664:	b148      	cbz	r0, 800667a <_printf_float+0xe2>
 8006666:	464b      	mov	r3, r9
 8006668:	2b00      	cmp	r3, #0
 800666a:	bfb8      	it	lt
 800666c:	232d      	movlt	r3, #45	@ 0x2d
 800666e:	4a80      	ldr	r2, [pc, #512]	@ (8006870 <_printf_float+0x2d8>)
 8006670:	bfb8      	it	lt
 8006672:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006676:	4b7f      	ldr	r3, [pc, #508]	@ (8006874 <_printf_float+0x2dc>)
 8006678:	e7d3      	b.n	8006622 <_printf_float+0x8a>
 800667a:	6863      	ldr	r3, [r4, #4]
 800667c:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	d13f      	bne.n	8006704 <_printf_float+0x16c>
 8006684:	2306      	movs	r3, #6
 8006686:	6063      	str	r3, [r4, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800668e:	6023      	str	r3, [r4, #0]
 8006690:	9206      	str	r2, [sp, #24]
 8006692:	aa0e      	add	r2, sp, #56	@ 0x38
 8006694:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006698:	aa0d      	add	r2, sp, #52	@ 0x34
 800669a:	9203      	str	r2, [sp, #12]
 800669c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80066a0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80066a4:	6863      	ldr	r3, [r4, #4]
 80066a6:	4642      	mov	r2, r8
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	4628      	mov	r0, r5
 80066ac:	464b      	mov	r3, r9
 80066ae:	910a      	str	r1, [sp, #40]	@ 0x28
 80066b0:	f7ff fed4 	bl	800645c <__cvt>
 80066b4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80066b6:	4680      	mov	r8, r0
 80066b8:	2947      	cmp	r1, #71	@ 0x47
 80066ba:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80066bc:	d128      	bne.n	8006710 <_printf_float+0x178>
 80066be:	1cc8      	adds	r0, r1, #3
 80066c0:	db02      	blt.n	80066c8 <_printf_float+0x130>
 80066c2:	6863      	ldr	r3, [r4, #4]
 80066c4:	4299      	cmp	r1, r3
 80066c6:	dd40      	ble.n	800674a <_printf_float+0x1b2>
 80066c8:	f1aa 0a02 	sub.w	sl, sl, #2
 80066cc:	fa5f fa8a 	uxtb.w	sl, sl
 80066d0:	4652      	mov	r2, sl
 80066d2:	3901      	subs	r1, #1
 80066d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80066d8:	910d      	str	r1, [sp, #52]	@ 0x34
 80066da:	f7ff ff23 	bl	8006524 <__exponent>
 80066de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80066e0:	4681      	mov	r9, r0
 80066e2:	1813      	adds	r3, r2, r0
 80066e4:	2a01      	cmp	r2, #1
 80066e6:	6123      	str	r3, [r4, #16]
 80066e8:	dc02      	bgt.n	80066f0 <_printf_float+0x158>
 80066ea:	6822      	ldr	r2, [r4, #0]
 80066ec:	07d2      	lsls	r2, r2, #31
 80066ee:	d501      	bpl.n	80066f4 <_printf_float+0x15c>
 80066f0:	3301      	adds	r3, #1
 80066f2:	6123      	str	r3, [r4, #16]
 80066f4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d09e      	beq.n	800663a <_printf_float+0xa2>
 80066fc:	232d      	movs	r3, #45	@ 0x2d
 80066fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006702:	e79a      	b.n	800663a <_printf_float+0xa2>
 8006704:	2947      	cmp	r1, #71	@ 0x47
 8006706:	d1bf      	bne.n	8006688 <_printf_float+0xf0>
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1bd      	bne.n	8006688 <_printf_float+0xf0>
 800670c:	2301      	movs	r3, #1
 800670e:	e7ba      	b.n	8006686 <_printf_float+0xee>
 8006710:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006714:	d9dc      	bls.n	80066d0 <_printf_float+0x138>
 8006716:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800671a:	d118      	bne.n	800674e <_printf_float+0x1b6>
 800671c:	2900      	cmp	r1, #0
 800671e:	6863      	ldr	r3, [r4, #4]
 8006720:	dd0b      	ble.n	800673a <_printf_float+0x1a2>
 8006722:	6121      	str	r1, [r4, #16]
 8006724:	b913      	cbnz	r3, 800672c <_printf_float+0x194>
 8006726:	6822      	ldr	r2, [r4, #0]
 8006728:	07d0      	lsls	r0, r2, #31
 800672a:	d502      	bpl.n	8006732 <_printf_float+0x19a>
 800672c:	3301      	adds	r3, #1
 800672e:	440b      	add	r3, r1
 8006730:	6123      	str	r3, [r4, #16]
 8006732:	f04f 0900 	mov.w	r9, #0
 8006736:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006738:	e7dc      	b.n	80066f4 <_printf_float+0x15c>
 800673a:	b913      	cbnz	r3, 8006742 <_printf_float+0x1aa>
 800673c:	6822      	ldr	r2, [r4, #0]
 800673e:	07d2      	lsls	r2, r2, #31
 8006740:	d501      	bpl.n	8006746 <_printf_float+0x1ae>
 8006742:	3302      	adds	r3, #2
 8006744:	e7f4      	b.n	8006730 <_printf_float+0x198>
 8006746:	2301      	movs	r3, #1
 8006748:	e7f2      	b.n	8006730 <_printf_float+0x198>
 800674a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800674e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006750:	4299      	cmp	r1, r3
 8006752:	db05      	blt.n	8006760 <_printf_float+0x1c8>
 8006754:	6823      	ldr	r3, [r4, #0]
 8006756:	6121      	str	r1, [r4, #16]
 8006758:	07d8      	lsls	r0, r3, #31
 800675a:	d5ea      	bpl.n	8006732 <_printf_float+0x19a>
 800675c:	1c4b      	adds	r3, r1, #1
 800675e:	e7e7      	b.n	8006730 <_printf_float+0x198>
 8006760:	2900      	cmp	r1, #0
 8006762:	bfcc      	ite	gt
 8006764:	2201      	movgt	r2, #1
 8006766:	f1c1 0202 	rsble	r2, r1, #2
 800676a:	4413      	add	r3, r2
 800676c:	e7e0      	b.n	8006730 <_printf_float+0x198>
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	055a      	lsls	r2, r3, #21
 8006772:	d407      	bmi.n	8006784 <_printf_float+0x1ec>
 8006774:	6923      	ldr	r3, [r4, #16]
 8006776:	4642      	mov	r2, r8
 8006778:	4631      	mov	r1, r6
 800677a:	4628      	mov	r0, r5
 800677c:	47b8      	blx	r7
 800677e:	3001      	adds	r0, #1
 8006780:	d12b      	bne.n	80067da <_printf_float+0x242>
 8006782:	e764      	b.n	800664e <_printf_float+0xb6>
 8006784:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006788:	f240 80dc 	bls.w	8006944 <_printf_float+0x3ac>
 800678c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006790:	2200      	movs	r2, #0
 8006792:	2300      	movs	r3, #0
 8006794:	f7fa f908 	bl	80009a8 <__aeabi_dcmpeq>
 8006798:	2800      	cmp	r0, #0
 800679a:	d033      	beq.n	8006804 <_printf_float+0x26c>
 800679c:	2301      	movs	r3, #1
 800679e:	4631      	mov	r1, r6
 80067a0:	4628      	mov	r0, r5
 80067a2:	4a35      	ldr	r2, [pc, #212]	@ (8006878 <_printf_float+0x2e0>)
 80067a4:	47b8      	blx	r7
 80067a6:	3001      	adds	r0, #1
 80067a8:	f43f af51 	beq.w	800664e <_printf_float+0xb6>
 80067ac:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80067b0:	4543      	cmp	r3, r8
 80067b2:	db02      	blt.n	80067ba <_printf_float+0x222>
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	07d8      	lsls	r0, r3, #31
 80067b8:	d50f      	bpl.n	80067da <_printf_float+0x242>
 80067ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067be:	4631      	mov	r1, r6
 80067c0:	4628      	mov	r0, r5
 80067c2:	47b8      	blx	r7
 80067c4:	3001      	adds	r0, #1
 80067c6:	f43f af42 	beq.w	800664e <_printf_float+0xb6>
 80067ca:	f04f 0900 	mov.w	r9, #0
 80067ce:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80067d2:	f104 0a1a 	add.w	sl, r4, #26
 80067d6:	45c8      	cmp	r8, r9
 80067d8:	dc09      	bgt.n	80067ee <_printf_float+0x256>
 80067da:	6823      	ldr	r3, [r4, #0]
 80067dc:	079b      	lsls	r3, r3, #30
 80067de:	f100 8102 	bmi.w	80069e6 <_printf_float+0x44e>
 80067e2:	68e0      	ldr	r0, [r4, #12]
 80067e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80067e6:	4298      	cmp	r0, r3
 80067e8:	bfb8      	it	lt
 80067ea:	4618      	movlt	r0, r3
 80067ec:	e731      	b.n	8006652 <_printf_float+0xba>
 80067ee:	2301      	movs	r3, #1
 80067f0:	4652      	mov	r2, sl
 80067f2:	4631      	mov	r1, r6
 80067f4:	4628      	mov	r0, r5
 80067f6:	47b8      	blx	r7
 80067f8:	3001      	adds	r0, #1
 80067fa:	f43f af28 	beq.w	800664e <_printf_float+0xb6>
 80067fe:	f109 0901 	add.w	r9, r9, #1
 8006802:	e7e8      	b.n	80067d6 <_printf_float+0x23e>
 8006804:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006806:	2b00      	cmp	r3, #0
 8006808:	dc38      	bgt.n	800687c <_printf_float+0x2e4>
 800680a:	2301      	movs	r3, #1
 800680c:	4631      	mov	r1, r6
 800680e:	4628      	mov	r0, r5
 8006810:	4a19      	ldr	r2, [pc, #100]	@ (8006878 <_printf_float+0x2e0>)
 8006812:	47b8      	blx	r7
 8006814:	3001      	adds	r0, #1
 8006816:	f43f af1a 	beq.w	800664e <_printf_float+0xb6>
 800681a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800681e:	ea59 0303 	orrs.w	r3, r9, r3
 8006822:	d102      	bne.n	800682a <_printf_float+0x292>
 8006824:	6823      	ldr	r3, [r4, #0]
 8006826:	07d9      	lsls	r1, r3, #31
 8006828:	d5d7      	bpl.n	80067da <_printf_float+0x242>
 800682a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800682e:	4631      	mov	r1, r6
 8006830:	4628      	mov	r0, r5
 8006832:	47b8      	blx	r7
 8006834:	3001      	adds	r0, #1
 8006836:	f43f af0a 	beq.w	800664e <_printf_float+0xb6>
 800683a:	f04f 0a00 	mov.w	sl, #0
 800683e:	f104 0b1a 	add.w	fp, r4, #26
 8006842:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006844:	425b      	negs	r3, r3
 8006846:	4553      	cmp	r3, sl
 8006848:	dc01      	bgt.n	800684e <_printf_float+0x2b6>
 800684a:	464b      	mov	r3, r9
 800684c:	e793      	b.n	8006776 <_printf_float+0x1de>
 800684e:	2301      	movs	r3, #1
 8006850:	465a      	mov	r2, fp
 8006852:	4631      	mov	r1, r6
 8006854:	4628      	mov	r0, r5
 8006856:	47b8      	blx	r7
 8006858:	3001      	adds	r0, #1
 800685a:	f43f aef8 	beq.w	800664e <_printf_float+0xb6>
 800685e:	f10a 0a01 	add.w	sl, sl, #1
 8006862:	e7ee      	b.n	8006842 <_printf_float+0x2aa>
 8006864:	7fefffff 	.word	0x7fefffff
 8006868:	0800ac56 	.word	0x0800ac56
 800686c:	0800ac5a 	.word	0x0800ac5a
 8006870:	0800ac5e 	.word	0x0800ac5e
 8006874:	0800ac62 	.word	0x0800ac62
 8006878:	0800ac66 	.word	0x0800ac66
 800687c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800687e:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006882:	4553      	cmp	r3, sl
 8006884:	bfa8      	it	ge
 8006886:	4653      	movge	r3, sl
 8006888:	2b00      	cmp	r3, #0
 800688a:	4699      	mov	r9, r3
 800688c:	dc36      	bgt.n	80068fc <_printf_float+0x364>
 800688e:	f04f 0b00 	mov.w	fp, #0
 8006892:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006896:	f104 021a 	add.w	r2, r4, #26
 800689a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800689c:	930a      	str	r3, [sp, #40]	@ 0x28
 800689e:	eba3 0309 	sub.w	r3, r3, r9
 80068a2:	455b      	cmp	r3, fp
 80068a4:	dc31      	bgt.n	800690a <_printf_float+0x372>
 80068a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068a8:	459a      	cmp	sl, r3
 80068aa:	dc3a      	bgt.n	8006922 <_printf_float+0x38a>
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	07da      	lsls	r2, r3, #31
 80068b0:	d437      	bmi.n	8006922 <_printf_float+0x38a>
 80068b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068b4:	ebaa 0903 	sub.w	r9, sl, r3
 80068b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068ba:	ebaa 0303 	sub.w	r3, sl, r3
 80068be:	4599      	cmp	r9, r3
 80068c0:	bfa8      	it	ge
 80068c2:	4699      	movge	r9, r3
 80068c4:	f1b9 0f00 	cmp.w	r9, #0
 80068c8:	dc33      	bgt.n	8006932 <_printf_float+0x39a>
 80068ca:	f04f 0800 	mov.w	r8, #0
 80068ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068d2:	f104 0b1a 	add.w	fp, r4, #26
 80068d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068d8:	ebaa 0303 	sub.w	r3, sl, r3
 80068dc:	eba3 0309 	sub.w	r3, r3, r9
 80068e0:	4543      	cmp	r3, r8
 80068e2:	f77f af7a 	ble.w	80067da <_printf_float+0x242>
 80068e6:	2301      	movs	r3, #1
 80068e8:	465a      	mov	r2, fp
 80068ea:	4631      	mov	r1, r6
 80068ec:	4628      	mov	r0, r5
 80068ee:	47b8      	blx	r7
 80068f0:	3001      	adds	r0, #1
 80068f2:	f43f aeac 	beq.w	800664e <_printf_float+0xb6>
 80068f6:	f108 0801 	add.w	r8, r8, #1
 80068fa:	e7ec      	b.n	80068d6 <_printf_float+0x33e>
 80068fc:	4642      	mov	r2, r8
 80068fe:	4631      	mov	r1, r6
 8006900:	4628      	mov	r0, r5
 8006902:	47b8      	blx	r7
 8006904:	3001      	adds	r0, #1
 8006906:	d1c2      	bne.n	800688e <_printf_float+0x2f6>
 8006908:	e6a1      	b.n	800664e <_printf_float+0xb6>
 800690a:	2301      	movs	r3, #1
 800690c:	4631      	mov	r1, r6
 800690e:	4628      	mov	r0, r5
 8006910:	920a      	str	r2, [sp, #40]	@ 0x28
 8006912:	47b8      	blx	r7
 8006914:	3001      	adds	r0, #1
 8006916:	f43f ae9a 	beq.w	800664e <_printf_float+0xb6>
 800691a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800691c:	f10b 0b01 	add.w	fp, fp, #1
 8006920:	e7bb      	b.n	800689a <_printf_float+0x302>
 8006922:	4631      	mov	r1, r6
 8006924:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006928:	4628      	mov	r0, r5
 800692a:	47b8      	blx	r7
 800692c:	3001      	adds	r0, #1
 800692e:	d1c0      	bne.n	80068b2 <_printf_float+0x31a>
 8006930:	e68d      	b.n	800664e <_printf_float+0xb6>
 8006932:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006934:	464b      	mov	r3, r9
 8006936:	4631      	mov	r1, r6
 8006938:	4628      	mov	r0, r5
 800693a:	4442      	add	r2, r8
 800693c:	47b8      	blx	r7
 800693e:	3001      	adds	r0, #1
 8006940:	d1c3      	bne.n	80068ca <_printf_float+0x332>
 8006942:	e684      	b.n	800664e <_printf_float+0xb6>
 8006944:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006948:	f1ba 0f01 	cmp.w	sl, #1
 800694c:	dc01      	bgt.n	8006952 <_printf_float+0x3ba>
 800694e:	07db      	lsls	r3, r3, #31
 8006950:	d536      	bpl.n	80069c0 <_printf_float+0x428>
 8006952:	2301      	movs	r3, #1
 8006954:	4642      	mov	r2, r8
 8006956:	4631      	mov	r1, r6
 8006958:	4628      	mov	r0, r5
 800695a:	47b8      	blx	r7
 800695c:	3001      	adds	r0, #1
 800695e:	f43f ae76 	beq.w	800664e <_printf_float+0xb6>
 8006962:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006966:	4631      	mov	r1, r6
 8006968:	4628      	mov	r0, r5
 800696a:	47b8      	blx	r7
 800696c:	3001      	adds	r0, #1
 800696e:	f43f ae6e 	beq.w	800664e <_printf_float+0xb6>
 8006972:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006976:	2200      	movs	r2, #0
 8006978:	2300      	movs	r3, #0
 800697a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800697e:	f7fa f813 	bl	80009a8 <__aeabi_dcmpeq>
 8006982:	b9c0      	cbnz	r0, 80069b6 <_printf_float+0x41e>
 8006984:	4653      	mov	r3, sl
 8006986:	f108 0201 	add.w	r2, r8, #1
 800698a:	4631      	mov	r1, r6
 800698c:	4628      	mov	r0, r5
 800698e:	47b8      	blx	r7
 8006990:	3001      	adds	r0, #1
 8006992:	d10c      	bne.n	80069ae <_printf_float+0x416>
 8006994:	e65b      	b.n	800664e <_printf_float+0xb6>
 8006996:	2301      	movs	r3, #1
 8006998:	465a      	mov	r2, fp
 800699a:	4631      	mov	r1, r6
 800699c:	4628      	mov	r0, r5
 800699e:	47b8      	blx	r7
 80069a0:	3001      	adds	r0, #1
 80069a2:	f43f ae54 	beq.w	800664e <_printf_float+0xb6>
 80069a6:	f108 0801 	add.w	r8, r8, #1
 80069aa:	45d0      	cmp	r8, sl
 80069ac:	dbf3      	blt.n	8006996 <_printf_float+0x3fe>
 80069ae:	464b      	mov	r3, r9
 80069b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80069b4:	e6e0      	b.n	8006778 <_printf_float+0x1e0>
 80069b6:	f04f 0800 	mov.w	r8, #0
 80069ba:	f104 0b1a 	add.w	fp, r4, #26
 80069be:	e7f4      	b.n	80069aa <_printf_float+0x412>
 80069c0:	2301      	movs	r3, #1
 80069c2:	4642      	mov	r2, r8
 80069c4:	e7e1      	b.n	800698a <_printf_float+0x3f2>
 80069c6:	2301      	movs	r3, #1
 80069c8:	464a      	mov	r2, r9
 80069ca:	4631      	mov	r1, r6
 80069cc:	4628      	mov	r0, r5
 80069ce:	47b8      	blx	r7
 80069d0:	3001      	adds	r0, #1
 80069d2:	f43f ae3c 	beq.w	800664e <_printf_float+0xb6>
 80069d6:	f108 0801 	add.w	r8, r8, #1
 80069da:	68e3      	ldr	r3, [r4, #12]
 80069dc:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80069de:	1a5b      	subs	r3, r3, r1
 80069e0:	4543      	cmp	r3, r8
 80069e2:	dcf0      	bgt.n	80069c6 <_printf_float+0x42e>
 80069e4:	e6fd      	b.n	80067e2 <_printf_float+0x24a>
 80069e6:	f04f 0800 	mov.w	r8, #0
 80069ea:	f104 0919 	add.w	r9, r4, #25
 80069ee:	e7f4      	b.n	80069da <_printf_float+0x442>

080069f0 <_printf_common>:
 80069f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f4:	4616      	mov	r6, r2
 80069f6:	4698      	mov	r8, r3
 80069f8:	688a      	ldr	r2, [r1, #8]
 80069fa:	690b      	ldr	r3, [r1, #16]
 80069fc:	4607      	mov	r7, r0
 80069fe:	4293      	cmp	r3, r2
 8006a00:	bfb8      	it	lt
 8006a02:	4613      	movlt	r3, r2
 8006a04:	6033      	str	r3, [r6, #0]
 8006a06:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a0a:	460c      	mov	r4, r1
 8006a0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a10:	b10a      	cbz	r2, 8006a16 <_printf_common+0x26>
 8006a12:	3301      	adds	r3, #1
 8006a14:	6033      	str	r3, [r6, #0]
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	0699      	lsls	r1, r3, #26
 8006a1a:	bf42      	ittt	mi
 8006a1c:	6833      	ldrmi	r3, [r6, #0]
 8006a1e:	3302      	addmi	r3, #2
 8006a20:	6033      	strmi	r3, [r6, #0]
 8006a22:	6825      	ldr	r5, [r4, #0]
 8006a24:	f015 0506 	ands.w	r5, r5, #6
 8006a28:	d106      	bne.n	8006a38 <_printf_common+0x48>
 8006a2a:	f104 0a19 	add.w	sl, r4, #25
 8006a2e:	68e3      	ldr	r3, [r4, #12]
 8006a30:	6832      	ldr	r2, [r6, #0]
 8006a32:	1a9b      	subs	r3, r3, r2
 8006a34:	42ab      	cmp	r3, r5
 8006a36:	dc2b      	bgt.n	8006a90 <_printf_common+0xa0>
 8006a38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a3c:	6822      	ldr	r2, [r4, #0]
 8006a3e:	3b00      	subs	r3, #0
 8006a40:	bf18      	it	ne
 8006a42:	2301      	movne	r3, #1
 8006a44:	0692      	lsls	r2, r2, #26
 8006a46:	d430      	bmi.n	8006aaa <_printf_common+0xba>
 8006a48:	4641      	mov	r1, r8
 8006a4a:	4638      	mov	r0, r7
 8006a4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a50:	47c8      	blx	r9
 8006a52:	3001      	adds	r0, #1
 8006a54:	d023      	beq.n	8006a9e <_printf_common+0xae>
 8006a56:	6823      	ldr	r3, [r4, #0]
 8006a58:	6922      	ldr	r2, [r4, #16]
 8006a5a:	f003 0306 	and.w	r3, r3, #6
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	bf14      	ite	ne
 8006a62:	2500      	movne	r5, #0
 8006a64:	6833      	ldreq	r3, [r6, #0]
 8006a66:	f04f 0600 	mov.w	r6, #0
 8006a6a:	bf08      	it	eq
 8006a6c:	68e5      	ldreq	r5, [r4, #12]
 8006a6e:	f104 041a 	add.w	r4, r4, #26
 8006a72:	bf08      	it	eq
 8006a74:	1aed      	subeq	r5, r5, r3
 8006a76:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006a7a:	bf08      	it	eq
 8006a7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a80:	4293      	cmp	r3, r2
 8006a82:	bfc4      	itt	gt
 8006a84:	1a9b      	subgt	r3, r3, r2
 8006a86:	18ed      	addgt	r5, r5, r3
 8006a88:	42b5      	cmp	r5, r6
 8006a8a:	d11a      	bne.n	8006ac2 <_printf_common+0xd2>
 8006a8c:	2000      	movs	r0, #0
 8006a8e:	e008      	b.n	8006aa2 <_printf_common+0xb2>
 8006a90:	2301      	movs	r3, #1
 8006a92:	4652      	mov	r2, sl
 8006a94:	4641      	mov	r1, r8
 8006a96:	4638      	mov	r0, r7
 8006a98:	47c8      	blx	r9
 8006a9a:	3001      	adds	r0, #1
 8006a9c:	d103      	bne.n	8006aa6 <_printf_common+0xb6>
 8006a9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa6:	3501      	adds	r5, #1
 8006aa8:	e7c1      	b.n	8006a2e <_printf_common+0x3e>
 8006aaa:	2030      	movs	r0, #48	@ 0x30
 8006aac:	18e1      	adds	r1, r4, r3
 8006aae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ab2:	1c5a      	adds	r2, r3, #1
 8006ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ab8:	4422      	add	r2, r4
 8006aba:	3302      	adds	r3, #2
 8006abc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ac0:	e7c2      	b.n	8006a48 <_printf_common+0x58>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	4622      	mov	r2, r4
 8006ac6:	4641      	mov	r1, r8
 8006ac8:	4638      	mov	r0, r7
 8006aca:	47c8      	blx	r9
 8006acc:	3001      	adds	r0, #1
 8006ace:	d0e6      	beq.n	8006a9e <_printf_common+0xae>
 8006ad0:	3601      	adds	r6, #1
 8006ad2:	e7d9      	b.n	8006a88 <_printf_common+0x98>

08006ad4 <_printf_i>:
 8006ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad8:	7e0f      	ldrb	r7, [r1, #24]
 8006ada:	4691      	mov	r9, r2
 8006adc:	2f78      	cmp	r7, #120	@ 0x78
 8006ade:	4680      	mov	r8, r0
 8006ae0:	460c      	mov	r4, r1
 8006ae2:	469a      	mov	sl, r3
 8006ae4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ae6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006aea:	d807      	bhi.n	8006afc <_printf_i+0x28>
 8006aec:	2f62      	cmp	r7, #98	@ 0x62
 8006aee:	d80a      	bhi.n	8006b06 <_printf_i+0x32>
 8006af0:	2f00      	cmp	r7, #0
 8006af2:	f000 80d3 	beq.w	8006c9c <_printf_i+0x1c8>
 8006af6:	2f58      	cmp	r7, #88	@ 0x58
 8006af8:	f000 80ba 	beq.w	8006c70 <_printf_i+0x19c>
 8006afc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b04:	e03a      	b.n	8006b7c <_printf_i+0xa8>
 8006b06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b0a:	2b15      	cmp	r3, #21
 8006b0c:	d8f6      	bhi.n	8006afc <_printf_i+0x28>
 8006b0e:	a101      	add	r1, pc, #4	@ (adr r1, 8006b14 <_printf_i+0x40>)
 8006b10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b14:	08006b6d 	.word	0x08006b6d
 8006b18:	08006b81 	.word	0x08006b81
 8006b1c:	08006afd 	.word	0x08006afd
 8006b20:	08006afd 	.word	0x08006afd
 8006b24:	08006afd 	.word	0x08006afd
 8006b28:	08006afd 	.word	0x08006afd
 8006b2c:	08006b81 	.word	0x08006b81
 8006b30:	08006afd 	.word	0x08006afd
 8006b34:	08006afd 	.word	0x08006afd
 8006b38:	08006afd 	.word	0x08006afd
 8006b3c:	08006afd 	.word	0x08006afd
 8006b40:	08006c83 	.word	0x08006c83
 8006b44:	08006bab 	.word	0x08006bab
 8006b48:	08006c3d 	.word	0x08006c3d
 8006b4c:	08006afd 	.word	0x08006afd
 8006b50:	08006afd 	.word	0x08006afd
 8006b54:	08006ca5 	.word	0x08006ca5
 8006b58:	08006afd 	.word	0x08006afd
 8006b5c:	08006bab 	.word	0x08006bab
 8006b60:	08006afd 	.word	0x08006afd
 8006b64:	08006afd 	.word	0x08006afd
 8006b68:	08006c45 	.word	0x08006c45
 8006b6c:	6833      	ldr	r3, [r6, #0]
 8006b6e:	1d1a      	adds	r2, r3, #4
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6032      	str	r2, [r6, #0]
 8006b74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e09e      	b.n	8006cbe <_printf_i+0x1ea>
 8006b80:	6833      	ldr	r3, [r6, #0]
 8006b82:	6820      	ldr	r0, [r4, #0]
 8006b84:	1d19      	adds	r1, r3, #4
 8006b86:	6031      	str	r1, [r6, #0]
 8006b88:	0606      	lsls	r6, r0, #24
 8006b8a:	d501      	bpl.n	8006b90 <_printf_i+0xbc>
 8006b8c:	681d      	ldr	r5, [r3, #0]
 8006b8e:	e003      	b.n	8006b98 <_printf_i+0xc4>
 8006b90:	0645      	lsls	r5, r0, #25
 8006b92:	d5fb      	bpl.n	8006b8c <_printf_i+0xb8>
 8006b94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b98:	2d00      	cmp	r5, #0
 8006b9a:	da03      	bge.n	8006ba4 <_printf_i+0xd0>
 8006b9c:	232d      	movs	r3, #45	@ 0x2d
 8006b9e:	426d      	negs	r5, r5
 8006ba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ba4:	230a      	movs	r3, #10
 8006ba6:	4859      	ldr	r0, [pc, #356]	@ (8006d0c <_printf_i+0x238>)
 8006ba8:	e011      	b.n	8006bce <_printf_i+0xfa>
 8006baa:	6821      	ldr	r1, [r4, #0]
 8006bac:	6833      	ldr	r3, [r6, #0]
 8006bae:	0608      	lsls	r0, r1, #24
 8006bb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006bb4:	d402      	bmi.n	8006bbc <_printf_i+0xe8>
 8006bb6:	0649      	lsls	r1, r1, #25
 8006bb8:	bf48      	it	mi
 8006bba:	b2ad      	uxthmi	r5, r5
 8006bbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8006bbe:	6033      	str	r3, [r6, #0]
 8006bc0:	bf14      	ite	ne
 8006bc2:	230a      	movne	r3, #10
 8006bc4:	2308      	moveq	r3, #8
 8006bc6:	4851      	ldr	r0, [pc, #324]	@ (8006d0c <_printf_i+0x238>)
 8006bc8:	2100      	movs	r1, #0
 8006bca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006bce:	6866      	ldr	r6, [r4, #4]
 8006bd0:	2e00      	cmp	r6, #0
 8006bd2:	bfa8      	it	ge
 8006bd4:	6821      	ldrge	r1, [r4, #0]
 8006bd6:	60a6      	str	r6, [r4, #8]
 8006bd8:	bfa4      	itt	ge
 8006bda:	f021 0104 	bicge.w	r1, r1, #4
 8006bde:	6021      	strge	r1, [r4, #0]
 8006be0:	b90d      	cbnz	r5, 8006be6 <_printf_i+0x112>
 8006be2:	2e00      	cmp	r6, #0
 8006be4:	d04b      	beq.n	8006c7e <_printf_i+0x1aa>
 8006be6:	4616      	mov	r6, r2
 8006be8:	fbb5 f1f3 	udiv	r1, r5, r3
 8006bec:	fb03 5711 	mls	r7, r3, r1, r5
 8006bf0:	5dc7      	ldrb	r7, [r0, r7]
 8006bf2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bf6:	462f      	mov	r7, r5
 8006bf8:	42bb      	cmp	r3, r7
 8006bfa:	460d      	mov	r5, r1
 8006bfc:	d9f4      	bls.n	8006be8 <_printf_i+0x114>
 8006bfe:	2b08      	cmp	r3, #8
 8006c00:	d10b      	bne.n	8006c1a <_printf_i+0x146>
 8006c02:	6823      	ldr	r3, [r4, #0]
 8006c04:	07df      	lsls	r7, r3, #31
 8006c06:	d508      	bpl.n	8006c1a <_printf_i+0x146>
 8006c08:	6923      	ldr	r3, [r4, #16]
 8006c0a:	6861      	ldr	r1, [r4, #4]
 8006c0c:	4299      	cmp	r1, r3
 8006c0e:	bfde      	ittt	le
 8006c10:	2330      	movle	r3, #48	@ 0x30
 8006c12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c16:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006c1a:	1b92      	subs	r2, r2, r6
 8006c1c:	6122      	str	r2, [r4, #16]
 8006c1e:	464b      	mov	r3, r9
 8006c20:	4621      	mov	r1, r4
 8006c22:	4640      	mov	r0, r8
 8006c24:	f8cd a000 	str.w	sl, [sp]
 8006c28:	aa03      	add	r2, sp, #12
 8006c2a:	f7ff fee1 	bl	80069f0 <_printf_common>
 8006c2e:	3001      	adds	r0, #1
 8006c30:	d14a      	bne.n	8006cc8 <_printf_i+0x1f4>
 8006c32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c36:	b004      	add	sp, #16
 8006c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	f043 0320 	orr.w	r3, r3, #32
 8006c42:	6023      	str	r3, [r4, #0]
 8006c44:	2778      	movs	r7, #120	@ 0x78
 8006c46:	4832      	ldr	r0, [pc, #200]	@ (8006d10 <_printf_i+0x23c>)
 8006c48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c4c:	6823      	ldr	r3, [r4, #0]
 8006c4e:	6831      	ldr	r1, [r6, #0]
 8006c50:	061f      	lsls	r7, r3, #24
 8006c52:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c56:	d402      	bmi.n	8006c5e <_printf_i+0x18a>
 8006c58:	065f      	lsls	r7, r3, #25
 8006c5a:	bf48      	it	mi
 8006c5c:	b2ad      	uxthmi	r5, r5
 8006c5e:	6031      	str	r1, [r6, #0]
 8006c60:	07d9      	lsls	r1, r3, #31
 8006c62:	bf44      	itt	mi
 8006c64:	f043 0320 	orrmi.w	r3, r3, #32
 8006c68:	6023      	strmi	r3, [r4, #0]
 8006c6a:	b11d      	cbz	r5, 8006c74 <_printf_i+0x1a0>
 8006c6c:	2310      	movs	r3, #16
 8006c6e:	e7ab      	b.n	8006bc8 <_printf_i+0xf4>
 8006c70:	4826      	ldr	r0, [pc, #152]	@ (8006d0c <_printf_i+0x238>)
 8006c72:	e7e9      	b.n	8006c48 <_printf_i+0x174>
 8006c74:	6823      	ldr	r3, [r4, #0]
 8006c76:	f023 0320 	bic.w	r3, r3, #32
 8006c7a:	6023      	str	r3, [r4, #0]
 8006c7c:	e7f6      	b.n	8006c6c <_printf_i+0x198>
 8006c7e:	4616      	mov	r6, r2
 8006c80:	e7bd      	b.n	8006bfe <_printf_i+0x12a>
 8006c82:	6833      	ldr	r3, [r6, #0]
 8006c84:	6825      	ldr	r5, [r4, #0]
 8006c86:	1d18      	adds	r0, r3, #4
 8006c88:	6961      	ldr	r1, [r4, #20]
 8006c8a:	6030      	str	r0, [r6, #0]
 8006c8c:	062e      	lsls	r6, r5, #24
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	d501      	bpl.n	8006c96 <_printf_i+0x1c2>
 8006c92:	6019      	str	r1, [r3, #0]
 8006c94:	e002      	b.n	8006c9c <_printf_i+0x1c8>
 8006c96:	0668      	lsls	r0, r5, #25
 8006c98:	d5fb      	bpl.n	8006c92 <_printf_i+0x1be>
 8006c9a:	8019      	strh	r1, [r3, #0]
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	4616      	mov	r6, r2
 8006ca0:	6123      	str	r3, [r4, #16]
 8006ca2:	e7bc      	b.n	8006c1e <_printf_i+0x14a>
 8006ca4:	6833      	ldr	r3, [r6, #0]
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	1d1a      	adds	r2, r3, #4
 8006caa:	6032      	str	r2, [r6, #0]
 8006cac:	681e      	ldr	r6, [r3, #0]
 8006cae:	6862      	ldr	r2, [r4, #4]
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f001 fa1c 	bl	80080ee <memchr>
 8006cb6:	b108      	cbz	r0, 8006cbc <_printf_i+0x1e8>
 8006cb8:	1b80      	subs	r0, r0, r6
 8006cba:	6060      	str	r0, [r4, #4]
 8006cbc:	6863      	ldr	r3, [r4, #4]
 8006cbe:	6123      	str	r3, [r4, #16]
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cc6:	e7aa      	b.n	8006c1e <_printf_i+0x14a>
 8006cc8:	4632      	mov	r2, r6
 8006cca:	4649      	mov	r1, r9
 8006ccc:	4640      	mov	r0, r8
 8006cce:	6923      	ldr	r3, [r4, #16]
 8006cd0:	47d0      	blx	sl
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	d0ad      	beq.n	8006c32 <_printf_i+0x15e>
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	079b      	lsls	r3, r3, #30
 8006cda:	d413      	bmi.n	8006d04 <_printf_i+0x230>
 8006cdc:	68e0      	ldr	r0, [r4, #12]
 8006cde:	9b03      	ldr	r3, [sp, #12]
 8006ce0:	4298      	cmp	r0, r3
 8006ce2:	bfb8      	it	lt
 8006ce4:	4618      	movlt	r0, r3
 8006ce6:	e7a6      	b.n	8006c36 <_printf_i+0x162>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	4632      	mov	r2, r6
 8006cec:	4649      	mov	r1, r9
 8006cee:	4640      	mov	r0, r8
 8006cf0:	47d0      	blx	sl
 8006cf2:	3001      	adds	r0, #1
 8006cf4:	d09d      	beq.n	8006c32 <_printf_i+0x15e>
 8006cf6:	3501      	adds	r5, #1
 8006cf8:	68e3      	ldr	r3, [r4, #12]
 8006cfa:	9903      	ldr	r1, [sp, #12]
 8006cfc:	1a5b      	subs	r3, r3, r1
 8006cfe:	42ab      	cmp	r3, r5
 8006d00:	dcf2      	bgt.n	8006ce8 <_printf_i+0x214>
 8006d02:	e7eb      	b.n	8006cdc <_printf_i+0x208>
 8006d04:	2500      	movs	r5, #0
 8006d06:	f104 0619 	add.w	r6, r4, #25
 8006d0a:	e7f5      	b.n	8006cf8 <_printf_i+0x224>
 8006d0c:	0800ac68 	.word	0x0800ac68
 8006d10:	0800ac79 	.word	0x0800ac79

08006d14 <_scanf_float>:
 8006d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d18:	b087      	sub	sp, #28
 8006d1a:	9303      	str	r3, [sp, #12]
 8006d1c:	688b      	ldr	r3, [r1, #8]
 8006d1e:	4617      	mov	r7, r2
 8006d20:	1e5a      	subs	r2, r3, #1
 8006d22:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006d26:	bf82      	ittt	hi
 8006d28:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006d2c:	eb03 0b05 	addhi.w	fp, r3, r5
 8006d30:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006d34:	460a      	mov	r2, r1
 8006d36:	f04f 0500 	mov.w	r5, #0
 8006d3a:	bf88      	it	hi
 8006d3c:	608b      	strhi	r3, [r1, #8]
 8006d3e:	680b      	ldr	r3, [r1, #0]
 8006d40:	4680      	mov	r8, r0
 8006d42:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006d46:	f842 3b1c 	str.w	r3, [r2], #28
 8006d4a:	460c      	mov	r4, r1
 8006d4c:	bf98      	it	ls
 8006d4e:	f04f 0b00 	movls.w	fp, #0
 8006d52:	4616      	mov	r6, r2
 8006d54:	46aa      	mov	sl, r5
 8006d56:	46a9      	mov	r9, r5
 8006d58:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006d5c:	9201      	str	r2, [sp, #4]
 8006d5e:	9502      	str	r5, [sp, #8]
 8006d60:	68a2      	ldr	r2, [r4, #8]
 8006d62:	b152      	cbz	r2, 8006d7a <_scanf_float+0x66>
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	781b      	ldrb	r3, [r3, #0]
 8006d68:	2b4e      	cmp	r3, #78	@ 0x4e
 8006d6a:	d865      	bhi.n	8006e38 <_scanf_float+0x124>
 8006d6c:	2b40      	cmp	r3, #64	@ 0x40
 8006d6e:	d83d      	bhi.n	8006dec <_scanf_float+0xd8>
 8006d70:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006d74:	b2c8      	uxtb	r0, r1
 8006d76:	280e      	cmp	r0, #14
 8006d78:	d93b      	bls.n	8006df2 <_scanf_float+0xde>
 8006d7a:	f1b9 0f00 	cmp.w	r9, #0
 8006d7e:	d003      	beq.n	8006d88 <_scanf_float+0x74>
 8006d80:	6823      	ldr	r3, [r4, #0]
 8006d82:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d86:	6023      	str	r3, [r4, #0]
 8006d88:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006d8c:	f1ba 0f01 	cmp.w	sl, #1
 8006d90:	f200 8118 	bhi.w	8006fc4 <_scanf_float+0x2b0>
 8006d94:	9b01      	ldr	r3, [sp, #4]
 8006d96:	429e      	cmp	r6, r3
 8006d98:	f200 8109 	bhi.w	8006fae <_scanf_float+0x29a>
 8006d9c:	2001      	movs	r0, #1
 8006d9e:	b007      	add	sp, #28
 8006da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006da8:	2a0d      	cmp	r2, #13
 8006daa:	d8e6      	bhi.n	8006d7a <_scanf_float+0x66>
 8006dac:	a101      	add	r1, pc, #4	@ (adr r1, 8006db4 <_scanf_float+0xa0>)
 8006dae:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006db2:	bf00      	nop
 8006db4:	08006efb 	.word	0x08006efb
 8006db8:	08006d7b 	.word	0x08006d7b
 8006dbc:	08006d7b 	.word	0x08006d7b
 8006dc0:	08006d7b 	.word	0x08006d7b
 8006dc4:	08006f5b 	.word	0x08006f5b
 8006dc8:	08006f33 	.word	0x08006f33
 8006dcc:	08006d7b 	.word	0x08006d7b
 8006dd0:	08006d7b 	.word	0x08006d7b
 8006dd4:	08006f09 	.word	0x08006f09
 8006dd8:	08006d7b 	.word	0x08006d7b
 8006ddc:	08006d7b 	.word	0x08006d7b
 8006de0:	08006d7b 	.word	0x08006d7b
 8006de4:	08006d7b 	.word	0x08006d7b
 8006de8:	08006ec1 	.word	0x08006ec1
 8006dec:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006df0:	e7da      	b.n	8006da8 <_scanf_float+0x94>
 8006df2:	290e      	cmp	r1, #14
 8006df4:	d8c1      	bhi.n	8006d7a <_scanf_float+0x66>
 8006df6:	a001      	add	r0, pc, #4	@ (adr r0, 8006dfc <_scanf_float+0xe8>)
 8006df8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006dfc:	08006eb1 	.word	0x08006eb1
 8006e00:	08006d7b 	.word	0x08006d7b
 8006e04:	08006eb1 	.word	0x08006eb1
 8006e08:	08006f47 	.word	0x08006f47
 8006e0c:	08006d7b 	.word	0x08006d7b
 8006e10:	08006e59 	.word	0x08006e59
 8006e14:	08006e97 	.word	0x08006e97
 8006e18:	08006e97 	.word	0x08006e97
 8006e1c:	08006e97 	.word	0x08006e97
 8006e20:	08006e97 	.word	0x08006e97
 8006e24:	08006e97 	.word	0x08006e97
 8006e28:	08006e97 	.word	0x08006e97
 8006e2c:	08006e97 	.word	0x08006e97
 8006e30:	08006e97 	.word	0x08006e97
 8006e34:	08006e97 	.word	0x08006e97
 8006e38:	2b6e      	cmp	r3, #110	@ 0x6e
 8006e3a:	d809      	bhi.n	8006e50 <_scanf_float+0x13c>
 8006e3c:	2b60      	cmp	r3, #96	@ 0x60
 8006e3e:	d8b1      	bhi.n	8006da4 <_scanf_float+0x90>
 8006e40:	2b54      	cmp	r3, #84	@ 0x54
 8006e42:	d07b      	beq.n	8006f3c <_scanf_float+0x228>
 8006e44:	2b59      	cmp	r3, #89	@ 0x59
 8006e46:	d198      	bne.n	8006d7a <_scanf_float+0x66>
 8006e48:	2d07      	cmp	r5, #7
 8006e4a:	d196      	bne.n	8006d7a <_scanf_float+0x66>
 8006e4c:	2508      	movs	r5, #8
 8006e4e:	e02c      	b.n	8006eaa <_scanf_float+0x196>
 8006e50:	2b74      	cmp	r3, #116	@ 0x74
 8006e52:	d073      	beq.n	8006f3c <_scanf_float+0x228>
 8006e54:	2b79      	cmp	r3, #121	@ 0x79
 8006e56:	e7f6      	b.n	8006e46 <_scanf_float+0x132>
 8006e58:	6821      	ldr	r1, [r4, #0]
 8006e5a:	05c8      	lsls	r0, r1, #23
 8006e5c:	d51b      	bpl.n	8006e96 <_scanf_float+0x182>
 8006e5e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006e62:	6021      	str	r1, [r4, #0]
 8006e64:	f109 0901 	add.w	r9, r9, #1
 8006e68:	f1bb 0f00 	cmp.w	fp, #0
 8006e6c:	d003      	beq.n	8006e76 <_scanf_float+0x162>
 8006e6e:	3201      	adds	r2, #1
 8006e70:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8006e74:	60a2      	str	r2, [r4, #8]
 8006e76:	68a3      	ldr	r3, [r4, #8]
 8006e78:	3b01      	subs	r3, #1
 8006e7a:	60a3      	str	r3, [r4, #8]
 8006e7c:	6923      	ldr	r3, [r4, #16]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	6123      	str	r3, [r4, #16]
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	3b01      	subs	r3, #1
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	607b      	str	r3, [r7, #4]
 8006e8a:	f340 8087 	ble.w	8006f9c <_scanf_float+0x288>
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	3301      	adds	r3, #1
 8006e92:	603b      	str	r3, [r7, #0]
 8006e94:	e764      	b.n	8006d60 <_scanf_float+0x4c>
 8006e96:	eb1a 0105 	adds.w	r1, sl, r5
 8006e9a:	f47f af6e 	bne.w	8006d7a <_scanf_float+0x66>
 8006e9e:	460d      	mov	r5, r1
 8006ea0:	468a      	mov	sl, r1
 8006ea2:	6822      	ldr	r2, [r4, #0]
 8006ea4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006ea8:	6022      	str	r2, [r4, #0]
 8006eaa:	f806 3b01 	strb.w	r3, [r6], #1
 8006eae:	e7e2      	b.n	8006e76 <_scanf_float+0x162>
 8006eb0:	6822      	ldr	r2, [r4, #0]
 8006eb2:	0610      	lsls	r0, r2, #24
 8006eb4:	f57f af61 	bpl.w	8006d7a <_scanf_float+0x66>
 8006eb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ebc:	6022      	str	r2, [r4, #0]
 8006ebe:	e7f4      	b.n	8006eaa <_scanf_float+0x196>
 8006ec0:	f1ba 0f00 	cmp.w	sl, #0
 8006ec4:	d10e      	bne.n	8006ee4 <_scanf_float+0x1d0>
 8006ec6:	f1b9 0f00 	cmp.w	r9, #0
 8006eca:	d10e      	bne.n	8006eea <_scanf_float+0x1d6>
 8006ecc:	6822      	ldr	r2, [r4, #0]
 8006ece:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006ed2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006ed6:	d108      	bne.n	8006eea <_scanf_float+0x1d6>
 8006ed8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006edc:	f04f 0a01 	mov.w	sl, #1
 8006ee0:	6022      	str	r2, [r4, #0]
 8006ee2:	e7e2      	b.n	8006eaa <_scanf_float+0x196>
 8006ee4:	f1ba 0f02 	cmp.w	sl, #2
 8006ee8:	d055      	beq.n	8006f96 <_scanf_float+0x282>
 8006eea:	2d01      	cmp	r5, #1
 8006eec:	d002      	beq.n	8006ef4 <_scanf_float+0x1e0>
 8006eee:	2d04      	cmp	r5, #4
 8006ef0:	f47f af43 	bne.w	8006d7a <_scanf_float+0x66>
 8006ef4:	3501      	adds	r5, #1
 8006ef6:	b2ed      	uxtb	r5, r5
 8006ef8:	e7d7      	b.n	8006eaa <_scanf_float+0x196>
 8006efa:	f1ba 0f01 	cmp.w	sl, #1
 8006efe:	f47f af3c 	bne.w	8006d7a <_scanf_float+0x66>
 8006f02:	f04f 0a02 	mov.w	sl, #2
 8006f06:	e7d0      	b.n	8006eaa <_scanf_float+0x196>
 8006f08:	b97d      	cbnz	r5, 8006f2a <_scanf_float+0x216>
 8006f0a:	f1b9 0f00 	cmp.w	r9, #0
 8006f0e:	f47f af37 	bne.w	8006d80 <_scanf_float+0x6c>
 8006f12:	6822      	ldr	r2, [r4, #0]
 8006f14:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006f18:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006f1c:	f040 8103 	bne.w	8007126 <_scanf_float+0x412>
 8006f20:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006f24:	2501      	movs	r5, #1
 8006f26:	6022      	str	r2, [r4, #0]
 8006f28:	e7bf      	b.n	8006eaa <_scanf_float+0x196>
 8006f2a:	2d03      	cmp	r5, #3
 8006f2c:	d0e2      	beq.n	8006ef4 <_scanf_float+0x1e0>
 8006f2e:	2d05      	cmp	r5, #5
 8006f30:	e7de      	b.n	8006ef0 <_scanf_float+0x1dc>
 8006f32:	2d02      	cmp	r5, #2
 8006f34:	f47f af21 	bne.w	8006d7a <_scanf_float+0x66>
 8006f38:	2503      	movs	r5, #3
 8006f3a:	e7b6      	b.n	8006eaa <_scanf_float+0x196>
 8006f3c:	2d06      	cmp	r5, #6
 8006f3e:	f47f af1c 	bne.w	8006d7a <_scanf_float+0x66>
 8006f42:	2507      	movs	r5, #7
 8006f44:	e7b1      	b.n	8006eaa <_scanf_float+0x196>
 8006f46:	6822      	ldr	r2, [r4, #0]
 8006f48:	0591      	lsls	r1, r2, #22
 8006f4a:	f57f af16 	bpl.w	8006d7a <_scanf_float+0x66>
 8006f4e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006f52:	6022      	str	r2, [r4, #0]
 8006f54:	f8cd 9008 	str.w	r9, [sp, #8]
 8006f58:	e7a7      	b.n	8006eaa <_scanf_float+0x196>
 8006f5a:	6822      	ldr	r2, [r4, #0]
 8006f5c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006f60:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006f64:	d006      	beq.n	8006f74 <_scanf_float+0x260>
 8006f66:	0550      	lsls	r0, r2, #21
 8006f68:	f57f af07 	bpl.w	8006d7a <_scanf_float+0x66>
 8006f6c:	f1b9 0f00 	cmp.w	r9, #0
 8006f70:	f000 80d9 	beq.w	8007126 <_scanf_float+0x412>
 8006f74:	0591      	lsls	r1, r2, #22
 8006f76:	bf58      	it	pl
 8006f78:	9902      	ldrpl	r1, [sp, #8]
 8006f7a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006f7e:	bf58      	it	pl
 8006f80:	eba9 0101 	subpl.w	r1, r9, r1
 8006f84:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006f88:	f04f 0900 	mov.w	r9, #0
 8006f8c:	bf58      	it	pl
 8006f8e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006f92:	6022      	str	r2, [r4, #0]
 8006f94:	e789      	b.n	8006eaa <_scanf_float+0x196>
 8006f96:	f04f 0a03 	mov.w	sl, #3
 8006f9a:	e786      	b.n	8006eaa <_scanf_float+0x196>
 8006f9c:	4639      	mov	r1, r7
 8006f9e:	4640      	mov	r0, r8
 8006fa0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006fa4:	4798      	blx	r3
 8006fa6:	2800      	cmp	r0, #0
 8006fa8:	f43f aeda 	beq.w	8006d60 <_scanf_float+0x4c>
 8006fac:	e6e5      	b.n	8006d7a <_scanf_float+0x66>
 8006fae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fb2:	463a      	mov	r2, r7
 8006fb4:	4640      	mov	r0, r8
 8006fb6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006fba:	4798      	blx	r3
 8006fbc:	6923      	ldr	r3, [r4, #16]
 8006fbe:	3b01      	subs	r3, #1
 8006fc0:	6123      	str	r3, [r4, #16]
 8006fc2:	e6e7      	b.n	8006d94 <_scanf_float+0x80>
 8006fc4:	1e6b      	subs	r3, r5, #1
 8006fc6:	2b06      	cmp	r3, #6
 8006fc8:	d824      	bhi.n	8007014 <_scanf_float+0x300>
 8006fca:	2d02      	cmp	r5, #2
 8006fcc:	d836      	bhi.n	800703c <_scanf_float+0x328>
 8006fce:	9b01      	ldr	r3, [sp, #4]
 8006fd0:	429e      	cmp	r6, r3
 8006fd2:	f67f aee3 	bls.w	8006d9c <_scanf_float+0x88>
 8006fd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fda:	463a      	mov	r2, r7
 8006fdc:	4640      	mov	r0, r8
 8006fde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006fe2:	4798      	blx	r3
 8006fe4:	6923      	ldr	r3, [r4, #16]
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	6123      	str	r3, [r4, #16]
 8006fea:	e7f0      	b.n	8006fce <_scanf_float+0x2ba>
 8006fec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ff0:	463a      	mov	r2, r7
 8006ff2:	4640      	mov	r0, r8
 8006ff4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006ff8:	4798      	blx	r3
 8006ffa:	6923      	ldr	r3, [r4, #16]
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	6123      	str	r3, [r4, #16]
 8007000:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007004:	fa5f fa8a 	uxtb.w	sl, sl
 8007008:	f1ba 0f02 	cmp.w	sl, #2
 800700c:	d1ee      	bne.n	8006fec <_scanf_float+0x2d8>
 800700e:	3d03      	subs	r5, #3
 8007010:	b2ed      	uxtb	r5, r5
 8007012:	1b76      	subs	r6, r6, r5
 8007014:	6823      	ldr	r3, [r4, #0]
 8007016:	05da      	lsls	r2, r3, #23
 8007018:	d530      	bpl.n	800707c <_scanf_float+0x368>
 800701a:	055b      	lsls	r3, r3, #21
 800701c:	d511      	bpl.n	8007042 <_scanf_float+0x32e>
 800701e:	9b01      	ldr	r3, [sp, #4]
 8007020:	429e      	cmp	r6, r3
 8007022:	f67f aebb 	bls.w	8006d9c <_scanf_float+0x88>
 8007026:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800702a:	463a      	mov	r2, r7
 800702c:	4640      	mov	r0, r8
 800702e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007032:	4798      	blx	r3
 8007034:	6923      	ldr	r3, [r4, #16]
 8007036:	3b01      	subs	r3, #1
 8007038:	6123      	str	r3, [r4, #16]
 800703a:	e7f0      	b.n	800701e <_scanf_float+0x30a>
 800703c:	46aa      	mov	sl, r5
 800703e:	46b3      	mov	fp, r6
 8007040:	e7de      	b.n	8007000 <_scanf_float+0x2ec>
 8007042:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007046:	6923      	ldr	r3, [r4, #16]
 8007048:	2965      	cmp	r1, #101	@ 0x65
 800704a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800704e:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8007052:	6123      	str	r3, [r4, #16]
 8007054:	d00c      	beq.n	8007070 <_scanf_float+0x35c>
 8007056:	2945      	cmp	r1, #69	@ 0x45
 8007058:	d00a      	beq.n	8007070 <_scanf_float+0x35c>
 800705a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800705e:	463a      	mov	r2, r7
 8007060:	4640      	mov	r0, r8
 8007062:	4798      	blx	r3
 8007064:	6923      	ldr	r3, [r4, #16]
 8007066:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800706a:	3b01      	subs	r3, #1
 800706c:	1eb5      	subs	r5, r6, #2
 800706e:	6123      	str	r3, [r4, #16]
 8007070:	463a      	mov	r2, r7
 8007072:	4640      	mov	r0, r8
 8007074:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007078:	4798      	blx	r3
 800707a:	462e      	mov	r6, r5
 800707c:	6822      	ldr	r2, [r4, #0]
 800707e:	f012 0210 	ands.w	r2, r2, #16
 8007082:	d001      	beq.n	8007088 <_scanf_float+0x374>
 8007084:	2000      	movs	r0, #0
 8007086:	e68a      	b.n	8006d9e <_scanf_float+0x8a>
 8007088:	7032      	strb	r2, [r6, #0]
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007090:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007094:	d11c      	bne.n	80070d0 <_scanf_float+0x3bc>
 8007096:	9b02      	ldr	r3, [sp, #8]
 8007098:	454b      	cmp	r3, r9
 800709a:	eba3 0209 	sub.w	r2, r3, r9
 800709e:	d123      	bne.n	80070e8 <_scanf_float+0x3d4>
 80070a0:	2200      	movs	r2, #0
 80070a2:	4640      	mov	r0, r8
 80070a4:	9901      	ldr	r1, [sp, #4]
 80070a6:	f000 ff37 	bl	8007f18 <_strtod_r>
 80070aa:	9b03      	ldr	r3, [sp, #12]
 80070ac:	6825      	ldr	r5, [r4, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f015 0f02 	tst.w	r5, #2
 80070b4:	4606      	mov	r6, r0
 80070b6:	460f      	mov	r7, r1
 80070b8:	f103 0204 	add.w	r2, r3, #4
 80070bc:	d01f      	beq.n	80070fe <_scanf_float+0x3ea>
 80070be:	9903      	ldr	r1, [sp, #12]
 80070c0:	600a      	str	r2, [r1, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	e9c3 6700 	strd	r6, r7, [r3]
 80070c8:	68e3      	ldr	r3, [r4, #12]
 80070ca:	3301      	adds	r3, #1
 80070cc:	60e3      	str	r3, [r4, #12]
 80070ce:	e7d9      	b.n	8007084 <_scanf_float+0x370>
 80070d0:	9b04      	ldr	r3, [sp, #16]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d0e4      	beq.n	80070a0 <_scanf_float+0x38c>
 80070d6:	9905      	ldr	r1, [sp, #20]
 80070d8:	230a      	movs	r3, #10
 80070da:	4640      	mov	r0, r8
 80070dc:	3101      	adds	r1, #1
 80070de:	f000 ff9b 	bl	8008018 <_strtol_r>
 80070e2:	9b04      	ldr	r3, [sp, #16]
 80070e4:	9e05      	ldr	r6, [sp, #20]
 80070e6:	1ac2      	subs	r2, r0, r3
 80070e8:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80070ec:	429e      	cmp	r6, r3
 80070ee:	bf28      	it	cs
 80070f0:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80070f4:	4630      	mov	r0, r6
 80070f6:	490d      	ldr	r1, [pc, #52]	@ (800712c <_scanf_float+0x418>)
 80070f8:	f000 f850 	bl	800719c <siprintf>
 80070fc:	e7d0      	b.n	80070a0 <_scanf_float+0x38c>
 80070fe:	076d      	lsls	r5, r5, #29
 8007100:	d4dd      	bmi.n	80070be <_scanf_float+0x3aa>
 8007102:	9d03      	ldr	r5, [sp, #12]
 8007104:	602a      	str	r2, [r5, #0]
 8007106:	681d      	ldr	r5, [r3, #0]
 8007108:	4602      	mov	r2, r0
 800710a:	460b      	mov	r3, r1
 800710c:	f7f9 fc7e 	bl	8000a0c <__aeabi_dcmpun>
 8007110:	b120      	cbz	r0, 800711c <_scanf_float+0x408>
 8007112:	4807      	ldr	r0, [pc, #28]	@ (8007130 <_scanf_float+0x41c>)
 8007114:	f001 f80e 	bl	8008134 <nanf>
 8007118:	6028      	str	r0, [r5, #0]
 800711a:	e7d5      	b.n	80070c8 <_scanf_float+0x3b4>
 800711c:	4630      	mov	r0, r6
 800711e:	4639      	mov	r1, r7
 8007120:	f7f9 fcd2 	bl	8000ac8 <__aeabi_d2f>
 8007124:	e7f8      	b.n	8007118 <_scanf_float+0x404>
 8007126:	f04f 0900 	mov.w	r9, #0
 800712a:	e62d      	b.n	8006d88 <_scanf_float+0x74>
 800712c:	0800ac8a 	.word	0x0800ac8a
 8007130:	0800b083 	.word	0x0800b083

08007134 <sniprintf>:
 8007134:	b40c      	push	{r2, r3}
 8007136:	b530      	push	{r4, r5, lr}
 8007138:	4b17      	ldr	r3, [pc, #92]	@ (8007198 <sniprintf+0x64>)
 800713a:	1e0c      	subs	r4, r1, #0
 800713c:	681d      	ldr	r5, [r3, #0]
 800713e:	b09d      	sub	sp, #116	@ 0x74
 8007140:	da08      	bge.n	8007154 <sniprintf+0x20>
 8007142:	238b      	movs	r3, #139	@ 0x8b
 8007144:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007148:	602b      	str	r3, [r5, #0]
 800714a:	b01d      	add	sp, #116	@ 0x74
 800714c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007150:	b002      	add	sp, #8
 8007152:	4770      	bx	lr
 8007154:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007158:	f8ad 3014 	strh.w	r3, [sp, #20]
 800715c:	bf0c      	ite	eq
 800715e:	4623      	moveq	r3, r4
 8007160:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8007164:	9304      	str	r3, [sp, #16]
 8007166:	9307      	str	r3, [sp, #28]
 8007168:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800716c:	9002      	str	r0, [sp, #8]
 800716e:	9006      	str	r0, [sp, #24]
 8007170:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007174:	4628      	mov	r0, r5
 8007176:	ab21      	add	r3, sp, #132	@ 0x84
 8007178:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800717a:	a902      	add	r1, sp, #8
 800717c:	9301      	str	r3, [sp, #4]
 800717e:	f002 f9c3 	bl	8009508 <_svfiprintf_r>
 8007182:	1c43      	adds	r3, r0, #1
 8007184:	bfbc      	itt	lt
 8007186:	238b      	movlt	r3, #139	@ 0x8b
 8007188:	602b      	strlt	r3, [r5, #0]
 800718a:	2c00      	cmp	r4, #0
 800718c:	d0dd      	beq.n	800714a <sniprintf+0x16>
 800718e:	2200      	movs	r2, #0
 8007190:	9b02      	ldr	r3, [sp, #8]
 8007192:	701a      	strb	r2, [r3, #0]
 8007194:	e7d9      	b.n	800714a <sniprintf+0x16>
 8007196:	bf00      	nop
 8007198:	200001a0 	.word	0x200001a0

0800719c <siprintf>:
 800719c:	b40e      	push	{r1, r2, r3}
 800719e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80071a2:	b500      	push	{lr}
 80071a4:	b09c      	sub	sp, #112	@ 0x70
 80071a6:	ab1d      	add	r3, sp, #116	@ 0x74
 80071a8:	9002      	str	r0, [sp, #8]
 80071aa:	9006      	str	r0, [sp, #24]
 80071ac:	9107      	str	r1, [sp, #28]
 80071ae:	9104      	str	r1, [sp, #16]
 80071b0:	4808      	ldr	r0, [pc, #32]	@ (80071d4 <siprintf+0x38>)
 80071b2:	4909      	ldr	r1, [pc, #36]	@ (80071d8 <siprintf+0x3c>)
 80071b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80071b8:	9105      	str	r1, [sp, #20]
 80071ba:	6800      	ldr	r0, [r0, #0]
 80071bc:	a902      	add	r1, sp, #8
 80071be:	9301      	str	r3, [sp, #4]
 80071c0:	f002 f9a2 	bl	8009508 <_svfiprintf_r>
 80071c4:	2200      	movs	r2, #0
 80071c6:	9b02      	ldr	r3, [sp, #8]
 80071c8:	701a      	strb	r2, [r3, #0]
 80071ca:	b01c      	add	sp, #112	@ 0x70
 80071cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80071d0:	b003      	add	sp, #12
 80071d2:	4770      	bx	lr
 80071d4:	200001a0 	.word	0x200001a0
 80071d8:	ffff0208 	.word	0xffff0208

080071dc <std>:
 80071dc:	2300      	movs	r3, #0
 80071de:	b510      	push	{r4, lr}
 80071e0:	4604      	mov	r4, r0
 80071e2:	e9c0 3300 	strd	r3, r3, [r0]
 80071e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80071ea:	6083      	str	r3, [r0, #8]
 80071ec:	8181      	strh	r1, [r0, #12]
 80071ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80071f0:	81c2      	strh	r2, [r0, #14]
 80071f2:	6183      	str	r3, [r0, #24]
 80071f4:	4619      	mov	r1, r3
 80071f6:	2208      	movs	r2, #8
 80071f8:	305c      	adds	r0, #92	@ 0x5c
 80071fa:	f000 ff3f 	bl	800807c <memset>
 80071fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007234 <std+0x58>)
 8007200:	6224      	str	r4, [r4, #32]
 8007202:	6263      	str	r3, [r4, #36]	@ 0x24
 8007204:	4b0c      	ldr	r3, [pc, #48]	@ (8007238 <std+0x5c>)
 8007206:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007208:	4b0c      	ldr	r3, [pc, #48]	@ (800723c <std+0x60>)
 800720a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800720c:	4b0c      	ldr	r3, [pc, #48]	@ (8007240 <std+0x64>)
 800720e:	6323      	str	r3, [r4, #48]	@ 0x30
 8007210:	4b0c      	ldr	r3, [pc, #48]	@ (8007244 <std+0x68>)
 8007212:	429c      	cmp	r4, r3
 8007214:	d006      	beq.n	8007224 <std+0x48>
 8007216:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800721a:	4294      	cmp	r4, r2
 800721c:	d002      	beq.n	8007224 <std+0x48>
 800721e:	33d0      	adds	r3, #208	@ 0xd0
 8007220:	429c      	cmp	r4, r3
 8007222:	d105      	bne.n	8007230 <std+0x54>
 8007224:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007228:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800722c:	f000 bf5c 	b.w	80080e8 <__retarget_lock_init_recursive>
 8007230:	bd10      	pop	{r4, pc}
 8007232:	bf00      	nop
 8007234:	0800a32d 	.word	0x0800a32d
 8007238:	0800a34f 	.word	0x0800a34f
 800723c:	0800a387 	.word	0x0800a387
 8007240:	0800a3ab 	.word	0x0800a3ab
 8007244:	200003e0 	.word	0x200003e0

08007248 <stdio_exit_handler>:
 8007248:	4a02      	ldr	r2, [pc, #8]	@ (8007254 <stdio_exit_handler+0xc>)
 800724a:	4903      	ldr	r1, [pc, #12]	@ (8007258 <stdio_exit_handler+0x10>)
 800724c:	4803      	ldr	r0, [pc, #12]	@ (800725c <stdio_exit_handler+0x14>)
 800724e:	f000 bee5 	b.w	800801c <_fwalk_sglue>
 8007252:	bf00      	nop
 8007254:	20000028 	.word	0x20000028
 8007258:	08009979 	.word	0x08009979
 800725c:	200001a4 	.word	0x200001a4

08007260 <cleanup_stdio>:
 8007260:	6841      	ldr	r1, [r0, #4]
 8007262:	4b0c      	ldr	r3, [pc, #48]	@ (8007294 <cleanup_stdio+0x34>)
 8007264:	b510      	push	{r4, lr}
 8007266:	4299      	cmp	r1, r3
 8007268:	4604      	mov	r4, r0
 800726a:	d001      	beq.n	8007270 <cleanup_stdio+0x10>
 800726c:	f002 fb84 	bl	8009978 <_fflush_r>
 8007270:	68a1      	ldr	r1, [r4, #8]
 8007272:	4b09      	ldr	r3, [pc, #36]	@ (8007298 <cleanup_stdio+0x38>)
 8007274:	4299      	cmp	r1, r3
 8007276:	d002      	beq.n	800727e <cleanup_stdio+0x1e>
 8007278:	4620      	mov	r0, r4
 800727a:	f002 fb7d 	bl	8009978 <_fflush_r>
 800727e:	68e1      	ldr	r1, [r4, #12]
 8007280:	4b06      	ldr	r3, [pc, #24]	@ (800729c <cleanup_stdio+0x3c>)
 8007282:	4299      	cmp	r1, r3
 8007284:	d004      	beq.n	8007290 <cleanup_stdio+0x30>
 8007286:	4620      	mov	r0, r4
 8007288:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800728c:	f002 bb74 	b.w	8009978 <_fflush_r>
 8007290:	bd10      	pop	{r4, pc}
 8007292:	bf00      	nop
 8007294:	200003e0 	.word	0x200003e0
 8007298:	20000448 	.word	0x20000448
 800729c:	200004b0 	.word	0x200004b0

080072a0 <global_stdio_init.part.0>:
 80072a0:	b510      	push	{r4, lr}
 80072a2:	4b0b      	ldr	r3, [pc, #44]	@ (80072d0 <global_stdio_init.part.0+0x30>)
 80072a4:	4c0b      	ldr	r4, [pc, #44]	@ (80072d4 <global_stdio_init.part.0+0x34>)
 80072a6:	4a0c      	ldr	r2, [pc, #48]	@ (80072d8 <global_stdio_init.part.0+0x38>)
 80072a8:	4620      	mov	r0, r4
 80072aa:	601a      	str	r2, [r3, #0]
 80072ac:	2104      	movs	r1, #4
 80072ae:	2200      	movs	r2, #0
 80072b0:	f7ff ff94 	bl	80071dc <std>
 80072b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80072b8:	2201      	movs	r2, #1
 80072ba:	2109      	movs	r1, #9
 80072bc:	f7ff ff8e 	bl	80071dc <std>
 80072c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80072c4:	2202      	movs	r2, #2
 80072c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072ca:	2112      	movs	r1, #18
 80072cc:	f7ff bf86 	b.w	80071dc <std>
 80072d0:	20000518 	.word	0x20000518
 80072d4:	200003e0 	.word	0x200003e0
 80072d8:	08007249 	.word	0x08007249

080072dc <__sfp_lock_acquire>:
 80072dc:	4801      	ldr	r0, [pc, #4]	@ (80072e4 <__sfp_lock_acquire+0x8>)
 80072de:	f000 bf04 	b.w	80080ea <__retarget_lock_acquire_recursive>
 80072e2:	bf00      	nop
 80072e4:	2000051d 	.word	0x2000051d

080072e8 <__sfp_lock_release>:
 80072e8:	4801      	ldr	r0, [pc, #4]	@ (80072f0 <__sfp_lock_release+0x8>)
 80072ea:	f000 beff 	b.w	80080ec <__retarget_lock_release_recursive>
 80072ee:	bf00      	nop
 80072f0:	2000051d 	.word	0x2000051d

080072f4 <__sinit>:
 80072f4:	b510      	push	{r4, lr}
 80072f6:	4604      	mov	r4, r0
 80072f8:	f7ff fff0 	bl	80072dc <__sfp_lock_acquire>
 80072fc:	6a23      	ldr	r3, [r4, #32]
 80072fe:	b11b      	cbz	r3, 8007308 <__sinit+0x14>
 8007300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007304:	f7ff bff0 	b.w	80072e8 <__sfp_lock_release>
 8007308:	4b04      	ldr	r3, [pc, #16]	@ (800731c <__sinit+0x28>)
 800730a:	6223      	str	r3, [r4, #32]
 800730c:	4b04      	ldr	r3, [pc, #16]	@ (8007320 <__sinit+0x2c>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1f5      	bne.n	8007300 <__sinit+0xc>
 8007314:	f7ff ffc4 	bl	80072a0 <global_stdio_init.part.0>
 8007318:	e7f2      	b.n	8007300 <__sinit+0xc>
 800731a:	bf00      	nop
 800731c:	08007261 	.word	0x08007261
 8007320:	20000518 	.word	0x20000518

08007324 <sulp>:
 8007324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007328:	460f      	mov	r7, r1
 800732a:	4690      	mov	r8, r2
 800732c:	f002 feca 	bl	800a0c4 <__ulp>
 8007330:	4604      	mov	r4, r0
 8007332:	460d      	mov	r5, r1
 8007334:	f1b8 0f00 	cmp.w	r8, #0
 8007338:	d011      	beq.n	800735e <sulp+0x3a>
 800733a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800733e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007342:	2b00      	cmp	r3, #0
 8007344:	dd0b      	ble.n	800735e <sulp+0x3a>
 8007346:	2400      	movs	r4, #0
 8007348:	051b      	lsls	r3, r3, #20
 800734a:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800734e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007352:	4622      	mov	r2, r4
 8007354:	462b      	mov	r3, r5
 8007356:	f7f9 f8bf 	bl	80004d8 <__aeabi_dmul>
 800735a:	4604      	mov	r4, r0
 800735c:	460d      	mov	r5, r1
 800735e:	4620      	mov	r0, r4
 8007360:	4629      	mov	r1, r5
 8007362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08007368 <_strtod_l>:
 8007368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800736c:	b09f      	sub	sp, #124	@ 0x7c
 800736e:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007370:	2200      	movs	r2, #0
 8007372:	460c      	mov	r4, r1
 8007374:	921a      	str	r2, [sp, #104]	@ 0x68
 8007376:	f04f 0a00 	mov.w	sl, #0
 800737a:	f04f 0b00 	mov.w	fp, #0
 800737e:	460a      	mov	r2, r1
 8007380:	9005      	str	r0, [sp, #20]
 8007382:	9219      	str	r2, [sp, #100]	@ 0x64
 8007384:	7811      	ldrb	r1, [r2, #0]
 8007386:	292b      	cmp	r1, #43	@ 0x2b
 8007388:	d048      	beq.n	800741c <_strtod_l+0xb4>
 800738a:	d836      	bhi.n	80073fa <_strtod_l+0x92>
 800738c:	290d      	cmp	r1, #13
 800738e:	d830      	bhi.n	80073f2 <_strtod_l+0x8a>
 8007390:	2908      	cmp	r1, #8
 8007392:	d830      	bhi.n	80073f6 <_strtod_l+0x8e>
 8007394:	2900      	cmp	r1, #0
 8007396:	d039      	beq.n	800740c <_strtod_l+0xa4>
 8007398:	2200      	movs	r2, #0
 800739a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800739c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800739e:	782a      	ldrb	r2, [r5, #0]
 80073a0:	2a30      	cmp	r2, #48	@ 0x30
 80073a2:	f040 80b1 	bne.w	8007508 <_strtod_l+0x1a0>
 80073a6:	786a      	ldrb	r2, [r5, #1]
 80073a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80073ac:	2a58      	cmp	r2, #88	@ 0x58
 80073ae:	d16c      	bne.n	800748a <_strtod_l+0x122>
 80073b0:	9302      	str	r3, [sp, #8]
 80073b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073b4:	4a8e      	ldr	r2, [pc, #568]	@ (80075f0 <_strtod_l+0x288>)
 80073b6:	9301      	str	r3, [sp, #4]
 80073b8:	ab1a      	add	r3, sp, #104	@ 0x68
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	9805      	ldr	r0, [sp, #20]
 80073be:	ab1b      	add	r3, sp, #108	@ 0x6c
 80073c0:	a919      	add	r1, sp, #100	@ 0x64
 80073c2:	f001 fd75 	bl	8008eb0 <__gethex>
 80073c6:	f010 060f 	ands.w	r6, r0, #15
 80073ca:	4604      	mov	r4, r0
 80073cc:	d005      	beq.n	80073da <_strtod_l+0x72>
 80073ce:	2e06      	cmp	r6, #6
 80073d0:	d126      	bne.n	8007420 <_strtod_l+0xb8>
 80073d2:	2300      	movs	r3, #0
 80073d4:	3501      	adds	r5, #1
 80073d6:	9519      	str	r5, [sp, #100]	@ 0x64
 80073d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80073dc:	2b00      	cmp	r3, #0
 80073de:	f040 8584 	bne.w	8007eea <_strtod_l+0xb82>
 80073e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073e4:	b1bb      	cbz	r3, 8007416 <_strtod_l+0xae>
 80073e6:	4650      	mov	r0, sl
 80073e8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80073ec:	b01f      	add	sp, #124	@ 0x7c
 80073ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073f2:	2920      	cmp	r1, #32
 80073f4:	d1d0      	bne.n	8007398 <_strtod_l+0x30>
 80073f6:	3201      	adds	r2, #1
 80073f8:	e7c3      	b.n	8007382 <_strtod_l+0x1a>
 80073fa:	292d      	cmp	r1, #45	@ 0x2d
 80073fc:	d1cc      	bne.n	8007398 <_strtod_l+0x30>
 80073fe:	2101      	movs	r1, #1
 8007400:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007402:	1c51      	adds	r1, r2, #1
 8007404:	9119      	str	r1, [sp, #100]	@ 0x64
 8007406:	7852      	ldrb	r2, [r2, #1]
 8007408:	2a00      	cmp	r2, #0
 800740a:	d1c7      	bne.n	800739c <_strtod_l+0x34>
 800740c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800740e:	9419      	str	r4, [sp, #100]	@ 0x64
 8007410:	2b00      	cmp	r3, #0
 8007412:	f040 8568 	bne.w	8007ee6 <_strtod_l+0xb7e>
 8007416:	4650      	mov	r0, sl
 8007418:	4659      	mov	r1, fp
 800741a:	e7e7      	b.n	80073ec <_strtod_l+0x84>
 800741c:	2100      	movs	r1, #0
 800741e:	e7ef      	b.n	8007400 <_strtod_l+0x98>
 8007420:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007422:	b13a      	cbz	r2, 8007434 <_strtod_l+0xcc>
 8007424:	2135      	movs	r1, #53	@ 0x35
 8007426:	a81c      	add	r0, sp, #112	@ 0x70
 8007428:	f002 ff3c 	bl	800a2a4 <__copybits>
 800742c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800742e:	9805      	ldr	r0, [sp, #20]
 8007430:	f002 fb16 	bl	8009a60 <_Bfree>
 8007434:	3e01      	subs	r6, #1
 8007436:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007438:	2e04      	cmp	r6, #4
 800743a:	d806      	bhi.n	800744a <_strtod_l+0xe2>
 800743c:	e8df f006 	tbb	[pc, r6]
 8007440:	201d0314 	.word	0x201d0314
 8007444:	14          	.byte	0x14
 8007445:	00          	.byte	0x00
 8007446:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800744a:	05e1      	lsls	r1, r4, #23
 800744c:	bf48      	it	mi
 800744e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007452:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007456:	0d1b      	lsrs	r3, r3, #20
 8007458:	051b      	lsls	r3, r3, #20
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1bd      	bne.n	80073da <_strtod_l+0x72>
 800745e:	f000 fe19 	bl	8008094 <__errno>
 8007462:	2322      	movs	r3, #34	@ 0x22
 8007464:	6003      	str	r3, [r0, #0]
 8007466:	e7b8      	b.n	80073da <_strtod_l+0x72>
 8007468:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800746c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007470:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007474:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007478:	e7e7      	b.n	800744a <_strtod_l+0xe2>
 800747a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80075f4 <_strtod_l+0x28c>
 800747e:	e7e4      	b.n	800744a <_strtod_l+0xe2>
 8007480:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007484:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007488:	e7df      	b.n	800744a <_strtod_l+0xe2>
 800748a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007490:	785b      	ldrb	r3, [r3, #1]
 8007492:	2b30      	cmp	r3, #48	@ 0x30
 8007494:	d0f9      	beq.n	800748a <_strtod_l+0x122>
 8007496:	2b00      	cmp	r3, #0
 8007498:	d09f      	beq.n	80073da <_strtod_l+0x72>
 800749a:	2301      	movs	r3, #1
 800749c:	9309      	str	r3, [sp, #36]	@ 0x24
 800749e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80074a0:	220a      	movs	r2, #10
 80074a2:	930c      	str	r3, [sp, #48]	@ 0x30
 80074a4:	2300      	movs	r3, #0
 80074a6:	461f      	mov	r7, r3
 80074a8:	9308      	str	r3, [sp, #32]
 80074aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80074ac:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80074ae:	7805      	ldrb	r5, [r0, #0]
 80074b0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80074b4:	b2d9      	uxtb	r1, r3
 80074b6:	2909      	cmp	r1, #9
 80074b8:	d928      	bls.n	800750c <_strtod_l+0x1a4>
 80074ba:	2201      	movs	r2, #1
 80074bc:	494e      	ldr	r1, [pc, #312]	@ (80075f8 <_strtod_l+0x290>)
 80074be:	f000 fdcb 	bl	8008058 <strncmp>
 80074c2:	2800      	cmp	r0, #0
 80074c4:	d032      	beq.n	800752c <_strtod_l+0x1c4>
 80074c6:	2000      	movs	r0, #0
 80074c8:	462a      	mov	r2, r5
 80074ca:	4681      	mov	r9, r0
 80074cc:	463d      	mov	r5, r7
 80074ce:	4603      	mov	r3, r0
 80074d0:	2a65      	cmp	r2, #101	@ 0x65
 80074d2:	d001      	beq.n	80074d8 <_strtod_l+0x170>
 80074d4:	2a45      	cmp	r2, #69	@ 0x45
 80074d6:	d114      	bne.n	8007502 <_strtod_l+0x19a>
 80074d8:	b91d      	cbnz	r5, 80074e2 <_strtod_l+0x17a>
 80074da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074dc:	4302      	orrs	r2, r0
 80074de:	d095      	beq.n	800740c <_strtod_l+0xa4>
 80074e0:	2500      	movs	r5, #0
 80074e2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80074e4:	1c62      	adds	r2, r4, #1
 80074e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80074e8:	7862      	ldrb	r2, [r4, #1]
 80074ea:	2a2b      	cmp	r2, #43	@ 0x2b
 80074ec:	d077      	beq.n	80075de <_strtod_l+0x276>
 80074ee:	2a2d      	cmp	r2, #45	@ 0x2d
 80074f0:	d07b      	beq.n	80075ea <_strtod_l+0x282>
 80074f2:	f04f 0c00 	mov.w	ip, #0
 80074f6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80074fa:	2909      	cmp	r1, #9
 80074fc:	f240 8082 	bls.w	8007604 <_strtod_l+0x29c>
 8007500:	9419      	str	r4, [sp, #100]	@ 0x64
 8007502:	f04f 0800 	mov.w	r8, #0
 8007506:	e0a2      	b.n	800764e <_strtod_l+0x2e6>
 8007508:	2300      	movs	r3, #0
 800750a:	e7c7      	b.n	800749c <_strtod_l+0x134>
 800750c:	2f08      	cmp	r7, #8
 800750e:	bfd5      	itete	le
 8007510:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007512:	9908      	ldrgt	r1, [sp, #32]
 8007514:	fb02 3301 	mlale	r3, r2, r1, r3
 8007518:	fb02 3301 	mlagt	r3, r2, r1, r3
 800751c:	f100 0001 	add.w	r0, r0, #1
 8007520:	bfd4      	ite	le
 8007522:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007524:	9308      	strgt	r3, [sp, #32]
 8007526:	3701      	adds	r7, #1
 8007528:	9019      	str	r0, [sp, #100]	@ 0x64
 800752a:	e7bf      	b.n	80074ac <_strtod_l+0x144>
 800752c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800752e:	1c5a      	adds	r2, r3, #1
 8007530:	9219      	str	r2, [sp, #100]	@ 0x64
 8007532:	785a      	ldrb	r2, [r3, #1]
 8007534:	b37f      	cbz	r7, 8007596 <_strtod_l+0x22e>
 8007536:	4681      	mov	r9, r0
 8007538:	463d      	mov	r5, r7
 800753a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800753e:	2b09      	cmp	r3, #9
 8007540:	d912      	bls.n	8007568 <_strtod_l+0x200>
 8007542:	2301      	movs	r3, #1
 8007544:	e7c4      	b.n	80074d0 <_strtod_l+0x168>
 8007546:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007548:	3001      	adds	r0, #1
 800754a:	1c5a      	adds	r2, r3, #1
 800754c:	9219      	str	r2, [sp, #100]	@ 0x64
 800754e:	785a      	ldrb	r2, [r3, #1]
 8007550:	2a30      	cmp	r2, #48	@ 0x30
 8007552:	d0f8      	beq.n	8007546 <_strtod_l+0x1de>
 8007554:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007558:	2b08      	cmp	r3, #8
 800755a:	f200 84cb 	bhi.w	8007ef4 <_strtod_l+0xb8c>
 800755e:	4681      	mov	r9, r0
 8007560:	2000      	movs	r0, #0
 8007562:	4605      	mov	r5, r0
 8007564:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007566:	930c      	str	r3, [sp, #48]	@ 0x30
 8007568:	3a30      	subs	r2, #48	@ 0x30
 800756a:	f100 0301 	add.w	r3, r0, #1
 800756e:	d02a      	beq.n	80075c6 <_strtod_l+0x25e>
 8007570:	4499      	add	r9, r3
 8007572:	210a      	movs	r1, #10
 8007574:	462b      	mov	r3, r5
 8007576:	eb00 0c05 	add.w	ip, r0, r5
 800757a:	4563      	cmp	r3, ip
 800757c:	d10d      	bne.n	800759a <_strtod_l+0x232>
 800757e:	1c69      	adds	r1, r5, #1
 8007580:	4401      	add	r1, r0
 8007582:	4428      	add	r0, r5
 8007584:	2808      	cmp	r0, #8
 8007586:	dc16      	bgt.n	80075b6 <_strtod_l+0x24e>
 8007588:	230a      	movs	r3, #10
 800758a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800758c:	fb03 2300 	mla	r3, r3, r0, r2
 8007590:	930a      	str	r3, [sp, #40]	@ 0x28
 8007592:	2300      	movs	r3, #0
 8007594:	e018      	b.n	80075c8 <_strtod_l+0x260>
 8007596:	4638      	mov	r0, r7
 8007598:	e7da      	b.n	8007550 <_strtod_l+0x1e8>
 800759a:	2b08      	cmp	r3, #8
 800759c:	f103 0301 	add.w	r3, r3, #1
 80075a0:	dc03      	bgt.n	80075aa <_strtod_l+0x242>
 80075a2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80075a4:	434e      	muls	r6, r1
 80075a6:	960a      	str	r6, [sp, #40]	@ 0x28
 80075a8:	e7e7      	b.n	800757a <_strtod_l+0x212>
 80075aa:	2b10      	cmp	r3, #16
 80075ac:	bfde      	ittt	le
 80075ae:	9e08      	ldrle	r6, [sp, #32]
 80075b0:	434e      	mulle	r6, r1
 80075b2:	9608      	strle	r6, [sp, #32]
 80075b4:	e7e1      	b.n	800757a <_strtod_l+0x212>
 80075b6:	280f      	cmp	r0, #15
 80075b8:	dceb      	bgt.n	8007592 <_strtod_l+0x22a>
 80075ba:	230a      	movs	r3, #10
 80075bc:	9808      	ldr	r0, [sp, #32]
 80075be:	fb03 2300 	mla	r3, r3, r0, r2
 80075c2:	9308      	str	r3, [sp, #32]
 80075c4:	e7e5      	b.n	8007592 <_strtod_l+0x22a>
 80075c6:	4629      	mov	r1, r5
 80075c8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80075ca:	460d      	mov	r5, r1
 80075cc:	1c50      	adds	r0, r2, #1
 80075ce:	9019      	str	r0, [sp, #100]	@ 0x64
 80075d0:	7852      	ldrb	r2, [r2, #1]
 80075d2:	4618      	mov	r0, r3
 80075d4:	e7b1      	b.n	800753a <_strtod_l+0x1d2>
 80075d6:	f04f 0900 	mov.w	r9, #0
 80075da:	2301      	movs	r3, #1
 80075dc:	e77d      	b.n	80074da <_strtod_l+0x172>
 80075de:	f04f 0c00 	mov.w	ip, #0
 80075e2:	1ca2      	adds	r2, r4, #2
 80075e4:	9219      	str	r2, [sp, #100]	@ 0x64
 80075e6:	78a2      	ldrb	r2, [r4, #2]
 80075e8:	e785      	b.n	80074f6 <_strtod_l+0x18e>
 80075ea:	f04f 0c01 	mov.w	ip, #1
 80075ee:	e7f8      	b.n	80075e2 <_strtod_l+0x27a>
 80075f0:	0800aca8 	.word	0x0800aca8
 80075f4:	7ff00000 	.word	0x7ff00000
 80075f8:	0800ac8f 	.word	0x0800ac8f
 80075fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80075fe:	1c51      	adds	r1, r2, #1
 8007600:	9119      	str	r1, [sp, #100]	@ 0x64
 8007602:	7852      	ldrb	r2, [r2, #1]
 8007604:	2a30      	cmp	r2, #48	@ 0x30
 8007606:	d0f9      	beq.n	80075fc <_strtod_l+0x294>
 8007608:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800760c:	2908      	cmp	r1, #8
 800760e:	f63f af78 	bhi.w	8007502 <_strtod_l+0x19a>
 8007612:	f04f 080a 	mov.w	r8, #10
 8007616:	3a30      	subs	r2, #48	@ 0x30
 8007618:	920e      	str	r2, [sp, #56]	@ 0x38
 800761a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800761c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800761e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007620:	1c56      	adds	r6, r2, #1
 8007622:	9619      	str	r6, [sp, #100]	@ 0x64
 8007624:	7852      	ldrb	r2, [r2, #1]
 8007626:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800762a:	f1be 0f09 	cmp.w	lr, #9
 800762e:	d939      	bls.n	80076a4 <_strtod_l+0x33c>
 8007630:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007632:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007636:	1a76      	subs	r6, r6, r1
 8007638:	2e08      	cmp	r6, #8
 800763a:	dc03      	bgt.n	8007644 <_strtod_l+0x2dc>
 800763c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800763e:	4588      	cmp	r8, r1
 8007640:	bfa8      	it	ge
 8007642:	4688      	movge	r8, r1
 8007644:	f1bc 0f00 	cmp.w	ip, #0
 8007648:	d001      	beq.n	800764e <_strtod_l+0x2e6>
 800764a:	f1c8 0800 	rsb	r8, r8, #0
 800764e:	2d00      	cmp	r5, #0
 8007650:	d14e      	bne.n	80076f0 <_strtod_l+0x388>
 8007652:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007654:	4308      	orrs	r0, r1
 8007656:	f47f aec0 	bne.w	80073da <_strtod_l+0x72>
 800765a:	2b00      	cmp	r3, #0
 800765c:	f47f aed6 	bne.w	800740c <_strtod_l+0xa4>
 8007660:	2a69      	cmp	r2, #105	@ 0x69
 8007662:	d028      	beq.n	80076b6 <_strtod_l+0x34e>
 8007664:	dc25      	bgt.n	80076b2 <_strtod_l+0x34a>
 8007666:	2a49      	cmp	r2, #73	@ 0x49
 8007668:	d025      	beq.n	80076b6 <_strtod_l+0x34e>
 800766a:	2a4e      	cmp	r2, #78	@ 0x4e
 800766c:	f47f aece 	bne.w	800740c <_strtod_l+0xa4>
 8007670:	499a      	ldr	r1, [pc, #616]	@ (80078dc <_strtod_l+0x574>)
 8007672:	a819      	add	r0, sp, #100	@ 0x64
 8007674:	f001 fe3e 	bl	80092f4 <__match>
 8007678:	2800      	cmp	r0, #0
 800767a:	f43f aec7 	beq.w	800740c <_strtod_l+0xa4>
 800767e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b28      	cmp	r3, #40	@ 0x28
 8007684:	d12e      	bne.n	80076e4 <_strtod_l+0x37c>
 8007686:	4996      	ldr	r1, [pc, #600]	@ (80078e0 <_strtod_l+0x578>)
 8007688:	aa1c      	add	r2, sp, #112	@ 0x70
 800768a:	a819      	add	r0, sp, #100	@ 0x64
 800768c:	f001 fe46 	bl	800931c <__hexnan>
 8007690:	2805      	cmp	r0, #5
 8007692:	d127      	bne.n	80076e4 <_strtod_l+0x37c>
 8007694:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007696:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800769a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800769e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80076a2:	e69a      	b.n	80073da <_strtod_l+0x72>
 80076a4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80076a6:	fb08 2101 	mla	r1, r8, r1, r2
 80076aa:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80076ae:	920e      	str	r2, [sp, #56]	@ 0x38
 80076b0:	e7b5      	b.n	800761e <_strtod_l+0x2b6>
 80076b2:	2a6e      	cmp	r2, #110	@ 0x6e
 80076b4:	e7da      	b.n	800766c <_strtod_l+0x304>
 80076b6:	498b      	ldr	r1, [pc, #556]	@ (80078e4 <_strtod_l+0x57c>)
 80076b8:	a819      	add	r0, sp, #100	@ 0x64
 80076ba:	f001 fe1b 	bl	80092f4 <__match>
 80076be:	2800      	cmp	r0, #0
 80076c0:	f43f aea4 	beq.w	800740c <_strtod_l+0xa4>
 80076c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076c6:	4988      	ldr	r1, [pc, #544]	@ (80078e8 <_strtod_l+0x580>)
 80076c8:	3b01      	subs	r3, #1
 80076ca:	a819      	add	r0, sp, #100	@ 0x64
 80076cc:	9319      	str	r3, [sp, #100]	@ 0x64
 80076ce:	f001 fe11 	bl	80092f4 <__match>
 80076d2:	b910      	cbnz	r0, 80076da <_strtod_l+0x372>
 80076d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076d6:	3301      	adds	r3, #1
 80076d8:	9319      	str	r3, [sp, #100]	@ 0x64
 80076da:	f04f 0a00 	mov.w	sl, #0
 80076de:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80078ec <_strtod_l+0x584>
 80076e2:	e67a      	b.n	80073da <_strtod_l+0x72>
 80076e4:	4882      	ldr	r0, [pc, #520]	@ (80078f0 <_strtod_l+0x588>)
 80076e6:	f000 fd1f 	bl	8008128 <nan>
 80076ea:	4682      	mov	sl, r0
 80076ec:	468b      	mov	fp, r1
 80076ee:	e674      	b.n	80073da <_strtod_l+0x72>
 80076f0:	eba8 0309 	sub.w	r3, r8, r9
 80076f4:	2f00      	cmp	r7, #0
 80076f6:	bf08      	it	eq
 80076f8:	462f      	moveq	r7, r5
 80076fa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80076fc:	2d10      	cmp	r5, #16
 80076fe:	462c      	mov	r4, r5
 8007700:	9309      	str	r3, [sp, #36]	@ 0x24
 8007702:	bfa8      	it	ge
 8007704:	2410      	movge	r4, #16
 8007706:	f7f8 fe6d 	bl	80003e4 <__aeabi_ui2d>
 800770a:	2d09      	cmp	r5, #9
 800770c:	4682      	mov	sl, r0
 800770e:	468b      	mov	fp, r1
 8007710:	dc11      	bgt.n	8007736 <_strtod_l+0x3ce>
 8007712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007714:	2b00      	cmp	r3, #0
 8007716:	f43f ae60 	beq.w	80073da <_strtod_l+0x72>
 800771a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800771c:	dd76      	ble.n	800780c <_strtod_l+0x4a4>
 800771e:	2b16      	cmp	r3, #22
 8007720:	dc5d      	bgt.n	80077de <_strtod_l+0x476>
 8007722:	4974      	ldr	r1, [pc, #464]	@ (80078f4 <_strtod_l+0x58c>)
 8007724:	4652      	mov	r2, sl
 8007726:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800772a:	465b      	mov	r3, fp
 800772c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007730:	f7f8 fed2 	bl	80004d8 <__aeabi_dmul>
 8007734:	e7d9      	b.n	80076ea <_strtod_l+0x382>
 8007736:	4b6f      	ldr	r3, [pc, #444]	@ (80078f4 <_strtod_l+0x58c>)
 8007738:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800773c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007740:	f7f8 feca 	bl	80004d8 <__aeabi_dmul>
 8007744:	4682      	mov	sl, r0
 8007746:	9808      	ldr	r0, [sp, #32]
 8007748:	468b      	mov	fp, r1
 800774a:	f7f8 fe4b 	bl	80003e4 <__aeabi_ui2d>
 800774e:	4602      	mov	r2, r0
 8007750:	460b      	mov	r3, r1
 8007752:	4650      	mov	r0, sl
 8007754:	4659      	mov	r1, fp
 8007756:	f7f8 fd09 	bl	800016c <__adddf3>
 800775a:	2d0f      	cmp	r5, #15
 800775c:	4682      	mov	sl, r0
 800775e:	468b      	mov	fp, r1
 8007760:	ddd7      	ble.n	8007712 <_strtod_l+0x3aa>
 8007762:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007764:	1b2c      	subs	r4, r5, r4
 8007766:	441c      	add	r4, r3
 8007768:	2c00      	cmp	r4, #0
 800776a:	f340 8096 	ble.w	800789a <_strtod_l+0x532>
 800776e:	f014 030f 	ands.w	r3, r4, #15
 8007772:	d00a      	beq.n	800778a <_strtod_l+0x422>
 8007774:	495f      	ldr	r1, [pc, #380]	@ (80078f4 <_strtod_l+0x58c>)
 8007776:	4652      	mov	r2, sl
 8007778:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800777c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007780:	465b      	mov	r3, fp
 8007782:	f7f8 fea9 	bl	80004d8 <__aeabi_dmul>
 8007786:	4682      	mov	sl, r0
 8007788:	468b      	mov	fp, r1
 800778a:	f034 040f 	bics.w	r4, r4, #15
 800778e:	d073      	beq.n	8007878 <_strtod_l+0x510>
 8007790:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007794:	dd48      	ble.n	8007828 <_strtod_l+0x4c0>
 8007796:	2400      	movs	r4, #0
 8007798:	46a0      	mov	r8, r4
 800779a:	46a1      	mov	r9, r4
 800779c:	940a      	str	r4, [sp, #40]	@ 0x28
 800779e:	2322      	movs	r3, #34	@ 0x22
 80077a0:	f04f 0a00 	mov.w	sl, #0
 80077a4:	9a05      	ldr	r2, [sp, #20]
 80077a6:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80078ec <_strtod_l+0x584>
 80077aa:	6013      	str	r3, [r2, #0]
 80077ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f43f ae13 	beq.w	80073da <_strtod_l+0x72>
 80077b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80077b6:	9805      	ldr	r0, [sp, #20]
 80077b8:	f002 f952 	bl	8009a60 <_Bfree>
 80077bc:	4649      	mov	r1, r9
 80077be:	9805      	ldr	r0, [sp, #20]
 80077c0:	f002 f94e 	bl	8009a60 <_Bfree>
 80077c4:	4641      	mov	r1, r8
 80077c6:	9805      	ldr	r0, [sp, #20]
 80077c8:	f002 f94a 	bl	8009a60 <_Bfree>
 80077cc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80077ce:	9805      	ldr	r0, [sp, #20]
 80077d0:	f002 f946 	bl	8009a60 <_Bfree>
 80077d4:	4621      	mov	r1, r4
 80077d6:	9805      	ldr	r0, [sp, #20]
 80077d8:	f002 f942 	bl	8009a60 <_Bfree>
 80077dc:	e5fd      	b.n	80073da <_strtod_l+0x72>
 80077de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077e0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80077e4:	4293      	cmp	r3, r2
 80077e6:	dbbc      	blt.n	8007762 <_strtod_l+0x3fa>
 80077e8:	4c42      	ldr	r4, [pc, #264]	@ (80078f4 <_strtod_l+0x58c>)
 80077ea:	f1c5 050f 	rsb	r5, r5, #15
 80077ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80077f2:	4652      	mov	r2, sl
 80077f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077f8:	465b      	mov	r3, fp
 80077fa:	f7f8 fe6d 	bl	80004d8 <__aeabi_dmul>
 80077fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007800:	1b5d      	subs	r5, r3, r5
 8007802:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007806:	e9d4 2300 	ldrd	r2, r3, [r4]
 800780a:	e791      	b.n	8007730 <_strtod_l+0x3c8>
 800780c:	3316      	adds	r3, #22
 800780e:	dba8      	blt.n	8007762 <_strtod_l+0x3fa>
 8007810:	4b38      	ldr	r3, [pc, #224]	@ (80078f4 <_strtod_l+0x58c>)
 8007812:	eba9 0808 	sub.w	r8, r9, r8
 8007816:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800781a:	4650      	mov	r0, sl
 800781c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007820:	4659      	mov	r1, fp
 8007822:	f7f8 ff83 	bl	800072c <__aeabi_ddiv>
 8007826:	e760      	b.n	80076ea <_strtod_l+0x382>
 8007828:	4b33      	ldr	r3, [pc, #204]	@ (80078f8 <_strtod_l+0x590>)
 800782a:	4650      	mov	r0, sl
 800782c:	9308      	str	r3, [sp, #32]
 800782e:	2300      	movs	r3, #0
 8007830:	4659      	mov	r1, fp
 8007832:	461e      	mov	r6, r3
 8007834:	1124      	asrs	r4, r4, #4
 8007836:	2c01      	cmp	r4, #1
 8007838:	dc21      	bgt.n	800787e <_strtod_l+0x516>
 800783a:	b10b      	cbz	r3, 8007840 <_strtod_l+0x4d8>
 800783c:	4682      	mov	sl, r0
 800783e:	468b      	mov	fp, r1
 8007840:	492d      	ldr	r1, [pc, #180]	@ (80078f8 <_strtod_l+0x590>)
 8007842:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007846:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800784a:	4652      	mov	r2, sl
 800784c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007850:	465b      	mov	r3, fp
 8007852:	f7f8 fe41 	bl	80004d8 <__aeabi_dmul>
 8007856:	4b25      	ldr	r3, [pc, #148]	@ (80078ec <_strtod_l+0x584>)
 8007858:	460a      	mov	r2, r1
 800785a:	400b      	ands	r3, r1
 800785c:	4927      	ldr	r1, [pc, #156]	@ (80078fc <_strtod_l+0x594>)
 800785e:	4682      	mov	sl, r0
 8007860:	428b      	cmp	r3, r1
 8007862:	d898      	bhi.n	8007796 <_strtod_l+0x42e>
 8007864:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007868:	428b      	cmp	r3, r1
 800786a:	bf86      	itte	hi
 800786c:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8007870:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8007900 <_strtod_l+0x598>
 8007874:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007878:	2300      	movs	r3, #0
 800787a:	9308      	str	r3, [sp, #32]
 800787c:	e07a      	b.n	8007974 <_strtod_l+0x60c>
 800787e:	07e2      	lsls	r2, r4, #31
 8007880:	d505      	bpl.n	800788e <_strtod_l+0x526>
 8007882:	9b08      	ldr	r3, [sp, #32]
 8007884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007888:	f7f8 fe26 	bl	80004d8 <__aeabi_dmul>
 800788c:	2301      	movs	r3, #1
 800788e:	9a08      	ldr	r2, [sp, #32]
 8007890:	3601      	adds	r6, #1
 8007892:	3208      	adds	r2, #8
 8007894:	1064      	asrs	r4, r4, #1
 8007896:	9208      	str	r2, [sp, #32]
 8007898:	e7cd      	b.n	8007836 <_strtod_l+0x4ce>
 800789a:	d0ed      	beq.n	8007878 <_strtod_l+0x510>
 800789c:	4264      	negs	r4, r4
 800789e:	f014 020f 	ands.w	r2, r4, #15
 80078a2:	d00a      	beq.n	80078ba <_strtod_l+0x552>
 80078a4:	4b13      	ldr	r3, [pc, #76]	@ (80078f4 <_strtod_l+0x58c>)
 80078a6:	4650      	mov	r0, sl
 80078a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078ac:	4659      	mov	r1, fp
 80078ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b2:	f7f8 ff3b 	bl	800072c <__aeabi_ddiv>
 80078b6:	4682      	mov	sl, r0
 80078b8:	468b      	mov	fp, r1
 80078ba:	1124      	asrs	r4, r4, #4
 80078bc:	d0dc      	beq.n	8007878 <_strtod_l+0x510>
 80078be:	2c1f      	cmp	r4, #31
 80078c0:	dd20      	ble.n	8007904 <_strtod_l+0x59c>
 80078c2:	2400      	movs	r4, #0
 80078c4:	46a0      	mov	r8, r4
 80078c6:	46a1      	mov	r9, r4
 80078c8:	940a      	str	r4, [sp, #40]	@ 0x28
 80078ca:	2322      	movs	r3, #34	@ 0x22
 80078cc:	9a05      	ldr	r2, [sp, #20]
 80078ce:	f04f 0a00 	mov.w	sl, #0
 80078d2:	f04f 0b00 	mov.w	fp, #0
 80078d6:	6013      	str	r3, [r2, #0]
 80078d8:	e768      	b.n	80077ac <_strtod_l+0x444>
 80078da:	bf00      	nop
 80078dc:	0800ac63 	.word	0x0800ac63
 80078e0:	0800ac94 	.word	0x0800ac94
 80078e4:	0800ac5b 	.word	0x0800ac5b
 80078e8:	0800adf4 	.word	0x0800adf4
 80078ec:	7ff00000 	.word	0x7ff00000
 80078f0:	0800b083 	.word	0x0800b083
 80078f4:	0800af80 	.word	0x0800af80
 80078f8:	0800af58 	.word	0x0800af58
 80078fc:	7ca00000 	.word	0x7ca00000
 8007900:	7fefffff 	.word	0x7fefffff
 8007904:	f014 0310 	ands.w	r3, r4, #16
 8007908:	bf18      	it	ne
 800790a:	236a      	movne	r3, #106	@ 0x6a
 800790c:	4650      	mov	r0, sl
 800790e:	9308      	str	r3, [sp, #32]
 8007910:	4659      	mov	r1, fp
 8007912:	2300      	movs	r3, #0
 8007914:	4ea9      	ldr	r6, [pc, #676]	@ (8007bbc <_strtod_l+0x854>)
 8007916:	07e2      	lsls	r2, r4, #31
 8007918:	d504      	bpl.n	8007924 <_strtod_l+0x5bc>
 800791a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800791e:	f7f8 fddb 	bl	80004d8 <__aeabi_dmul>
 8007922:	2301      	movs	r3, #1
 8007924:	1064      	asrs	r4, r4, #1
 8007926:	f106 0608 	add.w	r6, r6, #8
 800792a:	d1f4      	bne.n	8007916 <_strtod_l+0x5ae>
 800792c:	b10b      	cbz	r3, 8007932 <_strtod_l+0x5ca>
 800792e:	4682      	mov	sl, r0
 8007930:	468b      	mov	fp, r1
 8007932:	9b08      	ldr	r3, [sp, #32]
 8007934:	b1b3      	cbz	r3, 8007964 <_strtod_l+0x5fc>
 8007936:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800793a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800793e:	2b00      	cmp	r3, #0
 8007940:	4659      	mov	r1, fp
 8007942:	dd0f      	ble.n	8007964 <_strtod_l+0x5fc>
 8007944:	2b1f      	cmp	r3, #31
 8007946:	dd57      	ble.n	80079f8 <_strtod_l+0x690>
 8007948:	2b34      	cmp	r3, #52	@ 0x34
 800794a:	bfd8      	it	le
 800794c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8007950:	f04f 0a00 	mov.w	sl, #0
 8007954:	bfcf      	iteee	gt
 8007956:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800795a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800795e:	4093      	lslle	r3, r2
 8007960:	ea03 0b01 	andle.w	fp, r3, r1
 8007964:	2200      	movs	r2, #0
 8007966:	2300      	movs	r3, #0
 8007968:	4650      	mov	r0, sl
 800796a:	4659      	mov	r1, fp
 800796c:	f7f9 f81c 	bl	80009a8 <__aeabi_dcmpeq>
 8007970:	2800      	cmp	r0, #0
 8007972:	d1a6      	bne.n	80078c2 <_strtod_l+0x55a>
 8007974:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007976:	463a      	mov	r2, r7
 8007978:	9300      	str	r3, [sp, #0]
 800797a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800797c:	462b      	mov	r3, r5
 800797e:	9805      	ldr	r0, [sp, #20]
 8007980:	f002 f8d6 	bl	8009b30 <__s2b>
 8007984:	900a      	str	r0, [sp, #40]	@ 0x28
 8007986:	2800      	cmp	r0, #0
 8007988:	f43f af05 	beq.w	8007796 <_strtod_l+0x42e>
 800798c:	2400      	movs	r4, #0
 800798e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007990:	eba9 0308 	sub.w	r3, r9, r8
 8007994:	2a00      	cmp	r2, #0
 8007996:	bfa8      	it	ge
 8007998:	2300      	movge	r3, #0
 800799a:	46a0      	mov	r8, r4
 800799c:	9312      	str	r3, [sp, #72]	@ 0x48
 800799e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80079a2:	9316      	str	r3, [sp, #88]	@ 0x58
 80079a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079a6:	9805      	ldr	r0, [sp, #20]
 80079a8:	6859      	ldr	r1, [r3, #4]
 80079aa:	f002 f819 	bl	80099e0 <_Balloc>
 80079ae:	4681      	mov	r9, r0
 80079b0:	2800      	cmp	r0, #0
 80079b2:	f43f aef4 	beq.w	800779e <_strtod_l+0x436>
 80079b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079b8:	300c      	adds	r0, #12
 80079ba:	691a      	ldr	r2, [r3, #16]
 80079bc:	f103 010c 	add.w	r1, r3, #12
 80079c0:	3202      	adds	r2, #2
 80079c2:	0092      	lsls	r2, r2, #2
 80079c4:	f000 fba1 	bl	800810a <memcpy>
 80079c8:	ab1c      	add	r3, sp, #112	@ 0x70
 80079ca:	9301      	str	r3, [sp, #4]
 80079cc:	ab1b      	add	r3, sp, #108	@ 0x6c
 80079ce:	9300      	str	r3, [sp, #0]
 80079d0:	4652      	mov	r2, sl
 80079d2:	465b      	mov	r3, fp
 80079d4:	9805      	ldr	r0, [sp, #20]
 80079d6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80079da:	f002 fbdb 	bl	800a194 <__d2b>
 80079de:	901a      	str	r0, [sp, #104]	@ 0x68
 80079e0:	2800      	cmp	r0, #0
 80079e2:	f43f aedc 	beq.w	800779e <_strtod_l+0x436>
 80079e6:	2101      	movs	r1, #1
 80079e8:	9805      	ldr	r0, [sp, #20]
 80079ea:	f002 f937 	bl	8009c5c <__i2b>
 80079ee:	4680      	mov	r8, r0
 80079f0:	b948      	cbnz	r0, 8007a06 <_strtod_l+0x69e>
 80079f2:	f04f 0800 	mov.w	r8, #0
 80079f6:	e6d2      	b.n	800779e <_strtod_l+0x436>
 80079f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80079fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007a00:	ea03 0a0a 	and.w	sl, r3, sl
 8007a04:	e7ae      	b.n	8007964 <_strtod_l+0x5fc>
 8007a06:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007a08:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007a0a:	2d00      	cmp	r5, #0
 8007a0c:	bfab      	itete	ge
 8007a0e:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007a10:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007a12:	18ef      	addge	r7, r5, r3
 8007a14:	1b5e      	sublt	r6, r3, r5
 8007a16:	9b08      	ldr	r3, [sp, #32]
 8007a18:	bfa8      	it	ge
 8007a1a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007a1c:	eba5 0503 	sub.w	r5, r5, r3
 8007a20:	4415      	add	r5, r2
 8007a22:	4b67      	ldr	r3, [pc, #412]	@ (8007bc0 <_strtod_l+0x858>)
 8007a24:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 8007a28:	bfb8      	it	lt
 8007a2a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007a2c:	429d      	cmp	r5, r3
 8007a2e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007a32:	da50      	bge.n	8007ad6 <_strtod_l+0x76e>
 8007a34:	1b5b      	subs	r3, r3, r5
 8007a36:	2b1f      	cmp	r3, #31
 8007a38:	f04f 0101 	mov.w	r1, #1
 8007a3c:	eba2 0203 	sub.w	r2, r2, r3
 8007a40:	dc3d      	bgt.n	8007abe <_strtod_l+0x756>
 8007a42:	fa01 f303 	lsl.w	r3, r1, r3
 8007a46:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007a48:	2300      	movs	r3, #0
 8007a4a:	9310      	str	r3, [sp, #64]	@ 0x40
 8007a4c:	18bd      	adds	r5, r7, r2
 8007a4e:	9b08      	ldr	r3, [sp, #32]
 8007a50:	42af      	cmp	r7, r5
 8007a52:	4416      	add	r6, r2
 8007a54:	441e      	add	r6, r3
 8007a56:	463b      	mov	r3, r7
 8007a58:	bfa8      	it	ge
 8007a5a:	462b      	movge	r3, r5
 8007a5c:	42b3      	cmp	r3, r6
 8007a5e:	bfa8      	it	ge
 8007a60:	4633      	movge	r3, r6
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	bfc2      	ittt	gt
 8007a66:	1aed      	subgt	r5, r5, r3
 8007a68:	1af6      	subgt	r6, r6, r3
 8007a6a:	1aff      	subgt	r7, r7, r3
 8007a6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	dd16      	ble.n	8007aa0 <_strtod_l+0x738>
 8007a72:	4641      	mov	r1, r8
 8007a74:	461a      	mov	r2, r3
 8007a76:	9805      	ldr	r0, [sp, #20]
 8007a78:	f002 f9ae 	bl	8009dd8 <__pow5mult>
 8007a7c:	4680      	mov	r8, r0
 8007a7e:	2800      	cmp	r0, #0
 8007a80:	d0b7      	beq.n	80079f2 <_strtod_l+0x68a>
 8007a82:	4601      	mov	r1, r0
 8007a84:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007a86:	9805      	ldr	r0, [sp, #20]
 8007a88:	f002 f8fe 	bl	8009c88 <__multiply>
 8007a8c:	900e      	str	r0, [sp, #56]	@ 0x38
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	f43f ae85 	beq.w	800779e <_strtod_l+0x436>
 8007a94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007a96:	9805      	ldr	r0, [sp, #20]
 8007a98:	f001 ffe2 	bl	8009a60 <_Bfree>
 8007a9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007aa0:	2d00      	cmp	r5, #0
 8007aa2:	dc1d      	bgt.n	8007ae0 <_strtod_l+0x778>
 8007aa4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	dd23      	ble.n	8007af2 <_strtod_l+0x78a>
 8007aaa:	4649      	mov	r1, r9
 8007aac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007aae:	9805      	ldr	r0, [sp, #20]
 8007ab0:	f002 f992 	bl	8009dd8 <__pow5mult>
 8007ab4:	4681      	mov	r9, r0
 8007ab6:	b9e0      	cbnz	r0, 8007af2 <_strtod_l+0x78a>
 8007ab8:	f04f 0900 	mov.w	r9, #0
 8007abc:	e66f      	b.n	800779e <_strtod_l+0x436>
 8007abe:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007ac2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007ac6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007aca:	35e2      	adds	r5, #226	@ 0xe2
 8007acc:	fa01 f305 	lsl.w	r3, r1, r5
 8007ad0:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ad2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007ad4:	e7ba      	b.n	8007a4c <_strtod_l+0x6e4>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	9310      	str	r3, [sp, #64]	@ 0x40
 8007ada:	2301      	movs	r3, #1
 8007adc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007ade:	e7b5      	b.n	8007a4c <_strtod_l+0x6e4>
 8007ae0:	462a      	mov	r2, r5
 8007ae2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ae4:	9805      	ldr	r0, [sp, #20]
 8007ae6:	f002 f9d1 	bl	8009e8c <__lshift>
 8007aea:	901a      	str	r0, [sp, #104]	@ 0x68
 8007aec:	2800      	cmp	r0, #0
 8007aee:	d1d9      	bne.n	8007aa4 <_strtod_l+0x73c>
 8007af0:	e655      	b.n	800779e <_strtod_l+0x436>
 8007af2:	2e00      	cmp	r6, #0
 8007af4:	dd07      	ble.n	8007b06 <_strtod_l+0x79e>
 8007af6:	4649      	mov	r1, r9
 8007af8:	4632      	mov	r2, r6
 8007afa:	9805      	ldr	r0, [sp, #20]
 8007afc:	f002 f9c6 	bl	8009e8c <__lshift>
 8007b00:	4681      	mov	r9, r0
 8007b02:	2800      	cmp	r0, #0
 8007b04:	d0d8      	beq.n	8007ab8 <_strtod_l+0x750>
 8007b06:	2f00      	cmp	r7, #0
 8007b08:	dd08      	ble.n	8007b1c <_strtod_l+0x7b4>
 8007b0a:	4641      	mov	r1, r8
 8007b0c:	463a      	mov	r2, r7
 8007b0e:	9805      	ldr	r0, [sp, #20]
 8007b10:	f002 f9bc 	bl	8009e8c <__lshift>
 8007b14:	4680      	mov	r8, r0
 8007b16:	2800      	cmp	r0, #0
 8007b18:	f43f ae41 	beq.w	800779e <_strtod_l+0x436>
 8007b1c:	464a      	mov	r2, r9
 8007b1e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b20:	9805      	ldr	r0, [sp, #20]
 8007b22:	f002 fa3b 	bl	8009f9c <__mdiff>
 8007b26:	4604      	mov	r4, r0
 8007b28:	2800      	cmp	r0, #0
 8007b2a:	f43f ae38 	beq.w	800779e <_strtod_l+0x436>
 8007b2e:	68c3      	ldr	r3, [r0, #12]
 8007b30:	4641      	mov	r1, r8
 8007b32:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b34:	2300      	movs	r3, #0
 8007b36:	60c3      	str	r3, [r0, #12]
 8007b38:	f002 fa14 	bl	8009f64 <__mcmp>
 8007b3c:	2800      	cmp	r0, #0
 8007b3e:	da45      	bge.n	8007bcc <_strtod_l+0x864>
 8007b40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b42:	ea53 030a 	orrs.w	r3, r3, sl
 8007b46:	d16b      	bne.n	8007c20 <_strtod_l+0x8b8>
 8007b48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d167      	bne.n	8007c20 <_strtod_l+0x8b8>
 8007b50:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b54:	0d1b      	lsrs	r3, r3, #20
 8007b56:	051b      	lsls	r3, r3, #20
 8007b58:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007b5c:	d960      	bls.n	8007c20 <_strtod_l+0x8b8>
 8007b5e:	6963      	ldr	r3, [r4, #20]
 8007b60:	b913      	cbnz	r3, 8007b68 <_strtod_l+0x800>
 8007b62:	6923      	ldr	r3, [r4, #16]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	dd5b      	ble.n	8007c20 <_strtod_l+0x8b8>
 8007b68:	4621      	mov	r1, r4
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	9805      	ldr	r0, [sp, #20]
 8007b6e:	f002 f98d 	bl	8009e8c <__lshift>
 8007b72:	4641      	mov	r1, r8
 8007b74:	4604      	mov	r4, r0
 8007b76:	f002 f9f5 	bl	8009f64 <__mcmp>
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	dd50      	ble.n	8007c20 <_strtod_l+0x8b8>
 8007b7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b82:	9a08      	ldr	r2, [sp, #32]
 8007b84:	0d1b      	lsrs	r3, r3, #20
 8007b86:	051b      	lsls	r3, r3, #20
 8007b88:	2a00      	cmp	r2, #0
 8007b8a:	d06a      	beq.n	8007c62 <_strtod_l+0x8fa>
 8007b8c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007b90:	d867      	bhi.n	8007c62 <_strtod_l+0x8fa>
 8007b92:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007b96:	f67f ae98 	bls.w	80078ca <_strtod_l+0x562>
 8007b9a:	4650      	mov	r0, sl
 8007b9c:	4659      	mov	r1, fp
 8007b9e:	4b09      	ldr	r3, [pc, #36]	@ (8007bc4 <_strtod_l+0x85c>)
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	f7f8 fc99 	bl	80004d8 <__aeabi_dmul>
 8007ba6:	4b08      	ldr	r3, [pc, #32]	@ (8007bc8 <_strtod_l+0x860>)
 8007ba8:	4682      	mov	sl, r0
 8007baa:	400b      	ands	r3, r1
 8007bac:	468b      	mov	fp, r1
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f47f ae00 	bne.w	80077b4 <_strtod_l+0x44c>
 8007bb4:	2322      	movs	r3, #34	@ 0x22
 8007bb6:	9a05      	ldr	r2, [sp, #20]
 8007bb8:	6013      	str	r3, [r2, #0]
 8007bba:	e5fb      	b.n	80077b4 <_strtod_l+0x44c>
 8007bbc:	0800acc0 	.word	0x0800acc0
 8007bc0:	fffffc02 	.word	0xfffffc02
 8007bc4:	39500000 	.word	0x39500000
 8007bc8:	7ff00000 	.word	0x7ff00000
 8007bcc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007bd0:	d165      	bne.n	8007c9e <_strtod_l+0x936>
 8007bd2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007bd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007bd8:	b35a      	cbz	r2, 8007c32 <_strtod_l+0x8ca>
 8007bda:	4a99      	ldr	r2, [pc, #612]	@ (8007e40 <_strtod_l+0xad8>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d12b      	bne.n	8007c38 <_strtod_l+0x8d0>
 8007be0:	9b08      	ldr	r3, [sp, #32]
 8007be2:	4651      	mov	r1, sl
 8007be4:	b303      	cbz	r3, 8007c28 <_strtod_l+0x8c0>
 8007be6:	465a      	mov	r2, fp
 8007be8:	4b96      	ldr	r3, [pc, #600]	@ (8007e44 <_strtod_l+0xadc>)
 8007bea:	4013      	ands	r3, r2
 8007bec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007bf0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007bf4:	d81b      	bhi.n	8007c2e <_strtod_l+0x8c6>
 8007bf6:	0d1b      	lsrs	r3, r3, #20
 8007bf8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007c00:	4299      	cmp	r1, r3
 8007c02:	d119      	bne.n	8007c38 <_strtod_l+0x8d0>
 8007c04:	4b90      	ldr	r3, [pc, #576]	@ (8007e48 <_strtod_l+0xae0>)
 8007c06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d102      	bne.n	8007c12 <_strtod_l+0x8aa>
 8007c0c:	3101      	adds	r1, #1
 8007c0e:	f43f adc6 	beq.w	800779e <_strtod_l+0x436>
 8007c12:	f04f 0a00 	mov.w	sl, #0
 8007c16:	4b8b      	ldr	r3, [pc, #556]	@ (8007e44 <_strtod_l+0xadc>)
 8007c18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c1a:	401a      	ands	r2, r3
 8007c1c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007c20:	9b08      	ldr	r3, [sp, #32]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1b9      	bne.n	8007b9a <_strtod_l+0x832>
 8007c26:	e5c5      	b.n	80077b4 <_strtod_l+0x44c>
 8007c28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c2c:	e7e8      	b.n	8007c00 <_strtod_l+0x898>
 8007c2e:	4613      	mov	r3, r2
 8007c30:	e7e6      	b.n	8007c00 <_strtod_l+0x898>
 8007c32:	ea53 030a 	orrs.w	r3, r3, sl
 8007c36:	d0a2      	beq.n	8007b7e <_strtod_l+0x816>
 8007c38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007c3a:	b1db      	cbz	r3, 8007c74 <_strtod_l+0x90c>
 8007c3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c3e:	4213      	tst	r3, r2
 8007c40:	d0ee      	beq.n	8007c20 <_strtod_l+0x8b8>
 8007c42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c44:	4650      	mov	r0, sl
 8007c46:	4659      	mov	r1, fp
 8007c48:	9a08      	ldr	r2, [sp, #32]
 8007c4a:	b1bb      	cbz	r3, 8007c7c <_strtod_l+0x914>
 8007c4c:	f7ff fb6a 	bl	8007324 <sulp>
 8007c50:	4602      	mov	r2, r0
 8007c52:	460b      	mov	r3, r1
 8007c54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c58:	f7f8 fa88 	bl	800016c <__adddf3>
 8007c5c:	4682      	mov	sl, r0
 8007c5e:	468b      	mov	fp, r1
 8007c60:	e7de      	b.n	8007c20 <_strtod_l+0x8b8>
 8007c62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007c66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007c6a:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007c6e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007c72:	e7d5      	b.n	8007c20 <_strtod_l+0x8b8>
 8007c74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007c76:	ea13 0f0a 	tst.w	r3, sl
 8007c7a:	e7e1      	b.n	8007c40 <_strtod_l+0x8d8>
 8007c7c:	f7ff fb52 	bl	8007324 <sulp>
 8007c80:	4602      	mov	r2, r0
 8007c82:	460b      	mov	r3, r1
 8007c84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c88:	f7f8 fa6e 	bl	8000168 <__aeabi_dsub>
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	2300      	movs	r3, #0
 8007c90:	4682      	mov	sl, r0
 8007c92:	468b      	mov	fp, r1
 8007c94:	f7f8 fe88 	bl	80009a8 <__aeabi_dcmpeq>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	d0c1      	beq.n	8007c20 <_strtod_l+0x8b8>
 8007c9c:	e615      	b.n	80078ca <_strtod_l+0x562>
 8007c9e:	4641      	mov	r1, r8
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f002 facf 	bl	800a244 <__ratio>
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007cac:	4606      	mov	r6, r0
 8007cae:	460f      	mov	r7, r1
 8007cb0:	f7f8 fe8e 	bl	80009d0 <__aeabi_dcmple>
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	d06d      	beq.n	8007d94 <_strtod_l+0xa2c>
 8007cb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d178      	bne.n	8007db0 <_strtod_l+0xa48>
 8007cbe:	f1ba 0f00 	cmp.w	sl, #0
 8007cc2:	d156      	bne.n	8007d72 <_strtod_l+0xa0a>
 8007cc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007cc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d158      	bne.n	8007d80 <_strtod_l+0xa18>
 8007cce:	2200      	movs	r2, #0
 8007cd0:	4630      	mov	r0, r6
 8007cd2:	4639      	mov	r1, r7
 8007cd4:	4b5d      	ldr	r3, [pc, #372]	@ (8007e4c <_strtod_l+0xae4>)
 8007cd6:	f7f8 fe71 	bl	80009bc <__aeabi_dcmplt>
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	d157      	bne.n	8007d8e <_strtod_l+0xa26>
 8007cde:	4630      	mov	r0, r6
 8007ce0:	4639      	mov	r1, r7
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	4b5a      	ldr	r3, [pc, #360]	@ (8007e50 <_strtod_l+0xae8>)
 8007ce6:	f7f8 fbf7 	bl	80004d8 <__aeabi_dmul>
 8007cea:	4606      	mov	r6, r0
 8007cec:	460f      	mov	r7, r1
 8007cee:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007cf2:	9606      	str	r6, [sp, #24]
 8007cf4:	9307      	str	r3, [sp, #28]
 8007cf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007cfa:	4d52      	ldr	r5, [pc, #328]	@ (8007e44 <_strtod_l+0xadc>)
 8007cfc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007d00:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d02:	401d      	ands	r5, r3
 8007d04:	4b53      	ldr	r3, [pc, #332]	@ (8007e54 <_strtod_l+0xaec>)
 8007d06:	429d      	cmp	r5, r3
 8007d08:	f040 80aa 	bne.w	8007e60 <_strtod_l+0xaf8>
 8007d0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d0e:	4650      	mov	r0, sl
 8007d10:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007d14:	4659      	mov	r1, fp
 8007d16:	f002 f9d5 	bl	800a0c4 <__ulp>
 8007d1a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007d1e:	f7f8 fbdb 	bl	80004d8 <__aeabi_dmul>
 8007d22:	4652      	mov	r2, sl
 8007d24:	465b      	mov	r3, fp
 8007d26:	f7f8 fa21 	bl	800016c <__adddf3>
 8007d2a:	460b      	mov	r3, r1
 8007d2c:	4945      	ldr	r1, [pc, #276]	@ (8007e44 <_strtod_l+0xadc>)
 8007d2e:	4a4a      	ldr	r2, [pc, #296]	@ (8007e58 <_strtod_l+0xaf0>)
 8007d30:	4019      	ands	r1, r3
 8007d32:	4291      	cmp	r1, r2
 8007d34:	4682      	mov	sl, r0
 8007d36:	d942      	bls.n	8007dbe <_strtod_l+0xa56>
 8007d38:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007d3a:	4b43      	ldr	r3, [pc, #268]	@ (8007e48 <_strtod_l+0xae0>)
 8007d3c:	429a      	cmp	r2, r3
 8007d3e:	d103      	bne.n	8007d48 <_strtod_l+0x9e0>
 8007d40:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d42:	3301      	adds	r3, #1
 8007d44:	f43f ad2b 	beq.w	800779e <_strtod_l+0x436>
 8007d48:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8007d4c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8007e48 <_strtod_l+0xae0>
 8007d50:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d52:	9805      	ldr	r0, [sp, #20]
 8007d54:	f001 fe84 	bl	8009a60 <_Bfree>
 8007d58:	4649      	mov	r1, r9
 8007d5a:	9805      	ldr	r0, [sp, #20]
 8007d5c:	f001 fe80 	bl	8009a60 <_Bfree>
 8007d60:	4641      	mov	r1, r8
 8007d62:	9805      	ldr	r0, [sp, #20]
 8007d64:	f001 fe7c 	bl	8009a60 <_Bfree>
 8007d68:	4621      	mov	r1, r4
 8007d6a:	9805      	ldr	r0, [sp, #20]
 8007d6c:	f001 fe78 	bl	8009a60 <_Bfree>
 8007d70:	e618      	b.n	80079a4 <_strtod_l+0x63c>
 8007d72:	f1ba 0f01 	cmp.w	sl, #1
 8007d76:	d103      	bne.n	8007d80 <_strtod_l+0xa18>
 8007d78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f43f ada5 	beq.w	80078ca <_strtod_l+0x562>
 8007d80:	2200      	movs	r2, #0
 8007d82:	4b36      	ldr	r3, [pc, #216]	@ (8007e5c <_strtod_l+0xaf4>)
 8007d84:	2600      	movs	r6, #0
 8007d86:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007d8a:	4f30      	ldr	r7, [pc, #192]	@ (8007e4c <_strtod_l+0xae4>)
 8007d8c:	e7b3      	b.n	8007cf6 <_strtod_l+0x98e>
 8007d8e:	2600      	movs	r6, #0
 8007d90:	4f2f      	ldr	r7, [pc, #188]	@ (8007e50 <_strtod_l+0xae8>)
 8007d92:	e7ac      	b.n	8007cee <_strtod_l+0x986>
 8007d94:	4630      	mov	r0, r6
 8007d96:	4639      	mov	r1, r7
 8007d98:	4b2d      	ldr	r3, [pc, #180]	@ (8007e50 <_strtod_l+0xae8>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	f7f8 fb9c 	bl	80004d8 <__aeabi_dmul>
 8007da0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007da2:	4606      	mov	r6, r0
 8007da4:	460f      	mov	r7, r1
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d0a1      	beq.n	8007cee <_strtod_l+0x986>
 8007daa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007dae:	e7a2      	b.n	8007cf6 <_strtod_l+0x98e>
 8007db0:	2200      	movs	r2, #0
 8007db2:	4b26      	ldr	r3, [pc, #152]	@ (8007e4c <_strtod_l+0xae4>)
 8007db4:	4616      	mov	r6, r2
 8007db6:	461f      	mov	r7, r3
 8007db8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007dbc:	e79b      	b.n	8007cf6 <_strtod_l+0x98e>
 8007dbe:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007dc2:	9b08      	ldr	r3, [sp, #32]
 8007dc4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1c1      	bne.n	8007d50 <_strtod_l+0x9e8>
 8007dcc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007dd0:	0d1b      	lsrs	r3, r3, #20
 8007dd2:	051b      	lsls	r3, r3, #20
 8007dd4:	429d      	cmp	r5, r3
 8007dd6:	d1bb      	bne.n	8007d50 <_strtod_l+0x9e8>
 8007dd8:	4630      	mov	r0, r6
 8007dda:	4639      	mov	r1, r7
 8007ddc:	f7f8 fec4 	bl	8000b68 <__aeabi_d2lz>
 8007de0:	f7f8 fb4c 	bl	800047c <__aeabi_l2d>
 8007de4:	4602      	mov	r2, r0
 8007de6:	460b      	mov	r3, r1
 8007de8:	4630      	mov	r0, r6
 8007dea:	4639      	mov	r1, r7
 8007dec:	f7f8 f9bc 	bl	8000168 <__aeabi_dsub>
 8007df0:	460b      	mov	r3, r1
 8007df2:	4602      	mov	r2, r0
 8007df4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007df8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007dfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dfe:	ea46 060a 	orr.w	r6, r6, sl
 8007e02:	431e      	orrs	r6, r3
 8007e04:	d069      	beq.n	8007eda <_strtod_l+0xb72>
 8007e06:	a30a      	add	r3, pc, #40	@ (adr r3, 8007e30 <_strtod_l+0xac8>)
 8007e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e0c:	f7f8 fdd6 	bl	80009bc <__aeabi_dcmplt>
 8007e10:	2800      	cmp	r0, #0
 8007e12:	f47f accf 	bne.w	80077b4 <_strtod_l+0x44c>
 8007e16:	a308      	add	r3, pc, #32	@ (adr r3, 8007e38 <_strtod_l+0xad0>)
 8007e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e1c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e20:	f7f8 fdea 	bl	80009f8 <__aeabi_dcmpgt>
 8007e24:	2800      	cmp	r0, #0
 8007e26:	d093      	beq.n	8007d50 <_strtod_l+0x9e8>
 8007e28:	e4c4      	b.n	80077b4 <_strtod_l+0x44c>
 8007e2a:	bf00      	nop
 8007e2c:	f3af 8000 	nop.w
 8007e30:	94a03595 	.word	0x94a03595
 8007e34:	3fdfffff 	.word	0x3fdfffff
 8007e38:	35afe535 	.word	0x35afe535
 8007e3c:	3fe00000 	.word	0x3fe00000
 8007e40:	000fffff 	.word	0x000fffff
 8007e44:	7ff00000 	.word	0x7ff00000
 8007e48:	7fefffff 	.word	0x7fefffff
 8007e4c:	3ff00000 	.word	0x3ff00000
 8007e50:	3fe00000 	.word	0x3fe00000
 8007e54:	7fe00000 	.word	0x7fe00000
 8007e58:	7c9fffff 	.word	0x7c9fffff
 8007e5c:	bff00000 	.word	0xbff00000
 8007e60:	9b08      	ldr	r3, [sp, #32]
 8007e62:	b323      	cbz	r3, 8007eae <_strtod_l+0xb46>
 8007e64:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007e68:	d821      	bhi.n	8007eae <_strtod_l+0xb46>
 8007e6a:	a327      	add	r3, pc, #156	@ (adr r3, 8007f08 <_strtod_l+0xba0>)
 8007e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e70:	4630      	mov	r0, r6
 8007e72:	4639      	mov	r1, r7
 8007e74:	f7f8 fdac 	bl	80009d0 <__aeabi_dcmple>
 8007e78:	b1a0      	cbz	r0, 8007ea4 <_strtod_l+0xb3c>
 8007e7a:	4639      	mov	r1, r7
 8007e7c:	4630      	mov	r0, r6
 8007e7e:	f7f8 fe03 	bl	8000a88 <__aeabi_d2uiz>
 8007e82:	2801      	cmp	r0, #1
 8007e84:	bf38      	it	cc
 8007e86:	2001      	movcc	r0, #1
 8007e88:	f7f8 faac 	bl	80003e4 <__aeabi_ui2d>
 8007e8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e8e:	4606      	mov	r6, r0
 8007e90:	460f      	mov	r7, r1
 8007e92:	b9fb      	cbnz	r3, 8007ed4 <_strtod_l+0xb6c>
 8007e94:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007e98:	9014      	str	r0, [sp, #80]	@ 0x50
 8007e9a:	9315      	str	r3, [sp, #84]	@ 0x54
 8007e9c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007ea0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007ea4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007ea6:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007eaa:	1b5b      	subs	r3, r3, r5
 8007eac:	9311      	str	r3, [sp, #68]	@ 0x44
 8007eae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007eb2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007eb6:	f002 f905 	bl	800a0c4 <__ulp>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	4650      	mov	r0, sl
 8007ec0:	4659      	mov	r1, fp
 8007ec2:	f7f8 fb09 	bl	80004d8 <__aeabi_dmul>
 8007ec6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007eca:	f7f8 f94f 	bl	800016c <__adddf3>
 8007ece:	4682      	mov	sl, r0
 8007ed0:	468b      	mov	fp, r1
 8007ed2:	e776      	b.n	8007dc2 <_strtod_l+0xa5a>
 8007ed4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007ed8:	e7e0      	b.n	8007e9c <_strtod_l+0xb34>
 8007eda:	a30d      	add	r3, pc, #52	@ (adr r3, 8007f10 <_strtod_l+0xba8>)
 8007edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee0:	f7f8 fd6c 	bl	80009bc <__aeabi_dcmplt>
 8007ee4:	e79e      	b.n	8007e24 <_strtod_l+0xabc>
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007eea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007eec:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007eee:	6013      	str	r3, [r2, #0]
 8007ef0:	f7ff ba77 	b.w	80073e2 <_strtod_l+0x7a>
 8007ef4:	2a65      	cmp	r2, #101	@ 0x65
 8007ef6:	f43f ab6e 	beq.w	80075d6 <_strtod_l+0x26e>
 8007efa:	2a45      	cmp	r2, #69	@ 0x45
 8007efc:	f43f ab6b 	beq.w	80075d6 <_strtod_l+0x26e>
 8007f00:	2301      	movs	r3, #1
 8007f02:	f7ff bba6 	b.w	8007652 <_strtod_l+0x2ea>
 8007f06:	bf00      	nop
 8007f08:	ffc00000 	.word	0xffc00000
 8007f0c:	41dfffff 	.word	0x41dfffff
 8007f10:	94a03595 	.word	0x94a03595
 8007f14:	3fcfffff 	.word	0x3fcfffff

08007f18 <_strtod_r>:
 8007f18:	4b01      	ldr	r3, [pc, #4]	@ (8007f20 <_strtod_r+0x8>)
 8007f1a:	f7ff ba25 	b.w	8007368 <_strtod_l>
 8007f1e:	bf00      	nop
 8007f20:	20000034 	.word	0x20000034

08007f24 <_strtol_l.constprop.0>:
 8007f24:	2b24      	cmp	r3, #36	@ 0x24
 8007f26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f2a:	4686      	mov	lr, r0
 8007f2c:	4690      	mov	r8, r2
 8007f2e:	d801      	bhi.n	8007f34 <_strtol_l.constprop.0+0x10>
 8007f30:	2b01      	cmp	r3, #1
 8007f32:	d106      	bne.n	8007f42 <_strtol_l.constprop.0+0x1e>
 8007f34:	f000 f8ae 	bl	8008094 <__errno>
 8007f38:	2316      	movs	r3, #22
 8007f3a:	6003      	str	r3, [r0, #0]
 8007f3c:	2000      	movs	r0, #0
 8007f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f42:	460d      	mov	r5, r1
 8007f44:	4833      	ldr	r0, [pc, #204]	@ (8008014 <_strtol_l.constprop.0+0xf0>)
 8007f46:	462a      	mov	r2, r5
 8007f48:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007f4c:	5d06      	ldrb	r6, [r0, r4]
 8007f4e:	f016 0608 	ands.w	r6, r6, #8
 8007f52:	d1f8      	bne.n	8007f46 <_strtol_l.constprop.0+0x22>
 8007f54:	2c2d      	cmp	r4, #45	@ 0x2d
 8007f56:	d12d      	bne.n	8007fb4 <_strtol_l.constprop.0+0x90>
 8007f58:	2601      	movs	r6, #1
 8007f5a:	782c      	ldrb	r4, [r5, #0]
 8007f5c:	1c95      	adds	r5, r2, #2
 8007f5e:	f033 0210 	bics.w	r2, r3, #16
 8007f62:	d109      	bne.n	8007f78 <_strtol_l.constprop.0+0x54>
 8007f64:	2c30      	cmp	r4, #48	@ 0x30
 8007f66:	d12a      	bne.n	8007fbe <_strtol_l.constprop.0+0x9a>
 8007f68:	782a      	ldrb	r2, [r5, #0]
 8007f6a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007f6e:	2a58      	cmp	r2, #88	@ 0x58
 8007f70:	d125      	bne.n	8007fbe <_strtol_l.constprop.0+0x9a>
 8007f72:	2310      	movs	r3, #16
 8007f74:	786c      	ldrb	r4, [r5, #1]
 8007f76:	3502      	adds	r5, #2
 8007f78:	2200      	movs	r2, #0
 8007f7a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007f7e:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8007f82:	fbbc f9f3 	udiv	r9, ip, r3
 8007f86:	4610      	mov	r0, r2
 8007f88:	fb03 ca19 	mls	sl, r3, r9, ip
 8007f8c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007f90:	2f09      	cmp	r7, #9
 8007f92:	d81b      	bhi.n	8007fcc <_strtol_l.constprop.0+0xa8>
 8007f94:	463c      	mov	r4, r7
 8007f96:	42a3      	cmp	r3, r4
 8007f98:	dd27      	ble.n	8007fea <_strtol_l.constprop.0+0xc6>
 8007f9a:	1c57      	adds	r7, r2, #1
 8007f9c:	d007      	beq.n	8007fae <_strtol_l.constprop.0+0x8a>
 8007f9e:	4581      	cmp	r9, r0
 8007fa0:	d320      	bcc.n	8007fe4 <_strtol_l.constprop.0+0xc0>
 8007fa2:	d101      	bne.n	8007fa8 <_strtol_l.constprop.0+0x84>
 8007fa4:	45a2      	cmp	sl, r4
 8007fa6:	db1d      	blt.n	8007fe4 <_strtol_l.constprop.0+0xc0>
 8007fa8:	2201      	movs	r2, #1
 8007faa:	fb00 4003 	mla	r0, r0, r3, r4
 8007fae:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007fb2:	e7eb      	b.n	8007f8c <_strtol_l.constprop.0+0x68>
 8007fb4:	2c2b      	cmp	r4, #43	@ 0x2b
 8007fb6:	bf04      	itt	eq
 8007fb8:	782c      	ldrbeq	r4, [r5, #0]
 8007fba:	1c95      	addeq	r5, r2, #2
 8007fbc:	e7cf      	b.n	8007f5e <_strtol_l.constprop.0+0x3a>
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1da      	bne.n	8007f78 <_strtol_l.constprop.0+0x54>
 8007fc2:	2c30      	cmp	r4, #48	@ 0x30
 8007fc4:	bf0c      	ite	eq
 8007fc6:	2308      	moveq	r3, #8
 8007fc8:	230a      	movne	r3, #10
 8007fca:	e7d5      	b.n	8007f78 <_strtol_l.constprop.0+0x54>
 8007fcc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007fd0:	2f19      	cmp	r7, #25
 8007fd2:	d801      	bhi.n	8007fd8 <_strtol_l.constprop.0+0xb4>
 8007fd4:	3c37      	subs	r4, #55	@ 0x37
 8007fd6:	e7de      	b.n	8007f96 <_strtol_l.constprop.0+0x72>
 8007fd8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007fdc:	2f19      	cmp	r7, #25
 8007fde:	d804      	bhi.n	8007fea <_strtol_l.constprop.0+0xc6>
 8007fe0:	3c57      	subs	r4, #87	@ 0x57
 8007fe2:	e7d8      	b.n	8007f96 <_strtol_l.constprop.0+0x72>
 8007fe4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007fe8:	e7e1      	b.n	8007fae <_strtol_l.constprop.0+0x8a>
 8007fea:	1c53      	adds	r3, r2, #1
 8007fec:	d108      	bne.n	8008000 <_strtol_l.constprop.0+0xdc>
 8007fee:	2322      	movs	r3, #34	@ 0x22
 8007ff0:	4660      	mov	r0, ip
 8007ff2:	f8ce 3000 	str.w	r3, [lr]
 8007ff6:	f1b8 0f00 	cmp.w	r8, #0
 8007ffa:	d0a0      	beq.n	8007f3e <_strtol_l.constprop.0+0x1a>
 8007ffc:	1e69      	subs	r1, r5, #1
 8007ffe:	e006      	b.n	800800e <_strtol_l.constprop.0+0xea>
 8008000:	b106      	cbz	r6, 8008004 <_strtol_l.constprop.0+0xe0>
 8008002:	4240      	negs	r0, r0
 8008004:	f1b8 0f00 	cmp.w	r8, #0
 8008008:	d099      	beq.n	8007f3e <_strtol_l.constprop.0+0x1a>
 800800a:	2a00      	cmp	r2, #0
 800800c:	d1f6      	bne.n	8007ffc <_strtol_l.constprop.0+0xd8>
 800800e:	f8c8 1000 	str.w	r1, [r8]
 8008012:	e794      	b.n	8007f3e <_strtol_l.constprop.0+0x1a>
 8008014:	0800acf1 	.word	0x0800acf1

08008018 <_strtol_r>:
 8008018:	f7ff bf84 	b.w	8007f24 <_strtol_l.constprop.0>

0800801c <_fwalk_sglue>:
 800801c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008020:	4607      	mov	r7, r0
 8008022:	4688      	mov	r8, r1
 8008024:	4614      	mov	r4, r2
 8008026:	2600      	movs	r6, #0
 8008028:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800802c:	f1b9 0901 	subs.w	r9, r9, #1
 8008030:	d505      	bpl.n	800803e <_fwalk_sglue+0x22>
 8008032:	6824      	ldr	r4, [r4, #0]
 8008034:	2c00      	cmp	r4, #0
 8008036:	d1f7      	bne.n	8008028 <_fwalk_sglue+0xc>
 8008038:	4630      	mov	r0, r6
 800803a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800803e:	89ab      	ldrh	r3, [r5, #12]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d907      	bls.n	8008054 <_fwalk_sglue+0x38>
 8008044:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008048:	3301      	adds	r3, #1
 800804a:	d003      	beq.n	8008054 <_fwalk_sglue+0x38>
 800804c:	4629      	mov	r1, r5
 800804e:	4638      	mov	r0, r7
 8008050:	47c0      	blx	r8
 8008052:	4306      	orrs	r6, r0
 8008054:	3568      	adds	r5, #104	@ 0x68
 8008056:	e7e9      	b.n	800802c <_fwalk_sglue+0x10>

08008058 <strncmp>:
 8008058:	b510      	push	{r4, lr}
 800805a:	b16a      	cbz	r2, 8008078 <strncmp+0x20>
 800805c:	3901      	subs	r1, #1
 800805e:	1884      	adds	r4, r0, r2
 8008060:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008064:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008068:	429a      	cmp	r2, r3
 800806a:	d103      	bne.n	8008074 <strncmp+0x1c>
 800806c:	42a0      	cmp	r0, r4
 800806e:	d001      	beq.n	8008074 <strncmp+0x1c>
 8008070:	2a00      	cmp	r2, #0
 8008072:	d1f5      	bne.n	8008060 <strncmp+0x8>
 8008074:	1ad0      	subs	r0, r2, r3
 8008076:	bd10      	pop	{r4, pc}
 8008078:	4610      	mov	r0, r2
 800807a:	e7fc      	b.n	8008076 <strncmp+0x1e>

0800807c <memset>:
 800807c:	4603      	mov	r3, r0
 800807e:	4402      	add	r2, r0
 8008080:	4293      	cmp	r3, r2
 8008082:	d100      	bne.n	8008086 <memset+0xa>
 8008084:	4770      	bx	lr
 8008086:	f803 1b01 	strb.w	r1, [r3], #1
 800808a:	e7f9      	b.n	8008080 <memset+0x4>

0800808c <_localeconv_r>:
 800808c:	4800      	ldr	r0, [pc, #0]	@ (8008090 <_localeconv_r+0x4>)
 800808e:	4770      	bx	lr
 8008090:	20000124 	.word	0x20000124

08008094 <__errno>:
 8008094:	4b01      	ldr	r3, [pc, #4]	@ (800809c <__errno+0x8>)
 8008096:	6818      	ldr	r0, [r3, #0]
 8008098:	4770      	bx	lr
 800809a:	bf00      	nop
 800809c:	200001a0 	.word	0x200001a0

080080a0 <__libc_init_array>:
 80080a0:	b570      	push	{r4, r5, r6, lr}
 80080a2:	2600      	movs	r6, #0
 80080a4:	4d0c      	ldr	r5, [pc, #48]	@ (80080d8 <__libc_init_array+0x38>)
 80080a6:	4c0d      	ldr	r4, [pc, #52]	@ (80080dc <__libc_init_array+0x3c>)
 80080a8:	1b64      	subs	r4, r4, r5
 80080aa:	10a4      	asrs	r4, r4, #2
 80080ac:	42a6      	cmp	r6, r4
 80080ae:	d109      	bne.n	80080c4 <__libc_init_array+0x24>
 80080b0:	f002 fd60 	bl	800ab74 <_init>
 80080b4:	2600      	movs	r6, #0
 80080b6:	4d0a      	ldr	r5, [pc, #40]	@ (80080e0 <__libc_init_array+0x40>)
 80080b8:	4c0a      	ldr	r4, [pc, #40]	@ (80080e4 <__libc_init_array+0x44>)
 80080ba:	1b64      	subs	r4, r4, r5
 80080bc:	10a4      	asrs	r4, r4, #2
 80080be:	42a6      	cmp	r6, r4
 80080c0:	d105      	bne.n	80080ce <__libc_init_array+0x2e>
 80080c2:	bd70      	pop	{r4, r5, r6, pc}
 80080c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80080c8:	4798      	blx	r3
 80080ca:	3601      	adds	r6, #1
 80080cc:	e7ee      	b.n	80080ac <__libc_init_array+0xc>
 80080ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80080d2:	4798      	blx	r3
 80080d4:	3601      	adds	r6, #1
 80080d6:	e7f2      	b.n	80080be <__libc_init_array+0x1e>
 80080d8:	0800b08c 	.word	0x0800b08c
 80080dc:	0800b08c 	.word	0x0800b08c
 80080e0:	0800b08c 	.word	0x0800b08c
 80080e4:	0800b090 	.word	0x0800b090

080080e8 <__retarget_lock_init_recursive>:
 80080e8:	4770      	bx	lr

080080ea <__retarget_lock_acquire_recursive>:
 80080ea:	4770      	bx	lr

080080ec <__retarget_lock_release_recursive>:
 80080ec:	4770      	bx	lr

080080ee <memchr>:
 80080ee:	4603      	mov	r3, r0
 80080f0:	b510      	push	{r4, lr}
 80080f2:	b2c9      	uxtb	r1, r1
 80080f4:	4402      	add	r2, r0
 80080f6:	4293      	cmp	r3, r2
 80080f8:	4618      	mov	r0, r3
 80080fa:	d101      	bne.n	8008100 <memchr+0x12>
 80080fc:	2000      	movs	r0, #0
 80080fe:	e003      	b.n	8008108 <memchr+0x1a>
 8008100:	7804      	ldrb	r4, [r0, #0]
 8008102:	3301      	adds	r3, #1
 8008104:	428c      	cmp	r4, r1
 8008106:	d1f6      	bne.n	80080f6 <memchr+0x8>
 8008108:	bd10      	pop	{r4, pc}

0800810a <memcpy>:
 800810a:	440a      	add	r2, r1
 800810c:	4291      	cmp	r1, r2
 800810e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008112:	d100      	bne.n	8008116 <memcpy+0xc>
 8008114:	4770      	bx	lr
 8008116:	b510      	push	{r4, lr}
 8008118:	f811 4b01 	ldrb.w	r4, [r1], #1
 800811c:	4291      	cmp	r1, r2
 800811e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008122:	d1f9      	bne.n	8008118 <memcpy+0xe>
 8008124:	bd10      	pop	{r4, pc}
	...

08008128 <nan>:
 8008128:	2000      	movs	r0, #0
 800812a:	4901      	ldr	r1, [pc, #4]	@ (8008130 <nan+0x8>)
 800812c:	4770      	bx	lr
 800812e:	bf00      	nop
 8008130:	7ff80000 	.word	0x7ff80000

08008134 <nanf>:
 8008134:	4800      	ldr	r0, [pc, #0]	@ (8008138 <nanf+0x4>)
 8008136:	4770      	bx	lr
 8008138:	7fc00000 	.word	0x7fc00000

0800813c <quorem>:
 800813c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008140:	6903      	ldr	r3, [r0, #16]
 8008142:	690c      	ldr	r4, [r1, #16]
 8008144:	4607      	mov	r7, r0
 8008146:	42a3      	cmp	r3, r4
 8008148:	db7e      	blt.n	8008248 <quorem+0x10c>
 800814a:	3c01      	subs	r4, #1
 800814c:	00a3      	lsls	r3, r4, #2
 800814e:	f100 0514 	add.w	r5, r0, #20
 8008152:	f101 0814 	add.w	r8, r1, #20
 8008156:	9300      	str	r3, [sp, #0]
 8008158:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800815c:	9301      	str	r3, [sp, #4]
 800815e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008162:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008166:	3301      	adds	r3, #1
 8008168:	429a      	cmp	r2, r3
 800816a:	fbb2 f6f3 	udiv	r6, r2, r3
 800816e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008172:	d32e      	bcc.n	80081d2 <quorem+0x96>
 8008174:	f04f 0a00 	mov.w	sl, #0
 8008178:	46c4      	mov	ip, r8
 800817a:	46ae      	mov	lr, r5
 800817c:	46d3      	mov	fp, sl
 800817e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008182:	b298      	uxth	r0, r3
 8008184:	fb06 a000 	mla	r0, r6, r0, sl
 8008188:	0c1b      	lsrs	r3, r3, #16
 800818a:	0c02      	lsrs	r2, r0, #16
 800818c:	fb06 2303 	mla	r3, r6, r3, r2
 8008190:	f8de 2000 	ldr.w	r2, [lr]
 8008194:	b280      	uxth	r0, r0
 8008196:	b292      	uxth	r2, r2
 8008198:	1a12      	subs	r2, r2, r0
 800819a:	445a      	add	r2, fp
 800819c:	f8de 0000 	ldr.w	r0, [lr]
 80081a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80081aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80081ae:	b292      	uxth	r2, r2
 80081b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80081b4:	45e1      	cmp	r9, ip
 80081b6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80081ba:	f84e 2b04 	str.w	r2, [lr], #4
 80081be:	d2de      	bcs.n	800817e <quorem+0x42>
 80081c0:	9b00      	ldr	r3, [sp, #0]
 80081c2:	58eb      	ldr	r3, [r5, r3]
 80081c4:	b92b      	cbnz	r3, 80081d2 <quorem+0x96>
 80081c6:	9b01      	ldr	r3, [sp, #4]
 80081c8:	3b04      	subs	r3, #4
 80081ca:	429d      	cmp	r5, r3
 80081cc:	461a      	mov	r2, r3
 80081ce:	d32f      	bcc.n	8008230 <quorem+0xf4>
 80081d0:	613c      	str	r4, [r7, #16]
 80081d2:	4638      	mov	r0, r7
 80081d4:	f001 fec6 	bl	8009f64 <__mcmp>
 80081d8:	2800      	cmp	r0, #0
 80081da:	db25      	blt.n	8008228 <quorem+0xec>
 80081dc:	4629      	mov	r1, r5
 80081de:	2000      	movs	r0, #0
 80081e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80081e4:	f8d1 c000 	ldr.w	ip, [r1]
 80081e8:	fa1f fe82 	uxth.w	lr, r2
 80081ec:	fa1f f38c 	uxth.w	r3, ip
 80081f0:	eba3 030e 	sub.w	r3, r3, lr
 80081f4:	4403      	add	r3, r0
 80081f6:	0c12      	lsrs	r2, r2, #16
 80081f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80081fc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008200:	b29b      	uxth	r3, r3
 8008202:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008206:	45c1      	cmp	r9, r8
 8008208:	ea4f 4022 	mov.w	r0, r2, asr #16
 800820c:	f841 3b04 	str.w	r3, [r1], #4
 8008210:	d2e6      	bcs.n	80081e0 <quorem+0xa4>
 8008212:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008216:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800821a:	b922      	cbnz	r2, 8008226 <quorem+0xea>
 800821c:	3b04      	subs	r3, #4
 800821e:	429d      	cmp	r5, r3
 8008220:	461a      	mov	r2, r3
 8008222:	d30b      	bcc.n	800823c <quorem+0x100>
 8008224:	613c      	str	r4, [r7, #16]
 8008226:	3601      	adds	r6, #1
 8008228:	4630      	mov	r0, r6
 800822a:	b003      	add	sp, #12
 800822c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008230:	6812      	ldr	r2, [r2, #0]
 8008232:	3b04      	subs	r3, #4
 8008234:	2a00      	cmp	r2, #0
 8008236:	d1cb      	bne.n	80081d0 <quorem+0x94>
 8008238:	3c01      	subs	r4, #1
 800823a:	e7c6      	b.n	80081ca <quorem+0x8e>
 800823c:	6812      	ldr	r2, [r2, #0]
 800823e:	3b04      	subs	r3, #4
 8008240:	2a00      	cmp	r2, #0
 8008242:	d1ef      	bne.n	8008224 <quorem+0xe8>
 8008244:	3c01      	subs	r4, #1
 8008246:	e7ea      	b.n	800821e <quorem+0xe2>
 8008248:	2000      	movs	r0, #0
 800824a:	e7ee      	b.n	800822a <quorem+0xee>
 800824c:	0000      	movs	r0, r0
	...

08008250 <_dtoa_r>:
 8008250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008254:	4614      	mov	r4, r2
 8008256:	461d      	mov	r5, r3
 8008258:	69c7      	ldr	r7, [r0, #28]
 800825a:	b097      	sub	sp, #92	@ 0x5c
 800825c:	4683      	mov	fp, r0
 800825e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008262:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008264:	b97f      	cbnz	r7, 8008286 <_dtoa_r+0x36>
 8008266:	2010      	movs	r0, #16
 8008268:	f001 fa4a 	bl	8009700 <malloc>
 800826c:	4602      	mov	r2, r0
 800826e:	f8cb 001c 	str.w	r0, [fp, #28]
 8008272:	b920      	cbnz	r0, 800827e <_dtoa_r+0x2e>
 8008274:	21ef      	movs	r1, #239	@ 0xef
 8008276:	4ba8      	ldr	r3, [pc, #672]	@ (8008518 <_dtoa_r+0x2c8>)
 8008278:	48a8      	ldr	r0, [pc, #672]	@ (800851c <_dtoa_r+0x2cc>)
 800827a:	f002 f945 	bl	800a508 <__assert_func>
 800827e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008282:	6007      	str	r7, [r0, #0]
 8008284:	60c7      	str	r7, [r0, #12]
 8008286:	f8db 301c 	ldr.w	r3, [fp, #28]
 800828a:	6819      	ldr	r1, [r3, #0]
 800828c:	b159      	cbz	r1, 80082a6 <_dtoa_r+0x56>
 800828e:	685a      	ldr	r2, [r3, #4]
 8008290:	2301      	movs	r3, #1
 8008292:	4093      	lsls	r3, r2
 8008294:	604a      	str	r2, [r1, #4]
 8008296:	608b      	str	r3, [r1, #8]
 8008298:	4658      	mov	r0, fp
 800829a:	f001 fbe1 	bl	8009a60 <_Bfree>
 800829e:	2200      	movs	r2, #0
 80082a0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80082a4:	601a      	str	r2, [r3, #0]
 80082a6:	1e2b      	subs	r3, r5, #0
 80082a8:	bfaf      	iteee	ge
 80082aa:	2300      	movge	r3, #0
 80082ac:	2201      	movlt	r2, #1
 80082ae:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80082b2:	9303      	strlt	r3, [sp, #12]
 80082b4:	bfa8      	it	ge
 80082b6:	6033      	strge	r3, [r6, #0]
 80082b8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80082bc:	4b98      	ldr	r3, [pc, #608]	@ (8008520 <_dtoa_r+0x2d0>)
 80082be:	bfb8      	it	lt
 80082c0:	6032      	strlt	r2, [r6, #0]
 80082c2:	ea33 0308 	bics.w	r3, r3, r8
 80082c6:	d112      	bne.n	80082ee <_dtoa_r+0x9e>
 80082c8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80082cc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80082ce:	6013      	str	r3, [r2, #0]
 80082d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80082d4:	4323      	orrs	r3, r4
 80082d6:	f000 8550 	beq.w	8008d7a <_dtoa_r+0xb2a>
 80082da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80082dc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8008524 <_dtoa_r+0x2d4>
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 8552 	beq.w	8008d8a <_dtoa_r+0xb3a>
 80082e6:	f10a 0303 	add.w	r3, sl, #3
 80082ea:	f000 bd4c 	b.w	8008d86 <_dtoa_r+0xb36>
 80082ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80082f2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80082f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80082fa:	2200      	movs	r2, #0
 80082fc:	2300      	movs	r3, #0
 80082fe:	f7f8 fb53 	bl	80009a8 <__aeabi_dcmpeq>
 8008302:	4607      	mov	r7, r0
 8008304:	b158      	cbz	r0, 800831e <_dtoa_r+0xce>
 8008306:	2301      	movs	r3, #1
 8008308:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800830a:	6013      	str	r3, [r2, #0]
 800830c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800830e:	b113      	cbz	r3, 8008316 <_dtoa_r+0xc6>
 8008310:	4b85      	ldr	r3, [pc, #532]	@ (8008528 <_dtoa_r+0x2d8>)
 8008312:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008314:	6013      	str	r3, [r2, #0]
 8008316:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800852c <_dtoa_r+0x2dc>
 800831a:	f000 bd36 	b.w	8008d8a <_dtoa_r+0xb3a>
 800831e:	ab14      	add	r3, sp, #80	@ 0x50
 8008320:	9301      	str	r3, [sp, #4]
 8008322:	ab15      	add	r3, sp, #84	@ 0x54
 8008324:	9300      	str	r3, [sp, #0]
 8008326:	4658      	mov	r0, fp
 8008328:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800832c:	f001 ff32 	bl	800a194 <__d2b>
 8008330:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008334:	4681      	mov	r9, r0
 8008336:	2e00      	cmp	r6, #0
 8008338:	d077      	beq.n	800842a <_dtoa_r+0x1da>
 800833a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800833e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008340:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008348:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800834c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008350:	9712      	str	r7, [sp, #72]	@ 0x48
 8008352:	4619      	mov	r1, r3
 8008354:	2200      	movs	r2, #0
 8008356:	4b76      	ldr	r3, [pc, #472]	@ (8008530 <_dtoa_r+0x2e0>)
 8008358:	f7f7 ff06 	bl	8000168 <__aeabi_dsub>
 800835c:	a368      	add	r3, pc, #416	@ (adr r3, 8008500 <_dtoa_r+0x2b0>)
 800835e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008362:	f7f8 f8b9 	bl	80004d8 <__aeabi_dmul>
 8008366:	a368      	add	r3, pc, #416	@ (adr r3, 8008508 <_dtoa_r+0x2b8>)
 8008368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836c:	f7f7 fefe 	bl	800016c <__adddf3>
 8008370:	4604      	mov	r4, r0
 8008372:	4630      	mov	r0, r6
 8008374:	460d      	mov	r5, r1
 8008376:	f7f8 f845 	bl	8000404 <__aeabi_i2d>
 800837a:	a365      	add	r3, pc, #404	@ (adr r3, 8008510 <_dtoa_r+0x2c0>)
 800837c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008380:	f7f8 f8aa 	bl	80004d8 <__aeabi_dmul>
 8008384:	4602      	mov	r2, r0
 8008386:	460b      	mov	r3, r1
 8008388:	4620      	mov	r0, r4
 800838a:	4629      	mov	r1, r5
 800838c:	f7f7 feee 	bl	800016c <__adddf3>
 8008390:	4604      	mov	r4, r0
 8008392:	460d      	mov	r5, r1
 8008394:	f7f8 fb50 	bl	8000a38 <__aeabi_d2iz>
 8008398:	2200      	movs	r2, #0
 800839a:	4607      	mov	r7, r0
 800839c:	2300      	movs	r3, #0
 800839e:	4620      	mov	r0, r4
 80083a0:	4629      	mov	r1, r5
 80083a2:	f7f8 fb0b 	bl	80009bc <__aeabi_dcmplt>
 80083a6:	b140      	cbz	r0, 80083ba <_dtoa_r+0x16a>
 80083a8:	4638      	mov	r0, r7
 80083aa:	f7f8 f82b 	bl	8000404 <__aeabi_i2d>
 80083ae:	4622      	mov	r2, r4
 80083b0:	462b      	mov	r3, r5
 80083b2:	f7f8 faf9 	bl	80009a8 <__aeabi_dcmpeq>
 80083b6:	b900      	cbnz	r0, 80083ba <_dtoa_r+0x16a>
 80083b8:	3f01      	subs	r7, #1
 80083ba:	2f16      	cmp	r7, #22
 80083bc:	d853      	bhi.n	8008466 <_dtoa_r+0x216>
 80083be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80083c2:	4b5c      	ldr	r3, [pc, #368]	@ (8008534 <_dtoa_r+0x2e4>)
 80083c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80083c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083cc:	f7f8 faf6 	bl	80009bc <__aeabi_dcmplt>
 80083d0:	2800      	cmp	r0, #0
 80083d2:	d04a      	beq.n	800846a <_dtoa_r+0x21a>
 80083d4:	2300      	movs	r3, #0
 80083d6:	3f01      	subs	r7, #1
 80083d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80083da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80083dc:	1b9b      	subs	r3, r3, r6
 80083de:	1e5a      	subs	r2, r3, #1
 80083e0:	bf46      	itte	mi
 80083e2:	f1c3 0801 	rsbmi	r8, r3, #1
 80083e6:	2300      	movmi	r3, #0
 80083e8:	f04f 0800 	movpl.w	r8, #0
 80083ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80083ee:	bf48      	it	mi
 80083f0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80083f2:	2f00      	cmp	r7, #0
 80083f4:	db3b      	blt.n	800846e <_dtoa_r+0x21e>
 80083f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083f8:	970e      	str	r7, [sp, #56]	@ 0x38
 80083fa:	443b      	add	r3, r7
 80083fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80083fe:	2300      	movs	r3, #0
 8008400:	930a      	str	r3, [sp, #40]	@ 0x28
 8008402:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008404:	2b09      	cmp	r3, #9
 8008406:	d866      	bhi.n	80084d6 <_dtoa_r+0x286>
 8008408:	2b05      	cmp	r3, #5
 800840a:	bfc4      	itt	gt
 800840c:	3b04      	subgt	r3, #4
 800840e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008410:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008412:	bfc8      	it	gt
 8008414:	2400      	movgt	r4, #0
 8008416:	f1a3 0302 	sub.w	r3, r3, #2
 800841a:	bfd8      	it	le
 800841c:	2401      	movle	r4, #1
 800841e:	2b03      	cmp	r3, #3
 8008420:	d864      	bhi.n	80084ec <_dtoa_r+0x29c>
 8008422:	e8df f003 	tbb	[pc, r3]
 8008426:	382b      	.short	0x382b
 8008428:	5636      	.short	0x5636
 800842a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800842e:	441e      	add	r6, r3
 8008430:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008434:	2b20      	cmp	r3, #32
 8008436:	bfc1      	itttt	gt
 8008438:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800843c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008440:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008444:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008448:	bfd6      	itet	le
 800844a:	f1c3 0320 	rsble	r3, r3, #32
 800844e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008452:	fa04 f003 	lslle.w	r0, r4, r3
 8008456:	f7f7 ffc5 	bl	80003e4 <__aeabi_ui2d>
 800845a:	2201      	movs	r2, #1
 800845c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008460:	3e01      	subs	r6, #1
 8008462:	9212      	str	r2, [sp, #72]	@ 0x48
 8008464:	e775      	b.n	8008352 <_dtoa_r+0x102>
 8008466:	2301      	movs	r3, #1
 8008468:	e7b6      	b.n	80083d8 <_dtoa_r+0x188>
 800846a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800846c:	e7b5      	b.n	80083da <_dtoa_r+0x18a>
 800846e:	427b      	negs	r3, r7
 8008470:	930a      	str	r3, [sp, #40]	@ 0x28
 8008472:	2300      	movs	r3, #0
 8008474:	eba8 0807 	sub.w	r8, r8, r7
 8008478:	930e      	str	r3, [sp, #56]	@ 0x38
 800847a:	e7c2      	b.n	8008402 <_dtoa_r+0x1b2>
 800847c:	2300      	movs	r3, #0
 800847e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008480:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008482:	2b00      	cmp	r3, #0
 8008484:	dc35      	bgt.n	80084f2 <_dtoa_r+0x2a2>
 8008486:	2301      	movs	r3, #1
 8008488:	461a      	mov	r2, r3
 800848a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800848e:	9221      	str	r2, [sp, #132]	@ 0x84
 8008490:	e00b      	b.n	80084aa <_dtoa_r+0x25a>
 8008492:	2301      	movs	r3, #1
 8008494:	e7f3      	b.n	800847e <_dtoa_r+0x22e>
 8008496:	2300      	movs	r3, #0
 8008498:	930b      	str	r3, [sp, #44]	@ 0x2c
 800849a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800849c:	18fb      	adds	r3, r7, r3
 800849e:	9308      	str	r3, [sp, #32]
 80084a0:	3301      	adds	r3, #1
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	9307      	str	r3, [sp, #28]
 80084a6:	bfb8      	it	lt
 80084a8:	2301      	movlt	r3, #1
 80084aa:	2100      	movs	r1, #0
 80084ac:	2204      	movs	r2, #4
 80084ae:	f8db 001c 	ldr.w	r0, [fp, #28]
 80084b2:	f102 0514 	add.w	r5, r2, #20
 80084b6:	429d      	cmp	r5, r3
 80084b8:	d91f      	bls.n	80084fa <_dtoa_r+0x2aa>
 80084ba:	6041      	str	r1, [r0, #4]
 80084bc:	4658      	mov	r0, fp
 80084be:	f001 fa8f 	bl	80099e0 <_Balloc>
 80084c2:	4682      	mov	sl, r0
 80084c4:	2800      	cmp	r0, #0
 80084c6:	d139      	bne.n	800853c <_dtoa_r+0x2ec>
 80084c8:	4602      	mov	r2, r0
 80084ca:	f240 11af 	movw	r1, #431	@ 0x1af
 80084ce:	4b1a      	ldr	r3, [pc, #104]	@ (8008538 <_dtoa_r+0x2e8>)
 80084d0:	e6d2      	b.n	8008278 <_dtoa_r+0x28>
 80084d2:	2301      	movs	r3, #1
 80084d4:	e7e0      	b.n	8008498 <_dtoa_r+0x248>
 80084d6:	2401      	movs	r4, #1
 80084d8:	2300      	movs	r3, #0
 80084da:	940b      	str	r4, [sp, #44]	@ 0x2c
 80084dc:	9320      	str	r3, [sp, #128]	@ 0x80
 80084de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80084e2:	2200      	movs	r2, #0
 80084e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80084e8:	2312      	movs	r3, #18
 80084ea:	e7d0      	b.n	800848e <_dtoa_r+0x23e>
 80084ec:	2301      	movs	r3, #1
 80084ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084f0:	e7f5      	b.n	80084de <_dtoa_r+0x28e>
 80084f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80084f4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80084f8:	e7d7      	b.n	80084aa <_dtoa_r+0x25a>
 80084fa:	3101      	adds	r1, #1
 80084fc:	0052      	lsls	r2, r2, #1
 80084fe:	e7d8      	b.n	80084b2 <_dtoa_r+0x262>
 8008500:	636f4361 	.word	0x636f4361
 8008504:	3fd287a7 	.word	0x3fd287a7
 8008508:	8b60c8b3 	.word	0x8b60c8b3
 800850c:	3fc68a28 	.word	0x3fc68a28
 8008510:	509f79fb 	.word	0x509f79fb
 8008514:	3fd34413 	.word	0x3fd34413
 8008518:	0800adfe 	.word	0x0800adfe
 800851c:	0800ae15 	.word	0x0800ae15
 8008520:	7ff00000 	.word	0x7ff00000
 8008524:	0800adfa 	.word	0x0800adfa
 8008528:	0800ac67 	.word	0x0800ac67
 800852c:	0800ac66 	.word	0x0800ac66
 8008530:	3ff80000 	.word	0x3ff80000
 8008534:	0800af80 	.word	0x0800af80
 8008538:	0800ae6d 	.word	0x0800ae6d
 800853c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008540:	6018      	str	r0, [r3, #0]
 8008542:	9b07      	ldr	r3, [sp, #28]
 8008544:	2b0e      	cmp	r3, #14
 8008546:	f200 80a4 	bhi.w	8008692 <_dtoa_r+0x442>
 800854a:	2c00      	cmp	r4, #0
 800854c:	f000 80a1 	beq.w	8008692 <_dtoa_r+0x442>
 8008550:	2f00      	cmp	r7, #0
 8008552:	dd33      	ble.n	80085bc <_dtoa_r+0x36c>
 8008554:	4b86      	ldr	r3, [pc, #536]	@ (8008770 <_dtoa_r+0x520>)
 8008556:	f007 020f 	and.w	r2, r7, #15
 800855a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800855e:	05f8      	lsls	r0, r7, #23
 8008560:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008564:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008568:	ea4f 1427 	mov.w	r4, r7, asr #4
 800856c:	d516      	bpl.n	800859c <_dtoa_r+0x34c>
 800856e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008572:	4b80      	ldr	r3, [pc, #512]	@ (8008774 <_dtoa_r+0x524>)
 8008574:	2603      	movs	r6, #3
 8008576:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800857a:	f7f8 f8d7 	bl	800072c <__aeabi_ddiv>
 800857e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008582:	f004 040f 	and.w	r4, r4, #15
 8008586:	4d7b      	ldr	r5, [pc, #492]	@ (8008774 <_dtoa_r+0x524>)
 8008588:	b954      	cbnz	r4, 80085a0 <_dtoa_r+0x350>
 800858a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800858e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008592:	f7f8 f8cb 	bl	800072c <__aeabi_ddiv>
 8008596:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800859a:	e028      	b.n	80085ee <_dtoa_r+0x39e>
 800859c:	2602      	movs	r6, #2
 800859e:	e7f2      	b.n	8008586 <_dtoa_r+0x336>
 80085a0:	07e1      	lsls	r1, r4, #31
 80085a2:	d508      	bpl.n	80085b6 <_dtoa_r+0x366>
 80085a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80085ac:	f7f7 ff94 	bl	80004d8 <__aeabi_dmul>
 80085b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085b4:	3601      	adds	r6, #1
 80085b6:	1064      	asrs	r4, r4, #1
 80085b8:	3508      	adds	r5, #8
 80085ba:	e7e5      	b.n	8008588 <_dtoa_r+0x338>
 80085bc:	f000 80d2 	beq.w	8008764 <_dtoa_r+0x514>
 80085c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085c4:	427c      	negs	r4, r7
 80085c6:	4b6a      	ldr	r3, [pc, #424]	@ (8008770 <_dtoa_r+0x520>)
 80085c8:	f004 020f 	and.w	r2, r4, #15
 80085cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d4:	f7f7 ff80 	bl	80004d8 <__aeabi_dmul>
 80085d8:	2602      	movs	r6, #2
 80085da:	2300      	movs	r3, #0
 80085dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085e0:	4d64      	ldr	r5, [pc, #400]	@ (8008774 <_dtoa_r+0x524>)
 80085e2:	1124      	asrs	r4, r4, #4
 80085e4:	2c00      	cmp	r4, #0
 80085e6:	f040 80b2 	bne.w	800874e <_dtoa_r+0x4fe>
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d1d3      	bne.n	8008596 <_dtoa_r+0x346>
 80085ee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80085f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	f000 80b7 	beq.w	8008768 <_dtoa_r+0x518>
 80085fa:	2200      	movs	r2, #0
 80085fc:	4620      	mov	r0, r4
 80085fe:	4629      	mov	r1, r5
 8008600:	4b5d      	ldr	r3, [pc, #372]	@ (8008778 <_dtoa_r+0x528>)
 8008602:	f7f8 f9db 	bl	80009bc <__aeabi_dcmplt>
 8008606:	2800      	cmp	r0, #0
 8008608:	f000 80ae 	beq.w	8008768 <_dtoa_r+0x518>
 800860c:	9b07      	ldr	r3, [sp, #28]
 800860e:	2b00      	cmp	r3, #0
 8008610:	f000 80aa 	beq.w	8008768 <_dtoa_r+0x518>
 8008614:	9b08      	ldr	r3, [sp, #32]
 8008616:	2b00      	cmp	r3, #0
 8008618:	dd37      	ble.n	800868a <_dtoa_r+0x43a>
 800861a:	1e7b      	subs	r3, r7, #1
 800861c:	4620      	mov	r0, r4
 800861e:	9304      	str	r3, [sp, #16]
 8008620:	2200      	movs	r2, #0
 8008622:	4629      	mov	r1, r5
 8008624:	4b55      	ldr	r3, [pc, #340]	@ (800877c <_dtoa_r+0x52c>)
 8008626:	f7f7 ff57 	bl	80004d8 <__aeabi_dmul>
 800862a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800862e:	9c08      	ldr	r4, [sp, #32]
 8008630:	3601      	adds	r6, #1
 8008632:	4630      	mov	r0, r6
 8008634:	f7f7 fee6 	bl	8000404 <__aeabi_i2d>
 8008638:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800863c:	f7f7 ff4c 	bl	80004d8 <__aeabi_dmul>
 8008640:	2200      	movs	r2, #0
 8008642:	4b4f      	ldr	r3, [pc, #316]	@ (8008780 <_dtoa_r+0x530>)
 8008644:	f7f7 fd92 	bl	800016c <__adddf3>
 8008648:	4605      	mov	r5, r0
 800864a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800864e:	2c00      	cmp	r4, #0
 8008650:	f040 809a 	bne.w	8008788 <_dtoa_r+0x538>
 8008654:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008658:	2200      	movs	r2, #0
 800865a:	4b4a      	ldr	r3, [pc, #296]	@ (8008784 <_dtoa_r+0x534>)
 800865c:	f7f7 fd84 	bl	8000168 <__aeabi_dsub>
 8008660:	4602      	mov	r2, r0
 8008662:	460b      	mov	r3, r1
 8008664:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008668:	462a      	mov	r2, r5
 800866a:	4633      	mov	r3, r6
 800866c:	f7f8 f9c4 	bl	80009f8 <__aeabi_dcmpgt>
 8008670:	2800      	cmp	r0, #0
 8008672:	f040 828e 	bne.w	8008b92 <_dtoa_r+0x942>
 8008676:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800867a:	462a      	mov	r2, r5
 800867c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008680:	f7f8 f99c 	bl	80009bc <__aeabi_dcmplt>
 8008684:	2800      	cmp	r0, #0
 8008686:	f040 8127 	bne.w	80088d8 <_dtoa_r+0x688>
 800868a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800868e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008692:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008694:	2b00      	cmp	r3, #0
 8008696:	f2c0 8163 	blt.w	8008960 <_dtoa_r+0x710>
 800869a:	2f0e      	cmp	r7, #14
 800869c:	f300 8160 	bgt.w	8008960 <_dtoa_r+0x710>
 80086a0:	4b33      	ldr	r3, [pc, #204]	@ (8008770 <_dtoa_r+0x520>)
 80086a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80086a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80086aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80086ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	da03      	bge.n	80086bc <_dtoa_r+0x46c>
 80086b4:	9b07      	ldr	r3, [sp, #28]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	f340 8100 	ble.w	80088bc <_dtoa_r+0x66c>
 80086bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80086c0:	4656      	mov	r6, sl
 80086c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086c6:	4620      	mov	r0, r4
 80086c8:	4629      	mov	r1, r5
 80086ca:	f7f8 f82f 	bl	800072c <__aeabi_ddiv>
 80086ce:	f7f8 f9b3 	bl	8000a38 <__aeabi_d2iz>
 80086d2:	4680      	mov	r8, r0
 80086d4:	f7f7 fe96 	bl	8000404 <__aeabi_i2d>
 80086d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086dc:	f7f7 fefc 	bl	80004d8 <__aeabi_dmul>
 80086e0:	4602      	mov	r2, r0
 80086e2:	460b      	mov	r3, r1
 80086e4:	4620      	mov	r0, r4
 80086e6:	4629      	mov	r1, r5
 80086e8:	f7f7 fd3e 	bl	8000168 <__aeabi_dsub>
 80086ec:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80086f0:	9d07      	ldr	r5, [sp, #28]
 80086f2:	f806 4b01 	strb.w	r4, [r6], #1
 80086f6:	eba6 040a 	sub.w	r4, r6, sl
 80086fa:	42a5      	cmp	r5, r4
 80086fc:	4602      	mov	r2, r0
 80086fe:	460b      	mov	r3, r1
 8008700:	f040 8116 	bne.w	8008930 <_dtoa_r+0x6e0>
 8008704:	f7f7 fd32 	bl	800016c <__adddf3>
 8008708:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800870c:	4604      	mov	r4, r0
 800870e:	460d      	mov	r5, r1
 8008710:	f7f8 f972 	bl	80009f8 <__aeabi_dcmpgt>
 8008714:	2800      	cmp	r0, #0
 8008716:	f040 80f8 	bne.w	800890a <_dtoa_r+0x6ba>
 800871a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800871e:	4620      	mov	r0, r4
 8008720:	4629      	mov	r1, r5
 8008722:	f7f8 f941 	bl	80009a8 <__aeabi_dcmpeq>
 8008726:	b118      	cbz	r0, 8008730 <_dtoa_r+0x4e0>
 8008728:	f018 0f01 	tst.w	r8, #1
 800872c:	f040 80ed 	bne.w	800890a <_dtoa_r+0x6ba>
 8008730:	4649      	mov	r1, r9
 8008732:	4658      	mov	r0, fp
 8008734:	f001 f994 	bl	8009a60 <_Bfree>
 8008738:	2300      	movs	r3, #0
 800873a:	7033      	strb	r3, [r6, #0]
 800873c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800873e:	3701      	adds	r7, #1
 8008740:	601f      	str	r7, [r3, #0]
 8008742:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008744:	2b00      	cmp	r3, #0
 8008746:	f000 8320 	beq.w	8008d8a <_dtoa_r+0xb3a>
 800874a:	601e      	str	r6, [r3, #0]
 800874c:	e31d      	b.n	8008d8a <_dtoa_r+0xb3a>
 800874e:	07e2      	lsls	r2, r4, #31
 8008750:	d505      	bpl.n	800875e <_dtoa_r+0x50e>
 8008752:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008756:	f7f7 febf 	bl	80004d8 <__aeabi_dmul>
 800875a:	2301      	movs	r3, #1
 800875c:	3601      	adds	r6, #1
 800875e:	1064      	asrs	r4, r4, #1
 8008760:	3508      	adds	r5, #8
 8008762:	e73f      	b.n	80085e4 <_dtoa_r+0x394>
 8008764:	2602      	movs	r6, #2
 8008766:	e742      	b.n	80085ee <_dtoa_r+0x39e>
 8008768:	9c07      	ldr	r4, [sp, #28]
 800876a:	9704      	str	r7, [sp, #16]
 800876c:	e761      	b.n	8008632 <_dtoa_r+0x3e2>
 800876e:	bf00      	nop
 8008770:	0800af80 	.word	0x0800af80
 8008774:	0800af58 	.word	0x0800af58
 8008778:	3ff00000 	.word	0x3ff00000
 800877c:	40240000 	.word	0x40240000
 8008780:	401c0000 	.word	0x401c0000
 8008784:	40140000 	.word	0x40140000
 8008788:	4b70      	ldr	r3, [pc, #448]	@ (800894c <_dtoa_r+0x6fc>)
 800878a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800878c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008790:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008794:	4454      	add	r4, sl
 8008796:	2900      	cmp	r1, #0
 8008798:	d045      	beq.n	8008826 <_dtoa_r+0x5d6>
 800879a:	2000      	movs	r0, #0
 800879c:	496c      	ldr	r1, [pc, #432]	@ (8008950 <_dtoa_r+0x700>)
 800879e:	f7f7 ffc5 	bl	800072c <__aeabi_ddiv>
 80087a2:	4633      	mov	r3, r6
 80087a4:	462a      	mov	r2, r5
 80087a6:	f7f7 fcdf 	bl	8000168 <__aeabi_dsub>
 80087aa:	4656      	mov	r6, sl
 80087ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80087b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087b4:	f7f8 f940 	bl	8000a38 <__aeabi_d2iz>
 80087b8:	4605      	mov	r5, r0
 80087ba:	f7f7 fe23 	bl	8000404 <__aeabi_i2d>
 80087be:	4602      	mov	r2, r0
 80087c0:	460b      	mov	r3, r1
 80087c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087c6:	f7f7 fccf 	bl	8000168 <__aeabi_dsub>
 80087ca:	4602      	mov	r2, r0
 80087cc:	460b      	mov	r3, r1
 80087ce:	3530      	adds	r5, #48	@ 0x30
 80087d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80087d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80087d8:	f806 5b01 	strb.w	r5, [r6], #1
 80087dc:	f7f8 f8ee 	bl	80009bc <__aeabi_dcmplt>
 80087e0:	2800      	cmp	r0, #0
 80087e2:	d163      	bne.n	80088ac <_dtoa_r+0x65c>
 80087e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087e8:	2000      	movs	r0, #0
 80087ea:	495a      	ldr	r1, [pc, #360]	@ (8008954 <_dtoa_r+0x704>)
 80087ec:	f7f7 fcbc 	bl	8000168 <__aeabi_dsub>
 80087f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80087f4:	f7f8 f8e2 	bl	80009bc <__aeabi_dcmplt>
 80087f8:	2800      	cmp	r0, #0
 80087fa:	f040 8087 	bne.w	800890c <_dtoa_r+0x6bc>
 80087fe:	42a6      	cmp	r6, r4
 8008800:	f43f af43 	beq.w	800868a <_dtoa_r+0x43a>
 8008804:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008808:	2200      	movs	r2, #0
 800880a:	4b53      	ldr	r3, [pc, #332]	@ (8008958 <_dtoa_r+0x708>)
 800880c:	f7f7 fe64 	bl	80004d8 <__aeabi_dmul>
 8008810:	2200      	movs	r2, #0
 8008812:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008816:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800881a:	4b4f      	ldr	r3, [pc, #316]	@ (8008958 <_dtoa_r+0x708>)
 800881c:	f7f7 fe5c 	bl	80004d8 <__aeabi_dmul>
 8008820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008824:	e7c4      	b.n	80087b0 <_dtoa_r+0x560>
 8008826:	4631      	mov	r1, r6
 8008828:	4628      	mov	r0, r5
 800882a:	f7f7 fe55 	bl	80004d8 <__aeabi_dmul>
 800882e:	4656      	mov	r6, sl
 8008830:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008834:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800883a:	f7f8 f8fd 	bl	8000a38 <__aeabi_d2iz>
 800883e:	4605      	mov	r5, r0
 8008840:	f7f7 fde0 	bl	8000404 <__aeabi_i2d>
 8008844:	4602      	mov	r2, r0
 8008846:	460b      	mov	r3, r1
 8008848:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800884c:	f7f7 fc8c 	bl	8000168 <__aeabi_dsub>
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	3530      	adds	r5, #48	@ 0x30
 8008856:	f806 5b01 	strb.w	r5, [r6], #1
 800885a:	42a6      	cmp	r6, r4
 800885c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008860:	f04f 0200 	mov.w	r2, #0
 8008864:	d124      	bne.n	80088b0 <_dtoa_r+0x660>
 8008866:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800886a:	4b39      	ldr	r3, [pc, #228]	@ (8008950 <_dtoa_r+0x700>)
 800886c:	f7f7 fc7e 	bl	800016c <__adddf3>
 8008870:	4602      	mov	r2, r0
 8008872:	460b      	mov	r3, r1
 8008874:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008878:	f7f8 f8be 	bl	80009f8 <__aeabi_dcmpgt>
 800887c:	2800      	cmp	r0, #0
 800887e:	d145      	bne.n	800890c <_dtoa_r+0x6bc>
 8008880:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008884:	2000      	movs	r0, #0
 8008886:	4932      	ldr	r1, [pc, #200]	@ (8008950 <_dtoa_r+0x700>)
 8008888:	f7f7 fc6e 	bl	8000168 <__aeabi_dsub>
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008894:	f7f8 f892 	bl	80009bc <__aeabi_dcmplt>
 8008898:	2800      	cmp	r0, #0
 800889a:	f43f aef6 	beq.w	800868a <_dtoa_r+0x43a>
 800889e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80088a0:	1e73      	subs	r3, r6, #1
 80088a2:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80088a8:	2b30      	cmp	r3, #48	@ 0x30
 80088aa:	d0f8      	beq.n	800889e <_dtoa_r+0x64e>
 80088ac:	9f04      	ldr	r7, [sp, #16]
 80088ae:	e73f      	b.n	8008730 <_dtoa_r+0x4e0>
 80088b0:	4b29      	ldr	r3, [pc, #164]	@ (8008958 <_dtoa_r+0x708>)
 80088b2:	f7f7 fe11 	bl	80004d8 <__aeabi_dmul>
 80088b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088ba:	e7bc      	b.n	8008836 <_dtoa_r+0x5e6>
 80088bc:	d10c      	bne.n	80088d8 <_dtoa_r+0x688>
 80088be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088c2:	2200      	movs	r2, #0
 80088c4:	4b25      	ldr	r3, [pc, #148]	@ (800895c <_dtoa_r+0x70c>)
 80088c6:	f7f7 fe07 	bl	80004d8 <__aeabi_dmul>
 80088ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088ce:	f7f8 f889 	bl	80009e4 <__aeabi_dcmpge>
 80088d2:	2800      	cmp	r0, #0
 80088d4:	f000 815b 	beq.w	8008b8e <_dtoa_r+0x93e>
 80088d8:	2400      	movs	r4, #0
 80088da:	4625      	mov	r5, r4
 80088dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80088de:	4656      	mov	r6, sl
 80088e0:	43db      	mvns	r3, r3
 80088e2:	9304      	str	r3, [sp, #16]
 80088e4:	2700      	movs	r7, #0
 80088e6:	4621      	mov	r1, r4
 80088e8:	4658      	mov	r0, fp
 80088ea:	f001 f8b9 	bl	8009a60 <_Bfree>
 80088ee:	2d00      	cmp	r5, #0
 80088f0:	d0dc      	beq.n	80088ac <_dtoa_r+0x65c>
 80088f2:	b12f      	cbz	r7, 8008900 <_dtoa_r+0x6b0>
 80088f4:	42af      	cmp	r7, r5
 80088f6:	d003      	beq.n	8008900 <_dtoa_r+0x6b0>
 80088f8:	4639      	mov	r1, r7
 80088fa:	4658      	mov	r0, fp
 80088fc:	f001 f8b0 	bl	8009a60 <_Bfree>
 8008900:	4629      	mov	r1, r5
 8008902:	4658      	mov	r0, fp
 8008904:	f001 f8ac 	bl	8009a60 <_Bfree>
 8008908:	e7d0      	b.n	80088ac <_dtoa_r+0x65c>
 800890a:	9704      	str	r7, [sp, #16]
 800890c:	4633      	mov	r3, r6
 800890e:	461e      	mov	r6, r3
 8008910:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008914:	2a39      	cmp	r2, #57	@ 0x39
 8008916:	d107      	bne.n	8008928 <_dtoa_r+0x6d8>
 8008918:	459a      	cmp	sl, r3
 800891a:	d1f8      	bne.n	800890e <_dtoa_r+0x6be>
 800891c:	9a04      	ldr	r2, [sp, #16]
 800891e:	3201      	adds	r2, #1
 8008920:	9204      	str	r2, [sp, #16]
 8008922:	2230      	movs	r2, #48	@ 0x30
 8008924:	f88a 2000 	strb.w	r2, [sl]
 8008928:	781a      	ldrb	r2, [r3, #0]
 800892a:	3201      	adds	r2, #1
 800892c:	701a      	strb	r2, [r3, #0]
 800892e:	e7bd      	b.n	80088ac <_dtoa_r+0x65c>
 8008930:	2200      	movs	r2, #0
 8008932:	4b09      	ldr	r3, [pc, #36]	@ (8008958 <_dtoa_r+0x708>)
 8008934:	f7f7 fdd0 	bl	80004d8 <__aeabi_dmul>
 8008938:	2200      	movs	r2, #0
 800893a:	2300      	movs	r3, #0
 800893c:	4604      	mov	r4, r0
 800893e:	460d      	mov	r5, r1
 8008940:	f7f8 f832 	bl	80009a8 <__aeabi_dcmpeq>
 8008944:	2800      	cmp	r0, #0
 8008946:	f43f aebc 	beq.w	80086c2 <_dtoa_r+0x472>
 800894a:	e6f1      	b.n	8008730 <_dtoa_r+0x4e0>
 800894c:	0800af80 	.word	0x0800af80
 8008950:	3fe00000 	.word	0x3fe00000
 8008954:	3ff00000 	.word	0x3ff00000
 8008958:	40240000 	.word	0x40240000
 800895c:	40140000 	.word	0x40140000
 8008960:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008962:	2a00      	cmp	r2, #0
 8008964:	f000 80db 	beq.w	8008b1e <_dtoa_r+0x8ce>
 8008968:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800896a:	2a01      	cmp	r2, #1
 800896c:	f300 80bf 	bgt.w	8008aee <_dtoa_r+0x89e>
 8008970:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008972:	2a00      	cmp	r2, #0
 8008974:	f000 80b7 	beq.w	8008ae6 <_dtoa_r+0x896>
 8008978:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800897c:	4646      	mov	r6, r8
 800897e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008980:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008982:	2101      	movs	r1, #1
 8008984:	441a      	add	r2, r3
 8008986:	4658      	mov	r0, fp
 8008988:	4498      	add	r8, r3
 800898a:	9209      	str	r2, [sp, #36]	@ 0x24
 800898c:	f001 f966 	bl	8009c5c <__i2b>
 8008990:	4605      	mov	r5, r0
 8008992:	b15e      	cbz	r6, 80089ac <_dtoa_r+0x75c>
 8008994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008996:	2b00      	cmp	r3, #0
 8008998:	dd08      	ble.n	80089ac <_dtoa_r+0x75c>
 800899a:	42b3      	cmp	r3, r6
 800899c:	bfa8      	it	ge
 800899e:	4633      	movge	r3, r6
 80089a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089a2:	eba8 0803 	sub.w	r8, r8, r3
 80089a6:	1af6      	subs	r6, r6, r3
 80089a8:	1ad3      	subs	r3, r2, r3
 80089aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80089ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089ae:	b1f3      	cbz	r3, 80089ee <_dtoa_r+0x79e>
 80089b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f000 80b7 	beq.w	8008b26 <_dtoa_r+0x8d6>
 80089b8:	b18c      	cbz	r4, 80089de <_dtoa_r+0x78e>
 80089ba:	4629      	mov	r1, r5
 80089bc:	4622      	mov	r2, r4
 80089be:	4658      	mov	r0, fp
 80089c0:	f001 fa0a 	bl	8009dd8 <__pow5mult>
 80089c4:	464a      	mov	r2, r9
 80089c6:	4601      	mov	r1, r0
 80089c8:	4605      	mov	r5, r0
 80089ca:	4658      	mov	r0, fp
 80089cc:	f001 f95c 	bl	8009c88 <__multiply>
 80089d0:	4649      	mov	r1, r9
 80089d2:	9004      	str	r0, [sp, #16]
 80089d4:	4658      	mov	r0, fp
 80089d6:	f001 f843 	bl	8009a60 <_Bfree>
 80089da:	9b04      	ldr	r3, [sp, #16]
 80089dc:	4699      	mov	r9, r3
 80089de:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089e0:	1b1a      	subs	r2, r3, r4
 80089e2:	d004      	beq.n	80089ee <_dtoa_r+0x79e>
 80089e4:	4649      	mov	r1, r9
 80089e6:	4658      	mov	r0, fp
 80089e8:	f001 f9f6 	bl	8009dd8 <__pow5mult>
 80089ec:	4681      	mov	r9, r0
 80089ee:	2101      	movs	r1, #1
 80089f0:	4658      	mov	r0, fp
 80089f2:	f001 f933 	bl	8009c5c <__i2b>
 80089f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089f8:	4604      	mov	r4, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f000 81c9 	beq.w	8008d92 <_dtoa_r+0xb42>
 8008a00:	461a      	mov	r2, r3
 8008a02:	4601      	mov	r1, r0
 8008a04:	4658      	mov	r0, fp
 8008a06:	f001 f9e7 	bl	8009dd8 <__pow5mult>
 8008a0a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	f300 808f 	bgt.w	8008b32 <_dtoa_r+0x8e2>
 8008a14:	9b02      	ldr	r3, [sp, #8]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	f040 8087 	bne.w	8008b2a <_dtoa_r+0x8da>
 8008a1c:	9b03      	ldr	r3, [sp, #12]
 8008a1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	f040 8083 	bne.w	8008b2e <_dtoa_r+0x8de>
 8008a28:	9b03      	ldr	r3, [sp, #12]
 8008a2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a2e:	0d1b      	lsrs	r3, r3, #20
 8008a30:	051b      	lsls	r3, r3, #20
 8008a32:	b12b      	cbz	r3, 8008a40 <_dtoa_r+0x7f0>
 8008a34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a36:	f108 0801 	add.w	r8, r8, #1
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a3e:	2301      	movs	r3, #1
 8008a40:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f000 81aa 	beq.w	8008d9e <_dtoa_r+0xb4e>
 8008a4a:	6923      	ldr	r3, [r4, #16]
 8008a4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008a50:	6918      	ldr	r0, [r3, #16]
 8008a52:	f001 f8b7 	bl	8009bc4 <__hi0bits>
 8008a56:	f1c0 0020 	rsb	r0, r0, #32
 8008a5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a5c:	4418      	add	r0, r3
 8008a5e:	f010 001f 	ands.w	r0, r0, #31
 8008a62:	d071      	beq.n	8008b48 <_dtoa_r+0x8f8>
 8008a64:	f1c0 0320 	rsb	r3, r0, #32
 8008a68:	2b04      	cmp	r3, #4
 8008a6a:	dd65      	ble.n	8008b38 <_dtoa_r+0x8e8>
 8008a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a6e:	f1c0 001c 	rsb	r0, r0, #28
 8008a72:	4403      	add	r3, r0
 8008a74:	4480      	add	r8, r0
 8008a76:	4406      	add	r6, r0
 8008a78:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a7a:	f1b8 0f00 	cmp.w	r8, #0
 8008a7e:	dd05      	ble.n	8008a8c <_dtoa_r+0x83c>
 8008a80:	4649      	mov	r1, r9
 8008a82:	4642      	mov	r2, r8
 8008a84:	4658      	mov	r0, fp
 8008a86:	f001 fa01 	bl	8009e8c <__lshift>
 8008a8a:	4681      	mov	r9, r0
 8008a8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	dd05      	ble.n	8008a9e <_dtoa_r+0x84e>
 8008a92:	4621      	mov	r1, r4
 8008a94:	461a      	mov	r2, r3
 8008a96:	4658      	mov	r0, fp
 8008a98:	f001 f9f8 	bl	8009e8c <__lshift>
 8008a9c:	4604      	mov	r4, r0
 8008a9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d053      	beq.n	8008b4c <_dtoa_r+0x8fc>
 8008aa4:	4621      	mov	r1, r4
 8008aa6:	4648      	mov	r0, r9
 8008aa8:	f001 fa5c 	bl	8009f64 <__mcmp>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	da4d      	bge.n	8008b4c <_dtoa_r+0x8fc>
 8008ab0:	1e7b      	subs	r3, r7, #1
 8008ab2:	4649      	mov	r1, r9
 8008ab4:	9304      	str	r3, [sp, #16]
 8008ab6:	220a      	movs	r2, #10
 8008ab8:	2300      	movs	r3, #0
 8008aba:	4658      	mov	r0, fp
 8008abc:	f000 fff2 	bl	8009aa4 <__multadd>
 8008ac0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ac2:	4681      	mov	r9, r0
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f000 816c 	beq.w	8008da2 <_dtoa_r+0xb52>
 8008aca:	2300      	movs	r3, #0
 8008acc:	4629      	mov	r1, r5
 8008ace:	220a      	movs	r2, #10
 8008ad0:	4658      	mov	r0, fp
 8008ad2:	f000 ffe7 	bl	8009aa4 <__multadd>
 8008ad6:	9b08      	ldr	r3, [sp, #32]
 8008ad8:	4605      	mov	r5, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	dc61      	bgt.n	8008ba2 <_dtoa_r+0x952>
 8008ade:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008ae0:	2b02      	cmp	r3, #2
 8008ae2:	dc3b      	bgt.n	8008b5c <_dtoa_r+0x90c>
 8008ae4:	e05d      	b.n	8008ba2 <_dtoa_r+0x952>
 8008ae6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008ae8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008aec:	e746      	b.n	800897c <_dtoa_r+0x72c>
 8008aee:	9b07      	ldr	r3, [sp, #28]
 8008af0:	1e5c      	subs	r4, r3, #1
 8008af2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008af4:	42a3      	cmp	r3, r4
 8008af6:	bfbf      	itttt	lt
 8008af8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008afa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008afc:	1ae3      	sublt	r3, r4, r3
 8008afe:	18d2      	addlt	r2, r2, r3
 8008b00:	bfa8      	it	ge
 8008b02:	1b1c      	subge	r4, r3, r4
 8008b04:	9b07      	ldr	r3, [sp, #28]
 8008b06:	bfbe      	ittt	lt
 8008b08:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008b0a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008b0c:	2400      	movlt	r4, #0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	bfb5      	itete	lt
 8008b12:	eba8 0603 	sublt.w	r6, r8, r3
 8008b16:	4646      	movge	r6, r8
 8008b18:	2300      	movlt	r3, #0
 8008b1a:	9b07      	ldrge	r3, [sp, #28]
 8008b1c:	e730      	b.n	8008980 <_dtoa_r+0x730>
 8008b1e:	4646      	mov	r6, r8
 8008b20:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008b22:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008b24:	e735      	b.n	8008992 <_dtoa_r+0x742>
 8008b26:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008b28:	e75c      	b.n	80089e4 <_dtoa_r+0x794>
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	e788      	b.n	8008a40 <_dtoa_r+0x7f0>
 8008b2e:	9b02      	ldr	r3, [sp, #8]
 8008b30:	e786      	b.n	8008a40 <_dtoa_r+0x7f0>
 8008b32:	2300      	movs	r3, #0
 8008b34:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b36:	e788      	b.n	8008a4a <_dtoa_r+0x7fa>
 8008b38:	d09f      	beq.n	8008a7a <_dtoa_r+0x82a>
 8008b3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b3c:	331c      	adds	r3, #28
 8008b3e:	441a      	add	r2, r3
 8008b40:	4498      	add	r8, r3
 8008b42:	441e      	add	r6, r3
 8008b44:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b46:	e798      	b.n	8008a7a <_dtoa_r+0x82a>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	e7f6      	b.n	8008b3a <_dtoa_r+0x8ea>
 8008b4c:	9b07      	ldr	r3, [sp, #28]
 8008b4e:	9704      	str	r7, [sp, #16]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	dc20      	bgt.n	8008b96 <_dtoa_r+0x946>
 8008b54:	9308      	str	r3, [sp, #32]
 8008b56:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008b58:	2b02      	cmp	r3, #2
 8008b5a:	dd1e      	ble.n	8008b9a <_dtoa_r+0x94a>
 8008b5c:	9b08      	ldr	r3, [sp, #32]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	f47f aebc 	bne.w	80088dc <_dtoa_r+0x68c>
 8008b64:	4621      	mov	r1, r4
 8008b66:	2205      	movs	r2, #5
 8008b68:	4658      	mov	r0, fp
 8008b6a:	f000 ff9b 	bl	8009aa4 <__multadd>
 8008b6e:	4601      	mov	r1, r0
 8008b70:	4604      	mov	r4, r0
 8008b72:	4648      	mov	r0, r9
 8008b74:	f001 f9f6 	bl	8009f64 <__mcmp>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	f77f aeaf 	ble.w	80088dc <_dtoa_r+0x68c>
 8008b7e:	2331      	movs	r3, #49	@ 0x31
 8008b80:	4656      	mov	r6, sl
 8008b82:	f806 3b01 	strb.w	r3, [r6], #1
 8008b86:	9b04      	ldr	r3, [sp, #16]
 8008b88:	3301      	adds	r3, #1
 8008b8a:	9304      	str	r3, [sp, #16]
 8008b8c:	e6aa      	b.n	80088e4 <_dtoa_r+0x694>
 8008b8e:	9c07      	ldr	r4, [sp, #28]
 8008b90:	9704      	str	r7, [sp, #16]
 8008b92:	4625      	mov	r5, r4
 8008b94:	e7f3      	b.n	8008b7e <_dtoa_r+0x92e>
 8008b96:	9b07      	ldr	r3, [sp, #28]
 8008b98:	9308      	str	r3, [sp, #32]
 8008b9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f000 8104 	beq.w	8008daa <_dtoa_r+0xb5a>
 8008ba2:	2e00      	cmp	r6, #0
 8008ba4:	dd05      	ble.n	8008bb2 <_dtoa_r+0x962>
 8008ba6:	4629      	mov	r1, r5
 8008ba8:	4632      	mov	r2, r6
 8008baa:	4658      	mov	r0, fp
 8008bac:	f001 f96e 	bl	8009e8c <__lshift>
 8008bb0:	4605      	mov	r5, r0
 8008bb2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d05a      	beq.n	8008c6e <_dtoa_r+0xa1e>
 8008bb8:	4658      	mov	r0, fp
 8008bba:	6869      	ldr	r1, [r5, #4]
 8008bbc:	f000 ff10 	bl	80099e0 <_Balloc>
 8008bc0:	4606      	mov	r6, r0
 8008bc2:	b928      	cbnz	r0, 8008bd0 <_dtoa_r+0x980>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008bca:	4b83      	ldr	r3, [pc, #524]	@ (8008dd8 <_dtoa_r+0xb88>)
 8008bcc:	f7ff bb54 	b.w	8008278 <_dtoa_r+0x28>
 8008bd0:	692a      	ldr	r2, [r5, #16]
 8008bd2:	f105 010c 	add.w	r1, r5, #12
 8008bd6:	3202      	adds	r2, #2
 8008bd8:	0092      	lsls	r2, r2, #2
 8008bda:	300c      	adds	r0, #12
 8008bdc:	f7ff fa95 	bl	800810a <memcpy>
 8008be0:	2201      	movs	r2, #1
 8008be2:	4631      	mov	r1, r6
 8008be4:	4658      	mov	r0, fp
 8008be6:	f001 f951 	bl	8009e8c <__lshift>
 8008bea:	462f      	mov	r7, r5
 8008bec:	4605      	mov	r5, r0
 8008bee:	f10a 0301 	add.w	r3, sl, #1
 8008bf2:	9307      	str	r3, [sp, #28]
 8008bf4:	9b08      	ldr	r3, [sp, #32]
 8008bf6:	4453      	add	r3, sl
 8008bf8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008bfa:	9b02      	ldr	r3, [sp, #8]
 8008bfc:	f003 0301 	and.w	r3, r3, #1
 8008c00:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c02:	9b07      	ldr	r3, [sp, #28]
 8008c04:	4621      	mov	r1, r4
 8008c06:	3b01      	subs	r3, #1
 8008c08:	4648      	mov	r0, r9
 8008c0a:	9302      	str	r3, [sp, #8]
 8008c0c:	f7ff fa96 	bl	800813c <quorem>
 8008c10:	4639      	mov	r1, r7
 8008c12:	9008      	str	r0, [sp, #32]
 8008c14:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008c18:	4648      	mov	r0, r9
 8008c1a:	f001 f9a3 	bl	8009f64 <__mcmp>
 8008c1e:	462a      	mov	r2, r5
 8008c20:	9009      	str	r0, [sp, #36]	@ 0x24
 8008c22:	4621      	mov	r1, r4
 8008c24:	4658      	mov	r0, fp
 8008c26:	f001 f9b9 	bl	8009f9c <__mdiff>
 8008c2a:	68c2      	ldr	r2, [r0, #12]
 8008c2c:	4606      	mov	r6, r0
 8008c2e:	bb02      	cbnz	r2, 8008c72 <_dtoa_r+0xa22>
 8008c30:	4601      	mov	r1, r0
 8008c32:	4648      	mov	r0, r9
 8008c34:	f001 f996 	bl	8009f64 <__mcmp>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	4631      	mov	r1, r6
 8008c3c:	4658      	mov	r0, fp
 8008c3e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008c40:	f000 ff0e 	bl	8009a60 <_Bfree>
 8008c44:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008c46:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008c48:	9e07      	ldr	r6, [sp, #28]
 8008c4a:	ea43 0102 	orr.w	r1, r3, r2
 8008c4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c50:	4319      	orrs	r1, r3
 8008c52:	d110      	bne.n	8008c76 <_dtoa_r+0xa26>
 8008c54:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008c58:	d029      	beq.n	8008cae <_dtoa_r+0xa5e>
 8008c5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	dd02      	ble.n	8008c66 <_dtoa_r+0xa16>
 8008c60:	9b08      	ldr	r3, [sp, #32]
 8008c62:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008c66:	9b02      	ldr	r3, [sp, #8]
 8008c68:	f883 8000 	strb.w	r8, [r3]
 8008c6c:	e63b      	b.n	80088e6 <_dtoa_r+0x696>
 8008c6e:	4628      	mov	r0, r5
 8008c70:	e7bb      	b.n	8008bea <_dtoa_r+0x99a>
 8008c72:	2201      	movs	r2, #1
 8008c74:	e7e1      	b.n	8008c3a <_dtoa_r+0x9ea>
 8008c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	db04      	blt.n	8008c86 <_dtoa_r+0xa36>
 8008c7c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008c7e:	430b      	orrs	r3, r1
 8008c80:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c82:	430b      	orrs	r3, r1
 8008c84:	d120      	bne.n	8008cc8 <_dtoa_r+0xa78>
 8008c86:	2a00      	cmp	r2, #0
 8008c88:	dded      	ble.n	8008c66 <_dtoa_r+0xa16>
 8008c8a:	4649      	mov	r1, r9
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	4658      	mov	r0, fp
 8008c90:	f001 f8fc 	bl	8009e8c <__lshift>
 8008c94:	4621      	mov	r1, r4
 8008c96:	4681      	mov	r9, r0
 8008c98:	f001 f964 	bl	8009f64 <__mcmp>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	dc03      	bgt.n	8008ca8 <_dtoa_r+0xa58>
 8008ca0:	d1e1      	bne.n	8008c66 <_dtoa_r+0xa16>
 8008ca2:	f018 0f01 	tst.w	r8, #1
 8008ca6:	d0de      	beq.n	8008c66 <_dtoa_r+0xa16>
 8008ca8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008cac:	d1d8      	bne.n	8008c60 <_dtoa_r+0xa10>
 8008cae:	2339      	movs	r3, #57	@ 0x39
 8008cb0:	9a02      	ldr	r2, [sp, #8]
 8008cb2:	7013      	strb	r3, [r2, #0]
 8008cb4:	4633      	mov	r3, r6
 8008cb6:	461e      	mov	r6, r3
 8008cb8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	2a39      	cmp	r2, #57	@ 0x39
 8008cc0:	d052      	beq.n	8008d68 <_dtoa_r+0xb18>
 8008cc2:	3201      	adds	r2, #1
 8008cc4:	701a      	strb	r2, [r3, #0]
 8008cc6:	e60e      	b.n	80088e6 <_dtoa_r+0x696>
 8008cc8:	2a00      	cmp	r2, #0
 8008cca:	dd07      	ble.n	8008cdc <_dtoa_r+0xa8c>
 8008ccc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008cd0:	d0ed      	beq.n	8008cae <_dtoa_r+0xa5e>
 8008cd2:	9a02      	ldr	r2, [sp, #8]
 8008cd4:	f108 0301 	add.w	r3, r8, #1
 8008cd8:	7013      	strb	r3, [r2, #0]
 8008cda:	e604      	b.n	80088e6 <_dtoa_r+0x696>
 8008cdc:	9b07      	ldr	r3, [sp, #28]
 8008cde:	9a07      	ldr	r2, [sp, #28]
 8008ce0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008ce4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ce6:	4293      	cmp	r3, r2
 8008ce8:	d028      	beq.n	8008d3c <_dtoa_r+0xaec>
 8008cea:	4649      	mov	r1, r9
 8008cec:	2300      	movs	r3, #0
 8008cee:	220a      	movs	r2, #10
 8008cf0:	4658      	mov	r0, fp
 8008cf2:	f000 fed7 	bl	8009aa4 <__multadd>
 8008cf6:	42af      	cmp	r7, r5
 8008cf8:	4681      	mov	r9, r0
 8008cfa:	f04f 0300 	mov.w	r3, #0
 8008cfe:	f04f 020a 	mov.w	r2, #10
 8008d02:	4639      	mov	r1, r7
 8008d04:	4658      	mov	r0, fp
 8008d06:	d107      	bne.n	8008d18 <_dtoa_r+0xac8>
 8008d08:	f000 fecc 	bl	8009aa4 <__multadd>
 8008d0c:	4607      	mov	r7, r0
 8008d0e:	4605      	mov	r5, r0
 8008d10:	9b07      	ldr	r3, [sp, #28]
 8008d12:	3301      	adds	r3, #1
 8008d14:	9307      	str	r3, [sp, #28]
 8008d16:	e774      	b.n	8008c02 <_dtoa_r+0x9b2>
 8008d18:	f000 fec4 	bl	8009aa4 <__multadd>
 8008d1c:	4629      	mov	r1, r5
 8008d1e:	4607      	mov	r7, r0
 8008d20:	2300      	movs	r3, #0
 8008d22:	220a      	movs	r2, #10
 8008d24:	4658      	mov	r0, fp
 8008d26:	f000 febd 	bl	8009aa4 <__multadd>
 8008d2a:	4605      	mov	r5, r0
 8008d2c:	e7f0      	b.n	8008d10 <_dtoa_r+0xac0>
 8008d2e:	9b08      	ldr	r3, [sp, #32]
 8008d30:	2700      	movs	r7, #0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	bfcc      	ite	gt
 8008d36:	461e      	movgt	r6, r3
 8008d38:	2601      	movle	r6, #1
 8008d3a:	4456      	add	r6, sl
 8008d3c:	4649      	mov	r1, r9
 8008d3e:	2201      	movs	r2, #1
 8008d40:	4658      	mov	r0, fp
 8008d42:	f001 f8a3 	bl	8009e8c <__lshift>
 8008d46:	4621      	mov	r1, r4
 8008d48:	4681      	mov	r9, r0
 8008d4a:	f001 f90b 	bl	8009f64 <__mcmp>
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	dcb0      	bgt.n	8008cb4 <_dtoa_r+0xa64>
 8008d52:	d102      	bne.n	8008d5a <_dtoa_r+0xb0a>
 8008d54:	f018 0f01 	tst.w	r8, #1
 8008d58:	d1ac      	bne.n	8008cb4 <_dtoa_r+0xa64>
 8008d5a:	4633      	mov	r3, r6
 8008d5c:	461e      	mov	r6, r3
 8008d5e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d62:	2a30      	cmp	r2, #48	@ 0x30
 8008d64:	d0fa      	beq.n	8008d5c <_dtoa_r+0xb0c>
 8008d66:	e5be      	b.n	80088e6 <_dtoa_r+0x696>
 8008d68:	459a      	cmp	sl, r3
 8008d6a:	d1a4      	bne.n	8008cb6 <_dtoa_r+0xa66>
 8008d6c:	9b04      	ldr	r3, [sp, #16]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	9304      	str	r3, [sp, #16]
 8008d72:	2331      	movs	r3, #49	@ 0x31
 8008d74:	f88a 3000 	strb.w	r3, [sl]
 8008d78:	e5b5      	b.n	80088e6 <_dtoa_r+0x696>
 8008d7a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008d7c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008ddc <_dtoa_r+0xb8c>
 8008d80:	b11b      	cbz	r3, 8008d8a <_dtoa_r+0xb3a>
 8008d82:	f10a 0308 	add.w	r3, sl, #8
 8008d86:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008d88:	6013      	str	r3, [r2, #0]
 8008d8a:	4650      	mov	r0, sl
 8008d8c:	b017      	add	sp, #92	@ 0x5c
 8008d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d92:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008d94:	2b01      	cmp	r3, #1
 8008d96:	f77f ae3d 	ble.w	8008a14 <_dtoa_r+0x7c4>
 8008d9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d9c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d9e:	2001      	movs	r0, #1
 8008da0:	e65b      	b.n	8008a5a <_dtoa_r+0x80a>
 8008da2:	9b08      	ldr	r3, [sp, #32]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	f77f aed6 	ble.w	8008b56 <_dtoa_r+0x906>
 8008daa:	4656      	mov	r6, sl
 8008dac:	4621      	mov	r1, r4
 8008dae:	4648      	mov	r0, r9
 8008db0:	f7ff f9c4 	bl	800813c <quorem>
 8008db4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008db8:	9b08      	ldr	r3, [sp, #32]
 8008dba:	f806 8b01 	strb.w	r8, [r6], #1
 8008dbe:	eba6 020a 	sub.w	r2, r6, sl
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	ddb3      	ble.n	8008d2e <_dtoa_r+0xade>
 8008dc6:	4649      	mov	r1, r9
 8008dc8:	2300      	movs	r3, #0
 8008dca:	220a      	movs	r2, #10
 8008dcc:	4658      	mov	r0, fp
 8008dce:	f000 fe69 	bl	8009aa4 <__multadd>
 8008dd2:	4681      	mov	r9, r0
 8008dd4:	e7ea      	b.n	8008dac <_dtoa_r+0xb5c>
 8008dd6:	bf00      	nop
 8008dd8:	0800ae6d 	.word	0x0800ae6d
 8008ddc:	0800adf1 	.word	0x0800adf1

08008de0 <rshift>:
 8008de0:	6903      	ldr	r3, [r0, #16]
 8008de2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008de6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008dea:	f100 0414 	add.w	r4, r0, #20
 8008dee:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008df2:	dd46      	ble.n	8008e82 <rshift+0xa2>
 8008df4:	f011 011f 	ands.w	r1, r1, #31
 8008df8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008dfc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008e00:	d10c      	bne.n	8008e1c <rshift+0x3c>
 8008e02:	4629      	mov	r1, r5
 8008e04:	f100 0710 	add.w	r7, r0, #16
 8008e08:	42b1      	cmp	r1, r6
 8008e0a:	d335      	bcc.n	8008e78 <rshift+0x98>
 8008e0c:	1a9b      	subs	r3, r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	1eea      	subs	r2, r5, #3
 8008e12:	4296      	cmp	r6, r2
 8008e14:	bf38      	it	cc
 8008e16:	2300      	movcc	r3, #0
 8008e18:	4423      	add	r3, r4
 8008e1a:	e015      	b.n	8008e48 <rshift+0x68>
 8008e1c:	46a1      	mov	r9, r4
 8008e1e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008e22:	f1c1 0820 	rsb	r8, r1, #32
 8008e26:	40cf      	lsrs	r7, r1
 8008e28:	f105 0e04 	add.w	lr, r5, #4
 8008e2c:	4576      	cmp	r6, lr
 8008e2e:	46f4      	mov	ip, lr
 8008e30:	d816      	bhi.n	8008e60 <rshift+0x80>
 8008e32:	1a9a      	subs	r2, r3, r2
 8008e34:	0092      	lsls	r2, r2, #2
 8008e36:	3a04      	subs	r2, #4
 8008e38:	3501      	adds	r5, #1
 8008e3a:	42ae      	cmp	r6, r5
 8008e3c:	bf38      	it	cc
 8008e3e:	2200      	movcc	r2, #0
 8008e40:	18a3      	adds	r3, r4, r2
 8008e42:	50a7      	str	r7, [r4, r2]
 8008e44:	b107      	cbz	r7, 8008e48 <rshift+0x68>
 8008e46:	3304      	adds	r3, #4
 8008e48:	42a3      	cmp	r3, r4
 8008e4a:	eba3 0204 	sub.w	r2, r3, r4
 8008e4e:	bf08      	it	eq
 8008e50:	2300      	moveq	r3, #0
 8008e52:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008e56:	6102      	str	r2, [r0, #16]
 8008e58:	bf08      	it	eq
 8008e5a:	6143      	streq	r3, [r0, #20]
 8008e5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e60:	f8dc c000 	ldr.w	ip, [ip]
 8008e64:	fa0c fc08 	lsl.w	ip, ip, r8
 8008e68:	ea4c 0707 	orr.w	r7, ip, r7
 8008e6c:	f849 7b04 	str.w	r7, [r9], #4
 8008e70:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008e74:	40cf      	lsrs	r7, r1
 8008e76:	e7d9      	b.n	8008e2c <rshift+0x4c>
 8008e78:	f851 cb04 	ldr.w	ip, [r1], #4
 8008e7c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008e80:	e7c2      	b.n	8008e08 <rshift+0x28>
 8008e82:	4623      	mov	r3, r4
 8008e84:	e7e0      	b.n	8008e48 <rshift+0x68>

08008e86 <__hexdig_fun>:
 8008e86:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008e8a:	2b09      	cmp	r3, #9
 8008e8c:	d802      	bhi.n	8008e94 <__hexdig_fun+0xe>
 8008e8e:	3820      	subs	r0, #32
 8008e90:	b2c0      	uxtb	r0, r0
 8008e92:	4770      	bx	lr
 8008e94:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008e98:	2b05      	cmp	r3, #5
 8008e9a:	d801      	bhi.n	8008ea0 <__hexdig_fun+0x1a>
 8008e9c:	3847      	subs	r0, #71	@ 0x47
 8008e9e:	e7f7      	b.n	8008e90 <__hexdig_fun+0xa>
 8008ea0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008ea4:	2b05      	cmp	r3, #5
 8008ea6:	d801      	bhi.n	8008eac <__hexdig_fun+0x26>
 8008ea8:	3827      	subs	r0, #39	@ 0x27
 8008eaa:	e7f1      	b.n	8008e90 <__hexdig_fun+0xa>
 8008eac:	2000      	movs	r0, #0
 8008eae:	4770      	bx	lr

08008eb0 <__gethex>:
 8008eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb4:	468a      	mov	sl, r1
 8008eb6:	4690      	mov	r8, r2
 8008eb8:	b085      	sub	sp, #20
 8008eba:	9302      	str	r3, [sp, #8]
 8008ebc:	680b      	ldr	r3, [r1, #0]
 8008ebe:	9001      	str	r0, [sp, #4]
 8008ec0:	1c9c      	adds	r4, r3, #2
 8008ec2:	46a1      	mov	r9, r4
 8008ec4:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008ec8:	2830      	cmp	r0, #48	@ 0x30
 8008eca:	d0fa      	beq.n	8008ec2 <__gethex+0x12>
 8008ecc:	eba9 0303 	sub.w	r3, r9, r3
 8008ed0:	f1a3 0b02 	sub.w	fp, r3, #2
 8008ed4:	f7ff ffd7 	bl	8008e86 <__hexdig_fun>
 8008ed8:	4605      	mov	r5, r0
 8008eda:	2800      	cmp	r0, #0
 8008edc:	d168      	bne.n	8008fb0 <__gethex+0x100>
 8008ede:	2201      	movs	r2, #1
 8008ee0:	4648      	mov	r0, r9
 8008ee2:	499f      	ldr	r1, [pc, #636]	@ (8009160 <__gethex+0x2b0>)
 8008ee4:	f7ff f8b8 	bl	8008058 <strncmp>
 8008ee8:	4607      	mov	r7, r0
 8008eea:	2800      	cmp	r0, #0
 8008eec:	d167      	bne.n	8008fbe <__gethex+0x10e>
 8008eee:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008ef2:	4626      	mov	r6, r4
 8008ef4:	f7ff ffc7 	bl	8008e86 <__hexdig_fun>
 8008ef8:	2800      	cmp	r0, #0
 8008efa:	d062      	beq.n	8008fc2 <__gethex+0x112>
 8008efc:	4623      	mov	r3, r4
 8008efe:	7818      	ldrb	r0, [r3, #0]
 8008f00:	4699      	mov	r9, r3
 8008f02:	2830      	cmp	r0, #48	@ 0x30
 8008f04:	f103 0301 	add.w	r3, r3, #1
 8008f08:	d0f9      	beq.n	8008efe <__gethex+0x4e>
 8008f0a:	f7ff ffbc 	bl	8008e86 <__hexdig_fun>
 8008f0e:	fab0 f580 	clz	r5, r0
 8008f12:	f04f 0b01 	mov.w	fp, #1
 8008f16:	096d      	lsrs	r5, r5, #5
 8008f18:	464a      	mov	r2, r9
 8008f1a:	4616      	mov	r6, r2
 8008f1c:	7830      	ldrb	r0, [r6, #0]
 8008f1e:	3201      	adds	r2, #1
 8008f20:	f7ff ffb1 	bl	8008e86 <__hexdig_fun>
 8008f24:	2800      	cmp	r0, #0
 8008f26:	d1f8      	bne.n	8008f1a <__gethex+0x6a>
 8008f28:	2201      	movs	r2, #1
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	498c      	ldr	r1, [pc, #560]	@ (8009160 <__gethex+0x2b0>)
 8008f2e:	f7ff f893 	bl	8008058 <strncmp>
 8008f32:	2800      	cmp	r0, #0
 8008f34:	d13f      	bne.n	8008fb6 <__gethex+0x106>
 8008f36:	b944      	cbnz	r4, 8008f4a <__gethex+0x9a>
 8008f38:	1c74      	adds	r4, r6, #1
 8008f3a:	4622      	mov	r2, r4
 8008f3c:	4616      	mov	r6, r2
 8008f3e:	7830      	ldrb	r0, [r6, #0]
 8008f40:	3201      	adds	r2, #1
 8008f42:	f7ff ffa0 	bl	8008e86 <__hexdig_fun>
 8008f46:	2800      	cmp	r0, #0
 8008f48:	d1f8      	bne.n	8008f3c <__gethex+0x8c>
 8008f4a:	1ba4      	subs	r4, r4, r6
 8008f4c:	00a7      	lsls	r7, r4, #2
 8008f4e:	7833      	ldrb	r3, [r6, #0]
 8008f50:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008f54:	2b50      	cmp	r3, #80	@ 0x50
 8008f56:	d13e      	bne.n	8008fd6 <__gethex+0x126>
 8008f58:	7873      	ldrb	r3, [r6, #1]
 8008f5a:	2b2b      	cmp	r3, #43	@ 0x2b
 8008f5c:	d033      	beq.n	8008fc6 <__gethex+0x116>
 8008f5e:	2b2d      	cmp	r3, #45	@ 0x2d
 8008f60:	d034      	beq.n	8008fcc <__gethex+0x11c>
 8008f62:	2400      	movs	r4, #0
 8008f64:	1c71      	adds	r1, r6, #1
 8008f66:	7808      	ldrb	r0, [r1, #0]
 8008f68:	f7ff ff8d 	bl	8008e86 <__hexdig_fun>
 8008f6c:	1e43      	subs	r3, r0, #1
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	2b18      	cmp	r3, #24
 8008f72:	d830      	bhi.n	8008fd6 <__gethex+0x126>
 8008f74:	f1a0 0210 	sub.w	r2, r0, #16
 8008f78:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f7c:	f7ff ff83 	bl	8008e86 <__hexdig_fun>
 8008f80:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8008f84:	fa5f fc8c 	uxtb.w	ip, ip
 8008f88:	f1bc 0f18 	cmp.w	ip, #24
 8008f8c:	f04f 030a 	mov.w	r3, #10
 8008f90:	d91e      	bls.n	8008fd0 <__gethex+0x120>
 8008f92:	b104      	cbz	r4, 8008f96 <__gethex+0xe6>
 8008f94:	4252      	negs	r2, r2
 8008f96:	4417      	add	r7, r2
 8008f98:	f8ca 1000 	str.w	r1, [sl]
 8008f9c:	b1ed      	cbz	r5, 8008fda <__gethex+0x12a>
 8008f9e:	f1bb 0f00 	cmp.w	fp, #0
 8008fa2:	bf0c      	ite	eq
 8008fa4:	2506      	moveq	r5, #6
 8008fa6:	2500      	movne	r5, #0
 8008fa8:	4628      	mov	r0, r5
 8008faa:	b005      	add	sp, #20
 8008fac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fb0:	2500      	movs	r5, #0
 8008fb2:	462c      	mov	r4, r5
 8008fb4:	e7b0      	b.n	8008f18 <__gethex+0x68>
 8008fb6:	2c00      	cmp	r4, #0
 8008fb8:	d1c7      	bne.n	8008f4a <__gethex+0x9a>
 8008fba:	4627      	mov	r7, r4
 8008fbc:	e7c7      	b.n	8008f4e <__gethex+0x9e>
 8008fbe:	464e      	mov	r6, r9
 8008fc0:	462f      	mov	r7, r5
 8008fc2:	2501      	movs	r5, #1
 8008fc4:	e7c3      	b.n	8008f4e <__gethex+0x9e>
 8008fc6:	2400      	movs	r4, #0
 8008fc8:	1cb1      	adds	r1, r6, #2
 8008fca:	e7cc      	b.n	8008f66 <__gethex+0xb6>
 8008fcc:	2401      	movs	r4, #1
 8008fce:	e7fb      	b.n	8008fc8 <__gethex+0x118>
 8008fd0:	fb03 0002 	mla	r0, r3, r2, r0
 8008fd4:	e7ce      	b.n	8008f74 <__gethex+0xc4>
 8008fd6:	4631      	mov	r1, r6
 8008fd8:	e7de      	b.n	8008f98 <__gethex+0xe8>
 8008fda:	4629      	mov	r1, r5
 8008fdc:	eba6 0309 	sub.w	r3, r6, r9
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	2b07      	cmp	r3, #7
 8008fe4:	dc0a      	bgt.n	8008ffc <__gethex+0x14c>
 8008fe6:	9801      	ldr	r0, [sp, #4]
 8008fe8:	f000 fcfa 	bl	80099e0 <_Balloc>
 8008fec:	4604      	mov	r4, r0
 8008fee:	b940      	cbnz	r0, 8009002 <__gethex+0x152>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	21e4      	movs	r1, #228	@ 0xe4
 8008ff4:	4b5b      	ldr	r3, [pc, #364]	@ (8009164 <__gethex+0x2b4>)
 8008ff6:	485c      	ldr	r0, [pc, #368]	@ (8009168 <__gethex+0x2b8>)
 8008ff8:	f001 fa86 	bl	800a508 <__assert_func>
 8008ffc:	3101      	adds	r1, #1
 8008ffe:	105b      	asrs	r3, r3, #1
 8009000:	e7ef      	b.n	8008fe2 <__gethex+0x132>
 8009002:	2300      	movs	r3, #0
 8009004:	f100 0a14 	add.w	sl, r0, #20
 8009008:	4655      	mov	r5, sl
 800900a:	469b      	mov	fp, r3
 800900c:	45b1      	cmp	r9, r6
 800900e:	d337      	bcc.n	8009080 <__gethex+0x1d0>
 8009010:	f845 bb04 	str.w	fp, [r5], #4
 8009014:	eba5 050a 	sub.w	r5, r5, sl
 8009018:	10ad      	asrs	r5, r5, #2
 800901a:	6125      	str	r5, [r4, #16]
 800901c:	4658      	mov	r0, fp
 800901e:	f000 fdd1 	bl	8009bc4 <__hi0bits>
 8009022:	016d      	lsls	r5, r5, #5
 8009024:	f8d8 6000 	ldr.w	r6, [r8]
 8009028:	1a2d      	subs	r5, r5, r0
 800902a:	42b5      	cmp	r5, r6
 800902c:	dd54      	ble.n	80090d8 <__gethex+0x228>
 800902e:	1bad      	subs	r5, r5, r6
 8009030:	4629      	mov	r1, r5
 8009032:	4620      	mov	r0, r4
 8009034:	f001 f959 	bl	800a2ea <__any_on>
 8009038:	4681      	mov	r9, r0
 800903a:	b178      	cbz	r0, 800905c <__gethex+0x1ac>
 800903c:	f04f 0901 	mov.w	r9, #1
 8009040:	1e6b      	subs	r3, r5, #1
 8009042:	1159      	asrs	r1, r3, #5
 8009044:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009048:	f003 021f 	and.w	r2, r3, #31
 800904c:	fa09 f202 	lsl.w	r2, r9, r2
 8009050:	420a      	tst	r2, r1
 8009052:	d003      	beq.n	800905c <__gethex+0x1ac>
 8009054:	454b      	cmp	r3, r9
 8009056:	dc36      	bgt.n	80090c6 <__gethex+0x216>
 8009058:	f04f 0902 	mov.w	r9, #2
 800905c:	4629      	mov	r1, r5
 800905e:	4620      	mov	r0, r4
 8009060:	f7ff febe 	bl	8008de0 <rshift>
 8009064:	442f      	add	r7, r5
 8009066:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800906a:	42bb      	cmp	r3, r7
 800906c:	da42      	bge.n	80090f4 <__gethex+0x244>
 800906e:	4621      	mov	r1, r4
 8009070:	9801      	ldr	r0, [sp, #4]
 8009072:	f000 fcf5 	bl	8009a60 <_Bfree>
 8009076:	2300      	movs	r3, #0
 8009078:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800907a:	25a3      	movs	r5, #163	@ 0xa3
 800907c:	6013      	str	r3, [r2, #0]
 800907e:	e793      	b.n	8008fa8 <__gethex+0xf8>
 8009080:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009084:	2a2e      	cmp	r2, #46	@ 0x2e
 8009086:	d012      	beq.n	80090ae <__gethex+0x1fe>
 8009088:	2b20      	cmp	r3, #32
 800908a:	d104      	bne.n	8009096 <__gethex+0x1e6>
 800908c:	f845 bb04 	str.w	fp, [r5], #4
 8009090:	f04f 0b00 	mov.w	fp, #0
 8009094:	465b      	mov	r3, fp
 8009096:	7830      	ldrb	r0, [r6, #0]
 8009098:	9303      	str	r3, [sp, #12]
 800909a:	f7ff fef4 	bl	8008e86 <__hexdig_fun>
 800909e:	9b03      	ldr	r3, [sp, #12]
 80090a0:	f000 000f 	and.w	r0, r0, #15
 80090a4:	4098      	lsls	r0, r3
 80090a6:	ea4b 0b00 	orr.w	fp, fp, r0
 80090aa:	3304      	adds	r3, #4
 80090ac:	e7ae      	b.n	800900c <__gethex+0x15c>
 80090ae:	45b1      	cmp	r9, r6
 80090b0:	d8ea      	bhi.n	8009088 <__gethex+0x1d8>
 80090b2:	2201      	movs	r2, #1
 80090b4:	4630      	mov	r0, r6
 80090b6:	492a      	ldr	r1, [pc, #168]	@ (8009160 <__gethex+0x2b0>)
 80090b8:	9303      	str	r3, [sp, #12]
 80090ba:	f7fe ffcd 	bl	8008058 <strncmp>
 80090be:	9b03      	ldr	r3, [sp, #12]
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d1e1      	bne.n	8009088 <__gethex+0x1d8>
 80090c4:	e7a2      	b.n	800900c <__gethex+0x15c>
 80090c6:	4620      	mov	r0, r4
 80090c8:	1ea9      	subs	r1, r5, #2
 80090ca:	f001 f90e 	bl	800a2ea <__any_on>
 80090ce:	2800      	cmp	r0, #0
 80090d0:	d0c2      	beq.n	8009058 <__gethex+0x1a8>
 80090d2:	f04f 0903 	mov.w	r9, #3
 80090d6:	e7c1      	b.n	800905c <__gethex+0x1ac>
 80090d8:	da09      	bge.n	80090ee <__gethex+0x23e>
 80090da:	1b75      	subs	r5, r6, r5
 80090dc:	4621      	mov	r1, r4
 80090de:	462a      	mov	r2, r5
 80090e0:	9801      	ldr	r0, [sp, #4]
 80090e2:	f000 fed3 	bl	8009e8c <__lshift>
 80090e6:	4604      	mov	r4, r0
 80090e8:	1b7f      	subs	r7, r7, r5
 80090ea:	f100 0a14 	add.w	sl, r0, #20
 80090ee:	f04f 0900 	mov.w	r9, #0
 80090f2:	e7b8      	b.n	8009066 <__gethex+0x1b6>
 80090f4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80090f8:	42bd      	cmp	r5, r7
 80090fa:	dd6f      	ble.n	80091dc <__gethex+0x32c>
 80090fc:	1bed      	subs	r5, r5, r7
 80090fe:	42ae      	cmp	r6, r5
 8009100:	dc34      	bgt.n	800916c <__gethex+0x2bc>
 8009102:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009106:	2b02      	cmp	r3, #2
 8009108:	d022      	beq.n	8009150 <__gethex+0x2a0>
 800910a:	2b03      	cmp	r3, #3
 800910c:	d024      	beq.n	8009158 <__gethex+0x2a8>
 800910e:	2b01      	cmp	r3, #1
 8009110:	d115      	bne.n	800913e <__gethex+0x28e>
 8009112:	42ae      	cmp	r6, r5
 8009114:	d113      	bne.n	800913e <__gethex+0x28e>
 8009116:	2e01      	cmp	r6, #1
 8009118:	d10b      	bne.n	8009132 <__gethex+0x282>
 800911a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800911e:	9a02      	ldr	r2, [sp, #8]
 8009120:	2562      	movs	r5, #98	@ 0x62
 8009122:	6013      	str	r3, [r2, #0]
 8009124:	2301      	movs	r3, #1
 8009126:	6123      	str	r3, [r4, #16]
 8009128:	f8ca 3000 	str.w	r3, [sl]
 800912c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800912e:	601c      	str	r4, [r3, #0]
 8009130:	e73a      	b.n	8008fa8 <__gethex+0xf8>
 8009132:	4620      	mov	r0, r4
 8009134:	1e71      	subs	r1, r6, #1
 8009136:	f001 f8d8 	bl	800a2ea <__any_on>
 800913a:	2800      	cmp	r0, #0
 800913c:	d1ed      	bne.n	800911a <__gethex+0x26a>
 800913e:	4621      	mov	r1, r4
 8009140:	9801      	ldr	r0, [sp, #4]
 8009142:	f000 fc8d 	bl	8009a60 <_Bfree>
 8009146:	2300      	movs	r3, #0
 8009148:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800914a:	2550      	movs	r5, #80	@ 0x50
 800914c:	6013      	str	r3, [r2, #0]
 800914e:	e72b      	b.n	8008fa8 <__gethex+0xf8>
 8009150:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1f3      	bne.n	800913e <__gethex+0x28e>
 8009156:	e7e0      	b.n	800911a <__gethex+0x26a>
 8009158:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1dd      	bne.n	800911a <__gethex+0x26a>
 800915e:	e7ee      	b.n	800913e <__gethex+0x28e>
 8009160:	0800ac8f 	.word	0x0800ac8f
 8009164:	0800ae6d 	.word	0x0800ae6d
 8009168:	0800ae7e 	.word	0x0800ae7e
 800916c:	1e6f      	subs	r7, r5, #1
 800916e:	f1b9 0f00 	cmp.w	r9, #0
 8009172:	d130      	bne.n	80091d6 <__gethex+0x326>
 8009174:	b127      	cbz	r7, 8009180 <__gethex+0x2d0>
 8009176:	4639      	mov	r1, r7
 8009178:	4620      	mov	r0, r4
 800917a:	f001 f8b6 	bl	800a2ea <__any_on>
 800917e:	4681      	mov	r9, r0
 8009180:	2301      	movs	r3, #1
 8009182:	4629      	mov	r1, r5
 8009184:	1b76      	subs	r6, r6, r5
 8009186:	2502      	movs	r5, #2
 8009188:	117a      	asrs	r2, r7, #5
 800918a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800918e:	f007 071f 	and.w	r7, r7, #31
 8009192:	40bb      	lsls	r3, r7
 8009194:	4213      	tst	r3, r2
 8009196:	4620      	mov	r0, r4
 8009198:	bf18      	it	ne
 800919a:	f049 0902 	orrne.w	r9, r9, #2
 800919e:	f7ff fe1f 	bl	8008de0 <rshift>
 80091a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80091a6:	f1b9 0f00 	cmp.w	r9, #0
 80091aa:	d047      	beq.n	800923c <__gethex+0x38c>
 80091ac:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80091b0:	2b02      	cmp	r3, #2
 80091b2:	d015      	beq.n	80091e0 <__gethex+0x330>
 80091b4:	2b03      	cmp	r3, #3
 80091b6:	d017      	beq.n	80091e8 <__gethex+0x338>
 80091b8:	2b01      	cmp	r3, #1
 80091ba:	d109      	bne.n	80091d0 <__gethex+0x320>
 80091bc:	f019 0f02 	tst.w	r9, #2
 80091c0:	d006      	beq.n	80091d0 <__gethex+0x320>
 80091c2:	f8da 3000 	ldr.w	r3, [sl]
 80091c6:	ea49 0903 	orr.w	r9, r9, r3
 80091ca:	f019 0f01 	tst.w	r9, #1
 80091ce:	d10e      	bne.n	80091ee <__gethex+0x33e>
 80091d0:	f045 0510 	orr.w	r5, r5, #16
 80091d4:	e032      	b.n	800923c <__gethex+0x38c>
 80091d6:	f04f 0901 	mov.w	r9, #1
 80091da:	e7d1      	b.n	8009180 <__gethex+0x2d0>
 80091dc:	2501      	movs	r5, #1
 80091de:	e7e2      	b.n	80091a6 <__gethex+0x2f6>
 80091e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091e2:	f1c3 0301 	rsb	r3, r3, #1
 80091e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80091e8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d0f0      	beq.n	80091d0 <__gethex+0x320>
 80091ee:	f04f 0c00 	mov.w	ip, #0
 80091f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80091f6:	f104 0314 	add.w	r3, r4, #20
 80091fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80091fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009202:	4618      	mov	r0, r3
 8009204:	f853 2b04 	ldr.w	r2, [r3], #4
 8009208:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800920c:	d01b      	beq.n	8009246 <__gethex+0x396>
 800920e:	3201      	adds	r2, #1
 8009210:	6002      	str	r2, [r0, #0]
 8009212:	2d02      	cmp	r5, #2
 8009214:	f104 0314 	add.w	r3, r4, #20
 8009218:	d13c      	bne.n	8009294 <__gethex+0x3e4>
 800921a:	f8d8 2000 	ldr.w	r2, [r8]
 800921e:	3a01      	subs	r2, #1
 8009220:	42b2      	cmp	r2, r6
 8009222:	d109      	bne.n	8009238 <__gethex+0x388>
 8009224:	2201      	movs	r2, #1
 8009226:	1171      	asrs	r1, r6, #5
 8009228:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800922c:	f006 061f 	and.w	r6, r6, #31
 8009230:	fa02 f606 	lsl.w	r6, r2, r6
 8009234:	421e      	tst	r6, r3
 8009236:	d13a      	bne.n	80092ae <__gethex+0x3fe>
 8009238:	f045 0520 	orr.w	r5, r5, #32
 800923c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800923e:	601c      	str	r4, [r3, #0]
 8009240:	9b02      	ldr	r3, [sp, #8]
 8009242:	601f      	str	r7, [r3, #0]
 8009244:	e6b0      	b.n	8008fa8 <__gethex+0xf8>
 8009246:	4299      	cmp	r1, r3
 8009248:	f843 cc04 	str.w	ip, [r3, #-4]
 800924c:	d8d9      	bhi.n	8009202 <__gethex+0x352>
 800924e:	68a3      	ldr	r3, [r4, #8]
 8009250:	459b      	cmp	fp, r3
 8009252:	db17      	blt.n	8009284 <__gethex+0x3d4>
 8009254:	6861      	ldr	r1, [r4, #4]
 8009256:	9801      	ldr	r0, [sp, #4]
 8009258:	3101      	adds	r1, #1
 800925a:	f000 fbc1 	bl	80099e0 <_Balloc>
 800925e:	4681      	mov	r9, r0
 8009260:	b918      	cbnz	r0, 800926a <__gethex+0x3ba>
 8009262:	4602      	mov	r2, r0
 8009264:	2184      	movs	r1, #132	@ 0x84
 8009266:	4b19      	ldr	r3, [pc, #100]	@ (80092cc <__gethex+0x41c>)
 8009268:	e6c5      	b.n	8008ff6 <__gethex+0x146>
 800926a:	6922      	ldr	r2, [r4, #16]
 800926c:	f104 010c 	add.w	r1, r4, #12
 8009270:	3202      	adds	r2, #2
 8009272:	0092      	lsls	r2, r2, #2
 8009274:	300c      	adds	r0, #12
 8009276:	f7fe ff48 	bl	800810a <memcpy>
 800927a:	4621      	mov	r1, r4
 800927c:	9801      	ldr	r0, [sp, #4]
 800927e:	f000 fbef 	bl	8009a60 <_Bfree>
 8009282:	464c      	mov	r4, r9
 8009284:	6923      	ldr	r3, [r4, #16]
 8009286:	1c5a      	adds	r2, r3, #1
 8009288:	6122      	str	r2, [r4, #16]
 800928a:	2201      	movs	r2, #1
 800928c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009290:	615a      	str	r2, [r3, #20]
 8009292:	e7be      	b.n	8009212 <__gethex+0x362>
 8009294:	6922      	ldr	r2, [r4, #16]
 8009296:	455a      	cmp	r2, fp
 8009298:	dd0b      	ble.n	80092b2 <__gethex+0x402>
 800929a:	2101      	movs	r1, #1
 800929c:	4620      	mov	r0, r4
 800929e:	f7ff fd9f 	bl	8008de0 <rshift>
 80092a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80092a6:	3701      	adds	r7, #1
 80092a8:	42bb      	cmp	r3, r7
 80092aa:	f6ff aee0 	blt.w	800906e <__gethex+0x1be>
 80092ae:	2501      	movs	r5, #1
 80092b0:	e7c2      	b.n	8009238 <__gethex+0x388>
 80092b2:	f016 061f 	ands.w	r6, r6, #31
 80092b6:	d0fa      	beq.n	80092ae <__gethex+0x3fe>
 80092b8:	4453      	add	r3, sl
 80092ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80092be:	f000 fc81 	bl	8009bc4 <__hi0bits>
 80092c2:	f1c6 0620 	rsb	r6, r6, #32
 80092c6:	42b0      	cmp	r0, r6
 80092c8:	dbe7      	blt.n	800929a <__gethex+0x3ea>
 80092ca:	e7f0      	b.n	80092ae <__gethex+0x3fe>
 80092cc:	0800ae6d 	.word	0x0800ae6d

080092d0 <L_shift>:
 80092d0:	f1c2 0208 	rsb	r2, r2, #8
 80092d4:	0092      	lsls	r2, r2, #2
 80092d6:	b570      	push	{r4, r5, r6, lr}
 80092d8:	f1c2 0620 	rsb	r6, r2, #32
 80092dc:	6843      	ldr	r3, [r0, #4]
 80092de:	6804      	ldr	r4, [r0, #0]
 80092e0:	fa03 f506 	lsl.w	r5, r3, r6
 80092e4:	432c      	orrs	r4, r5
 80092e6:	40d3      	lsrs	r3, r2
 80092e8:	6004      	str	r4, [r0, #0]
 80092ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80092ee:	4288      	cmp	r0, r1
 80092f0:	d3f4      	bcc.n	80092dc <L_shift+0xc>
 80092f2:	bd70      	pop	{r4, r5, r6, pc}

080092f4 <__match>:
 80092f4:	b530      	push	{r4, r5, lr}
 80092f6:	6803      	ldr	r3, [r0, #0]
 80092f8:	3301      	adds	r3, #1
 80092fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092fe:	b914      	cbnz	r4, 8009306 <__match+0x12>
 8009300:	6003      	str	r3, [r0, #0]
 8009302:	2001      	movs	r0, #1
 8009304:	bd30      	pop	{r4, r5, pc}
 8009306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800930a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800930e:	2d19      	cmp	r5, #25
 8009310:	bf98      	it	ls
 8009312:	3220      	addls	r2, #32
 8009314:	42a2      	cmp	r2, r4
 8009316:	d0f0      	beq.n	80092fa <__match+0x6>
 8009318:	2000      	movs	r0, #0
 800931a:	e7f3      	b.n	8009304 <__match+0x10>

0800931c <__hexnan>:
 800931c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009320:	2500      	movs	r5, #0
 8009322:	680b      	ldr	r3, [r1, #0]
 8009324:	4682      	mov	sl, r0
 8009326:	115e      	asrs	r6, r3, #5
 8009328:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800932c:	f013 031f 	ands.w	r3, r3, #31
 8009330:	bf18      	it	ne
 8009332:	3604      	addne	r6, #4
 8009334:	1f37      	subs	r7, r6, #4
 8009336:	4690      	mov	r8, r2
 8009338:	46b9      	mov	r9, r7
 800933a:	463c      	mov	r4, r7
 800933c:	46ab      	mov	fp, r5
 800933e:	b087      	sub	sp, #28
 8009340:	6801      	ldr	r1, [r0, #0]
 8009342:	9301      	str	r3, [sp, #4]
 8009344:	f846 5c04 	str.w	r5, [r6, #-4]
 8009348:	9502      	str	r5, [sp, #8]
 800934a:	784a      	ldrb	r2, [r1, #1]
 800934c:	1c4b      	adds	r3, r1, #1
 800934e:	9303      	str	r3, [sp, #12]
 8009350:	b342      	cbz	r2, 80093a4 <__hexnan+0x88>
 8009352:	4610      	mov	r0, r2
 8009354:	9105      	str	r1, [sp, #20]
 8009356:	9204      	str	r2, [sp, #16]
 8009358:	f7ff fd95 	bl	8008e86 <__hexdig_fun>
 800935c:	2800      	cmp	r0, #0
 800935e:	d151      	bne.n	8009404 <__hexnan+0xe8>
 8009360:	9a04      	ldr	r2, [sp, #16]
 8009362:	9905      	ldr	r1, [sp, #20]
 8009364:	2a20      	cmp	r2, #32
 8009366:	d818      	bhi.n	800939a <__hexnan+0x7e>
 8009368:	9b02      	ldr	r3, [sp, #8]
 800936a:	459b      	cmp	fp, r3
 800936c:	dd13      	ble.n	8009396 <__hexnan+0x7a>
 800936e:	454c      	cmp	r4, r9
 8009370:	d206      	bcs.n	8009380 <__hexnan+0x64>
 8009372:	2d07      	cmp	r5, #7
 8009374:	dc04      	bgt.n	8009380 <__hexnan+0x64>
 8009376:	462a      	mov	r2, r5
 8009378:	4649      	mov	r1, r9
 800937a:	4620      	mov	r0, r4
 800937c:	f7ff ffa8 	bl	80092d0 <L_shift>
 8009380:	4544      	cmp	r4, r8
 8009382:	d952      	bls.n	800942a <__hexnan+0x10e>
 8009384:	2300      	movs	r3, #0
 8009386:	f1a4 0904 	sub.w	r9, r4, #4
 800938a:	f844 3c04 	str.w	r3, [r4, #-4]
 800938e:	461d      	mov	r5, r3
 8009390:	464c      	mov	r4, r9
 8009392:	f8cd b008 	str.w	fp, [sp, #8]
 8009396:	9903      	ldr	r1, [sp, #12]
 8009398:	e7d7      	b.n	800934a <__hexnan+0x2e>
 800939a:	2a29      	cmp	r2, #41	@ 0x29
 800939c:	d157      	bne.n	800944e <__hexnan+0x132>
 800939e:	3102      	adds	r1, #2
 80093a0:	f8ca 1000 	str.w	r1, [sl]
 80093a4:	f1bb 0f00 	cmp.w	fp, #0
 80093a8:	d051      	beq.n	800944e <__hexnan+0x132>
 80093aa:	454c      	cmp	r4, r9
 80093ac:	d206      	bcs.n	80093bc <__hexnan+0xa0>
 80093ae:	2d07      	cmp	r5, #7
 80093b0:	dc04      	bgt.n	80093bc <__hexnan+0xa0>
 80093b2:	462a      	mov	r2, r5
 80093b4:	4649      	mov	r1, r9
 80093b6:	4620      	mov	r0, r4
 80093b8:	f7ff ff8a 	bl	80092d0 <L_shift>
 80093bc:	4544      	cmp	r4, r8
 80093be:	d936      	bls.n	800942e <__hexnan+0x112>
 80093c0:	4623      	mov	r3, r4
 80093c2:	f1a8 0204 	sub.w	r2, r8, #4
 80093c6:	f853 1b04 	ldr.w	r1, [r3], #4
 80093ca:	429f      	cmp	r7, r3
 80093cc:	f842 1f04 	str.w	r1, [r2, #4]!
 80093d0:	d2f9      	bcs.n	80093c6 <__hexnan+0xaa>
 80093d2:	1b3b      	subs	r3, r7, r4
 80093d4:	f023 0303 	bic.w	r3, r3, #3
 80093d8:	3304      	adds	r3, #4
 80093da:	3401      	adds	r4, #1
 80093dc:	3e03      	subs	r6, #3
 80093de:	42b4      	cmp	r4, r6
 80093e0:	bf88      	it	hi
 80093e2:	2304      	movhi	r3, #4
 80093e4:	2200      	movs	r2, #0
 80093e6:	4443      	add	r3, r8
 80093e8:	f843 2b04 	str.w	r2, [r3], #4
 80093ec:	429f      	cmp	r7, r3
 80093ee:	d2fb      	bcs.n	80093e8 <__hexnan+0xcc>
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	b91b      	cbnz	r3, 80093fc <__hexnan+0xe0>
 80093f4:	4547      	cmp	r7, r8
 80093f6:	d128      	bne.n	800944a <__hexnan+0x12e>
 80093f8:	2301      	movs	r3, #1
 80093fa:	603b      	str	r3, [r7, #0]
 80093fc:	2005      	movs	r0, #5
 80093fe:	b007      	add	sp, #28
 8009400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009404:	3501      	adds	r5, #1
 8009406:	2d08      	cmp	r5, #8
 8009408:	f10b 0b01 	add.w	fp, fp, #1
 800940c:	dd06      	ble.n	800941c <__hexnan+0x100>
 800940e:	4544      	cmp	r4, r8
 8009410:	d9c1      	bls.n	8009396 <__hexnan+0x7a>
 8009412:	2300      	movs	r3, #0
 8009414:	2501      	movs	r5, #1
 8009416:	f844 3c04 	str.w	r3, [r4, #-4]
 800941a:	3c04      	subs	r4, #4
 800941c:	6822      	ldr	r2, [r4, #0]
 800941e:	f000 000f 	and.w	r0, r0, #15
 8009422:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009426:	6020      	str	r0, [r4, #0]
 8009428:	e7b5      	b.n	8009396 <__hexnan+0x7a>
 800942a:	2508      	movs	r5, #8
 800942c:	e7b3      	b.n	8009396 <__hexnan+0x7a>
 800942e:	9b01      	ldr	r3, [sp, #4]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d0dd      	beq.n	80093f0 <__hexnan+0xd4>
 8009434:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009438:	f1c3 0320 	rsb	r3, r3, #32
 800943c:	40da      	lsrs	r2, r3
 800943e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009442:	4013      	ands	r3, r2
 8009444:	f846 3c04 	str.w	r3, [r6, #-4]
 8009448:	e7d2      	b.n	80093f0 <__hexnan+0xd4>
 800944a:	3f04      	subs	r7, #4
 800944c:	e7d0      	b.n	80093f0 <__hexnan+0xd4>
 800944e:	2004      	movs	r0, #4
 8009450:	e7d5      	b.n	80093fe <__hexnan+0xe2>

08009452 <__ssputs_r>:
 8009452:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009456:	461f      	mov	r7, r3
 8009458:	688e      	ldr	r6, [r1, #8]
 800945a:	4682      	mov	sl, r0
 800945c:	42be      	cmp	r6, r7
 800945e:	460c      	mov	r4, r1
 8009460:	4690      	mov	r8, r2
 8009462:	680b      	ldr	r3, [r1, #0]
 8009464:	d82d      	bhi.n	80094c2 <__ssputs_r+0x70>
 8009466:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800946a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800946e:	d026      	beq.n	80094be <__ssputs_r+0x6c>
 8009470:	6965      	ldr	r5, [r4, #20]
 8009472:	6909      	ldr	r1, [r1, #16]
 8009474:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009478:	eba3 0901 	sub.w	r9, r3, r1
 800947c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009480:	1c7b      	adds	r3, r7, #1
 8009482:	444b      	add	r3, r9
 8009484:	106d      	asrs	r5, r5, #1
 8009486:	429d      	cmp	r5, r3
 8009488:	bf38      	it	cc
 800948a:	461d      	movcc	r5, r3
 800948c:	0553      	lsls	r3, r2, #21
 800948e:	d527      	bpl.n	80094e0 <__ssputs_r+0x8e>
 8009490:	4629      	mov	r1, r5
 8009492:	f000 f95f 	bl	8009754 <_malloc_r>
 8009496:	4606      	mov	r6, r0
 8009498:	b360      	cbz	r0, 80094f4 <__ssputs_r+0xa2>
 800949a:	464a      	mov	r2, r9
 800949c:	6921      	ldr	r1, [r4, #16]
 800949e:	f7fe fe34 	bl	800810a <memcpy>
 80094a2:	89a3      	ldrh	r3, [r4, #12]
 80094a4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80094a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094ac:	81a3      	strh	r3, [r4, #12]
 80094ae:	6126      	str	r6, [r4, #16]
 80094b0:	444e      	add	r6, r9
 80094b2:	6026      	str	r6, [r4, #0]
 80094b4:	463e      	mov	r6, r7
 80094b6:	6165      	str	r5, [r4, #20]
 80094b8:	eba5 0509 	sub.w	r5, r5, r9
 80094bc:	60a5      	str	r5, [r4, #8]
 80094be:	42be      	cmp	r6, r7
 80094c0:	d900      	bls.n	80094c4 <__ssputs_r+0x72>
 80094c2:	463e      	mov	r6, r7
 80094c4:	4632      	mov	r2, r6
 80094c6:	4641      	mov	r1, r8
 80094c8:	6820      	ldr	r0, [r4, #0]
 80094ca:	f000 ffad 	bl	800a428 <memmove>
 80094ce:	2000      	movs	r0, #0
 80094d0:	68a3      	ldr	r3, [r4, #8]
 80094d2:	1b9b      	subs	r3, r3, r6
 80094d4:	60a3      	str	r3, [r4, #8]
 80094d6:	6823      	ldr	r3, [r4, #0]
 80094d8:	4433      	add	r3, r6
 80094da:	6023      	str	r3, [r4, #0]
 80094dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094e0:	462a      	mov	r2, r5
 80094e2:	f000 ff66 	bl	800a3b2 <_realloc_r>
 80094e6:	4606      	mov	r6, r0
 80094e8:	2800      	cmp	r0, #0
 80094ea:	d1e0      	bne.n	80094ae <__ssputs_r+0x5c>
 80094ec:	4650      	mov	r0, sl
 80094ee:	6921      	ldr	r1, [r4, #16]
 80094f0:	f001 f83c 	bl	800a56c <_free_r>
 80094f4:	230c      	movs	r3, #12
 80094f6:	f8ca 3000 	str.w	r3, [sl]
 80094fa:	89a3      	ldrh	r3, [r4, #12]
 80094fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009500:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009504:	81a3      	strh	r3, [r4, #12]
 8009506:	e7e9      	b.n	80094dc <__ssputs_r+0x8a>

08009508 <_svfiprintf_r>:
 8009508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800950c:	4698      	mov	r8, r3
 800950e:	898b      	ldrh	r3, [r1, #12]
 8009510:	4607      	mov	r7, r0
 8009512:	061b      	lsls	r3, r3, #24
 8009514:	460d      	mov	r5, r1
 8009516:	4614      	mov	r4, r2
 8009518:	b09d      	sub	sp, #116	@ 0x74
 800951a:	d510      	bpl.n	800953e <_svfiprintf_r+0x36>
 800951c:	690b      	ldr	r3, [r1, #16]
 800951e:	b973      	cbnz	r3, 800953e <_svfiprintf_r+0x36>
 8009520:	2140      	movs	r1, #64	@ 0x40
 8009522:	f000 f917 	bl	8009754 <_malloc_r>
 8009526:	6028      	str	r0, [r5, #0]
 8009528:	6128      	str	r0, [r5, #16]
 800952a:	b930      	cbnz	r0, 800953a <_svfiprintf_r+0x32>
 800952c:	230c      	movs	r3, #12
 800952e:	603b      	str	r3, [r7, #0]
 8009530:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009534:	b01d      	add	sp, #116	@ 0x74
 8009536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800953a:	2340      	movs	r3, #64	@ 0x40
 800953c:	616b      	str	r3, [r5, #20]
 800953e:	2300      	movs	r3, #0
 8009540:	9309      	str	r3, [sp, #36]	@ 0x24
 8009542:	2320      	movs	r3, #32
 8009544:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009548:	2330      	movs	r3, #48	@ 0x30
 800954a:	f04f 0901 	mov.w	r9, #1
 800954e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009552:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80096ec <_svfiprintf_r+0x1e4>
 8009556:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800955a:	4623      	mov	r3, r4
 800955c:	469a      	mov	sl, r3
 800955e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009562:	b10a      	cbz	r2, 8009568 <_svfiprintf_r+0x60>
 8009564:	2a25      	cmp	r2, #37	@ 0x25
 8009566:	d1f9      	bne.n	800955c <_svfiprintf_r+0x54>
 8009568:	ebba 0b04 	subs.w	fp, sl, r4
 800956c:	d00b      	beq.n	8009586 <_svfiprintf_r+0x7e>
 800956e:	465b      	mov	r3, fp
 8009570:	4622      	mov	r2, r4
 8009572:	4629      	mov	r1, r5
 8009574:	4638      	mov	r0, r7
 8009576:	f7ff ff6c 	bl	8009452 <__ssputs_r>
 800957a:	3001      	adds	r0, #1
 800957c:	f000 80a7 	beq.w	80096ce <_svfiprintf_r+0x1c6>
 8009580:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009582:	445a      	add	r2, fp
 8009584:	9209      	str	r2, [sp, #36]	@ 0x24
 8009586:	f89a 3000 	ldrb.w	r3, [sl]
 800958a:	2b00      	cmp	r3, #0
 800958c:	f000 809f 	beq.w	80096ce <_svfiprintf_r+0x1c6>
 8009590:	2300      	movs	r3, #0
 8009592:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009596:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800959a:	f10a 0a01 	add.w	sl, sl, #1
 800959e:	9304      	str	r3, [sp, #16]
 80095a0:	9307      	str	r3, [sp, #28]
 80095a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80095a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80095a8:	4654      	mov	r4, sl
 80095aa:	2205      	movs	r2, #5
 80095ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095b0:	484e      	ldr	r0, [pc, #312]	@ (80096ec <_svfiprintf_r+0x1e4>)
 80095b2:	f7fe fd9c 	bl	80080ee <memchr>
 80095b6:	9a04      	ldr	r2, [sp, #16]
 80095b8:	b9d8      	cbnz	r0, 80095f2 <_svfiprintf_r+0xea>
 80095ba:	06d0      	lsls	r0, r2, #27
 80095bc:	bf44      	itt	mi
 80095be:	2320      	movmi	r3, #32
 80095c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095c4:	0711      	lsls	r1, r2, #28
 80095c6:	bf44      	itt	mi
 80095c8:	232b      	movmi	r3, #43	@ 0x2b
 80095ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80095ce:	f89a 3000 	ldrb.w	r3, [sl]
 80095d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80095d4:	d015      	beq.n	8009602 <_svfiprintf_r+0xfa>
 80095d6:	4654      	mov	r4, sl
 80095d8:	2000      	movs	r0, #0
 80095da:	f04f 0c0a 	mov.w	ip, #10
 80095de:	9a07      	ldr	r2, [sp, #28]
 80095e0:	4621      	mov	r1, r4
 80095e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095e6:	3b30      	subs	r3, #48	@ 0x30
 80095e8:	2b09      	cmp	r3, #9
 80095ea:	d94b      	bls.n	8009684 <_svfiprintf_r+0x17c>
 80095ec:	b1b0      	cbz	r0, 800961c <_svfiprintf_r+0x114>
 80095ee:	9207      	str	r2, [sp, #28]
 80095f0:	e014      	b.n	800961c <_svfiprintf_r+0x114>
 80095f2:	eba0 0308 	sub.w	r3, r0, r8
 80095f6:	fa09 f303 	lsl.w	r3, r9, r3
 80095fa:	4313      	orrs	r3, r2
 80095fc:	46a2      	mov	sl, r4
 80095fe:	9304      	str	r3, [sp, #16]
 8009600:	e7d2      	b.n	80095a8 <_svfiprintf_r+0xa0>
 8009602:	9b03      	ldr	r3, [sp, #12]
 8009604:	1d19      	adds	r1, r3, #4
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	9103      	str	r1, [sp, #12]
 800960a:	2b00      	cmp	r3, #0
 800960c:	bfbb      	ittet	lt
 800960e:	425b      	neglt	r3, r3
 8009610:	f042 0202 	orrlt.w	r2, r2, #2
 8009614:	9307      	strge	r3, [sp, #28]
 8009616:	9307      	strlt	r3, [sp, #28]
 8009618:	bfb8      	it	lt
 800961a:	9204      	strlt	r2, [sp, #16]
 800961c:	7823      	ldrb	r3, [r4, #0]
 800961e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009620:	d10a      	bne.n	8009638 <_svfiprintf_r+0x130>
 8009622:	7863      	ldrb	r3, [r4, #1]
 8009624:	2b2a      	cmp	r3, #42	@ 0x2a
 8009626:	d132      	bne.n	800968e <_svfiprintf_r+0x186>
 8009628:	9b03      	ldr	r3, [sp, #12]
 800962a:	3402      	adds	r4, #2
 800962c:	1d1a      	adds	r2, r3, #4
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	9203      	str	r2, [sp, #12]
 8009632:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009636:	9305      	str	r3, [sp, #20]
 8009638:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80096f0 <_svfiprintf_r+0x1e8>
 800963c:	2203      	movs	r2, #3
 800963e:	4650      	mov	r0, sl
 8009640:	7821      	ldrb	r1, [r4, #0]
 8009642:	f7fe fd54 	bl	80080ee <memchr>
 8009646:	b138      	cbz	r0, 8009658 <_svfiprintf_r+0x150>
 8009648:	2240      	movs	r2, #64	@ 0x40
 800964a:	9b04      	ldr	r3, [sp, #16]
 800964c:	eba0 000a 	sub.w	r0, r0, sl
 8009650:	4082      	lsls	r2, r0
 8009652:	4313      	orrs	r3, r2
 8009654:	3401      	adds	r4, #1
 8009656:	9304      	str	r3, [sp, #16]
 8009658:	f814 1b01 	ldrb.w	r1, [r4], #1
 800965c:	2206      	movs	r2, #6
 800965e:	4825      	ldr	r0, [pc, #148]	@ (80096f4 <_svfiprintf_r+0x1ec>)
 8009660:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009664:	f7fe fd43 	bl	80080ee <memchr>
 8009668:	2800      	cmp	r0, #0
 800966a:	d036      	beq.n	80096da <_svfiprintf_r+0x1d2>
 800966c:	4b22      	ldr	r3, [pc, #136]	@ (80096f8 <_svfiprintf_r+0x1f0>)
 800966e:	bb1b      	cbnz	r3, 80096b8 <_svfiprintf_r+0x1b0>
 8009670:	9b03      	ldr	r3, [sp, #12]
 8009672:	3307      	adds	r3, #7
 8009674:	f023 0307 	bic.w	r3, r3, #7
 8009678:	3308      	adds	r3, #8
 800967a:	9303      	str	r3, [sp, #12]
 800967c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800967e:	4433      	add	r3, r6
 8009680:	9309      	str	r3, [sp, #36]	@ 0x24
 8009682:	e76a      	b.n	800955a <_svfiprintf_r+0x52>
 8009684:	460c      	mov	r4, r1
 8009686:	2001      	movs	r0, #1
 8009688:	fb0c 3202 	mla	r2, ip, r2, r3
 800968c:	e7a8      	b.n	80095e0 <_svfiprintf_r+0xd8>
 800968e:	2300      	movs	r3, #0
 8009690:	f04f 0c0a 	mov.w	ip, #10
 8009694:	4619      	mov	r1, r3
 8009696:	3401      	adds	r4, #1
 8009698:	9305      	str	r3, [sp, #20]
 800969a:	4620      	mov	r0, r4
 800969c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096a0:	3a30      	subs	r2, #48	@ 0x30
 80096a2:	2a09      	cmp	r2, #9
 80096a4:	d903      	bls.n	80096ae <_svfiprintf_r+0x1a6>
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d0c6      	beq.n	8009638 <_svfiprintf_r+0x130>
 80096aa:	9105      	str	r1, [sp, #20]
 80096ac:	e7c4      	b.n	8009638 <_svfiprintf_r+0x130>
 80096ae:	4604      	mov	r4, r0
 80096b0:	2301      	movs	r3, #1
 80096b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80096b6:	e7f0      	b.n	800969a <_svfiprintf_r+0x192>
 80096b8:	ab03      	add	r3, sp, #12
 80096ba:	9300      	str	r3, [sp, #0]
 80096bc:	462a      	mov	r2, r5
 80096be:	4638      	mov	r0, r7
 80096c0:	4b0e      	ldr	r3, [pc, #56]	@ (80096fc <_svfiprintf_r+0x1f4>)
 80096c2:	a904      	add	r1, sp, #16
 80096c4:	f7fc ff68 	bl	8006598 <_printf_float>
 80096c8:	1c42      	adds	r2, r0, #1
 80096ca:	4606      	mov	r6, r0
 80096cc:	d1d6      	bne.n	800967c <_svfiprintf_r+0x174>
 80096ce:	89ab      	ldrh	r3, [r5, #12]
 80096d0:	065b      	lsls	r3, r3, #25
 80096d2:	f53f af2d 	bmi.w	8009530 <_svfiprintf_r+0x28>
 80096d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80096d8:	e72c      	b.n	8009534 <_svfiprintf_r+0x2c>
 80096da:	ab03      	add	r3, sp, #12
 80096dc:	9300      	str	r3, [sp, #0]
 80096de:	462a      	mov	r2, r5
 80096e0:	4638      	mov	r0, r7
 80096e2:	4b06      	ldr	r3, [pc, #24]	@ (80096fc <_svfiprintf_r+0x1f4>)
 80096e4:	a904      	add	r1, sp, #16
 80096e6:	f7fd f9f5 	bl	8006ad4 <_printf_i>
 80096ea:	e7ed      	b.n	80096c8 <_svfiprintf_r+0x1c0>
 80096ec:	0800aede 	.word	0x0800aede
 80096f0:	0800aee4 	.word	0x0800aee4
 80096f4:	0800aee8 	.word	0x0800aee8
 80096f8:	08006599 	.word	0x08006599
 80096fc:	08009453 	.word	0x08009453

08009700 <malloc>:
 8009700:	4b02      	ldr	r3, [pc, #8]	@ (800970c <malloc+0xc>)
 8009702:	4601      	mov	r1, r0
 8009704:	6818      	ldr	r0, [r3, #0]
 8009706:	f000 b825 	b.w	8009754 <_malloc_r>
 800970a:	bf00      	nop
 800970c:	200001a0 	.word	0x200001a0

08009710 <sbrk_aligned>:
 8009710:	b570      	push	{r4, r5, r6, lr}
 8009712:	4e0f      	ldr	r6, [pc, #60]	@ (8009750 <sbrk_aligned+0x40>)
 8009714:	460c      	mov	r4, r1
 8009716:	6831      	ldr	r1, [r6, #0]
 8009718:	4605      	mov	r5, r0
 800971a:	b911      	cbnz	r1, 8009722 <sbrk_aligned+0x12>
 800971c:	f000 fed2 	bl	800a4c4 <_sbrk_r>
 8009720:	6030      	str	r0, [r6, #0]
 8009722:	4621      	mov	r1, r4
 8009724:	4628      	mov	r0, r5
 8009726:	f000 fecd 	bl	800a4c4 <_sbrk_r>
 800972a:	1c43      	adds	r3, r0, #1
 800972c:	d103      	bne.n	8009736 <sbrk_aligned+0x26>
 800972e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009732:	4620      	mov	r0, r4
 8009734:	bd70      	pop	{r4, r5, r6, pc}
 8009736:	1cc4      	adds	r4, r0, #3
 8009738:	f024 0403 	bic.w	r4, r4, #3
 800973c:	42a0      	cmp	r0, r4
 800973e:	d0f8      	beq.n	8009732 <sbrk_aligned+0x22>
 8009740:	1a21      	subs	r1, r4, r0
 8009742:	4628      	mov	r0, r5
 8009744:	f000 febe 	bl	800a4c4 <_sbrk_r>
 8009748:	3001      	adds	r0, #1
 800974a:	d1f2      	bne.n	8009732 <sbrk_aligned+0x22>
 800974c:	e7ef      	b.n	800972e <sbrk_aligned+0x1e>
 800974e:	bf00      	nop
 8009750:	20000520 	.word	0x20000520

08009754 <_malloc_r>:
 8009754:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009758:	1ccd      	adds	r5, r1, #3
 800975a:	f025 0503 	bic.w	r5, r5, #3
 800975e:	3508      	adds	r5, #8
 8009760:	2d0c      	cmp	r5, #12
 8009762:	bf38      	it	cc
 8009764:	250c      	movcc	r5, #12
 8009766:	2d00      	cmp	r5, #0
 8009768:	4606      	mov	r6, r0
 800976a:	db01      	blt.n	8009770 <_malloc_r+0x1c>
 800976c:	42a9      	cmp	r1, r5
 800976e:	d904      	bls.n	800977a <_malloc_r+0x26>
 8009770:	230c      	movs	r3, #12
 8009772:	6033      	str	r3, [r6, #0]
 8009774:	2000      	movs	r0, #0
 8009776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800977a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009850 <_malloc_r+0xfc>
 800977e:	f000 f923 	bl	80099c8 <__malloc_lock>
 8009782:	f8d8 3000 	ldr.w	r3, [r8]
 8009786:	461c      	mov	r4, r3
 8009788:	bb44      	cbnz	r4, 80097dc <_malloc_r+0x88>
 800978a:	4629      	mov	r1, r5
 800978c:	4630      	mov	r0, r6
 800978e:	f7ff ffbf 	bl	8009710 <sbrk_aligned>
 8009792:	1c43      	adds	r3, r0, #1
 8009794:	4604      	mov	r4, r0
 8009796:	d158      	bne.n	800984a <_malloc_r+0xf6>
 8009798:	f8d8 4000 	ldr.w	r4, [r8]
 800979c:	4627      	mov	r7, r4
 800979e:	2f00      	cmp	r7, #0
 80097a0:	d143      	bne.n	800982a <_malloc_r+0xd6>
 80097a2:	2c00      	cmp	r4, #0
 80097a4:	d04b      	beq.n	800983e <_malloc_r+0xea>
 80097a6:	6823      	ldr	r3, [r4, #0]
 80097a8:	4639      	mov	r1, r7
 80097aa:	4630      	mov	r0, r6
 80097ac:	eb04 0903 	add.w	r9, r4, r3
 80097b0:	f000 fe88 	bl	800a4c4 <_sbrk_r>
 80097b4:	4581      	cmp	r9, r0
 80097b6:	d142      	bne.n	800983e <_malloc_r+0xea>
 80097b8:	6821      	ldr	r1, [r4, #0]
 80097ba:	4630      	mov	r0, r6
 80097bc:	1a6d      	subs	r5, r5, r1
 80097be:	4629      	mov	r1, r5
 80097c0:	f7ff ffa6 	bl	8009710 <sbrk_aligned>
 80097c4:	3001      	adds	r0, #1
 80097c6:	d03a      	beq.n	800983e <_malloc_r+0xea>
 80097c8:	6823      	ldr	r3, [r4, #0]
 80097ca:	442b      	add	r3, r5
 80097cc:	6023      	str	r3, [r4, #0]
 80097ce:	f8d8 3000 	ldr.w	r3, [r8]
 80097d2:	685a      	ldr	r2, [r3, #4]
 80097d4:	bb62      	cbnz	r2, 8009830 <_malloc_r+0xdc>
 80097d6:	f8c8 7000 	str.w	r7, [r8]
 80097da:	e00f      	b.n	80097fc <_malloc_r+0xa8>
 80097dc:	6822      	ldr	r2, [r4, #0]
 80097de:	1b52      	subs	r2, r2, r5
 80097e0:	d420      	bmi.n	8009824 <_malloc_r+0xd0>
 80097e2:	2a0b      	cmp	r2, #11
 80097e4:	d917      	bls.n	8009816 <_malloc_r+0xc2>
 80097e6:	1961      	adds	r1, r4, r5
 80097e8:	42a3      	cmp	r3, r4
 80097ea:	6025      	str	r5, [r4, #0]
 80097ec:	bf18      	it	ne
 80097ee:	6059      	strne	r1, [r3, #4]
 80097f0:	6863      	ldr	r3, [r4, #4]
 80097f2:	bf08      	it	eq
 80097f4:	f8c8 1000 	streq.w	r1, [r8]
 80097f8:	5162      	str	r2, [r4, r5]
 80097fa:	604b      	str	r3, [r1, #4]
 80097fc:	4630      	mov	r0, r6
 80097fe:	f000 f8e9 	bl	80099d4 <__malloc_unlock>
 8009802:	f104 000b 	add.w	r0, r4, #11
 8009806:	1d23      	adds	r3, r4, #4
 8009808:	f020 0007 	bic.w	r0, r0, #7
 800980c:	1ac2      	subs	r2, r0, r3
 800980e:	bf1c      	itt	ne
 8009810:	1a1b      	subne	r3, r3, r0
 8009812:	50a3      	strne	r3, [r4, r2]
 8009814:	e7af      	b.n	8009776 <_malloc_r+0x22>
 8009816:	6862      	ldr	r2, [r4, #4]
 8009818:	42a3      	cmp	r3, r4
 800981a:	bf0c      	ite	eq
 800981c:	f8c8 2000 	streq.w	r2, [r8]
 8009820:	605a      	strne	r2, [r3, #4]
 8009822:	e7eb      	b.n	80097fc <_malloc_r+0xa8>
 8009824:	4623      	mov	r3, r4
 8009826:	6864      	ldr	r4, [r4, #4]
 8009828:	e7ae      	b.n	8009788 <_malloc_r+0x34>
 800982a:	463c      	mov	r4, r7
 800982c:	687f      	ldr	r7, [r7, #4]
 800982e:	e7b6      	b.n	800979e <_malloc_r+0x4a>
 8009830:	461a      	mov	r2, r3
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	42a3      	cmp	r3, r4
 8009836:	d1fb      	bne.n	8009830 <_malloc_r+0xdc>
 8009838:	2300      	movs	r3, #0
 800983a:	6053      	str	r3, [r2, #4]
 800983c:	e7de      	b.n	80097fc <_malloc_r+0xa8>
 800983e:	230c      	movs	r3, #12
 8009840:	4630      	mov	r0, r6
 8009842:	6033      	str	r3, [r6, #0]
 8009844:	f000 f8c6 	bl	80099d4 <__malloc_unlock>
 8009848:	e794      	b.n	8009774 <_malloc_r+0x20>
 800984a:	6005      	str	r5, [r0, #0]
 800984c:	e7d6      	b.n	80097fc <_malloc_r+0xa8>
 800984e:	bf00      	nop
 8009850:	20000524 	.word	0x20000524

08009854 <__ascii_mbtowc>:
 8009854:	b082      	sub	sp, #8
 8009856:	b901      	cbnz	r1, 800985a <__ascii_mbtowc+0x6>
 8009858:	a901      	add	r1, sp, #4
 800985a:	b142      	cbz	r2, 800986e <__ascii_mbtowc+0x1a>
 800985c:	b14b      	cbz	r3, 8009872 <__ascii_mbtowc+0x1e>
 800985e:	7813      	ldrb	r3, [r2, #0]
 8009860:	600b      	str	r3, [r1, #0]
 8009862:	7812      	ldrb	r2, [r2, #0]
 8009864:	1e10      	subs	r0, r2, #0
 8009866:	bf18      	it	ne
 8009868:	2001      	movne	r0, #1
 800986a:	b002      	add	sp, #8
 800986c:	4770      	bx	lr
 800986e:	4610      	mov	r0, r2
 8009870:	e7fb      	b.n	800986a <__ascii_mbtowc+0x16>
 8009872:	f06f 0001 	mvn.w	r0, #1
 8009876:	e7f8      	b.n	800986a <__ascii_mbtowc+0x16>

08009878 <__sflush_r>:
 8009878:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800987c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800987e:	0716      	lsls	r6, r2, #28
 8009880:	4605      	mov	r5, r0
 8009882:	460c      	mov	r4, r1
 8009884:	d454      	bmi.n	8009930 <__sflush_r+0xb8>
 8009886:	684b      	ldr	r3, [r1, #4]
 8009888:	2b00      	cmp	r3, #0
 800988a:	dc02      	bgt.n	8009892 <__sflush_r+0x1a>
 800988c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800988e:	2b00      	cmp	r3, #0
 8009890:	dd48      	ble.n	8009924 <__sflush_r+0xac>
 8009892:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009894:	2e00      	cmp	r6, #0
 8009896:	d045      	beq.n	8009924 <__sflush_r+0xac>
 8009898:	2300      	movs	r3, #0
 800989a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800989e:	682f      	ldr	r7, [r5, #0]
 80098a0:	6a21      	ldr	r1, [r4, #32]
 80098a2:	602b      	str	r3, [r5, #0]
 80098a4:	d030      	beq.n	8009908 <__sflush_r+0x90>
 80098a6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80098a8:	89a3      	ldrh	r3, [r4, #12]
 80098aa:	0759      	lsls	r1, r3, #29
 80098ac:	d505      	bpl.n	80098ba <__sflush_r+0x42>
 80098ae:	6863      	ldr	r3, [r4, #4]
 80098b0:	1ad2      	subs	r2, r2, r3
 80098b2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80098b4:	b10b      	cbz	r3, 80098ba <__sflush_r+0x42>
 80098b6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80098b8:	1ad2      	subs	r2, r2, r3
 80098ba:	2300      	movs	r3, #0
 80098bc:	4628      	mov	r0, r5
 80098be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80098c0:	6a21      	ldr	r1, [r4, #32]
 80098c2:	47b0      	blx	r6
 80098c4:	1c43      	adds	r3, r0, #1
 80098c6:	89a3      	ldrh	r3, [r4, #12]
 80098c8:	d106      	bne.n	80098d8 <__sflush_r+0x60>
 80098ca:	6829      	ldr	r1, [r5, #0]
 80098cc:	291d      	cmp	r1, #29
 80098ce:	d82b      	bhi.n	8009928 <__sflush_r+0xb0>
 80098d0:	4a28      	ldr	r2, [pc, #160]	@ (8009974 <__sflush_r+0xfc>)
 80098d2:	410a      	asrs	r2, r1
 80098d4:	07d6      	lsls	r6, r2, #31
 80098d6:	d427      	bmi.n	8009928 <__sflush_r+0xb0>
 80098d8:	2200      	movs	r2, #0
 80098da:	6062      	str	r2, [r4, #4]
 80098dc:	6922      	ldr	r2, [r4, #16]
 80098de:	04d9      	lsls	r1, r3, #19
 80098e0:	6022      	str	r2, [r4, #0]
 80098e2:	d504      	bpl.n	80098ee <__sflush_r+0x76>
 80098e4:	1c42      	adds	r2, r0, #1
 80098e6:	d101      	bne.n	80098ec <__sflush_r+0x74>
 80098e8:	682b      	ldr	r3, [r5, #0]
 80098ea:	b903      	cbnz	r3, 80098ee <__sflush_r+0x76>
 80098ec:	6560      	str	r0, [r4, #84]	@ 0x54
 80098ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098f0:	602f      	str	r7, [r5, #0]
 80098f2:	b1b9      	cbz	r1, 8009924 <__sflush_r+0xac>
 80098f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098f8:	4299      	cmp	r1, r3
 80098fa:	d002      	beq.n	8009902 <__sflush_r+0x8a>
 80098fc:	4628      	mov	r0, r5
 80098fe:	f000 fe35 	bl	800a56c <_free_r>
 8009902:	2300      	movs	r3, #0
 8009904:	6363      	str	r3, [r4, #52]	@ 0x34
 8009906:	e00d      	b.n	8009924 <__sflush_r+0xac>
 8009908:	2301      	movs	r3, #1
 800990a:	4628      	mov	r0, r5
 800990c:	47b0      	blx	r6
 800990e:	4602      	mov	r2, r0
 8009910:	1c50      	adds	r0, r2, #1
 8009912:	d1c9      	bne.n	80098a8 <__sflush_r+0x30>
 8009914:	682b      	ldr	r3, [r5, #0]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d0c6      	beq.n	80098a8 <__sflush_r+0x30>
 800991a:	2b1d      	cmp	r3, #29
 800991c:	d001      	beq.n	8009922 <__sflush_r+0xaa>
 800991e:	2b16      	cmp	r3, #22
 8009920:	d11d      	bne.n	800995e <__sflush_r+0xe6>
 8009922:	602f      	str	r7, [r5, #0]
 8009924:	2000      	movs	r0, #0
 8009926:	e021      	b.n	800996c <__sflush_r+0xf4>
 8009928:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800992c:	b21b      	sxth	r3, r3
 800992e:	e01a      	b.n	8009966 <__sflush_r+0xee>
 8009930:	690f      	ldr	r7, [r1, #16]
 8009932:	2f00      	cmp	r7, #0
 8009934:	d0f6      	beq.n	8009924 <__sflush_r+0xac>
 8009936:	0793      	lsls	r3, r2, #30
 8009938:	bf18      	it	ne
 800993a:	2300      	movne	r3, #0
 800993c:	680e      	ldr	r6, [r1, #0]
 800993e:	bf08      	it	eq
 8009940:	694b      	ldreq	r3, [r1, #20]
 8009942:	1bf6      	subs	r6, r6, r7
 8009944:	600f      	str	r7, [r1, #0]
 8009946:	608b      	str	r3, [r1, #8]
 8009948:	2e00      	cmp	r6, #0
 800994a:	ddeb      	ble.n	8009924 <__sflush_r+0xac>
 800994c:	4633      	mov	r3, r6
 800994e:	463a      	mov	r2, r7
 8009950:	4628      	mov	r0, r5
 8009952:	6a21      	ldr	r1, [r4, #32]
 8009954:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009958:	47e0      	blx	ip
 800995a:	2800      	cmp	r0, #0
 800995c:	dc07      	bgt.n	800996e <__sflush_r+0xf6>
 800995e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009962:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009966:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800996a:	81a3      	strh	r3, [r4, #12]
 800996c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800996e:	4407      	add	r7, r0
 8009970:	1a36      	subs	r6, r6, r0
 8009972:	e7e9      	b.n	8009948 <__sflush_r+0xd0>
 8009974:	dfbffffe 	.word	0xdfbffffe

08009978 <_fflush_r>:
 8009978:	b538      	push	{r3, r4, r5, lr}
 800997a:	690b      	ldr	r3, [r1, #16]
 800997c:	4605      	mov	r5, r0
 800997e:	460c      	mov	r4, r1
 8009980:	b913      	cbnz	r3, 8009988 <_fflush_r+0x10>
 8009982:	2500      	movs	r5, #0
 8009984:	4628      	mov	r0, r5
 8009986:	bd38      	pop	{r3, r4, r5, pc}
 8009988:	b118      	cbz	r0, 8009992 <_fflush_r+0x1a>
 800998a:	6a03      	ldr	r3, [r0, #32]
 800998c:	b90b      	cbnz	r3, 8009992 <_fflush_r+0x1a>
 800998e:	f7fd fcb1 	bl	80072f4 <__sinit>
 8009992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d0f3      	beq.n	8009982 <_fflush_r+0xa>
 800999a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800999c:	07d0      	lsls	r0, r2, #31
 800999e:	d404      	bmi.n	80099aa <_fflush_r+0x32>
 80099a0:	0599      	lsls	r1, r3, #22
 80099a2:	d402      	bmi.n	80099aa <_fflush_r+0x32>
 80099a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099a6:	f7fe fba0 	bl	80080ea <__retarget_lock_acquire_recursive>
 80099aa:	4628      	mov	r0, r5
 80099ac:	4621      	mov	r1, r4
 80099ae:	f7ff ff63 	bl	8009878 <__sflush_r>
 80099b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80099b4:	4605      	mov	r5, r0
 80099b6:	07da      	lsls	r2, r3, #31
 80099b8:	d4e4      	bmi.n	8009984 <_fflush_r+0xc>
 80099ba:	89a3      	ldrh	r3, [r4, #12]
 80099bc:	059b      	lsls	r3, r3, #22
 80099be:	d4e1      	bmi.n	8009984 <_fflush_r+0xc>
 80099c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80099c2:	f7fe fb93 	bl	80080ec <__retarget_lock_release_recursive>
 80099c6:	e7dd      	b.n	8009984 <_fflush_r+0xc>

080099c8 <__malloc_lock>:
 80099c8:	4801      	ldr	r0, [pc, #4]	@ (80099d0 <__malloc_lock+0x8>)
 80099ca:	f7fe bb8e 	b.w	80080ea <__retarget_lock_acquire_recursive>
 80099ce:	bf00      	nop
 80099d0:	2000051c 	.word	0x2000051c

080099d4 <__malloc_unlock>:
 80099d4:	4801      	ldr	r0, [pc, #4]	@ (80099dc <__malloc_unlock+0x8>)
 80099d6:	f7fe bb89 	b.w	80080ec <__retarget_lock_release_recursive>
 80099da:	bf00      	nop
 80099dc:	2000051c 	.word	0x2000051c

080099e0 <_Balloc>:
 80099e0:	b570      	push	{r4, r5, r6, lr}
 80099e2:	69c6      	ldr	r6, [r0, #28]
 80099e4:	4604      	mov	r4, r0
 80099e6:	460d      	mov	r5, r1
 80099e8:	b976      	cbnz	r6, 8009a08 <_Balloc+0x28>
 80099ea:	2010      	movs	r0, #16
 80099ec:	f7ff fe88 	bl	8009700 <malloc>
 80099f0:	4602      	mov	r2, r0
 80099f2:	61e0      	str	r0, [r4, #28]
 80099f4:	b920      	cbnz	r0, 8009a00 <_Balloc+0x20>
 80099f6:	216b      	movs	r1, #107	@ 0x6b
 80099f8:	4b17      	ldr	r3, [pc, #92]	@ (8009a58 <_Balloc+0x78>)
 80099fa:	4818      	ldr	r0, [pc, #96]	@ (8009a5c <_Balloc+0x7c>)
 80099fc:	f000 fd84 	bl	800a508 <__assert_func>
 8009a00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a04:	6006      	str	r6, [r0, #0]
 8009a06:	60c6      	str	r6, [r0, #12]
 8009a08:	69e6      	ldr	r6, [r4, #28]
 8009a0a:	68f3      	ldr	r3, [r6, #12]
 8009a0c:	b183      	cbz	r3, 8009a30 <_Balloc+0x50>
 8009a0e:	69e3      	ldr	r3, [r4, #28]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a16:	b9b8      	cbnz	r0, 8009a48 <_Balloc+0x68>
 8009a18:	2101      	movs	r1, #1
 8009a1a:	fa01 f605 	lsl.w	r6, r1, r5
 8009a1e:	1d72      	adds	r2, r6, #5
 8009a20:	4620      	mov	r0, r4
 8009a22:	0092      	lsls	r2, r2, #2
 8009a24:	f000 fd8e 	bl	800a544 <_calloc_r>
 8009a28:	b160      	cbz	r0, 8009a44 <_Balloc+0x64>
 8009a2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a2e:	e00e      	b.n	8009a4e <_Balloc+0x6e>
 8009a30:	2221      	movs	r2, #33	@ 0x21
 8009a32:	2104      	movs	r1, #4
 8009a34:	4620      	mov	r0, r4
 8009a36:	f000 fd85 	bl	800a544 <_calloc_r>
 8009a3a:	69e3      	ldr	r3, [r4, #28]
 8009a3c:	60f0      	str	r0, [r6, #12]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d1e4      	bne.n	8009a0e <_Balloc+0x2e>
 8009a44:	2000      	movs	r0, #0
 8009a46:	bd70      	pop	{r4, r5, r6, pc}
 8009a48:	6802      	ldr	r2, [r0, #0]
 8009a4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a4e:	2300      	movs	r3, #0
 8009a50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a54:	e7f7      	b.n	8009a46 <_Balloc+0x66>
 8009a56:	bf00      	nop
 8009a58:	0800adfe 	.word	0x0800adfe
 8009a5c:	0800aeef 	.word	0x0800aeef

08009a60 <_Bfree>:
 8009a60:	b570      	push	{r4, r5, r6, lr}
 8009a62:	69c6      	ldr	r6, [r0, #28]
 8009a64:	4605      	mov	r5, r0
 8009a66:	460c      	mov	r4, r1
 8009a68:	b976      	cbnz	r6, 8009a88 <_Bfree+0x28>
 8009a6a:	2010      	movs	r0, #16
 8009a6c:	f7ff fe48 	bl	8009700 <malloc>
 8009a70:	4602      	mov	r2, r0
 8009a72:	61e8      	str	r0, [r5, #28]
 8009a74:	b920      	cbnz	r0, 8009a80 <_Bfree+0x20>
 8009a76:	218f      	movs	r1, #143	@ 0x8f
 8009a78:	4b08      	ldr	r3, [pc, #32]	@ (8009a9c <_Bfree+0x3c>)
 8009a7a:	4809      	ldr	r0, [pc, #36]	@ (8009aa0 <_Bfree+0x40>)
 8009a7c:	f000 fd44 	bl	800a508 <__assert_func>
 8009a80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a84:	6006      	str	r6, [r0, #0]
 8009a86:	60c6      	str	r6, [r0, #12]
 8009a88:	b13c      	cbz	r4, 8009a9a <_Bfree+0x3a>
 8009a8a:	69eb      	ldr	r3, [r5, #28]
 8009a8c:	6862      	ldr	r2, [r4, #4]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a94:	6021      	str	r1, [r4, #0]
 8009a96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a9a:	bd70      	pop	{r4, r5, r6, pc}
 8009a9c:	0800adfe 	.word	0x0800adfe
 8009aa0:	0800aeef 	.word	0x0800aeef

08009aa4 <__multadd>:
 8009aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa8:	4607      	mov	r7, r0
 8009aaa:	460c      	mov	r4, r1
 8009aac:	461e      	mov	r6, r3
 8009aae:	2000      	movs	r0, #0
 8009ab0:	690d      	ldr	r5, [r1, #16]
 8009ab2:	f101 0c14 	add.w	ip, r1, #20
 8009ab6:	f8dc 3000 	ldr.w	r3, [ip]
 8009aba:	3001      	adds	r0, #1
 8009abc:	b299      	uxth	r1, r3
 8009abe:	fb02 6101 	mla	r1, r2, r1, r6
 8009ac2:	0c1e      	lsrs	r6, r3, #16
 8009ac4:	0c0b      	lsrs	r3, r1, #16
 8009ac6:	fb02 3306 	mla	r3, r2, r6, r3
 8009aca:	b289      	uxth	r1, r1
 8009acc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ad0:	4285      	cmp	r5, r0
 8009ad2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ad6:	f84c 1b04 	str.w	r1, [ip], #4
 8009ada:	dcec      	bgt.n	8009ab6 <__multadd+0x12>
 8009adc:	b30e      	cbz	r6, 8009b22 <__multadd+0x7e>
 8009ade:	68a3      	ldr	r3, [r4, #8]
 8009ae0:	42ab      	cmp	r3, r5
 8009ae2:	dc19      	bgt.n	8009b18 <__multadd+0x74>
 8009ae4:	6861      	ldr	r1, [r4, #4]
 8009ae6:	4638      	mov	r0, r7
 8009ae8:	3101      	adds	r1, #1
 8009aea:	f7ff ff79 	bl	80099e0 <_Balloc>
 8009aee:	4680      	mov	r8, r0
 8009af0:	b928      	cbnz	r0, 8009afe <__multadd+0x5a>
 8009af2:	4602      	mov	r2, r0
 8009af4:	21ba      	movs	r1, #186	@ 0xba
 8009af6:	4b0c      	ldr	r3, [pc, #48]	@ (8009b28 <__multadd+0x84>)
 8009af8:	480c      	ldr	r0, [pc, #48]	@ (8009b2c <__multadd+0x88>)
 8009afa:	f000 fd05 	bl	800a508 <__assert_func>
 8009afe:	6922      	ldr	r2, [r4, #16]
 8009b00:	f104 010c 	add.w	r1, r4, #12
 8009b04:	3202      	adds	r2, #2
 8009b06:	0092      	lsls	r2, r2, #2
 8009b08:	300c      	adds	r0, #12
 8009b0a:	f7fe fafe 	bl	800810a <memcpy>
 8009b0e:	4621      	mov	r1, r4
 8009b10:	4638      	mov	r0, r7
 8009b12:	f7ff ffa5 	bl	8009a60 <_Bfree>
 8009b16:	4644      	mov	r4, r8
 8009b18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b1c:	3501      	adds	r5, #1
 8009b1e:	615e      	str	r6, [r3, #20]
 8009b20:	6125      	str	r5, [r4, #16]
 8009b22:	4620      	mov	r0, r4
 8009b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b28:	0800ae6d 	.word	0x0800ae6d
 8009b2c:	0800aeef 	.word	0x0800aeef

08009b30 <__s2b>:
 8009b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b34:	4615      	mov	r5, r2
 8009b36:	2209      	movs	r2, #9
 8009b38:	461f      	mov	r7, r3
 8009b3a:	3308      	adds	r3, #8
 8009b3c:	460c      	mov	r4, r1
 8009b3e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b42:	4606      	mov	r6, r0
 8009b44:	2201      	movs	r2, #1
 8009b46:	2100      	movs	r1, #0
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	db09      	blt.n	8009b60 <__s2b+0x30>
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	f7ff ff47 	bl	80099e0 <_Balloc>
 8009b52:	b940      	cbnz	r0, 8009b66 <__s2b+0x36>
 8009b54:	4602      	mov	r2, r0
 8009b56:	21d3      	movs	r1, #211	@ 0xd3
 8009b58:	4b18      	ldr	r3, [pc, #96]	@ (8009bbc <__s2b+0x8c>)
 8009b5a:	4819      	ldr	r0, [pc, #100]	@ (8009bc0 <__s2b+0x90>)
 8009b5c:	f000 fcd4 	bl	800a508 <__assert_func>
 8009b60:	0052      	lsls	r2, r2, #1
 8009b62:	3101      	adds	r1, #1
 8009b64:	e7f0      	b.n	8009b48 <__s2b+0x18>
 8009b66:	9b08      	ldr	r3, [sp, #32]
 8009b68:	2d09      	cmp	r5, #9
 8009b6a:	6143      	str	r3, [r0, #20]
 8009b6c:	f04f 0301 	mov.w	r3, #1
 8009b70:	6103      	str	r3, [r0, #16]
 8009b72:	dd16      	ble.n	8009ba2 <__s2b+0x72>
 8009b74:	f104 0909 	add.w	r9, r4, #9
 8009b78:	46c8      	mov	r8, r9
 8009b7a:	442c      	add	r4, r5
 8009b7c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009b80:	4601      	mov	r1, r0
 8009b82:	220a      	movs	r2, #10
 8009b84:	4630      	mov	r0, r6
 8009b86:	3b30      	subs	r3, #48	@ 0x30
 8009b88:	f7ff ff8c 	bl	8009aa4 <__multadd>
 8009b8c:	45a0      	cmp	r8, r4
 8009b8e:	d1f5      	bne.n	8009b7c <__s2b+0x4c>
 8009b90:	f1a5 0408 	sub.w	r4, r5, #8
 8009b94:	444c      	add	r4, r9
 8009b96:	1b2d      	subs	r5, r5, r4
 8009b98:	1963      	adds	r3, r4, r5
 8009b9a:	42bb      	cmp	r3, r7
 8009b9c:	db04      	blt.n	8009ba8 <__s2b+0x78>
 8009b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ba2:	2509      	movs	r5, #9
 8009ba4:	340a      	adds	r4, #10
 8009ba6:	e7f6      	b.n	8009b96 <__s2b+0x66>
 8009ba8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009bac:	4601      	mov	r1, r0
 8009bae:	220a      	movs	r2, #10
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	3b30      	subs	r3, #48	@ 0x30
 8009bb4:	f7ff ff76 	bl	8009aa4 <__multadd>
 8009bb8:	e7ee      	b.n	8009b98 <__s2b+0x68>
 8009bba:	bf00      	nop
 8009bbc:	0800ae6d 	.word	0x0800ae6d
 8009bc0:	0800aeef 	.word	0x0800aeef

08009bc4 <__hi0bits>:
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009bca:	bf3a      	itte	cc
 8009bcc:	0403      	lslcc	r3, r0, #16
 8009bce:	2010      	movcc	r0, #16
 8009bd0:	2000      	movcs	r0, #0
 8009bd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009bd6:	bf3c      	itt	cc
 8009bd8:	021b      	lslcc	r3, r3, #8
 8009bda:	3008      	addcc	r0, #8
 8009bdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009be0:	bf3c      	itt	cc
 8009be2:	011b      	lslcc	r3, r3, #4
 8009be4:	3004      	addcc	r0, #4
 8009be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bea:	bf3c      	itt	cc
 8009bec:	009b      	lslcc	r3, r3, #2
 8009bee:	3002      	addcc	r0, #2
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	db05      	blt.n	8009c00 <__hi0bits+0x3c>
 8009bf4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009bf8:	f100 0001 	add.w	r0, r0, #1
 8009bfc:	bf08      	it	eq
 8009bfe:	2020      	moveq	r0, #32
 8009c00:	4770      	bx	lr

08009c02 <__lo0bits>:
 8009c02:	6803      	ldr	r3, [r0, #0]
 8009c04:	4602      	mov	r2, r0
 8009c06:	f013 0007 	ands.w	r0, r3, #7
 8009c0a:	d00b      	beq.n	8009c24 <__lo0bits+0x22>
 8009c0c:	07d9      	lsls	r1, r3, #31
 8009c0e:	d421      	bmi.n	8009c54 <__lo0bits+0x52>
 8009c10:	0798      	lsls	r0, r3, #30
 8009c12:	bf49      	itett	mi
 8009c14:	085b      	lsrmi	r3, r3, #1
 8009c16:	089b      	lsrpl	r3, r3, #2
 8009c18:	2001      	movmi	r0, #1
 8009c1a:	6013      	strmi	r3, [r2, #0]
 8009c1c:	bf5c      	itt	pl
 8009c1e:	2002      	movpl	r0, #2
 8009c20:	6013      	strpl	r3, [r2, #0]
 8009c22:	4770      	bx	lr
 8009c24:	b299      	uxth	r1, r3
 8009c26:	b909      	cbnz	r1, 8009c2c <__lo0bits+0x2a>
 8009c28:	2010      	movs	r0, #16
 8009c2a:	0c1b      	lsrs	r3, r3, #16
 8009c2c:	b2d9      	uxtb	r1, r3
 8009c2e:	b909      	cbnz	r1, 8009c34 <__lo0bits+0x32>
 8009c30:	3008      	adds	r0, #8
 8009c32:	0a1b      	lsrs	r3, r3, #8
 8009c34:	0719      	lsls	r1, r3, #28
 8009c36:	bf04      	itt	eq
 8009c38:	091b      	lsreq	r3, r3, #4
 8009c3a:	3004      	addeq	r0, #4
 8009c3c:	0799      	lsls	r1, r3, #30
 8009c3e:	bf04      	itt	eq
 8009c40:	089b      	lsreq	r3, r3, #2
 8009c42:	3002      	addeq	r0, #2
 8009c44:	07d9      	lsls	r1, r3, #31
 8009c46:	d403      	bmi.n	8009c50 <__lo0bits+0x4e>
 8009c48:	085b      	lsrs	r3, r3, #1
 8009c4a:	f100 0001 	add.w	r0, r0, #1
 8009c4e:	d003      	beq.n	8009c58 <__lo0bits+0x56>
 8009c50:	6013      	str	r3, [r2, #0]
 8009c52:	4770      	bx	lr
 8009c54:	2000      	movs	r0, #0
 8009c56:	4770      	bx	lr
 8009c58:	2020      	movs	r0, #32
 8009c5a:	4770      	bx	lr

08009c5c <__i2b>:
 8009c5c:	b510      	push	{r4, lr}
 8009c5e:	460c      	mov	r4, r1
 8009c60:	2101      	movs	r1, #1
 8009c62:	f7ff febd 	bl	80099e0 <_Balloc>
 8009c66:	4602      	mov	r2, r0
 8009c68:	b928      	cbnz	r0, 8009c76 <__i2b+0x1a>
 8009c6a:	f240 1145 	movw	r1, #325	@ 0x145
 8009c6e:	4b04      	ldr	r3, [pc, #16]	@ (8009c80 <__i2b+0x24>)
 8009c70:	4804      	ldr	r0, [pc, #16]	@ (8009c84 <__i2b+0x28>)
 8009c72:	f000 fc49 	bl	800a508 <__assert_func>
 8009c76:	2301      	movs	r3, #1
 8009c78:	6144      	str	r4, [r0, #20]
 8009c7a:	6103      	str	r3, [r0, #16]
 8009c7c:	bd10      	pop	{r4, pc}
 8009c7e:	bf00      	nop
 8009c80:	0800ae6d 	.word	0x0800ae6d
 8009c84:	0800aeef 	.word	0x0800aeef

08009c88 <__multiply>:
 8009c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c8c:	4614      	mov	r4, r2
 8009c8e:	690a      	ldr	r2, [r1, #16]
 8009c90:	6923      	ldr	r3, [r4, #16]
 8009c92:	460f      	mov	r7, r1
 8009c94:	429a      	cmp	r2, r3
 8009c96:	bfa2      	ittt	ge
 8009c98:	4623      	movge	r3, r4
 8009c9a:	460c      	movge	r4, r1
 8009c9c:	461f      	movge	r7, r3
 8009c9e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009ca2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009ca6:	68a3      	ldr	r3, [r4, #8]
 8009ca8:	6861      	ldr	r1, [r4, #4]
 8009caa:	eb0a 0609 	add.w	r6, sl, r9
 8009cae:	42b3      	cmp	r3, r6
 8009cb0:	b085      	sub	sp, #20
 8009cb2:	bfb8      	it	lt
 8009cb4:	3101      	addlt	r1, #1
 8009cb6:	f7ff fe93 	bl	80099e0 <_Balloc>
 8009cba:	b930      	cbnz	r0, 8009cca <__multiply+0x42>
 8009cbc:	4602      	mov	r2, r0
 8009cbe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009cc2:	4b43      	ldr	r3, [pc, #268]	@ (8009dd0 <__multiply+0x148>)
 8009cc4:	4843      	ldr	r0, [pc, #268]	@ (8009dd4 <__multiply+0x14c>)
 8009cc6:	f000 fc1f 	bl	800a508 <__assert_func>
 8009cca:	f100 0514 	add.w	r5, r0, #20
 8009cce:	462b      	mov	r3, r5
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009cd6:	4543      	cmp	r3, r8
 8009cd8:	d321      	bcc.n	8009d1e <__multiply+0x96>
 8009cda:	f107 0114 	add.w	r1, r7, #20
 8009cde:	f104 0214 	add.w	r2, r4, #20
 8009ce2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009ce6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009cea:	9302      	str	r3, [sp, #8]
 8009cec:	1b13      	subs	r3, r2, r4
 8009cee:	3b15      	subs	r3, #21
 8009cf0:	f023 0303 	bic.w	r3, r3, #3
 8009cf4:	3304      	adds	r3, #4
 8009cf6:	f104 0715 	add.w	r7, r4, #21
 8009cfa:	42ba      	cmp	r2, r7
 8009cfc:	bf38      	it	cc
 8009cfe:	2304      	movcc	r3, #4
 8009d00:	9301      	str	r3, [sp, #4]
 8009d02:	9b02      	ldr	r3, [sp, #8]
 8009d04:	9103      	str	r1, [sp, #12]
 8009d06:	428b      	cmp	r3, r1
 8009d08:	d80c      	bhi.n	8009d24 <__multiply+0x9c>
 8009d0a:	2e00      	cmp	r6, #0
 8009d0c:	dd03      	ble.n	8009d16 <__multiply+0x8e>
 8009d0e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d05a      	beq.n	8009dcc <__multiply+0x144>
 8009d16:	6106      	str	r6, [r0, #16]
 8009d18:	b005      	add	sp, #20
 8009d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d1e:	f843 2b04 	str.w	r2, [r3], #4
 8009d22:	e7d8      	b.n	8009cd6 <__multiply+0x4e>
 8009d24:	f8b1 a000 	ldrh.w	sl, [r1]
 8009d28:	f1ba 0f00 	cmp.w	sl, #0
 8009d2c:	d023      	beq.n	8009d76 <__multiply+0xee>
 8009d2e:	46a9      	mov	r9, r5
 8009d30:	f04f 0c00 	mov.w	ip, #0
 8009d34:	f104 0e14 	add.w	lr, r4, #20
 8009d38:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d3c:	f8d9 3000 	ldr.w	r3, [r9]
 8009d40:	fa1f fb87 	uxth.w	fp, r7
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	fb0a 330b 	mla	r3, sl, fp, r3
 8009d4a:	4463      	add	r3, ip
 8009d4c:	f8d9 c000 	ldr.w	ip, [r9]
 8009d50:	0c3f      	lsrs	r7, r7, #16
 8009d52:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009d56:	fb0a c707 	mla	r7, sl, r7, ip
 8009d5a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009d5e:	b29b      	uxth	r3, r3
 8009d60:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009d64:	4572      	cmp	r2, lr
 8009d66:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009d6a:	f849 3b04 	str.w	r3, [r9], #4
 8009d6e:	d8e3      	bhi.n	8009d38 <__multiply+0xb0>
 8009d70:	9b01      	ldr	r3, [sp, #4]
 8009d72:	f845 c003 	str.w	ip, [r5, r3]
 8009d76:	9b03      	ldr	r3, [sp, #12]
 8009d78:	3104      	adds	r1, #4
 8009d7a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009d7e:	f1b9 0f00 	cmp.w	r9, #0
 8009d82:	d021      	beq.n	8009dc8 <__multiply+0x140>
 8009d84:	46ae      	mov	lr, r5
 8009d86:	f04f 0a00 	mov.w	sl, #0
 8009d8a:	682b      	ldr	r3, [r5, #0]
 8009d8c:	f104 0c14 	add.w	ip, r4, #20
 8009d90:	f8bc b000 	ldrh.w	fp, [ip]
 8009d94:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009d98:	b29b      	uxth	r3, r3
 8009d9a:	fb09 770b 	mla	r7, r9, fp, r7
 8009d9e:	4457      	add	r7, sl
 8009da0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009da4:	f84e 3b04 	str.w	r3, [lr], #4
 8009da8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009dac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009db0:	f8be 3000 	ldrh.w	r3, [lr]
 8009db4:	4562      	cmp	r2, ip
 8009db6:	fb09 330a 	mla	r3, r9, sl, r3
 8009dba:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009dbe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009dc2:	d8e5      	bhi.n	8009d90 <__multiply+0x108>
 8009dc4:	9f01      	ldr	r7, [sp, #4]
 8009dc6:	51eb      	str	r3, [r5, r7]
 8009dc8:	3504      	adds	r5, #4
 8009dca:	e79a      	b.n	8009d02 <__multiply+0x7a>
 8009dcc:	3e01      	subs	r6, #1
 8009dce:	e79c      	b.n	8009d0a <__multiply+0x82>
 8009dd0:	0800ae6d 	.word	0x0800ae6d
 8009dd4:	0800aeef 	.word	0x0800aeef

08009dd8 <__pow5mult>:
 8009dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ddc:	4615      	mov	r5, r2
 8009dde:	f012 0203 	ands.w	r2, r2, #3
 8009de2:	4607      	mov	r7, r0
 8009de4:	460e      	mov	r6, r1
 8009de6:	d007      	beq.n	8009df8 <__pow5mult+0x20>
 8009de8:	4c25      	ldr	r4, [pc, #148]	@ (8009e80 <__pow5mult+0xa8>)
 8009dea:	3a01      	subs	r2, #1
 8009dec:	2300      	movs	r3, #0
 8009dee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009df2:	f7ff fe57 	bl	8009aa4 <__multadd>
 8009df6:	4606      	mov	r6, r0
 8009df8:	10ad      	asrs	r5, r5, #2
 8009dfa:	d03d      	beq.n	8009e78 <__pow5mult+0xa0>
 8009dfc:	69fc      	ldr	r4, [r7, #28]
 8009dfe:	b97c      	cbnz	r4, 8009e20 <__pow5mult+0x48>
 8009e00:	2010      	movs	r0, #16
 8009e02:	f7ff fc7d 	bl	8009700 <malloc>
 8009e06:	4602      	mov	r2, r0
 8009e08:	61f8      	str	r0, [r7, #28]
 8009e0a:	b928      	cbnz	r0, 8009e18 <__pow5mult+0x40>
 8009e0c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009e10:	4b1c      	ldr	r3, [pc, #112]	@ (8009e84 <__pow5mult+0xac>)
 8009e12:	481d      	ldr	r0, [pc, #116]	@ (8009e88 <__pow5mult+0xb0>)
 8009e14:	f000 fb78 	bl	800a508 <__assert_func>
 8009e18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e1c:	6004      	str	r4, [r0, #0]
 8009e1e:	60c4      	str	r4, [r0, #12]
 8009e20:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009e24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e28:	b94c      	cbnz	r4, 8009e3e <__pow5mult+0x66>
 8009e2a:	f240 2171 	movw	r1, #625	@ 0x271
 8009e2e:	4638      	mov	r0, r7
 8009e30:	f7ff ff14 	bl	8009c5c <__i2b>
 8009e34:	2300      	movs	r3, #0
 8009e36:	4604      	mov	r4, r0
 8009e38:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e3c:	6003      	str	r3, [r0, #0]
 8009e3e:	f04f 0900 	mov.w	r9, #0
 8009e42:	07eb      	lsls	r3, r5, #31
 8009e44:	d50a      	bpl.n	8009e5c <__pow5mult+0x84>
 8009e46:	4631      	mov	r1, r6
 8009e48:	4622      	mov	r2, r4
 8009e4a:	4638      	mov	r0, r7
 8009e4c:	f7ff ff1c 	bl	8009c88 <__multiply>
 8009e50:	4680      	mov	r8, r0
 8009e52:	4631      	mov	r1, r6
 8009e54:	4638      	mov	r0, r7
 8009e56:	f7ff fe03 	bl	8009a60 <_Bfree>
 8009e5a:	4646      	mov	r6, r8
 8009e5c:	106d      	asrs	r5, r5, #1
 8009e5e:	d00b      	beq.n	8009e78 <__pow5mult+0xa0>
 8009e60:	6820      	ldr	r0, [r4, #0]
 8009e62:	b938      	cbnz	r0, 8009e74 <__pow5mult+0x9c>
 8009e64:	4622      	mov	r2, r4
 8009e66:	4621      	mov	r1, r4
 8009e68:	4638      	mov	r0, r7
 8009e6a:	f7ff ff0d 	bl	8009c88 <__multiply>
 8009e6e:	6020      	str	r0, [r4, #0]
 8009e70:	f8c0 9000 	str.w	r9, [r0]
 8009e74:	4604      	mov	r4, r0
 8009e76:	e7e4      	b.n	8009e42 <__pow5mult+0x6a>
 8009e78:	4630      	mov	r0, r6
 8009e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e7e:	bf00      	nop
 8009e80:	0800af48 	.word	0x0800af48
 8009e84:	0800adfe 	.word	0x0800adfe
 8009e88:	0800aeef 	.word	0x0800aeef

08009e8c <__lshift>:
 8009e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e90:	460c      	mov	r4, r1
 8009e92:	4607      	mov	r7, r0
 8009e94:	4691      	mov	r9, r2
 8009e96:	6923      	ldr	r3, [r4, #16]
 8009e98:	6849      	ldr	r1, [r1, #4]
 8009e9a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e9e:	68a3      	ldr	r3, [r4, #8]
 8009ea0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ea4:	f108 0601 	add.w	r6, r8, #1
 8009ea8:	42b3      	cmp	r3, r6
 8009eaa:	db0b      	blt.n	8009ec4 <__lshift+0x38>
 8009eac:	4638      	mov	r0, r7
 8009eae:	f7ff fd97 	bl	80099e0 <_Balloc>
 8009eb2:	4605      	mov	r5, r0
 8009eb4:	b948      	cbnz	r0, 8009eca <__lshift+0x3e>
 8009eb6:	4602      	mov	r2, r0
 8009eb8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009ebc:	4b27      	ldr	r3, [pc, #156]	@ (8009f5c <__lshift+0xd0>)
 8009ebe:	4828      	ldr	r0, [pc, #160]	@ (8009f60 <__lshift+0xd4>)
 8009ec0:	f000 fb22 	bl	800a508 <__assert_func>
 8009ec4:	3101      	adds	r1, #1
 8009ec6:	005b      	lsls	r3, r3, #1
 8009ec8:	e7ee      	b.n	8009ea8 <__lshift+0x1c>
 8009eca:	2300      	movs	r3, #0
 8009ecc:	f100 0114 	add.w	r1, r0, #20
 8009ed0:	f100 0210 	add.w	r2, r0, #16
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	4553      	cmp	r3, sl
 8009ed8:	db33      	blt.n	8009f42 <__lshift+0xb6>
 8009eda:	6920      	ldr	r0, [r4, #16]
 8009edc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009ee0:	f104 0314 	add.w	r3, r4, #20
 8009ee4:	f019 091f 	ands.w	r9, r9, #31
 8009ee8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009eec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ef0:	d02b      	beq.n	8009f4a <__lshift+0xbe>
 8009ef2:	468a      	mov	sl, r1
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f1c9 0e20 	rsb	lr, r9, #32
 8009efa:	6818      	ldr	r0, [r3, #0]
 8009efc:	fa00 f009 	lsl.w	r0, r0, r9
 8009f00:	4310      	orrs	r0, r2
 8009f02:	f84a 0b04 	str.w	r0, [sl], #4
 8009f06:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f0a:	459c      	cmp	ip, r3
 8009f0c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009f10:	d8f3      	bhi.n	8009efa <__lshift+0x6e>
 8009f12:	ebac 0304 	sub.w	r3, ip, r4
 8009f16:	3b15      	subs	r3, #21
 8009f18:	f023 0303 	bic.w	r3, r3, #3
 8009f1c:	3304      	adds	r3, #4
 8009f1e:	f104 0015 	add.w	r0, r4, #21
 8009f22:	4584      	cmp	ip, r0
 8009f24:	bf38      	it	cc
 8009f26:	2304      	movcc	r3, #4
 8009f28:	50ca      	str	r2, [r1, r3]
 8009f2a:	b10a      	cbz	r2, 8009f30 <__lshift+0xa4>
 8009f2c:	f108 0602 	add.w	r6, r8, #2
 8009f30:	3e01      	subs	r6, #1
 8009f32:	4638      	mov	r0, r7
 8009f34:	4621      	mov	r1, r4
 8009f36:	612e      	str	r6, [r5, #16]
 8009f38:	f7ff fd92 	bl	8009a60 <_Bfree>
 8009f3c:	4628      	mov	r0, r5
 8009f3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f42:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f46:	3301      	adds	r3, #1
 8009f48:	e7c5      	b.n	8009ed6 <__lshift+0x4a>
 8009f4a:	3904      	subs	r1, #4
 8009f4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f50:	459c      	cmp	ip, r3
 8009f52:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f56:	d8f9      	bhi.n	8009f4c <__lshift+0xc0>
 8009f58:	e7ea      	b.n	8009f30 <__lshift+0xa4>
 8009f5a:	bf00      	nop
 8009f5c:	0800ae6d 	.word	0x0800ae6d
 8009f60:	0800aeef 	.word	0x0800aeef

08009f64 <__mcmp>:
 8009f64:	4603      	mov	r3, r0
 8009f66:	690a      	ldr	r2, [r1, #16]
 8009f68:	6900      	ldr	r0, [r0, #16]
 8009f6a:	b530      	push	{r4, r5, lr}
 8009f6c:	1a80      	subs	r0, r0, r2
 8009f6e:	d10e      	bne.n	8009f8e <__mcmp+0x2a>
 8009f70:	3314      	adds	r3, #20
 8009f72:	3114      	adds	r1, #20
 8009f74:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009f78:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009f7c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009f80:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009f84:	4295      	cmp	r5, r2
 8009f86:	d003      	beq.n	8009f90 <__mcmp+0x2c>
 8009f88:	d205      	bcs.n	8009f96 <__mcmp+0x32>
 8009f8a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009f8e:	bd30      	pop	{r4, r5, pc}
 8009f90:	42a3      	cmp	r3, r4
 8009f92:	d3f3      	bcc.n	8009f7c <__mcmp+0x18>
 8009f94:	e7fb      	b.n	8009f8e <__mcmp+0x2a>
 8009f96:	2001      	movs	r0, #1
 8009f98:	e7f9      	b.n	8009f8e <__mcmp+0x2a>
	...

08009f9c <__mdiff>:
 8009f9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa0:	4689      	mov	r9, r1
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	4611      	mov	r1, r2
 8009fa6:	4648      	mov	r0, r9
 8009fa8:	4614      	mov	r4, r2
 8009faa:	f7ff ffdb 	bl	8009f64 <__mcmp>
 8009fae:	1e05      	subs	r5, r0, #0
 8009fb0:	d112      	bne.n	8009fd8 <__mdiff+0x3c>
 8009fb2:	4629      	mov	r1, r5
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	f7ff fd13 	bl	80099e0 <_Balloc>
 8009fba:	4602      	mov	r2, r0
 8009fbc:	b928      	cbnz	r0, 8009fca <__mdiff+0x2e>
 8009fbe:	f240 2137 	movw	r1, #567	@ 0x237
 8009fc2:	4b3e      	ldr	r3, [pc, #248]	@ (800a0bc <__mdiff+0x120>)
 8009fc4:	483e      	ldr	r0, [pc, #248]	@ (800a0c0 <__mdiff+0x124>)
 8009fc6:	f000 fa9f 	bl	800a508 <__assert_func>
 8009fca:	2301      	movs	r3, #1
 8009fcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009fd0:	4610      	mov	r0, r2
 8009fd2:	b003      	add	sp, #12
 8009fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fd8:	bfbc      	itt	lt
 8009fda:	464b      	movlt	r3, r9
 8009fdc:	46a1      	movlt	r9, r4
 8009fde:	4630      	mov	r0, r6
 8009fe0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009fe4:	bfba      	itte	lt
 8009fe6:	461c      	movlt	r4, r3
 8009fe8:	2501      	movlt	r5, #1
 8009fea:	2500      	movge	r5, #0
 8009fec:	f7ff fcf8 	bl	80099e0 <_Balloc>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	b918      	cbnz	r0, 8009ffc <__mdiff+0x60>
 8009ff4:	f240 2145 	movw	r1, #581	@ 0x245
 8009ff8:	4b30      	ldr	r3, [pc, #192]	@ (800a0bc <__mdiff+0x120>)
 8009ffa:	e7e3      	b.n	8009fc4 <__mdiff+0x28>
 8009ffc:	f100 0b14 	add.w	fp, r0, #20
 800a000:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a004:	f109 0310 	add.w	r3, r9, #16
 800a008:	60c5      	str	r5, [r0, #12]
 800a00a:	f04f 0c00 	mov.w	ip, #0
 800a00e:	f109 0514 	add.w	r5, r9, #20
 800a012:	46d9      	mov	r9, fp
 800a014:	6926      	ldr	r6, [r4, #16]
 800a016:	f104 0e14 	add.w	lr, r4, #20
 800a01a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a01e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a022:	9301      	str	r3, [sp, #4]
 800a024:	9b01      	ldr	r3, [sp, #4]
 800a026:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a02a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a02e:	b281      	uxth	r1, r0
 800a030:	9301      	str	r3, [sp, #4]
 800a032:	fa1f f38a 	uxth.w	r3, sl
 800a036:	1a5b      	subs	r3, r3, r1
 800a038:	0c00      	lsrs	r0, r0, #16
 800a03a:	4463      	add	r3, ip
 800a03c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a040:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a044:	b29b      	uxth	r3, r3
 800a046:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a04a:	4576      	cmp	r6, lr
 800a04c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a050:	f849 3b04 	str.w	r3, [r9], #4
 800a054:	d8e6      	bhi.n	800a024 <__mdiff+0x88>
 800a056:	1b33      	subs	r3, r6, r4
 800a058:	3b15      	subs	r3, #21
 800a05a:	f023 0303 	bic.w	r3, r3, #3
 800a05e:	3415      	adds	r4, #21
 800a060:	3304      	adds	r3, #4
 800a062:	42a6      	cmp	r6, r4
 800a064:	bf38      	it	cc
 800a066:	2304      	movcc	r3, #4
 800a068:	441d      	add	r5, r3
 800a06a:	445b      	add	r3, fp
 800a06c:	461e      	mov	r6, r3
 800a06e:	462c      	mov	r4, r5
 800a070:	4544      	cmp	r4, r8
 800a072:	d30e      	bcc.n	800a092 <__mdiff+0xf6>
 800a074:	f108 0103 	add.w	r1, r8, #3
 800a078:	1b49      	subs	r1, r1, r5
 800a07a:	f021 0103 	bic.w	r1, r1, #3
 800a07e:	3d03      	subs	r5, #3
 800a080:	45a8      	cmp	r8, r5
 800a082:	bf38      	it	cc
 800a084:	2100      	movcc	r1, #0
 800a086:	440b      	add	r3, r1
 800a088:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a08c:	b199      	cbz	r1, 800a0b6 <__mdiff+0x11a>
 800a08e:	6117      	str	r7, [r2, #16]
 800a090:	e79e      	b.n	8009fd0 <__mdiff+0x34>
 800a092:	46e6      	mov	lr, ip
 800a094:	f854 1b04 	ldr.w	r1, [r4], #4
 800a098:	fa1f fc81 	uxth.w	ip, r1
 800a09c:	44f4      	add	ip, lr
 800a09e:	0c08      	lsrs	r0, r1, #16
 800a0a0:	4471      	add	r1, lr
 800a0a2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a0a6:	b289      	uxth	r1, r1
 800a0a8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a0ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a0b0:	f846 1b04 	str.w	r1, [r6], #4
 800a0b4:	e7dc      	b.n	800a070 <__mdiff+0xd4>
 800a0b6:	3f01      	subs	r7, #1
 800a0b8:	e7e6      	b.n	800a088 <__mdiff+0xec>
 800a0ba:	bf00      	nop
 800a0bc:	0800ae6d 	.word	0x0800ae6d
 800a0c0:	0800aeef 	.word	0x0800aeef

0800a0c4 <__ulp>:
 800a0c4:	4b0e      	ldr	r3, [pc, #56]	@ (800a100 <__ulp+0x3c>)
 800a0c6:	400b      	ands	r3, r1
 800a0c8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	dc08      	bgt.n	800a0e2 <__ulp+0x1e>
 800a0d0:	425b      	negs	r3, r3
 800a0d2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a0d6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a0da:	da04      	bge.n	800a0e6 <__ulp+0x22>
 800a0dc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a0e0:	4113      	asrs	r3, r2
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	e008      	b.n	800a0f8 <__ulp+0x34>
 800a0e6:	f1a2 0314 	sub.w	r3, r2, #20
 800a0ea:	2b1e      	cmp	r3, #30
 800a0ec:	bfd6      	itet	le
 800a0ee:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a0f2:	2201      	movgt	r2, #1
 800a0f4:	40da      	lsrle	r2, r3
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	4610      	mov	r0, r2
 800a0fc:	4770      	bx	lr
 800a0fe:	bf00      	nop
 800a100:	7ff00000 	.word	0x7ff00000

0800a104 <__b2d>:
 800a104:	6902      	ldr	r2, [r0, #16]
 800a106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a108:	f100 0614 	add.w	r6, r0, #20
 800a10c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800a110:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800a114:	4f1e      	ldr	r7, [pc, #120]	@ (800a190 <__b2d+0x8c>)
 800a116:	4620      	mov	r0, r4
 800a118:	f7ff fd54 	bl	8009bc4 <__hi0bits>
 800a11c:	4603      	mov	r3, r0
 800a11e:	f1c0 0020 	rsb	r0, r0, #32
 800a122:	2b0a      	cmp	r3, #10
 800a124:	f1a2 0504 	sub.w	r5, r2, #4
 800a128:	6008      	str	r0, [r1, #0]
 800a12a:	dc12      	bgt.n	800a152 <__b2d+0x4e>
 800a12c:	42ae      	cmp	r6, r5
 800a12e:	bf2c      	ite	cs
 800a130:	2200      	movcs	r2, #0
 800a132:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a136:	f1c3 0c0b 	rsb	ip, r3, #11
 800a13a:	3315      	adds	r3, #21
 800a13c:	fa24 fe0c 	lsr.w	lr, r4, ip
 800a140:	fa04 f303 	lsl.w	r3, r4, r3
 800a144:	fa22 f20c 	lsr.w	r2, r2, ip
 800a148:	ea4e 0107 	orr.w	r1, lr, r7
 800a14c:	431a      	orrs	r2, r3
 800a14e:	4610      	mov	r0, r2
 800a150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a152:	42ae      	cmp	r6, r5
 800a154:	bf36      	itet	cc
 800a156:	f1a2 0508 	subcc.w	r5, r2, #8
 800a15a:	2200      	movcs	r2, #0
 800a15c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800a160:	3b0b      	subs	r3, #11
 800a162:	d012      	beq.n	800a18a <__b2d+0x86>
 800a164:	f1c3 0720 	rsb	r7, r3, #32
 800a168:	fa22 f107 	lsr.w	r1, r2, r7
 800a16c:	409c      	lsls	r4, r3
 800a16e:	430c      	orrs	r4, r1
 800a170:	42b5      	cmp	r5, r6
 800a172:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800a176:	bf94      	ite	ls
 800a178:	2400      	movls	r4, #0
 800a17a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800a17e:	409a      	lsls	r2, r3
 800a180:	40fc      	lsrs	r4, r7
 800a182:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a186:	4322      	orrs	r2, r4
 800a188:	e7e1      	b.n	800a14e <__b2d+0x4a>
 800a18a:	ea44 0107 	orr.w	r1, r4, r7
 800a18e:	e7de      	b.n	800a14e <__b2d+0x4a>
 800a190:	3ff00000 	.word	0x3ff00000

0800a194 <__d2b>:
 800a194:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a198:	2101      	movs	r1, #1
 800a19a:	4690      	mov	r8, r2
 800a19c:	4699      	mov	r9, r3
 800a19e:	9e08      	ldr	r6, [sp, #32]
 800a1a0:	f7ff fc1e 	bl	80099e0 <_Balloc>
 800a1a4:	4604      	mov	r4, r0
 800a1a6:	b930      	cbnz	r0, 800a1b6 <__d2b+0x22>
 800a1a8:	4602      	mov	r2, r0
 800a1aa:	f240 310f 	movw	r1, #783	@ 0x30f
 800a1ae:	4b23      	ldr	r3, [pc, #140]	@ (800a23c <__d2b+0xa8>)
 800a1b0:	4823      	ldr	r0, [pc, #140]	@ (800a240 <__d2b+0xac>)
 800a1b2:	f000 f9a9 	bl	800a508 <__assert_func>
 800a1b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a1ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1be:	b10d      	cbz	r5, 800a1c4 <__d2b+0x30>
 800a1c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a1c4:	9301      	str	r3, [sp, #4]
 800a1c6:	f1b8 0300 	subs.w	r3, r8, #0
 800a1ca:	d024      	beq.n	800a216 <__d2b+0x82>
 800a1cc:	4668      	mov	r0, sp
 800a1ce:	9300      	str	r3, [sp, #0]
 800a1d0:	f7ff fd17 	bl	8009c02 <__lo0bits>
 800a1d4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a1d8:	b1d8      	cbz	r0, 800a212 <__d2b+0x7e>
 800a1da:	f1c0 0320 	rsb	r3, r0, #32
 800a1de:	fa02 f303 	lsl.w	r3, r2, r3
 800a1e2:	430b      	orrs	r3, r1
 800a1e4:	40c2      	lsrs	r2, r0
 800a1e6:	6163      	str	r3, [r4, #20]
 800a1e8:	9201      	str	r2, [sp, #4]
 800a1ea:	9b01      	ldr	r3, [sp, #4]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	bf0c      	ite	eq
 800a1f0:	2201      	moveq	r2, #1
 800a1f2:	2202      	movne	r2, #2
 800a1f4:	61a3      	str	r3, [r4, #24]
 800a1f6:	6122      	str	r2, [r4, #16]
 800a1f8:	b1ad      	cbz	r5, 800a226 <__d2b+0x92>
 800a1fa:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a1fe:	4405      	add	r5, r0
 800a200:	6035      	str	r5, [r6, #0]
 800a202:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a206:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a208:	6018      	str	r0, [r3, #0]
 800a20a:	4620      	mov	r0, r4
 800a20c:	b002      	add	sp, #8
 800a20e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a212:	6161      	str	r1, [r4, #20]
 800a214:	e7e9      	b.n	800a1ea <__d2b+0x56>
 800a216:	a801      	add	r0, sp, #4
 800a218:	f7ff fcf3 	bl	8009c02 <__lo0bits>
 800a21c:	9b01      	ldr	r3, [sp, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	6163      	str	r3, [r4, #20]
 800a222:	3020      	adds	r0, #32
 800a224:	e7e7      	b.n	800a1f6 <__d2b+0x62>
 800a226:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a22a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a22e:	6030      	str	r0, [r6, #0]
 800a230:	6918      	ldr	r0, [r3, #16]
 800a232:	f7ff fcc7 	bl	8009bc4 <__hi0bits>
 800a236:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a23a:	e7e4      	b.n	800a206 <__d2b+0x72>
 800a23c:	0800ae6d 	.word	0x0800ae6d
 800a240:	0800aeef 	.word	0x0800aeef

0800a244 <__ratio>:
 800a244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a248:	b085      	sub	sp, #20
 800a24a:	e9cd 1000 	strd	r1, r0, [sp]
 800a24e:	a902      	add	r1, sp, #8
 800a250:	f7ff ff58 	bl	800a104 <__b2d>
 800a254:	468b      	mov	fp, r1
 800a256:	4606      	mov	r6, r0
 800a258:	460f      	mov	r7, r1
 800a25a:	9800      	ldr	r0, [sp, #0]
 800a25c:	a903      	add	r1, sp, #12
 800a25e:	f7ff ff51 	bl	800a104 <__b2d>
 800a262:	460d      	mov	r5, r1
 800a264:	9b01      	ldr	r3, [sp, #4]
 800a266:	4689      	mov	r9, r1
 800a268:	6919      	ldr	r1, [r3, #16]
 800a26a:	9b00      	ldr	r3, [sp, #0]
 800a26c:	4604      	mov	r4, r0
 800a26e:	691b      	ldr	r3, [r3, #16]
 800a270:	4630      	mov	r0, r6
 800a272:	1ac9      	subs	r1, r1, r3
 800a274:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a278:	1a9b      	subs	r3, r3, r2
 800a27a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a27e:	2b00      	cmp	r3, #0
 800a280:	bfcd      	iteet	gt
 800a282:	463a      	movgt	r2, r7
 800a284:	462a      	movle	r2, r5
 800a286:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a28a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a28e:	bfd8      	it	le
 800a290:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a294:	464b      	mov	r3, r9
 800a296:	4622      	mov	r2, r4
 800a298:	4659      	mov	r1, fp
 800a29a:	f7f6 fa47 	bl	800072c <__aeabi_ddiv>
 800a29e:	b005      	add	sp, #20
 800a2a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a2a4 <__copybits>:
 800a2a4:	3901      	subs	r1, #1
 800a2a6:	b570      	push	{r4, r5, r6, lr}
 800a2a8:	1149      	asrs	r1, r1, #5
 800a2aa:	6914      	ldr	r4, [r2, #16]
 800a2ac:	3101      	adds	r1, #1
 800a2ae:	f102 0314 	add.w	r3, r2, #20
 800a2b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a2b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a2ba:	1f05      	subs	r5, r0, #4
 800a2bc:	42a3      	cmp	r3, r4
 800a2be:	d30c      	bcc.n	800a2da <__copybits+0x36>
 800a2c0:	1aa3      	subs	r3, r4, r2
 800a2c2:	3b11      	subs	r3, #17
 800a2c4:	f023 0303 	bic.w	r3, r3, #3
 800a2c8:	3211      	adds	r2, #17
 800a2ca:	42a2      	cmp	r2, r4
 800a2cc:	bf88      	it	hi
 800a2ce:	2300      	movhi	r3, #0
 800a2d0:	4418      	add	r0, r3
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	4288      	cmp	r0, r1
 800a2d6:	d305      	bcc.n	800a2e4 <__copybits+0x40>
 800a2d8:	bd70      	pop	{r4, r5, r6, pc}
 800a2da:	f853 6b04 	ldr.w	r6, [r3], #4
 800a2de:	f845 6f04 	str.w	r6, [r5, #4]!
 800a2e2:	e7eb      	b.n	800a2bc <__copybits+0x18>
 800a2e4:	f840 3b04 	str.w	r3, [r0], #4
 800a2e8:	e7f4      	b.n	800a2d4 <__copybits+0x30>

0800a2ea <__any_on>:
 800a2ea:	f100 0214 	add.w	r2, r0, #20
 800a2ee:	6900      	ldr	r0, [r0, #16]
 800a2f0:	114b      	asrs	r3, r1, #5
 800a2f2:	4298      	cmp	r0, r3
 800a2f4:	b510      	push	{r4, lr}
 800a2f6:	db11      	blt.n	800a31c <__any_on+0x32>
 800a2f8:	dd0a      	ble.n	800a310 <__any_on+0x26>
 800a2fa:	f011 011f 	ands.w	r1, r1, #31
 800a2fe:	d007      	beq.n	800a310 <__any_on+0x26>
 800a300:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a304:	fa24 f001 	lsr.w	r0, r4, r1
 800a308:	fa00 f101 	lsl.w	r1, r0, r1
 800a30c:	428c      	cmp	r4, r1
 800a30e:	d10b      	bne.n	800a328 <__any_on+0x3e>
 800a310:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a314:	4293      	cmp	r3, r2
 800a316:	d803      	bhi.n	800a320 <__any_on+0x36>
 800a318:	2000      	movs	r0, #0
 800a31a:	bd10      	pop	{r4, pc}
 800a31c:	4603      	mov	r3, r0
 800a31e:	e7f7      	b.n	800a310 <__any_on+0x26>
 800a320:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a324:	2900      	cmp	r1, #0
 800a326:	d0f5      	beq.n	800a314 <__any_on+0x2a>
 800a328:	2001      	movs	r0, #1
 800a32a:	e7f6      	b.n	800a31a <__any_on+0x30>

0800a32c <__sread>:
 800a32c:	b510      	push	{r4, lr}
 800a32e:	460c      	mov	r4, r1
 800a330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a334:	f000 f8b4 	bl	800a4a0 <_read_r>
 800a338:	2800      	cmp	r0, #0
 800a33a:	bfab      	itete	ge
 800a33c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a33e:	89a3      	ldrhlt	r3, [r4, #12]
 800a340:	181b      	addge	r3, r3, r0
 800a342:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a346:	bfac      	ite	ge
 800a348:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a34a:	81a3      	strhlt	r3, [r4, #12]
 800a34c:	bd10      	pop	{r4, pc}

0800a34e <__swrite>:
 800a34e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a352:	461f      	mov	r7, r3
 800a354:	898b      	ldrh	r3, [r1, #12]
 800a356:	4605      	mov	r5, r0
 800a358:	05db      	lsls	r3, r3, #23
 800a35a:	460c      	mov	r4, r1
 800a35c:	4616      	mov	r6, r2
 800a35e:	d505      	bpl.n	800a36c <__swrite+0x1e>
 800a360:	2302      	movs	r3, #2
 800a362:	2200      	movs	r2, #0
 800a364:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a368:	f000 f888 	bl	800a47c <_lseek_r>
 800a36c:	89a3      	ldrh	r3, [r4, #12]
 800a36e:	4632      	mov	r2, r6
 800a370:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a374:	81a3      	strh	r3, [r4, #12]
 800a376:	4628      	mov	r0, r5
 800a378:	463b      	mov	r3, r7
 800a37a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a37e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a382:	f000 b8af 	b.w	800a4e4 <_write_r>

0800a386 <__sseek>:
 800a386:	b510      	push	{r4, lr}
 800a388:	460c      	mov	r4, r1
 800a38a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a38e:	f000 f875 	bl	800a47c <_lseek_r>
 800a392:	1c43      	adds	r3, r0, #1
 800a394:	89a3      	ldrh	r3, [r4, #12]
 800a396:	bf15      	itete	ne
 800a398:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a39a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a39e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a3a2:	81a3      	strheq	r3, [r4, #12]
 800a3a4:	bf18      	it	ne
 800a3a6:	81a3      	strhne	r3, [r4, #12]
 800a3a8:	bd10      	pop	{r4, pc}

0800a3aa <__sclose>:
 800a3aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ae:	f000 b855 	b.w	800a45c <_close_r>

0800a3b2 <_realloc_r>:
 800a3b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3b6:	4680      	mov	r8, r0
 800a3b8:	4615      	mov	r5, r2
 800a3ba:	460c      	mov	r4, r1
 800a3bc:	b921      	cbnz	r1, 800a3c8 <_realloc_r+0x16>
 800a3be:	4611      	mov	r1, r2
 800a3c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3c4:	f7ff b9c6 	b.w	8009754 <_malloc_r>
 800a3c8:	b92a      	cbnz	r2, 800a3d6 <_realloc_r+0x24>
 800a3ca:	f000 f8cf 	bl	800a56c <_free_r>
 800a3ce:	2400      	movs	r4, #0
 800a3d0:	4620      	mov	r0, r4
 800a3d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3d6:	f000 f911 	bl	800a5fc <_malloc_usable_size_r>
 800a3da:	4285      	cmp	r5, r0
 800a3dc:	4606      	mov	r6, r0
 800a3de:	d802      	bhi.n	800a3e6 <_realloc_r+0x34>
 800a3e0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a3e4:	d8f4      	bhi.n	800a3d0 <_realloc_r+0x1e>
 800a3e6:	4629      	mov	r1, r5
 800a3e8:	4640      	mov	r0, r8
 800a3ea:	f7ff f9b3 	bl	8009754 <_malloc_r>
 800a3ee:	4607      	mov	r7, r0
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	d0ec      	beq.n	800a3ce <_realloc_r+0x1c>
 800a3f4:	42b5      	cmp	r5, r6
 800a3f6:	462a      	mov	r2, r5
 800a3f8:	4621      	mov	r1, r4
 800a3fa:	bf28      	it	cs
 800a3fc:	4632      	movcs	r2, r6
 800a3fe:	f7fd fe84 	bl	800810a <memcpy>
 800a402:	4621      	mov	r1, r4
 800a404:	4640      	mov	r0, r8
 800a406:	f000 f8b1 	bl	800a56c <_free_r>
 800a40a:	463c      	mov	r4, r7
 800a40c:	e7e0      	b.n	800a3d0 <_realloc_r+0x1e>

0800a40e <__ascii_wctomb>:
 800a40e:	4603      	mov	r3, r0
 800a410:	4608      	mov	r0, r1
 800a412:	b141      	cbz	r1, 800a426 <__ascii_wctomb+0x18>
 800a414:	2aff      	cmp	r2, #255	@ 0xff
 800a416:	d904      	bls.n	800a422 <__ascii_wctomb+0x14>
 800a418:	228a      	movs	r2, #138	@ 0x8a
 800a41a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a41e:	601a      	str	r2, [r3, #0]
 800a420:	4770      	bx	lr
 800a422:	2001      	movs	r0, #1
 800a424:	700a      	strb	r2, [r1, #0]
 800a426:	4770      	bx	lr

0800a428 <memmove>:
 800a428:	4288      	cmp	r0, r1
 800a42a:	b510      	push	{r4, lr}
 800a42c:	eb01 0402 	add.w	r4, r1, r2
 800a430:	d902      	bls.n	800a438 <memmove+0x10>
 800a432:	4284      	cmp	r4, r0
 800a434:	4623      	mov	r3, r4
 800a436:	d807      	bhi.n	800a448 <memmove+0x20>
 800a438:	1e43      	subs	r3, r0, #1
 800a43a:	42a1      	cmp	r1, r4
 800a43c:	d008      	beq.n	800a450 <memmove+0x28>
 800a43e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a442:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a446:	e7f8      	b.n	800a43a <memmove+0x12>
 800a448:	4601      	mov	r1, r0
 800a44a:	4402      	add	r2, r0
 800a44c:	428a      	cmp	r2, r1
 800a44e:	d100      	bne.n	800a452 <memmove+0x2a>
 800a450:	bd10      	pop	{r4, pc}
 800a452:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a456:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a45a:	e7f7      	b.n	800a44c <memmove+0x24>

0800a45c <_close_r>:
 800a45c:	b538      	push	{r3, r4, r5, lr}
 800a45e:	2300      	movs	r3, #0
 800a460:	4d05      	ldr	r5, [pc, #20]	@ (800a478 <_close_r+0x1c>)
 800a462:	4604      	mov	r4, r0
 800a464:	4608      	mov	r0, r1
 800a466:	602b      	str	r3, [r5, #0]
 800a468:	f7f7 faef 	bl	8001a4a <_close>
 800a46c:	1c43      	adds	r3, r0, #1
 800a46e:	d102      	bne.n	800a476 <_close_r+0x1a>
 800a470:	682b      	ldr	r3, [r5, #0]
 800a472:	b103      	cbz	r3, 800a476 <_close_r+0x1a>
 800a474:	6023      	str	r3, [r4, #0]
 800a476:	bd38      	pop	{r3, r4, r5, pc}
 800a478:	20000528 	.word	0x20000528

0800a47c <_lseek_r>:
 800a47c:	b538      	push	{r3, r4, r5, lr}
 800a47e:	4604      	mov	r4, r0
 800a480:	4608      	mov	r0, r1
 800a482:	4611      	mov	r1, r2
 800a484:	2200      	movs	r2, #0
 800a486:	4d05      	ldr	r5, [pc, #20]	@ (800a49c <_lseek_r+0x20>)
 800a488:	602a      	str	r2, [r5, #0]
 800a48a:	461a      	mov	r2, r3
 800a48c:	f7f7 fb01 	bl	8001a92 <_lseek>
 800a490:	1c43      	adds	r3, r0, #1
 800a492:	d102      	bne.n	800a49a <_lseek_r+0x1e>
 800a494:	682b      	ldr	r3, [r5, #0]
 800a496:	b103      	cbz	r3, 800a49a <_lseek_r+0x1e>
 800a498:	6023      	str	r3, [r4, #0]
 800a49a:	bd38      	pop	{r3, r4, r5, pc}
 800a49c:	20000528 	.word	0x20000528

0800a4a0 <_read_r>:
 800a4a0:	b538      	push	{r3, r4, r5, lr}
 800a4a2:	4604      	mov	r4, r0
 800a4a4:	4608      	mov	r0, r1
 800a4a6:	4611      	mov	r1, r2
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	4d05      	ldr	r5, [pc, #20]	@ (800a4c0 <_read_r+0x20>)
 800a4ac:	602a      	str	r2, [r5, #0]
 800a4ae:	461a      	mov	r2, r3
 800a4b0:	f7f7 fa92 	bl	80019d8 <_read>
 800a4b4:	1c43      	adds	r3, r0, #1
 800a4b6:	d102      	bne.n	800a4be <_read_r+0x1e>
 800a4b8:	682b      	ldr	r3, [r5, #0]
 800a4ba:	b103      	cbz	r3, 800a4be <_read_r+0x1e>
 800a4bc:	6023      	str	r3, [r4, #0]
 800a4be:	bd38      	pop	{r3, r4, r5, pc}
 800a4c0:	20000528 	.word	0x20000528

0800a4c4 <_sbrk_r>:
 800a4c4:	b538      	push	{r3, r4, r5, lr}
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	4d05      	ldr	r5, [pc, #20]	@ (800a4e0 <_sbrk_r+0x1c>)
 800a4ca:	4604      	mov	r4, r0
 800a4cc:	4608      	mov	r0, r1
 800a4ce:	602b      	str	r3, [r5, #0]
 800a4d0:	f7f7 faec 	bl	8001aac <_sbrk>
 800a4d4:	1c43      	adds	r3, r0, #1
 800a4d6:	d102      	bne.n	800a4de <_sbrk_r+0x1a>
 800a4d8:	682b      	ldr	r3, [r5, #0]
 800a4da:	b103      	cbz	r3, 800a4de <_sbrk_r+0x1a>
 800a4dc:	6023      	str	r3, [r4, #0]
 800a4de:	bd38      	pop	{r3, r4, r5, pc}
 800a4e0:	20000528 	.word	0x20000528

0800a4e4 <_write_r>:
 800a4e4:	b538      	push	{r3, r4, r5, lr}
 800a4e6:	4604      	mov	r4, r0
 800a4e8:	4608      	mov	r0, r1
 800a4ea:	4611      	mov	r1, r2
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	4d05      	ldr	r5, [pc, #20]	@ (800a504 <_write_r+0x20>)
 800a4f0:	602a      	str	r2, [r5, #0]
 800a4f2:	461a      	mov	r2, r3
 800a4f4:	f7f7 fa8d 	bl	8001a12 <_write>
 800a4f8:	1c43      	adds	r3, r0, #1
 800a4fa:	d102      	bne.n	800a502 <_write_r+0x1e>
 800a4fc:	682b      	ldr	r3, [r5, #0]
 800a4fe:	b103      	cbz	r3, 800a502 <_write_r+0x1e>
 800a500:	6023      	str	r3, [r4, #0]
 800a502:	bd38      	pop	{r3, r4, r5, pc}
 800a504:	20000528 	.word	0x20000528

0800a508 <__assert_func>:
 800a508:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a50a:	4614      	mov	r4, r2
 800a50c:	461a      	mov	r2, r3
 800a50e:	4b09      	ldr	r3, [pc, #36]	@ (800a534 <__assert_func+0x2c>)
 800a510:	4605      	mov	r5, r0
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	68d8      	ldr	r0, [r3, #12]
 800a516:	b954      	cbnz	r4, 800a52e <__assert_func+0x26>
 800a518:	4b07      	ldr	r3, [pc, #28]	@ (800a538 <__assert_func+0x30>)
 800a51a:	461c      	mov	r4, r3
 800a51c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a520:	9100      	str	r1, [sp, #0]
 800a522:	462b      	mov	r3, r5
 800a524:	4905      	ldr	r1, [pc, #20]	@ (800a53c <__assert_func+0x34>)
 800a526:	f000 f871 	bl	800a60c <fiprintf>
 800a52a:	f000 f881 	bl	800a630 <abort>
 800a52e:	4b04      	ldr	r3, [pc, #16]	@ (800a540 <__assert_func+0x38>)
 800a530:	e7f4      	b.n	800a51c <__assert_func+0x14>
 800a532:	bf00      	nop
 800a534:	200001a0 	.word	0x200001a0
 800a538:	0800b083 	.word	0x0800b083
 800a53c:	0800b055 	.word	0x0800b055
 800a540:	0800b048 	.word	0x0800b048

0800a544 <_calloc_r>:
 800a544:	b570      	push	{r4, r5, r6, lr}
 800a546:	fba1 5402 	umull	r5, r4, r1, r2
 800a54a:	b93c      	cbnz	r4, 800a55c <_calloc_r+0x18>
 800a54c:	4629      	mov	r1, r5
 800a54e:	f7ff f901 	bl	8009754 <_malloc_r>
 800a552:	4606      	mov	r6, r0
 800a554:	b928      	cbnz	r0, 800a562 <_calloc_r+0x1e>
 800a556:	2600      	movs	r6, #0
 800a558:	4630      	mov	r0, r6
 800a55a:	bd70      	pop	{r4, r5, r6, pc}
 800a55c:	220c      	movs	r2, #12
 800a55e:	6002      	str	r2, [r0, #0]
 800a560:	e7f9      	b.n	800a556 <_calloc_r+0x12>
 800a562:	462a      	mov	r2, r5
 800a564:	4621      	mov	r1, r4
 800a566:	f7fd fd89 	bl	800807c <memset>
 800a56a:	e7f5      	b.n	800a558 <_calloc_r+0x14>

0800a56c <_free_r>:
 800a56c:	b538      	push	{r3, r4, r5, lr}
 800a56e:	4605      	mov	r5, r0
 800a570:	2900      	cmp	r1, #0
 800a572:	d040      	beq.n	800a5f6 <_free_r+0x8a>
 800a574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a578:	1f0c      	subs	r4, r1, #4
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	bfb8      	it	lt
 800a57e:	18e4      	addlt	r4, r4, r3
 800a580:	f7ff fa22 	bl	80099c8 <__malloc_lock>
 800a584:	4a1c      	ldr	r2, [pc, #112]	@ (800a5f8 <_free_r+0x8c>)
 800a586:	6813      	ldr	r3, [r2, #0]
 800a588:	b933      	cbnz	r3, 800a598 <_free_r+0x2c>
 800a58a:	6063      	str	r3, [r4, #4]
 800a58c:	6014      	str	r4, [r2, #0]
 800a58e:	4628      	mov	r0, r5
 800a590:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a594:	f7ff ba1e 	b.w	80099d4 <__malloc_unlock>
 800a598:	42a3      	cmp	r3, r4
 800a59a:	d908      	bls.n	800a5ae <_free_r+0x42>
 800a59c:	6820      	ldr	r0, [r4, #0]
 800a59e:	1821      	adds	r1, r4, r0
 800a5a0:	428b      	cmp	r3, r1
 800a5a2:	bf01      	itttt	eq
 800a5a4:	6819      	ldreq	r1, [r3, #0]
 800a5a6:	685b      	ldreq	r3, [r3, #4]
 800a5a8:	1809      	addeq	r1, r1, r0
 800a5aa:	6021      	streq	r1, [r4, #0]
 800a5ac:	e7ed      	b.n	800a58a <_free_r+0x1e>
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	b10b      	cbz	r3, 800a5b8 <_free_r+0x4c>
 800a5b4:	42a3      	cmp	r3, r4
 800a5b6:	d9fa      	bls.n	800a5ae <_free_r+0x42>
 800a5b8:	6811      	ldr	r1, [r2, #0]
 800a5ba:	1850      	adds	r0, r2, r1
 800a5bc:	42a0      	cmp	r0, r4
 800a5be:	d10b      	bne.n	800a5d8 <_free_r+0x6c>
 800a5c0:	6820      	ldr	r0, [r4, #0]
 800a5c2:	4401      	add	r1, r0
 800a5c4:	1850      	adds	r0, r2, r1
 800a5c6:	4283      	cmp	r3, r0
 800a5c8:	6011      	str	r1, [r2, #0]
 800a5ca:	d1e0      	bne.n	800a58e <_free_r+0x22>
 800a5cc:	6818      	ldr	r0, [r3, #0]
 800a5ce:	685b      	ldr	r3, [r3, #4]
 800a5d0:	4408      	add	r0, r1
 800a5d2:	6010      	str	r0, [r2, #0]
 800a5d4:	6053      	str	r3, [r2, #4]
 800a5d6:	e7da      	b.n	800a58e <_free_r+0x22>
 800a5d8:	d902      	bls.n	800a5e0 <_free_r+0x74>
 800a5da:	230c      	movs	r3, #12
 800a5dc:	602b      	str	r3, [r5, #0]
 800a5de:	e7d6      	b.n	800a58e <_free_r+0x22>
 800a5e0:	6820      	ldr	r0, [r4, #0]
 800a5e2:	1821      	adds	r1, r4, r0
 800a5e4:	428b      	cmp	r3, r1
 800a5e6:	bf01      	itttt	eq
 800a5e8:	6819      	ldreq	r1, [r3, #0]
 800a5ea:	685b      	ldreq	r3, [r3, #4]
 800a5ec:	1809      	addeq	r1, r1, r0
 800a5ee:	6021      	streq	r1, [r4, #0]
 800a5f0:	6063      	str	r3, [r4, #4]
 800a5f2:	6054      	str	r4, [r2, #4]
 800a5f4:	e7cb      	b.n	800a58e <_free_r+0x22>
 800a5f6:	bd38      	pop	{r3, r4, r5, pc}
 800a5f8:	20000524 	.word	0x20000524

0800a5fc <_malloc_usable_size_r>:
 800a5fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a600:	1f18      	subs	r0, r3, #4
 800a602:	2b00      	cmp	r3, #0
 800a604:	bfbc      	itt	lt
 800a606:	580b      	ldrlt	r3, [r1, r0]
 800a608:	18c0      	addlt	r0, r0, r3
 800a60a:	4770      	bx	lr

0800a60c <fiprintf>:
 800a60c:	b40e      	push	{r1, r2, r3}
 800a60e:	b503      	push	{r0, r1, lr}
 800a610:	4601      	mov	r1, r0
 800a612:	ab03      	add	r3, sp, #12
 800a614:	4805      	ldr	r0, [pc, #20]	@ (800a62c <fiprintf+0x20>)
 800a616:	f853 2b04 	ldr.w	r2, [r3], #4
 800a61a:	6800      	ldr	r0, [r0, #0]
 800a61c:	9301      	str	r3, [sp, #4]
 800a61e:	f000 f835 	bl	800a68c <_vfiprintf_r>
 800a622:	b002      	add	sp, #8
 800a624:	f85d eb04 	ldr.w	lr, [sp], #4
 800a628:	b003      	add	sp, #12
 800a62a:	4770      	bx	lr
 800a62c:	200001a0 	.word	0x200001a0

0800a630 <abort>:
 800a630:	2006      	movs	r0, #6
 800a632:	b508      	push	{r3, lr}
 800a634:	f000 fa82 	bl	800ab3c <raise>
 800a638:	2001      	movs	r0, #1
 800a63a:	f7f7 f9c2 	bl	80019c2 <_exit>

0800a63e <__sfputc_r>:
 800a63e:	6893      	ldr	r3, [r2, #8]
 800a640:	b410      	push	{r4}
 800a642:	3b01      	subs	r3, #1
 800a644:	2b00      	cmp	r3, #0
 800a646:	6093      	str	r3, [r2, #8]
 800a648:	da07      	bge.n	800a65a <__sfputc_r+0x1c>
 800a64a:	6994      	ldr	r4, [r2, #24]
 800a64c:	42a3      	cmp	r3, r4
 800a64e:	db01      	blt.n	800a654 <__sfputc_r+0x16>
 800a650:	290a      	cmp	r1, #10
 800a652:	d102      	bne.n	800a65a <__sfputc_r+0x1c>
 800a654:	bc10      	pop	{r4}
 800a656:	f000 b931 	b.w	800a8bc <__swbuf_r>
 800a65a:	6813      	ldr	r3, [r2, #0]
 800a65c:	1c58      	adds	r0, r3, #1
 800a65e:	6010      	str	r0, [r2, #0]
 800a660:	7019      	strb	r1, [r3, #0]
 800a662:	4608      	mov	r0, r1
 800a664:	bc10      	pop	{r4}
 800a666:	4770      	bx	lr

0800a668 <__sfputs_r>:
 800a668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a66a:	4606      	mov	r6, r0
 800a66c:	460f      	mov	r7, r1
 800a66e:	4614      	mov	r4, r2
 800a670:	18d5      	adds	r5, r2, r3
 800a672:	42ac      	cmp	r4, r5
 800a674:	d101      	bne.n	800a67a <__sfputs_r+0x12>
 800a676:	2000      	movs	r0, #0
 800a678:	e007      	b.n	800a68a <__sfputs_r+0x22>
 800a67a:	463a      	mov	r2, r7
 800a67c:	4630      	mov	r0, r6
 800a67e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a682:	f7ff ffdc 	bl	800a63e <__sfputc_r>
 800a686:	1c43      	adds	r3, r0, #1
 800a688:	d1f3      	bne.n	800a672 <__sfputs_r+0xa>
 800a68a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a68c <_vfiprintf_r>:
 800a68c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a690:	460d      	mov	r5, r1
 800a692:	4614      	mov	r4, r2
 800a694:	4698      	mov	r8, r3
 800a696:	4606      	mov	r6, r0
 800a698:	b09d      	sub	sp, #116	@ 0x74
 800a69a:	b118      	cbz	r0, 800a6a4 <_vfiprintf_r+0x18>
 800a69c:	6a03      	ldr	r3, [r0, #32]
 800a69e:	b90b      	cbnz	r3, 800a6a4 <_vfiprintf_r+0x18>
 800a6a0:	f7fc fe28 	bl	80072f4 <__sinit>
 800a6a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6a6:	07d9      	lsls	r1, r3, #31
 800a6a8:	d405      	bmi.n	800a6b6 <_vfiprintf_r+0x2a>
 800a6aa:	89ab      	ldrh	r3, [r5, #12]
 800a6ac:	059a      	lsls	r2, r3, #22
 800a6ae:	d402      	bmi.n	800a6b6 <_vfiprintf_r+0x2a>
 800a6b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6b2:	f7fd fd1a 	bl	80080ea <__retarget_lock_acquire_recursive>
 800a6b6:	89ab      	ldrh	r3, [r5, #12]
 800a6b8:	071b      	lsls	r3, r3, #28
 800a6ba:	d501      	bpl.n	800a6c0 <_vfiprintf_r+0x34>
 800a6bc:	692b      	ldr	r3, [r5, #16]
 800a6be:	b99b      	cbnz	r3, 800a6e8 <_vfiprintf_r+0x5c>
 800a6c0:	4629      	mov	r1, r5
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	f000 f938 	bl	800a938 <__swsetup_r>
 800a6c8:	b170      	cbz	r0, 800a6e8 <_vfiprintf_r+0x5c>
 800a6ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6cc:	07dc      	lsls	r4, r3, #31
 800a6ce:	d504      	bpl.n	800a6da <_vfiprintf_r+0x4e>
 800a6d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a6d4:	b01d      	add	sp, #116	@ 0x74
 800a6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6da:	89ab      	ldrh	r3, [r5, #12]
 800a6dc:	0598      	lsls	r0, r3, #22
 800a6de:	d4f7      	bmi.n	800a6d0 <_vfiprintf_r+0x44>
 800a6e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6e2:	f7fd fd03 	bl	80080ec <__retarget_lock_release_recursive>
 800a6e6:	e7f3      	b.n	800a6d0 <_vfiprintf_r+0x44>
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6ec:	2320      	movs	r3, #32
 800a6ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a6f2:	2330      	movs	r3, #48	@ 0x30
 800a6f4:	f04f 0901 	mov.w	r9, #1
 800a6f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6fc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a8a8 <_vfiprintf_r+0x21c>
 800a700:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a704:	4623      	mov	r3, r4
 800a706:	469a      	mov	sl, r3
 800a708:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a70c:	b10a      	cbz	r2, 800a712 <_vfiprintf_r+0x86>
 800a70e:	2a25      	cmp	r2, #37	@ 0x25
 800a710:	d1f9      	bne.n	800a706 <_vfiprintf_r+0x7a>
 800a712:	ebba 0b04 	subs.w	fp, sl, r4
 800a716:	d00b      	beq.n	800a730 <_vfiprintf_r+0xa4>
 800a718:	465b      	mov	r3, fp
 800a71a:	4622      	mov	r2, r4
 800a71c:	4629      	mov	r1, r5
 800a71e:	4630      	mov	r0, r6
 800a720:	f7ff ffa2 	bl	800a668 <__sfputs_r>
 800a724:	3001      	adds	r0, #1
 800a726:	f000 80a7 	beq.w	800a878 <_vfiprintf_r+0x1ec>
 800a72a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a72c:	445a      	add	r2, fp
 800a72e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a730:	f89a 3000 	ldrb.w	r3, [sl]
 800a734:	2b00      	cmp	r3, #0
 800a736:	f000 809f 	beq.w	800a878 <_vfiprintf_r+0x1ec>
 800a73a:	2300      	movs	r3, #0
 800a73c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a740:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a744:	f10a 0a01 	add.w	sl, sl, #1
 800a748:	9304      	str	r3, [sp, #16]
 800a74a:	9307      	str	r3, [sp, #28]
 800a74c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a750:	931a      	str	r3, [sp, #104]	@ 0x68
 800a752:	4654      	mov	r4, sl
 800a754:	2205      	movs	r2, #5
 800a756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a75a:	4853      	ldr	r0, [pc, #332]	@ (800a8a8 <_vfiprintf_r+0x21c>)
 800a75c:	f7fd fcc7 	bl	80080ee <memchr>
 800a760:	9a04      	ldr	r2, [sp, #16]
 800a762:	b9d8      	cbnz	r0, 800a79c <_vfiprintf_r+0x110>
 800a764:	06d1      	lsls	r1, r2, #27
 800a766:	bf44      	itt	mi
 800a768:	2320      	movmi	r3, #32
 800a76a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a76e:	0713      	lsls	r3, r2, #28
 800a770:	bf44      	itt	mi
 800a772:	232b      	movmi	r3, #43	@ 0x2b
 800a774:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a778:	f89a 3000 	ldrb.w	r3, [sl]
 800a77c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a77e:	d015      	beq.n	800a7ac <_vfiprintf_r+0x120>
 800a780:	4654      	mov	r4, sl
 800a782:	2000      	movs	r0, #0
 800a784:	f04f 0c0a 	mov.w	ip, #10
 800a788:	9a07      	ldr	r2, [sp, #28]
 800a78a:	4621      	mov	r1, r4
 800a78c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a790:	3b30      	subs	r3, #48	@ 0x30
 800a792:	2b09      	cmp	r3, #9
 800a794:	d94b      	bls.n	800a82e <_vfiprintf_r+0x1a2>
 800a796:	b1b0      	cbz	r0, 800a7c6 <_vfiprintf_r+0x13a>
 800a798:	9207      	str	r2, [sp, #28]
 800a79a:	e014      	b.n	800a7c6 <_vfiprintf_r+0x13a>
 800a79c:	eba0 0308 	sub.w	r3, r0, r8
 800a7a0:	fa09 f303 	lsl.w	r3, r9, r3
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	46a2      	mov	sl, r4
 800a7a8:	9304      	str	r3, [sp, #16]
 800a7aa:	e7d2      	b.n	800a752 <_vfiprintf_r+0xc6>
 800a7ac:	9b03      	ldr	r3, [sp, #12]
 800a7ae:	1d19      	adds	r1, r3, #4
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	9103      	str	r1, [sp, #12]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	bfbb      	ittet	lt
 800a7b8:	425b      	neglt	r3, r3
 800a7ba:	f042 0202 	orrlt.w	r2, r2, #2
 800a7be:	9307      	strge	r3, [sp, #28]
 800a7c0:	9307      	strlt	r3, [sp, #28]
 800a7c2:	bfb8      	it	lt
 800a7c4:	9204      	strlt	r2, [sp, #16]
 800a7c6:	7823      	ldrb	r3, [r4, #0]
 800a7c8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a7ca:	d10a      	bne.n	800a7e2 <_vfiprintf_r+0x156>
 800a7cc:	7863      	ldrb	r3, [r4, #1]
 800a7ce:	2b2a      	cmp	r3, #42	@ 0x2a
 800a7d0:	d132      	bne.n	800a838 <_vfiprintf_r+0x1ac>
 800a7d2:	9b03      	ldr	r3, [sp, #12]
 800a7d4:	3402      	adds	r4, #2
 800a7d6:	1d1a      	adds	r2, r3, #4
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	9203      	str	r2, [sp, #12]
 800a7dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a7e0:	9305      	str	r3, [sp, #20]
 800a7e2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a8ac <_vfiprintf_r+0x220>
 800a7e6:	2203      	movs	r2, #3
 800a7e8:	4650      	mov	r0, sl
 800a7ea:	7821      	ldrb	r1, [r4, #0]
 800a7ec:	f7fd fc7f 	bl	80080ee <memchr>
 800a7f0:	b138      	cbz	r0, 800a802 <_vfiprintf_r+0x176>
 800a7f2:	2240      	movs	r2, #64	@ 0x40
 800a7f4:	9b04      	ldr	r3, [sp, #16]
 800a7f6:	eba0 000a 	sub.w	r0, r0, sl
 800a7fa:	4082      	lsls	r2, r0
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	3401      	adds	r4, #1
 800a800:	9304      	str	r3, [sp, #16]
 800a802:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a806:	2206      	movs	r2, #6
 800a808:	4829      	ldr	r0, [pc, #164]	@ (800a8b0 <_vfiprintf_r+0x224>)
 800a80a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a80e:	f7fd fc6e 	bl	80080ee <memchr>
 800a812:	2800      	cmp	r0, #0
 800a814:	d03f      	beq.n	800a896 <_vfiprintf_r+0x20a>
 800a816:	4b27      	ldr	r3, [pc, #156]	@ (800a8b4 <_vfiprintf_r+0x228>)
 800a818:	bb1b      	cbnz	r3, 800a862 <_vfiprintf_r+0x1d6>
 800a81a:	9b03      	ldr	r3, [sp, #12]
 800a81c:	3307      	adds	r3, #7
 800a81e:	f023 0307 	bic.w	r3, r3, #7
 800a822:	3308      	adds	r3, #8
 800a824:	9303      	str	r3, [sp, #12]
 800a826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a828:	443b      	add	r3, r7
 800a82a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a82c:	e76a      	b.n	800a704 <_vfiprintf_r+0x78>
 800a82e:	460c      	mov	r4, r1
 800a830:	2001      	movs	r0, #1
 800a832:	fb0c 3202 	mla	r2, ip, r2, r3
 800a836:	e7a8      	b.n	800a78a <_vfiprintf_r+0xfe>
 800a838:	2300      	movs	r3, #0
 800a83a:	f04f 0c0a 	mov.w	ip, #10
 800a83e:	4619      	mov	r1, r3
 800a840:	3401      	adds	r4, #1
 800a842:	9305      	str	r3, [sp, #20]
 800a844:	4620      	mov	r0, r4
 800a846:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a84a:	3a30      	subs	r2, #48	@ 0x30
 800a84c:	2a09      	cmp	r2, #9
 800a84e:	d903      	bls.n	800a858 <_vfiprintf_r+0x1cc>
 800a850:	2b00      	cmp	r3, #0
 800a852:	d0c6      	beq.n	800a7e2 <_vfiprintf_r+0x156>
 800a854:	9105      	str	r1, [sp, #20]
 800a856:	e7c4      	b.n	800a7e2 <_vfiprintf_r+0x156>
 800a858:	4604      	mov	r4, r0
 800a85a:	2301      	movs	r3, #1
 800a85c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a860:	e7f0      	b.n	800a844 <_vfiprintf_r+0x1b8>
 800a862:	ab03      	add	r3, sp, #12
 800a864:	9300      	str	r3, [sp, #0]
 800a866:	462a      	mov	r2, r5
 800a868:	4630      	mov	r0, r6
 800a86a:	4b13      	ldr	r3, [pc, #76]	@ (800a8b8 <_vfiprintf_r+0x22c>)
 800a86c:	a904      	add	r1, sp, #16
 800a86e:	f7fb fe93 	bl	8006598 <_printf_float>
 800a872:	4607      	mov	r7, r0
 800a874:	1c78      	adds	r0, r7, #1
 800a876:	d1d6      	bne.n	800a826 <_vfiprintf_r+0x19a>
 800a878:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a87a:	07d9      	lsls	r1, r3, #31
 800a87c:	d405      	bmi.n	800a88a <_vfiprintf_r+0x1fe>
 800a87e:	89ab      	ldrh	r3, [r5, #12]
 800a880:	059a      	lsls	r2, r3, #22
 800a882:	d402      	bmi.n	800a88a <_vfiprintf_r+0x1fe>
 800a884:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a886:	f7fd fc31 	bl	80080ec <__retarget_lock_release_recursive>
 800a88a:	89ab      	ldrh	r3, [r5, #12]
 800a88c:	065b      	lsls	r3, r3, #25
 800a88e:	f53f af1f 	bmi.w	800a6d0 <_vfiprintf_r+0x44>
 800a892:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a894:	e71e      	b.n	800a6d4 <_vfiprintf_r+0x48>
 800a896:	ab03      	add	r3, sp, #12
 800a898:	9300      	str	r3, [sp, #0]
 800a89a:	462a      	mov	r2, r5
 800a89c:	4630      	mov	r0, r6
 800a89e:	4b06      	ldr	r3, [pc, #24]	@ (800a8b8 <_vfiprintf_r+0x22c>)
 800a8a0:	a904      	add	r1, sp, #16
 800a8a2:	f7fc f917 	bl	8006ad4 <_printf_i>
 800a8a6:	e7e4      	b.n	800a872 <_vfiprintf_r+0x1e6>
 800a8a8:	0800aede 	.word	0x0800aede
 800a8ac:	0800aee4 	.word	0x0800aee4
 800a8b0:	0800aee8 	.word	0x0800aee8
 800a8b4:	08006599 	.word	0x08006599
 800a8b8:	0800a669 	.word	0x0800a669

0800a8bc <__swbuf_r>:
 800a8bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8be:	460e      	mov	r6, r1
 800a8c0:	4614      	mov	r4, r2
 800a8c2:	4605      	mov	r5, r0
 800a8c4:	b118      	cbz	r0, 800a8ce <__swbuf_r+0x12>
 800a8c6:	6a03      	ldr	r3, [r0, #32]
 800a8c8:	b90b      	cbnz	r3, 800a8ce <__swbuf_r+0x12>
 800a8ca:	f7fc fd13 	bl	80072f4 <__sinit>
 800a8ce:	69a3      	ldr	r3, [r4, #24]
 800a8d0:	60a3      	str	r3, [r4, #8]
 800a8d2:	89a3      	ldrh	r3, [r4, #12]
 800a8d4:	071a      	lsls	r2, r3, #28
 800a8d6:	d501      	bpl.n	800a8dc <__swbuf_r+0x20>
 800a8d8:	6923      	ldr	r3, [r4, #16]
 800a8da:	b943      	cbnz	r3, 800a8ee <__swbuf_r+0x32>
 800a8dc:	4621      	mov	r1, r4
 800a8de:	4628      	mov	r0, r5
 800a8e0:	f000 f82a 	bl	800a938 <__swsetup_r>
 800a8e4:	b118      	cbz	r0, 800a8ee <__swbuf_r+0x32>
 800a8e6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a8ea:	4638      	mov	r0, r7
 800a8ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8ee:	6823      	ldr	r3, [r4, #0]
 800a8f0:	6922      	ldr	r2, [r4, #16]
 800a8f2:	b2f6      	uxtb	r6, r6
 800a8f4:	1a98      	subs	r0, r3, r2
 800a8f6:	6963      	ldr	r3, [r4, #20]
 800a8f8:	4637      	mov	r7, r6
 800a8fa:	4283      	cmp	r3, r0
 800a8fc:	dc05      	bgt.n	800a90a <__swbuf_r+0x4e>
 800a8fe:	4621      	mov	r1, r4
 800a900:	4628      	mov	r0, r5
 800a902:	f7ff f839 	bl	8009978 <_fflush_r>
 800a906:	2800      	cmp	r0, #0
 800a908:	d1ed      	bne.n	800a8e6 <__swbuf_r+0x2a>
 800a90a:	68a3      	ldr	r3, [r4, #8]
 800a90c:	3b01      	subs	r3, #1
 800a90e:	60a3      	str	r3, [r4, #8]
 800a910:	6823      	ldr	r3, [r4, #0]
 800a912:	1c5a      	adds	r2, r3, #1
 800a914:	6022      	str	r2, [r4, #0]
 800a916:	701e      	strb	r6, [r3, #0]
 800a918:	6962      	ldr	r2, [r4, #20]
 800a91a:	1c43      	adds	r3, r0, #1
 800a91c:	429a      	cmp	r2, r3
 800a91e:	d004      	beq.n	800a92a <__swbuf_r+0x6e>
 800a920:	89a3      	ldrh	r3, [r4, #12]
 800a922:	07db      	lsls	r3, r3, #31
 800a924:	d5e1      	bpl.n	800a8ea <__swbuf_r+0x2e>
 800a926:	2e0a      	cmp	r6, #10
 800a928:	d1df      	bne.n	800a8ea <__swbuf_r+0x2e>
 800a92a:	4621      	mov	r1, r4
 800a92c:	4628      	mov	r0, r5
 800a92e:	f7ff f823 	bl	8009978 <_fflush_r>
 800a932:	2800      	cmp	r0, #0
 800a934:	d0d9      	beq.n	800a8ea <__swbuf_r+0x2e>
 800a936:	e7d6      	b.n	800a8e6 <__swbuf_r+0x2a>

0800a938 <__swsetup_r>:
 800a938:	b538      	push	{r3, r4, r5, lr}
 800a93a:	4b29      	ldr	r3, [pc, #164]	@ (800a9e0 <__swsetup_r+0xa8>)
 800a93c:	4605      	mov	r5, r0
 800a93e:	6818      	ldr	r0, [r3, #0]
 800a940:	460c      	mov	r4, r1
 800a942:	b118      	cbz	r0, 800a94c <__swsetup_r+0x14>
 800a944:	6a03      	ldr	r3, [r0, #32]
 800a946:	b90b      	cbnz	r3, 800a94c <__swsetup_r+0x14>
 800a948:	f7fc fcd4 	bl	80072f4 <__sinit>
 800a94c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a950:	0719      	lsls	r1, r3, #28
 800a952:	d422      	bmi.n	800a99a <__swsetup_r+0x62>
 800a954:	06da      	lsls	r2, r3, #27
 800a956:	d407      	bmi.n	800a968 <__swsetup_r+0x30>
 800a958:	2209      	movs	r2, #9
 800a95a:	602a      	str	r2, [r5, #0]
 800a95c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a960:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a964:	81a3      	strh	r3, [r4, #12]
 800a966:	e033      	b.n	800a9d0 <__swsetup_r+0x98>
 800a968:	0758      	lsls	r0, r3, #29
 800a96a:	d512      	bpl.n	800a992 <__swsetup_r+0x5a>
 800a96c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a96e:	b141      	cbz	r1, 800a982 <__swsetup_r+0x4a>
 800a970:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a974:	4299      	cmp	r1, r3
 800a976:	d002      	beq.n	800a97e <__swsetup_r+0x46>
 800a978:	4628      	mov	r0, r5
 800a97a:	f7ff fdf7 	bl	800a56c <_free_r>
 800a97e:	2300      	movs	r3, #0
 800a980:	6363      	str	r3, [r4, #52]	@ 0x34
 800a982:	89a3      	ldrh	r3, [r4, #12]
 800a984:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a988:	81a3      	strh	r3, [r4, #12]
 800a98a:	2300      	movs	r3, #0
 800a98c:	6063      	str	r3, [r4, #4]
 800a98e:	6923      	ldr	r3, [r4, #16]
 800a990:	6023      	str	r3, [r4, #0]
 800a992:	89a3      	ldrh	r3, [r4, #12]
 800a994:	f043 0308 	orr.w	r3, r3, #8
 800a998:	81a3      	strh	r3, [r4, #12]
 800a99a:	6923      	ldr	r3, [r4, #16]
 800a99c:	b94b      	cbnz	r3, 800a9b2 <__swsetup_r+0x7a>
 800a99e:	89a3      	ldrh	r3, [r4, #12]
 800a9a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a9a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9a8:	d003      	beq.n	800a9b2 <__swsetup_r+0x7a>
 800a9aa:	4621      	mov	r1, r4
 800a9ac:	4628      	mov	r0, r5
 800a9ae:	f000 f83e 	bl	800aa2e <__smakebuf_r>
 800a9b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9b6:	f013 0201 	ands.w	r2, r3, #1
 800a9ba:	d00a      	beq.n	800a9d2 <__swsetup_r+0x9a>
 800a9bc:	2200      	movs	r2, #0
 800a9be:	60a2      	str	r2, [r4, #8]
 800a9c0:	6962      	ldr	r2, [r4, #20]
 800a9c2:	4252      	negs	r2, r2
 800a9c4:	61a2      	str	r2, [r4, #24]
 800a9c6:	6922      	ldr	r2, [r4, #16]
 800a9c8:	b942      	cbnz	r2, 800a9dc <__swsetup_r+0xa4>
 800a9ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a9ce:	d1c5      	bne.n	800a95c <__swsetup_r+0x24>
 800a9d0:	bd38      	pop	{r3, r4, r5, pc}
 800a9d2:	0799      	lsls	r1, r3, #30
 800a9d4:	bf58      	it	pl
 800a9d6:	6962      	ldrpl	r2, [r4, #20]
 800a9d8:	60a2      	str	r2, [r4, #8]
 800a9da:	e7f4      	b.n	800a9c6 <__swsetup_r+0x8e>
 800a9dc:	2000      	movs	r0, #0
 800a9de:	e7f7      	b.n	800a9d0 <__swsetup_r+0x98>
 800a9e0:	200001a0 	.word	0x200001a0

0800a9e4 <__swhatbuf_r>:
 800a9e4:	b570      	push	{r4, r5, r6, lr}
 800a9e6:	460c      	mov	r4, r1
 800a9e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9ec:	4615      	mov	r5, r2
 800a9ee:	2900      	cmp	r1, #0
 800a9f0:	461e      	mov	r6, r3
 800a9f2:	b096      	sub	sp, #88	@ 0x58
 800a9f4:	da0c      	bge.n	800aa10 <__swhatbuf_r+0x2c>
 800a9f6:	89a3      	ldrh	r3, [r4, #12]
 800a9f8:	2100      	movs	r1, #0
 800a9fa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a9fe:	bf14      	ite	ne
 800aa00:	2340      	movne	r3, #64	@ 0x40
 800aa02:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aa06:	2000      	movs	r0, #0
 800aa08:	6031      	str	r1, [r6, #0]
 800aa0a:	602b      	str	r3, [r5, #0]
 800aa0c:	b016      	add	sp, #88	@ 0x58
 800aa0e:	bd70      	pop	{r4, r5, r6, pc}
 800aa10:	466a      	mov	r2, sp
 800aa12:	f000 f849 	bl	800aaa8 <_fstat_r>
 800aa16:	2800      	cmp	r0, #0
 800aa18:	dbed      	blt.n	800a9f6 <__swhatbuf_r+0x12>
 800aa1a:	9901      	ldr	r1, [sp, #4]
 800aa1c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aa20:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aa24:	4259      	negs	r1, r3
 800aa26:	4159      	adcs	r1, r3
 800aa28:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa2c:	e7eb      	b.n	800aa06 <__swhatbuf_r+0x22>

0800aa2e <__smakebuf_r>:
 800aa2e:	898b      	ldrh	r3, [r1, #12]
 800aa30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa32:	079d      	lsls	r5, r3, #30
 800aa34:	4606      	mov	r6, r0
 800aa36:	460c      	mov	r4, r1
 800aa38:	d507      	bpl.n	800aa4a <__smakebuf_r+0x1c>
 800aa3a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aa3e:	6023      	str	r3, [r4, #0]
 800aa40:	6123      	str	r3, [r4, #16]
 800aa42:	2301      	movs	r3, #1
 800aa44:	6163      	str	r3, [r4, #20]
 800aa46:	b003      	add	sp, #12
 800aa48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa4a:	466a      	mov	r2, sp
 800aa4c:	ab01      	add	r3, sp, #4
 800aa4e:	f7ff ffc9 	bl	800a9e4 <__swhatbuf_r>
 800aa52:	9f00      	ldr	r7, [sp, #0]
 800aa54:	4605      	mov	r5, r0
 800aa56:	4639      	mov	r1, r7
 800aa58:	4630      	mov	r0, r6
 800aa5a:	f7fe fe7b 	bl	8009754 <_malloc_r>
 800aa5e:	b948      	cbnz	r0, 800aa74 <__smakebuf_r+0x46>
 800aa60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa64:	059a      	lsls	r2, r3, #22
 800aa66:	d4ee      	bmi.n	800aa46 <__smakebuf_r+0x18>
 800aa68:	f023 0303 	bic.w	r3, r3, #3
 800aa6c:	f043 0302 	orr.w	r3, r3, #2
 800aa70:	81a3      	strh	r3, [r4, #12]
 800aa72:	e7e2      	b.n	800aa3a <__smakebuf_r+0xc>
 800aa74:	89a3      	ldrh	r3, [r4, #12]
 800aa76:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aa7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa7e:	81a3      	strh	r3, [r4, #12]
 800aa80:	9b01      	ldr	r3, [sp, #4]
 800aa82:	6020      	str	r0, [r4, #0]
 800aa84:	b15b      	cbz	r3, 800aa9e <__smakebuf_r+0x70>
 800aa86:	4630      	mov	r0, r6
 800aa88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa8c:	f000 f81e 	bl	800aacc <_isatty_r>
 800aa90:	b128      	cbz	r0, 800aa9e <__smakebuf_r+0x70>
 800aa92:	89a3      	ldrh	r3, [r4, #12]
 800aa94:	f023 0303 	bic.w	r3, r3, #3
 800aa98:	f043 0301 	orr.w	r3, r3, #1
 800aa9c:	81a3      	strh	r3, [r4, #12]
 800aa9e:	89a3      	ldrh	r3, [r4, #12]
 800aaa0:	431d      	orrs	r5, r3
 800aaa2:	81a5      	strh	r5, [r4, #12]
 800aaa4:	e7cf      	b.n	800aa46 <__smakebuf_r+0x18>
	...

0800aaa8 <_fstat_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	2300      	movs	r3, #0
 800aaac:	4d06      	ldr	r5, [pc, #24]	@ (800aac8 <_fstat_r+0x20>)
 800aaae:	4604      	mov	r4, r0
 800aab0:	4608      	mov	r0, r1
 800aab2:	4611      	mov	r1, r2
 800aab4:	602b      	str	r3, [r5, #0]
 800aab6:	f7f6 ffd3 	bl	8001a60 <_fstat>
 800aaba:	1c43      	adds	r3, r0, #1
 800aabc:	d102      	bne.n	800aac4 <_fstat_r+0x1c>
 800aabe:	682b      	ldr	r3, [r5, #0]
 800aac0:	b103      	cbz	r3, 800aac4 <_fstat_r+0x1c>
 800aac2:	6023      	str	r3, [r4, #0]
 800aac4:	bd38      	pop	{r3, r4, r5, pc}
 800aac6:	bf00      	nop
 800aac8:	20000528 	.word	0x20000528

0800aacc <_isatty_r>:
 800aacc:	b538      	push	{r3, r4, r5, lr}
 800aace:	2300      	movs	r3, #0
 800aad0:	4d05      	ldr	r5, [pc, #20]	@ (800aae8 <_isatty_r+0x1c>)
 800aad2:	4604      	mov	r4, r0
 800aad4:	4608      	mov	r0, r1
 800aad6:	602b      	str	r3, [r5, #0]
 800aad8:	f7f6 ffd1 	bl	8001a7e <_isatty>
 800aadc:	1c43      	adds	r3, r0, #1
 800aade:	d102      	bne.n	800aae6 <_isatty_r+0x1a>
 800aae0:	682b      	ldr	r3, [r5, #0]
 800aae2:	b103      	cbz	r3, 800aae6 <_isatty_r+0x1a>
 800aae4:	6023      	str	r3, [r4, #0]
 800aae6:	bd38      	pop	{r3, r4, r5, pc}
 800aae8:	20000528 	.word	0x20000528

0800aaec <_raise_r>:
 800aaec:	291f      	cmp	r1, #31
 800aaee:	b538      	push	{r3, r4, r5, lr}
 800aaf0:	4605      	mov	r5, r0
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	d904      	bls.n	800ab00 <_raise_r+0x14>
 800aaf6:	2316      	movs	r3, #22
 800aaf8:	6003      	str	r3, [r0, #0]
 800aafa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aafe:	bd38      	pop	{r3, r4, r5, pc}
 800ab00:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ab02:	b112      	cbz	r2, 800ab0a <_raise_r+0x1e>
 800ab04:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab08:	b94b      	cbnz	r3, 800ab1e <_raise_r+0x32>
 800ab0a:	4628      	mov	r0, r5
 800ab0c:	f000 f830 	bl	800ab70 <_getpid_r>
 800ab10:	4622      	mov	r2, r4
 800ab12:	4601      	mov	r1, r0
 800ab14:	4628      	mov	r0, r5
 800ab16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab1a:	f000 b817 	b.w	800ab4c <_kill_r>
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d00a      	beq.n	800ab38 <_raise_r+0x4c>
 800ab22:	1c59      	adds	r1, r3, #1
 800ab24:	d103      	bne.n	800ab2e <_raise_r+0x42>
 800ab26:	2316      	movs	r3, #22
 800ab28:	6003      	str	r3, [r0, #0]
 800ab2a:	2001      	movs	r0, #1
 800ab2c:	e7e7      	b.n	800aafe <_raise_r+0x12>
 800ab2e:	2100      	movs	r1, #0
 800ab30:	4620      	mov	r0, r4
 800ab32:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ab36:	4798      	blx	r3
 800ab38:	2000      	movs	r0, #0
 800ab3a:	e7e0      	b.n	800aafe <_raise_r+0x12>

0800ab3c <raise>:
 800ab3c:	4b02      	ldr	r3, [pc, #8]	@ (800ab48 <raise+0xc>)
 800ab3e:	4601      	mov	r1, r0
 800ab40:	6818      	ldr	r0, [r3, #0]
 800ab42:	f7ff bfd3 	b.w	800aaec <_raise_r>
 800ab46:	bf00      	nop
 800ab48:	200001a0 	.word	0x200001a0

0800ab4c <_kill_r>:
 800ab4c:	b538      	push	{r3, r4, r5, lr}
 800ab4e:	2300      	movs	r3, #0
 800ab50:	4d06      	ldr	r5, [pc, #24]	@ (800ab6c <_kill_r+0x20>)
 800ab52:	4604      	mov	r4, r0
 800ab54:	4608      	mov	r0, r1
 800ab56:	4611      	mov	r1, r2
 800ab58:	602b      	str	r3, [r5, #0]
 800ab5a:	f7f6 ff22 	bl	80019a2 <_kill>
 800ab5e:	1c43      	adds	r3, r0, #1
 800ab60:	d102      	bne.n	800ab68 <_kill_r+0x1c>
 800ab62:	682b      	ldr	r3, [r5, #0]
 800ab64:	b103      	cbz	r3, 800ab68 <_kill_r+0x1c>
 800ab66:	6023      	str	r3, [r4, #0]
 800ab68:	bd38      	pop	{r3, r4, r5, pc}
 800ab6a:	bf00      	nop
 800ab6c:	20000528 	.word	0x20000528

0800ab70 <_getpid_r>:
 800ab70:	f7f6 bf10 	b.w	8001994 <_getpid>

0800ab74 <_init>:
 800ab74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab76:	bf00      	nop
 800ab78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab7a:	bc08      	pop	{r3}
 800ab7c:	469e      	mov	lr, r3
 800ab7e:	4770      	bx	lr

0800ab80 <_fini>:
 800ab80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab82:	bf00      	nop
 800ab84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab86:	bc08      	pop	{r3}
 800ab88:	469e      	mov	lr, r3
 800ab8a:	4770      	bx	lr
